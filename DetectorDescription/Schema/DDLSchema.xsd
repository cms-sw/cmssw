<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema xmlns="http://www.cern.ch/cms/DDL" 
            xmlns:ddl="http://www.cern.ch/cms/DDL"
	    xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
	    targetNamespace="http://www.cern.ch/cms/DDL" 
	    elementFormDefault="unqualified">
<!--Generated by XML Authority. Conforms to w3c http://www.w3.org/2001/XMLSchema-->
  <xsd:annotation>
    <xsd:documentation xml:lang="en">
      This schema defines the Detector Description Language (DDL) for specifying the parts, materials and positioning of component parts of a physical detector being built.  It is intended for use in simulating the detector in software, visualizing the detector, and reconstructing events off line.  High Energy Physics experiments require the building of extremely complex detectors which need to have some common source for the geometry.  The DDL is is part of the Detector Description Database (DDD) prototype which allows for any source to be used.  This XML is one such example.
    </xsd:documentation>
    <xsd:documentation xml:lang="en">
      The names of each object which is needed by the DDD allow the specification of a namespace followed by colon, then the local name.  It is important to note if you are authoring one of these XML documents that this and other rules are implied and documented below.
    </xsd:documentation>
    <xsd:documentation xml:lang="en">
      This schema document is structured as follows.  Each group of types, elements, groups (attribute or otherwise) corresponds to a major section of the schema.  Each section should be ordered in that order (types, elements, groups).
    </xsd:documentation>
  </xsd:annotation>
  
  
<!-- *************************************************************** -->
<!-- *                                                             * -->
<!-- *  Components for defining major sections of a DDL document.  * -->
<!-- *                                                             * -->
<!-- *************************************************************** -->

  
  <!-- Types -->
  
  <xsd:complexType name="DDDefinitionType">
    <xsd:annotation>
      <xsd:documentation>
        This is the main or root element of any DDL document.  Inside it, you can place any of the sections described below.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:choice minOccurs="0" maxOccurs="unbounded">
      <xsd:element ref="Section" minOccurs="0" maxOccurs="unbounded"/>

      <xsd:element ref="LogicalPart" maxOccurs="unbounded"/>

      <xsd:element ref="PosPart"/>

      <xsd:element ref="Algorithm" minOccurs="0" maxOccurs="unbounded"/>

      <xsd:element ref="ARotation" maxOccurs="unbounded"/>

      <xsd:element ref="Material" maxOccurs="unbounded"/>

      <xsd:element ref="Solid" maxOccurs="unbounded"/>

      <xsd:element ref="SpecPar" maxOccurs="unbounded"/>

      <xsd:element ref="Division" maxOccurs="unbounded"/>

      <xsd:element ref="Constant" maxOccurs="unbounded"/>
      <xsd:element ref="String" maxOccurs="unbounded"/>
      <xsd:element ref="Numeric" maxOccurs="unbounded"/>
      <xsd:element ref="Vector" maxOccurs="unbounded"/>
      <xsd:element ref="Map" maxOccurs="unbounded"/>

    </xsd:choice>
    <xsd:attribute name="ddns" use="optional" type="xsd:string"/>
  </xsd:complexType>
  <xsd:complexType name="SectionType">
    <xsd:attributeGroup ref="SectionAttributes"/>
  </xsd:complexType>
  <xsd:complexType name="LogicalPartSectionType">
    <xsd:complexContent>
      <xsd:extension base="SectionType">
        <xsd:sequence>
          <xsd:element ref="LogicalPart" maxOccurs="unbounded"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="PosPartSectionType">
    <xsd:complexContent>
      <xsd:extension base="SectionType">
        <xsd:choice minOccurs="0" maxOccurs="unbounded">
          <xsd:element ref="PosPart"/>
          <xsd:element ref="Algorithm"/>
          <xsd:element ref="Division"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="RotationSectionType">
    <xsd:complexContent>
      <xsd:extension base="SectionType">
        <xsd:sequence>
          <xsd:choice minOccurs="0" maxOccurs="unbounded">
             <xsd:element ref="ARotation"/>
          </xsd:choice>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="MaterialSectionType">
    <xsd:complexContent>
      <xsd:extension base="SectionType">
        <xsd:sequence>
          <xsd:element ref="Material" maxOccurs="unbounded"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="SolidSectionType">
    <xsd:complexContent>
      <xsd:extension base="SectionType">
        <xsd:sequence>
          <xsd:element ref="Solid" maxOccurs="unbounded"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="SpecParSectionType">
    <xsd:complexContent>
      <xsd:extension base="SectionType">
        <xsd:sequence>
          <xsd:element ref="SpecPar" maxOccurs="unbounded"/>
        </xsd:sequence>
        <xsd:attribute name="eval" type="xsd:string" use="optional"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="ConstantsSectionType">
    <xsd:complexContent>
      <xsd:extension base="SectionType">
        <xsd:choice minOccurs="0" maxOccurs="unbounded">
          <xsd:element ref="Constant"/>
          <xsd:element ref="String"/>
          <xsd:element ref="Numeric"/>
          <xsd:element ref="Vector"/>
          <xsd:element ref="Map"/>
        </xsd:choice>
        <xsd:attribute name="eval" type="xsd:string" use="optional"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

  <!-- Elements-->
  
  <xsd:element name="DDDefinition" type="DDDefinitionType">
    <!-- all sections of same type have to have unique labels-->
    <xsd:key name="ConstantsSection">
      <xsd:selector xpath="ddl:ConstantsSection"/>
      <xsd:field xpath="@label"/>
    </xsd:key>
    <xsd:key name="SolidSection">
      <xsd:selector xpath="ddl:SolidSection"/>
      <xsd:field xpath="@label"/>
    </xsd:key>
    <xsd:key name="MaterialSection">
      <xsd:selector xpath="ddl:MaterialSection"/>
      <xsd:field xpath="@label"/>
    </xsd:key>
    <xsd:key name="RotationSection">
      <xsd:selector xpath="ddl:RotationSection"/>
      <xsd:field xpath="@label"/>
    </xsd:key>
    <xsd:key name="LogicalPartSection">
      <xsd:selector xpath="ddl:LogicalPartSection"/>
      <xsd:field xpath="@label"/>
    </xsd:key>
    <xsd:key name="PosPartSection">
      <xsd:selector xpath="ddl:PosPartSection"/>
      <xsd:field xpath="@label"/>
    </xsd:key>
    <xsd:key name="SpecPartSection">
      <xsd:selector xpath="ddl:SpecPartSection"/>
      <xsd:field xpath="@label"/>
    </xsd:key>
    

    <!-- additionally, all names of items of same type have to be
         unique within DDDefintion -->
    <xsd:key name="Constant">
      <xsd:selector xpath=".//ddl:Constant"/>
      <xsd:field xpath="@name"/>
    </xsd:key>
    <xsd:key name="ElementaryMaterial">
      <xsd:selector xpath=".//ddl:ElementaryMaterial"/>
      <xsd:field xpath="@name"/>
    </xsd:key>
    <xsd:key name="CompositeMaterial">
      <xsd:selector xpath=".//ddl:CompositeMaterial"/>
      <xsd:field xpath="@name"/>
    </xsd:key>
    <xsd:key name="SpecPar">
      <xsd:selector xpath=".//ddl:SpecPar"/>
      <xsd:field xpath="@name"/>
    </xsd:key>
    <xsd:key name="LogicalPart">
      <xsd:selector xpath=".//ddl:LogicalPart"/>
      <xsd:field xpath="@name"/>
    </xsd:key>
    <xsd:key name="PosPart">
      <xsd:selector xpath=".//ddl:PosPart"/>
      <xsd:field xpath="@copyNumber"/>
      <xsd:field xpath="ddl:rParent/@name"/>
      <xsd:field xpath="ddl:rChild/@name"/>
    </xsd:key>
    <xsd:key name="Rotation">
      <xsd:selector xpath=".//ddl:RAotation"/>
      <xsd:field xpath="@name"/>
    </xsd:key>
    <xsd:key name="ReflectionRotationCMSIM">
      <xsd:selector xpath=".//ddl:ReflectionRotationCMSIM"/>
      <xsd:field xpath="@name"/>
    </xsd:key>
    <xsd:key name="Solid">
      <xsd:selector xpath="ddl:SolidSection/ddl:*"/>
      <xsd:field xpath="@name"/>
    </xsd:key>
      
  </xsd:element>  

  <xsd:element name="Section" type="SectionType" abstract="true"/>
  <xsd:element name="LogicalPartSection" type="LogicalPartSectionType" substitutionGroup="Section"/>
  <xsd:element name="PosPartSection" type="PosPartSectionType" substitutionGroup="Section"/>
  <xsd:element name="RotationSection" type="RotationSectionType" substitutionGroup="Section"/>
  <xsd:element name="MaterialSection" type="MaterialSectionType" substitutionGroup="Section"/>
  <xsd:element name="SpecParSection" type="SpecParSectionType" substitutionGroup="Section"/>
  <xsd:element name="SolidSection" type="SolidSectionType" substitutionGroup="Section"/>
  <xsd:element name="ConstantsSection" type="ConstantsSectionType" substitutionGroup="Section"/>
  
 
  <xsd:attributeGroup name="SectionAttributes">
    <xsd:attribute name="label" use="optional" type="xsd:string"/>
    <xsd:attribute name="ddns" use="optional" type="xsd:string"/>
  </xsd:attributeGroup>
  

<!-- *************************************************************** -->
<!-- *                                                             * -->
<!-- *  Components for describing ReferenceType                    * -->
<!-- *                                                             * -->
<!-- *************************************************************** -->

  <!-- Types -->

  <xsd:complexType name="ReferenceType">
    <xsd:annotation>
      <xsd:documentation>
      This type describes references between data. Six (6) reference type elements have been identified. These point respectively to: Solids, Materials, Rotations, ReflectionRotationCMSIMs and LogicalParts.  It would have been possible to use Xlink/xpointer or key/keyrefs. But xlink is a very verbose way of describing links, and key/keyrefs are only defined on one file.  The name being referred to conforms to the syntax namespace:name.  In the DDL, the namespace is the XML filename that contains the named object.  
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attributeGroup ref="ReferenceAttributes"/>
  </xsd:complexType>

  <!-- Elements -->

  <xsd:element name="rSolid" type="ReferenceType"/>
  <xsd:element name="rMaterial" type="ReferenceType"/>
  <xsd:element name="rRotation" type="ReferenceType"/>
  <xsd:element name="rReflectionRotation" type="ReferenceType"/>
  <xsd:element name="rParent" type="ReferenceType"/>
  <xsd:element name="rChild"  type="ReferenceType"/>

  <!-- Attributes -->

  <xsd:attributeGroup name="ReferenceAttributes">
    <xsd:attribute name="name" use="required" type="xsd:string"/>
  </xsd:attributeGroup>


<!-- *************************************************************** -->
<!-- *                                                             * -->
<!-- *  Components for associating things such as parameters       * -->
<!-- *  with selected parts.                                       * -->
<!-- *                                                             * -->
<!-- *************************************************************** -->

  <!-- Types -->

  <xsd:complexType name="PartSelectorType">
    <xsd:annotation>
      <xsd:documentation>
        This type describes a selection mechanism for parts.  It allows, for example, for association between a set of parameters and a set of parts.  The syntax is defined as follows:

        Path                    := "//" LogicalPartName (Element)*
        Element                 := LogicalPartNavigator | PositionedPartNavigator
        LogicalPartNavigator    := Nav TName
        TName                   := NameSpace ":" Name | Name
        PositionedPartNavigator := LogicalPartNavigator "[" CopyNumber "]"
        CopyNumber              := PositiveCopyNumber | NegativeCopyNumber
        NegativeCopyNumber      := "-" PositiveCopyNumber
        Nav                     := "//" | "/"
        PositiveCopyNumber      := ["+"] (0..9)+
        NameSpace               := StringName
        Name                    := StringName

        I'm not sure about the following description.  Basically, I want alpha-numeric names, and allow "_" (underscore)
        StringName              := Alpha (AlphaNumeric)*
        Alpha                   := (a..z) | (A..Z)
        AlphaNumeric            := Alpha | (0..9) | "_"

        // indicates "every".  For example //Ring would refer to all Parts named Ring.
        /  indicates "immediate child of".  For example //Ring[1]/CSCType1 would indicate all CSCType1 elements that are immediate children of Ring with CopyNumber 1.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attributeGroup ref="PartSelectorAttributes"/>
  </xsd:complexType>
  
  <!-- Elements -->

  <xsd:element name="PartSelector" type="PartSelectorType"/>

  <!-- Attributes -->

  <xsd:attributeGroup name="PartSelectorAttributes">
    <xsd:attribute name="path" use="required" type="xsd:string"/>
  </xsd:attributeGroup>

  
<!-- *************************************************************** -->
<!-- *                                                             * -->
<!-- *  Components for defining positioning instructions.          * -->
<!-- *                                                             * -->
<!-- *************************************************************** -->

  <!-- Types -->

  <xsd:complexType name="RotationBaseType">
    <xsd:annotation>
      <xsd:documentation>
        Rotations are defined in four ways (five if you count Reflections).  They are Rotation, RotationByAxis, RotationSequence and the old way of rotating which I now call RotationCMSIM.  The 5th would be ReflectionRotationCMSIM 
      </xsd:documentation>
    </xsd:annotation>
  </xsd:complexType>

  <xsd:complexType name="RotationType">
    <xsd:complexContent>
      <xsd:extension base="RotationBaseType">
        <xsd:attributeGroup ref="RotationAttributes"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

  <xsd:complexType name="RotationCMSIMType">
    <xsd:complexContent>
      <xsd:extension base="RotationBaseType">
        <xsd:attributeGroup ref="RotationCMSIMAttributes"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

  <xsd:complexType name="RotationByAxisType">
    <xsd:annotation>
      <xsd:documentation>
         This new rotation type allow users to specify rotations around an axis.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="RotationBaseType">
        <xsd:attributeGroup ref="RotationByAxisAttributes"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

  <xsd:complexType name="RotationSequenceType">
    <xsd:annotation>
      <xsd:documentation>
         This new rotation type allow users to specify a sequence of rotations around an axis
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="RotationBaseType">
        <xsd:sequence minOccurs="1" maxOccurs="unbounded">
          <xsd:element ref="RotationByAxis"/>
        </xsd:sequence>
        <xsd:attributeGroup ref="RotationAttributes"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

  <xsd:complexType name="TranslationType">
    <xsd:annotation>
      <xsd:documentation>
        This type is simply used to define translations for the positioning instructions.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attributeGroup ref="TranslationAttributes"/>
  </xsd:complexType>

  <xsd:simpleType name="axisType">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="x"/>
      <xsd:enumeration value="y"/>
      <xsd:enumeration value="z"/>
    </xsd:restriction>
  </xsd:simpleType>

  <!-- Elements -->

  <xsd:element name="ARotation" type="RotationBaseType" abstract="true"/>
  <xsd:element name="RotationSequence" type="RotationSequenceType" substitutionGroup="ARotation"/>
  <xsd:element name="Rotation" type="RotationCMSIMType" substitutionGroup="ARotation"/>
  <xsd:element name="RotationByAxis" type="RotationByAxisType" substitutionGroup="ARotation"/>
  <xsd:element name="ReflectionRotation" type="RotationCMSIMType" substitutionGroup="ARotation"/>
  <xsd:element name="Translation" type="TranslationType"/>
  
  <!-- Attributes -->

  <xsd:attributeGroup name="RotationAttributes">
    <xsd:attribute name="name" use="required" type="xsd:string"/>
  </xsd:attributeGroup>

  <xsd:attributeGroup name="RotationByAxisAttributes">
    <xsd:attribute name="name" use="optional" type="xsd:string"/>
    <xsd:attribute name="axis" use="required" type="axisType"/>
    <xsd:attribute name="angle" use="required" type="xsd:string"/>
  </xsd:attributeGroup>

  <xsd:attributeGroup name="RotationCMSIMAttributes">
    <xsd:attribute name="name" use="required" type="xsd:string"/>
    <xsd:attribute name="thetaX" use="required" type="angleT"/>
    <xsd:attribute name="phiX" use="required" type="angleT"/>
    <xsd:attribute name="thetaY" use="required" type="angleT"/>
    <xsd:attribute name="phiY" use="required" type="angleT"/>
    <xsd:attribute name="thetaZ" use="required" type="angleT"/>
    <xsd:attribute name="phiZ" use="required" type="angleT"/>
    <xsd:attribute name="angleUnit" use="optional" type="angleUnitT"/>
  </xsd:attributeGroup>

  <xsd:attributeGroup name="TranslationAttributes">
    <xsd:attribute name="x" use="required" type="lengthT"/>
    <xsd:attribute name="y" use="required" type="lengthT"/>
    <xsd:attribute name="z" use="required" type="lengthT"/>
    <xsd:attribute name="lengthUnit" use="optional" type="xsd:string"/>
  </xsd:attributeGroup>


<!-- *************************************************************** -->
<!-- *                                                             * -->
<!-- *  Components for defining primitive types.                   * -->
<!-- *                                                             * -->
<!-- *************************************************************** -->


<!-- Types -->
<xsd:simpleType name="lengthT">
  <xsd:annotation>
    <xsd:documentation>
      Certain primitive types are overloaded within the DDL. The reason is maintainability. When reading data it will be easier to see how certain pieces need to interpreted. For example, instead of reading a float, it is possible to see that this is a length type.
    </xsd:documentation>
  </xsd:annotation>
  <xsd:restriction base="xsd:string"/>
</xsd:simpleType>

<xsd:simpleType name="weightT">
  <xsd:restriction base="xsd:string"/>
</xsd:simpleType>

<xsd:simpleType name="densityT">
  <xsd:restriction base="xsd:string"/>
</xsd:simpleType>

<xsd:simpleType name="angleT">
  <xsd:restriction base="xsd:string"/>
</xsd:simpleType>

<xsd:simpleType name="dimensionlessT">
  <xsd:restriction base="xsd:string"/>
</xsd:simpleType>

<xsd:simpleType name="quantityT">
  <xsd:restriction base="xsd:string">
    <xsd:enumeration value="length"/>
    <xsd:enumeration value="volume"/>
    <xsd:enumeration value="mass"/>
    <xsd:enumeration value="time"/>
  </xsd:restriction>
</xsd:simpleType>

<xsd:simpleType name="lengthUnitT">
  <xsd:annotation>
    <xsd:documentation>
      Definition of units. Attached to a type, users can specify the unit related to the type. For example for length this is m. cm. or mm. If this is not specified the default DDL unit is used.
    </xsd:documentation>
  </xsd:annotation>

  <xsd:restriction base="xsd:string">
    <xsd:enumeration value="m"/>
    <xsd:enumeration value="cm"/>
    <xsd:enumeration value="mm"/>
  </xsd:restriction>
</xsd:simpleType>

<xsd:simpleType name="weightUnitT">
  <xsd:restriction base="xsd:string">
    <xsd:enumeration value="kg"/>
    <xsd:enumeration value="g"/>
    <xsd:enumeration value="mg"/>
  </xsd:restriction>
</xsd:simpleType>

<xsd:simpleType name="densityUnitT">
  <xsd:restriction base="xsd:string">
    <xsd:enumeration value="kg/m^3"/>
    <xsd:enumeration value="g/cm^3"/>
    <xsd:enumeration value="mg/cm^3"/>
  </xsd:restriction>
</xsd:simpleType>

<xsd:simpleType name="angleUnitT">
  <xsd:restriction base="xsd:string">
    <xsd:enumeration value="degree"/>
    <xsd:enumeration value="radian"/>
  </xsd:restriction>
</xsd:simpleType>


<xsd:simpleType name="unitT">
  <xsd:annotation>
    <xsd:documentation>
      The unit type describes the units that can be used if users define their own parameters attached to certain parts. This is not an exhaustive list, but tries to be as complete as possible.
    </xsd:documentation>
  </xsd:annotation>
  <xsd:restriction base="xsd:string">
    <xsd:enumeration value="ms"/> 
    <xsd:enumeration value="electronvolt"/> 
    <xsd:enumeration value="ohm"/> 
    <xsd:enumeration value="nanoampere"/> 
    <xsd:enumeration value="keV"/> 
    <xsd:enumeration value="picosecond"/> 
    <xsd:enumeration value="kelvin"/> 
    <xsd:enumeration value="nanometer"/> 
    <xsd:enumeration value="angstrom "/> 
    <xsd:enumeration value="kilometer"/> 
    <xsd:enumeration value="hertz"/> 
    <xsd:enumeration value="radian"/> 
    <xsd:enumeration value="kiloelectronvolt"/> 
    <xsd:enumeration value="perCent"/> 
    <xsd:enumeration value="kilogauss"/> 
    <xsd:enumeration value="fermi"/> 
    <xsd:enumeration value="microampere"/> 
    <xsd:enumeration value="weber"/> 
    <xsd:enumeration value="curie"/> 
    <xsd:enumeration value="ampere"/> 
    <xsd:enumeration value="megaelectronvolt"/> 
    <xsd:enumeration value="steradian"/> 
    <xsd:enumeration value="meter"/> 
    <xsd:enumeration value="watt"/> 
    <xsd:enumeration value="gauss"/> 
    <xsd:enumeration value="picofarad"/>
    <xsd:enumeration value="PeV"/>
    <xsd:enumeration value="degree"/>
    <xsd:enumeration value="teraelectronvolt"/>
    <xsd:enumeration value="picobarn"/>
    <xsd:enumeration value="TeV"/> 
    <xsd:enumeration value="cm"/>
    <xsd:enumeration value="kg"/>
    <xsd:enumeration value="millisecond"/> 
    <xsd:enumeration value="microfarad"/>
    <xsd:enumeration value="km"/>
    <xsd:enumeration value="tesla"/>
    <xsd:enumeration value="m^2"/>
    <xsd:enumeration value="m^3"/>
    <xsd:enumeration value="volt"/>
    <xsd:enumeration value="henry"/>
    <xsd:enumeration value="milliradian"/>
    <xsd:enumeration value="eplus"/> 
    <xsd:enumeration value="mole"/> 
    <xsd:enumeration value="milliampere"/>
    <xsd:enumeration value="kilovolt"/>
    <xsd:enumeration value="millifarad"/>
    <xsd:enumeration value="bar"/>
    <xsd:enumeration value="micrometer"/>
    <xsd:enumeration value="atmosphere"/>
    <xsd:enumeration value="gigaelectronvolt"/>
    <xsd:enumeration value="perMillion"/>
    <xsd:enumeration value="newton"/> 
    <xsd:enumeration value="eV"/>
    <xsd:enumeration value="milligram"/>
    <xsd:enumeration value="megavolt"/>
    <xsd:enumeration value="e_SI"/>
    <xsd:enumeration value="lumen"/>
    <xsd:enumeration value="cm^2"/>
    <xsd:enumeration value="GeV"/>
    <xsd:enumeration value="cm^3"/>
    <xsd:enumeration value="barn"/>
    <xsd:enumeration value="g"/>
    <xsd:enumeration value="megahertz"/>
    <xsd:enumeration value="gram"/>
    <xsd:enumeration value="candela"/>
    <xsd:enumeration value="nanosecond"/>
    <xsd:enumeration value="MeV"/>
    <xsd:enumeration value="nanofarad"/>
    <xsd:enumeration value="km^2"/>
    <xsd:enumeration value="km^3"/>
    <xsd:enumeration value="petaelectronvolt"/>
    <xsd:enumeration value="mm^2"/>
    <xsd:enumeration value="m"/>
    <xsd:enumeration value="mm^3"/> 
    <xsd:enumeration value="centimeter"/>
    <xsd:enumeration value="coulomb"/>
    <xsd:enumeration value="gray"/>
    <xsd:enumeration value="s"/>
    <xsd:enumeration value="pascal"/>
    <xsd:enumeration value="mg"/>
    <xsd:enumeration value="millimeter"/>
    <xsd:enumeration value="microsecond"/> 
    <xsd:enumeration value="kilogram"/>
    <xsd:enumeration value="becquerel"/>
    <xsd:enumeration value="lux"/>
    <xsd:enumeration value="mm"/>
    <xsd:enumeration value="second"/>
    <xsd:enumeration value="kilohertz"/>
    <xsd:enumeration value="farad"/>
    <xsd:enumeration value="joule"/>
    <xsd:enumeration value="dimensionless"/>
  </xsd:restriction>
</xsd:simpleType>


<!-- *************************************************************** -->
<!-- *                                                             * -->
<!-- *  Components for parameters for use in various ways.  For    * -->
<!-- *  example ParE (Parameters which can be evaluated as         * -->
<!-- *  Expressions and evaluated before being passed to the Core).* -->
<!-- *                                                             * -->
<!-- *************************************************************** -->
  
  <!-- Types -->
  
  <xsd:complexType name="ParameterType">
    <xsd:annotation>
      <xsd:documentation>
        ParameterType elements are used to specify named values for algorithmic positioning.  They are also used by client applications of the DDD to specify parameters they need for their special use of the DDD.  It allows such associated information to be attached within the DDD model so that the client application will not need to parse some other input file and synchronize that information with the parts in the detector.

        Parameter    for part specific values, used in SpecPar.  The eval attribute determines whether to evaluate the value or leave it as a string.  TO BE DEPRECATED
        String       for part specific values in SpecPar.  Never evaluated for expressions and/or constants.
        Numeric      for part specific values in SpecPar.  Evaluated always by the evaluator.
        Constant     for specifying constants that can be used in expressions (for shapes and positioning)
                     are always evaluated.  Should we just use Numeric and String in constant and again use existence of name attribute
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attributeGroup ref="ParameterAttributes"/>
  </xsd:complexType>
  
  <xsd:complexType name="ContainerType" mixed="true">
    <xsd:attributeGroup ref="ContainerAttributes"/>
  </xsd:complexType>
  
  <!-- Elements -->

  <xsd:element name="Parameter" type="ParameterType"/>
  <xsd:element name="Constant" type="ParameterType"/>
  <xsd:element name="String" type="ParameterType"/>
  <xsd:element name="Numeric" type="ParameterType"/>

  <xsd:element name="Vector" type="ContainerType"/>
  <xsd:element name="Map" type="ContainerType"/>

  <!-- Attributes -->

  <xsd:attributeGroup name="ParameterAttributes">
    <xsd:attribute name="name" use="required" type="xsd:string"/>
    <xsd:attribute name="value" use="required" type="dimensionlessT"/>
    <xsd:attribute name="eval" use="optional" type="xsd:string"/> <!-- remember to remove this after deprecation of Parameter -->
  </xsd:attributeGroup>

  <xsd:attributeGroup name="ContainerAttributes">
    <xsd:attribute name="name" use="required" type="xsd:string"/>
    <xsd:attribute name="nEntries" use="required" type="xsd:string"/>
    <xsd:attribute name="type" default="numeric" use="optional">
      <xsd:simpleType>
        <xsd:restriction base="xsd:string">
           <xsd:enumeration value="numeric"/>
           <xsd:enumeration value="string"/>
         </xsd:restriction>
      </xsd:simpleType>
    </xsd:attribute>
  </xsd:attributeGroup>

  
<!-- *************************************************************** -->
<!-- *                                                             * -->
<!-- *  Components for defining solids.  SolidType is a substitut- * -->
<!-- *  ion group fro a whole variety of shapes or solids.         * -->
<!-- *                                                             * -->
<!-- *************************************************************** -->
  
  <!-- Types -->
  
  <xsd:complexType name="SolidType">
    <xsd:annotation>
      <xsd:documentation>
      Describes the different types of solids that can be used in the definition of the detector description. Most of these descriptions are based on the GEANT (version 3 or 4) syntax. 
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attributeGroup ref="SolidAttributes"/>
  </xsd:complexType>

  <xsd:complexType name="BooleanSolidType">
    <xsd:annotation>
      <xsd:documentation>
        By moving the rSolids into attributes we allow BooleanSolidType to be more compact and to allow Rotation or Translation to be defined inside the BooleanSolidtype.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="SolidType">
        <xsd:choice>
          <xsd:sequence>
              <xsd:element ref="rSolid" minOccurs="0" maxOccurs="2"/>
              <xsd:group ref="TROptions" minOccurs="0" maxOccurs="2"/>
          </xsd:sequence>
          <!--xsd:sequence>
              <xsd:element ref="rSolid" minOccurs="0" maxOccurs="1"/>
              <xsd:group ref="TROptions" minOccurs="0" maxOccurs="2"/>
              <xsd:element ref="rSolid" minOccurs="0" maxOccurs="1"/>
          </xsd:sequence-->
          <!--xsd:sequence>
              <xsd:element ref="rSolid" minOccurs="0" maxOccurs="1"/>
              <xsd:group ref="TROptions" minOccurs="0" maxOccurs="1"/>
              <xsd:element ref="rSolid" minOccurs="0" maxOccurs="1"/>
              <xsd:group ref="TROptions" minOccurs="0" maxOccurs="1"/>
          </xsd:sequence-->
          <!--xsd:sequence>
              <xsd:group ref="TROptions" minOccurs="0" maxOccurs="2"/>
              <xsd:element ref="rSolid" minOccurs="0" maxOccurs="2"/>
          </xsd:sequence-->
         </xsd:choice>
         <xsd:attributeGroup ref="BooleanSolidAttributes"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

  <xsd:group name="TROptions">
    <xsd:choice>
        <xsd:element ref="Translation" minOccurs="0"/>
        <xsd:group ref="RotationOptions" minOccurs="0"/>
    </xsd:choice>
  </xsd:group>

  <xsd:complexType name="TrapezoidType">
    <xsd:complexContent>
      <xsd:extension base="SolidType">
        <xsd:attributeGroup ref="TrapezoidAttributes"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

  <xsd:complexType name="PseudoTrapType">
    <xsd:complexContent>
      <xsd:extension base="SolidType">
        <xsd:attributeGroup ref="PseudoTrapAttributes"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

  <xsd:complexType name="BoxType">
    <xsd:complexContent>
      <xsd:extension base="SolidType">
        <xsd:attributeGroup ref="BoxAttributes"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="ConeType">
    <xsd:complexContent>
      <xsd:extension base="SolidType">
        <xsd:attributeGroup ref="ConeAttributes"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="PolyconeType">
    <xsd:complexContent>
      <xsd:extension base="SolidType">
        <xsd:sequence>
          <xsd:choice minOccurs="1" maxOccurs="1">
            <xsd:group ref="PolyOptions"/>
          </xsd:choice>
        </xsd:sequence>
        <xsd:attributeGroup ref="PolyconeAttributes"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="ReflectionSolidType">
    <xsd:complexContent>
      <xsd:extension base="SolidType">
        <xsd:sequence>
          <xsd:element ref="rSolid" minOccurs="1" maxOccurs="1"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="ZSectionType">
    <xsd:attributeGroup ref="ZSectionAttributes"/>
  </xsd:complexType>
  <xsd:complexType name="RZPointType">
    <xsd:attributeGroup ref="RZPointAttributes"/>
  </xsd:complexType>
  <xsd:complexType name="Trd1Type">
    <xsd:complexContent>
      <xsd:extension base="SolidType">
        <xsd:attributeGroup ref="Trd1Attributes"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="TubeType">
    <xsd:complexContent>
      <xsd:extension base="SolidType">
        <xsd:attributeGroup ref="TubeAttributes"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="TubsType">
    <xsd:complexContent>
      <xsd:extension base="SolidType">
        <xsd:attributeGroup ref="TubsAttributes"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="TruncTubsType">
    <xsd:complexContent>
      <xsd:extension base="SolidType">
        <xsd:attributeGroup ref="TruncTubsAttributes"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="ShapelessSolidType">
    <xsd:complexContent>
      <xsd:extension base="SolidType"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="PolyhedraType">
    <xsd:complexContent>
      <xsd:extension base="SolidType">
        <xsd:sequence>
          <xsd:choice minOccurs="1" maxOccurs="1">
            <xsd:group ref="PolyOptions"/>
          </xsd:choice>
        </xsd:sequence>
        <xsd:attributeGroup ref="PolyhedraAttributes"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="TorusType">
    <xsd:complexContent>
      <xsd:extension base="SolidType">
        <xsd:attributeGroup ref="TorusAttributes"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="SphereType">
    <xsd:complexContent>
      <xsd:extension base="SolidType">
        <xsd:attributeGroup ref="SphereAttributes"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="OrbType">
    <xsd:complexContent>
      <xsd:extension base="SolidType">
        <xsd:attributeGroup ref="OrbAttributes"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="EllipticalTubeType">
    <xsd:complexContent>
      <xsd:extension base="SolidType">
        <xsd:attributeGroup ref="EllipticalTubeAttributes"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="EllipsoidType">
    <xsd:complexContent>
      <xsd:extension base="SolidType">
        <xsd:attributeGroup ref="EllipsoidAttributes"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="ParallelepipedType">
    <xsd:complexContent>
      <xsd:extension base="SolidType">
        <xsd:attributeGroup ref="ParallelepipedAttributes"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
 
  <!-- Elements -->
  
  <xsd:element name="Solid" type="SolidType" abstract="true"/>
  <xsd:element name="SubtractionSolid" type="BooleanSolidType" substitutionGroup="Solid"/>
  <xsd:element name="UnionSolid" type="BooleanSolidType" substitutionGroup="Solid"/>
  <xsd:element name="IntersectionSolid" type="BooleanSolidType" substitutionGroup="Solid"/>
  <xsd:element name="Trapezoid" type="TrapezoidType" substitutionGroup="Solid"/>
  <xsd:element name="PseudoTrap" type="PseudoTrapType" substitutionGroup="Solid"/>
  <xsd:element name="Box" type="BoxType" substitutionGroup="Solid"/>
  <xsd:element name="Cone" type="ConeType" substitutionGroup="Solid"/>
  <xsd:element name="Polycone" type="PolyconeType" substitutionGroup="Solid"/>
  <xsd:element name="Polyhedra" type="PolyhedraType" substitutionGroup="Solid"/>
  <xsd:element name="Trd1" type="Trd1Type" substitutionGroup="Solid"/>
  <xsd:element name="Tube" type="TubeType" substitutionGroup="Solid"/>
  <xsd:element name="Tubs" type="TubsType" substitutionGroup="Solid"/>
  <xsd:element name="TruncTubs" type="TruncTubsType" substitutionGroup="Solid"/>
  <xsd:element name="ShapelessSolid" type="ShapelessSolidType" substitutionGroup="Solid"/>
  <xsd:element name="Torus" type="TorusType" substitutionGroup="Solid"/>
  <xsd:element name="ZSection" type="ZSectionType"/>
  <xsd:element name="RZPoint" type="RZPointType"/>
  <xsd:element name="ReflectionSolid" type="ReflectionSolidType" substitutionGroup="Solid"/>
  <xsd:element name="Sphere" type="SphereType" substitutionGroup="Solid"/>
  <xsd:element name="Orb" type="OrbType" substitutionGroup="Solid"/>
  <xsd:element name="EllipticalTube" type="EllipticalTubeType" substitutionGroup="Solid"/>
  <xsd:element name="Ellipsoid" type="EllipsoidType" substitutionGroup="Solid"/>
  <xsd:element name="Parallelepiped" type="ParallelepipedType" substitutionGroup="Solid"/>

  <!-- Groups (non-Attribute) -->

  <xsd:group name="PolyOptions">
    <xsd:choice>
      <xsd:sequence>
        <xsd:element ref="RZPoint" minOccurs="2" maxOccurs="unbounded"/>
      </xsd:sequence>
      <xsd:sequence>
        <xsd:element ref="ZSection" minOccurs="2" maxOccurs="unbounded"/>
      </xsd:sequence>
    </xsd:choice>
  </xsd:group>

  <!-- Attributes -->

  <xsd:attributeGroup name="PolyhedraAttributes">
    <xsd:attribute name="numSide" use="required" type="xsd:positiveInteger"/>
    <xsd:attribute name="startPhi" use="required" type="angleT"/>
    <xsd:attribute name="deltaPhi" use="required" type="angleT"/>
    <xsd:attribute name="angleUnit" use="optional" type="angleUnitT"/>
  </xsd:attributeGroup>
  <xsd:attributeGroup name="TubsAttributes">
    <xsd:attribute name="rMin" use="required" type="lengthT"/>
    <xsd:attribute name="rMax" use="required" type="lengthT"/>
    <xsd:attribute name="dz" use="required" type="lengthT"/>
    <xsd:attribute name="startPhi" use="required" type="angleT"/>
    <xsd:attribute name="deltaPhi" use="required" type="angleT"/>
    <xsd:attribute name="lengthUnit" use="optional" type="lengthUnitT"/>
    <xsd:attribute name="angleUnit" use="optional" type="angleUnitT"/>
  </xsd:attributeGroup>
  <xsd:attributeGroup name="TruncTubsAttributes">
    <xsd:attribute name="rMin" use="required" type="lengthT"/>
    <xsd:attribute name="rMax" use="required" type="lengthT"/>
    <xsd:attribute name="zHalf" use="required" type="lengthT"/>
    <xsd:attribute name="startPhi" use="required" type="angleT"/>
    <xsd:attribute name="deltaPhi" use="required" type="angleT"/>
    <xsd:attribute name="cutAtStart" use="required" type="lengthT"/>
    <xsd:attribute name="cutAtDelta" use="required" type="lengthT"/>
    <xsd:attribute name="cutInside" use="required" type="xsd:boolean"/>
    <xsd:attribute name="lengthUnit" use="optional" type="lengthUnitT"/>
    <xsd:attribute name="angleUnit" use="optional" type="angleUnitT"/>
  </xsd:attributeGroup>
  <xsd:attributeGroup name="TubeAttributes">
    <xsd:attribute name="rMin" use="required" type="lengthT"/>
    <xsd:attribute name="rMax" use="required" type="lengthT"/>
    <xsd:attribute name="dz" use="required" type="lengthT"/>
    <xsd:attribute name="lengthUnit" use="optional" type="lengthUnitT"/>
  </xsd:attributeGroup>
  <xsd:attributeGroup name="Trd1Attributes">
    <xsd:attribute name="dx1" use="required" type="lengthT"/>
    <xsd:attribute name="dx2" use="required" type="lengthT"/>
    <xsd:attribute name="dz" use="required" type="lengthT"/>
    <xsd:attribute name="lengthUnit" use="optional" type="lengthUnitT"/>
    <xsd:attribute name="dy1" use="required" type="xsd:string"/>
    <xsd:attribute name="dy2" use="optional" type="xsd:string"/>
  </xsd:attributeGroup>
  <xsd:attributeGroup name="RZPointAttributes">
    <xsd:attribute name="r" use="required" type="lengthT"/>
    <xsd:attribute name="z" use="required" type="lengthT"/>
    <xsd:attribute name="lengthUnit" use="optional" type="lengthUnitT"/>
  </xsd:attributeGroup>
  <xsd:attributeGroup name="ZSectionAttributes">
    <xsd:attribute name="z" use="required" type="lengthT"/>
    <xsd:attribute name="rMin" use="required" type="lengthT"/>
    <xsd:attribute name="rMax" use="required" type="lengthT"/>
    <xsd:attribute name="lengthUnit" use="optional" type="lengthUnitT"/>
  </xsd:attributeGroup>
  <xsd:attributeGroup name="PolyconeAttributes">
    <xsd:attribute name="startPhi" use="required" type="angleT"/>
    <xsd:attribute name="deltaPhi" use="required" type="angleT"/>
    <xsd:attribute name="angleUnit" use="optional" type="angleUnitT"/>
  </xsd:attributeGroup>
  <xsd:attributeGroup name="ConeAttributes">
    <xsd:attribute name="dz" use="required" type="lengthT"/>
    <xsd:attribute name="rMin1" use="required" type="lengthT"/>
    <xsd:attribute name="rMax1" use="required" type="lengthT"/>
    <xsd:attribute name="rMin2" use="required" type="lengthT"/>
    <xsd:attribute name="rMax2" use="required" type="lengthT"/>
    <xsd:attribute name="lengthUnit" use="optional" type="lengthUnitT"/>
    <xsd:attribute name="startPhi" use="optional" type="angleT"/>
    <xsd:attribute name="deltaPhi" use="optional" type="angleT"/>
    <xsd:attribute name="angleUnit" use="optional" type="angleUnitT"/>
  </xsd:attributeGroup>
  <xsd:attributeGroup name="BoxAttributes">
    <xsd:attribute name="dx" use="required" type="lengthT"/>
    <xsd:attribute name="dy" use="required" type="lengthT"/>
    <xsd:attribute name="dz" use="required" type="lengthT"/>
    <xsd:attribute name="lengthUnit" use="optional" type="lengthUnitT"/>
  </xsd:attributeGroup>
  <xsd:attributeGroup name="TrapezoidAttributes">
    <xsd:attribute name="alp1" use="required" type="angleT"/>
    <xsd:attribute name="alp2" use="required" type="angleT"/>
    <xsd:attribute name="bl1" use="required" type="lengthT"/>
    <xsd:attribute name="bl2" use="required" type="lengthT"/>
    <xsd:attribute name="dz" use="required" type="lengthT"/>
    <xsd:attribute name="h1" use="required" type="lengthT"/>
    <xsd:attribute name="h2" use="required" type="lengthT"/>
    <xsd:attribute name="phi" use="optional" type="angleT"/>
    <xsd:attribute name="theta" use="optional" type="angleT"/>
    <xsd:attribute name="tl1" use="required" type="lengthT"/>
    <xsd:attribute name="tl2" use="required" type="lengthT"/>
    <xsd:attribute name="lengthUnit" use="optional" type="lengthUnitT"/>
    <xsd:attribute name="angleUnit" use="optional" type="angleUnitT"/>
  </xsd:attributeGroup>
  <xsd:attributeGroup name="PseudoTrapAttributes">
    <xsd:attribute name="dx1"      use="required" type="lengthT"/>
    <xsd:attribute name="dx2"      use="required" type="lengthT"/>
    <xsd:attribute name="dy1"      use="required" type="lengthT"/>
    <xsd:attribute name="dy2"      use="required" type="lengthT"/>
    <xsd:attribute name="dz"       use="required" type="lengthT"/>
    <xsd:attribute name="radius"   use="required" type="lengthT"/>
    <xsd:attribute name="atMinusZ" use="required" type="xsd:string"/>
  </xsd:attributeGroup>
  <xsd:attributeGroup name="TorusAttributes">
    <xsd:attribute name="innerRadius"      use="required" type="lengthT"/>
    <xsd:attribute name="outerRadius"      use="required" type="lengthT"/>
    <xsd:attribute name="torusRadius"      use="required" type="lengthT"/>
    <xsd:attribute name="startPhi"      use="required" type="lengthT"/>
    <xsd:attribute name="deltaPhi"       use="required" type="lengthT"/>
  </xsd:attributeGroup>
  <xsd:attributeGroup name="BooleanSolidAttributes">
    <xsd:attribute name="firstSolid"  use="optional" type="xsd:string"/>
    <xsd:attribute name="secondSolid" use="optional" type="xsd:string"/>
<!-- could do this... taken out!!! got ahead of myself here
    <xsd:attribute name="x" use="optional" type="lengthT"/>
    <xsd:attribute name="y" use="optional" type="lengthT"/>
    <xsd:attribute name="z" use="optional" type="lengthT"/>
    <xsd:attribute name="rotation" use="optional" type="xsd:string"/>
 -->
  </xsd:attributeGroup>
  <xsd:attributeGroup name="SphereAttributes">
    <xsd:attribute name="innerRadius" use="required" type="lengthT"/>
    <xsd:attribute name="outerRadius" use="required" type="lengthT"/>
    <xsd:attribute name="startPhi" use="required" type="angleT"/>
    <xsd:attribute name="deltaPhi" use="required" type="angleT"/>
    <xsd:attribute name="startTheta" use="required" type="angleT"/>
    <xsd:attribute name="deltaTheta" use="required" type="angleT"/>
  </xsd:attributeGroup>
  <xsd:attributeGroup name="OrbAttributes">
    <xsd:attribute name="radius" use="required" type="lengthT"/>
  </xsd:attributeGroup>
  <xsd:attributeGroup name="EllipticalTubeAttributes">
    <xsd:attribute name="xSemiAxis" use="required" type="lengthT"/>
    <xsd:attribute name="ySemiAxis" use="required" type="lengthT"/>
    <xsd:attribute name="zHeight" use="required" type="lengthT"/>
  </xsd:attributeGroup>
  <xsd:attributeGroup name="EllipsoidAttributes">
    <xsd:attribute name="xSemiAxis" use="required" type="lengthT"/>
    <xsd:attribute name="ySemiAxis" use="required" type="lengthT"/>
    <xsd:attribute name="zSemiAxis" use="required" type="lengthT"/>
    <xsd:attribute name="zBottomCut" use="optional" type="lengthT"/>
    <xsd:attribute name="zTopCut" use="optional" type="lengthT"/>
  </xsd:attributeGroup>
  <xsd:attributeGroup name="ParallelepipedAttributes">
    <xsd:attribute name="xHalf" use="required" type="lengthT"/>
    <xsd:attribute name="yHalf" use="required" type="lengthT"/>
    <xsd:attribute name="zHalf" use="required" type="angleT"/>
    <xsd:attribute name="alpha" use="required" type="angleT"/>
    <xsd:attribute name="theta" use="required" type="angleT"/>
    <xsd:attribute name="phi" use="required" type="angleT"/>
  </xsd:attributeGroup>
  <xsd:attributeGroup name="SolidAttributes">
    <xsd:attribute name="name" use="required" type="xsd:string"/>
  </xsd:attributeGroup>
  

<!-- *************************************************************** -->
<!-- *                                                             * -->
<!-- *  Components for defining materials.  This includes composite* -->
<!-- *  materials that are defined as mixtures or compounds.       * -->
<!-- *                                                             * -->
<!-- *************************************************************** -->

<!-- Types -->

<xsd:complexType name="MaterialType">
  <xsd:annotation>
    <xsd:documentation>
      There are 2 types of material that inherit from the general material element: elementary materials and composite materials. Elementary materials describe materials such as oxygen, iron, etc.. composite are mixtures of material (which can themselves also be composites)
    </xsd:documentation>
  </xsd:annotation>
  <xsd:attributeGroup ref="MaterialAttributes"/>
</xsd:complexType>

<xsd:complexType name="ElementaryMaterialType">
   <xsd:complexContent>
      <xsd:extension base="MaterialType">
         <xsd:attributeGroup ref="ElementaryMaterialAttributes"/>
      </xsd:extension>
   </xsd:complexContent>
</xsd:complexType>

<xsd:complexType name="CompositeMaterialType">
   <xsd:complexContent>
     <xsd:extension base="MaterialType">
       <xsd:sequence>
            <xsd:element ref="MaterialFraction" minOccurs="1" maxOccurs="unbounded"/>
       </xsd:sequence>
       <xsd:attributeGroup ref="CompositeMaterialAttributes"/>
     </xsd:extension>
  </xsd:complexContent>
</xsd:complexType>

<xsd:complexType name="MaterialFractionType">
  <xsd:sequence>
      <xsd:element ref="rMaterial" minOccurs="1" maxOccurs="1"/>
  </xsd:sequence>
  <xsd:attributeGroup ref="MaterialFractionAttributes"/>
</xsd:complexType>


<!-- Elements -->

<xsd:element name="Material" type="MaterialType" abstract="true"/>
<xsd:element name="ElementaryMaterial" type="ElementaryMaterialType" substitutionGroup="Material"/>
<xsd:element name="CompositeMaterial" type="CompositeMaterialType" substitutionGroup="Material"/>
<xsd:element name="MaterialFraction" type="MaterialFractionType"/>


<!-- Attributes -->

<xsd:attributeGroup name="MaterialAttributes">
   <xsd:attribute name="name" type="xsd:string" use="required"/>
   <xsd:attribute name="symbol" type="xsd:string" use="optional"/>
</xsd:attributeGroup>

<xsd:attributeGroup name="ElementaryMaterialAttributes">
  <xsd:attribute name="atomicNumber" type="xsd:integer" use="required"/>
  <xsd:attribute name="density" type="densityT" use="required"/>
  <xsd:attribute name="atomicWeight" type="weightT" use="required"/>
  <xsd:attribute name="weightUnit" type="weightUnitT" use="optional"/>
  <xsd:attribute name="lengthUnit" type="lengthUnitT" use="optional"/>
  <xsd:attribute name="densityUnit" type="densityUnitT" use="optional"/>
</xsd:attributeGroup>

<xsd:attributeGroup name="CompositeMaterialAttributes">
  <xsd:attribute name="method" use="required">
      <xsd:simpleType>
        <xsd:restriction base="xsd:string">
           <xsd:enumeration value="compound by atomic proportion"/>
           <xsd:enumeration value="mixture by weight"/>
           <xsd:enumeration value="mixture by volume"/>
         </xsd:restriction>
      </xsd:simpleType>
   </xsd:attribute>
   <xsd:attribute name="density" type="densityT" use="required"/>
   <xsd:attribute name="densityUnit" type="densityUnitT" use="optional"/>
   <xsd:attribute name="pork" use="optional"/>
</xsd:attributeGroup>

<xsd:attributeGroup name="MaterialFractionAttributes">
   <xsd:attribute name="fraction" type="dimensionlessT" use="required"/>
</xsd:attributeGroup>


<!-- *************************************************************** -->
<!-- *                                                             * -->
<!-- *  Components for defining LogicalParts which are the main    * -->
<!-- *  object we are describing with the DDL.                     * -->
<!-- *                                                             * -->
<!-- *************************************************************** -->
  
  
  <!-- Type -->
  
  <xsd:complexType name="LogicalPartType">
  <xsd:annotation>
    <xsd:documentation>
      It describes the definition of a logical part. A logicalpart definition is based on a solid and a type of material. These can either be defined "inline" or be referenced.
    </xsd:documentation>
    <xsd:documentation>
      The category attribute is used to indicate which category the LogicalPart falls into, whether it is a sensitive volume, part of the cooling system, a support structure, etc.
    </xsd:documentation>
  </xsd:annotation>

    <xsd:choice>
      <xsd:sequence>
        <xsd:group ref="SolidOptions"/>
        <xsd:group ref="MaterialOptions"/>
      </xsd:sequence>
      <xsd:sequence>
        <xsd:group ref="MaterialOptions"/>
        <xsd:group ref="SolidOptions"/>
      </xsd:sequence>
    </xsd:choice>

    <xsd:attributeGroup ref="LogicalPartAttributes"/>
  </xsd:complexType>

  <!-- Element -->
  
  <xsd:element name="LogicalPart" type="LogicalPartType"/>
  
  <!-- Groups (non-Attribute) -->

  <xsd:group name="SolidOptions">
    <xsd:choice>
      <xsd:element ref="Solid"/>
      <xsd:element ref="rSolid"/>
    </xsd:choice>
  </xsd:group>
  <xsd:group name="MaterialOptions">
    <xsd:choice>
      <xsd:element ref="Material"/>
      <xsd:element ref="rMaterial"/>
    </xsd:choice>
  </xsd:group>

  <!-- Attributes -->
  
  <xsd:attributeGroup name="LogicalPartAttributes">
    <xsd:attribute name="name" use="required" type="xsd:string"/>
    <xsd:attribute name="category" default="unspecified">
      <xsd:simpleType>
        <xsd:restriction base="xsd:string">
           <xsd:enumeration value="sensitive"/>
           <xsd:enumeration value="cable"/>
           <xsd:enumeration value="cooling"/>
           <xsd:enumeration value="support"/>
           <xsd:enumeration value="envelope"/>
           <xsd:enumeration value="unspecified"/>
         </xsd:restriction>
      </xsd:simpleType>
   </xsd:attribute>
  </xsd:attributeGroup>
  
<!-- *************************************************************** -->
<!-- *                                                             * -->
<!-- *  Algorithm                                                  * -->
<!-- *                                                             * -->
<!-- *************************************************************** -->

  <xsd:element name="Algorithm">
    <xsd:complexType>
      <xsd:sequence minOccurs="1" maxOccurs="1">
        <xsd:element ref="rParent" minOccurs="1" maxOccurs="1"/>
        <xsd:sequence minOccurs="0" maxOccurs="unbounded">
           <xsd:group ref="AlgorithmOptions"/>
        </xsd:sequence>
      </xsd:sequence>
      <xsd:attribute name="name" use="required" type="xsd:string"/>
      <xsd:attribute name="version" use="optional" type="xsd:string"/>
    </xsd:complexType>
  </xsd:element>

  <xsd:group name="AlgorithmOptions">
    <xsd:choice>
      <xsd:element ref="Numeric"/>
      <xsd:element ref="String"/>
      <xsd:element ref="Vector"/>
      <xsd:element ref="Map"/>
      <xsd:element name="Constraint">
        <xsd:complexType>
          <xsd:attribute name="path" use="required" type="xsd:string"/>
        </xsd:complexType>
      </xsd:element>
    </xsd:choice>
  </xsd:group>
  
<!-- *************************************************************** -->
<!-- *                                                             * -->
<!-- *  Division                                                  * -->
<!-- *                                                             * -->
<!-- *************************************************************** -->

  <xsd:element name="Division">
    <xsd:complexType>
      <xsd:attribute name="name" use="required" type="xsd:string"/>
      <xsd:attribute name="parent" use="required" type="xsd:string"/>
      <xsd:attribute name="axis" use="optional" type="xsd:string"/>
      <xsd:attribute name="offset" use="optional" type="lengthT"/>
      <xsd:attribute name="width" use="optional" type="lengthT"/>
      <xsd:attribute name="nReplicas" use="optional" type="lengthT"/>
    </xsd:complexType>
  </xsd:element>
  
<!-- *************************************************************** -->
<!-- *                                                             * -->
<!-- *  Components for defining PosParts, the elements which posi- * -->
<!-- *  tion the LogicalParts inside one another.                  * -->
<!-- *                                                             * -->
<!-- *************************************************************** -->
  

  <!-- Types -->

  <xsd:complexType name="PosPartType">
    <xsd:annotation>
      <xsd:documentation>
        This element type is used to position LogicalParts within one another.
        If rChild is called C, rParent is called P, Translation is called T and
        the Rotation Options are called R then the possible combinations are:
        CPTR  PTRC  RTCP  TRCP  CPT  TCP
        CPRT  PTCR  RTPC  TRPC  CPR  TPC
        CTPR  PRTC  RCTP  TCRP  CTP  PCT  CP
        CTRP  PRCT  RCPT  TCPR  CRP  PTC  PC
        CRTP  PCRT  RPCT  TPRC  RCP  PCR
        CRPT  PCTR  RPTC  TPCR  RPC  PRC

        Because of ambiguity problems the options are limited to:

        CPRT  = CPT  CPR  CP PCR  PCT  PC
        RTCP  = RCP and RTPC  = RPC  
        TPRC  = TPC
      </xsd:documentation>
    </xsd:annotation>

    <xsd:choice>
      <!--xsd:sequence>
          <xsd:group ref="PCOptions"/>
          <xsd:group ref="RotationOptions" minOccurs="0" maxOccurs="1"/>
        <xsd:element ref="Translation" minOccurs="0" maxOccurs="1"/>
      </xsd:sequence-->

      <xsd:sequence>
          <xsd:group ref="PCOptions"/>
          <xsd:group ref="TROptions" minOccurs="0" maxOccurs="2"/>
      </xsd:sequence>

      <xsd:sequence> 
        <xsd:element ref="Translation" minOccurs="1"/> <!-- TPRC -->
        <xsd:element ref="rParent" minOccurs="1"/>
        <xsd:choice minOccurs="0"> <!-- implies TPC -->
          <xsd:group ref="RotationOptions"/>
        </xsd:choice>
        <xsd:element ref="rChild" minOccurs="1"/>
      </xsd:sequence>

      <xsd:sequence>
        <xsd:choice minOccurs="1"> <!-- RTPC, RTCP -->
          <xsd:group ref="RotationOptions"/>
        </xsd:choice>
        <xsd:element ref="Translation" minOccurs="0"/> <!-- implies RPC, RCP -->
        <xsd:choice>
          <xsd:group ref="PCOptions"/>
        </xsd:choice>
      </xsd:sequence>

    </xsd:choice>

    <xsd:attributeGroup ref="PosPartAttributes"/>
  </xsd:complexType>

  <!-- Elements-->

  <xsd:element name="PosPart" type="PosPartType"/>
  
  <!-- Groups (non-Attribute) -->

  <xsd:group name="RotationOptions">
    <xsd:choice>
      <xsd:element ref="ARotation"/>
      <xsd:element ref="rRotation"/>
      <xsd:element ref="rReflectionRotation"/>
    </xsd:choice>
  </xsd:group>
  
  <xsd:group name="PCOptions">
    <xsd:choice>
      <xsd:sequence>
        <xsd:element ref="rParent" minOccurs="1"/>
        <xsd:element ref="rChild" minOccurs="1"/>
      </xsd:sequence>
      <xsd:sequence>
        <xsd:element ref="rChild" minOccurs="1"/>
        <xsd:element ref="rParent" minOccurs="1"/>
      </xsd:sequence>
    </xsd:choice>
  </xsd:group>

  <!-- Attributes -->

  <xsd:attributeGroup name="PosPartAttributes">
    <xsd:attribute name="copyNumber" use="optional" type="xsd:string"/>
  </xsd:attributeGroup>
  
  
<!-- *************************************************************** -->
<!-- *                                                             * -->
<!-- *  Components for defining Specific Parameters.               * -->
<!-- *                                                             * -->
<!-- *************************************************************** -->
  

<!-- Types -->

<xsd:complexType name="SpecParType">
  <xsd:choice>
  <xsd:sequence>
    <xsd:element ref="PartSelector" minOccurs="1" maxOccurs="unbounded"/>
    <xsd:choice minOccurs="0" maxOccurs="unbounded">
      <xsd:element ref="Parameter"/>
      <xsd:element ref="String"/>
      <xsd:element ref="Numeric"/>
      <xsd:element ref="Vector"/>
      <xsd:element ref="Map"/>
    </xsd:choice>
  </xsd:sequence>
  <!--xsd:sequence>
    <xsd:choice minOccurs="0" maxOccurs="unbounded">
      <xsd:element ref="Parameter"/>
      <xsd:element ref="String"/>
      <xsd:element ref="Numeric"/>
      <xsd:element ref="Vector"/>
      <xsd:element ref="Map"/>
    </xsd:choice>
    <xsd:element ref="PartSelector" minOccurs="1" maxOccurs="unbounded"/>
  </xsd:sequence-->
  </xsd:choice>
  <xsd:attributeGroup ref="SpecParAttributes"/>
</xsd:complexType>


<!-- Elements -->

<xsd:element name="SpecPar" type="SpecParType"/>

<!-- Attributes -->

<xsd:attributeGroup name="SpecParAttributes">
  <xsd:attribute name="name" type="xsd:string" use="required"/>
  <xsd:attribute name="eval" type="xsd:string" use="optional"/>
  <xsd:attribute name="regex" type="xsd:boolean" use="optional"/>
</xsd:attributeGroup>

</xsd:schema>
