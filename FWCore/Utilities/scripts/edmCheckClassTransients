#!  /usr/bin/env python
import string
import re
from optparse import OptionParser
import collections 

classtransients = collections.defaultdict(list)

classtransients['edm::AssociationMap'].append('transientMap_')
classtransients['edm::AssociationVector'].append('transientVector_')



class RMParser(object):
    """Parses the  ${PackageName}_xr.rootmap file looking for class declarations of edm template classes
    which contain member which must be labeled transient="true" in classes_def.xml
    """
    
    def __init__(self,filename):
        self._file = filename
        self.cnames = collections.defaultdict(list)
        self._presentClass = None
        self.readRootMap()
    def readRootMap(self):
        f = open(self._file)
        for line in f:
            cname=""
            if re.search("^class",line): cname = re.sub("class ","",line)
            if re.search("^struct",line): cname = re.sub("struct ","",line)
            for key in classtransients.keys():
               if re.search(r'^%s<' % key, cname):
                   n_name = string.join(line.split())
                   self.cnames[key].append(n_name)
        f.close()

def checkTrans(templname,name):
    c = ROOT.TClass.GetClass(name)
    if not c:
        raise RuntimeError("failed to load dictionary for class '"+name+"'. Check for typedefs in the name.")
    print "Checking "+name
    for trans in classtransients[templname]:
      tdm = c.GetDataMember(trans)
      retval = False
      if tdm : retval = tdm.IsPersistent()
      if retval == True : print "Error: field '"+trans+"' must be labeled transient=\"true\" in classes_def.xml for '"+name+"'"


#Setup the options
from optparse import OptionParser
oparser = OptionParser()
oparser.add_option("-l","--lib", dest="library",
                   help="specify the library to load. If not set classes are found using the PluginManager")
oparser.add_option("-f","--rootmap", dest="rmfile",default="./_xr.rootmap",
                   help="the _xr.rootmap file to read")

(options,args)=oparser.parse_args()

import ROOT
#Keep ROOT from trying to use X11
ROOT.gROOT.SetBatch(True)
ROOT.gROOT.ProcessLine(".autodict")
if options.library is None:
    print "Transient member check requires a specific library"
else:
    if 0 != ROOT.gSystem.Load(options.library):
        raise RuntimeError("failed to load library '"+options.library+"'")

p = RMParser(options.rmfile)

for key in p.cnames.keys():
    for value in p.cnames[key]:
        checkTrans(key,value)
