#ifndef FWCore_Utilities_ThreadSafeRegistry_icc
#define FWCore_Utilities_ThreadSafeRegistry_icc

#include "FWCore/Utilities/interface/ThreadSafeRegistry.h"

namespace edm {
  namespace detail {
    [[edm::thread_safe]] static boost::mutex registry_mutex;

    // ----------------------------------------------------------------------
    template <typename KEY, typename T, typename E>
    ThreadSafeRegistry<KEY,T,E>*
    ThreadSafeRegistry<KEY,T,E>::instance() {
      static ThreadSafeRegistry<KEY,T,E> me;
      return &me;
    }

    template <typename KEY, typename T, typename E>
    bool
    ThreadSafeRegistry<KEY,T,E>::getMapped(key_type const& k, value_type& result) const {
      bool found;
      const_iterator i;
      {
        // This scope limits the lifetime of the lock to the shorted
        // required interval.
        boost::mutex::scoped_lock lock(registry_mutex);
        i = data_.find(k);
        found = (i != data_.end());
      }
      if (found) result = i->second;
      return found;
    }

    template <typename KEY, typename T, typename E>
    typename ThreadSafeRegistry<KEY,T,E>::value_type const*
    ThreadSafeRegistry<KEY,T,E>::getMapped(key_type const& k) const {
      bool found;
      const_iterator i;
      {
         // This scope limits the lifetime of the lock to the shorted
         // required interval.
         boost::mutex::scoped_lock lock(registry_mutex);
         i = data_.find(k);
         found = (i != data_.end());
      }
      return found ? &(i->second) : static_cast<value_type const*> (0);
    }

    template <typename KEY, typename T, typename E>
    bool
    ThreadSafeRegistry<KEY,T,E>::insertMapped(value_type const& v) {
      bool newly_added = false;
      boost::mutex::scoped_lock lock(registry_mutex);

      key_type id = v.id();
      if (data_.find(id) == data_.end()) {
          data_[id] = v;
          newly_added = true;
      }
      return newly_added;
    }

  } // namespace detail
} // namespace edm

// To be used to explicitly instanciate the template code and
// static variables, so that they work even in the case of hidden symbol visibility
// in plugins.
#define DEFINE_THREAD_SAFE_REGISTRY_INSTANCE(X) \
  namespace edm { namespace detail { \
  template ThreadSafeRegistry<X::key_type,X::value_type,X::extra_type> *\
             ThreadSafeRegistry<X::key_type,X::value_type,X::extra_type>::instance(); \
  template bool ThreadSafeRegistry<X::key_type,X::value_type,X::extra_type>::getMapped(X::key_type const &, X::value_type &) const;\
  template X::value_type const *ThreadSafeRegistry<X::key_type,X::value_type,X::extra_type>::getMapped(X::key_type const &) const;\
  template bool ThreadSafeRegistry<X::key_type,X::value_type,X::extra_type>::insertMapped(X::value_type const &); \
  }}

#endif //  FWCore_Utilities_ThreadSafeRegistry_icc
