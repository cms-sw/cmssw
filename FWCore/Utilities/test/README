How to make 'scram b runtests' run your shell script...

Please note this is a hack, necessary only until 'scram b runtests'
can directly run a shell script.

Here are the necessary items:

 1. Write a source (.cpp) file that invokes the RUNTEST macro. Note
 this is a C++ macro, not a CINT macro. The contents of your file
 should be the following:

------------------------------------------------------------ 
#include "FWCore/Utilities/interface/TestHelper.h"
RUNTEST()
------------------------------------------------------------

 2. Add a binary target to your BuildFile that will build and run this
 program, passing it the appropriate arguments. If your program name
 is TestHelper (it should not be; you should name it
 'SubsystemPackagesMeaningfulName_t')

  <bin file=TestHelper_t.cpp> 
     <flags TEST_RUNNER_ARGS=" /bin/bash FWCore/Utilities/test one.sh two.sh">
  </bin>

The list of arguments in this target is
   ' <shell name> <current directory name> <script1> ...'
where

  a) shell name = the path to the shell you want (use bash!)

  b) current directory name = the name of the current directory (the
      system isn't smart enough to figure this out)

  c) script1 ... is a sequence (of any length, subject to shell line
     line restrictions) of the names of shell scripts to run.

  3. Generally, you will have these shell scripts run binaries. These
  shell scripts will have supplied to them several environment
  variables:

  a) LOCAL_TEST_DIR: The directory where the test source code is.
  b) LOCAL_TMP_DIR: The directory in which to create temporary files.
  c) LOCAL_TOP_DIR: The directory that is the top of your local git
     sandbox.
  d) LOCAL_TEST_BIN: The directory in which your test binary is
     found.

