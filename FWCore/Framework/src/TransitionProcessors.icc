//
//  TransitionProcessors.cpp
//
//  This file is intended to be included into other source files.
//  It was split into its own file to allow easier testing.
//
//  Created by Chris Jones on 6/29/17.
//
//

//Transition processing helpers

struct FileResources {
  FileResources(EventProcessor& iEP):
  ep_(iEP) {}
  
  
  ~FileResources() {
    try {
      ep_.respondToCloseInputFile();
      ep_.closeInputFile(cleaningUpAfterException_);
      ep_.closeOutputFiles();
    } catch(...) {
      if(cleaningUpAfterException_ or not ep_.setDeferredException(std::current_exception()) ) {
        std::string message("Another exception was caught while trying to clean up files after the primary fatal exception.");
        ep_.setExceptionMessageFiles(message);
      }
    }
  }
  
  void normalEnd() {
    cleaningUpAfterException_ = false;
  }
  
  EventProcessor& ep_;
  bool cleaningUpAfterException_ = true;
};

struct RunResources {
  RunResources(EventProcessor& iEP, edm::ProcessHistoryID iHist,edm::RunNumber_t iRun) noexcept:
  ep_(iEP), history_(iHist), run_(iRun){}
  
  ~RunResources() noexcept {
    try {
      if(success_) {
        //If we skip empty runs, this would be called conditionally
        ep_.endRun(processHistoryID(), run(), cleaningUpAfterException_);
      
      
        ep_.writeRun(processHistoryID(), run());
      }
      ep_.deleteRunFromCache(processHistoryID(), run());
    }
    catch(...) {
      if(cleaningUpAfterException_ or not ep_.setDeferredException(std::current_exception())) {
        std::string message("Another exception was caught while trying to clean up runs after the primary fatal exception.");
        ep_.setExceptionMessageRuns(message);
      }
    }
    
  }
  
  edm::ProcessHistoryID processHistoryID() const {
    return history_;
  }
  
  edm::RunNumber_t run() const {
    return run_;
  }
  
  void normalEnd() {
    cleaningUpAfterException_ = false;
  }

  void succeeded() {
    success_ = true;
  }
  
  EventProcessor& ep_;
  edm::ProcessHistoryID history_;
  edm::RunNumber_t run_;
  bool cleaningUpAfterException_ = true;
  bool success_ = false;
};

struct LumiResources {
  LumiResources(std::shared_ptr<RunResources> run, edm::LuminosityBlockNumber_t lumi) noexcept :
  run_(std::move(run)),
  lumi_(lumi) {}
  
  ~LumiResources() noexcept {
    try {
      if (success_) {
      
        //If we skip empty lumis, this would be called conditionally
        run_->ep_.endLumi(processHistoryID(), run(), lumi(), cleaningUpAfterException_);
      
      
        run_->ep_.writeLumi(processHistoryID(), run(), lumi());
      }

      run_->ep_.deleteLumiFromCache(processHistoryID(), run(), lumi());
      
    } catch(...) {
      if(cleaningUpAfterException_ or not run_->ep_.setDeferredException(std::current_exception())) {
        std::string message("Another exception was caught while trying to clean up lumis after the primary fatal exception.");
        run_->ep_.setExceptionMessageLumis(message);
      }
    }
    
  }
  
  edm::ProcessHistoryID processHistoryID() const {
    return run_->processHistoryID();
  }
  edm::RunNumber_t run() const {
    return run_->run();
  }
  edm::LuminosityBlockNumber_t lumi() const {
    return lumi_;
  }
  
  void normalEnd() {
    cleaningUpAfterException_ = false;
  }

  void succeeded() {
    success_ = true;
  }

  std::shared_ptr<RunResources> run_;
  edm::LuminosityBlockNumber_t lumi_;
  bool cleaningUpAfterException_ = true;
  bool success_ = false;
};

struct EventResources {
  unsigned long long event_;
  std::shared_ptr<LumiResources> lumi_;
};

class EventsInLumiProcessor {
public:
  EventsInLumiProcessor(){}
  
  edm::InputSource::ItemType processEvents(EventProcessor& iEP, std::shared_ptr<LumiResources> iLumi) {
    auto ret = iEP.readAndProcessEvents();
    if(iEP.shouldWeStop()) {
      //looper requested stopping event processing
      return edm::InputSource::IsStop;
    }
    while( ret == edm::InputSource::IsSynchronize ) {
      ret = iEP.nextTransitionType();
    }
    return ret;
  }
  
private:
  //void readEvent(StreamID, InputSource& );
  //void processEvent(StreamID, InputSource& , std::shared_ptr<LumiResources> ) {
  //
  //}
};

class LumisInRunProcessor {
public:
  edm::InputSource::ItemType processLumis(EventProcessor& iEP, std::shared_ptr<RunResources> iRun) {
    bool finished = false;
    auto nextTransition = edm::InputSource::IsLumi;
    do {
      switch(nextTransition) {
        case edm::InputSource::IsLumi:
        {
          processLumi(iEP,iRun);
          nextTransition = iEP.nextTransitionType();
          break;
        }
        case edm::InputSource::IsEvent:
        {
          nextTransition = events_.processEvents(iEP,currentLumi_);
          break;
        }
        default:
          finished = true;
      }
      
    } while(not finished);
    return nextTransition;
  }
  
  void normalEnd() {
    if (currentLumi_) {
      currentLumi_->normalEnd();
    }
    currentLumi_.reset();
  }
private:
  
  void processLumi(EventProcessor& iEP, std::shared_ptr<RunResources> iRun) {
    auto lumiID = iEP.nextLuminosityBlockID();
    if ( (not currentLumi_) or
        currentLumi_->run_.get() != iRun.get() or
        currentLumi_->lumi() != lumiID) {
      //switching to a different lumi
      if(currentLumi_) {
        currentLumi_->normalEnd();
      }
      currentLumi_ = std::make_shared<LumiResources>(iRun,lumiID);
      auto id = iEP.readLuminosityBlock();
      assert((id >= 0) and (static_cast<unsigned int>(id) == lumiID));
      iEP.beginLumi(currentLumi_->processHistoryID(), currentLumi_->run(), currentLumi_->lumi());
      //only if we succeed at beginLumi should we run endLumi
      currentLumi_->succeeded();
    } else {
      //merge
      auto id = iEP.readAndMergeLumi();
      assert((id >= 0) and (static_cast<unsigned int>(id) == lumiID) );
    }
  }
  
  std::shared_ptr<LumiResources> currentLumi_;
  EventsInLumiProcessor events_;
  
};

class RunsInFileProcessor {
public:
  edm::InputSource::ItemType processRuns(EventProcessor& iEP) {
    bool finished = false;
    auto nextTransition = edm::InputSource::IsRun;
    do {
      switch(nextTransition) {
        case edm::InputSource::IsRun:
        {
          processRun(iEP);
          nextTransition = iEP.nextTransitionType();
          break;
        }
        case edm::InputSource::IsLumi:
        {
          nextTransition = lumis_.processLumis(iEP, currentRun_);
          break;
        }
        default:
          finished=true;
      }
    } while(not finished);
    return nextTransition;
  }
  
  void normalEnd() {
    lumis_.normalEnd();
    if(currentRun_) {
      currentRun_->normalEnd();
    }
    currentRun_.reset();
  }
  
private:
  void processRun(EventProcessor& iEP) {
    auto runID = iEP.nextRunID();
    if ( (not currentRun_) or
        (currentRun_->processHistoryID() !=runID.first) or
        (currentRun_->run() != runID.second) ) {
      if(currentRun_) {
        //Both the current run and lumi end here
        lumis_.normalEnd();
        currentRun_->normalEnd();
      }
      currentRun_ = std::make_shared<RunResources>(iEP,runID.first,runID.second);
      iEP.readRun();
      iEP.beginRun(runID.first,runID.second);
      //only if we succeed at beginRun should we run endRun
      currentRun_->succeeded();
    } else {
      //merge
      iEP.readAndMergeRun();
    }
  }
  
  std::shared_ptr<RunResources> currentRun_;
  LumisInRunProcessor lumis_;
  
};




class FilesProcessor {
public:
  explicit FilesProcessor(bool iDoNotMerge): doNotMerge_(iDoNotMerge) {}
  
  edm::InputSource::ItemType processFiles(EventProcessor& iEP) {
    bool finished = false;
    auto nextTransition = iEP.nextTransitionType();
    if(nextTransition != edm::InputSource::IsFile) return nextTransition;
    do {
      switch(nextTransition) {
        case edm::InputSource::IsFile:
        {
          processFile(iEP);
          nextTransition = iEP.nextTransitionType();
          break;
        }
        case edm::InputSource::IsRun:
        {
          nextTransition = runs_.processRuns(iEP);
          break;
        }
        default:
          finished = true;
      }
    } while(not finished);
    runs_.normalEnd();
    
    return nextTransition;
  }
  
  void normalEnd() {
    runs_.normalEnd();
    if(filesOpen_) {
      filesOpen_->normalEnd();
      filesOpen_.reset();
    }
  }
  
private:
  void processFile(EventProcessor& iEP) {
    if(not filesOpen_) {
      readFirstFile(iEP);
    } else {
      if(shouldWeCloseOutput(iEP)) {
        //Need to end this run on the file boundary
        runs_.normalEnd();
        gotoNewInputAndOutputFiles(iEP);
      } else {
        gotoNewInputFile(iEP);
      }
    }
  }
  
  void readFirstFile(EventProcessor& iEP) {
    iEP.readFile();
    iEP.respondToOpenInputFile();
    
    iEP.openOutputFiles();
    filesOpen_ = std::make_unique<FileResources>(iEP);
  }
  
  bool shouldWeCloseOutput(EventProcessor& iEP) {
    if(doNotMerge_) return true;
    return iEP.shouldWeCloseOutput();
  }
  
  void gotoNewInputFile(EventProcessor& iEP) {
    iEP.respondToCloseInputFile();
    iEP.closeInputFile(false);
    
    iEP.readFile();
    iEP.respondToOpenInputFile();
  }
  
  void gotoNewInputAndOutputFiles(EventProcessor& iEP) {
    iEP.respondToCloseInputFile();
    iEP.closeInputFile(false);
    
    iEP.closeOutputFiles();
    
    iEP.readFile();
    iEP.respondToOpenInputFile();
    
    iEP.openOutputFiles();
  }
  
  std::unique_ptr<FileResources> filesOpen_;
  RunsInFileProcessor runs_;
  bool doNotMerge_;
};

