
#include "PhysicsTools/PatUtils/interface/JetSelector.h"
#include "DataFormats/Common/interface/RefToBase.h"


//______________________________________________________________________________
template<typename JetType>
pat::JetSelector<JetType>::JetSelector( const pat::JetSelection& config ) :
  config_( config )
{

  if (config_.selectionType=="custom") {
    CaloJetSelector_ = std::make_unique<CaloJetSelector>(config);
    //PFJetSelector_ = std::make_unique<PFJetSelector>(config);
  }

}


//______________________________________________________________________________
template<typename JetType>
const pat::ParticleStatus 
pat::JetSelector<JetType>::filter( const unsigned int&        index, 
                              const edm::View<JetType>& Jets,
                              const JetValueMap * JetMap
                          ) const
{

  ParticleStatus result = BAD;

  if (config_.selectionType=="none")  {

    result = GOOD;
  }
  else if (config_.selectionType=="JetID" && JetMap!=0)  {
    const double jetIDresult = (*JetMap)[ Jets.refAt(index) ];
    if ( jetIDresult > config_.value ) result = GOOD;
    else result = BAD;
  } 
  else if ( config_.selectionType == "custom" ) {

    const JetType& Jet = Jets[index];
    const reco::CaloJet * caloJet = 0;
    const reco::PFJet   * pfJet   = 0;
    caloJet = dynamic_cast<const reco::CaloJet*>(&Jet);
    ///specific selection for CaloJets
    if (caloJet) result = CaloJetSelector_->filter( *caloJet );
    else {
      ///specific selection for PFJets
      pfJet   = dynamic_cast<const reco::PFJet*>(  &Jet);
      //FIXME: not implemented yet!
      //if (pfJet) result = PFJetSelector_->filter(  *pfJet);
    }

  }  else
    // Throw! unknown configuration
    throw edm::Exception(edm::errors::Configuration) 
      << "Unknown Jet ID selection " << config_.selectionType;


  return result;
}

