#ifndef PhysicsTools_MVAComputer_zstream_icc
#define PhysicsTools_MVAComputer_zstream_icc
// -*- C++ -*-
//
// Package:     Discriminator
//

//
// Author:	Christophe Saout <christophe.saout@cern.ch>
// Created:     Sat Apr 24 15:18 CEST 2007
// $Id: zstream.icc,v 1.4 2011/05/23 13:41:03 eulisse Exp $
//

#include <iostream>
#include <algorithm>
#include <cstring>
#include <vector>

#include <zlib.h>

#include "PhysicsTools/MVAComputer/interface/zstream.h"

namespace ext {

template<typename Item_t, typename Traits_t, typename Allocator_t>
basic_ozstreambuf<Item_t, Traits_t, Allocator_t>::basic_ozstreambuf(
						OStream_t *os, int level) :
	os(os), outputBuffer(4096), buffer(4096)
{
	zipStream.zalloc = (alloc_func)0;
	zipStream.zfree = (free_func)0;
	zipStream.next_in = 0;
	zipStream.avail_in = 0;
	zipStream.avail_out = 0;
	zipStream.next_out = 0;

	err = deflateInit(&zipStream, level);

	this->setp(&buffer.front(), &buffer.back());
}

template<typename Item_t, typename Traits_t, typename Allocator_t>
basic_ozstreambuf<Item_t, Traits_t, Allocator_t>::~basic_ozstreambuf()
{
	flush();
	os->flush();
	err = deflateEnd(&zipStream);
}

template<typename Item_t, typename Traits_t, typename Allocator_t>
int basic_ozstreambuf<Item_t, Traits_t, Allocator_t>::sync()
{
	if (pptr() && pptr() > pbase() &&
	    traits_type::eq_int_type(overflow(traits_type::eof()),
	                             traits_type::eof()))
		return -1;
	return 0;
}

template<typename Item_t, typename Traits_t, typename Allocator_t>
typename basic_ozstreambuf<Item_t, Traits_t, Allocator_t>::int_type
basic_ozstreambuf<Item_t, Traits_t, Allocator_t>::overflow(
	typename basic_ozstreambuf<Item_t, Traits_t, Allocator_t>::int_type c)
		
{
	int w = (int)(pptr() - pbase());
	if (!traits_type::eq_int_type(c, traits_type::eof())) {
		*pptr() = c;
		w++;
	}
	if (zipToStream(pbase(), w)) {
		this->setp(pbase(), epptr());
		return c;
	}
	return traits_type::eof();
}

template<typename Item_t, typename Traits_t, typename Allocator_t>
bool basic_ozstreambuf<Item_t, Traits_t, Allocator_t>::zipToStream(
	typename basic_ozstreambuf<Item_t, Traits_t, Allocator_t>::char_type *buf,
	std::streamsize size)
{
	zipStream.next_in = (byte_type*)buf;
	zipStream.avail_in = size * sizeof(char_type);
	zipStream.avail_out = outputBuffer.size();
	zipStream.next_out = &outputBuffer.front();

	do {
		err = deflate(&zipStream, 0);

		if (err == Z_OK || err == Z_STREAM_END) {
			std::streamsize written = outputBuffer.size() -
			                          zipStream.avail_out;
			os->write((const char_type*)&outputBuffer.front(),
			          written/sizeof(char_type));
			size_t remaining = written % sizeof(char_type);
			if (remaining)
				std::memcpy(&outputBuffer.front(),
				            &outputBuffer[written - remaining],
				            remaining);

			zipStream.avail_out = outputBuffer.size();
			zipStream.next_out = &outputBuffer[remaining];
		}
	} while(zipStream.avail_in && err == Z_OK);

	return err == Z_OK;
}

template<typename Item_t, typename Traits_t, typename Allocator_t>
std::streamsize basic_ozstreambuf<Item_t, Traits_t, Allocator_t>::flush()
{
	std::streamsize total = 0;

	do {
		err = deflate(&zipStream, Z_FINISH);

		if (err == Z_OK || err == Z_STREAM_END) {
			std::streamsize written = outputBuffer.size() -
			                          zipStream.avail_out;
			total += written;
			os->write((const char_type*)&outputBuffer.front(),
			          written/sizeof(char_type));
			size_t remaining = written % sizeof(char_type);
			if (remaining)
				std::memcpy(&outputBuffer.front(),
				            &outputBuffer[written - remaining],
				            remaining);

			zipStream.avail_out = outputBuffer.size();
			zipStream.next_out = &outputBuffer[remaining];
		}
	} while(err == Z_OK);

	os->flush();

	return total;
}

template<typename Item_t, typename Traits_t, typename Allocator_t>
basic_izstreambuf<Item_t, Traits_t, Allocator_t>::basic_izstreambuf(
							IStream_t *is) :
	is(is), inputBuffer(4096), buffer(4096)
{
	zipStream.zalloc = (alloc_func)0;
	zipStream.zfree = (free_func)0;

	zipStream.next_in = 0;
	zipStream.avail_in = 0;
	zipStream.avail_out = 0;
	zipStream.next_out = 0;

	err = inflateInit(&zipStream);

	this->setg(&buffer.front() + 4, &buffer.front() + 4, &buffer.front() + 4);
}

template<typename Item_t, typename Traits_t, typename Allocator_t>
size_t basic_izstreambuf<Item_t, Traits_t, Allocator_t>::fillInputBuffer()
{
	zipStream.next_in = &inputBuffer.front();
	is->read((char_type*)&inputBuffer.front(),
	         inputBuffer.size() / sizeof(char_type));
	zipStream.avail_in = is->gcount() * sizeof(char_type);
	return zipStream.avail_in;
}

template<typename Item_t, typename Traits_t, typename Allocator_t>
basic_izstreambuf<Item_t, Traits_t, Allocator_t>::~basic_izstreambuf()
{ inflateEnd(&zipStream); }

template<typename Item_t, typename Traits_t, typename Allocator_t>
typename basic_izstreambuf<Item_t, Traits_t, Allocator_t>::int_type
basic_izstreambuf<Item_t, Traits_t, Allocator_t>::underflow()
{
	if (gptr() && (gptr() < egptr()))
		return *reinterpret_cast<byte_type*>(gptr());

	int nPutback = (int)(gptr() - eback());
	if (nPutback > 4)
		nPutback = 4;
	std::memcpy(&buffer.front() + (4 - nPutback),
	            gptr() - nPutback, nPutback * sizeof(char_type));

	int size = unzipFromStream(&buffer.front() + 4,
	                           (buffer.size() - 4) * sizeof(char_type));
	if (size <= 0)
		return traits_type::eof();

	this->setg(&buffer.front() + (4 - nPutback),
	     &buffer.front() + 4,
	     &buffer.front() + (4 + size));

	return *reinterpret_cast<byte_type*>(gptr());
}

template<typename Item_t, typename Traits_t, typename Allocator_t>
std::streamsize
basic_izstreambuf<Item_t, Traits_t, Allocator_t>::unzipFromStream(
				char_type *buf, std::streamsize size)
{
	zipStream.next_out = (byte_type*)buf;
	zipStream.avail_out = size * sizeof(char_type);
	size_t count = zipStream.avail_in;

	do {
		if (!zipStream.avail_in)
			count = fillInputBuffer();

		if (zipStream.avail_in)
			err = inflate(&zipStream, Z_SYNC_FLUSH);
	} while(err == Z_OK && zipStream.avail_out && count);

	std::streamsize nRead = size - zipStream.avail_out / sizeof(char_type);

	if (err == Z_STREAM_END)
		putbackFromZStream();

	return nRead;
}

template<typename Item_t, typename Traits_t, typename Allocator_t>
void basic_izstreambuf<Item_t, Traits_t, Allocator_t>::putbackFromZStream()
{
	if (!zipStream.avail_in)
		return;

	is->clear(std::ios::goodbit);
	is->seekg(-zipStream.avail_in, std::ios_base::cur);
	zipStream.avail_in = 0;
}

} // namespace ext

#endif // PhysicsTools_MVAComputer_zstream_icc
