#ifndef PhysicsTools_MVAComputer_MVAComputer_icc
#define PhysicsTools_MVAComputer_MVAComputer_icc
// -*- C++ -*-
//
// Package:     Discriminator
//

//
// Author:	Christophe Saout <christophe.saout@cern.ch>
// Created:     Sat Apr 24 15:18 CEST 2007
// $Id: MVAComputer.icc,v 1.5 2009/06/03 09:50:14 saout Exp $
//


#include <stdlib.h>
#include <cstring>
#include <vector>

#include "PhysicsTools/MVAComputer/interface/MVAComputer.h"

namespace PhysicsTools {

// use the alloca function to allocate a variable sized array on the stack
// (since the array is small, there's really no
// need to call down to malloc for that stuff)
#ifdef alloca
#	define __TMP_ALLOC(n, type) ((type*)alloca((n) * sizeof(type)))
#else
#	define __TMP_ALLOC(n, type) ((type*)::alloca((n) * sizeof(type)))
#endif

// template method to set up the arrays for the computation arrays
//
// two central arrays are used:
// double *values: contains all actual double values of the variables
//                 multiple values of a variable are grouped together
//                 ordering of all values is according to the ascending
//                 IDs of the variables as they appear in the variable
//                 processor configuration
// int    *conf:   "configuration" array which maps the index of the
//                 variable to the offset in values where the respective
//                 values appear. The actual number of values for
//                 variable i is then (conf[i + 1] - conf[i])

template<typename Iterator_t>
double MVAComputer::eval(Iterator_t first, Iterator_t last) const
{
	unsigned int size = inputVariables.size();

	int *conf = __TMP_ALLOC(nVars + 2, int);
	std::memset(conf, 0, (nVars + 2) * sizeof(int));

	// collect information about variables:
	// * count values in input variables and store in conf array
	// * estimate maximal size of value array
	unsigned int n = 0;
	unsigned int max = nVars;
	for(Iterator_t cur = first; cur < last; ++cur) {
		int id = getVariableId(cur->getName());
		conf[id + 1]++;
		max += inputVariables[id].multiplicity + 1;
		n++;
	}

	// integrate entries conf array to compute value offsets
	unsigned int sum = 0;
	for(unsigned int i = 1; i <= size; i++) {
		unsigned int tmp = conf[i];
		conf[i] = sum;
		sum += tmp;
	}

	// allocate value array and fill input variables
	double *values = __TMP_ALLOC(max - size + 1, double);
	values[0] = 0.0;
	for(Iterator_t cur = first; cur < last; ++cur) {
		int id = getVariableId(cur->getName());
		values[conf[id + 1]++] = cur->getValue();
	}

	EvalContext ctx(values, conf, n);
	evalInternal(ctx);

	return ctx.output(output);
}

#undef __TMP_ALLOC

template<typename Iterator_t>
double MVAComputer::deriv(Iterator_t first, Iterator_t last) const
{
	unsigned int size = inputVariables.size();

	DerivContext ctx;
	ctx.conf_.resize(nVars + 2);

	// collect information about variables:
	// * count values in input variables and store in conf array
	// * estimate maximal size of value array
	unsigned int max = nVars;
	for(Iterator_t cur = first; cur < last; ++cur) {
		int id = getVariableId(cur->getName());
		ctx.conf_[id + 1]++;
		max += inputVariables[id].multiplicity + 1;
		ctx.n_++;
	}

	// integrate entries conf array to compute value offsets
	unsigned int sum = 0;
	for(unsigned int i = 1; i <= size; i++) {
		unsigned int tmp = ctx.conf_[i];
		ctx.conf_[i] = sum;
		sum += tmp;
	}

	// allocate value array and fill input variables
	ctx.values_.resize(max - size + 1);
	ctx.deriv_.reserve((max - size + 1) * ctx.n_);
	for(Iterator_t cur = first; cur < last; ++cur) {
		int id = getVariableId(cur->getName());
		ctx.values_[ctx.conf_[id + 1]++] = cur->getValue();
	}

	evalInternal(ctx);

	std::vector<double> deriv;
	double value = ctx.output(output, deriv);

	for(Iterator_t cur = first; cur < last; ++cur) {
		int id = getVariableId(cur->getName());
		cur->setValue(deriv[ctx.conf_[id]++]);
	}

	return value;
}

} // namespace PhysicsTools

#endif // PhysicsTools_MVAComputer_MVAComputer_icc
