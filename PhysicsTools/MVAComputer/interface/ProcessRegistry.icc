#ifndef PhysicsTools_Calibration_ProcessRegistry_icc
#define PhysicsTools_Calibration_ProcessRegistry_icc
// -*- C++ -*-
//
// Package:     Discriminator
// Class  :     ProcessRegistry
//

//
// Author:	Christophe Saout <christophe.saout@cern.ch>
// Created:     Sat Apr 24 15:18 CEST 2007
// $Id: ProcessRegistry.icc,v 1.6 2007/08/16 15:23:56 saout Exp $
//

#include <string>
#include <map>

#include "PhysicsTools/MVAComputer/interface/ProcessRegistry.h"

namespace PhysicsTools {

template<class Base_t, class CalibBase_t, class Parent_t>
Base_t *ProcessRegistry<Base_t, CalibBase_t, Parent_t>::Factory::create(
		const char *name, const CalibBase_t *calib, Parent_t *parent)
{ return ProcessRegistry::create(name, calib, parent); }

template<class Base_t, class CalibBase_t, class Parent_t>
std::map<std::string, const ProcessRegistry<Base_t, CalibBase_t, Parent_t>*>
	*ProcessRegistry<Base_t, CalibBase_t, Parent_t>::getRegistry()
{
	static struct Sentinel {
		Sentinel() : instance(new RegistryMap) {}
		~Sentinel() { delete instance; instance = 0; }

		RegistryMap	*instance;
	} sentinel;

	return sentinel.instance;
}

template<class Base_t, class CalibBase_t, class Parent_t>
Base_t *ProcessRegistry<Base_t, CalibBase_t, Parent_t>::create(
		const char *name, const CalibBase_t *calib, Parent_t *parent)
{
	typename RegistryMap::iterator pos = getRegistry()->find(name);

	if (pos == getRegistry()->end())
		return 0;

	return pos->second->instance(name, calib, parent);
}

template<class Base_t, class CalibBase_t, class Parent_t>
void ProcessRegistry<Base_t, CalibBase_t, Parent_t>::registerProcess(
			const char *name, const ProcessRegistry *process)
{ (*getRegistry())[name] = process; }

template<class Base_t, class CalibBase_t, class Parent_t>
void ProcessRegistry<Base_t, CalibBase_t, Parent_t>::unregisterProcess(
							const char *name)
{ RegistryMap *map = getRegistry(); if (map) map->erase(name); }

} // namespace PhysicsTools

#endif // PhysicsTools_Calibration_ProcessRegistry_icc
