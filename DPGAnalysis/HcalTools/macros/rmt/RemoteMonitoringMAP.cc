// How to run:
//root -b -q -l 'RemoteMonitoringMAP.C+("/afs/cern.ch/cms/CAF/CMSALCA/ALCA_HCALCALIB/HCALMONITORING/RDMweb/histos/LED_214513.root","/afs/cern.ch/cms/CAF/CMSALCA/ALCA_HCALCALIB/HCALMONITORING/RDMweb/histos/LED_214512.root")'
//root -b -q -l 'RemoteMonitoringMAP.C+(" /afs/cern.ch/work/d/dtlisov/private/Monitoring/histos/LED_211659.root","/afs/cern.ch/cms/CAF/CMSALCA/ALCA_HCALCALIB/HCALMONITORING/RDMweb/histos/LED_214512.root")'
// ./RemoteMonitoringMAP.cc.exe root_file1  root_file_ref PEDESTAL
//./RemoteMonitoringMAP.cc.exe root_file1  root_file_ref LASER

//MapRateAmpl2HB

#include "LogEleMapdb.h"

#include <iostream>
#include <fstream>

#include "TH1.h"
#include "TH2.h"
#include "TCanvas.h"
#include "TROOT.h"
#include <TMath.h>
#include "TStyle.h"
#include "TSystem.h"
#include "TLegend.h"
#include "TText.h"
#include "TAxis.h"
#include "TFile.h"
#include "TLine.h"
#include "TGraph.h"

// https://cms-conddb.cern.ch/eosweb/hcal/HcalRemoteMonitoring/RMT
// https://cms-cpt-software.web.cern.ch/cms-cpt-software/General/Validation/SVSuite/HcalRemoteMonitoring/RMT

using namespace std;
// h_ADC_HBdepth1
// ok change   Hist_ADC_HB_DS
int main(int argc, char *argv[]) {
  std::string dirnm = "Analyzer";
  gROOT->Reset();
  gROOT->SetStyle("Plain");
  gStyle->SetOptStat(0);
  gStyle->SetOptTitle(1);
  // ok change
  if (argc < 3)
    return 1;
  char fname[300];
  char refname[300];
  char runtypeC[300];
  sprintf(fname, "%s", argv[1]);
  sprintf(refname, "%s", argv[2]);
  sprintf(runtypeC, "%s", argv[3]);
  std::cout << fname << " " << refname << " " << runtypeC << std::endl;
  // ok change

  //======================================================================
  // Connect the input files, parameters and get the 2-d histogram in memory
  //    TFile *hfile= new TFile("GlobalHist.root", "READ");
  string promt = (string)fname;
  string runtype = (string)runtypeC;
  string runnumber = "";
  for (unsigned int i = promt.size() - 11; i < promt.size() - 5; i++)
    runnumber += fname[i];
  string refrunnumber = "";
  promt = (string)refname;
  for (unsigned int i = promt.size() - 11; i < promt.size() - 5; i++)
    refrunnumber += refname[i];

  TFile *hfile = new TFile(fname, "READ");
  hfile->ls();
  TDirectory *dir = (TDirectory *)hfile->FindObjectAny(dirnm.c_str());

  TFile *hreffile = new TFile(refname, "READ");
  hreffile->ls();
  TDirectory *refdir = (TDirectory *)hreffile->FindObjectAny(dirnm.c_str());

  // with TfileService implementation, change everywhere below:     hreffile->Get     to     refdir->FindObjectAny
  // with TfileService implementation, change everywhere below:     hfile->Get     to     dir->FindObjectAny

  double MIN_M[7][5];
  double MAX_M[7][5];
  double MIN_C[7][5];
  double MAX_C[7][5];
  double porog[5];
  double Pedest[2][5];

  if (runtype == "LED") {
    //CUTS:    [test][subdetector]                                       ADC amplitude  Am      Width  for Wm             Ratio cut for Rm             TS mean for TNm           TS max  for TXm
    double MIN_M_LED[7][5] = {{0., 0., 0., 0., 0.},
                              {0., 0., 0., 0., 0.},
                              {0, 100., 70., 40., 40.},
                              {0, 0.7, 0.7, 0.1, 0.1},
                              {0, 0.7, 0.6, 0.40, 0.45},
                              {0, 2.5, 1.0, 1.0, 1.0},
                              {0, 1.5, 1.5, 0.5, 0.5}};
    double MAX_M_LED[7][5] = {{0., 0., 0., 0., 0.},
                              {0., 0., 0., 0., 0.},
                              {0, 3000, 500000, 3000, 150000},
                              {0, 2.5, 2.5, 2.8, 2.6},
                              {0, 0.94, 0.95, 1.04, 1.02},
                              {0, 5.5, 5.2, 4.8, 4.2},
                              {0, 6.5, 6.5, 8.5, 8.5}};
    double MIN_C_LED[7][5] = {{0., 0., 0., 0., 0.},
                              {0., 0., 0., 0., 0.},
                              {0, 1000., 1000., 1000., 100.},
                              {0, 1.3, 1.3, 0.7, 0.3},
                              {0, 0.76, 0.76, 0.85, 0.5},
                              {0, 2.4, 2.4, 1.5, 3.5},
                              {0, 1.5, 1.5, 1.5, 3.5}};
    double MAX_C_LED[7][5] = {{0., 0., 0., 0., 0.},
                              {0., 0., 0., 0., 0.},
                              {0, 1E20, 1E20, 1E20, 1E20},
                              {0, 1.9, 1.9, 1.65, 1.5},
                              {0, 0.94, 0.94, 0.99, 0.8},
                              {0, 3.7, 3.7, 2.7, 4.5},
                              {0, 2.5, 2.5, 2.5, 4.5}};
    double porog_LED[5] = {0., 2., 2., 2., 2.};  // Cut for GS test in pro cents
    double Pedest_LED[2][5] = {{0., 0.1, 0.6, 0.1, 0.8},
                               {0., 0.1, 0.1, 0.1, 0.4}};  //Cuts for Pedestal  and pedestal  Width
    for (int i = 0; i <= 6; i++)
      for (int j = 0; j <= 4; j++) {
        MIN_M[i][j] = MIN_M_LED[i][j];
        MAX_M[i][j] = MAX_M_LED[i][j];
        MIN_C[i][j] = MIN_C_LED[i][j];
        MAX_C[i][j] = MAX_C_LED[i][j];
      }
    for (int i = 0; i <= 4; i++) {
      porog[i] = porog_LED[i];
      Pedest[0][i] = Pedest_LED[0][i];
      Pedest[1][i] = Pedest_LED[1][i];
    }
  }

  if (runtype == "LASER") {
    //CUTS:    [test][subdetector]                                  ADC amplitude  Am      Width  for Wm             Ratio cut for Rm             TS mean for TNm           TS max  for TXm
    double MIN_M_LASER[7][5] = {{0., 0., 0., 0., 0.},
                                {0., 0., 0., 0., 0.},
                                {0, 40., 40., 100., 40.},
                                {0, 0.3, 0.9, 0.2, 0.2},
                                {0, 0.5, 0.55, 0.55, 0.60},
                                {0, 5.0, 2.5, 1.1, 5.5},
                                {0, 1.5, 1.5, 1.5, 1.5}};
    double MAX_M_LASER[7][5] = {{0., 0., 0., 0., 0.},
                                {0., 0., 0., 0., 0.},
                                {0, 3500, 350000, 3500, 150000},
                                {0, 2.5, 3.6, 2.6, 2.1},
                                {0, 1.00, 1.00, 1.04, 1.02},
                                {0, 7.5, 6.5, 4.4, 8.5},
                                {0, 8.5, 8.5, 6.5, 8.5}};
    double MIN_C_LASER[7][5] = {{0., 0., 0., 0., 0.},
                                {0., 0., 0., 0., 0.},
                                {0, 1000., 1000., 1000., 100.},
                                {0, 1.3, 1.3, 0.7, 0.3},
                                {0, 0.76, 0.76, 0.85, 0.5},
                                {0, 2.4, 2.4, 1.5, 3.5},
                                {0, 1.5, 1.5, 1.5, 3.5}};
    double MAX_C_LASER[7][5] = {{0., 0., 0., 0., 0.},
                                {0., 0., 0., 0., 0.},
                                {0, 1E20, 1E20, 1E20, 1E20},
                                {0, 1.9, 1.9, 1.65, 1.5},
                                {0, 0.94, 0.94, 1.0, 0.8},
                                {0, 3.7, 3.7, 2.7, 4.5},
                                {0, 2.5, 2.5, 2.5, 4.5}};
    double porog_LASER[5] = {0., 2., 2., 2., 2.};  // Cut for GS test in pro cents
    //     double porog_LASER[5] = {0., 200., 200., 100., 100.}; // Cut for GS test in pro cents
    double Pedest_LASER[2][5] = {{0., 0.1, 0.6, 0.1, 0.8},
                                 {0., 0.1, 0.1, 0.1, 0.4}};  //Cuts for Pedestal  and pedestal  Width
    for (int i = 0; i <= 6; i++)
      for (int j = 0; j <= 4; j++) {
        MIN_M[i][j] = MIN_M_LASER[i][j];
        MAX_M[i][j] = MAX_M_LASER[i][j];
        MIN_C[i][j] = MIN_C_LASER[i][j];
        MAX_C[i][j] = MAX_C_LASER[i][j];
      }
    for (int i = 0; i <= 4; i++) {
      porog[i] = porog_LASER[i];
      Pedest[0][i] = Pedest_LASER[0][i];
      Pedest[1][i] = Pedest_LASER[1][i];
    }
  }
  if (runtype == "PEDESTAL") {
    //CUTS:    [test][subdetector]                                  ADC amplitude  Am      Width  for Wm             Ratio cut for Rm             TS mean for TNm           TS max  for TXm
    double MIN_M_PEDESTAL[7][5] = {{0., 0., 0., 0., 0.},
                                   {0., 0., 0., 0., 0.},
                                   {0, 10., 10., 200., 5.},
                                   {0, 2.7, 2.7, 2.7, 0.2},
                                   {0, 0.31, 0.31, 0.05, 0.15},
                                   {0, 4.5, 4.5, 4.5, 2.0},
                                   {0, 0.5, 0.5, 0.5, 0.5}};
    double MAX_M_PEDESTAL[7][5] = {{0., 0., 0., 0., 0.},
                                   {0., 0., 0., 0., 0.},
                                   {0, 2500., 250000., 2500., 150000.},
                                   {0, 3.0, 3.0, 5.0, 3.0},
                                   {0, 0.95, 0.95, 1.00, 0.98},
                                   {0, 4.6, 4.6, 4.6, 7.0},
                                   {0, 9.5, 9.5, 8.5, 8.5}};
    double MIN_C_PEDESTAL[7][5] = {{0., 0., 0., 0., 0.},
                                   {0., 0., 0., 0., 0.},
                                   {0, 1000., 1000., 1000., 100.},
                                   {0, 1.3, 1.3, 0.7, 0.3},
                                   {0, 0.76, 0.76, 0.85, 0.5},
                                   {0, 2.4, 2.4, 1.5, 3.5},
                                   {0, 1.5, 1.5, 1.5, 3.5}};
    double MAX_C_PEDESTAL[7][5] = {{0., 0., 0., 0., 0.},
                                   {0., 0., 0., 0., 0.},
                                   {0, 1E20, 1E20, 1E20, 1E20},
                                   {0, 1.9, 1.9, 1.65, 1.5},
                                   {0, 0.94, 0.94, 1.0, 0.8},
                                   {0, 3.7, 3.7, 2.7, 4.5},
                                   {0, 2.5, 2.5, 2.5, 4.5}};
    double porog_PEDESTAL[5] = {0., 2., 2., 2., 2.};  // Cut for GS test in pro cents
    //     double porog_PEDESTAL[5] = {0., 200., 200., 100., 100.}; // Cut for GS test in pro cents
    double Pedest_PEDESTAL[2][5] = {{0., 0.1, 0.6, 0.1, 0.8},
                                    {0., 0.1, 0.1, 0.1, 0.4}};  //Cuts for Pedestal  and pedestal  Width
    for (int i = 0; i <= 6; i++)
      for (int j = 0; j <= 4; j++) {
        MIN_M[i][j] = MIN_M_PEDESTAL[i][j];
        MAX_M[i][j] = MAX_M_PEDESTAL[i][j];
        MIN_C[i][j] = MIN_C_PEDESTAL[i][j];
        MAX_C[i][j] = MAX_C_PEDESTAL[i][j];
      }
    for (int i = 0; i <= 4; i++) {
      porog[i] = porog_PEDESTAL[i];
      Pedest[0][i] = Pedest_PEDESTAL[0][i];
      Pedest[1][i] = Pedest_PEDESTAL[1][i];
    }
  }

  //======================================================================

  cout << endl;
  cout << MIN_M[2][1] << endl;

  //======================================================================
  // Prepare histograms and plot them to .png files

  //TCanvas *cHB = new TCanvas("cHB","cHB",1000,500);
  TCanvas *cHB = new TCanvas("cHB", "cHB", 1000, 1000);
  //TCanvas *cHE = new TCanvas("cHE","cHE",1500,500);
  TCanvas *cHE = new TCanvas("cHE", "cHE", 1500, 1500);
  //TCanvas *cONE = new TCanvas("cONE","cONE",500,500);
  TCanvas *cONE = new TCanvas("cONE", "cONE", 1500, 500);
  TCanvas *cPED = new TCanvas("cPED", "cPED", 1000, 500);
  //TCanvas *cHF = new TCanvas("cHF","cHF",1000,1000);
  TCanvas *cHF = new TCanvas("cHF", "cHF", 1000, 1000);

  // Phi-symmetry for Calibration Group:

  TCanvas *c1x0 = new TCanvas("c1x0", "c1x0", 300, 10, 800, 700);

  TCanvas *c1x1 = new TCanvas("c1x1", "c1x1", 100, 10, 600, 700);

  TCanvas *c2x1 = new TCanvas("c2x1", "c2x1", 200, 300, 1600, 800);

  TCanvas *c3x5 = new TCanvas("c3x5", "c3x5", 1000, 1500);
  //

  char *str = (char *)alloca(10000);

  // before upgrade 2017:
  // depth: HB depth1,2; HE depth1,2,3; HO depth4; HF depth1,2
  // 5 depthes:  0(empty),   1,2,3,4

  // upgrade 2017:
  // depth: HB depth1,2; HE depth1,2,3,4,5,6,7; HO depth4; HF depth1,2,3,4
  // 8 depthes:  0(empty),   1,2,3,4,5,6,7

  // upgrade 2021:
  // depth: HB depth1,2,3,4; HE depth1,2,3,4,5,6,7; HO depth4; HF depth1,2,3,4
  // 10 depthes:  0(empty),   1,2,3,4,5,6,7,8,9

  //  Int_t ALLDEPTH = 5;
  //  Int_t ALLDEPTH = 8;
  Int_t ALLDEPTH = 10;

  int k_min[5] = {0, 1, 1, 4, 1};  // minimum depth for each subdet
  //     int k_max[5]={0,2,3,4,2}; // maximum depth for each subdet
  //       int k_max[5]={0,2,7,4,4}; // maximum depth for each subdet
  int k_max[5] = {0, 4, 7, 4, 4};  // maximum depth for each subdet

  TH2F *Map_Ampl[33][5][ALLDEPTH];       // 2D histogramm for test,subdet,depth
  TH2F *Map_SUB[5][ALLDEPTH];            // 2d histogramm for subdet, depth
  TH1F *HistAmplDepth[22][5][ALLDEPTH];  // 1d histogramm for test,subdet, depth
  TH1F *HistAmpl[22][5];                 // 1d histogramm for test,subdet
  TH2F *Map_SUBTS[5][ALLDEPTH];          // 2d histogramm for subdet, depth in different TSs

  TH1F *HistPed[3][5][4];           // 1d  histogramm for test,subdet, CapID
  TH2F *Map_Ped[3][5];              // 2d  histogramm for test,subdet -> test 33
  TH1F *hist_GoodTSshape[5];        // 1d  histogramm for TS shape subdet -> test 41
  TH1F *hist_GoodTSshape0[5];       // 1d  histogramm for TS shape subdet -> test 41
  TH1F *hist_BadTSshape[5];         // 1d  histogramm for TS shape subdet -> test 41
  TH1F *hist_BadTSshape0[5];        // 1d  histogramm for TS shape subdet -> test 41
  TH1F *hist_ADC_All[5];            // 1d  histogramm for TS shape subdet -> test 42
  TH1F *hist_ADC_DS[5][ALLDEPTH];   // 1d  histogramm for TS shape subdet, depth -> test 42
  TH1F *hist_SumADC[5][ALLDEPTH];   // 1d  histogramm for TS shape subdet, depth -> test 43
  TH1F *hist_SumADC0[5][ALLDEPTH];  // 1d  histogramm for TS shape subdet, depth -> test 43
  TH1F *hist_SumADC1[5][ALLDEPTH];  // 1d  histogramm for TS shape subdet, depth -> test 43

  Map_SUB[1][1] = (TH2F *)dir->FindObjectAny("h_mapDepth1_HB");
  Map_SUB[1][2] = (TH2F *)dir->FindObjectAny("h_mapDepth2_HB");
  Map_SUB[2][1] = (TH2F *)dir->FindObjectAny("h_mapDepth1_HE");
  Map_SUB[2][2] = (TH2F *)dir->FindObjectAny("h_mapDepth2_HE");
  Map_SUB[2][3] = (TH2F *)dir->FindObjectAny("h_mapDepth3_HE");
  Map_SUB[3][4] = (TH2F *)dir->FindObjectAny("h_mapDepth4_HO");
  Map_SUB[4][1] = (TH2F *)dir->FindObjectAny("h_mapDepth1_HF");
  Map_SUB[4][2] = (TH2F *)dir->FindObjectAny("h_mapDepth2_HF");

  Map_SUB[1][3] = (TH2F *)dir->FindObjectAny("h_mapDepth3_HB");
  Map_SUB[1][4] = (TH2F *)dir->FindObjectAny("h_mapDepth4_HB");
  Map_SUB[2][4] = (TH2F *)dir->FindObjectAny("h_mapDepth4_HE");
  Map_SUB[2][5] = (TH2F *)dir->FindObjectAny("h_mapDepth5_HE");
  Map_SUB[2][6] = (TH2F *)dir->FindObjectAny("h_mapDepth6_HE");
  Map_SUB[2][7] = (TH2F *)dir->FindObjectAny("h_mapDepth7_HE");
  Map_SUB[4][3] = (TH2F *)dir->FindObjectAny("h_mapDepth3_HF");
  Map_SUB[4][4] = (TH2F *)dir->FindObjectAny("h_mapDepth4_HF");

  //+++++++++++++++++++++++++++++
  //Test 0 Entries
  //+++++++++++++++++++++++++++++

  for (int sub = 1; sub <= 4; sub++) {  //Subdetector: 1-HB, 2-HE, 3-HF, 4-HO
                                        //       if (sub==1) cHB->Divide(2,1);
    if (sub == 1)
      cHB->Divide(2, 2);
    //     if (sub==2) cHE->Divide(3,1);
    if (sub == 2)
      cHE->Divide(3, 3);
    if (sub == 3)
      cONE->Divide(1, 1);
    //     if (sub==4) cHF->Divide(2,1);
    if (sub == 4)
      cHF->Divide(2, 2);
    //       int k_min[5]={0,1,1,4,1}; // minimum depth for each subdet
    //     int k_max[5]={0,2,3,4,2}; // maximum depth for each subdet
    //       int k_max[5]={0,2,7,4,4}; // maximum depth for each subdet
    for (int k = k_min[sub]; k <= k_max[sub]; k++) {  //Depth
      if (sub == 1)
        cHB->cd(k);
      if (sub == 2)
        cHE->cd(k);
      if (sub == 3)
        cONE->cd(k - 3);
      if (sub == 4)
        cHF->cd(k);
      gPad->SetGridy();
      gPad->SetGridx();
      gPad->SetLogz();
      if (sub == 1)
        sprintf(str, "HB, Depth%d \b", k);
      if (sub == 2)
        sprintf(str, "HE, Depth%d \b", k);
      if (sub == 3)
        sprintf(str, "HO, Depth%d \b", k);
      if (sub == 4)
        sprintf(str, "HF, Depth%d \b", k);
      Map_SUB[sub][k]->SetTitle(str);
      Map_SUB[sub][k]->SetXTitle("#eta \b");
      Map_SUB[sub][k]->SetYTitle("#phi \b");
      Map_SUB[sub][k]->SetZTitle("Number of events \b");
      if (sub == 3)
        Map_SUB[sub][k]->SetTitleOffset(0.8, "Z");
      Map_SUB[sub][k]->Draw("COLZ");
      Map_SUB[sub][k]->GetYaxis()->SetRangeUser(0, 72.);
      //            Map_SUB[sub][k]->GetZaxis()->SetRangeUser(0.0001, 1.);
      if (sub == 1) {
        cHB->Modified();
        cHB->Update();
      }
      if (sub == 2) {
        cHE->Modified();
        cHE->Update();
      }
      if (sub == 3) {
        cONE->Modified();
        cONE->Update();
      }
      if (sub == 4) {
        cHF->Modified();
        cHF->Update();
      }
    }  //end depth

    if (sub == 1) {
      cHB->Print("MapRateEntryHB.png");
      cHB->Clear();
    }
    if (sub == 2) {
      cHE->Print("MapRateEntryHE.png");
      cHE->Clear();
    }
    if (sub == 3) {
      cONE->Print("MapRateEntryHO.png");
      cONE->Clear();
    }
    if (sub == 4) {
      cHF->Print("MapRateEntryHF.png");
      cHF->Clear();
    }
  }  // end sub

  //+++++++++++++++++++++++++++++
  //Test 1 (Cm) Rate of Cap ID errors
  //+++++++++++++++++++++++++++++

  Map_Ampl[1][1][1] = (TH2F *)dir->FindObjectAny("h_mapDepth1Error_HB");
  Map_Ampl[1][1][2] = (TH2F *)dir->FindObjectAny("h_mapDepth2Error_HB");
  Map_Ampl[1][2][1] = (TH2F *)dir->FindObjectAny("h_mapDepth1Error_HE");
  Map_Ampl[1][2][2] = (TH2F *)dir->FindObjectAny("h_mapDepth2Error_HE");
  Map_Ampl[1][2][3] = (TH2F *)dir->FindObjectAny("h_mapDepth3Error_HE");
  Map_Ampl[1][3][4] = (TH2F *)dir->FindObjectAny("h_mapDepth4Error_HO");
  Map_Ampl[1][4][1] = (TH2F *)dir->FindObjectAny("h_mapDepth1Error_HF");
  Map_Ampl[1][4][2] = (TH2F *)dir->FindObjectAny("h_mapDepth2Error_HF");

  Map_Ampl[1][1][3] = (TH2F *)dir->FindObjectAny("h_mapDepth3Error_HB");
  Map_Ampl[1][1][4] = (TH2F *)dir->FindObjectAny("h_mapDepth4Error_HB");
  Map_Ampl[1][2][4] = (TH2F *)dir->FindObjectAny("h_mapDepth4Error_HE");
  Map_Ampl[1][2][5] = (TH2F *)dir->FindObjectAny("h_mapDepth5Error_HE");
  Map_Ampl[1][2][6] = (TH2F *)dir->FindObjectAny("h_mapDepth6Error_HE");
  Map_Ampl[1][2][7] = (TH2F *)dir->FindObjectAny("h_mapDepth7Error_HE");
  Map_Ampl[1][4][3] = (TH2F *)dir->FindObjectAny("h_mapDepth3Error_HF");
  Map_Ampl[1][4][4] = (TH2F *)dir->FindObjectAny("h_mapDepth4Error_HF");

  for (int sub = 1; sub <= 4; sub++) {  //Subdetector: 1-HB, 2-HE, 3-HF, 4-HO
                                        //     if (sub==1) cHB->Divide(2,1);
    if (sub == 1)
      cHB->Divide(2, 2);
    //     if (sub==2) cHE->Divide(3,1);
    if (sub == 2)
      cHE->Divide(3, 3);
    if (sub == 3)
      cONE->Divide(1, 1);
    //     if (sub==4) cHF->Divide(2,1);
    if (sub == 4)
      cHF->Divide(2, 2);
    //       int k_min[5]={0,1,1,4,1}; // minimum depth for each subdet
    //     int k_max[5]={0,2,3,4,2}; // maximum depth for each subdet
    //       int k_max[5]={0,2,7,4,4}; // maximum depth for each subdet
    for (int k = k_min[sub]; k <= k_max[sub]; k++) {  //Depth
      if (sub == 1)
        cHB->cd(k);
      if (sub == 2)
        cHE->cd(k);
      if (sub == 3)
        cONE->cd(k - 3);
      if (sub == 4)
        cHF->cd(k);
      Map_Ampl[1][sub][k]->Divide(Map_Ampl[1][sub][k], Map_SUB[sub][k], 1, 1, "B");
      gPad->SetGridy();
      gPad->SetGridx();
      gPad->SetLogz();
      if (sub == 1)
        sprintf(str, "HB, Depth%d \b", k);
      if (sub == 2)
        sprintf(str, "HE, Depth%d \b", k);
      if (sub == 3)
        sprintf(str, "HO, Depth%d \b", k);
      if (sub == 4)
        sprintf(str, "HF, Depth%d \b", k);
      Map_Ampl[1][sub][k]->SetTitle(str);
      Map_Ampl[1][sub][k]->SetXTitle("#eta \b");
      Map_Ampl[1][sub][k]->SetYTitle("#phi \b");
      Map_Ampl[1][sub][k]->SetZTitle("Rate \b");
      if (sub == 3)
        Map_Ampl[1][sub][k]->SetTitleOffset(0.8, "Z");
      Map_Ampl[1][sub][k]->Draw("COLZ");
      Map_Ampl[1][sub][k]->GetYaxis()->SetRangeUser(0, 72.);
      Map_Ampl[1][sub][k]->GetZaxis()->SetRangeUser(0.0001, 1.);
      if (sub == 1) {
        cHB->Modified();
        cHB->Update();
      }
      if (sub == 2) {
        cHE->Modified();
        cHE->Update();
      }
      if (sub == 3) {
        cONE->Modified();
        cONE->Update();
      }
      if (sub == 4) {
        cHF->Modified();
        cHF->Update();
      }
    }  //end depth

    if (sub == 1) {
      cHB->Print("MapRateCapIDHB.png");
      cHB->Clear();
    }
    if (sub == 2) {
      cHE->Print("MapRateCapIDHE.png");
      cHE->Clear();
    }
    if (sub == 3) {
      cONE->Print("MapRateCapIDHO.png");
      cONE->Clear();
    }
    if (sub == 4) {
      cHF->Print("MapRateCapIDHF.png");
      cHF->Clear();
    }
  }  // end sub

  //+++++++++++++++++++++++++++++
  //Test 2 (Am) ADC amplitude
  //+++++++++++++++++++++++++++++

  Map_Ampl[2][1][1] = (TH2F *)dir->FindObjectAny("h_mapDepth1ADCAmpl225_HB");
  Map_Ampl[2][1][2] = (TH2F *)dir->FindObjectAny("h_mapDepth2ADCAmpl225_HB");
  Map_Ampl[2][2][1] = (TH2F *)dir->FindObjectAny("h_mapDepth1ADCAmpl225_HE");
  Map_Ampl[2][2][2] = (TH2F *)dir->FindObjectAny("h_mapDepth2ADCAmpl225_HE");
  Map_Ampl[2][2][3] = (TH2F *)dir->FindObjectAny("h_mapDepth3ADCAmpl225_HE");
  Map_Ampl[2][3][4] = (TH2F *)dir->FindObjectAny("h_mapDepth4ADCAmpl225_HO");
  Map_Ampl[2][4][1] = (TH2F *)dir->FindObjectAny("h_mapDepth1ADCAmpl225_HF");
  Map_Ampl[2][4][2] = (TH2F *)dir->FindObjectAny("h_mapDepth2ADCAmpl225_HF");

  Map_Ampl[2][1][3] = (TH2F *)dir->FindObjectAny("h_mapDepth3ADCAmpl225_HB");
  Map_Ampl[2][1][4] = (TH2F *)dir->FindObjectAny("h_mapDepth4ADCAmpl225_HB");
  Map_Ampl[2][2][4] = (TH2F *)dir->FindObjectAny("h_mapDepth4ADCAmpl225_HE");
  Map_Ampl[2][2][5] = (TH2F *)dir->FindObjectAny("h_mapDepth5ADCAmpl225_HE");
  Map_Ampl[2][2][6] = (TH2F *)dir->FindObjectAny("h_mapDepth6ADCAmpl225_HE");
  Map_Ampl[2][2][7] = (TH2F *)dir->FindObjectAny("h_mapDepth7ADCAmpl225_HE");
  Map_Ampl[2][4][3] = (TH2F *)dir->FindObjectAny("h_mapDepth3ADCAmpl225_HF");
  Map_Ampl[2][4][4] = (TH2F *)dir->FindObjectAny("h_mapDepth4ADCAmpl225_HF");

  HistAmpl[2][1] = (TH1F *)dir->FindObjectAny("h_ADCAmpl_HB");
  HistAmpl[2][2] = (TH1F *)dir->FindObjectAny("h_ADCAmpl_HE");
  HistAmpl[2][3] = (TH1F *)dir->FindObjectAny("h_ADCAmpl_HO");
  HistAmpl[2][4] = (TH1F *)dir->FindObjectAny("h_ADCAmpl_HF");

  //+++++++++++++++++++++++++++++
  //Test 3 (Wm) Rate of RMS
  //+++++++++++++++++++++++++++++

  Map_Ampl[3][1][1] = (TH2F *)dir->FindObjectAny("h_mapDepth1Amplitude225_HB");
  Map_Ampl[3][1][2] = (TH2F *)dir->FindObjectAny("h_mapDepth2Amplitude225_HB");
  Map_Ampl[3][2][1] = (TH2F *)dir->FindObjectAny("h_mapDepth1Amplitude225_HE");
  Map_Ampl[3][2][2] = (TH2F *)dir->FindObjectAny("h_mapDepth2Amplitude225_HE");
  Map_Ampl[3][2][3] = (TH2F *)dir->FindObjectAny("h_mapDepth3Amplitude225_HE");
  Map_Ampl[3][3][4] = (TH2F *)dir->FindObjectAny("h_mapDepth4Amplitude225_HO");
  Map_Ampl[3][4][1] = (TH2F *)dir->FindObjectAny("h_mapDepth1Amplitude225_HF");
  Map_Ampl[3][4][2] = (TH2F *)dir->FindObjectAny("h_mapDepth2Amplitude225_HF");

  Map_Ampl[3][1][3] = (TH2F *)dir->FindObjectAny("h_mapDepth3Amplitude225_HB");
  Map_Ampl[3][1][4] = (TH2F *)dir->FindObjectAny("h_mapDepth4Amplitude225_HB");
  Map_Ampl[3][2][4] = (TH2F *)dir->FindObjectAny("h_mapDepth4Amplitude225_HE");
  Map_Ampl[3][2][5] = (TH2F *)dir->FindObjectAny("h_mapDepth5Amplitude225_HE");
  Map_Ampl[3][2][6] = (TH2F *)dir->FindObjectAny("h_mapDepth6Amplitude225_HE");
  Map_Ampl[3][2][7] = (TH2F *)dir->FindObjectAny("h_mapDepth7Amplitude225_HE");
  Map_Ampl[3][4][3] = (TH2F *)dir->FindObjectAny("h_mapDepth3Amplitude225_HF");
  Map_Ampl[3][4][4] = (TH2F *)dir->FindObjectAny("h_mapDepth4Amplitude225_HF");

  HistAmpl[3][1] = (TH1F *)dir->FindObjectAny("h_Amplitude_HB");
  HistAmpl[3][2] = (TH1F *)dir->FindObjectAny("h_Amplitude_HE");
  HistAmpl[3][3] = (TH1F *)dir->FindObjectAny("h_Amplitude_HO");
  HistAmpl[3][4] = (TH1F *)dir->FindObjectAny("h_Amplitude_HF");

  //+++++++++++++++++++++++++++++
  //Test 4 (Rm) Rate of ratio 4 near max TS/ All TS
  //+++++++++++++++++++++++++++++

  Map_Ampl[4][1][1] = (TH2F *)dir->FindObjectAny("h_mapDepth1Ampl047_HB");
  Map_Ampl[4][1][2] = (TH2F *)dir->FindObjectAny("h_mapDepth2Ampl047_HB");
  Map_Ampl[4][2][1] = (TH2F *)dir->FindObjectAny("h_mapDepth1Ampl047_HE");
  Map_Ampl[4][2][2] = (TH2F *)dir->FindObjectAny("h_mapDepth2Ampl047_HE");
  Map_Ampl[4][2][3] = (TH2F *)dir->FindObjectAny("h_mapDepth3Ampl047_HE");
  Map_Ampl[4][3][4] = (TH2F *)dir->FindObjectAny("h_mapDepth4Ampl047_HO");
  Map_Ampl[4][4][1] = (TH2F *)dir->FindObjectAny("h_mapDepth1Ampl047_HF");
  Map_Ampl[4][4][2] = (TH2F *)dir->FindObjectAny("h_mapDepth2Ampl047_HF");

  Map_Ampl[4][1][3] = (TH2F *)dir->FindObjectAny("h_mapDepth3Ampl047_HB");
  Map_Ampl[4][1][4] = (TH2F *)dir->FindObjectAny("h_mapDepth4Ampl047_HB");
  Map_Ampl[4][2][4] = (TH2F *)dir->FindObjectAny("h_mapDepth4Ampl047_HE");
  Map_Ampl[4][2][5] = (TH2F *)dir->FindObjectAny("h_mapDepth5Ampl047_HE");
  Map_Ampl[4][2][6] = (TH2F *)dir->FindObjectAny("h_mapDepth6Ampl047_HE");
  Map_Ampl[4][2][7] = (TH2F *)dir->FindObjectAny("h_mapDepth7Ampl047_HE");
  Map_Ampl[4][4][3] = (TH2F *)dir->FindObjectAny("h_mapDepth3Ampl047_HF");
  Map_Ampl[4][4][4] = (TH2F *)dir->FindObjectAny("h_mapDepth4Ampl047_HF");

  HistAmpl[4][1] = (TH1F *)dir->FindObjectAny("h_Ampl_HB");
  HistAmpl[4][2] = (TH1F *)dir->FindObjectAny("h_Ampl_HE");
  HistAmpl[4][3] = (TH1F *)dir->FindObjectAny("h_Ampl_HO");
  HistAmpl[4][4] = (TH1F *)dir->FindObjectAny("h_Ampl_HF");

  //+++++++++++++++++++++++++++++
  //Test 5 (TNm) Mean position in 1-8 TS range
  //+++++++++++++++++++++++++++++

  Map_Ampl[5][1][1] = (TH2F *)dir->FindObjectAny("h_mapDepth1TSmeanA225_HB");
  Map_Ampl[5][1][2] = (TH2F *)dir->FindObjectAny("h_mapDepth2TSmeanA225_HB");
  Map_Ampl[5][2][1] = (TH2F *)dir->FindObjectAny("h_mapDepth1TSmeanA225_HE");
  Map_Ampl[5][2][2] = (TH2F *)dir->FindObjectAny("h_mapDepth2TSmeanA225_HE");
  Map_Ampl[5][2][3] = (TH2F *)dir->FindObjectAny("h_mapDepth3TSmeanA225_HE");
  Map_Ampl[5][3][4] = (TH2F *)dir->FindObjectAny("h_mapDepth4TSmeanA225_HO");
  Map_Ampl[5][4][1] = (TH2F *)dir->FindObjectAny("h_mapDepth1TSmeanA225_HF");
  Map_Ampl[5][4][2] = (TH2F *)dir->FindObjectAny("h_mapDepth2TSmeanA225_HF");

  Map_Ampl[5][1][3] = (TH2F *)dir->FindObjectAny("h_mapDepth3TSmeanA225_HB");
  Map_Ampl[5][1][4] = (TH2F *)dir->FindObjectAny("h_mapDepth4TSmeanA225_HB");
  Map_Ampl[5][2][4] = (TH2F *)dir->FindObjectAny("h_mapDepth4TSmeanA225_HE");
  Map_Ampl[5][2][5] = (TH2F *)dir->FindObjectAny("h_mapDepth5TSmeanA225_HE");
  Map_Ampl[5][2][6] = (TH2F *)dir->FindObjectAny("h_mapDepth6TSmeanA225_HE");
  Map_Ampl[5][2][7] = (TH2F *)dir->FindObjectAny("h_mapDepth7TSmeanA225_HE");
  Map_Ampl[5][4][3] = (TH2F *)dir->FindObjectAny("h_mapDepth3TSmeanA225_HF");
  Map_Ampl[5][4][4] = (TH2F *)dir->FindObjectAny("h_mapDepth4TSmeanA225_HF");

  HistAmpl[5][1] = (TH1F *)dir->FindObjectAny("h_TSmeanA_HB");
  HistAmpl[5][2] = (TH1F *)dir->FindObjectAny("h_TSmeanA_HE");
  HistAmpl[5][3] = (TH1F *)dir->FindObjectAny("h_TSmeanA_HO");
  HistAmpl[5][4] = (TH1F *)dir->FindObjectAny("h_TSmeanA_HF");

  //+++++++++++++++++++++++++++++
  //Test 6 (TXm) Maximum position in 1-8 TS range
  //+++++++++++++++++++++++++++++

  Map_Ampl[6][1][1] = (TH2F *)dir->FindObjectAny("h_mapDepth1TSmaxA225_HB");
  Map_Ampl[6][1][2] = (TH2F *)dir->FindObjectAny("h_mapDepth2TSmaxA225_HB");
  Map_Ampl[6][2][1] = (TH2F *)dir->FindObjectAny("h_mapDepth1TSmaxA225_HE");
  Map_Ampl[6][2][2] = (TH2F *)dir->FindObjectAny("h_mapDepth2TSmaxA225_HE");
  Map_Ampl[6][2][3] = (TH2F *)dir->FindObjectAny("h_mapDepth3TSmaxA225_HE");
  Map_Ampl[6][3][4] = (TH2F *)dir->FindObjectAny("h_mapDepth4TSmaxA225_HO");
  Map_Ampl[6][4][1] = (TH2F *)dir->FindObjectAny("h_mapDepth1TSmaxA225_HF");
  Map_Ampl[6][4][2] = (TH2F *)dir->FindObjectAny("h_mapDepth2TSmaxA225_HF");

  Map_Ampl[6][1][3] = (TH2F *)dir->FindObjectAny("h_mapDepth3TSmaxA225_HB");
  Map_Ampl[6][1][4] = (TH2F *)dir->FindObjectAny("h_mapDepth4TSmaxA225_HB");
  Map_Ampl[6][2][4] = (TH2F *)dir->FindObjectAny("h_mapDepth4TSmaxA225_HE");
  Map_Ampl[6][2][5] = (TH2F *)dir->FindObjectAny("h_mapDepth5TSmaxA225_HE");
  Map_Ampl[6][2][6] = (TH2F *)dir->FindObjectAny("h_mapDepth6TSmaxA225_HE");
  Map_Ampl[6][2][7] = (TH2F *)dir->FindObjectAny("h_mapDepth7TSmaxA225_HE");
  Map_Ampl[6][4][3] = (TH2F *)dir->FindObjectAny("h_mapDepth3TSmaxA225_HF");
  Map_Ampl[6][4][4] = (TH2F *)dir->FindObjectAny("h_mapDepth4TSmaxA225_HF");

  HistAmpl[6][1] = (TH1F *)dir->FindObjectAny("h_TSmaxA_HB");
  HistAmpl[6][2] = (TH1F *)dir->FindObjectAny("h_TSmaxA_HE");
  HistAmpl[6][3] = (TH1F *)dir->FindObjectAny("h_TSmaxA_HO");
  HistAmpl[6][4] = (TH1F *)dir->FindObjectAny("h_TSmaxA_HF");

  for (int test = 2; test <= 6; test++) {  //Test: 2-Am, 3-Wm, 4-Rm, 5-TNm, 6-TXm,
    for (int sub = 1; sub <= 4; sub++) {   //Subdetector: 1-HB, 2-HE, 3-HF, 4-HO
                                           //        if (sub==1) cHB->Divide(2,1);
      if (sub == 1)
        cHB->Divide(2, 2);
      //        if (sub==2) cHE->Divide(3,1);
      if (sub == 2)
        cHE->Divide(3, 3);
      if (sub == 3)
        cONE->Divide(1, 1);
      //        if (sub==4) cHF->Divide(2,1);
      if (sub == 4)
        cHF->Divide(2, 2);
      //          int k_min[5]={0,1,1,4,1}; // minimum depth for each subdet
      //        int k_max[5]={0,2,3,4,2}; // maximum depth for each subdet
      //          int k_max[5]={0,2,7,4,4}; // maximum depth for each subdet
      for (int k = k_min[sub]; k <= k_max[sub]; k++) {  //Depth
        if (sub == 1)
          cHB->cd(k);
        if (sub == 2)
          cHE->cd(k);
        if (sub == 3)
          cONE->cd(k - 3);
        if (sub == 4)
          cHF->cd(k);
        Map_Ampl[test][sub][k]->Divide(Map_Ampl[test][sub][k], Map_SUB[sub][k], 1, 1, "B");
        gPad->SetGridy();
        gPad->SetGridx();
        gPad->SetLogz();
        if (sub == 1)
          sprintf(str, "HB, Depth%d \b", k);
        if (sub == 2)
          sprintf(str, "HE, Depth%d \b", k);
        if (sub == 3)
          sprintf(str, "HO, Depth%d \b", k);
        if (sub == 4)
          sprintf(str, "HF, Depth%d \b", k);
        Map_Ampl[test][sub][k]->SetTitle(str);
        Map_Ampl[test][sub][k]->SetXTitle("#eta \b");
        Map_Ampl[test][sub][k]->SetYTitle("#phi \b");
        Map_Ampl[test][sub][k]->SetZTitle("Rate \b");
        if (sub == 3)
          Map_Ampl[test][sub][k]->SetTitleOffset(0.8, "Z");
        Map_Ampl[test][sub][k]->Draw("COLZ");
        Map_Ampl[test][sub][k]->GetYaxis()->SetRangeUser(0, 72.);
        Map_Ampl[test][sub][k]->GetZaxis()->SetRangeUser(0.0001, 1.);
        if (sub == 1) {
          cHB->Modified();
          cHB->Update();
        }
        if (sub == 2) {
          cHE->Modified();
          cHE->Update();
        }
        if (sub == 3) {
          cONE->Modified();
          cONE->Update();
        }
        if (sub == 4) {
          cHF->Modified();
          cHF->Update();
        }
      }  //end depth
      if (test == 2) {
        if (sub == 1) {
          cHB->Print("MapRateAmplHB.png");
          cHB->Clear();
        }
        if (sub == 2) {
          cHE->Print("MapRateAmplHE.png");
          cHE->Clear();
        }
        if (sub == 3) {
          cONE->Print("MapRateAmplHO.png");
          cONE->Clear();
        }
        if (sub == 4) {
          cHF->Print("MapRateAmplHF.png");
          cHF->Clear();
        }
      }
      if (test == 3) {
        if (sub == 1) {
          cHB->Print("MapRateRMSHB.png");
          cHB->Clear();
        }
        if (sub == 2) {
          cHE->Print("MapRateRMSHE.png");
          cHE->Clear();
        }
        if (sub == 3) {
          cONE->Print("MapRateRMSHO.png");
          cONE->Clear();
        }
        if (sub == 4) {
          cHF->Print("MapRateRMSHF.png");
          cHF->Clear();
        }
      }
      if (test == 4) {
        if (sub == 1) {
          cHB->Print("MapRate43TStoAllTSHB.png");
          cHB->Clear();
        }
        if (sub == 2) {
          cHE->Print("MapRate43TStoAllTSHE.png");
          cHE->Clear();
        }
        if (sub == 3) {
          cONE->Print("MapRate43TStoAllTSHO.png");
          cONE->Clear();
        }
        if (sub == 4) {
          cHF->Print("MapRate43TStoAllTSHF.png");
          cHF->Clear();
        }
      }
      if (test == 5) {
        if (sub == 1) {
          cHB->Print("MapRateMeanPosHB.png");
          cHB->Clear();
        }
        if (sub == 2) {
          cHE->Print("MapRateMeanPosHE.png");
          cHE->Clear();
        }
        if (sub == 3) {
          cONE->Print("MapRateMeanPosHO.png");
          cONE->Clear();
        }
        if (sub == 4) {
          cHF->Print("MapRateMeanPosHF.png");
          cHF->Clear();
        }
      }
      if (test == 6) {
        if (sub == 1) {
          cHB->Print("MapRateMaxPosHB.png");
          cHB->Clear();
        }
        if (sub == 2) {
          cHE->Print("MapRateMaxPosHE.png");
          cHE->Clear();
        }
        if (sub == 3) {
          cONE->Print("MapRateMaxPosHO.png");
          cONE->Clear();
        }
        if (sub == 4) {
          cHF->Print("MapRateMaxPosHF.png");
          cHF->Clear();
        }
      }

      //          cONE->Divide(1,1);
      cONE->Divide(3, 1);
      if (test == 2 && sub == 2) {
        cONE->cd(2);
        TH1F *kjkjkhj2 = (TH1F *)dir->FindObjectAny("h_AmplitudeHEtest1");
        kjkjkhj2->Draw("");
        kjkjkhj2->SetTitle("HE, All Depth: shunt1");
        cONE->cd(3);
        TH1F *kjkjkhj3 = (TH1F *)dir->FindObjectAny("h_AmplitudeHEtest6");
        kjkjkhj3->Draw("");
        kjkjkhj3->SetTitle("HE, All Depth: shunt6");
      }
      if (test == 2 && sub == 1) {
        cONE->cd(2);
        TH1F *kjkjkhb2 = (TH1F *)dir->FindObjectAny("h_AmplitudeHBtest1");
        kjkjkhb2->Draw("");
        kjkjkhb2->SetTitle("HB, All Depth: shunt1");
        cONE->cd(3);
        TH1F *kjkjkhb3 = (TH1F *)dir->FindObjectAny("h_AmplitudeHBtest6");
        kjkjkhb3->Draw("");
        kjkjkhb3->SetTitle("HB, All Depth: shunt6");
      }
      cONE->cd(1);
      gPad->SetGridy();
      gPad->SetGridx();
      gPad->SetLogy();
      if (sub == 1)
        HistAmpl[test][sub]->SetTitle("HB, All Depth: shunt6");
      if (sub == 2)
        HistAmpl[test][sub]->SetTitle("HE, All Depth: shunt6");
      if (sub == 3)
        HistAmpl[test][sub]->SetTitle("HO, All Depth");
      if (sub == 4)
        HistAmpl[test][sub]->SetTitle("HF, All Depth");
      if (test == 2)
        HistAmpl[test][sub]->SetXTitle("ADC Amlitude in each event & cell \b");
      if (test == 3)
        HistAmpl[test][sub]->SetXTitle("RMS in each event & cell \b");
      if (test == 4)
        HistAmpl[test][sub]->SetXTitle("Ratio in each event & cell \b");
      if (test == 5)
        HistAmpl[test][sub]->SetXTitle("Mean TS position in each event & cell \b");
      if (test == 6)
        HistAmpl[test][sub]->SetXTitle("Max TS position in each event & cell \b");
      HistAmpl[test][sub]->SetYTitle("Number of cell-events \b");
      HistAmpl[test][sub]->SetLineColor(4);
      HistAmpl[test][sub]->SetLineWidth(2);
      HistAmpl[test][sub]->SetTitleOffset(1.4, "Y");
      HistAmpl[test][sub]->Draw("");
      // //        HistAmpl[test][sub]->GetYaxis()->SetRangeUser(1., 100.);
      //          if (test==2) {gPad->SetLogx(); HistAmpl[test][sub]->GetXaxis()->SetRangeUser(1., 10000.);}
      if (test == 2) {
        gPad->SetLogx();
      }
      if (test == 3)
        HistAmpl[test][sub]->GetXaxis()->SetRangeUser(0., 5.);  // width
      if (test == 4)
        HistAmpl[test][sub]->GetXaxis()->SetRangeUser(0., 1.);  // R
      if (test == 5)
        HistAmpl[test][sub]->GetXaxis()->SetRangeUser(0., 9.);  //Tn
      if (test == 6)
        HistAmpl[test][sub]->GetXaxis()->SetRangeUser(0., 9.);  //Tx
      cONE->Modified();
      cONE->Update();
      double min_x[] = {MIN_M[test][sub], MIN_M[test][sub]};
      double min_y[] = {0., 100000000.};
      TGraph *MIN = new TGraph(2, min_x, min_y);
      MIN->SetLineStyle(2);
      MIN->SetLineColor(2);
      MIN->SetLineWidth(2 + 100 * 100);
      MIN->SetFillStyle(3005);
      MIN->SetFillColor(2);
      MIN->Draw("L");
      double max_x[] = {MAX_M[test][sub], MAX_M[test][sub]};
      double max_y[] = {0., 100000000.};
      TGraph *MAX = new TGraph(2, max_x, max_y);
      MAX->SetLineStyle(2);
      MAX->SetLineColor(2);
      MAX->SetLineWidth(-2 - 100 * 100);
      MAX->SetFillStyle(3004);
      MAX->SetFillColor(2);
      MAX->Draw("L");
      if (test == 2) {
        if (sub == 1) {
          cONE->Print("HistAmplHB.png");
          cONE->Clear();
        }
        if (sub == 2) {
          cONE->Print("HistAmplHE.png");
          cONE->Clear();
        }
        if (sub == 3) {
          cONE->Print("HistAmplHO.png");
          cONE->Clear();
        }
        if (sub == 4) {
          cONE->Print("HistAmplHF.png");
          cONE->Clear();
        }
      }
      if (test == 3) {
        if (sub == 1) {
          cONE->Print("HistRMSHB.png");
          cONE->Clear();
        }
        if (sub == 2) {
          cONE->Print("HistRMSHE.png");
          cONE->Clear();
        }
        if (sub == 3) {
          cONE->Print("HistRMSHO.png");
          cONE->Clear();
        }
        if (sub == 4) {
          cONE->Print("HistRMSHF.png");
          cONE->Clear();
        }
      }
      if (test == 4) {
        if (sub == 1) {
          cONE->Print("Hist43TStoAllTSHB.png");
          cONE->Clear();
        }
        if (sub == 2) {
          cONE->Print("Hist43TStoAllTSHE.png");
          cONE->Clear();
        }
        if (sub == 3) {
          cONE->Print("Hist43TStoAllTSHO.png");
          cONE->Clear();
        }
        if (sub == 4) {
          cONE->Print("Hist43TStoAllTSHF.png");
          cONE->Clear();
        }
      }
      if (test == 5) {
        if (sub == 1) {
          cONE->Print("HistMeanPosHB.png");
          cONE->Clear();
        }
        if (sub == 2) {
          cONE->Print("HistMeanPosHE.png");
          cONE->Clear();
        }
        if (sub == 3) {
          cONE->Print("HistMeanPosHO.png");
          cONE->Clear();
        }
        if (sub == 4) {
          cONE->Print("HistMeanPosHF.png");
          cONE->Clear();
        }
      }
      if (test == 6) {
        if (sub == 1) {
          cONE->Print("HistMaxPosHB.png");
          cONE->Clear();
        }
        if (sub == 2) {
          cONE->Print("HistMaxPosHE.png");
          cONE->Clear();
        }
        if (sub == 3) {
          cONE->Print("HistMaxPosHO.png");
          cONE->Clear();
        }
        if (sub == 4) {
          cONE->Print("HistMaxPosHF.png");
          cONE->Clear();
        }
      }
    }  // end sub
  }    //end test

  TH2F *Map_Calib[5][5];  // 2d histogramm for subdet, depth

  Map_Calib[1][1] = (TH2F *)dir->FindObjectAny("h_map_HB");
  Map_Calib[1][2] = (TH2F *)dir->FindObjectAny("h_map_HB");
  Map_Calib[2][1] = (TH2F *)dir->FindObjectAny("h_map_HE");
  Map_Calib[2][2] = (TH2F *)dir->FindObjectAny("h_map_HE");
  Map_Calib[2][3] = (TH2F *)dir->FindObjectAny("h_map_HE");
  Map_Calib[3][4] = (TH2F *)dir->FindObjectAny("h_map_HO");
  Map_Calib[4][1] = (TH2F *)dir->FindObjectAny("h_map_HF");
  Map_Calib[4][2] = (TH2F *)dir->FindObjectAny("h_map_HF");

  //+++++++++++++++++++++++++++++
  //Test 0 Entries
  //+++++++++++++++++++++++++++++

  for (int sub = 1; sub <= 4; sub++) {  //Subdetector: 1-HB, 2-HE, 3-HF, 4-HO
                                        //       if (sub==1) cHB->Divide(2,1);
                                        //       if (sub==2) cHE->Divide(3,1);
    cONE->Divide(1, 1);
    //      if (sub==4) cHB->Divide(2,1);
    //       int k_min[5]={0,1,1,4,1}; // minimum depth for each subdet
    //       int k_max[5]={0,2,3,4,2}; // maximum depth for each subdet
    //       for (int k=k_min[sub];k<=k_max[sub];k++) {  //Depth
    int k = 1;
    cONE->cd(k);
    //          if (sub==1) cHB->cd(k);
    //          if (sub==2) cHE->cd(k);
    if (sub == 3)
      k = 4;
    //	    if (sub==4) cHB->cd(k);
    gPad->SetGridy();
    gPad->SetGridx();
    gPad->SetLogz();
    if (sub == 1)
      sprintf(str, "HB");
    if (sub == 2)
      sprintf(str, "HE");
    if (sub == 3)
      sprintf(str, "HO");
    if (sub == 4)
      sprintf(str, "HF");
    Map_Calib[sub][k]->SetTitle(str);
    Map_Calib[sub][k]->SetXTitle("#eta \b");
    Map_Calib[sub][k]->SetYTitle("#phi \b");
    Map_Calib[sub][k]->SetZTitle("Number of events\b");
    if (sub == 3)
      Map_Calib[sub][k]->SetTitleOffset(0.8, "Z");
    Map_Calib[sub][k]->Draw("COLZ");
    Map_Calib[sub][k]->GetYaxis()->SetRangeUser(0, 72.);
    //            Map_Calib[sub][k]->GetZaxis()->SetRangeUser(0.0001, 1.);
    //            if (sub==1) {cHB->Modified(); cHB->Update();}
    //            if (sub==2) {cHE->Modified(); cHE->Update();}
    cONE->Modified();
    cONE->Update();
    //            if (sub==4) {cHB->Modified(); cHB->Update();}
    //       }//end depth

    if (sub == 1) {
      cONE->Print("MapRateCalibEntryHB.png");
      cONE->Clear();
    }
    if (sub == 2) {
      cONE->Print("MapRateCalibEntryHE.png");
      cONE->Clear();
    }
    if (sub == 3) {
      cONE->Print("MapRateCalibEntryHO.png");
      cONE->Clear();
    }
    if (sub == 4) {
      cONE->Print("MapRateCalibEntryHF.png");
      cONE->Clear();
    }
  }  // end sub

  //+++++++++++++++++++++++++++++
  //Test 11 (Cc) Rate of Cap ID errors for calibration channels
  //+++++++++++++++++++++++++++++

  Map_Ampl[11][1][1] = (TH2F *)dir->FindObjectAny("h_mapCapCalib047_HB");
  Map_Ampl[11][1][2] = (TH2F *)dir->FindObjectAny("h_mapCapCalib047_HB");
  Map_Ampl[11][2][1] = (TH2F *)dir->FindObjectAny("h_mapCapCalib047_HE");
  Map_Ampl[11][2][2] = (TH2F *)dir->FindObjectAny("h_mapCapCalib047_HE");
  Map_Ampl[11][2][3] = (TH2F *)dir->FindObjectAny("h_mapCapCalib047_HE");
  Map_Ampl[11][3][4] = (TH2F *)dir->FindObjectAny("h_mapCapCalib047_HO");
  Map_Ampl[11][4][1] = (TH2F *)dir->FindObjectAny("h_mapCapCalib047_HF");
  Map_Ampl[11][4][2] = (TH2F *)dir->FindObjectAny("h_mapCapCalib047_HF");

  for (int sub = 1; sub <= 4; sub++) {  //Subdetector: 1-HB, 2-HE, 3-HF, 4-HO
                                        //       if (sub==1) cHB->Divide(2,1);
                                        //       if (sub==2) cHE->Divide(3,1);
    cONE->Divide(1, 1);
    //      if (sub==4) cHB->Divide(2,1);
    //       int k_min[5]={0,1,1,4,1}; // minimum depth for each subdet
    //       int k_max[5]={0,2,3,4,2}; // maximum depth for each subdet
    //       for (int k=k_min[sub];k<=k_max[sub];k++) {  //Depth
    int k = 1;
    cONE->cd(k);
    //          if (sub==1) cHB->cd(k);
    //          if (sub==2) cHE->cd(k);
    if (sub == 3)
      k = 4;
    //	    if (sub==4) cHB->cd(k);
    Map_Ampl[11][sub][k]->Divide(Map_Ampl[11][sub][k], Map_Calib[sub][k], 1, 1, "B");
    gPad->SetGridy();
    gPad->SetGridx();
    gPad->SetLogz();
    if (sub == 1)
      sprintf(str, "HB");
    if (sub == 2)
      sprintf(str, "HE");
    if (sub == 3)
      sprintf(str, "HO");
    if (sub == 4)
      sprintf(str, "HF");
    Map_Ampl[11][sub][k]->SetTitle(str);
    Map_Ampl[11][sub][k]->SetXTitle("#eta \b");
    Map_Ampl[11][sub][k]->SetYTitle("#phi \b");
    Map_Ampl[11][sub][k]->SetZTitle("Rate \b");
    Map_Ampl[11][sub][k]->SetTitleOffset(0.75, "Z");
    Map_Ampl[11][sub][k]->Draw("COLZ");
    Map_Ampl[11][sub][k]->GetYaxis()->SetRangeUser(0, 72.);
    Map_Ampl[11][sub][k]->GetZaxis()->SetRangeUser(0.0001, 1.);
    //            if (sub==1) {cHB->Modified(); cHB->Update();}
    //            if (sub==2) {cHE->Modified(); cHE->Update();}
    cONE->Modified();
    cONE->Update();
    //            if (sub==4) {cHB->Modified(); cHB->Update();}
    //       }//end depth

    if (sub == 1) {
      cONE->Print("MapRateCapCalibHB.png");
      cONE->Clear();
    }
    if (sub == 2) {
      cONE->Print("MapRateCapCalibHE.png");
      cONE->Clear();
    }
    if (sub == 3) {
      cONE->Print("MapRateCapCalibHO.png");
      cONE->Clear();
    }
    if (sub == 4) {
      cONE->Print("MapRateCapCalibHF.png");
      cONE->Clear();
    }
  }  // end sub

  //+++++++++++++++++++++++++++++
  //Test 12 (Ac) ADC amplitude for calibration chanels
  //+++++++++++++++++++++++++++++

  Map_Ampl[12][1][1] = (TH2F *)dir->FindObjectAny("h_mapADCCalib047_HB");
  Map_Ampl[12][1][2] = (TH2F *)dir->FindObjectAny("h_mapADCCalib047_HB");
  Map_Ampl[12][2][1] = (TH2F *)dir->FindObjectAny("h_mapADCCalib047_HE");
  Map_Ampl[12][2][2] = (TH2F *)dir->FindObjectAny("h_mapADCCalib047_HE");
  Map_Ampl[12][2][3] = (TH2F *)dir->FindObjectAny("h_mapADCCalib047_HE");
  Map_Ampl[12][3][4] = (TH2F *)dir->FindObjectAny("h_mapADCCalib047_HO");
  Map_Ampl[12][4][1] = (TH2F *)dir->FindObjectAny("h_mapADCCalib047_HF");
  Map_Ampl[12][4][2] = (TH2F *)dir->FindObjectAny("h_mapADCCalib047_HF");

  HistAmpl[12][1] = (TH1F *)dir->FindObjectAny("h_ADCCalib_HB");
  HistAmpl[12][2] = (TH1F *)dir->FindObjectAny("h_ADCCalib_HE");
  HistAmpl[12][3] = (TH1F *)dir->FindObjectAny("h_ADCCalib_HO");
  HistAmpl[12][4] = (TH1F *)dir->FindObjectAny("h_ADCCalib_HF");

  //+++++++++++++++++++++++++++++
  //Test 13 (Wc) Rate of RMS
  //+++++++++++++++++++++++++++++

  Map_Ampl[13][1][1] = (TH2F *)dir->FindObjectAny("h_mapWidthCalib047_HB");
  Map_Ampl[13][1][2] = (TH2F *)dir->FindObjectAny("h_mapWidthCalib047_HB");
  Map_Ampl[13][2][1] = (TH2F *)dir->FindObjectAny("h_mapWidthCalib047_HE");
  Map_Ampl[13][2][2] = (TH2F *)dir->FindObjectAny("h_mapWidthCalib047_HE");
  Map_Ampl[13][2][3] = (TH2F *)dir->FindObjectAny("h_mapWidthCalib047_HE");
  Map_Ampl[13][3][4] = (TH2F *)dir->FindObjectAny("h_mapWidthCalib047_HO");
  Map_Ampl[13][4][1] = (TH2F *)dir->FindObjectAny("h_mapWidthCalib047_HF");
  Map_Ampl[13][4][2] = (TH2F *)dir->FindObjectAny("h_mapWidthCalib047_HF");

  HistAmpl[13][1] = (TH1F *)dir->FindObjectAny("h_WidthCalib_HB");
  HistAmpl[13][2] = (TH1F *)dir->FindObjectAny("h_WidthCalib_HE");
  HistAmpl[13][3] = (TH1F *)dir->FindObjectAny("h_WidthCalib_HO");
  HistAmpl[13][4] = (TH1F *)dir->FindObjectAny("h_WidthCalib_HF");

  //+++++++++++++++++++++++++++++
  //Test 14 (Rc) Rate of ratio 4 near max TS/ All TS
  //+++++++++++++++++++++++++++++

  Map_Ampl[14][1][1] = (TH2F *)dir->FindObjectAny("h_mapRatioCalib047_HB");
  Map_Ampl[14][1][2] = (TH2F *)dir->FindObjectAny("h_mapRatioCalib047_HB");
  Map_Ampl[14][2][1] = (TH2F *)dir->FindObjectAny("h_mapRatioCalib047_HE");
  Map_Ampl[14][2][2] = (TH2F *)dir->FindObjectAny("h_mapRatioCalib047_HE");
  Map_Ampl[14][2][3] = (TH2F *)dir->FindObjectAny("h_mapRatioCalib047_HE");
  Map_Ampl[14][3][4] = (TH2F *)dir->FindObjectAny("h_mapRatioCalib047_HO");
  Map_Ampl[14][4][1] = (TH2F *)dir->FindObjectAny("h_mapRatioCalib047_HF");
  Map_Ampl[14][4][2] = (TH2F *)dir->FindObjectAny("h_mapRatioCalib047_HF");

  HistAmpl[14][1] = (TH1F *)dir->FindObjectAny("h_RatioCalib_HB");
  HistAmpl[14][2] = (TH1F *)dir->FindObjectAny("h_RatioCalib_HE");
  HistAmpl[14][3] = (TH1F *)dir->FindObjectAny("h_RatioCalib_HO");
  HistAmpl[14][4] = (TH1F *)dir->FindObjectAny("h_RatioCalib_HF");

  //+++++++++++++++++++++++++++++
  //Test 15 (TNc) Mean position in 1-8 TS range
  //+++++++++++++++++++++++++++++

  Map_Ampl[15][1][1] = (TH2F *)dir->FindObjectAny("h_mapTSmeanCalib047_HB");
  Map_Ampl[15][1][2] = (TH2F *)dir->FindObjectAny("h_mapTSmeanCalib047_HB");
  Map_Ampl[15][2][1] = (TH2F *)dir->FindObjectAny("h_mapTSmeanCalib047_HE");
  Map_Ampl[15][2][2] = (TH2F *)dir->FindObjectAny("h_mapTSmeanCalib047_HE");
  Map_Ampl[15][2][3] = (TH2F *)dir->FindObjectAny("h_mapTSmeanCalib047_HE");
  Map_Ampl[15][3][4] = (TH2F *)dir->FindObjectAny("h_mapTSmeanCalib047_HO");
  Map_Ampl[15][4][1] = (TH2F *)dir->FindObjectAny("h_mapTSmeanCalib047_HF");
  Map_Ampl[15][4][2] = (TH2F *)dir->FindObjectAny("h_mapTSmeanCalib047_HF");

  HistAmpl[15][1] = (TH1F *)dir->FindObjectAny("h_TSmeanCalib_HB");
  HistAmpl[15][2] = (TH1F *)dir->FindObjectAny("h_TSmeanCalib_HE");
  HistAmpl[15][3] = (TH1F *)dir->FindObjectAny("h_TSmeanCalib_HO");
  HistAmpl[15][4] = (TH1F *)dir->FindObjectAny("h_TSmeanCalib_HF");

  //+++++++++++++++++++++++++++++
  //Test 16 (TXc) Maximum position in 1-8 TS range
  //+++++++++++++++++++++++++++++

  Map_Ampl[16][1][1] = (TH2F *)dir->FindObjectAny("h_mapTSmaxCalib047_HB");
  Map_Ampl[16][1][2] = (TH2F *)dir->FindObjectAny("h_mapTSmaxCalib047_HB");
  Map_Ampl[16][2][1] = (TH2F *)dir->FindObjectAny("h_mapTSmaxCalib047_HE");
  Map_Ampl[16][2][2] = (TH2F *)dir->FindObjectAny("h_mapTSmaxCalib047_HE");
  Map_Ampl[16][2][3] = (TH2F *)dir->FindObjectAny("h_mapTSmaxCalib047_HE");
  Map_Ampl[16][3][4] = (TH2F *)dir->FindObjectAny("h_mapTSmaxCalib047_HO");
  Map_Ampl[16][4][1] = (TH2F *)dir->FindObjectAny("h_mapTSmaxCalib047_HF");
  Map_Ampl[16][4][2] = (TH2F *)dir->FindObjectAny("h_mapTSmaxCalib047_HF");

  HistAmpl[16][1] = (TH1F *)dir->FindObjectAny("h_TSmaxCalib_HB");
  HistAmpl[16][2] = (TH1F *)dir->FindObjectAny("h_TSmaxCalib_HE");
  HistAmpl[16][3] = (TH1F *)dir->FindObjectAny("h_TSmaxCalib_HO");
  HistAmpl[16][4] = (TH1F *)dir->FindObjectAny("h_TSmaxCalib_HF");

  for (int test = 12; test <= 16; test++) {  //Test: 2-Am, 3-Wm, 4-Rm, 5-TNm, 6-TXm,
    for (int sub = 1; sub <= 4; sub++) {     //Subdetector: 1-HB, 2-HE, 3-HF, 4-HO
      if (sub == 1)
        cONE->Divide(1, 1);  //cHB->Divide(2,1);
      if (sub == 2)
        cONE->Divide(1, 1);  //cHE->Divide(3,1);
      if (sub == 3)
        cONE->Divide(1, 1);
      if (sub == 4)
        cONE->Divide(1, 1);  //cHB->Divide(2,1);
                             //          int k_min[5]={0,1,1,4,1}; // minimum depth for each subdet
                             //          int k_max[5]={0,2,3,4,2}; // maximum depth for each subdet
                             //          for (int k=k_min[sub];k<=k_max[sub];k++) {  //Depth
      int k = 1;
      if (sub == 1) {
        k = 1;
        cONE->cd(k);
      }  //cHB->cd(k); }
      if (sub == 2) {
        k = 1;
        cONE->cd(k);
      }  //cHE->cd(k); }
      if (sub == 3) {
        k = 4;
        cONE->cd(k - 3);
      }
      if (sub == 4) {
        k = 1;
        cONE->cd(k);
      }  //cHB->cd(k); }
      Map_Ampl[test][sub][k]->Divide(Map_Ampl[test][sub][k], Map_Calib[sub][k], 1, 1, "B");
      gPad->SetGridy();
      gPad->SetGridx();
      gPad->SetLogz();
      if (sub == 1)
        sprintf(str, "HB");
      if (sub == 2)
        sprintf(str, "HE");
      if (sub == 3)
        sprintf(str, "HO");
      if (sub == 4)
        sprintf(str, "HF");
      Map_Ampl[test][sub][k]->SetTitle(str);
      Map_Ampl[test][sub][k]->SetXTitle("#eta \b");
      Map_Ampl[test][sub][k]->SetYTitle("#phi \b");
      Map_Ampl[test][sub][k]->SetZTitle("Rate \b");
      Map_Ampl[test][sub][k]->SetTitleOffset(0.8, "Z");
      Map_Ampl[test][sub][k]->Draw("COLZ");
      Map_Ampl[test][sub][k]->GetYaxis()->SetRangeUser(0, 72.);
      Map_Ampl[test][sub][k]->GetZaxis()->SetRangeUser(0.00001, 1.);
      //              if (sub==1) {cHB->Modified(); cHB->Update();}
      //              if (sub==2) {cHE->Modified(); cHE->Update();}
      cONE->Modified();
      cONE->Update();
      //              if (sub==4) {cHB->Modified(); cHB->Update();}
      //          }//end depth
      if (test == 12) {
        if (sub == 1) {
          cONE->Print("MapRateAmplCalibHB.png");
          cONE->Clear();
        }
        if (sub == 2) {
          cONE->Print("MapRateAmplCalibHE.png");
          cONE->Clear();
        }
        if (sub == 3) {
          cONE->Print("MapRateAmplCalibHO.png");
          cONE->Clear();
        }
        if (sub == 4) {
          cONE->Print("MapRateAmplCalibHF.png");
          cONE->Clear();
        }
      }
      if (test == 13) {
        if (sub == 1) {
          cONE->Print("MapRateRMSCalibHB.png");
          cONE->Clear();
        }
        if (sub == 2) {
          cONE->Print("MapRateRMSCalibHE.png");
          cONE->Clear();
        }
        if (sub == 3) {
          cONE->Print("MapRateRMSCalibHO.png");
          cONE->Clear();
        }
        if (sub == 4) {
          cONE->Print("MapRateRMSCalibHF.png");
          cONE->Clear();
        }
      }
      if (test == 14) {
        if (sub == 1) {
          cONE->Print("MapRate43TStoAllTSCalibHB.png");
          cONE->Clear();
        }
        if (sub == 2) {
          cONE->Print("MapRate43TStoAllTSCalibHE.png");
          cONE->Clear();
        }
        if (sub == 3) {
          cONE->Print("MapRate43TStoAllTSCalibHO.png");
          cONE->Clear();
        }
        if (sub == 4) {
          cONE->Print("MapRate43TStoAllTSCalibHF.png");
          cONE->Clear();
        }
      }
      if (test == 15) {
        if (sub == 1) {
          cONE->Print("MapRateMeanPosCalibHB.png");
          cONE->Clear();
        }
        if (sub == 2) {
          cONE->Print("MapRateMeanPosCalibHE.png");
          cONE->Clear();
        }
        if (sub == 3) {
          cONE->Print("MapRateMeanPosCalibHO.png");
          cONE->Clear();
        }
        if (sub == 4) {
          cONE->Print("MapRateMeanPosCalibHF.png");
          cONE->Clear();
        }
      }
      if (test == 16) {
        if (sub == 1) {
          cONE->Print("MapRateMaxPosCalibHB.png");
          cONE->Clear();
        }
        if (sub == 2) {
          cONE->Print("MapRateMaxPosCalibHE.png");
          cONE->Clear();
        }
        if (sub == 3) {
          cONE->Print("MapRateMaxPosCalibHO.png");
          cONE->Clear();
        }
        if (sub == 4) {
          cONE->Print("MapRateMaxPosCalibHF.png");
          cONE->Clear();
        }
      }

      cONE->Divide(1, 1);
      cONE->cd(1);
      gPad->SetGridy();
      gPad->SetGridx();
      gPad->SetLogy();
      if (sub == 1)
        HistAmpl[test][sub]->SetTitle("HB, All Depth");
      if (sub == 2)
        HistAmpl[test][sub]->SetTitle("HE, All Depth");
      if (sub == 3)
        HistAmpl[test][sub]->SetTitle("HO, All Depth");
      if (sub == 4)
        HistAmpl[test][sub]->SetTitle("HF, All Depth");
      if (test == 12)
        HistAmpl[test][sub]->SetXTitle("ADC Amlitude in each event & cell \b");
      if (test == 13)
        HistAmpl[test][sub]->SetXTitle("Amplitude RMS in each event & cell \b");
      if (test == 14)
        HistAmpl[test][sub]->SetXTitle("Ratio in each event & cell \b");
      if (test == 15)
        HistAmpl[test][sub]->SetXTitle("Mean TS position in each event & cell \b");
      if (test == 16)
        HistAmpl[test][sub]->SetXTitle("Max TS position in each event & cell \b");
      HistAmpl[test][sub]->SetYTitle("Number of cell-events \b");
      HistAmpl[test][sub]->SetLineColor(4);
      HistAmpl[test][sub]->SetLineWidth(2);
      HistAmpl[test][sub]->SetTitleOffset(1.4, "Y");
      HistAmpl[test][sub]->Draw("");
      //        HistAmpl[test][sub]->GetYaxis()->SetRangeUser(1., 100.);
      if (test == 12) {
        gPad->SetLogx();
        HistAmpl[test][sub]->GetXaxis()->SetRangeUser(1., 10000.);
      }
      if (test == 13)
        HistAmpl[test][sub]->GetXaxis()->SetRangeUser(0., 5.);
      if (test == 14)
        HistAmpl[test][sub]->GetXaxis()->SetRangeUser(0., 1.);
      if (test == 15)
        HistAmpl[test][sub]->GetXaxis()->SetRangeUser(0., 9.);
      if (test == 16)
        HistAmpl[test][sub]->GetXaxis()->SetRangeUser(0., 9.);
      cONE->Modified();
      cONE->Update();
      double min_x[] = {MIN_C[test - 10][sub], MIN_C[test - 10][sub]};
      double min_y[] = {0., 100000000.};
      TGraph *MIN = new TGraph(2, min_x, min_y);
      MIN->SetLineStyle(2);
      MIN->SetLineColor(2);
      MIN->SetLineWidth(2 + 100 * 100);
      MIN->SetFillStyle(3005);
      MIN->SetFillColor(2);
      MIN->Draw("L");
      double max_x[] = {MAX_C[test - 10][sub], MAX_C[test - 10][sub]};
      double max_y[] = {0., 100000000.};
      TGraph *MAX = new TGraph(2, max_x, max_y);
      MAX->SetLineStyle(2);
      MAX->SetLineColor(2);
      MAX->SetLineWidth(-2 - 100 * 100);
      MAX->SetFillStyle(3004);
      MAX->SetFillColor(2);
      MAX->Draw("L");
      if (test == 12) {
        if (sub == 1) {
          cONE->Print("HistAmplCalibHB.png");
          cONE->Clear();
        }
        if (sub == 2) {
          cONE->Print("HistAmplCalibHE.png");
          cONE->Clear();
        }
        if (sub == 3) {
          cONE->Print("HistAmplCalibHO.png");
          cONE->Clear();
        }
        if (sub == 4) {
          cONE->Print("HistAmplCalibHF.png");
          cONE->Clear();
        }
      }
      if (test == 13) {
        if (sub == 1) {
          cONE->Print("HistRMSCalibHB.png");
          cONE->Clear();
        }
        if (sub == 2) {
          cONE->Print("HistRMSCalibHE.png");
          cONE->Clear();
        }
        if (sub == 3) {
          cONE->Print("HistRMSCalibHO.png");
          cONE->Clear();
        }
        if (sub == 4) {
          cONE->Print("HistRMSCalibHF.png");
          cONE->Clear();
        }
      }
      if (test == 14) {
        if (sub == 1) {
          cONE->Print("Hist43TStoAllTSCalibHB.png");
          cONE->Clear();
        }
        if (sub == 2) {
          cONE->Print("Hist43TStoAllTSCalibHE.png");
          cONE->Clear();
        }
        if (sub == 3) {
          cONE->Print("Hist43TStoAllTSCalibHO.png");
          cONE->Clear();
        }
        if (sub == 4) {
          cONE->Print("Hist43TStoAllTSCalibHF.png");
          cONE->Clear();
        }
      }
      if (test == 15) {
        if (sub == 1) {
          cONE->Print("HistMeanPosCalibHB.png");
          cONE->Clear();
        }
        if (sub == 2) {
          cONE->Print("HistMeanPosCalibHE.png");
          cONE->Clear();
        }
        if (sub == 3) {
          cONE->Print("HistMeanPosCalibHO.png");
          cONE->Clear();
        }
        if (sub == 4) {
          cONE->Print("HistMeanPosCalibHF.png");
          cONE->Clear();
        }
      }
      if (test == 16) {
        if (sub == 1) {
          cONE->Print("HistMaxPosCalibHB.png");
          cONE->Clear();
        }
        if (sub == 2) {
          cONE->Print("HistMaxPosCalibHE.png");
          cONE->Clear();
        }
        if (sub == 3) {
          cONE->Print("HistMaxPosCalibHO.png");
          cONE->Clear();
        }
        if (sub == 4) {
          cONE->Print("HistMaxPosCalibHF.png");
          cONE->Clear();
        }
      }
    }  // end sub
  }    //end test

  //+++++++++++++++++++++++++++++
  //Test 21 (GS) Amplitude drift
  //+++++++++++++++++++++++++++++

  Map_Ampl[21][1][1] = (TH2F *)dir->FindObjectAny("h_mapDepth1AmplE34_HB");
  Map_Ampl[21][1][2] = (TH2F *)dir->FindObjectAny("h_mapDepth2AmplE34_HB");
  Map_Ampl[21][1][3] = (TH2F *)dir->FindObjectAny("h_mapDepth3AmplE34_HB");
  Map_Ampl[21][1][4] = (TH2F *)dir->FindObjectAny("h_mapDepth4AmplE34_HB");
  Map_Ampl[21][2][1] = (TH2F *)dir->FindObjectAny("h_mapDepth1AmplE34_HE");
  Map_Ampl[21][2][2] = (TH2F *)dir->FindObjectAny("h_mapDepth2AmplE34_HE");
  Map_Ampl[21][2][3] = (TH2F *)dir->FindObjectAny("h_mapDepth3AmplE34_HE");
  Map_Ampl[21][2][4] = (TH2F *)dir->FindObjectAny("h_mapDepth4AmplE34_HE");
  Map_Ampl[21][2][5] = (TH2F *)dir->FindObjectAny("h_mapDepth5AmplE34_HE");
  Map_Ampl[21][2][6] = (TH2F *)dir->FindObjectAny("h_mapDepth6AmplE34_HE");
  Map_Ampl[21][2][7] = (TH2F *)dir->FindObjectAny("h_mapDepth7AmplE34_HE");
  Map_Ampl[21][3][4] = (TH2F *)dir->FindObjectAny("h_mapDepth4AmplE34_HO");
  Map_Ampl[21][4][1] = (TH2F *)dir->FindObjectAny("h_mapDepth1AmplE34_HF");
  Map_Ampl[21][4][2] = (TH2F *)dir->FindObjectAny("h_mapDepth2AmplE34_HF");
  Map_Ampl[21][4][3] = (TH2F *)dir->FindObjectAny("h_mapDepth3AmplE34_HF");
  Map_Ampl[21][4][4] = (TH2F *)dir->FindObjectAny("h_mapDepth4AmplE34_HF");

  TH2F *Map_RefAmpl[5][ALLDEPTH];  // 2D histogramm for subdet, depth
  TH2F *Map_RefSUB[5][ALLDEPTH];   // 2d histogramm for subdet, depth

  Map_RefAmpl[1][1] = (TH2F *)refdir->FindObjectAny("h_mapDepth1AmplE34_HB");
  Map_RefAmpl[1][2] = (TH2F *)refdir->FindObjectAny("h_mapDepth2AmplE34_HB");
  Map_RefAmpl[1][3] = (TH2F *)refdir->FindObjectAny("h_mapDepth3AmplE34_HB");
  Map_RefAmpl[1][4] = (TH2F *)refdir->FindObjectAny("h_mapDepth4AmplE34_HB");
  Map_RefAmpl[2][1] = (TH2F *)refdir->FindObjectAny("h_mapDepth1AmplE34_HE");
  Map_RefAmpl[2][2] = (TH2F *)refdir->FindObjectAny("h_mapDepth2AmplE34_HE");
  Map_RefAmpl[2][3] = (TH2F *)refdir->FindObjectAny("h_mapDepth3AmplE34_HE");
  Map_RefAmpl[2][4] = (TH2F *)refdir->FindObjectAny("h_mapDepth4AmplE34_HE");
  Map_RefAmpl[2][5] = (TH2F *)refdir->FindObjectAny("h_mapDepth5AmplE34_HE");
  Map_RefAmpl[2][6] = (TH2F *)refdir->FindObjectAny("h_mapDepth6AmplE34_HE");
  Map_RefAmpl[2][7] = (TH2F *)refdir->FindObjectAny("h_mapDepth7AmplE34_HE");
  Map_RefAmpl[3][4] = (TH2F *)refdir->FindObjectAny("h_mapDepth4AmplE34_HO");
  Map_RefAmpl[4][1] = (TH2F *)refdir->FindObjectAny("h_mapDepth1AmplE34_HF");
  Map_RefAmpl[4][2] = (TH2F *)refdir->FindObjectAny("h_mapDepth2AmplE34_HF");
  Map_RefAmpl[4][3] = (TH2F *)refdir->FindObjectAny("h_mapDepth3AmplE34_HF");
  Map_RefAmpl[4][4] = (TH2F *)refdir->FindObjectAny("h_mapDepth4AmplE34_HF");

  Map_RefSUB[1][1] = (TH2F *)refdir->FindObjectAny("h_mapDepth1_HB");
  Map_RefSUB[1][2] = (TH2F *)refdir->FindObjectAny("h_mapDepth2_HB");
  Map_RefSUB[1][3] = (TH2F *)refdir->FindObjectAny("h_mapDepth3_HB");
  Map_RefSUB[1][4] = (TH2F *)refdir->FindObjectAny("h_mapDepth4_HB");
  Map_RefSUB[2][1] = (TH2F *)refdir->FindObjectAny("h_mapDepth1_HE");
  Map_RefSUB[2][2] = (TH2F *)refdir->FindObjectAny("h_mapDepth2_HE");
  Map_RefSUB[2][3] = (TH2F *)refdir->FindObjectAny("h_mapDepth3_HE");
  Map_RefSUB[2][4] = (TH2F *)refdir->FindObjectAny("h_mapDepth4_HE");
  Map_RefSUB[2][5] = (TH2F *)refdir->FindObjectAny("h_mapDepth5_HE");
  Map_RefSUB[2][6] = (TH2F *)refdir->FindObjectAny("h_mapDepth6_HE");
  Map_RefSUB[2][7] = (TH2F *)refdir->FindObjectAny("h_mapDepth7_HE");
  Map_RefSUB[3][4] = (TH2F *)refdir->FindObjectAny("h_mapDepth4_HO");
  Map_RefSUB[4][1] = (TH2F *)refdir->FindObjectAny("h_mapDepth1_HF");
  Map_RefSUB[4][2] = (TH2F *)refdir->FindObjectAny("h_mapDepth2_HF");
  Map_RefSUB[4][3] = (TH2F *)refdir->FindObjectAny("h_mapDepth3_HF");
  Map_RefSUB[4][4] = (TH2F *)refdir->FindObjectAny("h_mapDepth4_HF");

  HistAmplDepth[21][1][1] = new TH1F("diffAmpl_Depth1_HB", "", 100, -10., 10.);
  HistAmplDepth[21][1][2] = new TH1F("diffAmpl_Depth2_HB", "", 100, -10., 10.);
  HistAmplDepth[21][1][3] = new TH1F("diffAmpl_Depth3_HB", "", 100, -10., 10.);
  HistAmplDepth[21][1][4] = new TH1F("diffAmpl_Depth4_HB", "", 100, -10., 10.);
  HistAmplDepth[21][2][1] = new TH1F("diffAmpl_Depth1_HE", "", 100, -10., 10.);
  HistAmplDepth[21][2][2] = new TH1F("diffAmpl_Depth2_HE", "", 100, -10., 10.);
  HistAmplDepth[21][2][3] = new TH1F("diffAmpl_Depth3_HE", "", 100, -10., 10.);
  HistAmplDepth[21][2][4] = new TH1F("diffAmpl_Depth4_HE", "", 100, -10., 10.);
  HistAmplDepth[21][2][5] = new TH1F("diffAmpl_Depth5_HE", "", 100, -10., 10.);
  HistAmplDepth[21][2][6] = new TH1F("diffAmpl_Depth6_HE", "", 100, -10., 10.);
  HistAmplDepth[21][2][7] = new TH1F("diffAmpl_Depth7_HE", "", 100, -10., 10.);
  HistAmplDepth[21][3][4] = new TH1F("diffAmpl_Depth4_HO", "", 100, -10., 10.);
  HistAmplDepth[21][4][1] = new TH1F("diffAmpl_Depth1_HF", "", 100, -10., 10.);
  HistAmplDepth[21][4][2] = new TH1F("diffAmpl_Depth2_HF", "", 100, -10., 10.);
  HistAmplDepth[21][4][3] = new TH1F("diffAmpl_Depth3_HF", "", 100, -10., 10.);
  HistAmplDepth[21][4][4] = new TH1F("diffAmpl_Depth4_HF", "", 100, -10., 10.);

  for (int sub = 1; sub <= 4; sub++) {  //Subdetector: 1-HB, 2-HE, 3-HF, 4-HO
                                        //     if (sub==1) cHB->Divide(2,1);
    if (sub == 1)
      cHB->Divide(2, 2);
    //     if (sub==2) cHE->Divide(3,1);
    if (sub == 2)
      cHE->Divide(3, 3);
    if (sub == 3)
      cONE->Divide(1, 1);
    //     if (sub==4) cHF->Divide(2,1);
    if (sub == 4)
      cHF->Divide(2, 2);
    //       int k_min[5]={0,1,1,4,1}; // minimum depth for each subdet
    //     int k_max[5]={0,2,3,4,2}; // maximum depth for each subdet
    //       int k_max[5]={0,2,7,4,4}; // maximum depth for each subdet
    for (int k = k_min[sub]; k <= k_max[sub]; k++) {  //Depth
      if (sub == 1)
        cHB->cd(k);
      if (sub == 2)
        cHE->cd(k);
      if (sub == 3)
        cONE->cd(k - 3);
      if (sub == 4)
        cHF->cd(k);
      Map_Ampl[21][sub][k]->Divide(Map_Ampl[21][sub][k], Map_SUB[sub][k], 1, 1, "B");
      gPad->SetGridy();
      gPad->SetGridx();
      gPad->SetLogz();
      if (sub == 1)
        sprintf(str, "HB, Depth%d \b", k);
      if (sub == 2)
        sprintf(str, "HE, Depth%d \b", k);
      if (sub == 3)
        sprintf(str, "HO, Depth%d \b", k);
      if (sub == 4)
        sprintf(str, "HF, Depth%d \b", k);
      Map_Ampl[21][sub][k]->SetTitle(str);
      Map_Ampl[21][sub][k]->SetXTitle("#eta \b");
      Map_Ampl[21][sub][k]->SetYTitle("#phi \b");
      Map_Ampl[21][sub][k]->SetZTitle("Response \b");
      Map_Ampl[21][sub][k]->SetTitleOffset(1.1, "Z");
      Map_Ampl[21][sub][k]->Draw("COLZ");
      Map_Ampl[21][sub][k]->GetYaxis()->SetRangeUser(0, 71.);
      //            Map_Ampl[21][sub][k]->GetZaxis()->SetRangeUser(1., 10.);
      if (sub == 1) {
        cHB->Modified();
        cHB->Update();
      }
      if (sub == 2) {
        cHE->Modified();
        cHE->Update();
      }
      if (sub == 3) {
        cONE->Modified();
        cONE->Update();
      }
      if (sub == 4) {
        cHF->Modified();
        cHF->Update();
      }
    }  //end depth
    if (sub == 1) {
      cHB->Print("MapRateAmpl1HB.png");
      cHB->Clear();
    }
    if (sub == 2) {
      cHE->Print("MapRateAmpl1HE.png");
      cHE->Clear();
    }
    if (sub == 3) {
      cONE->Print("MapRateAmpl1HO.png");
      cONE->Clear();
    }
    if (sub == 4) {
      cHF->Print("MapRateAmpl1HF.png");
      cHF->Clear();
    }

    //     if (sub==1) cHB->Divide(2,1);
    if (sub == 1)
      cHB->Divide(2, 2);
    //     if (sub==2) cHE->Divide(3,1);
    if (sub == 2)
      cHE->Divide(3, 3);
    if (sub == 3)
      cONE->Divide(1, 1);
    //     if (sub==4) cHF->Divide(2,1);
    if (sub == 4)
      cHF->Divide(2, 2);

    for (int k = k_min[sub]; k <= k_max[sub]; k++) {  //Depth
      if (sub == 1)
        cHB->cd(k);
      if (sub == 2)
        cHE->cd(k);
      if (sub == 3)
        cONE->cd(k - 3);
      if (sub == 4)
        cHF->cd(k);
      Map_RefAmpl[sub][k]->Divide(Map_RefAmpl[sub][k], Map_RefSUB[sub][k], 1, 1, "B");
      gPad->SetGridy();
      gPad->SetGridx();
      gPad->SetLogz();
      if (sub == 1)
        sprintf(str, "HB, Depth%d \b", k);
      if (sub == 2)
        sprintf(str, "HE, Depth%d \b", k);
      if (sub == 3)
        sprintf(str, "HO, Depth%d \b", k);
      if (sub == 4)
        sprintf(str, "HF, Depth%d \b", k);
      Map_RefAmpl[sub][k]->SetTitle(str);
      Map_RefAmpl[sub][k]->SetXTitle("#eta \b");
      Map_RefAmpl[sub][k]->SetYTitle("#phi \b");
      Map_RefAmpl[sub][k]->SetZTitle("Response\b");
      Map_RefAmpl[sub][k]->SetTitleOffset(1.1, "Z");
      Map_RefAmpl[sub][k]->Draw("COLZ");
      Map_RefAmpl[sub][k]->GetYaxis()->SetRangeUser(0, 71.);
      //            Map_RefAmpl[21][sub][k]->GetZaxis()->SetRangeUser(1., 10.);
      if (sub == 1) {
        cHB->Modified();
        cHB->Update();
      }
      if (sub == 2) {
        cHE->Modified();
        cHE->Update();
      }
      if (sub == 3) {
        cONE->Modified();
        cONE->Update();
      }
      if (sub == 4) {
        cHF->Modified();
        cHF->Update();
      }
    }  //end depth
    if (sub == 1) {
      cHB->Print("MapRateAmpl2HB.png");
      cHB->Clear();
    }
    if (sub == 2) {
      cHE->Print("MapRateAmpl2HE.png");
      cHE->Clear();
    }
    if (sub == 3) {
      cONE->Print("MapRateAmpl2HO.png");
      cONE->Clear();
    }
    if (sub == 4) {
      cHF->Print("MapRateAmpl2HF.png");
      cHF->Clear();
    }

    //     if (sub==1) cHB->Divide(2,1);
    if (sub == 1)
      cHB->Divide(2, 2);
    //     if (sub==2) cHE->Divide(3,1);
    if (sub == 2)
      cHE->Divide(3, 3);
    if (sub == 3)
      cONE->Divide(1, 1);
    //     if (sub==4) cHF->Divide(2,1);
    if (sub == 4)
      cHF->Divide(2, 2);

    for (int k = k_min[sub]; k <= k_max[sub]; k++) {  //Depth
      if (sub == 1)
        cHB->cd(k);
      if (sub == 2)
        cHE->cd(k);
      if (sub == 3)
        cONE->cd(k - 3);
      if (sub == 4)
        cHF->cd(k);
      TH2F *TTT = new TH2F("Map", "Map", 82, -41, 40, 72, 0, 71);
      for (int x = 1; x <= Map_Ampl[21][sub][k]->GetXaxis()->GetNbins(); x++) {
        for (int y = 1; y <= Map_Ampl[21][sub][k]->GetYaxis()->GetNbins(); y++) {
          if (Map_Ampl[21][sub][k]->GetBinContent(x, y) != 0 && Map_RefAmpl[sub][k]->GetBinContent(x, y) != 0) {
            double ccc1 = Map_Ampl[21][sub][k]->GetBinContent(x, y) - Map_RefAmpl[sub][k]->GetBinContent(x, y);
            ccc1 = 100. * ccc1 / Map_Ampl[21][sub][k]->GetBinContent(x, y);  // in %
            HistAmplDepth[21][sub][k]->Fill(ccc1);
            Map_Ampl[21][sub][k]->SetBinContent(x, y, fabs(ccc1));
            if (fabs(ccc1) > porog[sub])
              TTT->SetBinContent(x, y, fabs(ccc1));
            else
              TTT->SetBinContent(x, y, 0);
          }
        }  //end y
      }    //esnd x
      gPad->SetGridy();
      gPad->SetGridx();
      //            gPad->SetLogz();
      if (sub == 1)
        sprintf(str, "HB, Depth%d \b", k);
      if (sub == 2)
        sprintf(str, "HE, Depth%d \b", k);
      if (sub == 3)
        sprintf(str, "HO, Depth%d \b", k);
      if (sub == 4)
        sprintf(str, "HF, Depth%d \b", k);
      TTT->SetTitle(str);
      TTT->SetXTitle("#eta \b");
      TTT->SetYTitle("#phi \b");
      TTT->SetZTitle("Relative difference, % \b");
      TTT->SetTitleOffset(0.9, "Z");
      TTT->Draw("COLZ");
      TTT->GetYaxis()->SetRangeUser(0, 71.);
      TTT->GetZaxis()->SetRangeUser(0, 10.);
      if (sub == 1) {
        cHB->Modified();
        cHB->Update();
      }
      if (sub == 2) {
        cHE->Modified();
        cHE->Update();
      }
      if (sub == 3) {
        cONE->Modified();
        cONE->Update();
      }
      if (sub == 4) {
        cHF->Modified();
        cHF->Update();
      }
    }  //end depth

    if (sub == 1) {
      cHB->Print("MapRateAmplDriftHB.png");
      cHB->Clear();
    }
    if (sub == 2) {
      cHE->Print("MapRateAmplDriftHE.png");
      cHE->Clear();
    }
    if (sub == 3) {
      cONE->Print("MapRateAmplDriftHO.png");
      cONE->Clear();
    }
    if (sub == 4) {
      cHF->Print("MapRateAmplDriftHF.png");
      cHF->Clear();
    }
    ////////////////////////////////////////////////////////////////////////////////////

    //     if (sub==1) cHB->Divide(2,1);
    if (sub == 1)
      cHB->Divide(2, 2);
    //     if (sub==2) cHE->Divide(3,1);
    if (sub == 2)
      cHE->Divide(3, 3);
    if (sub == 3)
      cONE->Divide(1, 1);
    //     if (sub==4) cHF->Divide(2,1);
    if (sub == 4)
      cHF->Divide(2, 2);

    for (int k = k_min[sub]; k <= k_max[sub]; k++) {  //Depth
      if (sub == 1)
        cHB->cd(k);
      if (sub == 2)
        cHE->cd(k);
      if (sub == 3)
        cONE->cd(k - 3);
      if (sub == 4)
        cHF->cd(k);
      gPad->SetGridy();
      gPad->SetGridx();
      gPad->SetLogy();
      if (sub == 1)
        sprintf(str, "HB, Depth%d \b", k);
      if (sub == 2)
        sprintf(str, "HE, Depth%d \b", k);
      if (sub == 3)
        sprintf(str, "HO, Depth%d \b", k);
      if (sub == 4)
        sprintf(str, "HF, Depth%d \b", k);
      HistAmplDepth[21][sub][k]->SetTitle(str);
      HistAmplDepth[21][sub][k]->SetYTitle("Number of cell-events \b");
      HistAmplDepth[21][sub][k]->SetXTitle("Per cent \b");
      HistAmplDepth[21][sub][k]->SetLineColor(4);
      HistAmplDepth[21][sub][k]->SetLineWidth(2);
      HistAmplDepth[21][sub][k]->SetTitleOffset(1.4, "Y");
      HistAmplDepth[21][sub][k]->Draw();
      //          HistAmplDepth[21][sub][k]->GetYaxis()->SetRangeUser(0, 72.);
      HistAmplDepth[21][sub][k]->GetXaxis()->SetRangeUser(-10., 10.);
      if (sub == 1) {
        cHB->Modified();
        cHB->Update();
      }
      if (sub == 2) {
        cHE->Modified();
        cHE->Update();
      }
      if (sub == 3) {
        cONE->Modified();
        cONE->Update();
      }
      if (sub == 4) {
        cHF->Modified();
        cHF->Update();
      }
      double min_x[] = {-1 * porog[sub], -1 * porog[sub]};
      double min_y[] = {0., 100000000.};
      TGraph *MIN = new TGraph(2, min_x, min_y);
      MIN->SetLineStyle(2);
      MIN->SetLineColor(2);
      MIN->SetLineWidth(2 + 100 * 100);
      MIN->SetFillStyle(3005);
      MIN->SetFillColor(2);
      MIN->Draw("L");
      double max_x[] = {porog[sub], porog[sub]};
      double max_y[] = {0., 100000000.};
      TGraph *MAX = new TGraph(2, max_x, max_y);
      MAX->SetLineStyle(2);
      MAX->SetLineColor(2);
      MAX->SetLineWidth(-2 - 100 * 100);
      MAX->SetFillStyle(3004);
      MAX->SetFillColor(2);
      MAX->Draw("L");
    }  // end depth
    if (sub == 1) {
      cHB->Print("HistAmplDriftDepthHB.png");
      cHB->Clear();
    }
    if (sub == 2) {
      cHE->Print("HistAmplDriftDepthHE.png");
      cHE->Clear();
    }
    if (sub == 3) {
      cONE->Print("HistAmplDriftDepthHO.png");
      cONE->Clear();
    }
    if (sub == 4) {
      cHF->Print("HistAmplDriftDepthHF.png");
      cHF->Clear();
    }
  }  //end sub

  //+++++++++++++++++++++++++++++++++++
  //Test 31, 32 Pedestal, pedestalWidths
  //++++++++++++++++++++++++++++++++++++

  Map_Ampl[31][1][1] = (TH2F *)dir->FindObjectAny("h_mapDepth1pedestal_HB");
  Map_Ampl[31][1][2] = (TH2F *)dir->FindObjectAny("h_mapDepth2pedestal_HB");
  Map_Ampl[31][1][3] = (TH2F *)dir->FindObjectAny("h_mapDepth3pedestal_HB");
  Map_Ampl[31][1][4] = (TH2F *)dir->FindObjectAny("h_mapDepth4pedestal_HB");
  Map_Ampl[31][2][1] = (TH2F *)dir->FindObjectAny("h_mapDepth1pedestal_HE");
  Map_Ampl[31][2][2] = (TH2F *)dir->FindObjectAny("h_mapDepth2pedestal_HE");
  Map_Ampl[31][2][3] = (TH2F *)dir->FindObjectAny("h_mapDepth3pedestal_HE");
  Map_Ampl[31][2][4] = (TH2F *)dir->FindObjectAny("h_mapDepth4pedestal_HE");
  Map_Ampl[31][2][5] = (TH2F *)dir->FindObjectAny("h_mapDepth5pedestal_HE");
  Map_Ampl[31][2][6] = (TH2F *)dir->FindObjectAny("h_mapDepth6pedestal_HE");
  Map_Ampl[31][2][7] = (TH2F *)dir->FindObjectAny("h_mapDepth7pedestal_HE");
  Map_Ampl[31][3][4] = (TH2F *)dir->FindObjectAny("h_mapDepth4pedestal_HO");
  Map_Ampl[31][4][1] = (TH2F *)dir->FindObjectAny("h_mapDepth1pedestal_HF");
  Map_Ampl[31][4][2] = (TH2F *)dir->FindObjectAny("h_mapDepth2pedestal_HF");
  Map_Ampl[31][4][3] = (TH2F *)dir->FindObjectAny("h_mapDepth3pedestal_HF");
  Map_Ampl[31][4][4] = (TH2F *)dir->FindObjectAny("h_mapDepth4pedestal_HF");

  Map_Ampl[32][1][1] = (TH2F *)dir->FindObjectAny("h_mapDepth1pedestalw_HB");
  Map_Ampl[32][1][2] = (TH2F *)dir->FindObjectAny("h_mapDepth2pedestalw_HB");
  Map_Ampl[32][1][3] = (TH2F *)dir->FindObjectAny("h_mapDepth3pedestalw_HB");
  Map_Ampl[32][1][4] = (TH2F *)dir->FindObjectAny("h_mapDepth4pedestalw_HB");
  Map_Ampl[32][2][1] = (TH2F *)dir->FindObjectAny("h_mapDepth1pedestalw_HE");
  Map_Ampl[32][2][2] = (TH2F *)dir->FindObjectAny("h_mapDepth2pedestalw_HE");
  Map_Ampl[32][2][3] = (TH2F *)dir->FindObjectAny("h_mapDepth3pedestalw_HE");
  Map_Ampl[32][2][4] = (TH2F *)dir->FindObjectAny("h_mapDepth4pedestalw_HE");
  Map_Ampl[32][2][5] = (TH2F *)dir->FindObjectAny("h_mapDepth5pedestalw_HE");
  Map_Ampl[32][2][6] = (TH2F *)dir->FindObjectAny("h_mapDepth6pedestalw_HE");
  Map_Ampl[32][2][7] = (TH2F *)dir->FindObjectAny("h_mapDepth7pedestalw_HE");
  Map_Ampl[32][3][4] = (TH2F *)dir->FindObjectAny("h_mapDepth4pedestalw_HO");
  Map_Ampl[32][4][1] = (TH2F *)dir->FindObjectAny("h_mapDepth1pedestalw_HF");
  Map_Ampl[32][4][2] = (TH2F *)dir->FindObjectAny("h_mapDepth2pedestalw_HF");
  Map_Ampl[32][4][3] = (TH2F *)dir->FindObjectAny("h_mapDepth3pedestalw_HF");
  Map_Ampl[32][4][4] = (TH2F *)dir->FindObjectAny("h_mapDepth4pedestalw_HF");

  HistPed[1][1][0] = (TH1F *)dir->FindObjectAny("h_pedestal0_HB");
  HistPed[1][1][1] = (TH1F *)dir->FindObjectAny("h_pedestal1_HB");
  HistPed[1][1][2] = (TH1F *)dir->FindObjectAny("h_pedestal2_HB");
  HistPed[1][1][3] = (TH1F *)dir->FindObjectAny("h_pedestal3_HB");
  HistPed[2][1][0] = (TH1F *)dir->FindObjectAny("h_pedestalw0_HB");
  HistPed[2][1][1] = (TH1F *)dir->FindObjectAny("h_pedestalw1_HB");
  HistPed[2][1][2] = (TH1F *)dir->FindObjectAny("h_pedestalw2_HB");
  HistPed[2][1][3] = (TH1F *)dir->FindObjectAny("h_pedestalw3_HB");

  HistPed[1][2][0] = (TH1F *)dir->FindObjectAny("h_pedestal0_HE");
  HistPed[1][2][1] = (TH1F *)dir->FindObjectAny("h_pedestal1_HE");
  HistPed[1][2][2] = (TH1F *)dir->FindObjectAny("h_pedestal2_HE");
  HistPed[1][2][3] = (TH1F *)dir->FindObjectAny("h_pedestal3_HE");
  HistPed[2][2][0] = (TH1F *)dir->FindObjectAny("h_pedestalw0_HE");
  HistPed[2][2][1] = (TH1F *)dir->FindObjectAny("h_pedestalw1_HE");
  HistPed[2][2][2] = (TH1F *)dir->FindObjectAny("h_pedestalw2_HE");
  HistPed[2][2][3] = (TH1F *)dir->FindObjectAny("h_pedestalw3_HE");

  HistPed[1][3][0] = (TH1F *)dir->FindObjectAny("h_pedestal0_HO");
  HistPed[1][3][1] = (TH1F *)dir->FindObjectAny("h_pedestal1_HO");
  HistPed[1][3][2] = (TH1F *)dir->FindObjectAny("h_pedestal2_HO");
  HistPed[1][3][3] = (TH1F *)dir->FindObjectAny("h_pedestal3_HO");
  HistPed[2][3][0] = (TH1F *)dir->FindObjectAny("h_pedestalw0_HO");
  HistPed[2][3][1] = (TH1F *)dir->FindObjectAny("h_pedestalw1_HO");
  HistPed[2][3][2] = (TH1F *)dir->FindObjectAny("h_pedestalw2_HO");
  HistPed[2][3][3] = (TH1F *)dir->FindObjectAny("h_pedestalw3_HO");

  HistPed[1][4][0] = (TH1F *)dir->FindObjectAny("h_pedestal0_HF");
  HistPed[1][4][1] = (TH1F *)dir->FindObjectAny("h_pedestal1_HF");
  HistPed[1][4][2] = (TH1F *)dir->FindObjectAny("h_pedestal2_HF");
  HistPed[1][4][3] = (TH1F *)dir->FindObjectAny("h_pedestal3_HF");
  HistPed[2][4][0] = (TH1F *)dir->FindObjectAny("h_pedestalw0_HF");
  HistPed[2][4][1] = (TH1F *)dir->FindObjectAny("h_pedestalw1_HF");
  HistPed[2][4][2] = (TH1F *)dir->FindObjectAny("h_pedestalw2_HF");
  HistPed[2][4][3] = (TH1F *)dir->FindObjectAny("h_pedestalw3_HF");

  for (int test = 31; test <= 32; test++) {  //Test: 31-Pedestals, 32-pedestal Widths,
    for (int sub = 1; sub <= 4; sub++) {     //Subdetector: 1-HB, 2-HE, 3-HO, 4-HF
                                             //        if (sub==1) cHB->Divide(2,1);
      if (sub == 1)
        cHB->Divide(2, 2);
      //        if (sub==2) cHE->Divide(3,1);
      if (sub == 2)
        cHE->Divide(3, 3);
      if (sub == 3)
        cONE->Divide(1, 1);
      //        if (sub==4) cHF->Divide(2,1);
      if (sub == 4)
        cHF->Divide(2, 2);
      //          int k_min[5]={0,1,1,4,1}; // minimum depth for each subdet
      //        int k_max[5]={0,2,3,4,2}; // maximum depth for each subdet
      //          int k_max[5]={0,2,7,4,4}; // maximum depth for each subdet
      for (int k = k_min[sub]; k <= k_max[sub]; k++) {  //Depths
        if (sub == 1)
          cHB->cd(k);
        if (sub == 2)
          cHE->cd(k);
        if (sub == 3)
          cONE->cd(k - 3);
        if (sub == 4)
          cHF->cd(k);
        Map_Ampl[test][sub][k]->Divide(Map_Ampl[test][sub][k], Map_SUB[sub][k], 1, 1, "B");
        gPad->SetGridy();
        gPad->SetGridx();
        gPad->SetLogz();
        if (sub == 1)
          sprintf(str, "HB, Depth%d \b", k);
        if (sub == 2)
          sprintf(str, "HE, Depth%d \b", k);
        if (sub == 3)
          sprintf(str, "HO, Depth%d \b", k);
        if (sub == 4)
          sprintf(str, "HF, Depth%d \b", k);
        Map_Ampl[test][sub][k]->SetTitle(str);
        Map_Ampl[test][sub][k]->SetXTitle("#eta \b");
        Map_Ampl[test][sub][k]->SetYTitle("#phi \b");
        Map_Ampl[test][sub][k]->SetZTitle("Rate \b");
        if (sub == 3)
          Map_Ampl[test][sub][k]->SetTitleOffset(0.8, "Z");
        Map_Ampl[test][sub][k]->Draw("COLZ");
        Map_Ampl[test][sub][k]->GetYaxis()->SetRangeUser(0, 72.);
        Map_Ampl[test][sub][k]->GetZaxis()->SetRangeUser(0.0001, 1.);
        if (sub == 1) {
          cHB->Modified();
          cHB->Update();
        }
        if (sub == 2) {
          cHE->Modified();
          cHE->Update();
        }
        if (sub == 3) {
          cONE->Modified();
          cONE->Update();
        }
        if (sub == 4) {
          cHF->Modified();
          cHF->Update();
        }
      }  //end depth
      if (test == 31) {
        if (sub == 1) {
          cHB->Print("MapRatePedHB.png");
          cHB->Clear();
        }
        if (sub == 2) {
          cHE->Print("MapRatePedHE.png");
          cHE->Clear();
        }
        if (sub == 3) {
          cONE->Print("MapRatePedHO.png");
          cONE->Clear();
        }
        if (sub == 4) {
          cHF->Print("MapRatePedHF.png");
          cHF->Clear();
        }
      }
      if (test == 32) {
        if (sub == 1) {
          cHB->Print("MapRatePedWidthsHB.png");
          cHB->Clear();
        }
        if (sub == 2) {
          cHE->Print("MapRatePedWidthsHE.png");
          cHE->Clear();
        }
        if (sub == 3) {
          cONE->Print("MapRatePedWidthsHO.png");
          cONE->Clear();
        }
        if (sub == 4) {
          cHF->Print("MapRatePedWidthsHF.png");
          cHF->Clear();
        }
      }

      ///////////////////////////////////////////////

      cPED->Divide(2, 2);
      for (int cap = 0; cap <= 3; cap++) {
        cPED->cd(cap + 1);
        gPad->SetGridy();
        gPad->SetGridx();
        gPad->SetLogy();

        if (sub == 1)
          sprintf(str, "HB, Cap%d, all depth\b", cap);
        if (sub == 2)
          sprintf(str, "HE, Cap%d, all depth\b", cap);
        if (sub == 3)
          sprintf(str, "HO, Cap%d, all depth\b", cap);
        if (sub == 4)
          sprintf(str, "HF, Cap%d, all depth\b", cap);

        HistPed[test - 30][sub][cap]->SetTitle(str);

        if (test == 31)
          HistPed[test - 30][sub][cap]->SetXTitle("Pedestals in each event & cell \b");
        if (test == 32)
          HistPed[test - 30][sub][cap]->SetXTitle("Pedestal Widths in each event & cell \b");

        HistPed[test - 30][sub][cap]->SetYTitle("Number of channel-events \b");
        HistPed[test - 30][sub][cap]->SetLineColor(4);
        HistPed[test - 30][sub][cap]->SetLineWidth(2);
        HistPed[test - 30][sub][cap]->SetTitleOffset(1.4, "Y");
        HistPed[test - 30][sub][cap]->Draw("");
        //            HistPed[test-30][sub][cap]->GetYaxis()->SetRangeUser(1., 100.);
        //            if (test==31) {gPad->SetLogx(); HistPed[test-30][sub][cap]->GetXaxis()->SetRangeUser(1., 10000.);}
        //   	      if (test==32) HistPed[test-30][sub][cap]->GetXaxis()->SetRangeUser(0., 5.);

        cPED->Modified();
        cPED->Update();
        double min_x[] = {Pedest[test - 31][sub], Pedest[test - 31][sub]};
        double min_y[] = {0., 100000000.};
        TGraph *MIN = new TGraph(2, min_x, min_y);
        MIN->SetLineStyle(2);
        MIN->SetLineColor(2);
        MIN->SetLineWidth(2 + 100 * 100);
        MIN->SetFillStyle(3005);
        MIN->SetFillColor(2);
        MIN->Draw("L");
      }
      if (test == 31) {
        if (sub == 1) {
          cPED->Print("HistPedestalsHB.png");
          cPED->Clear();
        }
        if (sub == 2) {
          cPED->Print("HistPedestalsHE.png");
          cPED->Clear();
        }
        if (sub == 3) {
          cPED->Print("HistPedestalsHO.png");
          cPED->Clear();
        }
        if (sub == 4) {
          cPED->Print("HistPedestalsHF.png");
          cPED->Clear();
        }
      }
      if (test == 32) {
        if (sub == 1) {
          cPED->Print("HistPedestalWidthsHB.png");
          cPED->Clear();
        }
        if (sub == 2) {
          cPED->Print("HistPedestalWidthsHE.png");
          cPED->Clear();
        }
        if (sub == 3) {
          cPED->Print("HistPedestalWidthsHO.png");
          cPED->Clear();
        }
        if (sub == 4) {
          cPED->Print("HistPedestalWidthsHF.png");
          cPED->Clear();
        }
      }
    }  // end sub
  }    //end test 31,32

  //+++++++++++++++++++++++++++++++++++
  //Test 33 Correlation of Pedestal, pedestalWidths Vs fullAmplitude
  //++++++++++++++++++++++++++++++++++++

  cPED->Clear();
  Map_Ped[1][1] = (TH2F *)dir->FindObjectAny("h2_pedvsampl_HB");
  Map_Ped[1][2] = (TH2F *)dir->FindObjectAny("h2_pedvsampl_HE");
  Map_Ped[1][3] = (TH2F *)dir->FindObjectAny("h2_pedvsampl_HO");
  Map_Ped[1][4] = (TH2F *)dir->FindObjectAny("h2_pedvsampl_HF");
  Map_Ped[2][1] = (TH2F *)dir->FindObjectAny("h2_pedwvsampl_HB");
  Map_Ped[2][2] = (TH2F *)dir->FindObjectAny("h2_pedwvsampl_HE");
  Map_Ped[2][3] = (TH2F *)dir->FindObjectAny("h2_pedwvsampl_HO");
  Map_Ped[2][4] = (TH2F *)dir->FindObjectAny("h2_pedwvsampl_HF");
  for (int sub = 1; sub <= 4; sub++) {  //Subdetector: 1-HB, 2-HE, 3-HO, 4-HF
    cPED->Divide(2, 1);
    for (int test = 1; test <= 2; test++) {
      cPED->cd(test);
      gPad->SetGridy();
      gPad->SetGridx();
      gPad->SetLogz();
      if (test == 1)
        Map_Ped[test][sub]->SetXTitle("Pedestal, fC \b");
      if (test == 2)
        Map_Ped[test][sub]->SetXTitle("pedestal Width, fC \b");
      Map_Ped[test][sub]->SetYTitle("Amplitude, fC \b");
      Map_Ped[test][sub]->SetZTitle("entries  \b");
      if (test == 1)
        sprintf(str, "Cap0 Pedestal vs Amplitude \b");
      if (test == 2)
        sprintf(str, "Cap0 pedestalWidth vs Amplitude \b");
      Map_Ped[test][sub]->SetTitle(str);
      Map_Ped[test][sub]->Draw("COLZ");
      // Map_Ped[test][sub]->GetYaxis()->SetRangeUser(0, 72.);
      //      Map_Ped[test][sub]->GetZaxis()->SetRangeUser(0.0001, 1.);
      cPED->Modified();
      cPED->Update();
    }  // test 1,2
    if (sub == 1) {
      cPED->Print("CorrelationsMapPedestalVsfullAmplitudeHB.png");
      cPED->Clear();
    }
    if (sub == 2) {
      cPED->Print("CorrelationsMapPedestalVsfullAmplitudeHE.png");
      cPED->Clear();
    }
    if (sub == 3) {
      cPED->Print("CorrelationsMapPedestalVsfullAmplitudeHO.png");
      cPED->Clear();
    }
    if (sub == 4) {
      cPED->Print("CorrelationsMapPedestalVsfullAmplitudeHF.png");
      cPED->Clear();
    }
  }  // end sub

  //+++++++++++++++++++++++++++++++++++
  //Test 41 Time Slices shape for good and bad channels
  //++++++++++++++++++++++++++++++++++++

  cONE->Clear();
  hist_GoodTSshape[1] = (TH1F *)dir->FindObjectAny("h_shape_good_channels_HB");
  hist_GoodTSshape[2] = (TH1F *)dir->FindObjectAny("h_shape_good_channels_HE");
  hist_GoodTSshape[3] = (TH1F *)dir->FindObjectAny("h_shape_good_channels_HO");
  hist_GoodTSshape[4] = (TH1F *)dir->FindObjectAny("h_shape_good_channels_HF");

  hist_GoodTSshape0[1] = (TH1F *)dir->FindObjectAny("h_shape0_good_channels_HB");
  hist_GoodTSshape0[2] = (TH1F *)dir->FindObjectAny("h_shape0_good_channels_HE");
  hist_GoodTSshape0[3] = (TH1F *)dir->FindObjectAny("h_shape0_good_channels_HO");
  hist_GoodTSshape0[4] = (TH1F *)dir->FindObjectAny("h_shape0_good_channels_HF");

  hist_BadTSshape[1] = (TH1F *)dir->FindObjectAny("h_shape_bad_channels_HB");
  hist_BadTSshape[2] = (TH1F *)dir->FindObjectAny("h_shape_bad_channels_HE");
  hist_BadTSshape[3] = (TH1F *)dir->FindObjectAny("h_shape_bad_channels_HO");
  hist_BadTSshape[4] = (TH1F *)dir->FindObjectAny("h_shape_bad_channels_HF");

  hist_BadTSshape0[1] = (TH1F *)dir->FindObjectAny("h_shape0_bad_channels_HB");
  hist_BadTSshape0[2] = (TH1F *)dir->FindObjectAny("h_shape0_bad_channels_HE");
  hist_BadTSshape0[3] = (TH1F *)dir->FindObjectAny("h_shape0_bad_channels_HO");
  hist_BadTSshape0[4] = (TH1F *)dir->FindObjectAny("h_shape0_bad_channels_HF");

  cONE->cd(1);

  for (int sub = 1; sub <= 4; sub++) {  //Subdetector: 1-HB, 2-HE, 3-HO, 4-HF

    gPad->SetGridy();
    gPad->SetGridx();
    gPad->SetLogz();
    hist_GoodTSshape[sub]->Divide(hist_GoodTSshape[sub], hist_GoodTSshape0[sub], 1, 1, "B");
    hist_GoodTSshape[sub]->SetXTitle("Time slice \b");
    hist_GoodTSshape[sub]->SetYTitle("ADC counts \b");
    sprintf(str, "Mean ADC Shape \b");
    hist_GoodTSshape[sub]->SetTitle(str);
    hist_GoodTSshape[sub]->Draw("");
    // hist_GoodTSshape[sub]->GetYaxis()->SetRangeUser(0, 72.);
    // hist_GoodTSshape[sub]->GetZaxis()->SetRangeUser(0.0001, 1.);
    cONE->Modified();
    cONE->Update();
    if (sub == 1) {
      cONE->Print("HistGoodTSshapesHB.png");
      cONE->Clear();
    }
    if (sub == 2) {
      cONE->Print("HistGoodTSshapesHE.png");
      cONE->Clear();
    }
    if (sub == 3) {
      cONE->Print("HistGoodTSshapesHO.png");
      cONE->Clear();
    }
    if (sub == 4) {
      cONE->Print("HistGoodTSshapesHF.png");
      cONE->Clear();
    }
  }  // end sub

  for (int sub = 1; sub <= 4; sub++) {  //Subdetector: 1-HB, 2-HE, 3-HO, 4-HF

    gPad->SetGridy();
    gPad->SetGridx();
    gPad->SetLogz();
    hist_BadTSshape[sub]->Divide(hist_BadTSshape[sub], hist_BadTSshape0[sub], 1, 1, "B");
    hist_BadTSshape[sub]->SetXTitle("Time slice \b");
    hist_BadTSshape[sub]->SetYTitle("ADC counts \b");
    sprintf(str, "Mean ADC Shape \b");
    hist_BadTSshape[sub]->SetTitle(str);
    hist_BadTSshape[sub]->Draw("");
    // hist_BadTSshape[sub]->GetYaxis()->SetRangeUser(0, 72.);
    // hist_BadTSshape[sub]->GetZaxis()->SetRangeUser(0.0001, 1.);
    cONE->Modified();
    cONE->Update();
    if (sub == 1) {
      cONE->Print("HistBadTSshapesHB.png");
      cONE->Clear();
    }
    if (sub == 2) {
      cONE->Print("HistBadTSshapesHE.png");
      cONE->Clear();
    }
    if (sub == 3) {
      cONE->Print("HistBadTSshapesHO.png");
      cONE->Clear();
    }
    if (sub == 4) {
      cONE->Print("HistBadTSshapesHF.png");
      cONE->Clear();
    }
  }  // end sub

  //+++++++++++++++++++++++++++++
  //   Entries in different TSs:
  //+++++++++++++++++++++++++++++
  Map_SUBTS[1][1] = (TH2F *)dir->FindObjectAny("h_mapDepth1TS2_HB");
  Map_SUBTS[1][2] = (TH2F *)dir->FindObjectAny("h_mapDepth2TS2_HB");
  Map_SUBTS[1][3] = (TH2F *)dir->FindObjectAny("h_mapDepth3TS2_HB");
  Map_SUBTS[1][4] = (TH2F *)dir->FindObjectAny("h_mapDepth4TS2_HB");

  Map_SUBTS[2][1] = (TH2F *)dir->FindObjectAny("h_mapDepth1TS2_HE");
  Map_SUBTS[2][2] = (TH2F *)dir->FindObjectAny("h_mapDepth2TS2_HE");
  Map_SUBTS[2][3] = (TH2F *)dir->FindObjectAny("h_mapDepth3TS2_HE");
  Map_SUBTS[2][4] = (TH2F *)dir->FindObjectAny("h_mapDepth4TS2_HE");
  Map_SUBTS[2][5] = (TH2F *)dir->FindObjectAny("h_mapDepth5TS2_HE");
  Map_SUBTS[2][6] = (TH2F *)dir->FindObjectAny("h_mapDepth6TS2_HE");
  Map_SUBTS[2][7] = (TH2F *)dir->FindObjectAny("h_mapDepth7TS2_HE");

  Map_SUBTS[3][4] = (TH2F *)dir->FindObjectAny("h_mapDepth4TS012_HO");

  Map_SUBTS[4][1] = (TH2F *)dir->FindObjectAny("h_mapDepth1TS1_HF");
  Map_SUBTS[4][2] = (TH2F *)dir->FindObjectAny("h_mapDepth2TS1_HF");
  Map_SUBTS[4][3] = (TH2F *)dir->FindObjectAny("h_mapDepth3TS1_HF");
  Map_SUBTS[4][4] = (TH2F *)dir->FindObjectAny("h_mapDepth4TS1_HF");

  //////////////////////////////////////////////////////////////
  for (int sub = 1; sub <= 4; sub++) {  //Subdetector: 1-HB, 2-HE, 3-HF, 4-HO
                                        //     if (sub==1) cHB->Divide(2,1);
    if (sub == 1)
      cHB->Divide(2, 2);
    //     if (sub==2) cHE->Divide(3,1);
    if (sub == 2)
      cHE->Divide(3, 3);
    if (sub == 3)
      cONE->Divide(1, 1);
    //     if (sub==4) cHF->Divide(2,1);
    if (sub == 4)
      cHF->Divide(2, 2);
    //       int k_min[5]={0,1,1,4,1}; // minimum depth for each subdet
    //     int k_max[5]={0,2,3,4,2}; // maximum depth for each subdet
    //       int k_max[5]={0,2,7,4,4}; // maximum depth for each subdet
    for (int k = k_min[sub]; k <= k_max[sub]; k++) {  //Depth
      if (sub == 1)
        cHB->cd(k);
      if (sub == 2)
        cHE->cd(k);
      if (sub == 3)
        cONE->cd(k - 3);
      if (sub == 4)
        cHF->cd(k);
      Map_SUBTS[sub][k]->Divide(Map_SUBTS[sub][k], Map_SUB[sub][k], 1, 1, "B");
      gPad->SetGridy();
      gPad->SetGridx();
      gPad->SetLogz();
      if (sub == 1)
        sprintf(str, "HB, Depth%d \b", k);
      if (sub == 2)
        sprintf(str, "HE, Depth%d \b", k);
      if (sub == 3)
        sprintf(str, "HO, Depth%d \b", k);
      if (sub == 4)
        sprintf(str, "HF, Depth%d \b", k);
      Map_SUBTS[sub][k]->SetTitle(str);
      Map_SUBTS[sub][k]->SetXTitle("#eta \b");
      Map_SUBTS[sub][k]->SetYTitle("#phi \b");
      Map_SUBTS[sub][k]->SetZTitle("Rate \b");
      if (sub == 3)
        Map_SUBTS[sub][k]->SetTitleOffset(0.8, "Z");
      Map_SUBTS[sub][k]->Draw("COLZ");
      Map_SUBTS[sub][k]->GetYaxis()->SetRangeUser(0, 72.);
      Map_SUBTS[sub][k]->GetZaxis()->SetRangeUser(0.0001, 1.);
      if (sub == 1) {
        cHB->Modified();
        cHB->Update();
      }
      if (sub == 2) {
        cHE->Modified();
        cHE->Update();
      }
      if (sub == 3) {
        cONE->Modified();
        cONE->Update();
      }
      if (sub == 4) {
        cHF->Modified();
        cHF->Update();
      }
    }  //end depth

    if (sub == 1) {
      cHB->Print("Hist_mapDepthAllTS2_HB.png");
      cHB->Clear();
    }
    if (sub == 2) {
      cHE->Print("Hist_mapDepthAllTS2_HE.png");
      cHE->Clear();
    }
    if (sub == 3) {
      cONE->Print("Hist_mapDepthAllTS012_HO.png");
      cONE->Clear();
    }
    if (sub == 4) {
      cHF->Print("Hist_mapDepthAllTS1_HF.png");
      cHF->Clear();
    }
  }  // end sub

  //////////////////////////////////////////////////////////////////////////////////////////////////////

  /*
 //+++++++++++++++++++++++++++++++++++  
//Test 42 ADC in TS distributions   
//++++++++++++++++++++++++++++++++++++
 
std::cout<<" We are here to print ADC "<<std::endl; 

  hist_ADC_All[1] = (TH1F*)dir->FindObjectAny("h_ADC_HB");
  hist_ADC_All[2] = (TH1F*)dir->FindObjectAny("h_ADC_HE");
  hist_ADC_All[3] = (TH1F*)dir->FindObjectAny("h_ADC_HO");
  hist_ADC_All[4] = (TH1F*)dir->FindObjectAny("h_ADC_HF");


  hist_ADC_DS[1][1] = (TH1F*)dir->FindObjectAny("h_ADC_HBdepth1");
  hist_ADC_DS[1][2] = (TH1F*)dir->FindObjectAny("h_ADC_HBdepth2");
  hist_ADC_DS[2][1] = (TH1F*)dir->FindObjectAny("h_ADC_HEdepth1");
  hist_ADC_DS[2][2] = (TH1F*)dir->FindObjectAny("h_ADC_HEdepth2");
  hist_ADC_DS[2][3] = (TH1F*)dir->FindObjectAny("h_ADC_HEdepth3");
  hist_ADC_DS[3][4] = (TH1F*)dir->FindObjectAny("h_ADC_HOdepth4");
  hist_ADC_DS[4][1] = (TH1F*)dir->FindObjectAny("h_ADC_HFdepth1");
  hist_ADC_DS[4][2] = (TH1F*)dir->FindObjectAny("h_ADC_HFdepth2");


  cONE->Clear();   
  cONE->Divide(1,1);
  cONE->cd(1);

  for (int sub=1;sub<=4;sub++) {  //Subdetector: 1-HB, 2-HE, 3-HO, 4-HF         
      gPad->SetGridy();
      gPad->SetGridx();
      gPad->SetLogy();
      hist_ADC_All[sub]->SetXTitle("ADC counts \b");
      hist_ADC_All[sub]->SetYTitle("Number of channels-events \b");
      if (sub==1) sprintf(str,"ADC counts Distribution HB\b");
      if (sub==2) sprintf(str,"ADC counts Distribution HE\b");
      if (sub==3) sprintf(str,"ADC counts Distribution HO\b");
      if (sub==4) sprintf(str,"ADC counts Distribution HF\b");
      hist_ADC_All[sub]->SetTitle(str);
      hist_ADC_All[sub]->Draw("");
      // hist_ADC_All[sub]->GetYaxis()->SetRangeUser(0, 72.);
      hist_ADC_All[sub]->GetXaxis()->SetRangeUser(0.000, 1000.);
      cONE->Modified(); cONE->Update();
      if (sub==1) {cONE->Print("Hist_ADC_HB_All.png"); cONE->Clear();} 
      if (sub==2) {cONE->Print("Hist_ADC_HE_All.png"); cONE->Clear();}
      if (sub==3) {cONE->Print("Hist_ADC_HO_All.png"); cONE->Clear();}
      if (sub==4) {cONE->Print("Hist_ADC_HF_All.png"); cONE->Clear();} 
  }// end sub      
  

  for (int sub=1;sub<=4;sub++) {  //Subdetector: 1-HB, 2-HE, 3-HO, 4-HF
          if (sub==1) cHB->Divide(2,1);
          if (sub==2) cHE->Divide(3,1);
          if (sub==3) cONE->Divide(1,1);
          if (sub==4) cHB->Divide(2,1);
          int k_min[5]={0,1,1,4,1}; // minimum depth for each subdet
          int k_max[5]={0,2,3,4,2}; // maximum depth for each subdet	
          for (int k=k_min[sub];k<=k_max[sub];k++) {  //Depths 
              if (sub==1) cHB->cd(k); 
              if (sub==2) cHE->cd(k);
	      if (sub==3) cONE->cd(k-3);
	      if (sub==4) cHB->cd(k); 
      	      gPad->SetGridy();
              gPad->SetGridx();
              gPad->SetLogy();
              hist_ADC_DS[sub][k]->SetXTitle("ADC counts \b");
              hist_ADC_DS[sub][k]->SetYTitle("Number of channels-events \b");
              if (sub==1) sprintf(str,"HB, Depth%d \b", k);
              if (sub==2) sprintf(str,"HE, Depth%d \b", k);
              if (sub==3) sprintf(str,"HO, Depth%d \b", k);
              if (sub==4) sprintf(str,"HF, Depth%d \b", k); 
              hist_ADC_DS[sub][k]->SetTitle(str);
              hist_ADC_DS[sub][k]->Draw("");
           // hist_ADC_DS[sub][k]->GetYaxis()->SetRangeUser(0, 72.);
              hist_ADC_DS[sub][k]->GetXaxis()->SetRangeUser(0.000, 1000.);
              if (sub==1) {cHB->Modified(); cHB->Update();} 
              if (sub==2) {cHE->Modified(); cHE->Update();}
              if (sub==3) {cONE->Modified();cONE->Update();}
              if (sub==4) {cHB->Modified(); cHB->Update();} 
          }//end depth    
	  if (sub==1) {cHB->Print("Hist_ADC_HB_DS.png"); cHB->Clear();} 
          if (sub==2) {cHE->Print("Hist_ADC_HE_DS.png"); cHE->Clear();}
          if (sub==3) {cONE->Print("Hist_ADC_HO_DS.png"); cONE->Clear();}
          if (sub==4) {cHB->Print("Hist_ADC_HF_DS.png"); cHB->Clear();} 
  }// end sub


 //+++++++++++++++++++++++++++++++++++  
//Test 43 Sum ADC in TS distributions   
//++++++++++++++++++++++++++++++++++++

  hist_SumADC[1][1] = (TH1F*)dir->FindObjectAny("h_sumamplitude_depth1_HB");
  hist_SumADC[1][2] = (TH1F*)dir->FindObjectAny("h_sumamplitude_depth2_HB");
  hist_SumADC[2][1] = (TH1F*)dir->FindObjectAny("h_sumamplitude_depth1_HE");
  hist_SumADC[2][2] = (TH1F*)dir->FindObjectAny("h_sumamplitude_depth2_HE");
  hist_SumADC[2][3] = (TH1F*)dir->FindObjectAny("h_sumamplitude_depth3_HE");
  hist_SumADC[3][4] = (TH1F*)dir->FindObjectAny("h_sumamplitude_depth4_HO");
  hist_SumADC[4][1] = (TH1F*)dir->FindObjectAny("h_sumamplitude_depth1_HF");
  hist_SumADC[4][2] = (TH1F*)dir->FindObjectAny("h_sumamplitude_depth2_HF");

  hist_SumADC0[1][1] = (TH1F*)dir->FindObjectAny("h_sumamplitude_depth1_HB0");
  hist_SumADC0[1][2] = (TH1F*)dir->FindObjectAny("h_sumamplitude_depth2_HB0");
  hist_SumADC0[2][1] = (TH1F*)dir->FindObjectAny("h_sumamplitude_depth1_HE0");
  hist_SumADC0[2][2] = (TH1F*)dir->FindObjectAny("h_sumamplitude_depth2_HE0");
  hist_SumADC0[2][3] = (TH1F*)dir->FindObjectAny("h_sumamplitude_depth3_HE0");
  hist_SumADC0[3][4] = (TH1F*)dir->FindObjectAny("h_sumamplitude_depth4_HO0");
  hist_SumADC0[4][1] = (TH1F*)dir->FindObjectAny("h_sumamplitude_depth1_HF0");
  hist_SumADC0[4][2] = (TH1F*)dir->FindObjectAny("h_sumamplitude_depth2_HF0");

  hist_SumADC1[1][1] = (TH1F*)dir->FindObjectAny("h_sumamplitude_depth1_HB1");
  hist_SumADC1[1][2] = (TH1F*)dir->FindObjectAny("h_sumamplitude_depth2_HB1");
  hist_SumADC1[2][1] = (TH1F*)dir->FindObjectAny("h_sumamplitude_depth1_HE1");
  hist_SumADC1[2][2] = (TH1F*)dir->FindObjectAny("h_sumamplitude_depth2_HE1");
  hist_SumADC1[2][3] = (TH1F*)dir->FindObjectAny("h_sumamplitude_depth3_HE1");
  hist_SumADC1[3][4] = (TH1F*)dir->FindObjectAny("h_sumamplitude_depth4_HO1");
  hist_SumADC1[4][1] = (TH1F*)dir->FindObjectAny("h_sumamplitude_depth1_HF1");
  hist_SumADC1[4][2] = (TH1F*)dir->FindObjectAny("h_sumamplitude_depth2_HF1");

  for (int sub=1;sub<=4;sub++) {  //Subdetector: 1-HB, 2-HE, 3-HO, 4-HF
          if (sub==1) cHB->Divide(2,1);
          if (sub==2) cHE->Divide(3,1);
          if (sub==3) cONE->Divide(1,1);
          if (sub==4) cHB->Divide(2,1);
          int k_min[5]={0,1,1,4,1}; // minimum depth for each subdet
          int k_max[5]={0,2,3,4,2}; // maximum depth for each subdet	
          for (int k=k_min[sub];k<=k_max[sub];k++) {  //Depths 
              if (sub==1) cHB->cd(k); 
              if (sub==2) cHE->cd(k);
	      if (sub==3) cONE->cd(k-3);
	      if (sub==4) cHB->cd(k); 
      	      gPad->SetGridy();
              gPad->SetGridx();
              gPad->SetLogy();
              hist_SumADC[sub][k]->SetXTitle("ADC sum \b");
              hist_SumADC[sub][k]->SetYTitle("Number of channels-events \b");
              if (sub==1) sprintf(str,"HB, Depth%d \b", k);
              if (sub==2) sprintf(str,"HE, Depth%d \b", k);
              if (sub==3) sprintf(str,"HO, Depth%d \b", k);
              if (sub==4) sprintf(str,"HF, Depth%d \b", k); 
              hist_SumADC[sub][k]->SetTitle(str);
              hist_SumADC[sub][k]->Draw("");
           // hist_SumADC[sub][k]->GetYaxis()->SetRangeUser(0, 72.);
           // hist_SumADC[sub][k]->GetZaxis()->SetRangeUser(0.0001, 1.);
              if (sub==1) {cHB->Modified(); cHB->Update();} 
              if (sub==2) {cHE->Modified(); cHE->Update();}
              if (sub==3) {cONE->Modified();cONE->Update();}
              if (sub==4) {cHB->Modified(); cHB->Update();} 
          }//end depth    
	  if (sub==1) {cHB->Print("Hist_SumADC_HB.png"); cHB->Clear();} 
          if (sub==2) {cHE->Print("Hist_SumADC_HE.png"); cHE->Clear();}
          if (sub==3) {cONE->Print("Hist_SumADC_HO.png"); cONE->Clear();}
          if (sub==4) {cHB->Print("Hist_SumADC_HF.png"); cHB->Clear();} 
  }// end sub


  for (int sub=1;sub<=4;sub++) {  //Subdetector: 1-HB, 2-HE, 3-HO, 4-HF
          if (sub==1) cHB->Divide(2,1);
          if (sub==2) cHE->Divide(3,1);
          if (sub==3) cONE->Divide(1,1);
          if (sub==4) cHB->Divide(2,1);
          int k_min[5]={0,1,1,4,1}; // minimum depth for each subdet
          int k_max[5]={0,2,3,4,2}; // maximum depth for each subdet	
          for (int k=k_min[sub];k<=k_max[sub];k++) {  //Depths 
              if (sub==1) cHB->cd(k); 
              if (sub==2) cHE->cd(k);
	      if (sub==3) cONE->cd(k-3);
	      if (sub==4) cHB->cd(k); 
      	      gPad->SetGridy();
              gPad->SetGridx();
              gPad->SetLogy();
              hist_SumADC0[sub][k]->SetXTitle("ADC sum \b");
              hist_SumADC0[sub][k]->SetYTitle("Number of channels-events \b");
              if (sub==1) sprintf(str,"HB, Depth%d \b", k);
              if (sub==2) sprintf(str,"HE, Depth%d \b", k);
              if (sub==3) sprintf(str,"HO, Depth%d \b", k);
              if (sub==4) sprintf(str,"HF, Depth%d \b", k); 
              hist_SumADC0[sub][k]->SetTitle(str);
              hist_SumADC0[sub][k]->Draw("");
           // hist_SumADC0[sub][k]->GetYaxis()->SetRangeUser(0, 72.);
           // hist_SumADC0[sub][k]->GetZaxis()->SetRangeUser(0.0001, 1.);
              if (sub==1) {cHB->Modified(); cHB->Update();} 
              if (sub==2) {cHE->Modified(); cHE->Update();}
              if (sub==3) {cONE->Modified();cONE->Update();}
              if (sub==4) {cHB->Modified(); cHB->Update();} 
          }//end depth    
	  if (sub==1) {cHB->Print("Hist_SumADC_HB0.png"); cHB->Clear();} 
          if (sub==2) {cHE->Print("Hist_SumADC_HE0.png"); cHE->Clear();}
          if (sub==3) {cONE->Print("Hist_SumADC_HO0.png"); cONE->Clear();}
          if (sub==4) {cHB->Print("Hist_SumADC_HF0.png"); cHB->Clear();} 
  }// end sub

  for (int sub=1;sub<=4;sub++) {  //Subdetector: 1-HB, 2-HE, 3-HO, 4-HF
          if (sub==1) cHB->Divide(2,1);
          if (sub==2) cHE->Divide(3,1);
          if (sub==3) cONE->Divide(1,1);
          if (sub==4) cHB->Divide(2,1);
          int k_min[5]={0,1,1,4,1}; // minimum depth for each subdet
          int k_max[5]={0,2,3,4,2}; // maximum depth for each subdet	
          for (int k=k_min[sub];k<=k_max[sub];k++) {  //Depths 
              if (sub==1) cHB->cd(k); 
              if (sub==2) cHE->cd(k);
	      if (sub==3) cONE->cd(k-3);
	      if (sub==4) cHB->cd(k); 
      	      gPad->SetGridy();
              gPad->SetGridx();
              gPad->SetLogy();
              hist_SumADC1[sub][k]->SetXTitle("ADC sum \b");
              hist_SumADC1[sub][k]->SetYTitle("Number of channels-events \b");
              if (sub==1) sprintf(str,"HB, Depth%d \b", k);
              if (sub==2) sprintf(str,"HE, Depth%d \b", k);
              if (sub==3) sprintf(str,"HO, Depth%d \b", k);
              if (sub==4) sprintf(str,"HF, Depth%d \b", k); 
              hist_SumADC1[sub][k]->SetTitle(str);
              hist_SumADC1[sub][k]->Draw("");
           // hist_SumADC1[sub][k]->GetYaxis()->SetRangeUser(0, 72.);
           // hist_SumADC1[sub][k]->GetZaxis()->SetRangeUser(0.0001, 1.);
              if (sub==1) {cHB->Modified(); cHB->Update();} 
              if (sub==2) {cHE->Modified(); cHE->Update();}
              if (sub==3) {cONE->Modified();cONE->Update();}
              if (sub==4) {cHB->Modified(); cHB->Update();} 
          }//end depth    
	  if (sub==1) {cHB->Print("Hist_SumADC_HB1.png"); cHB->Clear();} 
          if (sub==2) {cHE->Print("Hist_SumADC_HE1.png"); cHE->Clear();}
          if (sub==3) {cONE->Print("Hist_SumADC_HO1.png"); cONE->Clear();}
          if (sub==4) {cHB->Print("Hist_SumADC_HF1.png"); cHB->Clear();} 
  }// end sub

*/

  /////////////  /////////////  /////////////  /////////////  /////////////  ////////////////////         phi-symmetry for Calibration Group:
  /////////////  /////////////  /////////////  ////////////  /////////////  /////////////////////         Phi-symmetry for Calibration Group:
  /////////////  /////////////  /////////////  ////////////  /////////////  /////////////////////         Phi-symmetry for Calibration Group:
  /////////////  /////////////  /////////////  ///////////  /////////////  //////////////////////         Phi-symmetry for Calibration Group:
  /////////////  /////////////  /////////////  ///////////  /////////////  //////////////////////         Phi-symmetry for Calibration Group:

  /*
    depth=5                    all
    i=1-82 in initial histo
    j=i-1 in massives
    
    j= 13   23 (11)           12    25 (!!!)
    j-41 in histo
    -28  -18 (11)          -29    -16
    
    j= 59   69 (11)           57    70 (!!!)
    j-41 in histo
    18   28 (11)           16    29
  */

  const int nsub = 4;
  const int neta = 82;
  const int nphi = 72;
  int njeta = neta;
  int njphi = nphi;
  //const int ndepth = 7;
  int ndepth;
  /////////////   ///////////// //////////////////////////  /////////////  /////////////  /////////////  /////////////  /////////////  ////////////////////         Phi-symmetry for Calibration Group:
  /////////////  /////////////  //////////////////////////  /////////////  /////////////  /////////////  /////////////  ////////////////////         Phi-symmetry for Calibration Group:
  /////////////  /////////////  /////////////  /////////////  /////////////  /////////////  /////////////  ////////////////////         Phi-symmetry for Calibration Group:

  //////////////////////////////////////////////////////////////////////////////////////////////////// Digi  Digi  Digi  Digi  Digi  Digi  Digi  Digi  Digi  Digi  Digi  Digi  Digi  Digi  Digi
  //////////////////////////////////////////////////////////////////////////////////////////////////// Digi  Digi  Digi  Digi  Digi  Digi  Digi  Digi  Digi  Digi  Digi  Digi  Digi  Digi  Digi
  //////////////////////////////////////////////////////////////////////////////////////////////////// Digi  Digi  Digi  Digi  Digi  Digi  Digi  Digi  Digi  Digi  Digi  Digi  Digi  Digi  Digi
  //////////////////////////////////////////////////////////////////////////////////////////////////// Digi  Digi  Digi  Digi  Digi  Digi  Digi  Digi  Digi  Digi  Digi  Digi  Digi  Digi  Digi

  ////////////////////////////////////////////////////////////////////////////////////////////////////         Phi-symmetry for Calibration Group:    Digi HB
  ////////////////////////////////////////////////////////////////////////////////////////////////////         Phi-symmetry for Calibration Group:    Digi HB
  ////////////////////////////////////////////////////////////////////////////////////////////////////         Phi-symmetry for Calibration Group:    Digi HB
  //  int k_max[5]={0,4,7,4,4}; // maximum depth for each subdet
  //ndepth = k_max[5];
  ndepth = 4;
  double adigiHB[ndepth][njeta][njphi];
  double digivarianceHB[ndepth][njeta][njphi];
  //                                   RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR:   Digi HB
  TH2F *amplitudechannel1HB1 = (TH2F *)dir->FindObjectAny("h_amplitudechannel1_HB1");
  TH2F *amplitudechannel0HB1 = (TH2F *)dir->FindObjectAny("h_amplitudechannel0_HB1");
  TH2F *amplitudechannelHB1 = (TH2F *)amplitudechannel1HB1->Clone("amplitudechannelHB1");
  amplitudechannelHB1->Divide(amplitudechannel1HB1, amplitudechannel0HB1, 1, 1, "B");
  TH2F *amplitudechannel1HB2 = (TH2F *)dir->FindObjectAny("h_amplitudechannel1_HB2");
  TH2F *amplitudechannel0HB2 = (TH2F *)dir->FindObjectAny("h_amplitudechannel0_HB2");
  TH2F *amplitudechannelHB2 = (TH2F *)amplitudechannel1HB2->Clone("amplitudechannelHB2");
  amplitudechannelHB2->Divide(amplitudechannel1HB2, amplitudechannel0HB2, 1, 1, "B");
  TH2F *amplitudechannel1HB3 = (TH2F *)dir->FindObjectAny("h_amplitudechannel1_HB3");
  TH2F *amplitudechannel0HB3 = (TH2F *)dir->FindObjectAny("h_amplitudechannel0_HB3");
  TH2F *amplitudechannelHB3 = (TH2F *)amplitudechannel1HB3->Clone("amplitudechannelHB3");
  amplitudechannelHB3->Divide(amplitudechannel1HB3, amplitudechannel0HB3, 1, 1, "B");
  TH2F *amplitudechannel1HB4 = (TH2F *)dir->FindObjectAny("h_amplitudechannel1_HB4");
  TH2F *amplitudechannel0HB4 = (TH2F *)dir->FindObjectAny("h_amplitudechannel0_HB4");
  TH2F *amplitudechannelHB4 = (TH2F *)amplitudechannel1HB4->Clone("amplitudechannelHB4");
  amplitudechannelHB4->Divide(amplitudechannel1HB4, amplitudechannel0HB4, 1, 1, "B");
  for (int jeta = 0; jeta < njeta; jeta++) {
    //====================================================================== PHI normalization & put R into massive adigiHB
    //preparation for PHI normalization:
    double sumdigiHB0 = 0;
    int nsumdigiHB0 = 0;
    double sumdigiHB1 = 0;
    int nsumdigiHB1 = 0;
    double sumdigiHB2 = 0;
    int nsumdigiHB2 = 0;
    double sumdigiHB3 = 0;
    int nsumdigiHB3 = 0;
    for (int jphi = 0; jphi < njphi; jphi++) {
      adigiHB[0][jeta][jphi] = amplitudechannelHB1->GetBinContent(jeta + 1, jphi + 1);
      adigiHB[1][jeta][jphi] = amplitudechannelHB2->GetBinContent(jeta + 1, jphi + 1);
      adigiHB[2][jeta][jphi] = amplitudechannelHB3->GetBinContent(jeta + 1, jphi + 1);
      adigiHB[3][jeta][jphi] = amplitudechannelHB4->GetBinContent(jeta + 1, jphi + 1);
      if (adigiHB[0][jeta][jphi] > 0.) {
        sumdigiHB0 += adigiHB[0][jeta][jphi];
        ++nsumdigiHB0;
      }
      if (adigiHB[1][jeta][jphi] > 0.) {
        sumdigiHB1 += adigiHB[1][jeta][jphi];
        ++nsumdigiHB1;
      }
      if (adigiHB[2][jeta][jphi] > 0.) {
        sumdigiHB2 += adigiHB[2][jeta][jphi];
        ++nsumdigiHB2;
      }
      if (adigiHB[3][jeta][jphi] > 0.) {
        sumdigiHB3 += adigiHB[3][jeta][jphi];
        ++nsumdigiHB3;
      }
    }  // phi
    // PHI normalization:
    for (int jphi = 0; jphi < njphi; jphi++) {
      if (adigiHB[0][jeta][jphi] > 0.)
        adigiHB[0][jeta][jphi] /= (sumdigiHB0 / nsumdigiHB0);
      if (adigiHB[1][jeta][jphi] > 0.)
        adigiHB[1][jeta][jphi] /= (sumdigiHB1 / nsumdigiHB1);
      if (adigiHB[2][jeta][jphi] > 0.)
        adigiHB[2][jeta][jphi] /= (sumdigiHB2 / nsumdigiHB2);
      if (adigiHB[3][jeta][jphi] > 0.)
        adigiHB[3][jeta][jphi] /= (sumdigiHB3 / nsumdigiHB3);
    }  // phi
  }    //eta
  //------------------------  2D-eta/phi-plot: R, averaged over depthfs
  //======================================================================
  //======================================================================
  //cout<<"      R2D-eta/phi-plot: R, averaged over depthfs *****" <<endl;
  c1x0->Clear();
  /////////////////
  c1x0->Divide(1, 1);
  c1x0->cd(1);
  TH2F *GefzRdigiHB42D = new TH2F("GefzRdigiHB42D", "", neta, -41., 41., nphi, 0., 72.);
  TH2F *GefzRdigiHB42D0 = new TH2F("GefzRdigiHB42D0", "", neta, -41., 41., nphi, 0., 72.);
  TH2F *GefzRdigiHB42DF = (TH2F *)GefzRdigiHB42D0->Clone("GefzRdigiHB42DF");
  for (int i = 0; i < ndepth; i++) {
    for (int jeta = 0; jeta < neta; jeta++) {
      for (int jphi = 0; jphi < nphi; jphi++) {
        double ccc1 = adigiHB[i][jeta][jphi];
        int k2plot = jeta - 41;
        int kkk = k2plot;  //if(k2plot >0 ) kkk=k2plot+1; //-41 +41 !=0
        if (ccc1 != 0.) {
          GefzRdigiHB42D->Fill(kkk, jphi, ccc1);
          GefzRdigiHB42D0->Fill(kkk, jphi, 1.);
        }
      }
    }
  }
  GefzRdigiHB42DF->Divide(GefzRdigiHB42D, GefzRdigiHB42D0, 1, 1, "B");  // average A
  gPad->SetGridy();
  gPad->SetGridx();  //      gPad->SetLogz();
  GefzRdigiHB42DF->SetMarkerStyle(20);
  GefzRdigiHB42DF->SetMarkerSize(0.4);
  GefzRdigiHB42DF->GetZaxis()->SetLabelSize(0.08);
  GefzRdigiHB42DF->SetXTitle("<R>_depth       #eta  \b");
  GefzRdigiHB42DF->SetYTitle("      #phi \b");
  GefzRdigiHB42DF->SetZTitle("<R>_depth \b");
  GefzRdigiHB42DF->SetMarkerColor(2);
  GefzRdigiHB42DF->SetLineColor(
      0);  //      GefzRdigiHB42DF->SetMaximum(1.000);  //      GefzRdigiHB42DF->SetMinimum(1.0);
  GefzRdigiHB42DF->Draw("COLZ");
  /////////////////
  c1x0->Update();
  c1x0->Print("RdigiGeneralD2PhiSymmetryHB.png");
  c1x0->Clear();
  // clean-up
  if (GefzRdigiHB42D)
    delete GefzRdigiHB42D;
  if (GefzRdigiHB42D0)
    delete GefzRdigiHB42D0;
  if (GefzRdigiHB42DF)
    delete GefzRdigiHB42DF;
  //====================================================================== 1D plot: R vs phi , averaged over depthfs & eta
  //======================================================================
  //cout<<"      1D plot: R vs phi , averaged over depthfs & eta *****" <<endl;
  c1x1->Clear();
  /////////////////
  c1x1->Divide(1, 1);
  c1x1->cd(1);
  TH1F *GefzRdigiHB41D = new TH1F("GefzRdigiHB41D", "", nphi, 0., 72.);
  TH1F *GefzRdigiHB41D0 = new TH1F("GefzRdigiHB41D0", "", nphi, 0., 72.);
  TH1F *GefzRdigiHB41DF = (TH1F *)GefzRdigiHB41D0->Clone("GefzRdigiHB41DF");
  for (int jphi = 0; jphi < nphi; jphi++) {
    for (int jeta = 0; jeta < neta; jeta++) {
      for (int i = 0; i < ndepth; i++) {
        double ccc1 = adigiHB[i][jeta][jphi];
        if (ccc1 != 0.) {
          GefzRdigiHB41D->Fill(jphi, ccc1);
          GefzRdigiHB41D0->Fill(jphi, 1.);
        }
      }
    }
  }
  GefzRdigiHB41DF->Divide(GefzRdigiHB41D, GefzRdigiHB41D0, 1, 1, "B");  // R averaged over depthfs & eta
  GefzRdigiHB41D0->Sumw2();
  //    for (int jphi=1;jphi<73;jphi++) {GefzRdigiHB41DF->SetBinError(jphi,0.01);}
  gPad->SetGridy();
  gPad->SetGridx();  //      gPad->SetLogz();
  GefzRdigiHB41DF->SetMarkerStyle(20);
  GefzRdigiHB41DF->SetMarkerSize(1.4);
  GefzRdigiHB41DF->GetZaxis()->SetLabelSize(0.08);
  GefzRdigiHB41DF->SetXTitle("#phi  \b");
  GefzRdigiHB41DF->SetYTitle("  <R> \b");
  GefzRdigiHB41DF->SetZTitle("<R>_PHI  - AllDepthfs \b");
  GefzRdigiHB41DF->SetMarkerColor(4);
  GefzRdigiHB41DF->SetLineColor(
      4);  //  GefzRdigiHB41DF->SetMinimum(0.8);     //      GefzRdigiHB41DF->SetMaximum(1.000);
  GefzRdigiHB41DF->Draw("Error");
  /////////////////
  c1x1->Update();
  c1x1->Print("RdigiGeneralD1PhiSymmetryHB.png");
  c1x1->Clear();
  // clean-up
  if (GefzRdigiHB41D)
    delete GefzRdigiHB41D;
  if (GefzRdigiHB41D0)
    delete GefzRdigiHB41D0;
  if (GefzRdigiHB41DF)
    delete GefzRdigiHB41DF;
  //========================================================================================== 4
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=1
  //cout<<"      1D plot: R vs phi , different eta,  depth=1 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(4, 4);
  c3x5->cd(1);
  int kcountHBpositivedirectionDigi1 = 1;
  TH1F *h2CeffHBpositivedirectionDigi1 = new TH1F("h2CeffHBpositivedirectionDigi1", "", nphi, 0., 72.);
  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionDigi:
    if (jeta - 41 >= 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=1
      for (int i = 0; i < 1; i++) {
        TH1F *HBpositivedirectionDigi1 = (TH1F *)h2CeffHBpositivedirectionDigi1->Clone("twod1");
        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = adigiHB[i][jeta][jphi];
          if (ccc1 != 0.) {
            HBpositivedirectionDigi1->Fill(jphi, ccc1);
            ccctest = 1.;  //HBpositivedirectionDigi1->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //	  cout<<"444        kcountHBpositivedirectionDigi1   =     "<<kcountHBpositivedirectionDigi1  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHBpositivedirectionDigi1);
          HBpositivedirectionDigi1->SetMarkerStyle(20);
          HBpositivedirectionDigi1->SetMarkerSize(0.4);
          HBpositivedirectionDigi1->GetYaxis()->SetLabelSize(0.04);
          HBpositivedirectionDigi1->SetXTitle("HBpositivedirectionDigi1 \b");
          HBpositivedirectionDigi1->SetMarkerColor(2);
          HBpositivedirectionDigi1->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHBpositivedirectionDigi1 == 1)
            HBpositivedirectionDigi1->SetXTitle("R for HB+ jeta =  0; depth = 1 \b");
          if (kcountHBpositivedirectionDigi1 == 2)
            HBpositivedirectionDigi1->SetXTitle("R for HB+ jeta =  1; depth = 1 \b");
          if (kcountHBpositivedirectionDigi1 == 3)
            HBpositivedirectionDigi1->SetXTitle("R for HB+ jeta =  2; depth = 1 \b");
          if (kcountHBpositivedirectionDigi1 == 4)
            HBpositivedirectionDigi1->SetXTitle("R for HB+ jeta =  3; depth = 1 \b");
          if (kcountHBpositivedirectionDigi1 == 5)
            HBpositivedirectionDigi1->SetXTitle("R for HB+ jeta =  4; depth = 1 \b");
          if (kcountHBpositivedirectionDigi1 == 6)
            HBpositivedirectionDigi1->SetXTitle("R for HB+ jeta =  5; depth = 1 \b");
          if (kcountHBpositivedirectionDigi1 == 7)
            HBpositivedirectionDigi1->SetXTitle("R for HB+ jeta =  6; depth = 1 \b");
          if (kcountHBpositivedirectionDigi1 == 8)
            HBpositivedirectionDigi1->SetXTitle("R for HB+ jeta =  7; depth = 1 \b");
          if (kcountHBpositivedirectionDigi1 == 9)
            HBpositivedirectionDigi1->SetXTitle("R for HB+ jeta =  8; depth = 1 \b");
          if (kcountHBpositivedirectionDigi1 == 10)
            HBpositivedirectionDigi1->SetXTitle("R for HB+ jeta =  9; depth = 1 \b");
          if (kcountHBpositivedirectionDigi1 == 11)
            HBpositivedirectionDigi1->SetXTitle("R for HB+ jeta = 10; depth = 1 \b");
          if (kcountHBpositivedirectionDigi1 == 12)
            HBpositivedirectionDigi1->SetXTitle("R for HB+ jeta = 11; depth = 1 \b");
          if (kcountHBpositivedirectionDigi1 == 13)
            HBpositivedirectionDigi1->SetXTitle("R for HB+ jeta = 12; depth = 1 \b");
          if (kcountHBpositivedirectionDigi1 == 14)
            HBpositivedirectionDigi1->SetXTitle("R for HB+ jeta = 13; depth = 1 \b");
          if (kcountHBpositivedirectionDigi1 == 15)
            HBpositivedirectionDigi1->SetXTitle("R for HB+ jeta = 14; depth = 1 \b");
          if (kcountHBpositivedirectionDigi1 == 16)
            HBpositivedirectionDigi1->SetXTitle("R for HB+ jeta = 15; depth = 1 \b");
          HBpositivedirectionDigi1->Draw("Error");
          kcountHBpositivedirectionDigi1++;
          if (kcountHBpositivedirectionDigi1 > 16)
            break;  //
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RdigiPositiveDirectionhistD1PhiSymmetryDepth1HB.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHBpositivedirectionDigi1)
    delete h2CeffHBpositivedirectionDigi1;

  //========================================================================================== 5
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=2
  //  cout<<"      1D plot: R vs phi , different eta,  depth=2 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(4, 4);
  c3x5->cd(1);
  int kcountHBpositivedirectionDigi2 = 1;
  TH1F *h2CeffHBpositivedirectionDigi2 = new TH1F("h2CeffHBpositivedirectionDigi2", "", nphi, 0., 72.);
  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionDigi:
    if (jeta - 41 >= 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=2
      for (int i = 1; i < 2; i++) {
        TH1F *HBpositivedirectionDigi2 = (TH1F *)h2CeffHBpositivedirectionDigi2->Clone("twod1");
        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = adigiHB[i][jeta][jphi];
          if (ccc1 != 0.) {
            HBpositivedirectionDigi2->Fill(jphi, ccc1);
            ccctest = 1.;  //HBpositivedirectionDigi2->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"555        kcountHBpositivedirectionDigi2   =     "<<kcountHBpositivedirectionDigi2  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHBpositivedirectionDigi2);
          HBpositivedirectionDigi2->SetMarkerStyle(20);
          HBpositivedirectionDigi2->SetMarkerSize(0.4);
          HBpositivedirectionDigi2->GetYaxis()->SetLabelSize(0.04);
          HBpositivedirectionDigi2->SetXTitle("HBpositivedirectionDigi2 \b");
          HBpositivedirectionDigi2->SetMarkerColor(2);
          HBpositivedirectionDigi2->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHBpositivedirectionDigi2 == 1)
            HBpositivedirectionDigi2->SetXTitle("R for HB+ jeta =  0; depth = 2 \b");
          if (kcountHBpositivedirectionDigi2 == 2)
            HBpositivedirectionDigi2->SetXTitle("R for HB+ jeta =  1; depth = 2 \b");
          if (kcountHBpositivedirectionDigi2 == 3)
            HBpositivedirectionDigi2->SetXTitle("R for HB+ jeta =  2; depth = 2 \b");
          if (kcountHBpositivedirectionDigi2 == 4)
            HBpositivedirectionDigi2->SetXTitle("R for HB+ jeta =  3; depth = 2 \b");
          if (kcountHBpositivedirectionDigi2 == 5)
            HBpositivedirectionDigi2->SetXTitle("R for HB+ jeta =  4; depth = 2 \b");
          if (kcountHBpositivedirectionDigi2 == 6)
            HBpositivedirectionDigi2->SetXTitle("R for HB+ jeta =  5; depth = 2 \b");
          if (kcountHBpositivedirectionDigi2 == 7)
            HBpositivedirectionDigi2->SetXTitle("R for HB+ jeta =  6; depth = 2 \b");
          if (kcountHBpositivedirectionDigi2 == 8)
            HBpositivedirectionDigi2->SetXTitle("R for HB+ jeta =  7; depth = 2 \b");
          if (kcountHBpositivedirectionDigi2 == 9)
            HBpositivedirectionDigi2->SetXTitle("R for HB+ jeta =  8; depth = 2 \b");
          if (kcountHBpositivedirectionDigi2 == 10)
            HBpositivedirectionDigi2->SetXTitle("R for HB+ jeta =  9; depth = 2 \b");
          if (kcountHBpositivedirectionDigi2 == 11)
            HBpositivedirectionDigi2->SetXTitle("R for HB+ jeta = 10; depth = 2 \b");
          if (kcountHBpositivedirectionDigi2 == 12)
            HBpositivedirectionDigi2->SetXTitle("R for HB+ jeta = 11; depth = 2 \b");
          if (kcountHBpositivedirectionDigi2 == 13)
            HBpositivedirectionDigi2->SetXTitle("R for HB+ jeta = 12; depth = 2 \b");
          if (kcountHBpositivedirectionDigi2 == 14)
            HBpositivedirectionDigi2->SetXTitle("R for HB+ jeta = 13; depth = 2 \b");
          if (kcountHBpositivedirectionDigi2 == 15)
            HBpositivedirectionDigi2->SetXTitle("R for HB+ jeta = 14; depth = 2 \b");
          if (kcountHBpositivedirectionDigi2 == 16)
            HBpositivedirectionDigi2->SetXTitle("R for HB+ jeta = 15; depth = 2 \b");
          HBpositivedirectionDigi2->Draw("Error");
          kcountHBpositivedirectionDigi2++;
          if (kcountHBpositivedirectionDigi2 > 16)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RdigiPositiveDirectionhistD1PhiSymmetryDepth2HB.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHBpositivedirectionDigi2)
    delete h2CeffHBpositivedirectionDigi2;
  //========================================================================================== 6
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=3
  //cout<<"      1D plot: R vs phi , different eta,  depth=3 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(4, 4);
  c3x5->cd(1);
  int kcountHBpositivedirectionDigi3 = 1;
  TH1F *h2CeffHBpositivedirectionDigi3 = new TH1F("h2CeffHBpositivedirectionDigi3", "", nphi, 0., 72.);
  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionDigi:
    if (jeta - 41 >= 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=3
      for (int i = 2; i < 3; i++) {
        TH1F *HBpositivedirectionDigi3 = (TH1F *)h2CeffHBpositivedirectionDigi3->Clone("twod1");
        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = adigiHB[i][jeta][jphi];
          if (ccc1 != 0.) {
            HBpositivedirectionDigi3->Fill(jphi, ccc1);
            ccctest = 1.;  //HBpositivedirectionDigi3->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"666        kcountHBpositivedirectionDigi3   =     "<<kcountHBpositivedirectionDigi3  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHBpositivedirectionDigi3);
          HBpositivedirectionDigi3->SetMarkerStyle(20);
          HBpositivedirectionDigi3->SetMarkerSize(0.4);
          HBpositivedirectionDigi3->GetYaxis()->SetLabelSize(0.04);
          HBpositivedirectionDigi3->SetXTitle("HBpositivedirectionDigi3 \b");
          HBpositivedirectionDigi3->SetMarkerColor(2);
          HBpositivedirectionDigi3->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHBpositivedirectionDigi3 == 1)
            HBpositivedirectionDigi3->SetXTitle("R for HB+ jeta =  0; depth = 3 \b");
          if (kcountHBpositivedirectionDigi3 == 2)
            HBpositivedirectionDigi3->SetXTitle("R for HB+ jeta =  1; depth = 3 \b");
          if (kcountHBpositivedirectionDigi3 == 3)
            HBpositivedirectionDigi3->SetXTitle("R for HB+ jeta =  2; depth = 3 \b");
          if (kcountHBpositivedirectionDigi3 == 4)
            HBpositivedirectionDigi3->SetXTitle("R for HB+ jeta =  3; depth = 3 \b");
          if (kcountHBpositivedirectionDigi3 == 5)
            HBpositivedirectionDigi3->SetXTitle("R for HB+ jeta =  4; depth = 3 \b");
          if (kcountHBpositivedirectionDigi3 == 6)
            HBpositivedirectionDigi3->SetXTitle("R for HB+ jeta =  5; depth = 3 \b");
          if (kcountHBpositivedirectionDigi3 == 7)
            HBpositivedirectionDigi3->SetXTitle("R for HB+ jeta =  6; depth = 3 \b");
          if (kcountHBpositivedirectionDigi3 == 8)
            HBpositivedirectionDigi3->SetXTitle("R for HB+ jeta =  7; depth = 3 \b");
          if (kcountHBpositivedirectionDigi3 == 9)
            HBpositivedirectionDigi3->SetXTitle("R for HB+ jeta =  8; depth = 3 \b");
          if (kcountHBpositivedirectionDigi3 == 10)
            HBpositivedirectionDigi3->SetXTitle("R for HB+ jeta =  9; depth = 3 \b");
          if (kcountHBpositivedirectionDigi3 == 11)
            HBpositivedirectionDigi3->SetXTitle("R for HB+ jeta =  0; depth = 3 \b");
          if (kcountHBpositivedirectionDigi3 == 12)
            HBpositivedirectionDigi3->SetXTitle("R for HB+ jeta = 11; depth = 3 \b");
          if (kcountHBpositivedirectionDigi3 == 13)
            HBpositivedirectionDigi3->SetXTitle("R for HB+ jeta = 12; depth = 3 \b");
          if (kcountHBpositivedirectionDigi3 == 14)
            HBpositivedirectionDigi3->SetXTitle("R for HB+ jeta = 13; depth = 3 \b");
          if (kcountHBpositivedirectionDigi3 == 15)
            HBpositivedirectionDigi3->SetXTitle("R for HB+ jeta = 14; depth = 3 \b");
          if (kcountHBpositivedirectionDigi3 == 16)
            HBpositivedirectionDigi3->SetXTitle("R for HB+ jeta = 15; depth = 3 \b");
          HBpositivedirectionDigi3->Draw("Error");
          kcountHBpositivedirectionDigi3++;
          if (kcountHBpositivedirectionDigi3 > 16)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RdigiPositiveDirectionhistD1PhiSymmetryDepth3HB.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHBpositivedirectionDigi3)
    delete h2CeffHBpositivedirectionDigi3;
  //========================================================================================== 7
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=4
  //cout<<"      1D plot: R vs phi , different eta,  depth=4 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(4, 4);
  c3x5->cd(1);
  int kcountHBpositivedirectionDigi4 = 1;
  TH1F *h2CeffHBpositivedirectionDigi4 = new TH1F("h2CeffHBpositivedirectionDigi4", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionDigi:
    if (jeta - 41 >= 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=4
      for (int i = 3; i < 4; i++) {
        TH1F *HBpositivedirectionDigi4 = (TH1F *)h2CeffHBpositivedirectionDigi4->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = adigiHB[i][jeta][jphi];
          if (ccc1 != 0.) {
            HBpositivedirectionDigi4->Fill(jphi, ccc1);
            ccctest = 1.;  //HBpositivedirectionDigi4->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"777        kcountHBpositivedirectionDigi4   =     "<<kcountHBpositivedirectionDigi4  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHBpositivedirectionDigi4);
          HBpositivedirectionDigi4->SetMarkerStyle(20);
          HBpositivedirectionDigi4->SetMarkerSize(0.4);
          HBpositivedirectionDigi4->GetYaxis()->SetLabelSize(0.04);
          HBpositivedirectionDigi4->SetXTitle("HBpositivedirectionDigi4 \b");
          HBpositivedirectionDigi4->SetMarkerColor(2);
          HBpositivedirectionDigi4->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHBpositivedirectionDigi4 == 1)
            HBpositivedirectionDigi4->SetXTitle("R for HB+ jeta =  0; depth = 4 \b");
          if (kcountHBpositivedirectionDigi4 == 2)
            HBpositivedirectionDigi4->SetXTitle("R for HB+ jeta =  1; depth = 4 \b");
          if (kcountHBpositivedirectionDigi4 == 3)
            HBpositivedirectionDigi4->SetXTitle("R for HB+ jeta =  2; depth = 4 \b");
          if (kcountHBpositivedirectionDigi4 == 4)
            HBpositivedirectionDigi4->SetXTitle("R for HB+ jeta =  3; depth = 4 \b");
          if (kcountHBpositivedirectionDigi4 == 5)
            HBpositivedirectionDigi4->SetXTitle("R for HB+ jeta =  4; depth = 4 \b");
          if (kcountHBpositivedirectionDigi4 == 6)
            HBpositivedirectionDigi4->SetXTitle("R for HB+ jeta =  5; depth = 4 \b");
          if (kcountHBpositivedirectionDigi4 == 7)
            HBpositivedirectionDigi4->SetXTitle("R for HB+ jeta =  6; depth = 4 \b");
          if (kcountHBpositivedirectionDigi4 == 8)
            HBpositivedirectionDigi4->SetXTitle("R for HB+ jeta =  7; depth = 4 \b");
          if (kcountHBpositivedirectionDigi4 == 9)
            HBpositivedirectionDigi4->SetXTitle("R for HB+ jeta =  8; depth = 4 \b");
          if (kcountHBpositivedirectionDigi4 == 10)
            HBpositivedirectionDigi4->SetXTitle("R for HB+ jeta =  9; depth = 4 \b");
          if (kcountHBpositivedirectionDigi4 == 11)
            HBpositivedirectionDigi4->SetXTitle("R for HB+ jeta = 10; depth = 4 \b");
          if (kcountHBpositivedirectionDigi4 == 12)
            HBpositivedirectionDigi4->SetXTitle("R for HB+ jeta = 11; depth = 4 \b");
          if (kcountHBpositivedirectionDigi4 == 13)
            HBpositivedirectionDigi4->SetXTitle("R for HB+ jeta = 12; depth = 4 \b");
          if (kcountHBpositivedirectionDigi4 == 14)
            HBpositivedirectionDigi4->SetXTitle("R for HB+ jeta = 13; depth = 4 \b");
          if (kcountHBpositivedirectionDigi4 == 15)
            HBpositivedirectionDigi4->SetXTitle("R for HB+ jeta = 14; depth = 4 \b");
          if (kcountHBpositivedirectionDigi4 == 16)
            HBpositivedirectionDigi4->SetXTitle("R for HB+ jeta = 15; depth = 4 \b");
          HBpositivedirectionDigi4->Draw("Error");
          kcountHBpositivedirectionDigi4++;
          if (kcountHBpositivedirectionDigi4 > 16)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RdigiPositiveDirectionhistD1PhiSymmetryDepth4HB.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHBpositivedirectionDigi4)
    delete h2CeffHBpositivedirectionDigi4;

  //========================================================================================== 1114
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=1
  //cout<<"      1D plot: R vs phi , different eta,  depth=1 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(4, 4);
  c3x5->cd(1);
  int kcountHBnegativedirectionDigi1 = 1;
  TH1F *h2CeffHBnegativedirectionDigi1 = new TH1F("h2CeffHBnegativedirectionDigi1", "", nphi, 0., 72.);
  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionDigi:
    if (jeta - 41 < 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=1
      for (int i = 0; i < 1; i++) {
        TH1F *HBnegativedirectionDigi1 = (TH1F *)h2CeffHBnegativedirectionDigi1->Clone("twod1");
        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = adigiHB[i][jeta][jphi];
          if (ccc1 != 0.) {
            HBnegativedirectionDigi1->Fill(jphi, ccc1);
            ccctest = 1.;  //HBnegativedirectionDigi1->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //	  cout<<"444        kcountHBnegativedirectionDigi1   =     "<<kcountHBnegativedirectionDigi1  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHBnegativedirectionDigi1);
          HBnegativedirectionDigi1->SetMarkerStyle(20);
          HBnegativedirectionDigi1->SetMarkerSize(0.4);
          HBnegativedirectionDigi1->GetYaxis()->SetLabelSize(0.04);
          HBnegativedirectionDigi1->SetXTitle("HBnegativedirectionDigi1 \b");
          HBnegativedirectionDigi1->SetMarkerColor(2);
          HBnegativedirectionDigi1->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHBnegativedirectionDigi1 == 1)
            HBnegativedirectionDigi1->SetXTitle("R for HB- jeta = -16; depth = 1 \b");
          if (kcountHBnegativedirectionDigi1 == 2)
            HBnegativedirectionDigi1->SetXTitle("R for HB- jeta = -15; depth = 1 \b");
          if (kcountHBnegativedirectionDigi1 == 3)
            HBnegativedirectionDigi1->SetXTitle("R for HB- jeta = -14; depth = 1 \b");
          if (kcountHBnegativedirectionDigi1 == 4)
            HBnegativedirectionDigi1->SetXTitle("R for HB- jeta = -13; depth = 1 \b");
          if (kcountHBnegativedirectionDigi1 == 5)
            HBnegativedirectionDigi1->SetXTitle("R for HB- jeta = -12; depth = 1 \b");
          if (kcountHBnegativedirectionDigi1 == 6)
            HBnegativedirectionDigi1->SetXTitle("R for HB- jeta = -11; depth = 1 \b");
          if (kcountHBnegativedirectionDigi1 == 7)
            HBnegativedirectionDigi1->SetXTitle("R for HB- jeta = -10; depth = 1 \b");
          if (kcountHBnegativedirectionDigi1 == 8)
            HBnegativedirectionDigi1->SetXTitle("R for HB- jeta =  -9; depth = 1 \b");
          if (kcountHBnegativedirectionDigi1 == 9)
            HBnegativedirectionDigi1->SetXTitle("R for HB- jeta =  -8; depth = 1 \b");
          if (kcountHBnegativedirectionDigi1 == 10)
            HBnegativedirectionDigi1->SetXTitle("R for HB- jeta =  -7; depth = 1 \b");
          if (kcountHBnegativedirectionDigi1 == 11)
            HBnegativedirectionDigi1->SetXTitle("R for HB- jeta =  -6; depth = 1 \b");
          if (kcountHBnegativedirectionDigi1 == 12)
            HBnegativedirectionDigi1->SetXTitle("R for HB- jeta =  -5; depth = 1 \b");
          if (kcountHBnegativedirectionDigi1 == 13)
            HBnegativedirectionDigi1->SetXTitle("R for HB- jeta =  -4; depth = 1 \b");
          if (kcountHBnegativedirectionDigi1 == 14)
            HBnegativedirectionDigi1->SetXTitle("R for HB- jeta =  -3; depth = 1 \b");
          if (kcountHBnegativedirectionDigi1 == 15)
            HBnegativedirectionDigi1->SetXTitle("R for HB- jeta =  -2; depth = 1 \b");
          if (kcountHBnegativedirectionDigi1 == 16)
            HBnegativedirectionDigi1->SetXTitle("R for HB- jeta =  -1; depth = 1 \b");
          HBnegativedirectionDigi1->Draw("Error");
          kcountHBnegativedirectionDigi1++;
          if (kcountHBnegativedirectionDigi1 > 16)
            break;  //
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 < 0 )
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RdigiNegativeDirectionhistD1PhiSymmetryDepth1HB.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHBnegativedirectionDigi1)
    delete h2CeffHBnegativedirectionDigi1;

  //========================================================================================== 1115
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=2
  //  cout<<"      1D plot: R vs phi , different eta,  depth=2 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(4, 4);
  c3x5->cd(1);
  int kcountHBnegativedirectionDigi2 = 1;
  TH1F *h2CeffHBnegativedirectionDigi2 = new TH1F("h2CeffHBnegativedirectionDigi2", "", nphi, 0., 72.);
  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionDigi:
    if (jeta - 41 < 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=2
      for (int i = 1; i < 2; i++) {
        TH1F *HBnegativedirectionDigi2 = (TH1F *)h2CeffHBnegativedirectionDigi2->Clone("twod1");
        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = adigiHB[i][jeta][jphi];
          if (ccc1 != 0.) {
            HBnegativedirectionDigi2->Fill(jphi, ccc1);
            ccctest = 1.;  //HBnegativedirectionDigi2->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"555        kcountHBnegativedirectionDigi2   =     "<<kcountHBnegativedirectionDigi2  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHBnegativedirectionDigi2);
          HBnegativedirectionDigi2->SetMarkerStyle(20);
          HBnegativedirectionDigi2->SetMarkerSize(0.4);
          HBnegativedirectionDigi2->GetYaxis()->SetLabelSize(0.04);
          HBnegativedirectionDigi2->SetXTitle("HBnegativedirectionDigi2 \b");
          HBnegativedirectionDigi2->SetMarkerColor(2);
          HBnegativedirectionDigi2->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHBnegativedirectionDigi2 == 1)
            HBnegativedirectionDigi2->SetXTitle("R for HB- jeta = -16; depth = 2 \b");
          if (kcountHBnegativedirectionDigi2 == 2)
            HBnegativedirectionDigi2->SetXTitle("R for HB- jeta = -15; depth = 2 \b");
          if (kcountHBnegativedirectionDigi2 == 3)
            HBnegativedirectionDigi2->SetXTitle("R for HB- jeta = -14; depth = 2 \b");
          if (kcountHBnegativedirectionDigi2 == 4)
            HBnegativedirectionDigi2->SetXTitle("R for HB- jeta = -13; depth = 2 \b");
          if (kcountHBnegativedirectionDigi2 == 5)
            HBnegativedirectionDigi2->SetXTitle("R for HB- jeta = -12; depth = 2 \b");
          if (kcountHBnegativedirectionDigi2 == 6)
            HBnegativedirectionDigi2->SetXTitle("R for HB- jeta = -11; depth = 2 \b");
          if (kcountHBnegativedirectionDigi2 == 7)
            HBnegativedirectionDigi2->SetXTitle("R for HB- jeta = -10; depth = 2 \b");
          if (kcountHBnegativedirectionDigi2 == 8)
            HBnegativedirectionDigi2->SetXTitle("R for HB- jeta =  -9; depth = 2 \b");
          if (kcountHBnegativedirectionDigi2 == 9)
            HBnegativedirectionDigi2->SetXTitle("R for HB- jeta =  -8; depth = 2 \b");
          if (kcountHBnegativedirectionDigi2 == 10)
            HBnegativedirectionDigi2->SetXTitle("R for HB- jeta =  -7; depth = 2 \b");
          if (kcountHBnegativedirectionDigi2 == 11)
            HBnegativedirectionDigi2->SetXTitle("R for HB- jeta =  -6; depth = 2 \b");
          if (kcountHBnegativedirectionDigi2 == 12)
            HBnegativedirectionDigi2->SetXTitle("R for HB- jeta =  -5; depth = 2 \b");
          if (kcountHBnegativedirectionDigi2 == 13)
            HBnegativedirectionDigi2->SetXTitle("R for HB- jeta =  -4; depth = 2 \b");
          if (kcountHBnegativedirectionDigi2 == 14)
            HBnegativedirectionDigi2->SetXTitle("R for HB- jeta =  -3; depth = 2 \b");
          if (kcountHBnegativedirectionDigi2 == 15)
            HBnegativedirectionDigi2->SetXTitle("R for HB- jeta =  -2; depth = 2 \b");
          if (kcountHBnegativedirectionDigi2 == 16)
            HBnegativedirectionDigi2->SetXTitle("R for HB- jeta =  -1; depth = 2 \b");
          HBnegativedirectionDigi2->Draw("Error");
          kcountHBnegativedirectionDigi2++;
          if (kcountHBnegativedirectionDigi2 > 16)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 < 0 )
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RdigiNegativeDirectionhistD1PhiSymmetryDepth2HB.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHBnegativedirectionDigi2)
    delete h2CeffHBnegativedirectionDigi2;
  //========================================================================================== 1116
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=3
  //cout<<"      1D plot: R vs phi , different eta,  depth=3 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(4, 4);
  c3x5->cd(1);
  int kcountHBnegativedirectionDigi3 = 1;
  TH1F *h2CeffHBnegativedirectionDigi3 = new TH1F("h2CeffHBnegativedirectionDigi3", "", nphi, 0., 72.);
  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionDigi:
    if (jeta - 41 < 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=3
      for (int i = 2; i < 3; i++) {
        TH1F *HBnegativedirectionDigi3 = (TH1F *)h2CeffHBnegativedirectionDigi3->Clone("twod1");
        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = adigiHB[i][jeta][jphi];
          if (ccc1 != 0.) {
            HBnegativedirectionDigi3->Fill(jphi, ccc1);
            ccctest = 1.;  //HBnegativedirectionDigi3->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"666        kcountHBnegativedirectionDigi3   =     "<<kcountHBnegativedirectionDigi3  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHBnegativedirectionDigi3);
          HBnegativedirectionDigi3->SetMarkerStyle(20);
          HBnegativedirectionDigi3->SetMarkerSize(0.4);
          HBnegativedirectionDigi3->GetYaxis()->SetLabelSize(0.04);
          HBnegativedirectionDigi3->SetXTitle("HBnegativedirectionDigi3 \b");
          HBnegativedirectionDigi3->SetMarkerColor(2);
          HBnegativedirectionDigi3->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHBnegativedirectionDigi3 == 1)
            HBnegativedirectionDigi3->SetXTitle("R for HB- jeta = -16; depth = 3 \b");
          if (kcountHBnegativedirectionDigi3 == 2)
            HBnegativedirectionDigi3->SetXTitle("R for HB- jeta = -15; depth = 3 \b");
          if (kcountHBnegativedirectionDigi3 == 3)
            HBnegativedirectionDigi3->SetXTitle("R for HB- jeta = -14; depth = 3 \b");
          if (kcountHBnegativedirectionDigi3 == 4)
            HBnegativedirectionDigi3->SetXTitle("R for HB- jeta = -13; depth = 3 \b");
          if (kcountHBnegativedirectionDigi3 == 5)
            HBnegativedirectionDigi3->SetXTitle("R for HB- jeta = -12; depth = 3 \b");
          if (kcountHBnegativedirectionDigi3 == 6)
            HBnegativedirectionDigi3->SetXTitle("R for HB- jeta = -11; depth = 3 \b");
          if (kcountHBnegativedirectionDigi3 == 7)
            HBnegativedirectionDigi3->SetXTitle("R for HB- jeta = -10; depth = 3 \b");
          if (kcountHBnegativedirectionDigi3 == 8)
            HBnegativedirectionDigi3->SetXTitle("R for HB- jeta =  -9; depth = 3 \b");
          if (kcountHBnegativedirectionDigi3 == 9)
            HBnegativedirectionDigi3->SetXTitle("R for HB- jeta =  -8; depth = 3 \b");
          if (kcountHBnegativedirectionDigi3 == 10)
            HBnegativedirectionDigi3->SetXTitle("R for HB- jeta =  -7; depth = 3 \b");
          if (kcountHBnegativedirectionDigi3 == 11)
            HBnegativedirectionDigi3->SetXTitle("R for HB- jeta =  -6; depth = 3 \b");
          if (kcountHBnegativedirectionDigi3 == 12)
            HBnegativedirectionDigi3->SetXTitle("R for HB- jeta =  -5; depth = 3 \b");
          if (kcountHBnegativedirectionDigi3 == 13)
            HBnegativedirectionDigi3->SetXTitle("R for HB- jeta =  -4; depth = 3 \b");
          if (kcountHBnegativedirectionDigi3 == 14)
            HBnegativedirectionDigi3->SetXTitle("R for HB- jeta =  -3; depth = 3 \b");
          if (kcountHBnegativedirectionDigi3 == 15)
            HBnegativedirectionDigi3->SetXTitle("R for HB- jeta =  -2; depth = 3 \b");
          if (kcountHBnegativedirectionDigi3 == 16)
            HBnegativedirectionDigi3->SetXTitle("R for HB- jeta =  -1; depth = 3 \b");

          HBnegativedirectionDigi3->Draw("Error");
          kcountHBnegativedirectionDigi3++;
          if (kcountHBnegativedirectionDigi3 > 16)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 < 0 )
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RdigiNegativeDirectionhistD1PhiSymmetryDepth3HB.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHBnegativedirectionDigi3)
    delete h2CeffHBnegativedirectionDigi3;
  //========================================================================================== 1117
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=4
  //cout<<"      1D plot: R vs phi , different eta,  depth=4 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(4, 4);
  c3x5->cd(1);
  int kcountHBnegativedirectionDigi4 = 1;
  TH1F *h2CeffHBnegativedirectionDigi4 = new TH1F("h2CeffHBnegativedirectionDigi4", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionDigi:
    if (jeta - 41 < 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=4
      for (int i = 3; i < 4; i++) {
        TH1F *HBnegativedirectionDigi4 = (TH1F *)h2CeffHBnegativedirectionDigi4->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = adigiHB[i][jeta][jphi];
          if (ccc1 != 0.) {
            HBnegativedirectionDigi4->Fill(jphi, ccc1);
            ccctest = 1.;  //HBnegativedirectionDigi4->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"777        kcountHBnegativedirectionDigi4   =     "<<kcountHBnegativedirectionDigi4  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHBnegativedirectionDigi4);
          HBnegativedirectionDigi4->SetMarkerStyle(20);
          HBnegativedirectionDigi4->SetMarkerSize(0.4);
          HBnegativedirectionDigi4->GetYaxis()->SetLabelSize(0.04);
          HBnegativedirectionDigi4->SetXTitle("HBnegativedirectionDigi4 \b");
          HBnegativedirectionDigi4->SetMarkerColor(2);
          HBnegativedirectionDigi4->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHBnegativedirectionDigi4 == 1)
            HBnegativedirectionDigi4->SetXTitle("R for HB- jeta = -16; depth = 4 \b");
          if (kcountHBnegativedirectionDigi4 == 2)
            HBnegativedirectionDigi4->SetXTitle("R for HB- jeta = -15; depth = 4 \b");
          if (kcountHBnegativedirectionDigi4 == 3)
            HBnegativedirectionDigi4->SetXTitle("R for HB- jeta = -14; depth = 4 \b");
          if (kcountHBnegativedirectionDigi4 == 4)
            HBnegativedirectionDigi4->SetXTitle("R for HB- jeta = -13; depth = 4 \b");
          if (kcountHBnegativedirectionDigi4 == 5)
            HBnegativedirectionDigi4->SetXTitle("R for HB- jeta = -12; depth = 4 \b");
          if (kcountHBnegativedirectionDigi4 == 6)
            HBnegativedirectionDigi4->SetXTitle("R for HB- jeta = -11; depth = 4 \b");
          if (kcountHBnegativedirectionDigi4 == 7)
            HBnegativedirectionDigi4->SetXTitle("R for HB- jeta = -10; depth = 4 \b");
          if (kcountHBnegativedirectionDigi4 == 8)
            HBnegativedirectionDigi4->SetXTitle("R for HB- jeta =  -9; depth = 4 \b");
          if (kcountHBnegativedirectionDigi4 == 9)
            HBnegativedirectionDigi4->SetXTitle("R for HB- jeta =  -8; depth = 4 \b");
          if (kcountHBnegativedirectionDigi4 == 10)
            HBnegativedirectionDigi4->SetXTitle("R for HB- jeta =  -7; depth = 4 \b");
          if (kcountHBnegativedirectionDigi4 == 11)
            HBnegativedirectionDigi4->SetXTitle("R for HB- jeta =  -6; depth = 4 \b");
          if (kcountHBnegativedirectionDigi4 == 12)
            HBnegativedirectionDigi4->SetXTitle("R for HB- jeta =  -5; depth = 4 \b");
          if (kcountHBnegativedirectionDigi4 == 13)
            HBnegativedirectionDigi4->SetXTitle("R for HB- jeta =  -4; depth = 4 \b");
          if (kcountHBnegativedirectionDigi4 == 14)
            HBnegativedirectionDigi4->SetXTitle("R for HB- jeta =  -3; depth = 4 \b");
          if (kcountHBnegativedirectionDigi4 == 15)
            HBnegativedirectionDigi4->SetXTitle("R for HB- jeta =  -2; depth = 4 \b");
          if (kcountHBnegativedirectionDigi4 == 16)
            HBnegativedirectionDigi4->SetXTitle("R for HB- jeta =  -1; depth = 4 \b");
          HBnegativedirectionDigi4->Draw("Error");
          kcountHBnegativedirectionDigi4++;
          if (kcountHBnegativedirectionDigi4 > 16)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 < 0 )
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RdigiNegativeDirectionhistD1PhiSymmetryDepth4HB.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHBnegativedirectionDigi4)
    delete h2CeffHBnegativedirectionDigi4;

  //======================================================================================================================
  //======================================================================================================================
  //======================================================================================================================
  //                            DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD:

  //cout<<"    Start Vaiance: preparation  *****" <<endl;
  TH2F *digiVariance1HB1 = (TH2F *)dir->FindObjectAny("h_amplitudechannel2_HB1");
  TH2F *digiVariance0HB1 = (TH2F *)dir->FindObjectAny("h_amplitudechannel0_HB1");
  TH2F *digiVarianceHB1 = (TH2F *)digiVariance1HB1->Clone("digiVarianceHB1");
  digiVarianceHB1->Divide(digiVariance1HB1, digiVariance0HB1, 1, 1, "B");
  TH2F *digiVariance1HB2 = (TH2F *)dir->FindObjectAny("h_amplitudechannel2_HB2");
  TH2F *digiVariance0HB2 = (TH2F *)dir->FindObjectAny("h_amplitudechannel0_HB2");
  TH2F *digiVarianceHB2 = (TH2F *)digiVariance1HB2->Clone("digiVarianceHB2");
  digiVarianceHB2->Divide(digiVariance1HB2, digiVariance0HB2, 1, 1, "B");
  TH2F *digiVariance1HB3 = (TH2F *)dir->FindObjectAny("h_amplitudechannel2_HB3");
  TH2F *digiVariance0HB3 = (TH2F *)dir->FindObjectAny("h_amplitudechannel0_HB3");
  TH2F *digiVarianceHB3 = (TH2F *)digiVariance1HB3->Clone("digiVarianceHB3");
  digiVarianceHB3->Divide(digiVariance1HB3, digiVariance0HB3, 1, 1, "B");
  TH2F *digiVariance1HB4 = (TH2F *)dir->FindObjectAny("h_amplitudechannel2_HB4");
  TH2F *digiVariance0HB4 = (TH2F *)dir->FindObjectAny("h_amplitudechannel0_HB4");
  TH2F *digiVarianceHB4 = (TH2F *)digiVariance1HB4->Clone("digiVarianceHB4");
  digiVarianceHB4->Divide(digiVariance1HB4, digiVariance0HB4, 1, 1, "B");
  //cout<<"      Vaiance: preparation DONE *****" <<endl;
  //====================================================================== put Vaiance=Dispersia = Sig**2=<R**2> - (<R>)**2 into massive digivarianceHB
  //                                                                                           = sum(R*R)/N - (sum(R)/N)**2
  for (int jeta = 0; jeta < njeta; jeta++) {
    //preparation for PHI normalization:
    double sumdigiHB0 = 0;
    int nsumdigiHB0 = 0;
    double sumdigiHB1 = 0;
    int nsumdigiHB1 = 0;
    double sumdigiHB2 = 0;
    int nsumdigiHB2 = 0;
    double sumdigiHB3 = 0;
    int nsumdigiHB3 = 0;
    for (int jphi = 0; jphi < njphi; jphi++) {
      digivarianceHB[0][jeta][jphi] = digiVarianceHB1->GetBinContent(jeta + 1, jphi + 1);
      digivarianceHB[1][jeta][jphi] = digiVarianceHB2->GetBinContent(jeta + 1, jphi + 1);
      digivarianceHB[2][jeta][jphi] = digiVarianceHB3->GetBinContent(jeta + 1, jphi + 1);
      digivarianceHB[3][jeta][jphi] = digiVarianceHB4->GetBinContent(jeta + 1, jphi + 1);
      if (digivarianceHB[0][jeta][jphi] > 0.) {
        sumdigiHB0 += digivarianceHB[0][jeta][jphi];
        ++nsumdigiHB0;
      }
      if (digivarianceHB[1][jeta][jphi] > 0.) {
        sumdigiHB1 += digivarianceHB[1][jeta][jphi];
        ++nsumdigiHB1;
      }
      if (digivarianceHB[2][jeta][jphi] > 0.) {
        sumdigiHB2 += digivarianceHB[2][jeta][jphi];
        ++nsumdigiHB2;
      }
      if (digivarianceHB[3][jeta][jphi] > 0.) {
        sumdigiHB3 += digivarianceHB[3][jeta][jphi];
        ++nsumdigiHB3;
      }
    }  // phi
    // PHI normalization :
    for (int jphi = 0; jphi < njphi; jphi++) {
      if (digivarianceHB[0][jeta][jphi] > 0.)
        digivarianceHB[0][jeta][jphi] /= (sumdigiHB0 / nsumdigiHB0);
      if (digivarianceHB[1][jeta][jphi] > 0.)
        digivarianceHB[1][jeta][jphi] /= (sumdigiHB1 / nsumdigiHB1);
      if (digivarianceHB[2][jeta][jphi] > 0.)
        digivarianceHB[2][jeta][jphi] /= (sumdigiHB2 / nsumdigiHB2);
      if (digivarianceHB[3][jeta][jphi] > 0.)
        digivarianceHB[3][jeta][jphi] /= (sumdigiHB3 / nsumdigiHB3);
    }  // phi
    //       digivarianceHB (D)           = sum(R*R)/N - (sum(R)/N)**2
    for (int jphi = 0; jphi < njphi; jphi++) {
      //	   cout<<"12 12 12   jeta=     "<< jeta <<"   jphi   =     "<<jphi  <<endl;
      digivarianceHB[0][jeta][jphi] -= adigiHB[0][jeta][jphi] * adigiHB[0][jeta][jphi];
      digivarianceHB[0][jeta][jphi] = fabs(digivarianceHB[0][jeta][jphi]);
      digivarianceHB[1][jeta][jphi] -= adigiHB[1][jeta][jphi] * adigiHB[1][jeta][jphi];
      digivarianceHB[1][jeta][jphi] = fabs(digivarianceHB[1][jeta][jphi]);
      digivarianceHB[2][jeta][jphi] -= adigiHB[2][jeta][jphi] * adigiHB[2][jeta][jphi];
      digivarianceHB[2][jeta][jphi] = fabs(digivarianceHB[2][jeta][jphi]);
      digivarianceHB[3][jeta][jphi] -= adigiHB[3][jeta][jphi] * adigiHB[3][jeta][jphi];
      digivarianceHB[3][jeta][jphi] = fabs(digivarianceHB[3][jeta][jphi]);
    }
  }
  //cout<<"      Vaiance: DONE*****" <<endl;
  //------------------------  2D-eta/phi-plot: D, averaged over depthfs
  //======================================================================
  //======================================================================
  //cout<<"      R2D-eta/phi-plot: D, averaged over depthfs *****" <<endl;
  c1x1->Clear();
  /////////////////
  c1x0->Divide(1, 1);
  c1x0->cd(1);
  TH2F *DefzDdigiHB42D = new TH2F("DefzDdigiHB42D", "", neta, -41., 41., nphi, 0., 72.);
  TH2F *DefzDdigiHB42D0 = new TH2F("DefzDdigiHB42D0", "", neta, -41., 41., nphi, 0., 72.);
  TH2F *DefzDdigiHB42DF = (TH2F *)DefzDdigiHB42D0->Clone("DefzDdigiHB42DF");
  for (int i = 0; i < ndepth; i++) {
    for (int jeta = 0; jeta < neta; jeta++) {
      for (int jphi = 0; jphi < nphi; jphi++) {
        double ccc1 = digivarianceHB[i][jeta][jphi];
        int k2plot = jeta - 41;
        int kkk = k2plot;  //if(k2plot >0   kkk=k2plot+1; //-41 +41 !=0
        if (adigiHB[i][jeta][jphi] > 0.) {
          DefzDdigiHB42D->Fill(kkk, jphi, ccc1);
          DefzDdigiHB42D0->Fill(kkk, jphi, 1.);
        }
      }
    }
  }
  DefzDdigiHB42DF->Divide(DefzDdigiHB42D, DefzDdigiHB42D0, 1, 1, "B");  // average A
  //    DefzDdigiHB1->Sumw2();
  gPad->SetGridy();
  gPad->SetGridx();  //      gPad->SetLogz();
  DefzDdigiHB42DF->SetMarkerStyle(20);
  DefzDdigiHB42DF->SetMarkerSize(0.4);
  DefzDdigiHB42DF->GetZaxis()->SetLabelSize(0.08);
  DefzDdigiHB42DF->SetXTitle("<D>_depth       #eta  \b");
  DefzDdigiHB42DF->SetYTitle("      #phi \b");
  DefzDdigiHB42DF->SetZTitle("<D>_depth \b");
  DefzDdigiHB42DF->SetMarkerColor(2);
  DefzDdigiHB42DF->SetLineColor(
      0);  //      DefzDdigiHB42DF->SetMaximum(1.000);  //      DefzDdigiHB42DF->SetMinimum(1.0);
  DefzDdigiHB42DF->Draw("COLZ");
  /////////////////
  c1x0->Update();
  c1x0->Print("DdigiGeneralD2PhiSymmetryHB.png");
  c1x0->Clear();
  // clean-up
  if (DefzDdigiHB42D)
    delete DefzDdigiHB42D;
  if (DefzDdigiHB42D0)
    delete DefzDdigiHB42D0;
  if (DefzDdigiHB42DF)
    delete DefzDdigiHB42DF;
  //====================================================================== 1D plot: D vs phi , averaged over depthfs & eta
  //======================================================================
  //cout<<"      1D plot: D vs phi , averaged over depthfs & eta *****" <<endl;
  c1x1->Clear();
  /////////////////
  c1x1->Divide(1, 1);
  c1x1->cd(1);
  TH1F *DefzDdigiHB41D = new TH1F("DefzDdigiHB41D", "", nphi, 0., 72.);
  TH1F *DefzDdigiHB41D0 = new TH1F("DefzDdigiHB41D0", "", nphi, 0., 72.);
  TH1F *DefzDdigiHB41DF = (TH1F *)DefzDdigiHB41D0->Clone("DefzDdigiHB41DF");

  for (int jphi = 0; jphi < nphi; jphi++) {
    for (int jeta = 0; jeta < neta; jeta++) {
      for (int i = 0; i < ndepth; i++) {
        double ccc1 = digivarianceHB[i][jeta][jphi];
        if (adigiHB[i][jeta][jphi] > 0.) {
          DefzDdigiHB41D->Fill(jphi, ccc1);
          DefzDdigiHB41D0->Fill(jphi, 1.);
        }
      }
    }
  }
  //     DefzDdigiHB41D->Sumw2();DefzDdigiHB41D0->Sumw2();

  DefzDdigiHB41DF->Divide(DefzDdigiHB41D, DefzDdigiHB41D0, 1, 1, "B");  // R averaged over depthfs & eta
  DefzDdigiHB41D0->Sumw2();
  //    for (int jphi=1;jphi<73;jphi++) {DefzDdigiHB41DF->SetBinError(jphi,0.01);}
  gPad->SetGridy();
  gPad->SetGridx();  //      gPad->SetLogz();
  DefzDdigiHB41DF->SetMarkerStyle(20);
  DefzDdigiHB41DF->SetMarkerSize(1.4);
  DefzDdigiHB41DF->GetZaxis()->SetLabelSize(0.08);
  DefzDdigiHB41DF->SetXTitle("#phi  \b");
  DefzDdigiHB41DF->SetYTitle("  <D> \b");
  DefzDdigiHB41DF->SetZTitle("<D>_PHI  - AllDepthfs \b");
  DefzDdigiHB41DF->SetMarkerColor(4);
  DefzDdigiHB41DF->SetLineColor(4);  //  DefzDdigiHB41DF->SetMinimum(0.8);     DefzDdigiHB41DF->SetMinimum(-0.015);
  DefzDdigiHB41DF->Draw("Error");
  /////////////////
  c1x1->Update();
  c1x1->Print("DdigiGeneralD1PhiSymmetryHB.png");
  c1x1->Clear();
  // clean-up
  if (DefzDdigiHB41D)
    delete DefzDdigiHB41D;
  if (DefzDdigiHB41D0)
    delete DefzDdigiHB41D0;
  if (DefzDdigiHB41DF)
    delete DefzDdigiHB41DF;

  //========================================================================================== 14
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=1
  //cout<<"      1D plot: D vs phi , different eta,  depth=1 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(4, 4);
  c3x5->cd(1);
  int kcountHBpositivedirectionDigiD1 = 1;
  TH1F *h2CeffHBpositivedirectionDigiD1 = new TH1F("h2CeffHBpositivedirectionDigiD1", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionDigiD:
    if (jeta - 41 >= 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=1
      for (int i = 0; i < 1; i++) {
        TH1F *HBpositivedirectionDigiD1 = (TH1F *)h2CeffHBpositivedirectionDigiD1->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = digivarianceHB[i][jeta][jphi];
          if (adigiHB[i][jeta][jphi] > 0.) {
            HBpositivedirectionDigiD1->Fill(jphi, ccc1);
            ccctest = 1.;  //HBpositivedirectionDigiD1->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1414       kcountHBpositivedirectionDigiD1   =     "<<kcountHBpositivedirectionDigiD1  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHBpositivedirectionDigiD1);
          HBpositivedirectionDigiD1->SetMarkerStyle(20);
          HBpositivedirectionDigiD1->SetMarkerSize(0.4);
          HBpositivedirectionDigiD1->GetYaxis()->SetLabelSize(0.04);
          HBpositivedirectionDigiD1->SetXTitle("HBpositivedirectionDigiD1 \b");
          HBpositivedirectionDigiD1->SetMarkerColor(2);
          HBpositivedirectionDigiD1->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHBpositivedirectionDigiD1 == 1)
            HBpositivedirectionDigiD1->SetXTitle("D for HB+ jeta =  0; depth = 1 \b");
          if (kcountHBpositivedirectionDigiD1 == 2)
            HBpositivedirectionDigiD1->SetXTitle("D for HB+ jeta =  1; depth = 1 \b");
          if (kcountHBpositivedirectionDigiD1 == 3)
            HBpositivedirectionDigiD1->SetXTitle("D for HB+ jeta =  2; depth = 1 \b");
          if (kcountHBpositivedirectionDigiD1 == 4)
            HBpositivedirectionDigiD1->SetXTitle("D for HB+ jeta =  3; depth = 1 \b");
          if (kcountHBpositivedirectionDigiD1 == 5)
            HBpositivedirectionDigiD1->SetXTitle("D for HB+ jeta =  4; depth = 1 \b");
          if (kcountHBpositivedirectionDigiD1 == 6)
            HBpositivedirectionDigiD1->SetXTitle("D for HB+ jeta =  5; depth = 1 \b");
          if (kcountHBpositivedirectionDigiD1 == 7)
            HBpositivedirectionDigiD1->SetXTitle("D for HB+ jeta =  6; depth = 1 \b");
          if (kcountHBpositivedirectionDigiD1 == 8)
            HBpositivedirectionDigiD1->SetXTitle("D for HB+ jeta =  7; depth = 1 \b");
          if (kcountHBpositivedirectionDigiD1 == 9)
            HBpositivedirectionDigiD1->SetXTitle("D for HB+ jeta =  8; depth = 1 \b");
          if (kcountHBpositivedirectionDigiD1 == 10)
            HBpositivedirectionDigiD1->SetXTitle("D for HB+ jeta =  9; depth = 1 \b");
          if (kcountHBpositivedirectionDigiD1 == 11)
            HBpositivedirectionDigiD1->SetXTitle("D for HB+ jeta = 10; depth = 1 \b");
          if (kcountHBpositivedirectionDigiD1 == 12)
            HBpositivedirectionDigiD1->SetXTitle("D for HB+ jeta = 11; depth = 1 \b");
          if (kcountHBpositivedirectionDigiD1 == 13)
            HBpositivedirectionDigiD1->SetXTitle("D for HB+ jeta = 12; depth = 1 \b");
          if (kcountHBpositivedirectionDigiD1 == 14)
            HBpositivedirectionDigiD1->SetXTitle("D for HB+ jeta = 13; depth = 1 \b");
          if (kcountHBpositivedirectionDigiD1 == 15)
            HBpositivedirectionDigiD1->SetXTitle("D for HB+ jeta = 14; depth = 1 \b");
          if (kcountHBpositivedirectionDigiD1 == 16)
            HBpositivedirectionDigiD1->SetXTitle("D for HB+ jeta = 15; depth = 1 \b");
          HBpositivedirectionDigiD1->Draw("Error");
          kcountHBpositivedirectionDigiD1++;
          if (kcountHBpositivedirectionDigiD1 > 16)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DdigiPositiveDirectionhistD1PhiSymmetryDepth1HB.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHBpositivedirectionDigiD1)
    delete h2CeffHBpositivedirectionDigiD1;
  //========================================================================================== 15
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=2
  //cout<<"      1D plot: D vs phi , different eta,  depth=2 *****" <<endl;
  c3x5->Clear();
  c3x5->Divide(4, 4);
  c3x5->cd(1);
  int kcountHBpositivedirectionDigiD2 = 1;
  TH1F *h2CeffHBpositivedirectionDigiD2 = new TH1F("h2CeffHBpositivedirectionDigiD2", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionDigiD:
    if (jeta - 41 >= 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=2
      for (int i = 1; i < 2; i++) {
        TH1F *HBpositivedirectionDigiD2 = (TH1F *)h2CeffHBpositivedirectionDigiD2->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = digivarianceHB[i][jeta][jphi];
          if (adigiHB[i][jeta][jphi] > 0.) {
            HBpositivedirectionDigiD2->Fill(jphi, ccc1);
            ccctest = 1.;  //HBpositivedirectionDigiD2->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1515       kcountHBpositivedirectionDigiD2   =     "<<kcountHBpositivedirectionDigiD2  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHBpositivedirectionDigiD2);
          HBpositivedirectionDigiD2->SetMarkerStyle(20);
          HBpositivedirectionDigiD2->SetMarkerSize(0.4);
          HBpositivedirectionDigiD2->GetYaxis()->SetLabelSize(0.04);
          HBpositivedirectionDigiD2->SetXTitle("HBpositivedirectionDigiD2 \b");
          HBpositivedirectionDigiD2->SetMarkerColor(2);
          HBpositivedirectionDigiD2->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHBpositivedirectionDigiD2 == 1)
            HBpositivedirectionDigiD2->SetXTitle("D for HB+ jeta =  0; depth = 2 \b");
          if (kcountHBpositivedirectionDigiD2 == 2)
            HBpositivedirectionDigiD2->SetXTitle("D for HB+ jeta =  1; depth = 2 \b");
          if (kcountHBpositivedirectionDigiD2 == 3)
            HBpositivedirectionDigiD2->SetXTitle("D for HB+ jeta =  2; depth = 2 \b");
          if (kcountHBpositivedirectionDigiD2 == 4)
            HBpositivedirectionDigiD2->SetXTitle("D for HB+ jeta =  3; depth = 2 \b");
          if (kcountHBpositivedirectionDigiD2 == 5)
            HBpositivedirectionDigiD2->SetXTitle("D for HB+ jeta =  4; depth = 2 \b");
          if (kcountHBpositivedirectionDigiD2 == 6)
            HBpositivedirectionDigiD2->SetXTitle("D for HB+ jeta =  5; depth = 2 \b");
          if (kcountHBpositivedirectionDigiD2 == 7)
            HBpositivedirectionDigiD2->SetXTitle("D for HB+ jeta =  6; depth = 2 \b");
          if (kcountHBpositivedirectionDigiD2 == 8)
            HBpositivedirectionDigiD2->SetXTitle("D for HB+ jeta =  7; depth = 2 \b");
          if (kcountHBpositivedirectionDigiD2 == 9)
            HBpositivedirectionDigiD2->SetXTitle("D for HB+ jeta =  8; depth = 2 \b");
          if (kcountHBpositivedirectionDigiD2 == 10)
            HBpositivedirectionDigiD2->SetXTitle("D for HB+ jeta =  9; depth = 2 \b");
          if (kcountHBpositivedirectionDigiD2 == 11)
            HBpositivedirectionDigiD2->SetXTitle("D for HB+ jeta = 10; depth = 2 \b");
          if (kcountHBpositivedirectionDigiD2 == 12)
            HBpositivedirectionDigiD2->SetXTitle("D for HB+ jeta = 11; depth = 2 \b");
          if (kcountHBpositivedirectionDigiD2 == 13)
            HBpositivedirectionDigiD2->SetXTitle("D for HB+ jeta = 12; depth = 2 \b");
          if (kcountHBpositivedirectionDigiD2 == 14)
            HBpositivedirectionDigiD2->SetXTitle("D for HB+ jeta = 13; depth = 2 \b");
          if (kcountHBpositivedirectionDigiD2 == 15)
            HBpositivedirectionDigiD2->SetXTitle("D for HB+ jeta = 14; depth = 2 \b");
          if (kcountHBpositivedirectionDigiD2 == 16)
            HBpositivedirectionDigiD2->SetXTitle("D for HB+ jeta = 15; depth = 2 \b");
          HBpositivedirectionDigiD2->Draw("Error");
          kcountHBpositivedirectionDigiD2++;
          if (kcountHBpositivedirectionDigiD2 > 16)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DdigiPositiveDirectionhistD1PhiSymmetryDepth2HB.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHBpositivedirectionDigiD2)
    delete h2CeffHBpositivedirectionDigiD2;
  //========================================================================================== 16
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=3
  //cout<<"      1D plot: D vs phi , different eta,  depth=3 *****" <<endl;
  c3x5->Clear();
  c3x5->Divide(4, 4);
  c3x5->cd(1);
  int kcountHBpositivedirectionDigiD3 = 1;
  TH1F *h2CeffHBpositivedirectionDigiD3 = new TH1F("h2CeffHBpositivedirectionDigiD3", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionDigiD:
    if (jeta - 41 >= 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=3
      for (int i = 2; i < 3; i++) {
        TH1F *HBpositivedirectionDigiD3 = (TH1F *)h2CeffHBpositivedirectionDigiD3->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = digivarianceHB[i][jeta][jphi];
          if (adigiHB[i][jeta][jphi] > 0.) {
            HBpositivedirectionDigiD3->Fill(jphi, ccc1);
            ccctest = 1.;  //HBpositivedirectionDigiD3->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1616       kcountHBpositivedirectionDigiD3   =     "<<kcountHBpositivedirectionDigiD3  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHBpositivedirectionDigiD3);
          HBpositivedirectionDigiD3->SetMarkerStyle(20);
          HBpositivedirectionDigiD3->SetMarkerSize(0.4);
          HBpositivedirectionDigiD3->GetYaxis()->SetLabelSize(0.04);
          HBpositivedirectionDigiD3->SetXTitle("HBpositivedirectionDigiD3 \b");
          HBpositivedirectionDigiD3->SetMarkerColor(2);
          HBpositivedirectionDigiD3->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHBpositivedirectionDigiD3 == 1)
            HBpositivedirectionDigiD3->SetXTitle("D for HB+ jeta =  0; depth = 3 \b");
          if (kcountHBpositivedirectionDigiD3 == 2)
            HBpositivedirectionDigiD3->SetXTitle("D for HB+ jeta =  1; depth = 3 \b");
          if (kcountHBpositivedirectionDigiD3 == 3)
            HBpositivedirectionDigiD3->SetXTitle("D for HB+ jeta =  2; depth = 3 \b");
          if (kcountHBpositivedirectionDigiD3 == 4)
            HBpositivedirectionDigiD3->SetXTitle("D for HB+ jeta =  3; depth = 3 \b");
          if (kcountHBpositivedirectionDigiD3 == 5)
            HBpositivedirectionDigiD3->SetXTitle("D for HB+ jeta =  4; depth = 3 \b");
          if (kcountHBpositivedirectionDigiD3 == 6)
            HBpositivedirectionDigiD3->SetXTitle("D for HB+ jeta =  5; depth = 3 \b");
          if (kcountHBpositivedirectionDigiD3 == 7)
            HBpositivedirectionDigiD3->SetXTitle("D for HB+ jeta =  6; depth = 3 \b");
          if (kcountHBpositivedirectionDigiD3 == 8)
            HBpositivedirectionDigiD3->SetXTitle("D for HB+ jeta =  7; depth = 3 \b");
          if (kcountHBpositivedirectionDigiD3 == 9)
            HBpositivedirectionDigiD3->SetXTitle("D for HB+ jeta =  8; depth = 3 \b");
          if (kcountHBpositivedirectionDigiD3 == 10)
            HBpositivedirectionDigiD3->SetXTitle("D for HB+ jeta =  9; depth = 3 \b");
          if (kcountHBpositivedirectionDigiD3 == 11)
            HBpositivedirectionDigiD3->SetXTitle("D for HB+ jeta = 10; depth = 3 \b");
          if (kcountHBpositivedirectionDigiD3 == 12)
            HBpositivedirectionDigiD3->SetXTitle("D for HB+ jeta = 11; depth = 3 \b");
          if (kcountHBpositivedirectionDigiD3 == 13)
            HBpositivedirectionDigiD3->SetXTitle("D for HB+ jeta = 12; depth = 3 \b");
          if (kcountHBpositivedirectionDigiD3 == 14)
            HBpositivedirectionDigiD3->SetXTitle("D for HB+ jeta = 13; depth = 3 \b");
          if (kcountHBpositivedirectionDigiD3 == 15)
            HBpositivedirectionDigiD3->SetXTitle("D for HB+ jeta = 14; depth = 3 \b");
          if (kcountHBpositivedirectionDigiD3 == 16)
            HBpositivedirectionDigiD3->SetXTitle("D for HB+ jeta = 15; depth = 3 \b");
          HBpositivedirectionDigiD3->Draw("Error");
          kcountHBpositivedirectionDigiD3++;
          if (kcountHBpositivedirectionDigiD3 > 16)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DdigiPositiveDirectionhistD1PhiSymmetryDepth3HB.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHBpositivedirectionDigiD3)
    delete h2CeffHBpositivedirectionDigiD3;
  //========================================================================================== 17
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=4
  //cout<<"      1D plot: D vs phi , different eta,  depth=4 *****" <<endl;
  c3x5->Clear();
  c3x5->Divide(4, 4);
  c3x5->cd(1);
  int kcountHBpositivedirectionDigiD4 = 1;
  TH1F *h2CeffHBpositivedirectionDigiD4 = new TH1F("h2CeffHBpositivedirectionDigiD4", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionDigiD:
    if (jeta - 41 >= 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=4
      for (int i = 3; i < 4; i++) {
        TH1F *HBpositivedirectionDigiD4 = (TH1F *)h2CeffHBpositivedirectionDigiD4->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = digivarianceHB[i][jeta][jphi];
          if (adigiHB[i][jeta][jphi] > 0.) {
            HBpositivedirectionDigiD4->Fill(jphi, ccc1);
            ccctest = 1.;  //HBpositivedirectionDigiD4->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1717       kcountHBpositivedirectionDigiD4   =     "<<kcountHBpositivedirectionDigiD4  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHBpositivedirectionDigiD4);
          HBpositivedirectionDigiD4->SetMarkerStyle(20);
          HBpositivedirectionDigiD4->SetMarkerSize(0.4);
          HBpositivedirectionDigiD4->GetYaxis()->SetLabelSize(0.04);
          HBpositivedirectionDigiD4->SetXTitle("HBpositivedirectionDigiD4 \b");
          HBpositivedirectionDigiD4->SetMarkerColor(2);
          HBpositivedirectionDigiD4->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHBpositivedirectionDigiD4 == 1)
            HBpositivedirectionDigiD4->SetXTitle("D for HB+ jeta =  0; depth = 4 \b");
          if (kcountHBpositivedirectionDigiD4 == 2)
            HBpositivedirectionDigiD4->SetXTitle("D for HB+ jeta =  1; depth = 4 \b");
          if (kcountHBpositivedirectionDigiD4 == 3)
            HBpositivedirectionDigiD4->SetXTitle("D for HB+ jeta =  2; depth = 4 \b");
          if (kcountHBpositivedirectionDigiD4 == 4)
            HBpositivedirectionDigiD4->SetXTitle("D for HB+ jeta =  3; depth = 4 \b");
          if (kcountHBpositivedirectionDigiD4 == 5)
            HBpositivedirectionDigiD4->SetXTitle("D for HB+ jeta =  4; depth = 4 \b");
          if (kcountHBpositivedirectionDigiD4 == 6)
            HBpositivedirectionDigiD4->SetXTitle("D for HB+ jeta =  5; depth = 4 \b");
          if (kcountHBpositivedirectionDigiD4 == 7)
            HBpositivedirectionDigiD4->SetXTitle("D for HB+ jeta =  6; depth = 4 \b");
          if (kcountHBpositivedirectionDigiD4 == 8)
            HBpositivedirectionDigiD4->SetXTitle("D for HB+ jeta =  7; depth = 4 \b");
          if (kcountHBpositivedirectionDigiD4 == 9)
            HBpositivedirectionDigiD4->SetXTitle("D for HB+ jeta =  8; depth = 4 \b");
          if (kcountHBpositivedirectionDigiD4 == 10)
            HBpositivedirectionDigiD4->SetXTitle("D for HB+ jeta =  9; depth = 4 \b");
          if (kcountHBpositivedirectionDigiD4 == 11)
            HBpositivedirectionDigiD4->SetXTitle("D for HB+ jeta = 10; depth = 4 \b");
          if (kcountHBpositivedirectionDigiD4 == 12)
            HBpositivedirectionDigiD4->SetXTitle("D for HB+ jeta = 11; depth = 4 \b");
          if (kcountHBpositivedirectionDigiD4 == 13)
            HBpositivedirectionDigiD4->SetXTitle("D for HB+ jeta = 12; depth = 4 \b");
          if (kcountHBpositivedirectionDigiD4 == 14)
            HBpositivedirectionDigiD4->SetXTitle("D for HB+ jeta = 13; depth = 4 \b");
          if (kcountHBpositivedirectionDigiD4 == 15)
            HBpositivedirectionDigiD4->SetXTitle("D for HB+ jeta = 14; depth = 4 \b");
          if (kcountHBpositivedirectionDigiD4 == 16)
            HBpositivedirectionDigiD4->SetXTitle("D for HB+ jeta = 15; depth = 4 \b");
          HBpositivedirectionDigiD4->Draw("Error");
          kcountHBpositivedirectionDigiD4++;
          if (kcountHBpositivedirectionDigiD4 > 16)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DdigiPositiveDirectionhistD1PhiSymmetryDepth4HB.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHBpositivedirectionDigiD4)
    delete h2CeffHBpositivedirectionDigiD4;

  //========================================================================================== 22214
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=1
  //cout<<"      1D plot: D vs phi , different eta,  depth=1 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(4, 4);
  c3x5->cd(1);
  int kcountHBnegativedirectionDigiD1 = 1;
  TH1F *h2CeffHBnegativedirectionDigiD1 = new TH1F("h2CeffHBnegativedirectionDigiD1", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionDigiD:
    if (jeta - 41 < 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=1
      for (int i = 0; i < 1; i++) {
        TH1F *HBnegativedirectionDigiD1 = (TH1F *)h2CeffHBnegativedirectionDigiD1->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = digivarianceHB[i][jeta][jphi];
          if (adigiHB[i][jeta][jphi] > 0.) {
            HBnegativedirectionDigiD1->Fill(jphi, ccc1);
            ccctest = 1.;  //HBnegativedirectionDigiD1->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1414       kcountHBnegativedirectionDigiD1   =     "<<kcountHBnegativedirectionDigiD1  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHBnegativedirectionDigiD1);
          HBnegativedirectionDigiD1->SetMarkerStyle(20);
          HBnegativedirectionDigiD1->SetMarkerSize(0.4);
          HBnegativedirectionDigiD1->GetYaxis()->SetLabelSize(0.04);
          HBnegativedirectionDigiD1->SetXTitle("HBnegativedirectionDigiD1 \b");
          HBnegativedirectionDigiD1->SetMarkerColor(2);
          HBnegativedirectionDigiD1->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHBnegativedirectionDigiD1 == 1)
            HBnegativedirectionDigiD1->SetXTitle("D for HB- jeta =-16; depth = 1 \b");
          if (kcountHBnegativedirectionDigiD1 == 2)
            HBnegativedirectionDigiD1->SetXTitle("D for HB- jeta =-15; depth = 1 \b");
          if (kcountHBnegativedirectionDigiD1 == 3)
            HBnegativedirectionDigiD1->SetXTitle("D for HB- jeta =-14; depth = 1 \b");
          if (kcountHBnegativedirectionDigiD1 == 4)
            HBnegativedirectionDigiD1->SetXTitle("D for HB- jeta =-13; depth = 1 \b");
          if (kcountHBnegativedirectionDigiD1 == 5)
            HBnegativedirectionDigiD1->SetXTitle("D for HB- jeta =-12; depth = 1 \b");
          if (kcountHBnegativedirectionDigiD1 == 6)
            HBnegativedirectionDigiD1->SetXTitle("D for HB- jeta =-11; depth = 1 \b");
          if (kcountHBnegativedirectionDigiD1 == 7)
            HBnegativedirectionDigiD1->SetXTitle("D for HB- jeta =-10; depth = 1 \b");
          if (kcountHBnegativedirectionDigiD1 == 8)
            HBnegativedirectionDigiD1->SetXTitle("D for HB- jeta =-9; depth = 1 \b");
          if (kcountHBnegativedirectionDigiD1 == 9)
            HBnegativedirectionDigiD1->SetXTitle("D for HB- jeta =-8; depth = 1 \b");
          if (kcountHBnegativedirectionDigiD1 == 10)
            HBnegativedirectionDigiD1->SetXTitle("D for HB- jeta =-7; depth = 1 \b");
          if (kcountHBnegativedirectionDigiD1 == 11)
            HBnegativedirectionDigiD1->SetXTitle("D for HB- jeta =-6; depth = 1 \b");
          if (kcountHBnegativedirectionDigiD1 == 12)
            HBnegativedirectionDigiD1->SetXTitle("D for HB- jeta =-5; depth = 1 \b");
          if (kcountHBnegativedirectionDigiD1 == 13)
            HBnegativedirectionDigiD1->SetXTitle("D for HB- jeta =-4; depth = 1 \b");
          if (kcountHBnegativedirectionDigiD1 == 14)
            HBnegativedirectionDigiD1->SetXTitle("D for HB- jeta =-3; depth = 1 \b");
          if (kcountHBnegativedirectionDigiD1 == 15)
            HBnegativedirectionDigiD1->SetXTitle("D for HB- jeta =-2; depth = 1 \b");
          if (kcountHBnegativedirectionDigiD1 == 16)
            HBnegativedirectionDigiD1->SetXTitle("D for HB- jeta =-1; depth = 1 \b");
          HBnegativedirectionDigiD1->Draw("Error");
          kcountHBnegativedirectionDigiD1++;
          if (kcountHBnegativedirectionDigiD1 > 16)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 < 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DdigiNegativeDirectionhistD1PhiSymmetryDepth1HB.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHBnegativedirectionDigiD1)
    delete h2CeffHBnegativedirectionDigiD1;
  //========================================================================================== 22215
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=2
  //cout<<"      1D plot: D vs phi , different eta,  depth=2 *****" <<endl;
  c3x5->Clear();
  c3x5->Divide(4, 4);
  c3x5->cd(1);
  int kcountHBnegativedirectionDigiD2 = 1;
  TH1F *h2CeffHBnegativedirectionDigiD2 = new TH1F("h2CeffHBnegativedirectionDigiD2", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionDigiD:
    if (jeta - 41 < 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=2
      for (int i = 1; i < 2; i++) {
        TH1F *HBnegativedirectionDigiD2 = (TH1F *)h2CeffHBnegativedirectionDigiD2->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = digivarianceHB[i][jeta][jphi];
          if (adigiHB[i][jeta][jphi] > 0.) {
            HBnegativedirectionDigiD2->Fill(jphi, ccc1);
            ccctest = 1.;  //HBnegativedirectionDigiD2->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1515       kcountHBnegativedirectionDigiD2   =     "<<kcountHBnegativedirectionDigiD2  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHBnegativedirectionDigiD2);
          HBnegativedirectionDigiD2->SetMarkerStyle(20);
          HBnegativedirectionDigiD2->SetMarkerSize(0.4);
          HBnegativedirectionDigiD2->GetYaxis()->SetLabelSize(0.04);
          HBnegativedirectionDigiD2->SetXTitle("HBnegativedirectionDigiD2 \b");
          HBnegativedirectionDigiD2->SetMarkerColor(2);
          HBnegativedirectionDigiD2->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHBnegativedirectionDigiD2 == 1)
            HBnegativedirectionDigiD2->SetXTitle("D for HB- jeta =-16; depth = 2 \b");
          if (kcountHBnegativedirectionDigiD2 == 2)
            HBnegativedirectionDigiD2->SetXTitle("D for HB- jeta =-15; depth = 2 \b");
          if (kcountHBnegativedirectionDigiD2 == 3)
            HBnegativedirectionDigiD2->SetXTitle("D for HB- jeta =-14; depth = 2 \b");
          if (kcountHBnegativedirectionDigiD2 == 4)
            HBnegativedirectionDigiD2->SetXTitle("D for HB- jeta =-13; depth = 2 \b");
          if (kcountHBnegativedirectionDigiD2 == 5)
            HBnegativedirectionDigiD2->SetXTitle("D for HB- jeta =-12; depth = 2 \b");
          if (kcountHBnegativedirectionDigiD2 == 6)
            HBnegativedirectionDigiD2->SetXTitle("D for HB- jeta =-11; depth = 2 \b");
          if (kcountHBnegativedirectionDigiD2 == 7)
            HBnegativedirectionDigiD2->SetXTitle("D for HB- jeta =-10; depth = 2 \b");
          if (kcountHBnegativedirectionDigiD2 == 8)
            HBnegativedirectionDigiD2->SetXTitle("D for HB- jeta =-9; depth = 2 \b");
          if (kcountHBnegativedirectionDigiD2 == 9)
            HBnegativedirectionDigiD2->SetXTitle("D for HB- jeta =-8; depth = 2 \b");
          if (kcountHBnegativedirectionDigiD2 == 10)
            HBnegativedirectionDigiD2->SetXTitle("D for HB- jeta =-7; depth = 2 \b");
          if (kcountHBnegativedirectionDigiD2 == 11)
            HBnegativedirectionDigiD2->SetXTitle("D for HB- jeta =-6; depth = 2 \b");
          if (kcountHBnegativedirectionDigiD2 == 12)
            HBnegativedirectionDigiD2->SetXTitle("D for HB- jeta =-5; depth = 2 \b");
          if (kcountHBnegativedirectionDigiD2 == 13)
            HBnegativedirectionDigiD2->SetXTitle("D for HB- jeta =-4; depth = 2 \b");
          if (kcountHBnegativedirectionDigiD2 == 14)
            HBnegativedirectionDigiD2->SetXTitle("D for HB- jeta =-3; depth = 2 \b");
          if (kcountHBnegativedirectionDigiD2 == 15)
            HBnegativedirectionDigiD2->SetXTitle("D for HB- jeta =-2; depth = 2 \b");
          if (kcountHBnegativedirectionDigiD2 == 16)
            HBnegativedirectionDigiD2->SetXTitle("D for HB- jeta =-1; depth = 2 \b");
          HBnegativedirectionDigiD2->Draw("Error");
          kcountHBnegativedirectionDigiD2++;
          if (kcountHBnegativedirectionDigiD2 > 16)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 < 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DdigiNegativeDirectionhistD1PhiSymmetryDepth2HB.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHBnegativedirectionDigiD2)
    delete h2CeffHBnegativedirectionDigiD2;
  //========================================================================================== 22216
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=3
  //cout<<"      1D plot: D vs phi , different eta,  depth=3 *****" <<endl;
  c3x5->Clear();
  c3x5->Divide(4, 4);
  c3x5->cd(1);
  int kcountHBnegativedirectionDigiD3 = 1;
  TH1F *h2CeffHBnegativedirectionDigiD3 = new TH1F("h2CeffHBnegativedirectionDigiD3", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionDigiD:
    if (jeta - 41 < 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=3
      for (int i = 2; i < 3; i++) {
        TH1F *HBnegativedirectionDigiD3 = (TH1F *)h2CeffHBnegativedirectionDigiD3->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = digivarianceHB[i][jeta][jphi];
          if (adigiHB[i][jeta][jphi] > 0.) {
            HBnegativedirectionDigiD3->Fill(jphi, ccc1);
            ccctest = 1.;  //HBnegativedirectionDigiD3->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1616       kcountHBnegativedirectionDigiD3   =     "<<kcountHBnegativedirectionDigiD3  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHBnegativedirectionDigiD3);
          HBnegativedirectionDigiD3->SetMarkerStyle(20);
          HBnegativedirectionDigiD3->SetMarkerSize(0.4);
          HBnegativedirectionDigiD3->GetYaxis()->SetLabelSize(0.04);
          HBnegativedirectionDigiD3->SetXTitle("HBnegativedirectionDigiD3 \b");
          HBnegativedirectionDigiD3->SetMarkerColor(2);
          HBnegativedirectionDigiD3->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHBnegativedirectionDigiD3 == 1)
            HBnegativedirectionDigiD3->SetXTitle("D for HB- jeta =-16; depth = 3 \b");
          if (kcountHBnegativedirectionDigiD3 == 2)
            HBnegativedirectionDigiD3->SetXTitle("D for HB- jeta =-15; depth = 3 \b");
          if (kcountHBnegativedirectionDigiD3 == 3)
            HBnegativedirectionDigiD3->SetXTitle("D for HB- jeta =-14; depth = 3 \b");
          if (kcountHBnegativedirectionDigiD3 == 4)
            HBnegativedirectionDigiD3->SetXTitle("D for HB- jeta =-13; depth = 3 \b");
          if (kcountHBnegativedirectionDigiD3 == 5)
            HBnegativedirectionDigiD3->SetXTitle("D for HB- jeta =-12; depth = 3 \b");
          if (kcountHBnegativedirectionDigiD3 == 6)
            HBnegativedirectionDigiD3->SetXTitle("D for HB- jeta =-11; depth = 3 \b");
          if (kcountHBnegativedirectionDigiD3 == 7)
            HBnegativedirectionDigiD3->SetXTitle("D for HB- jeta =-10; depth = 3 \b");
          if (kcountHBnegativedirectionDigiD3 == 8)
            HBnegativedirectionDigiD3->SetXTitle("D for HB- jeta =-9; depth = 3 \b");
          if (kcountHBnegativedirectionDigiD3 == 9)
            HBnegativedirectionDigiD3->SetXTitle("D for HB- jeta =-8; depth = 3 \b");
          if (kcountHBnegativedirectionDigiD3 == 10)
            HBnegativedirectionDigiD3->SetXTitle("D for HB- jeta =-7; depth = 3 \b");
          if (kcountHBnegativedirectionDigiD3 == 11)
            HBnegativedirectionDigiD3->SetXTitle("D for HB- jeta =-6; depth = 3 \b");
          if (kcountHBnegativedirectionDigiD3 == 12)
            HBnegativedirectionDigiD3->SetXTitle("D for HB- jeta =-5; depth = 3 \b");
          if (kcountHBnegativedirectionDigiD3 == 13)
            HBnegativedirectionDigiD3->SetXTitle("D for HB- jeta =-4; depth = 3 \b");
          if (kcountHBnegativedirectionDigiD3 == 14)
            HBnegativedirectionDigiD3->SetXTitle("D for HB- jeta =-3; depth = 3 \b");
          if (kcountHBnegativedirectionDigiD3 == 15)
            HBnegativedirectionDigiD3->SetXTitle("D for HB- jeta =-2; depth = 3 \b");
          if (kcountHBnegativedirectionDigiD3 == 16)
            HBnegativedirectionDigiD3->SetXTitle("D for HB- jeta =-1; depth = 3 \b");
          HBnegativedirectionDigiD3->Draw("Error");
          kcountHBnegativedirectionDigiD3++;
          if (kcountHBnegativedirectionDigiD3 > 16)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 < 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DdigiNegativeDirectionhistD1PhiSymmetryDepth3HB.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHBnegativedirectionDigiD3)
    delete h2CeffHBnegativedirectionDigiD3;
  //========================================================================================== 22217
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=4
  //cout<<"      1D plot: D vs phi , different eta,  depth=4 *****" <<endl;
  c3x5->Clear();
  c3x5->Divide(4, 4);
  c3x5->cd(1);
  int kcountHBnegativedirectionDigiD4 = 1;
  TH1F *h2CeffHBnegativedirectionDigiD4 = new TH1F("h2CeffHBnegativedirectionDigiD4", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionDigiD:
    if (jeta - 41 < 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=4
      for (int i = 3; i < 4; i++) {
        TH1F *HBnegativedirectionDigiD4 = (TH1F *)h2CeffHBnegativedirectionDigiD4->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = digivarianceHB[i][jeta][jphi];
          if (adigiHB[i][jeta][jphi] > 0.) {
            HBnegativedirectionDigiD4->Fill(jphi, ccc1);
            ccctest = 1.;  //HBnegativedirectionDigiD4->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1717       kcountHBnegativedirectionDigiD4   =     "<<kcountHBnegativedirectionDigiD4  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHBnegativedirectionDigiD4);
          HBnegativedirectionDigiD4->SetMarkerStyle(20);
          HBnegativedirectionDigiD4->SetMarkerSize(0.4);
          HBnegativedirectionDigiD4->GetYaxis()->SetLabelSize(0.04);
          HBnegativedirectionDigiD4->SetXTitle("HBnegativedirectionDigiD4 \b");
          HBnegativedirectionDigiD4->SetMarkerColor(2);
          HBnegativedirectionDigiD4->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHBnegativedirectionDigiD4 == 1)
            HBnegativedirectionDigiD4->SetXTitle("D for HB- jeta =-16; depth = 4 \b");
          if (kcountHBnegativedirectionDigiD4 == 2)
            HBnegativedirectionDigiD4->SetXTitle("D for HB- jeta =-15; depth = 4 \b");
          if (kcountHBnegativedirectionDigiD4 == 3)
            HBnegativedirectionDigiD4->SetXTitle("D for HB- jeta =-14; depth = 4 \b");
          if (kcountHBnegativedirectionDigiD4 == 4)
            HBnegativedirectionDigiD4->SetXTitle("D for HB- jeta =-13; depth = 4 \b");
          if (kcountHBnegativedirectionDigiD4 == 5)
            HBnegativedirectionDigiD4->SetXTitle("D for HB- jeta =-12; depth = 4 \b");
          if (kcountHBnegativedirectionDigiD4 == 6)
            HBnegativedirectionDigiD4->SetXTitle("D for HB- jeta =-11; depth = 4 \b");
          if (kcountHBnegativedirectionDigiD4 == 7)
            HBnegativedirectionDigiD4->SetXTitle("D for HB- jeta =-10; depth = 4 \b");
          if (kcountHBnegativedirectionDigiD4 == 8)
            HBnegativedirectionDigiD4->SetXTitle("D for HB- jeta =-9; depth = 4 \b");
          if (kcountHBnegativedirectionDigiD4 == 9)
            HBnegativedirectionDigiD4->SetXTitle("D for HB- jeta =-8; depth = 4 \b");
          if (kcountHBnegativedirectionDigiD4 == 10)
            HBnegativedirectionDigiD4->SetXTitle("D for HB- jeta =-7; depth = 4 \b");
          if (kcountHBnegativedirectionDigiD4 == 11)
            HBnegativedirectionDigiD4->SetXTitle("D for HB- jeta =-6; depth = 4 \b");
          if (kcountHBnegativedirectionDigiD4 == 12)
            HBnegativedirectionDigiD4->SetXTitle("D for HB- jeta =-5; depth = 4 \b");
          if (kcountHBnegativedirectionDigiD4 == 13)
            HBnegativedirectionDigiD4->SetXTitle("D for HB- jeta =-4; depth = 4 \b");
          if (kcountHBnegativedirectionDigiD4 == 14)
            HBnegativedirectionDigiD4->SetXTitle("D for HB- jeta =-3; depth = 4 \b");
          if (kcountHBnegativedirectionDigiD4 == 15)
            HBnegativedirectionDigiD4->SetXTitle("D for HB- jeta =-2; depth = 4 \b");
          if (kcountHBnegativedirectionDigiD4 == 16)
            HBnegativedirectionDigiD4->SetXTitle("D for HB- jeta =-1; depth = 4 \b");
          HBnegativedirectionDigiD4->Draw("Error");
          kcountHBnegativedirectionDigiD4++;
          if (kcountHBnegativedirectionDigiD4 > 16)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 < 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DdigiNegativeDirectionhistD1PhiSymmetryDepth4HB.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHBnegativedirectionDigiD4)
    delete h2CeffHBnegativedirectionDigiD4;

  //=====================================================================       END of Digi HB for phi-symmetry
  //=====================================================================       END of Digi HB for phi-symmetry
  //=====================================================================       END of Digi HB for phi-symmetry

  ////////////////////////////////////////////////////////////////////////////////////////////////////         Phi-symmetry for Calibration Group:    Digi HE
  ////////////////////////////////////////////////////////////////////////////////////////////////////         Phi-symmetry for Calibration Group:    Digi HE
  ////////////////////////////////////////////////////////////////////////////////////////////////////         Phi-symmetry for Calibration Group:    Digi HE
  //  int k_max[5]={0,4,7,4,4}; // maximum depth for each subdet
  //ndepth = k_max[3];
  ndepth = 7;
  //  const int ndepth = 7;
  double adigihe[ndepth][njeta][njphi];
  double digivariancehe[ndepth][njeta][njphi];
  //                                   RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR:   Digi HE
  TH2F *amplitudechannel1HE1 = (TH2F *)dir->FindObjectAny("h_amplitudechannel1_HE1");
  TH2F *amplitudechannel0HE1 = (TH2F *)dir->FindObjectAny("h_amplitudechannel0_HE1");
  TH2F *amplitudechannelHE1 = (TH2F *)amplitudechannel1HE1->Clone("amplitudechannelHE1");
  amplitudechannelHE1->Divide(amplitudechannel1HE1, amplitudechannel0HE1, 1, 1, "B");
  TH2F *amplitudechannel1HE2 = (TH2F *)dir->FindObjectAny("h_amplitudechannel1_HE2");
  TH2F *amplitudechannel0HE2 = (TH2F *)dir->FindObjectAny("h_amplitudechannel0_HE2");
  TH2F *amplitudechannelHE2 = (TH2F *)amplitudechannel1HE2->Clone("amplitudechannelHE2");
  amplitudechannelHE2->Divide(amplitudechannel1HE2, amplitudechannel0HE2, 1, 1, "B");
  TH2F *amplitudechannel1HE3 = (TH2F *)dir->FindObjectAny("h_amplitudechannel1_HE3");
  TH2F *amplitudechannel0HE3 = (TH2F *)dir->FindObjectAny("h_amplitudechannel0_HE3");
  TH2F *amplitudechannelHE3 = (TH2F *)amplitudechannel1HE3->Clone("amplitudechannelHE3");
  amplitudechannelHE3->Divide(amplitudechannel1HE3, amplitudechannel0HE3, 1, 1, "B");
  TH2F *amplitudechannel1HE4 = (TH2F *)dir->FindObjectAny("h_amplitudechannel1_HE4");
  TH2F *amplitudechannel0HE4 = (TH2F *)dir->FindObjectAny("h_amplitudechannel0_HE4");
  TH2F *amplitudechannelHE4 = (TH2F *)amplitudechannel1HE4->Clone("amplitudechannelHE4");
  amplitudechannelHE4->Divide(amplitudechannel1HE4, amplitudechannel0HE4, 1, 1, "B");
  TH2F *amplitudechannel1HE5 = (TH2F *)dir->FindObjectAny("h_amplitudechannel1_HE5");
  TH2F *amplitudechannel0HE5 = (TH2F *)dir->FindObjectAny("h_amplitudechannel0_HE5");
  TH2F *amplitudechannelHE5 = (TH2F *)amplitudechannel1HE5->Clone("amplitudechannelHE5");
  amplitudechannelHE5->Divide(amplitudechannel1HE5, amplitudechannel0HE5, 1, 1, "B");
  TH2F *amplitudechannel1HE6 = (TH2F *)dir->FindObjectAny("h_amplitudechannel1_HE6");
  TH2F *amplitudechannel0HE6 = (TH2F *)dir->FindObjectAny("h_amplitudechannel0_HE6");
  TH2F *amplitudechannelHE6 = (TH2F *)amplitudechannel1HE6->Clone("amplitudechannelHE6");
  amplitudechannelHE6->Divide(amplitudechannel1HE6, amplitudechannel0HE6, 1, 1, "B");
  TH2F *amplitudechannel1HE7 = (TH2F *)dir->FindObjectAny("h_amplitudechannel1_HE7");
  TH2F *amplitudechannel0HE7 = (TH2F *)dir->FindObjectAny("h_amplitudechannel0_HE7");
  TH2F *amplitudechannelHE7 = (TH2F *)amplitudechannel1HE7->Clone("amplitudechannelHE7");
  amplitudechannelHE7->Divide(amplitudechannel1HE7, amplitudechannel0HE7, 1, 1, "B");
  for (int jeta = 0; jeta < njeta; jeta++) {
    //====================================================================== PHI normalization & put R into massive adigihe
    //preparation for PHI normalization:
    double sumdigiHE0 = 0;
    int nsumdigiHE0 = 0;
    double sumdigiHE1 = 0;
    int nsumdigiHE1 = 0;
    double sumdigiHE2 = 0;
    int nsumdigiHE2 = 0;
    double sumdigiHE3 = 0;
    int nsumdigiHE3 = 0;
    double sumdigiHE4 = 0;
    int nsumdigiHE4 = 0;
    double sumdigiHE5 = 0;
    int nsumdigiHE5 = 0;
    double sumdigiHE6 = 0;
    int nsumdigiHE6 = 0;
    for (int jphi = 0; jphi < njphi; jphi++) {
      adigihe[0][jeta][jphi] = amplitudechannelHE1->GetBinContent(jeta + 1, jphi + 1);
      adigihe[1][jeta][jphi] = amplitudechannelHE2->GetBinContent(jeta + 1, jphi + 1);
      adigihe[2][jeta][jphi] = amplitudechannelHE3->GetBinContent(jeta + 1, jphi + 1);
      adigihe[3][jeta][jphi] = amplitudechannelHE4->GetBinContent(jeta + 1, jphi + 1);
      adigihe[4][jeta][jphi] = amplitudechannelHE5->GetBinContent(jeta + 1, jphi + 1);
      adigihe[5][jeta][jphi] = amplitudechannelHE6->GetBinContent(jeta + 1, jphi + 1);
      adigihe[6][jeta][jphi] = amplitudechannelHE7->GetBinContent(jeta + 1, jphi + 1);
      if (adigihe[0][jeta][jphi] > 0.) {
        sumdigiHE0 += adigihe[0][jeta][jphi];
        ++nsumdigiHE0;
      }
      if (adigihe[1][jeta][jphi] > 0.) {
        sumdigiHE1 += adigihe[1][jeta][jphi];
        ++nsumdigiHE1;
      }
      if (adigihe[2][jeta][jphi] > 0.) {
        sumdigiHE2 += adigihe[2][jeta][jphi];
        ++nsumdigiHE2;
      }
      if (adigihe[3][jeta][jphi] > 0.) {
        sumdigiHE3 += adigihe[3][jeta][jphi];
        ++nsumdigiHE3;
      }
      if (adigihe[4][jeta][jphi] > 0.) {
        sumdigiHE4 += adigihe[4][jeta][jphi];
        ++nsumdigiHE4;
      }
      if (adigihe[5][jeta][jphi] > 0.) {
        sumdigiHE5 += adigihe[5][jeta][jphi];
        ++nsumdigiHE5;
      }
      if (adigihe[6][jeta][jphi] > 0.) {
        sumdigiHE6 += adigihe[6][jeta][jphi];
        ++nsumdigiHE6;
      }
    }  // phi
    // PHI normalization:
    for (int jphi = 0; jphi < njphi; jphi++) {
      if (adigihe[0][jeta][jphi] > 0.)
        adigihe[0][jeta][jphi] /= (sumdigiHE0 / nsumdigiHE0);
      if (adigihe[1][jeta][jphi] > 0.)
        adigihe[1][jeta][jphi] /= (sumdigiHE1 / nsumdigiHE1);
      if (adigihe[2][jeta][jphi] > 0.)
        adigihe[2][jeta][jphi] /= (sumdigiHE2 / nsumdigiHE2);
      if (adigihe[3][jeta][jphi] > 0.)
        adigihe[3][jeta][jphi] /= (sumdigiHE3 / nsumdigiHE3);
      if (adigihe[4][jeta][jphi] > 0.)
        adigihe[4][jeta][jphi] /= (sumdigiHE4 / nsumdigiHE4);
      if (adigihe[5][jeta][jphi] > 0.)
        adigihe[5][jeta][jphi] /= (sumdigiHE5 / nsumdigiHE5);
      if (adigihe[6][jeta][jphi] > 0.)
        adigihe[6][jeta][jphi] /= (sumdigiHE6 / nsumdigiHE6);
    }  // phi
  }    //eta
  //------------------------  2D-eta/phi-plot: R, averaged over depthes
  //======================================================================
  //======================================================================
  //cout<<"      R2D-eta/phi-plot: R, averaged over depthes *****" <<endl;
  c1x0->Clear();
  /////////////////
  c1x0->Divide(1, 1);
  c1x0->cd(1);
  TH2F *GefzRdigiHE42D = new TH2F("GefzRdigiHE42D", "", neta, -41., 41., nphi, 0., 72.);
  TH2F *GefzRdigiHE42D0 = new TH2F("GefzRdigiHE42D0", "", neta, -41., 41., nphi, 0., 72.);
  TH2F *GefzRdigiHE42DF = (TH2F *)GefzRdigiHE42D0->Clone("GefzRdigiHE42DF");
  for (int i = 0; i < ndepth; i++) {
    for (int jeta = 0; jeta < neta; jeta++) {
      for (int jphi = 0; jphi < nphi; jphi++) {
        double ccc1 = adigihe[i][jeta][jphi];
        int k2plot = jeta - 41;
        int kkk = k2plot;  //if(k2plot >0 ) kkk=k2plot+1; //-41 +41 !=0
        if (ccc1 != 0.) {
          GefzRdigiHE42D->Fill(kkk, jphi, ccc1);
          GefzRdigiHE42D0->Fill(kkk, jphi, 1.);
        }
      }
    }
  }
  GefzRdigiHE42DF->Divide(GefzRdigiHE42D, GefzRdigiHE42D0, 1, 1, "B");  // average A
  gPad->SetGridy();
  gPad->SetGridx();  //      gPad->SetLogz();
  GefzRdigiHE42DF->SetMarkerStyle(20);
  GefzRdigiHE42DF->SetMarkerSize(0.4);
  GefzRdigiHE42DF->GetZaxis()->SetLabelSize(0.08);
  GefzRdigiHE42DF->SetXTitle("<R>_depth       #eta  \b");
  GefzRdigiHE42DF->SetYTitle("      #phi \b");
  GefzRdigiHE42DF->SetZTitle("<R>_depth \b");
  GefzRdigiHE42DF->SetMarkerColor(2);
  GefzRdigiHE42DF->SetLineColor(
      0);  //      GefzRdigiHE42DF->SetMaximum(1.000);  //      GefzRdigiHE42DF->SetMinimum(1.0);
  GefzRdigiHE42DF->Draw("COLZ");
  /////////////////
  c1x0->Update();
  c1x0->Print("RdigiGeneralD2PhiSymmetryHE.png");
  c1x0->Clear();
  // clean-up
  if (GefzRdigiHE42D)
    delete GefzRdigiHE42D;
  if (GefzRdigiHE42D0)
    delete GefzRdigiHE42D0;
  if (GefzRdigiHE42DF)
    delete GefzRdigiHE42DF;
  //====================================================================== 1D plot: R vs phi , averaged over depthes & eta
  //======================================================================
  //cout<<"      1D plot: R vs phi , averaged over depthes & eta *****" <<endl;
  c1x1->Clear();
  /////////////////
  c1x1->Divide(1, 1);
  c1x1->cd(1);
  TH1F *GefzRdigiHE41D = new TH1F("GefzRdigiHE41D", "", nphi, 0., 72.);
  TH1F *GefzRdigiHE41D0 = new TH1F("GefzRdigiHE41D0", "", nphi, 0., 72.);
  TH1F *GefzRdigiHE41DF = (TH1F *)GefzRdigiHE41D0->Clone("GefzRdigiHE41DF");
  for (int jphi = 0; jphi < nphi; jphi++) {
    for (int jeta = 0; jeta < neta; jeta++) {
      for (int i = 0; i < ndepth; i++) {
        double ccc1 = adigihe[i][jeta][jphi];
        if (ccc1 != 0.) {
          GefzRdigiHE41D->Fill(jphi, ccc1);
          GefzRdigiHE41D0->Fill(jphi, 1.);
        }
      }
    }
  }
  GefzRdigiHE41DF->Divide(GefzRdigiHE41D, GefzRdigiHE41D0, 1, 1, "B");  // R averaged over depthes & eta
  GefzRdigiHE41D0->Sumw2();
  //    for (int jphi=1;jphi<73;jphi++) {GefzRdigiHE41DF->SetBinError(jphi,0.01);}
  gPad->SetGridy();
  gPad->SetGridx();  //      gPad->SetLogz();
  GefzRdigiHE41DF->SetMarkerStyle(20);
  GefzRdigiHE41DF->SetMarkerSize(1.4);
  GefzRdigiHE41DF->GetZaxis()->SetLabelSize(0.08);
  GefzRdigiHE41DF->SetXTitle("#phi  \b");
  GefzRdigiHE41DF->SetYTitle("  <R> \b");
  GefzRdigiHE41DF->SetZTitle("<R>_PHI  - AllDepthes \b");
  GefzRdigiHE41DF->SetMarkerColor(4);
  GefzRdigiHE41DF->SetLineColor(
      4);  //  GefzRdigiHE41DF->SetMinimum(0.8);     //      GefzRdigiHE41DF->SetMaximum(1.000);
  GefzRdigiHE41DF->Draw("Error");
  /////////////////
  c1x1->Update();
  c1x1->Print("RdigiGeneralD1PhiSymmetryHE.png");
  c1x1->Clear();
  // clean-up
  if (GefzRdigiHE41D)
    delete GefzRdigiHE41D;
  if (GefzRdigiHE41D0)
    delete GefzRdigiHE41D0;
  if (GefzRdigiHE41DF)
    delete GefzRdigiHE41DF;

  //========================================================================================== 4
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=1
  //cout<<"      1D plot: R vs phi , different eta,  depth=1 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEpositivedirectionDigi1 = 1;
  TH1F *h2CeffHEpositivedirectionDigi1 = new TH1F("h2CeffHEpositivedirectionDigi1", "", nphi, 0., 72.);
  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionDigi:
    if (jeta - 41 >= 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=1
      for (int i = 0; i < 1; i++) {
        TH1F *HEpositivedirectionDigi1 = (TH1F *)h2CeffHEpositivedirectionDigi1->Clone("twod1");
        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = adigihe[i][jeta][jphi];
          if (ccc1 != 0.) {
            HEpositivedirectionDigi1->Fill(jphi, ccc1);
            ccctest = 1.;  //HEpositivedirectionDigi1->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //	  cout<<"444        kcountHEpositivedirectionDigi1   =     "<<kcountHEpositivedirectionDigi1  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEpositivedirectionDigi1);
          HEpositivedirectionDigi1->SetMarkerStyle(20);
          HEpositivedirectionDigi1->SetMarkerSize(0.4);
          HEpositivedirectionDigi1->GetYaxis()->SetLabelSize(0.04);
          HEpositivedirectionDigi1->SetXTitle("HEpositivedirectionDigi1 \b");
          HEpositivedirectionDigi1->SetMarkerColor(2);
          HEpositivedirectionDigi1->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEpositivedirectionDigi1 == 1)
            HEpositivedirectionDigi1->SetXTitle("R for HE+ jeta = 17; depth = 1 \b");
          if (kcountHEpositivedirectionDigi1 == 2)
            HEpositivedirectionDigi1->SetXTitle("R for HE+ jeta = 18; depth = 1 \b");
          if (kcountHEpositivedirectionDigi1 == 3)
            HEpositivedirectionDigi1->SetXTitle("R for HE+ jeta = 19; depth = 1 \b");
          if (kcountHEpositivedirectionDigi1 == 4)
            HEpositivedirectionDigi1->SetXTitle("R for HE+ jeta = 20; depth = 1 \b");
          if (kcountHEpositivedirectionDigi1 == 5)
            HEpositivedirectionDigi1->SetXTitle("R for HE+ jeta = 21; depth = 1 \b");
          if (kcountHEpositivedirectionDigi1 == 6)
            HEpositivedirectionDigi1->SetXTitle("R for HE+ jeta = 22; depth = 1 \b");
          if (kcountHEpositivedirectionDigi1 == 7)
            HEpositivedirectionDigi1->SetXTitle("R for HE+ jeta = 23; depth = 1 \b");
          if (kcountHEpositivedirectionDigi1 == 8)
            HEpositivedirectionDigi1->SetXTitle("R for HE+ jeta = 24; depth = 1 \b");
          if (kcountHEpositivedirectionDigi1 == 9)
            HEpositivedirectionDigi1->SetXTitle("R for HE+ jeta = 25; depth = 1 \b");
          if (kcountHEpositivedirectionDigi1 == 10)
            HEpositivedirectionDigi1->SetXTitle("R for HE+ jeta = 26; depth = 1 \b");
          if (kcountHEpositivedirectionDigi1 == 11)
            HEpositivedirectionDigi1->SetXTitle("R for HE+ jeta = 27; depth = 1 \b");
          if (kcountHEpositivedirectionDigi1 == 12)
            HEpositivedirectionDigi1->SetXTitle("R for HE+ jeta = 28; depth = 1 \b");
          HEpositivedirectionDigi1->Draw("Error");
          kcountHEpositivedirectionDigi1++;
          if (kcountHEpositivedirectionDigi1 > 12)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RdigiPositiveDirectionhistD1PhiSymmetryDepth1HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEpositivedirectionDigi1)
    delete h2CeffHEpositivedirectionDigi1;

  //========================================================================================== 5
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=2
  //  cout<<"      1D plot: R vs phi , different eta,  depth=2 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEpositivedirectionDigi2 = 1;
  TH1F *h2CeffHEpositivedirectionDigi2 = new TH1F("h2CeffHEpositivedirectionDigi2", "", nphi, 0., 72.);
  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionDigi:
    if (jeta - 41 >= 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=2
      for (int i = 1; i < 2; i++) {
        TH1F *HEpositivedirectionDigi2 = (TH1F *)h2CeffHEpositivedirectionDigi2->Clone("twod1");
        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = adigihe[i][jeta][jphi];
          if (ccc1 != 0.) {
            HEpositivedirectionDigi2->Fill(jphi, ccc1);
            ccctest = 1.;  //HEpositivedirectionDigi2->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"555        kcountHEpositivedirectionDigi2   =     "<<kcountHEpositivedirectionDigi2  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEpositivedirectionDigi2);
          HEpositivedirectionDigi2->SetMarkerStyle(20);
          HEpositivedirectionDigi2->SetMarkerSize(0.4);
          HEpositivedirectionDigi2->GetYaxis()->SetLabelSize(0.04);
          HEpositivedirectionDigi2->SetXTitle("HEpositivedirectionDigi2 \b");
          HEpositivedirectionDigi2->SetMarkerColor(2);
          HEpositivedirectionDigi2->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEpositivedirectionDigi2 == 1)
            HEpositivedirectionDigi2->SetXTitle("R for HE+ jeta = 16; depth = 2 \b");
          if (kcountHEpositivedirectionDigi2 == 2)
            HEpositivedirectionDigi2->SetXTitle("R for HE+ jeta = 17; depth = 2 \b");
          if (kcountHEpositivedirectionDigi2 == 3)
            HEpositivedirectionDigi2->SetXTitle("R for HE+ jeta = 18; depth = 2 \b");
          if (kcountHEpositivedirectionDigi2 == 4)
            HEpositivedirectionDigi2->SetXTitle("R for HE+ jeta = 19; depth = 2 \b");
          if (kcountHEpositivedirectionDigi2 == 5)
            HEpositivedirectionDigi2->SetXTitle("R for HE+ jeta = 20; depth = 2 \b");
          if (kcountHEpositivedirectionDigi2 == 6)
            HEpositivedirectionDigi2->SetXTitle("R for HE+ jeta = 21; depth = 2 \b");
          if (kcountHEpositivedirectionDigi2 == 7)
            HEpositivedirectionDigi2->SetXTitle("R for HE+ jeta = 22; depth = 2 \b");
          if (kcountHEpositivedirectionDigi2 == 8)
            HEpositivedirectionDigi2->SetXTitle("R for HE+ jeta = 23; depth = 2 \b");
          if (kcountHEpositivedirectionDigi2 == 9)
            HEpositivedirectionDigi2->SetXTitle("R for HE+ jeta = 24; depth = 2 \b");
          if (kcountHEpositivedirectionDigi2 == 10)
            HEpositivedirectionDigi2->SetXTitle("R for HE+ jeta = 25; depth = 2 \b");
          if (kcountHEpositivedirectionDigi2 == 11)
            HEpositivedirectionDigi2->SetXTitle("R for HE+ jeta = 26; depth = 2 \b");
          if (kcountHEpositivedirectionDigi2 == 12)
            HEpositivedirectionDigi2->SetXTitle("R for HE+ jeta = 27; depth = 2 \b");
          if (kcountHEpositivedirectionDigi2 == 13)
            HEpositivedirectionDigi2->SetXTitle("R for HE+ jeta = 28; depth = 2 \b");
          HEpositivedirectionDigi2->Draw("Error");
          kcountHEpositivedirectionDigi2++;
          if (kcountHEpositivedirectionDigi2 > 13)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RdigiPositiveDirectionhistD1PhiSymmetryDepth2HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEpositivedirectionDigi2)
    delete h2CeffHEpositivedirectionDigi2;
  //========================================================================================== 6
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=3
  //cout<<"      1D plot: R vs phi , different eta,  depth=3 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEpositivedirectionDigi3 = 1;
  TH1F *h2CeffHEpositivedirectionDigi3 = new TH1F("h2CeffHEpositivedirectionDigi3", "", nphi, 0., 72.);
  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionDigi:
    if (jeta - 41 >= 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=3
      for (int i = 2; i < 3; i++) {
        TH1F *HEpositivedirectionDigi3 = (TH1F *)h2CeffHEpositivedirectionDigi3->Clone("twod1");
        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = adigihe[i][jeta][jphi];
          if (ccc1 != 0.) {
            HEpositivedirectionDigi3->Fill(jphi, ccc1);
            ccctest = 1.;  //HEpositivedirectionDigi3->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"666        kcountHEpositivedirectionDigi3   =     "<<kcountHEpositivedirectionDigi3  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEpositivedirectionDigi3);
          HEpositivedirectionDigi3->SetMarkerStyle(20);
          HEpositivedirectionDigi3->SetMarkerSize(0.4);
          HEpositivedirectionDigi3->GetYaxis()->SetLabelSize(0.04);
          HEpositivedirectionDigi3->SetXTitle("HEpositivedirectionDigi3 \b");
          HEpositivedirectionDigi3->SetMarkerColor(2);
          HEpositivedirectionDigi3->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEpositivedirectionDigi3 == 1)
            HEpositivedirectionDigi3->SetXTitle("R for HE+ jeta = 16; depth = 3 \b");
          if (kcountHEpositivedirectionDigi3 == 2)
            HEpositivedirectionDigi3->SetXTitle("R for HE+ jeta = 17; depth = 3 \b");
          if (kcountHEpositivedirectionDigi3 == 3)
            HEpositivedirectionDigi3->SetXTitle("R for HE+ jeta = 18; depth = 3 \b");
          if (kcountHEpositivedirectionDigi3 == 4)
            HEpositivedirectionDigi3->SetXTitle("R for HE+ jeta = 19; depth = 3 \b");
          if (kcountHEpositivedirectionDigi3 == 5)
            HEpositivedirectionDigi3->SetXTitle("R for HE+ jeta = 20; depth = 3 \b");
          if (kcountHEpositivedirectionDigi3 == 6)
            HEpositivedirectionDigi3->SetXTitle("R for HE+ jeta = 21; depth = 3 \b");
          if (kcountHEpositivedirectionDigi3 == 7)
            HEpositivedirectionDigi3->SetXTitle("R for HE+ jeta = 22; depth = 3 \b");
          if (kcountHEpositivedirectionDigi3 == 8)
            HEpositivedirectionDigi3->SetXTitle("R for HE+ jeta = 23; depth = 3 \b");
          if (kcountHEpositivedirectionDigi3 == 9)
            HEpositivedirectionDigi3->SetXTitle("R for HE+ jeta = 24; depth = 3 \b");
          if (kcountHEpositivedirectionDigi3 == 10)
            HEpositivedirectionDigi3->SetXTitle("R for HE+ jeta = 25; depth = 3 \b");
          if (kcountHEpositivedirectionDigi3 == 11)
            HEpositivedirectionDigi3->SetXTitle("R for HE+ jeta = 26; depth = 3 \b");
          if (kcountHEpositivedirectionDigi3 == 12)
            HEpositivedirectionDigi3->SetXTitle("R for HE+ jeta = 27; depth = 3 \b");
          if (kcountHEpositivedirectionDigi3 == 13)
            HEpositivedirectionDigi3->SetXTitle("R for HE+ jeta = 28; depth = 3 \b");
          HEpositivedirectionDigi3->Draw("Error");
          kcountHEpositivedirectionDigi3++;
          if (kcountHEpositivedirectionDigi3 > 13)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RdigiPositiveDirectionhistD1PhiSymmetryDepth3HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEpositivedirectionDigi3)
    delete h2CeffHEpositivedirectionDigi3;
  //========================================================================================== 7
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=4
  //cout<<"      1D plot: R vs phi , different eta,  depth=4 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEpositivedirectionDigi4 = 1;
  TH1F *h2CeffHEpositivedirectionDigi4 = new TH1F("h2CeffHEpositivedirectionDigi4", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionDigi:
    if (jeta - 41 >= 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=4
      for (int i = 3; i < 4; i++) {
        TH1F *HEpositivedirectionDigi4 = (TH1F *)h2CeffHEpositivedirectionDigi4->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = adigihe[i][jeta][jphi];
          if (ccc1 != 0.) {
            HEpositivedirectionDigi4->Fill(jphi, ccc1);
            ccctest = 1.;  //HEpositivedirectionDigi4->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"777        kcountHEpositivedirectionDigi4   =     "<<kcountHEpositivedirectionDigi4  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEpositivedirectionDigi4);
          HEpositivedirectionDigi4->SetMarkerStyle(20);
          HEpositivedirectionDigi4->SetMarkerSize(0.4);
          HEpositivedirectionDigi4->GetYaxis()->SetLabelSize(0.04);
          HEpositivedirectionDigi4->SetXTitle("HEpositivedirectionDigi4 \b");
          HEpositivedirectionDigi4->SetMarkerColor(2);
          HEpositivedirectionDigi4->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEpositivedirectionDigi4 == 1)
            HEpositivedirectionDigi4->SetXTitle("R for HE+ jeta = 15; depth = 4 \b");
          if (kcountHEpositivedirectionDigi4 == 2)
            HEpositivedirectionDigi4->SetXTitle("R for HE+ jeta = 17; depth = 4 \b");
          if (kcountHEpositivedirectionDigi4 == 3)
            HEpositivedirectionDigi4->SetXTitle("R for HE+ jeta = 18; depth = 4 \b");
          if (kcountHEpositivedirectionDigi4 == 4)
            HEpositivedirectionDigi4->SetXTitle("R for HE+ jeta = 19; depth = 4 \b");
          if (kcountHEpositivedirectionDigi4 == 5)
            HEpositivedirectionDigi4->SetXTitle("R for HE+ jeta = 20; depth = 4 \b");
          if (kcountHEpositivedirectionDigi4 == 6)
            HEpositivedirectionDigi4->SetXTitle("R for HE+ jeta = 21; depth = 4 \b");
          if (kcountHEpositivedirectionDigi4 == 7)
            HEpositivedirectionDigi4->SetXTitle("R for HE+ jeta = 22; depth = 4 \b");
          if (kcountHEpositivedirectionDigi4 == 8)
            HEpositivedirectionDigi4->SetXTitle("R for HE+ jeta = 23; depth = 4 \b");
          if (kcountHEpositivedirectionDigi4 == 9)
            HEpositivedirectionDigi4->SetXTitle("R for HE+ jeta = 24; depth = 4 \b");
          if (kcountHEpositivedirectionDigi4 == 10)
            HEpositivedirectionDigi4->SetXTitle("R for HE+ jeta = 25; depth = 4 \b");
          if (kcountHEpositivedirectionDigi4 == 11)
            HEpositivedirectionDigi4->SetXTitle("R for HE+ jeta = 26; depth = 4 \b");
          if (kcountHEpositivedirectionDigi4 == 12)
            HEpositivedirectionDigi4->SetXTitle("R for HE+ jeta = 27; depth = 4 \b");
          HEpositivedirectionDigi4->Draw("Error");
          kcountHEpositivedirectionDigi4++;
          if (kcountHEpositivedirectionDigi4 > 12)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RdigiPositiveDirectionhistD1PhiSymmetryDepth4HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEpositivedirectionDigi4)
    delete h2CeffHEpositivedirectionDigi4;
  //========================================================================================== 8
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=5
  //cout<<"      1D plot: R vs phi , different eta,  depth=5 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEpositivedirectionDigi5 = 1;
  TH1F *h2CeffHEpositivedirectionDigi5 = new TH1F("h2CeffHEpositivedirectionDigi5", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionDigi:
    if (jeta - 41 >= 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=5
      for (int i = 4; i < 5; i++) {
        TH1F *HEpositivedirectionDigi5 = (TH1F *)h2CeffHEpositivedirectionDigi5->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          //	       cout<<"888  initial      kcountHEpositivedirectionDigi5   =     "<<kcountHEpositivedirectionDigi5  <<"   jeta-41=     "<< jeta-41 <<"   jphi=     "<< jphi <<"   adigihe[i][jeta][jphi]=     "<< adigihe[i][jeta][jphi] <<"  depth=     "<< i <<endl;

          double ccc1 = adigihe[i][jeta][jphi];
          if (ccc1 != 0.) {
            HEpositivedirectionDigi5->Fill(jphi, ccc1);
            ccctest = 1.;  //HEpositivedirectionDigi5->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"888        kcountHEpositivedirectionDigi5   =     "<<kcountHEpositivedirectionDigi5  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEpositivedirectionDigi5);
          HEpositivedirectionDigi5->SetMarkerStyle(20);
          HEpositivedirectionDigi5->SetMarkerSize(0.4);
          HEpositivedirectionDigi5->GetYaxis()->SetLabelSize(0.04);
          HEpositivedirectionDigi5->SetXTitle("HEpositivedirectionDigi5 \b");
          HEpositivedirectionDigi5->SetMarkerColor(2);
          HEpositivedirectionDigi5->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEpositivedirectionDigi5 == 1)
            HEpositivedirectionDigi5->SetXTitle("R for HE+ jeta = 17; depth = 5 \b");
          if (kcountHEpositivedirectionDigi5 == 2)
            HEpositivedirectionDigi5->SetXTitle("R for HE+ jeta = 18; depth = 5 \b");
          if (kcountHEpositivedirectionDigi5 == 3)
            HEpositivedirectionDigi5->SetXTitle("R for HE+ jeta = 19; depth = 5 \b");
          if (kcountHEpositivedirectionDigi5 == 4)
            HEpositivedirectionDigi5->SetXTitle("R for HE+ jeta = 20; depth = 5 \b");
          if (kcountHEpositivedirectionDigi5 == 5)
            HEpositivedirectionDigi5->SetXTitle("R for HE+ jeta = 21; depth = 5 \b");
          if (kcountHEpositivedirectionDigi5 == 6)
            HEpositivedirectionDigi5->SetXTitle("R for HE+ jeta = 22; depth = 5 \b");
          if (kcountHEpositivedirectionDigi5 == 7)
            HEpositivedirectionDigi5->SetXTitle("R for HE+ jeta = 23; depth = 5 \b");
          if (kcountHEpositivedirectionDigi5 == 8)
            HEpositivedirectionDigi5->SetXTitle("R for HE+ jeta = 24; depth = 5 \b");
          if (kcountHEpositivedirectionDigi5 == 9)
            HEpositivedirectionDigi5->SetXTitle("R for HE+ jeta = 25; depth = 5 \b");
          if (kcountHEpositivedirectionDigi5 == 10)
            HEpositivedirectionDigi5->SetXTitle("R for HE+ jeta = 26; depth = 5 \b");
          if (kcountHEpositivedirectionDigi5 == 11)
            HEpositivedirectionDigi5->SetXTitle("R for HE+ jeta = 27; depth = 5 \b");
          HEpositivedirectionDigi5->Draw("Error");
          kcountHEpositivedirectionDigi5++;
          if (kcountHEpositivedirectionDigi5 > 11)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RdigiPositiveDirectionhistD1PhiSymmetryDepth5HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEpositivedirectionDigi5)
    delete h2CeffHEpositivedirectionDigi5;
  //========================================================================================== 9
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=6
  //cout<<"      1D plot: R vs phi , different eta,  depth=6 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEpositivedirectionDigi6 = 1;
  TH1F *h2CeffHEpositivedirectionDigi6 = new TH1F("h2CeffHEpositivedirectionDigi6", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionDigi:
    if (jeta - 41 >= 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=6
      for (int i = 5; i < 6; i++) {
        TH1F *HEpositivedirectionDigi6 = (TH1F *)h2CeffHEpositivedirectionDigi6->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = adigihe[i][jeta][jphi];
          if (ccc1 != 0.) {
            HEpositivedirectionDigi6->Fill(jphi, ccc1);
            ccctest = 1.;  //HEpositivedirectionDigi6->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"999        kcountHEpositivedirectionDigi6   =     "<<kcountHEpositivedirectionDigi6  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEpositivedirectionDigi6);
          HEpositivedirectionDigi6->SetMarkerStyle(20);
          HEpositivedirectionDigi6->SetMarkerSize(0.4);
          HEpositivedirectionDigi6->GetYaxis()->SetLabelSize(0.04);
          HEpositivedirectionDigi6->SetXTitle("HEpositivedirectionDigi6 \b");
          HEpositivedirectionDigi6->SetMarkerColor(2);
          HEpositivedirectionDigi6->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEpositivedirectionDigi6 == 1)
            HEpositivedirectionDigi6->SetXTitle("R for HE+ jeta = 18; depth = 6 \b");
          if (kcountHEpositivedirectionDigi6 == 2)
            HEpositivedirectionDigi6->SetXTitle("R for HE+ jeta = 19; depth = 6 \b");
          if (kcountHEpositivedirectionDigi6 == 3)
            HEpositivedirectionDigi6->SetXTitle("R for HE+ jeta = 20; depth = 6 \b");
          if (kcountHEpositivedirectionDigi6 == 4)
            HEpositivedirectionDigi6->SetXTitle("R for HE+ jeta = 21; depth = 6 \b");
          if (kcountHEpositivedirectionDigi6 == 5)
            HEpositivedirectionDigi6->SetXTitle("R for HE+ jeta = 22; depth = 6 \b");
          if (kcountHEpositivedirectionDigi6 == 6)
            HEpositivedirectionDigi6->SetXTitle("R for HE+ jeta = 23; depth = 6 \b");
          if (kcountHEpositivedirectionDigi6 == 7)
            HEpositivedirectionDigi6->SetXTitle("R for HE+ jeta = 24; depth = 6 \b");
          if (kcountHEpositivedirectionDigi6 == 8)
            HEpositivedirectionDigi6->SetXTitle("R for HE+ jeta = 25; depth = 6 \b");
          if (kcountHEpositivedirectionDigi6 == 9)
            HEpositivedirectionDigi6->SetXTitle("R for HE+ jeta = 26; depth = 6 \b");
          if (kcountHEpositivedirectionDigi6 == 10)
            HEpositivedirectionDigi6->SetXTitle("R for HE+ jeta = 27; depth = 6 \b");
          HEpositivedirectionDigi6->Draw("Error");
          kcountHEpositivedirectionDigi6++;
          if (kcountHEpositivedirectionDigi6 > 10)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RdigiPositiveDirectionhistD1PhiSymmetryDepth6HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEpositivedirectionDigi6)
    delete h2CeffHEpositivedirectionDigi6;
  //========================================================================================== 10
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=7
  //cout<<"      1D plot: R vs phi , different eta,  depth=7 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEpositivedirectionDigi7 = 1;
  TH1F *h2CeffHEpositivedirectionDigi7 = new TH1F("h2CeffHEpositivedirectionDigi7", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionDigi:
    if (jeta - 41 >= 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=7
      for (int i = 6; i < 7; i++) {
        TH1F *HEpositivedirectionDigi7 = (TH1F *)h2CeffHEpositivedirectionDigi7->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = adigihe[i][jeta][jphi];
          if (ccc1 != 0.) {
            HEpositivedirectionDigi7->Fill(jphi, ccc1);
            ccctest = 1.;  //HEpositivedirectionDigi7->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1010       kcountHEpositivedirectionDigi7   =     "<<kcountHEpositivedirectionDigi7  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEpositivedirectionDigi7);
          HEpositivedirectionDigi7->SetMarkerStyle(20);
          HEpositivedirectionDigi7->SetMarkerSize(0.4);
          HEpositivedirectionDigi7->GetYaxis()->SetLabelSize(0.04);
          HEpositivedirectionDigi7->SetXTitle("HEpositivedirectionDigi7 \b");
          HEpositivedirectionDigi7->SetMarkerColor(2);
          HEpositivedirectionDigi7->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEpositivedirectionDigi7 == 1)
            HEpositivedirectionDigi7->SetXTitle("R for HE+ jeta = 25; depth = 7 \b");
          if (kcountHEpositivedirectionDigi7 == 2)
            HEpositivedirectionDigi7->SetXTitle("R for HE+ jeta = 26; depth = 7 \b");
          if (kcountHEpositivedirectionDigi7 == 3)
            HEpositivedirectionDigi7->SetXTitle("R for HE+ jeta = 27; depth = 7 \b");
          HEpositivedirectionDigi7->Draw("Error");
          kcountHEpositivedirectionDigi7++;
          if (kcountHEpositivedirectionDigi7 > 3)
            break;  //
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RdigiPositiveDirectionhistD1PhiSymmetryDepth7HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEpositivedirectionDigi7)
    delete h2CeffHEpositivedirectionDigi7;

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //========================================================================================== 1114
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=1
  //cout<<"      1D plot: R vs phi , different eta,  depth=1 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEnegativedirectionDigi1 = 1;
  TH1F *h2CeffHEnegativedirectionDigi1 = new TH1F("h2CeffHEnegativedirectionDigi1", "", nphi, 0., 72.);
  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionDigi:
    if (jeta - 41 < 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=1
      for (int i = 0; i < 1; i++) {
        TH1F *HEnegativedirectionDigi1 = (TH1F *)h2CeffHEnegativedirectionDigi1->Clone("twod1");
        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = adigihe[i][jeta][jphi];
          if (ccc1 != 0.) {
            HEnegativedirectionDigi1->Fill(jphi, ccc1);
            ccctest = 1.;  //HEnegativedirectionDigi1->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //	  cout<<"444        kcountHEnegativedirectionDigi1   =     "<<kcountHEnegativedirectionDigi1  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEnegativedirectionDigi1);
          HEnegativedirectionDigi1->SetMarkerStyle(20);
          HEnegativedirectionDigi1->SetMarkerSize(0.4);
          HEnegativedirectionDigi1->GetYaxis()->SetLabelSize(0.04);
          HEnegativedirectionDigi1->SetXTitle("HEnegativedirectionDigi1 \b");
          HEnegativedirectionDigi1->SetMarkerColor(2);
          HEnegativedirectionDigi1->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEnegativedirectionDigi1 == 1)
            HEnegativedirectionDigi1->SetXTitle("R for HE- jeta =-29; depth = 1 \b");
          if (kcountHEnegativedirectionDigi1 == 2)
            HEnegativedirectionDigi1->SetXTitle("R for HE- jeta =-28; depth = 1 \b");
          if (kcountHEnegativedirectionDigi1 == 3)
            HEnegativedirectionDigi1->SetXTitle("R for HE- jeta =-27; depth = 1 \b");
          if (kcountHEnegativedirectionDigi1 == 4)
            HEnegativedirectionDigi1->SetXTitle("R for HE- jeta =-26; depth = 1 \b");
          if (kcountHEnegativedirectionDigi1 == 5)
            HEnegativedirectionDigi1->SetXTitle("R for HE- jeta =-25; depth = 1 \b");
          if (kcountHEnegativedirectionDigi1 == 6)
            HEnegativedirectionDigi1->SetXTitle("R for HE- jeta =-24; depth = 1 \b");
          if (kcountHEnegativedirectionDigi1 == 7)
            HEnegativedirectionDigi1->SetXTitle("R for HE- jeta =-23; depth = 1 \b");
          if (kcountHEnegativedirectionDigi1 == 8)
            HEnegativedirectionDigi1->SetXTitle("R for HE- jeta =-22; depth = 1 \b");
          if (kcountHEnegativedirectionDigi1 == 9)
            HEnegativedirectionDigi1->SetXTitle("R for HE- jeta =-21; depth = 1 \b");
          if (kcountHEnegativedirectionDigi1 == 10)
            HEnegativedirectionDigi1->SetXTitle("R for HE- jeta =-20; depth = 1 \b");
          if (kcountHEnegativedirectionDigi1 == 11)
            HEnegativedirectionDigi1->SetXTitle("R for HE- jeta =-19; depth = 1 \b");
          if (kcountHEnegativedirectionDigi1 == 12)
            HEnegativedirectionDigi1->SetXTitle("R for HE- jeta =-18; depth = 1 \b");
          HEnegativedirectionDigi1->Draw("Error");
          kcountHEnegativedirectionDigi1++;
          if (kcountHEnegativedirectionDigi1 > 12)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 < 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RdigiNegativeDirectionhistD1PhiSymmetryDepth1HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEnegativedirectionDigi1)
    delete h2CeffHEnegativedirectionDigi1;

  //========================================================================================== 1115
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=2
  //  cout<<"      1D plot: R vs phi , different eta,  depth=2 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEnegativedirectionDigi2 = 1;
  TH1F *h2CeffHEnegativedirectionDigi2 = new TH1F("h2CeffHEnegativedirectionDigi2", "", nphi, 0., 72.);
  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionDigi:
    if (jeta - 41 < 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=2
      for (int i = 1; i < 2; i++) {
        TH1F *HEnegativedirectionDigi2 = (TH1F *)h2CeffHEnegativedirectionDigi2->Clone("twod1");
        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = adigihe[i][jeta][jphi];
          if (ccc1 != 0.) {
            HEnegativedirectionDigi2->Fill(jphi, ccc1);
            ccctest = 1.;  //HEnegativedirectionDigi2->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"555        kcountHEnegativedirectionDigi2   =     "<<kcountHEnegativedirectionDigi2  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEnegativedirectionDigi2);
          HEnegativedirectionDigi2->SetMarkerStyle(20);
          HEnegativedirectionDigi2->SetMarkerSize(0.4);
          HEnegativedirectionDigi2->GetYaxis()->SetLabelSize(0.04);
          HEnegativedirectionDigi2->SetXTitle("HEnegativedirectionDigi2 \b");
          HEnegativedirectionDigi2->SetMarkerColor(2);
          HEnegativedirectionDigi2->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEnegativedirectionDigi2 == 1)
            HEnegativedirectionDigi2->SetXTitle("R for HE- jeta =-29; depth = 2 \b");
          if (kcountHEnegativedirectionDigi2 == 2)
            HEnegativedirectionDigi2->SetXTitle("R for HE- jeta =-28; depth = 2 \b");
          if (kcountHEnegativedirectionDigi2 == 3)
            HEnegativedirectionDigi2->SetXTitle("R for HE- jeta =-27; depth = 2 \b");
          if (kcountHEnegativedirectionDigi2 == 4)
            HEnegativedirectionDigi2->SetXTitle("R for HE- jeta =-26; depth = 2 \b");
          if (kcountHEnegativedirectionDigi2 == 5)
            HEnegativedirectionDigi2->SetXTitle("R for HE- jeta =-25; depth = 2 \b");
          if (kcountHEnegativedirectionDigi2 == 6)
            HEnegativedirectionDigi2->SetXTitle("R for HE- jeta =-24; depth = 2 \b");
          if (kcountHEnegativedirectionDigi2 == 7)
            HEnegativedirectionDigi2->SetXTitle("R for HE- jeta =-23; depth = 2 \b");
          if (kcountHEnegativedirectionDigi2 == 8)
            HEnegativedirectionDigi2->SetXTitle("R for HE- jeta =-22; depth = 2 \b");
          if (kcountHEnegativedirectionDigi2 == 9)
            HEnegativedirectionDigi2->SetXTitle("R for HE- jeta =-21; depth = 2 \b");
          if (kcountHEnegativedirectionDigi2 == 10)
            HEnegativedirectionDigi2->SetXTitle("R for HE- jeta =-20; depth = 2 \b");
          if (kcountHEnegativedirectionDigi2 == 11)
            HEnegativedirectionDigi2->SetXTitle("R for HE- jeta =-19; depth = 2 \b");
          if (kcountHEnegativedirectionDigi2 == 12)
            HEnegativedirectionDigi2->SetXTitle("R for HE- jeta =-18; depth = 2 \b");
          if (kcountHEnegativedirectionDigi2 == 13)
            HEnegativedirectionDigi2->SetXTitle("R for HE- jeta =-17; depth = 2 \b");
          HEnegativedirectionDigi2->Draw("Error");
          kcountHEnegativedirectionDigi2++;
          if (kcountHEnegativedirectionDigi2 > 13)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 < 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RdigiNegativeDirectionhistD1PhiSymmetryDepth2HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEnegativedirectionDigi2)
    delete h2CeffHEnegativedirectionDigi2;
  //========================================================================================== 1116
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=3
  //cout<<"      1D plot: R vs phi , different eta,  depth=3 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEnegativedirectionDigi3 = 1;
  TH1F *h2CeffHEnegativedirectionDigi3 = new TH1F("h2CeffHEnegativedirectionDigi3", "", nphi, 0., 72.);
  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionDigi:
    if (jeta - 41 < 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=3
      for (int i = 2; i < 3; i++) {
        TH1F *HEnegativedirectionDigi3 = (TH1F *)h2CeffHEnegativedirectionDigi3->Clone("twod1");
        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = adigihe[i][jeta][jphi];
          if (ccc1 != 0.) {
            HEnegativedirectionDigi3->Fill(jphi, ccc1);
            ccctest = 1.;  //HEnegativedirectionDigi3->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"666        kcountHEnegativedirectionDigi3   =     "<<kcountHEnegativedirectionDigi3  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEnegativedirectionDigi3);
          HEnegativedirectionDigi3->SetMarkerStyle(20);
          HEnegativedirectionDigi3->SetMarkerSize(0.4);
          HEnegativedirectionDigi3->GetYaxis()->SetLabelSize(0.04);
          HEnegativedirectionDigi3->SetXTitle("HEnegativedirectionDigi3 \b");
          HEnegativedirectionDigi3->SetMarkerColor(2);
          HEnegativedirectionDigi3->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEnegativedirectionDigi3 == 1)
            HEnegativedirectionDigi3->SetXTitle("R for HE- jeta =-29; depth = 3 \b");
          if (kcountHEnegativedirectionDigi3 == 2)
            HEnegativedirectionDigi3->SetXTitle("R for HE- jeta =-28; depth = 3 \b");
          if (kcountHEnegativedirectionDigi3 == 3)
            HEnegativedirectionDigi3->SetXTitle("R for HE- jeta =-27; depth = 3 \b");
          if (kcountHEnegativedirectionDigi3 == 4)
            HEnegativedirectionDigi3->SetXTitle("R for HE- jeta =-26; depth = 3 \b");
          if (kcountHEnegativedirectionDigi3 == 5)
            HEnegativedirectionDigi3->SetXTitle("R for HE- jeta =-25; depth = 3 \b");
          if (kcountHEnegativedirectionDigi3 == 6)
            HEnegativedirectionDigi3->SetXTitle("R for HE- jeta =-24; depth = 3 \b");
          if (kcountHEnegativedirectionDigi3 == 7)
            HEnegativedirectionDigi3->SetXTitle("R for HE- jeta =-23; depth = 3 \b");
          if (kcountHEnegativedirectionDigi3 == 8)
            HEnegativedirectionDigi3->SetXTitle("R for HE- jeta =-22; depth = 3 \b");
          if (kcountHEnegativedirectionDigi3 == 9)
            HEnegativedirectionDigi3->SetXTitle("R for HE- jeta =-21; depth = 3 \b");
          if (kcountHEnegativedirectionDigi3 == 10)
            HEnegativedirectionDigi3->SetXTitle("R for HE- jeta =-20; depth = 3 \b");
          if (kcountHEnegativedirectionDigi3 == 11)
            HEnegativedirectionDigi3->SetXTitle("R for HE- jeta =-19; depth = 3 \b");
          if (kcountHEnegativedirectionDigi3 == 12)
            HEnegativedirectionDigi3->SetXTitle("R for HE- jeta =-18; depth = 3 \b");
          if (kcountHEnegativedirectionDigi3 == 13)
            HEnegativedirectionDigi3->SetXTitle("R for HE- jeta =-17; depth = 3 \b");
          HEnegativedirectionDigi3->Draw("Error");
          kcountHEnegativedirectionDigi3++;
          if (kcountHEnegativedirectionDigi3 > 13)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 < 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RdigiNegativeDirectionhistD1PhiSymmetryDepth3HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEnegativedirectionDigi3)
    delete h2CeffHEnegativedirectionDigi3;
  //========================================================================================== 1117
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=4
  //cout<<"      1D plot: R vs phi , different eta,  depth=4 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEnegativedirectionDigi4 = 1;
  TH1F *h2CeffHEnegativedirectionDigi4 = new TH1F("h2CeffHEnegativedirectionDigi4", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionDigi:
    if (jeta - 41 < 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=4
      for (int i = 3; i < 4; i++) {
        TH1F *HEnegativedirectionDigi4 = (TH1F *)h2CeffHEnegativedirectionDigi4->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = adigihe[i][jeta][jphi];
          if (ccc1 != 0.) {
            HEnegativedirectionDigi4->Fill(jphi, ccc1);
            ccctest = 1.;  //HEnegativedirectionDigi4->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"777        kcountHEnegativedirectionDigi4   =     "<<kcountHEnegativedirectionDigi4  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEnegativedirectionDigi4);
          HEnegativedirectionDigi4->SetMarkerStyle(20);
          HEnegativedirectionDigi4->SetMarkerSize(0.4);
          HEnegativedirectionDigi4->GetYaxis()->SetLabelSize(0.04);
          HEnegativedirectionDigi4->SetXTitle("HEnegativedirectionDigi4 \b");
          HEnegativedirectionDigi4->SetMarkerColor(2);
          HEnegativedirectionDigi4->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEnegativedirectionDigi4 == 1)
            HEnegativedirectionDigi4->SetXTitle("R for HE- jeta =-28; depth = 4 \b");
          if (kcountHEnegativedirectionDigi4 == 2)
            HEnegativedirectionDigi4->SetXTitle("R for HE- jeta =-27; depth = 4 \b");
          if (kcountHEnegativedirectionDigi4 == 3)
            HEnegativedirectionDigi4->SetXTitle("R for HE- jeta =-26; depth = 4 \b");
          if (kcountHEnegativedirectionDigi4 == 4)
            HEnegativedirectionDigi4->SetXTitle("R for HE- jeta =-25; depth = 4 \b");
          if (kcountHEnegativedirectionDigi4 == 5)
            HEnegativedirectionDigi4->SetXTitle("R for HE- jeta =-24; depth = 4 \b");
          if (kcountHEnegativedirectionDigi4 == 6)
            HEnegativedirectionDigi4->SetXTitle("R for HE- jeta =-23; depth = 4 \b");
          if (kcountHEnegativedirectionDigi4 == 7)
            HEnegativedirectionDigi4->SetXTitle("R for HE- jeta =-22; depth = 4 \b");
          if (kcountHEnegativedirectionDigi4 == 8)
            HEnegativedirectionDigi4->SetXTitle("R for HE- jeta =-21; depth = 4 \b");
          if (kcountHEnegativedirectionDigi4 == 9)
            HEnegativedirectionDigi4->SetXTitle("R for HE- jeta =-20; depth = 4 \b");
          if (kcountHEnegativedirectionDigi4 == 10)
            HEnegativedirectionDigi4->SetXTitle("R for HE- jeta =-19; depth = 4 \b");
          if (kcountHEnegativedirectionDigi4 == 11)
            HEnegativedirectionDigi4->SetXTitle("R for HE- jeta =-18; depth = 4 \b");
          if (kcountHEnegativedirectionDigi4 == 12)
            HEnegativedirectionDigi4->SetXTitle("R for HE- jeta =-16; depth = 4 \b");
          HEnegativedirectionDigi4->Draw("Error");
          kcountHEnegativedirectionDigi4++;
          if (kcountHEnegativedirectionDigi4 > 12)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 < 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RdigiNegativeDirectionhistD1PhiSymmetryDepth4HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEnegativedirectionDigi4)
    delete h2CeffHEnegativedirectionDigi4;
  //========================================================================================== 1118
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=5
  //cout<<"      1D plot: R vs phi , different eta,  depth=5 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEnegativedirectionDigi5 = 1;
  TH1F *h2CeffHEnegativedirectionDigi5 = new TH1F("h2CeffHEnegativedirectionDigi5", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionDigi:
    if (jeta - 41 < 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=5
      for (int i = 4; i < 5; i++) {
        TH1F *HEnegativedirectionDigi5 = (TH1F *)h2CeffHEnegativedirectionDigi5->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          //	       cout<<"888  initial      kcountHEnegativedirectionDigi5   =     "<<kcountHEnegativedirectionDigi5  <<"   jeta-41=     "<< jeta-41 <<"   jphi=     "<< jphi <<"   adigihe[i][jeta][jphi]=     "<< adigihe[i][jeta][jphi] <<"  depth=     "<< i <<endl;

          double ccc1 = adigihe[i][jeta][jphi];
          if (ccc1 != 0.) {
            HEnegativedirectionDigi5->Fill(jphi, ccc1);
            ccctest = 1.;  //HEnegativedirectionDigi5->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"888        kcountHEnegativedirectionDigi5   =     "<<kcountHEnegativedirectionDigi5  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEnegativedirectionDigi5);
          HEnegativedirectionDigi5->SetMarkerStyle(20);
          HEnegativedirectionDigi5->SetMarkerSize(0.4);
          HEnegativedirectionDigi5->GetYaxis()->SetLabelSize(0.04);
          HEnegativedirectionDigi5->SetXTitle("HEnegativedirectionDigi5 \b");
          HEnegativedirectionDigi5->SetMarkerColor(2);
          HEnegativedirectionDigi5->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEnegativedirectionDigi5 == 1)
            HEnegativedirectionDigi5->SetXTitle("R for HE- jeta =-28; depth = 5 \b");
          if (kcountHEnegativedirectionDigi5 == 2)
            HEnegativedirectionDigi5->SetXTitle("R for HE- jeta =-27; depth = 5 \b");
          if (kcountHEnegativedirectionDigi5 == 3)
            HEnegativedirectionDigi5->SetXTitle("R for HE- jeta =-26; depth = 5 \b");
          if (kcountHEnegativedirectionDigi5 == 4)
            HEnegativedirectionDigi5->SetXTitle("R for HE- jeta =-25; depth = 5 \b");
          if (kcountHEnegativedirectionDigi5 == 5)
            HEnegativedirectionDigi5->SetXTitle("R for HE- jeta =-24; depth = 5 \b");
          if (kcountHEnegativedirectionDigi5 == 6)
            HEnegativedirectionDigi5->SetXTitle("R for HE- jeta =-23; depth = 5 \b");
          if (kcountHEnegativedirectionDigi5 == 7)
            HEnegativedirectionDigi5->SetXTitle("R for HE- jeta =-22; depth = 5 \b");
          if (kcountHEnegativedirectionDigi5 == 8)
            HEnegativedirectionDigi5->SetXTitle("R for HE- jeta =-21; depth = 5 \b");
          if (kcountHEnegativedirectionDigi5 == 9)
            HEnegativedirectionDigi5->SetXTitle("R for HE- jeta =-20; depth = 5 \b");
          if (kcountHEnegativedirectionDigi5 == 10)
            HEnegativedirectionDigi5->SetXTitle("R for HE- jeta =-19; depth = 5 \b");
          if (kcountHEnegativedirectionDigi5 == 11)
            HEnegativedirectionDigi5->SetXTitle("R for HE- jeta =-18; depth = 5 \b");
          HEnegativedirectionDigi5->Draw("Error");
          kcountHEnegativedirectionDigi5++;
          if (kcountHEnegativedirectionDigi5 > 11)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 < 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RdigiNegativeDirectionhistD1PhiSymmetryDepth5HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEnegativedirectionDigi5)
    delete h2CeffHEnegativedirectionDigi5;
  //========================================================================================== 1119
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=6
  //cout<<"      1D plot: R vs phi , different eta,  depth=6 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEnegativedirectionDigi6 = 1;
  TH1F *h2CeffHEnegativedirectionDigi6 = new TH1F("h2CeffHEnegativedirectionDigi6", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionDigi:
    if (jeta - 41 < 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=6
      for (int i = 5; i < 6; i++) {
        TH1F *HEnegativedirectionDigi6 = (TH1F *)h2CeffHEnegativedirectionDigi6->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = adigihe[i][jeta][jphi];
          if (ccc1 != 0.) {
            HEnegativedirectionDigi6->Fill(jphi, ccc1);
            ccctest = 1.;  //HEnegativedirectionDigi6->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"999        kcountHEnegativedirectionDigi6   =     "<<kcountHEnegativedirectionDigi6  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEnegativedirectionDigi6);
          HEnegativedirectionDigi6->SetMarkerStyle(20);
          HEnegativedirectionDigi6->SetMarkerSize(0.4);
          HEnegativedirectionDigi6->GetYaxis()->SetLabelSize(0.04);
          HEnegativedirectionDigi6->SetXTitle("HEnegativedirectionDigi6 \b");
          HEnegativedirectionDigi6->SetMarkerColor(2);
          HEnegativedirectionDigi6->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEnegativedirectionDigi6 == 1)
            HEnegativedirectionDigi6->SetXTitle("R for HE- jeta =-28; depth = 6 \b");
          if (kcountHEnegativedirectionDigi6 == 2)
            HEnegativedirectionDigi6->SetXTitle("R for HE- jeta =-27; depth = 6 \b");
          if (kcountHEnegativedirectionDigi6 == 3)
            HEnegativedirectionDigi6->SetXTitle("R for HE- jeta =-26; depth = 6 \b");
          if (kcountHEnegativedirectionDigi6 == 4)
            HEnegativedirectionDigi6->SetXTitle("R for HE- jeta =-25; depth = 6 \b");
          if (kcountHEnegativedirectionDigi6 == 5)
            HEnegativedirectionDigi6->SetXTitle("R for HE- jeta =-24; depth = 6 \b");
          if (kcountHEnegativedirectionDigi6 == 6)
            HEnegativedirectionDigi6->SetXTitle("R for HE- jeta =-23; depth = 6 \b");
          if (kcountHEnegativedirectionDigi6 == 7)
            HEnegativedirectionDigi6->SetXTitle("R for HE- jeta =-22; depth = 6 \b");
          if (kcountHEnegativedirectionDigi6 == 8)
            HEnegativedirectionDigi6->SetXTitle("R for HE- jeta =-21; depth = 6 \b");
          if (kcountHEnegativedirectionDigi6 == 9)
            HEnegativedirectionDigi6->SetXTitle("R for HE- jeta =-20; depth = 6 \b");
          if (kcountHEnegativedirectionDigi6 == 10)
            HEnegativedirectionDigi6->SetXTitle("R for HE- jeta =-19; depth = 6 \b");
          HEnegativedirectionDigi6->Draw("Error");
          kcountHEnegativedirectionDigi6++;
          if (kcountHEnegativedirectionDigi6 > 10)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 < 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RdigiNegativeDirectionhistD1PhiSymmetryDepth6HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEnegativedirectionDigi6)
    delete h2CeffHEnegativedirectionDigi6;
  //========================================================================================== 11110
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=7
  //cout<<"      1D plot: R vs phi , different eta,  depth=7 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEnegativedirectionDigi7 = 1;
  TH1F *h2CeffHEnegativedirectionDigi7 = new TH1F("h2CeffHEnegativedirectionDigi7", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionDigi:
    if (jeta - 41 < 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=7
      for (int i = 6; i < 7; i++) {
        TH1F *HEnegativedirectionDigi7 = (TH1F *)h2CeffHEnegativedirectionDigi7->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = adigihe[i][jeta][jphi];
          if (ccc1 != 0.) {
            HEnegativedirectionDigi7->Fill(jphi, ccc1);
            ccctest = 1.;  //HEnegativedirectionDigi7->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1010       kcountHEnegativedirectionDigi7   =     "<<kcountHEnegativedirectionDigi7  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEnegativedirectionDigi7);
          HEnegativedirectionDigi7->SetMarkerStyle(20);
          HEnegativedirectionDigi7->SetMarkerSize(0.4);
          HEnegativedirectionDigi7->GetYaxis()->SetLabelSize(0.04);
          HEnegativedirectionDigi7->SetXTitle("HEnegativedirectionDigi7 \b");
          HEnegativedirectionDigi7->SetMarkerColor(2);
          HEnegativedirectionDigi7->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEnegativedirectionDigi7 == 1)
            HEnegativedirectionDigi7->SetXTitle("R for HE- jeta =-28; depth = 7 \b");
          if (kcountHEnegativedirectionDigi7 == 2)
            HEnegativedirectionDigi7->SetXTitle("R for HE- jeta =-27; depth = 7 \b");
          if (kcountHEnegativedirectionDigi7 == 3)
            HEnegativedirectionDigi7->SetXTitle("R for HE- jeta =-26; depth = 7 \b");
          HEnegativedirectionDigi7->Draw("Error");
          kcountHEnegativedirectionDigi7++;
          if (kcountHEnegativedirectionDigi7 > 3)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 < 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RdigiNegativeDirectionhistD1PhiSymmetryDepth7HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEnegativedirectionDigi7)
    delete h2CeffHEnegativedirectionDigi7;

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  //                            DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD:

  //cout<<"    Start Vaiance: preparation  *****" <<endl;
  TH2F *digiVariance1HE1 = (TH2F *)dir->FindObjectAny("h_amplitudechannel2_HE1");
  TH2F *digiVariance0HE1 = (TH2F *)dir->FindObjectAny("h_amplitudechannel0_HE1");
  TH2F *digiVarianceHE1 = (TH2F *)digiVariance1HE1->Clone("digiVarianceHE1");
  digiVarianceHE1->Divide(digiVariance1HE1, digiVariance0HE1, 1, 1, "B");
  TH2F *digiVariance1HE2 = (TH2F *)dir->FindObjectAny("h_amplitudechannel2_HE2");
  TH2F *digiVariance0HE2 = (TH2F *)dir->FindObjectAny("h_amplitudechannel0_HE2");
  TH2F *digiVarianceHE2 = (TH2F *)digiVariance1HE2->Clone("digiVarianceHE2");
  digiVarianceHE2->Divide(digiVariance1HE2, digiVariance0HE2, 1, 1, "B");
  TH2F *digiVariance1HE3 = (TH2F *)dir->FindObjectAny("h_amplitudechannel2_HE3");
  TH2F *digiVariance0HE3 = (TH2F *)dir->FindObjectAny("h_amplitudechannel0_HE3");
  TH2F *digiVarianceHE3 = (TH2F *)digiVariance1HE3->Clone("digiVarianceHE3");
  digiVarianceHE3->Divide(digiVariance1HE3, digiVariance0HE3, 1, 1, "B");
  TH2F *digiVariance1HE4 = (TH2F *)dir->FindObjectAny("h_amplitudechannel2_HE4");
  TH2F *digiVariance0HE4 = (TH2F *)dir->FindObjectAny("h_amplitudechannel0_HE4");
  TH2F *digiVarianceHE4 = (TH2F *)digiVariance1HE4->Clone("digiVarianceHE4");
  digiVarianceHE4->Divide(digiVariance1HE4, digiVariance0HE4, 1, 1, "B");
  TH2F *digiVariance1HE5 = (TH2F *)dir->FindObjectAny("h_amplitudechannel2_HE5");
  TH2F *digiVariance0HE5 = (TH2F *)dir->FindObjectAny("h_amplitudechannel0_HE5");
  TH2F *digiVarianceHE5 = (TH2F *)digiVariance1HE5->Clone("digiVarianceHE5");
  digiVarianceHE5->Divide(digiVariance1HE5, digiVariance0HE5, 1, 1, "B");
  TH2F *digiVariance1HE6 = (TH2F *)dir->FindObjectAny("h_amplitudechannel2_HE6");
  TH2F *digiVariance0HE6 = (TH2F *)dir->FindObjectAny("h_amplitudechannel0_HE6");
  TH2F *digiVarianceHE6 = (TH2F *)digiVariance1HE6->Clone("digiVarianceHE6");
  digiVarianceHE6->Divide(digiVariance1HE6, digiVariance0HE6, 1, 1, "B");
  TH2F *digiVariance1HE7 = (TH2F *)dir->FindObjectAny("h_amplitudechannel2_HE7");
  TH2F *digiVariance0HE7 = (TH2F *)dir->FindObjectAny("h_amplitudechannel0_HE7");
  TH2F *digiVarianceHE7 = (TH2F *)digiVariance1HE7->Clone("digiVarianceHE7");
  digiVarianceHE7->Divide(digiVariance1HE7, digiVariance0HE7, 1, 1, "B");
  //cout<<"      Vaiance: preparation DONE *****" <<endl;
  //====================================================================== put Vaiance=Dispersia = Sig**2=<R**2> - (<R>)**2 into massive digivariancehe
  //                                                                                           = sum(R*R)/N - (sum(R)/N)**2
  for (int jeta = 0; jeta < njeta; jeta++) {
    //preparation for PHI normalization:
    double sumdigiHE0 = 0;
    int nsumdigiHE0 = 0;
    double sumdigiHE1 = 0;
    int nsumdigiHE1 = 0;
    double sumdigiHE2 = 0;
    int nsumdigiHE2 = 0;
    double sumdigiHE3 = 0;
    int nsumdigiHE3 = 0;
    double sumdigiHE4 = 0;
    int nsumdigiHE4 = 0;
    double sumdigiHE5 = 0;
    int nsumdigiHE5 = 0;
    double sumdigiHE6 = 0;
    int nsumdigiHE6 = 0;
    for (int jphi = 0; jphi < njphi; jphi++) {
      digivariancehe[0][jeta][jphi] = digiVarianceHE1->GetBinContent(jeta + 1, jphi + 1);
      digivariancehe[1][jeta][jphi] = digiVarianceHE2->GetBinContent(jeta + 1, jphi + 1);
      digivariancehe[2][jeta][jphi] = digiVarianceHE3->GetBinContent(jeta + 1, jphi + 1);
      digivariancehe[3][jeta][jphi] = digiVarianceHE4->GetBinContent(jeta + 1, jphi + 1);
      digivariancehe[4][jeta][jphi] = digiVarianceHE5->GetBinContent(jeta + 1, jphi + 1);
      digivariancehe[5][jeta][jphi] = digiVarianceHE6->GetBinContent(jeta + 1, jphi + 1);
      digivariancehe[6][jeta][jphi] = digiVarianceHE7->GetBinContent(jeta + 1, jphi + 1);
      if (digivariancehe[0][jeta][jphi] > 0.) {
        sumdigiHE0 += digivariancehe[0][jeta][jphi];
        ++nsumdigiHE0;
      }
      if (digivariancehe[1][jeta][jphi] > 0.) {
        sumdigiHE1 += digivariancehe[1][jeta][jphi];
        ++nsumdigiHE1;
      }
      if (digivariancehe[2][jeta][jphi] > 0.) {
        sumdigiHE2 += digivariancehe[2][jeta][jphi];
        ++nsumdigiHE2;
      }
      if (digivariancehe[3][jeta][jphi] > 0.) {
        sumdigiHE3 += digivariancehe[3][jeta][jphi];
        ++nsumdigiHE3;
      }
      if (digivariancehe[4][jeta][jphi] > 0.) {
        sumdigiHE4 += digivariancehe[4][jeta][jphi];
        ++nsumdigiHE4;
      }
      if (digivariancehe[5][jeta][jphi] > 0.) {
        sumdigiHE5 += digivariancehe[5][jeta][jphi];
        ++nsumdigiHE5;
      }
      if (digivariancehe[6][jeta][jphi] > 0.) {
        sumdigiHE6 += digivariancehe[6][jeta][jphi];
        ++nsumdigiHE6;
      }
    }  // phi
    // PHI normalization :
    for (int jphi = 0; jphi < njphi; jphi++) {
      if (digivariancehe[0][jeta][jphi] > 0.)
        digivariancehe[0][jeta][jphi] /= (sumdigiHE0 / nsumdigiHE0);
      if (digivariancehe[1][jeta][jphi] > 0.)
        digivariancehe[1][jeta][jphi] /= (sumdigiHE1 / nsumdigiHE1);
      if (digivariancehe[2][jeta][jphi] > 0.)
        digivariancehe[2][jeta][jphi] /= (sumdigiHE2 / nsumdigiHE2);
      if (digivariancehe[3][jeta][jphi] > 0.)
        digivariancehe[3][jeta][jphi] /= (sumdigiHE3 / nsumdigiHE3);
      if (digivariancehe[4][jeta][jphi] > 0.)
        digivariancehe[4][jeta][jphi] /= (sumdigiHE4 / nsumdigiHE4);
      if (digivariancehe[5][jeta][jphi] > 0.)
        digivariancehe[5][jeta][jphi] /= (sumdigiHE5 / nsumdigiHE5);
      if (digivariancehe[6][jeta][jphi] > 0.)
        digivariancehe[6][jeta][jphi] /= (sumdigiHE6 / nsumdigiHE6);
    }  // phi
    //       digivariancehe (D)           = sum(R*R)/N - (sum(R)/N)**2
    for (int jphi = 0; jphi < njphi; jphi++) {
      //	   cout<<"12 12 12   jeta=     "<< jeta <<"   jphi   =     "<<jphi  <<endl;
      digivariancehe[0][jeta][jphi] -= adigihe[0][jeta][jphi] * adigihe[0][jeta][jphi];
      digivariancehe[0][jeta][jphi] = fabs(digivariancehe[0][jeta][jphi]);
      digivariancehe[1][jeta][jphi] -= adigihe[1][jeta][jphi] * adigihe[1][jeta][jphi];
      digivariancehe[1][jeta][jphi] = fabs(digivariancehe[1][jeta][jphi]);
      digivariancehe[2][jeta][jphi] -= adigihe[2][jeta][jphi] * adigihe[2][jeta][jphi];
      digivariancehe[2][jeta][jphi] = fabs(digivariancehe[2][jeta][jphi]);
      digivariancehe[3][jeta][jphi] -= adigihe[3][jeta][jphi] * adigihe[3][jeta][jphi];
      digivariancehe[3][jeta][jphi] = fabs(digivariancehe[3][jeta][jphi]);
      digivariancehe[4][jeta][jphi] -= adigihe[4][jeta][jphi] * adigihe[4][jeta][jphi];
      digivariancehe[4][jeta][jphi] = fabs(digivariancehe[4][jeta][jphi]);
      digivariancehe[5][jeta][jphi] -= adigihe[5][jeta][jphi] * adigihe[5][jeta][jphi];
      digivariancehe[5][jeta][jphi] = fabs(digivariancehe[5][jeta][jphi]);
      digivariancehe[6][jeta][jphi] -= adigihe[6][jeta][jphi] * adigihe[6][jeta][jphi];
      digivariancehe[6][jeta][jphi] = fabs(digivariancehe[6][jeta][jphi]);
    }
  }
  //cout<<"      Vaiance: DONE*****" <<endl;
  //------------------------  2D-eta/phi-plot: D, averaged over depthes
  //======================================================================
  //======================================================================
  //cout<<"      R2D-eta/phi-plot: D, averaged over depthes *****" <<endl;
  c1x1->Clear();
  /////////////////
  c1x0->Divide(1, 1);
  c1x0->cd(1);
  TH2F *DefzDdigiHE42D = new TH2F("DefzDdigiHE42D", "", neta, -41., 41., nphi, 0., 72.);
  TH2F *DefzDdigiHE42D0 = new TH2F("DefzDdigiHE42D0", "", neta, -41., 41., nphi, 0., 72.);
  TH2F *DefzDdigiHE42DF = (TH2F *)DefzDdigiHE42D0->Clone("DefzDdigiHE42DF");
  for (int i = 0; i < ndepth; i++) {
    for (int jeta = 0; jeta < neta; jeta++) {
      for (int jphi = 0; jphi < nphi; jphi++) {
        double ccc1 = digivariancehe[i][jeta][jphi];
        int k2plot = jeta - 41;
        int kkk = k2plot;  //if(k2plot >0   kkk=k2plot+1; //-41 +41 !=0
        if (adigihe[i][jeta][jphi] > 0.) {
          DefzDdigiHE42D->Fill(kkk, jphi, ccc1);
          DefzDdigiHE42D0->Fill(kkk, jphi, 1.);
        }
      }
    }
  }
  DefzDdigiHE42DF->Divide(DefzDdigiHE42D, DefzDdigiHE42D0, 1, 1, "B");  // average A
  //    DefzDdigiHE1->Sumw2();
  gPad->SetGridy();
  gPad->SetGridx();  //      gPad->SetLogz();
  DefzDdigiHE42DF->SetMarkerStyle(20);
  DefzDdigiHE42DF->SetMarkerSize(0.4);
  DefzDdigiHE42DF->GetZaxis()->SetLabelSize(0.08);
  DefzDdigiHE42DF->SetXTitle("<D>_depth       #eta  \b");
  DefzDdigiHE42DF->SetYTitle("      #phi \b");
  DefzDdigiHE42DF->SetZTitle("<D>_depth \b");
  DefzDdigiHE42DF->SetMarkerColor(2);
  DefzDdigiHE42DF->SetLineColor(
      0);  //      DefzDdigiHE42DF->SetMaximum(1.000);  //      DefzDdigiHE42DF->SetMinimum(1.0);
  DefzDdigiHE42DF->Draw("COLZ");
  /////////////////
  c1x0->Update();
  c1x0->Print("DdigiGeneralD2PhiSymmetryHE.png");
  c1x0->Clear();
  // clean-up
  if (DefzDdigiHE42D)
    delete DefzDdigiHE42D;
  if (DefzDdigiHE42D0)
    delete DefzDdigiHE42D0;
  if (DefzDdigiHE42DF)
    delete DefzDdigiHE42DF;
  //====================================================================== 1D plot: D vs phi , averaged over depthes & eta
  //======================================================================
  //cout<<"      1D plot: D vs phi , averaged over depthes & eta *****" <<endl;
  c1x1->Clear();
  /////////////////
  c1x1->Divide(1, 1);
  c1x1->cd(1);
  TH1F *DefzDdigiHE41D = new TH1F("DefzDdigiHE41D", "", nphi, 0., 72.);
  TH1F *DefzDdigiHE41D0 = new TH1F("DefzDdigiHE41D0", "", nphi, 0., 72.);
  TH1F *DefzDdigiHE41DF = (TH1F *)DefzDdigiHE41D0->Clone("DefzDdigiHE41DF");

  for (int jphi = 0; jphi < nphi; jphi++) {
    for (int jeta = 0; jeta < neta; jeta++) {
      for (int i = 0; i < ndepth; i++) {
        double ccc1 = digivariancehe[i][jeta][jphi];
        if (adigihe[i][jeta][jphi] > 0.) {
          DefzDdigiHE41D->Fill(jphi, ccc1);
          DefzDdigiHE41D0->Fill(jphi, 1.);
        }
      }
    }
  }
  //     DefzDdigiHE41D->Sumw2();DefzDdigiHE41D0->Sumw2();

  DefzDdigiHE41DF->Divide(DefzDdigiHE41D, DefzDdigiHE41D0, 1, 1, "B");  // R averaged over depthes & eta
  DefzDdigiHE41D0->Sumw2();
  //    for (int jphi=1;jphi<73;jphi++) {DefzDdigiHE41DF->SetBinError(jphi,0.01);}
  gPad->SetGridy();
  gPad->SetGridx();  //      gPad->SetLogz();
  DefzDdigiHE41DF->SetMarkerStyle(20);
  DefzDdigiHE41DF->SetMarkerSize(1.4);
  DefzDdigiHE41DF->GetZaxis()->SetLabelSize(0.08);
  DefzDdigiHE41DF->SetXTitle("#phi  \b");
  DefzDdigiHE41DF->SetYTitle("  <D> \b");
  DefzDdigiHE41DF->SetZTitle("<D>_PHI  - AllDepthes \b");
  DefzDdigiHE41DF->SetMarkerColor(4);
  DefzDdigiHE41DF->SetLineColor(4);  //  DefzDdigiHE41DF->SetMinimum(0.8);     DefzDdigiHE41DF->SetMinimum(-0.015);
  DefzDdigiHE41DF->Draw("Error");
  /////////////////
  c1x1->Update();
  c1x1->Print("DdigiGeneralD1PhiSymmetryHE.png");
  c1x1->Clear();
  // clean-up
  if (DefzDdigiHE41D)
    delete DefzDdigiHE41D;
  if (DefzDdigiHE41D0)
    delete DefzDdigiHE41D0;
  if (DefzDdigiHE41DF)
    delete DefzDdigiHE41DF;
  //========================================================================================== 14
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=1
  //cout<<"      1D plot: D vs phi , different eta,  depth=1 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEpositivedirectionDigiD1 = 1;
  TH1F *h2CeffHEpositivedirectionDigiD1 = new TH1F("h2CeffHEpositivedirectionDigiD1", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionDigiD:
    if (jeta - 41 >= 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=1
      for (int i = 0; i < 1; i++) {
        TH1F *HEpositivedirectionDigiD1 = (TH1F *)h2CeffHEpositivedirectionDigiD1->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = digivariancehe[i][jeta][jphi];
          if (adigihe[i][jeta][jphi] > 0.) {
            HEpositivedirectionDigiD1->Fill(jphi, ccc1);
            ccctest = 1.;  //HEpositivedirectionDigiD1->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1414       kcountHEpositivedirectionDigiD1   =     "<<kcountHEpositivedirectionDigiD1  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEpositivedirectionDigiD1);
          HEpositivedirectionDigiD1->SetMarkerStyle(20);
          HEpositivedirectionDigiD1->SetMarkerSize(0.4);
          HEpositivedirectionDigiD1->GetYaxis()->SetLabelSize(0.04);
          HEpositivedirectionDigiD1->SetXTitle("HEpositivedirectionDigiD1 \b");
          HEpositivedirectionDigiD1->SetMarkerColor(2);
          HEpositivedirectionDigiD1->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEpositivedirectionDigiD1 == 1)
            HEpositivedirectionDigiD1->SetXTitle("D for HE+ jeta = 17; depth = 1 \b");
          if (kcountHEpositivedirectionDigiD1 == 2)
            HEpositivedirectionDigiD1->SetXTitle("D for HE+ jeta = 18; depth = 1 \b");
          if (kcountHEpositivedirectionDigiD1 == 3)
            HEpositivedirectionDigiD1->SetXTitle("D for HE+ jeta = 19; depth = 1 \b");
          if (kcountHEpositivedirectionDigiD1 == 4)
            HEpositivedirectionDigiD1->SetXTitle("D for HE+ jeta = 20; depth = 1 \b");
          if (kcountHEpositivedirectionDigiD1 == 5)
            HEpositivedirectionDigiD1->SetXTitle("D for HE+ jeta = 21; depth = 1 \b");
          if (kcountHEpositivedirectionDigiD1 == 6)
            HEpositivedirectionDigiD1->SetXTitle("D for HE+ jeta = 22; depth = 1 \b");
          if (kcountHEpositivedirectionDigiD1 == 7)
            HEpositivedirectionDigiD1->SetXTitle("D for HE+ jeta = 23; depth = 1 \b");
          if (kcountHEpositivedirectionDigiD1 == 8)
            HEpositivedirectionDigiD1->SetXTitle("D for HE+ jeta = 24; depth = 1 \b");
          if (kcountHEpositivedirectionDigiD1 == 9)
            HEpositivedirectionDigiD1->SetXTitle("D for HE+ jeta = 25; depth = 1 \b");
          if (kcountHEpositivedirectionDigiD1 == 10)
            HEpositivedirectionDigiD1->SetXTitle("D for HE+ jeta = 26; depth = 1 \b");
          if (kcountHEpositivedirectionDigiD1 == 11)
            HEpositivedirectionDigiD1->SetXTitle("D for HE+ jeta = 27; depth = 1 \b");
          if (kcountHEpositivedirectionDigiD1 == 12)
            HEpositivedirectionDigiD1->SetXTitle("D for HE+ jeta = 28; depth = 1 \b");
          HEpositivedirectionDigiD1->Draw("Error");
          kcountHEpositivedirectionDigiD1++;
          if (kcountHEpositivedirectionDigiD1 > 12)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DdigiPositiveDirectionhistD1PhiSymmetryDepth1HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEpositivedirectionDigiD1)
    delete h2CeffHEpositivedirectionDigiD1;
  //========================================================================================== 15
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=2
  //cout<<"      1D plot: D vs phi , different eta,  depth=2 *****" <<endl;
  c3x5->Clear();
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEpositivedirectionDigiD2 = 1;
  TH1F *h2CeffHEpositivedirectionDigiD2 = new TH1F("h2CeffHEpositivedirectionDigiD2", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionDigiD:
    if (jeta - 41 >= 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=2
      for (int i = 1; i < 2; i++) {
        TH1F *HEpositivedirectionDigiD2 = (TH1F *)h2CeffHEpositivedirectionDigiD2->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = digivariancehe[i][jeta][jphi];
          if (adigihe[i][jeta][jphi] > 0.) {
            HEpositivedirectionDigiD2->Fill(jphi, ccc1);
            ccctest = 1.;  //HEpositivedirectionDigiD2->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1515       kcountHEpositivedirectionDigiD2   =     "<<kcountHEpositivedirectionDigiD2  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEpositivedirectionDigiD2);
          HEpositivedirectionDigiD2->SetMarkerStyle(20);
          HEpositivedirectionDigiD2->SetMarkerSize(0.4);
          HEpositivedirectionDigiD2->GetYaxis()->SetLabelSize(0.04);
          HEpositivedirectionDigiD2->SetXTitle("HEpositivedirectionDigiD2 \b");
          HEpositivedirectionDigiD2->SetMarkerColor(2);
          HEpositivedirectionDigiD2->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEpositivedirectionDigiD2 == 1)
            HEpositivedirectionDigiD2->SetXTitle("D for HE+ jeta = 16; depth = 2 \b");
          if (kcountHEpositivedirectionDigiD2 == 2)
            HEpositivedirectionDigiD2->SetXTitle("D for HE+ jeta = 17; depth = 2 \b");
          if (kcountHEpositivedirectionDigiD2 == 3)
            HEpositivedirectionDigiD2->SetXTitle("D for HE+ jeta = 18; depth = 2 \b");
          if (kcountHEpositivedirectionDigiD2 == 4)
            HEpositivedirectionDigiD2->SetXTitle("D for HE+ jeta = 19; depth = 2 \b");
          if (kcountHEpositivedirectionDigiD2 == 5)
            HEpositivedirectionDigiD2->SetXTitle("D for HE+ jeta = 20; depth = 2 \b");
          if (kcountHEpositivedirectionDigiD2 == 6)
            HEpositivedirectionDigiD2->SetXTitle("D for HE+ jeta = 21; depth = 2 \b");
          if (kcountHEpositivedirectionDigiD2 == 7)
            HEpositivedirectionDigiD2->SetXTitle("D for HE+ jeta = 22; depth = 2 \b");
          if (kcountHEpositivedirectionDigiD2 == 8)
            HEpositivedirectionDigiD2->SetXTitle("D for HE+ jeta = 23; depth = 2 \b");
          if (kcountHEpositivedirectionDigiD2 == 9)
            HEpositivedirectionDigiD2->SetXTitle("D for HE+ jeta = 24; depth = 2 \b");
          if (kcountHEpositivedirectionDigiD2 == 10)
            HEpositivedirectionDigiD2->SetXTitle("D for HE+ jeta = 25; depth = 2 \b");
          if (kcountHEpositivedirectionDigiD2 == 11)
            HEpositivedirectionDigiD2->SetXTitle("D for HE+ jeta = 26; depth = 2 \b");
          if (kcountHEpositivedirectionDigiD2 == 12)
            HEpositivedirectionDigiD2->SetXTitle("D for HE+ jeta = 27; depth = 2 \b");
          if (kcountHEpositivedirectionDigiD2 == 13)
            HEpositivedirectionDigiD2->SetXTitle("D for HE+ jeta = 28; depth = 2 \b");
          HEpositivedirectionDigiD2->Draw("Error");
          kcountHEpositivedirectionDigiD2++;
          if (kcountHEpositivedirectionDigiD2 > 13)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DdigiPositiveDirectionhistD1PhiSymmetryDepth2HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEpositivedirectionDigiD2)
    delete h2CeffHEpositivedirectionDigiD2;
  //========================================================================================== 16
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=3
  //cout<<"      1D plot: D vs phi , different eta,  depth=3 *****" <<endl;
  c3x5->Clear();
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEpositivedirectionDigiD3 = 1;
  TH1F *h2CeffHEpositivedirectionDigiD3 = new TH1F("h2CeffHEpositivedirectionDigiD3", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionDigiD:
    if (jeta - 41 >= 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=3
      for (int i = 2; i < 3; i++) {
        TH1F *HEpositivedirectionDigiD3 = (TH1F *)h2CeffHEpositivedirectionDigiD3->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = digivariancehe[i][jeta][jphi];
          if (adigihe[i][jeta][jphi] > 0.) {
            HEpositivedirectionDigiD3->Fill(jphi, ccc1);
            ccctest = 1.;  //HEpositivedirectionDigiD3->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1616       kcountHEpositivedirectionDigiD3   =     "<<kcountHEpositivedirectionDigiD3  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEpositivedirectionDigiD3);
          HEpositivedirectionDigiD3->SetMarkerStyle(20);
          HEpositivedirectionDigiD3->SetMarkerSize(0.4);
          HEpositivedirectionDigiD3->GetYaxis()->SetLabelSize(0.04);
          HEpositivedirectionDigiD3->SetXTitle("HEpositivedirectionDigiD3 \b");
          HEpositivedirectionDigiD3->SetMarkerColor(2);
          HEpositivedirectionDigiD3->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEpositivedirectionDigiD3 == 1)
            HEpositivedirectionDigiD3->SetXTitle("D for HE+ jeta = 16; depth = 3 \b");
          if (kcountHEpositivedirectionDigiD3 == 2)
            HEpositivedirectionDigiD3->SetXTitle("D for HE+ jeta = 17; depth = 3 \b");
          if (kcountHEpositivedirectionDigiD3 == 3)
            HEpositivedirectionDigiD3->SetXTitle("D for HE+ jeta = 18; depth = 3 \b");
          if (kcountHEpositivedirectionDigiD3 == 4)
            HEpositivedirectionDigiD3->SetXTitle("D for HE+ jeta = 19; depth = 3 \b");
          if (kcountHEpositivedirectionDigiD3 == 5)
            HEpositivedirectionDigiD3->SetXTitle("D for HE+ jeta = 20; depth = 3 \b");
          if (kcountHEpositivedirectionDigiD3 == 6)
            HEpositivedirectionDigiD3->SetXTitle("D for HE+ jeta = 21; depth = 3 \b");
          if (kcountHEpositivedirectionDigiD3 == 7)
            HEpositivedirectionDigiD3->SetXTitle("D for HE+ jeta = 22; depth = 3 \b");
          if (kcountHEpositivedirectionDigiD3 == 8)
            HEpositivedirectionDigiD3->SetXTitle("D for HE+ jeta = 23; depth = 3 \b");
          if (kcountHEpositivedirectionDigiD3 == 9)
            HEpositivedirectionDigiD3->SetXTitle("D for HE+ jeta = 24; depth = 3 \b");
          if (kcountHEpositivedirectionDigiD3 == 10)
            HEpositivedirectionDigiD3->SetXTitle("D for HE+ jeta = 25; depth = 3 \b");
          if (kcountHEpositivedirectionDigiD3 == 11)
            HEpositivedirectionDigiD3->SetXTitle("D for HE+ jeta = 26; depth = 3 \b");
          if (kcountHEpositivedirectionDigiD3 == 12)
            HEpositivedirectionDigiD3->SetXTitle("D for HE+ jeta = 27; depth = 3 \b");
          if (kcountHEpositivedirectionDigiD3 == 13)
            HEpositivedirectionDigiD3->SetXTitle("D for HE+ jeta = 28; depth = 3 \b");
          HEpositivedirectionDigiD3->Draw("Error");
          kcountHEpositivedirectionDigiD3++;
          if (kcountHEpositivedirectionDigiD3 > 13)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DdigiPositiveDirectionhistD1PhiSymmetryDepth3HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEpositivedirectionDigiD3)
    delete h2CeffHEpositivedirectionDigiD3;
  //========================================================================================== 17
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=4
  //cout<<"      1D plot: D vs phi , different eta,  depth=4 *****" <<endl;
  c3x5->Clear();
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEpositivedirectionDigiD4 = 1;
  TH1F *h2CeffHEpositivedirectionDigiD4 = new TH1F("h2CeffHEpositivedirectionDigiD4", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionDigiD:
    if (jeta - 41 >= 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=4
      for (int i = 3; i < 4; i++) {
        TH1F *HEpositivedirectionDigiD4 = (TH1F *)h2CeffHEpositivedirectionDigiD4->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = digivariancehe[i][jeta][jphi];
          if (adigihe[i][jeta][jphi] > 0.) {
            HEpositivedirectionDigiD4->Fill(jphi, ccc1);
            ccctest = 1.;  //HEpositivedirectionDigiD4->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1717       kcountHEpositivedirectionDigiD4   =     "<<kcountHEpositivedirectionDigiD4  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEpositivedirectionDigiD4);
          HEpositivedirectionDigiD4->SetMarkerStyle(20);
          HEpositivedirectionDigiD4->SetMarkerSize(0.4);
          HEpositivedirectionDigiD4->GetYaxis()->SetLabelSize(0.04);
          HEpositivedirectionDigiD4->SetXTitle("HEpositivedirectionDigiD4 \b");
          HEpositivedirectionDigiD4->SetMarkerColor(2);
          HEpositivedirectionDigiD4->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEpositivedirectionDigiD4 == 1)
            HEpositivedirectionDigiD4->SetXTitle("D for HE+ jeta = 15; depth = 4 \b");
          if (kcountHEpositivedirectionDigiD4 == 2)
            HEpositivedirectionDigiD4->SetXTitle("D for HE+ jeta = 17; depth = 4 \b");
          if (kcountHEpositivedirectionDigiD4 == 3)
            HEpositivedirectionDigiD4->SetXTitle("D for HE+ jeta = 18; depth = 4 \b");
          if (kcountHEpositivedirectionDigiD4 == 4)
            HEpositivedirectionDigiD4->SetXTitle("D for HE+ jeta = 19; depth = 4 \b");
          if (kcountHEpositivedirectionDigiD4 == 5)
            HEpositivedirectionDigiD4->SetXTitle("D for HE+ jeta = 20; depth = 4 \b");
          if (kcountHEpositivedirectionDigiD4 == 6)
            HEpositivedirectionDigiD4->SetXTitle("D for HE+ jeta = 21; depth = 4 \b");
          if (kcountHEpositivedirectionDigiD4 == 7)
            HEpositivedirectionDigiD4->SetXTitle("D for HE+ jeta = 22; depth = 4 \b");
          if (kcountHEpositivedirectionDigiD4 == 8)
            HEpositivedirectionDigiD4->SetXTitle("D for HE+ jeta = 23; depth = 4 \b");
          if (kcountHEpositivedirectionDigiD4 == 9)
            HEpositivedirectionDigiD4->SetXTitle("D for HE+ jeta = 24; depth = 4 \b");
          if (kcountHEpositivedirectionDigiD4 == 10)
            HEpositivedirectionDigiD4->SetXTitle("D for HE+ jeta = 25; depth = 4 \b");
          if (kcountHEpositivedirectionDigiD4 == 11)
            HEpositivedirectionDigiD4->SetXTitle("D for HE+ jeta = 26; depth = 4 \b");
          if (kcountHEpositivedirectionDigiD4 == 12)
            HEpositivedirectionDigiD4->SetXTitle("D for HE+ jeta = 27; depth = 4 \b");
          HEpositivedirectionDigiD4->Draw("Error");
          kcountHEpositivedirectionDigiD4++;
          if (kcountHEpositivedirectionDigiD4 > 12)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DdigiPositiveDirectionhistD1PhiSymmetryDepth4HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEpositivedirectionDigiD4)
    delete h2CeffHEpositivedirectionDigiD4;
  //========================================================================================== 18
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=5
  //cout<<"      1D plot: D vs phi , different eta,  depth=5 *****" <<endl;
  c3x5->Clear();
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEpositivedirectionDigiD5 = 1;
  TH1F *h2CeffHEpositivedirectionDigiD5 = new TH1F("h2CeffHEpositivedirectionDigiD5", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionDigiD:
    if (jeta - 41 >= 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=5
      for (int i = 4; i < 5; i++) {
        TH1F *HEpositivedirectionDigiD5 = (TH1F *)h2CeffHEpositivedirectionDigiD5->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = digivariancehe[i][jeta][jphi];
          if (adigihe[i][jeta][jphi] > 0.) {
            HEpositivedirectionDigiD5->Fill(jphi, ccc1);
            ccctest = 1.;  //HEpositivedirectionDigiD5->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1818       kcountHEpositivedirectionDigiD5   =     "<<kcountHEpositivedirectionDigiD5  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEpositivedirectionDigiD5);
          HEpositivedirectionDigiD5->SetMarkerStyle(20);
          HEpositivedirectionDigiD5->SetMarkerSize(0.4);
          HEpositivedirectionDigiD5->GetYaxis()->SetLabelSize(0.04);
          HEpositivedirectionDigiD5->SetXTitle("HEpositivedirectionDigiD5 \b");
          HEpositivedirectionDigiD5->SetMarkerColor(2);
          HEpositivedirectionDigiD5->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEpositivedirectionDigiD5 == 1)
            HEpositivedirectionDigiD5->SetXTitle("D for HE+ jeta = 17; depth = 5 \b");
          if (kcountHEpositivedirectionDigiD5 == 2)
            HEpositivedirectionDigiD5->SetXTitle("D for HE+ jeta = 18; depth = 5 \b");
          if (kcountHEpositivedirectionDigiD5 == 3)
            HEpositivedirectionDigiD5->SetXTitle("D for HE+ jeta = 19; depth = 5 \b");
          if (kcountHEpositivedirectionDigiD5 == 4)
            HEpositivedirectionDigiD5->SetXTitle("D for HE+ jeta = 20; depth = 5 \b");
          if (kcountHEpositivedirectionDigiD5 == 5)
            HEpositivedirectionDigiD5->SetXTitle("D for HE+ jeta = 21; depth = 5 \b");
          if (kcountHEpositivedirectionDigiD5 == 6)
            HEpositivedirectionDigiD5->SetXTitle("D for HE+ jeta = 22; depth = 5 \b");
          if (kcountHEpositivedirectionDigiD5 == 7)
            HEpositivedirectionDigiD5->SetXTitle("D for HE+ jeta = 23; depth = 5 \b");
          if (kcountHEpositivedirectionDigiD5 == 8)
            HEpositivedirectionDigiD5->SetXTitle("D for HE+ jeta = 24; depth = 5 \b");
          if (kcountHEpositivedirectionDigiD5 == 9)
            HEpositivedirectionDigiD5->SetXTitle("D for HE+ jeta = 25; depth = 5 \b");
          if (kcountHEpositivedirectionDigiD5 == 10)
            HEpositivedirectionDigiD5->SetXTitle("D for HE+ jeta = 26; depth = 5 \b");
          if (kcountHEpositivedirectionDigiD5 == 11)
            HEpositivedirectionDigiD5->SetXTitle("D for HE+ jeta = 27; depth = 5 \b");
          HEpositivedirectionDigiD5->Draw("Error");
          kcountHEpositivedirectionDigiD5++;
          if (kcountHEpositivedirectionDigiD5 > 11)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DdigiPositiveDirectionhistD1PhiSymmetryDepth5HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEpositivedirectionDigiD5)
    delete h2CeffHEpositivedirectionDigiD5;
  //========================================================================================== 19
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=6
  //cout<<"      1D plot: D vs phi , different eta,  depth=6 *****" <<endl;
  c3x5->Clear();
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEpositivedirectionDigiD6 = 1;
  TH1F *h2CeffHEpositivedirectionDigiD6 = new TH1F("h2CeffHEpositivedirectionDigiD6", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionDigiD:
    if (jeta - 41 >= 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=6
      for (int i = 5; i < 6; i++) {
        TH1F *HEpositivedirectionDigiD6 = (TH1F *)h2CeffHEpositivedirectionDigiD6->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = digivariancehe[i][jeta][jphi];
          if (adigihe[i][jeta][jphi] > 0.) {
            HEpositivedirectionDigiD6->Fill(jphi, ccc1);
            ccctest = 1.;  //HEpositivedirectionDigiD6->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1919       kcountHEpositivedirectionDigiD6   =     "<<kcountHEpositivedirectionDigiD6  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEpositivedirectionDigiD6);
          HEpositivedirectionDigiD6->SetMarkerStyle(20);
          HEpositivedirectionDigiD6->SetMarkerSize(0.4);
          HEpositivedirectionDigiD6->GetYaxis()->SetLabelSize(0.04);
          HEpositivedirectionDigiD6->SetXTitle("HEpositivedirectionDigiD6 \b");
          HEpositivedirectionDigiD6->SetMarkerColor(2);
          HEpositivedirectionDigiD6->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEpositivedirectionDigiD6 == 1)
            HEpositivedirectionDigiD6->SetXTitle("D for HE+ jeta = 18; depth = 6 \b");
          if (kcountHEpositivedirectionDigiD6 == 2)
            HEpositivedirectionDigiD6->SetXTitle("D for HE+ jeta = 19; depth = 6 \b");
          if (kcountHEpositivedirectionDigiD6 == 3)
            HEpositivedirectionDigiD6->SetXTitle("D for HE+ jeta = 20; depth = 6 \b");
          if (kcountHEpositivedirectionDigiD6 == 4)
            HEpositivedirectionDigiD6->SetXTitle("D for HE+ jeta = 21; depth = 6 \b");
          if (kcountHEpositivedirectionDigiD6 == 5)
            HEpositivedirectionDigiD6->SetXTitle("D for HE+ jeta = 22; depth = 6 \b");
          if (kcountHEpositivedirectionDigiD6 == 6)
            HEpositivedirectionDigiD6->SetXTitle("D for HE+ jeta = 23; depth = 6 \b");
          if (kcountHEpositivedirectionDigiD6 == 7)
            HEpositivedirectionDigiD6->SetXTitle("D for HE+ jeta = 24; depth = 6 \b");
          if (kcountHEpositivedirectionDigiD6 == 8)
            HEpositivedirectionDigiD6->SetXTitle("D for HE+ jeta = 25; depth = 6 \b");
          if (kcountHEpositivedirectionDigiD6 == 9)
            HEpositivedirectionDigiD6->SetXTitle("D for HE+ jeta = 26; depth = 6 \b");
          if (kcountHEpositivedirectionDigiD6 == 10)
            HEpositivedirectionDigiD6->SetXTitle("D for HE+ jeta = 27; depth = 6 \b");
          HEpositivedirectionDigiD6->Draw("Error");
          kcountHEpositivedirectionDigiD6++;
          if (kcountHEpositivedirectionDigiD6 > 10)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DdigiPositiveDirectionhistD1PhiSymmetryDepth6HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEpositivedirectionDigiD6)
    delete h2CeffHEpositivedirectionDigiD6;
  //========================================================================================== 20
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=7
  //cout<<"      1D plot: D vs phi , different eta,  depth=7 *****" <<endl;
  c3x5->Clear();
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEpositivedirectionDigiD7 = 1;
  TH1F *h2CeffHEpositivedirectionDigiD7 = new TH1F("h2CeffHEpositivedirectionDigiD7", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionDigiD:
    if (jeta - 41 >= 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=7
      for (int i = 6; i < 7; i++) {
        TH1F *HEpositivedirectionDigiD7 = (TH1F *)h2CeffHEpositivedirectionDigiD7->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = digivariancehe[i][jeta][jphi];
          if (adigihe[i][jeta][jphi] > 0.) {
            HEpositivedirectionDigiD7->Fill(jphi, ccc1);
            ccctest = 1.;  //HEpositivedirectionDigiD7->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest != 0.) {
          //cout<<"2020       kcountHEpositivedirectionDigiD7   =     "<<kcountHEpositivedirectionDigiD7  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEpositivedirectionDigiD7);
          HEpositivedirectionDigiD7->SetMarkerStyle(20);
          HEpositivedirectionDigiD7->SetMarkerSize(0.4);
          HEpositivedirectionDigiD7->GetYaxis()->SetLabelSize(0.04);
          HEpositivedirectionDigiD7->SetXTitle("HEpositivedirectionDigiD7 \b");
          HEpositivedirectionDigiD7->SetMarkerColor(2);
          HEpositivedirectionDigiD7->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEpositivedirectionDigiD7 == 1)
            HEpositivedirectionDigiD7->SetXTitle("D for HE+ jeta = 25; depth = 7 \b");
          if (kcountHEpositivedirectionDigiD7 == 2)
            HEpositivedirectionDigiD7->SetXTitle("D for HE+ jeta = 26; depth = 7 \b");
          if (kcountHEpositivedirectionDigiD7 == 3)
            HEpositivedirectionDigiD7->SetXTitle("D for HE+ jeta = 27; depth = 7 \b");
          HEpositivedirectionDigiD7->Draw("Error");
          kcountHEpositivedirectionDigiD7++;
          if (kcountHEpositivedirectionDigiD7 > 3)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DdigiPositiveDirectionhistD1PhiSymmetryDepth7HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEpositivedirectionDigiD7)
    delete h2CeffHEpositivedirectionDigiD7;

  //========================================================================================== 22222214
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=1
  //cout<<"      1D plot: D vs phi , different eta,  depth=1 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEnegativedirectionDigiD1 = 1;
  TH1F *h2CeffHEnegativedirectionDigiD1 = new TH1F("h2CeffHEnegativedirectionDigiD1", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionDigiD:
    if (jeta - 41 < 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=1
      for (int i = 0; i < 1; i++) {
        TH1F *HEnegativedirectionDigiD1 = (TH1F *)h2CeffHEnegativedirectionDigiD1->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = digivariancehe[i][jeta][jphi];
          if (adigihe[i][jeta][jphi] > 0.) {
            HEnegativedirectionDigiD1->Fill(jphi, ccc1);
            ccctest = 1.;  //HEnegativedirectionDigiD1->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1414       kcountHEnegativedirectionDigiD1   =     "<<kcountHEnegativedirectionDigiD1  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEnegativedirectionDigiD1);
          HEnegativedirectionDigiD1->SetMarkerStyle(20);
          HEnegativedirectionDigiD1->SetMarkerSize(0.4);
          HEnegativedirectionDigiD1->GetYaxis()->SetLabelSize(0.04);
          HEnegativedirectionDigiD1->SetXTitle("HEnegativedirectionDigiD1 \b");
          HEnegativedirectionDigiD1->SetMarkerColor(2);
          HEnegativedirectionDigiD1->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEnegativedirectionDigiD1 == 1)
            HEnegativedirectionDigiD1->SetXTitle("D for HE- jeta =-29; depth = 1 \b");
          if (kcountHEnegativedirectionDigiD1 == 2)
            HEnegativedirectionDigiD1->SetXTitle("D for HE- jeta =-28; depth = 1 \b");
          if (kcountHEnegativedirectionDigiD1 == 3)
            HEnegativedirectionDigiD1->SetXTitle("D for HE- jeta =-27; depth = 1 \b");
          if (kcountHEnegativedirectionDigiD1 == 4)
            HEnegativedirectionDigiD1->SetXTitle("D for HE- jeta =-26; depth = 1 \b");
          if (kcountHEnegativedirectionDigiD1 == 5)
            HEnegativedirectionDigiD1->SetXTitle("D for HE- jeta =-25; depth = 1 \b");
          if (kcountHEnegativedirectionDigiD1 == 6)
            HEnegativedirectionDigiD1->SetXTitle("D for HE- jeta =-24; depth = 1 \b");
          if (kcountHEnegativedirectionDigiD1 == 7)
            HEnegativedirectionDigiD1->SetXTitle("D for HE- jeta =-23; depth = 1 \b");
          if (kcountHEnegativedirectionDigiD1 == 8)
            HEnegativedirectionDigiD1->SetXTitle("D for HE- jeta =-22; depth = 1 \b");
          if (kcountHEnegativedirectionDigiD1 == 9)
            HEnegativedirectionDigiD1->SetXTitle("D for HE- jeta =-21; depth = 1 \b");
          if (kcountHEnegativedirectionDigiD1 == 10)
            HEnegativedirectionDigiD1->SetXTitle("D for HE- jeta =-20; depth = 1 \b");
          if (kcountHEnegativedirectionDigiD1 == 11)
            HEnegativedirectionDigiD1->SetXTitle("D for HE- jeta =-19; depth = 1 \b");
          if (kcountHEnegativedirectionDigiD1 == 12)
            HEnegativedirectionDigiD1->SetXTitle("D for HE- jeta =-18; depth = 1 \b");
          HEnegativedirectionDigiD1->Draw("Error");
          kcountHEnegativedirectionDigiD1++;
          if (kcountHEnegativedirectionDigiD1 > 12)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 < 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DdigiNegativeDirectionhistD1PhiSymmetryDepth1HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEnegativedirectionDigiD1)
    delete h2CeffHEnegativedirectionDigiD1;
  //========================================================================================== 22222215
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=2
  //cout<<"      1D plot: D vs phi , different eta,  depth=2 *****" <<endl;
  c3x5->Clear();
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEnegativedirectionDigiD2 = 1;
  TH1F *h2CeffHEnegativedirectionDigiD2 = new TH1F("h2CeffHEnegativedirectionDigiD2", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionDigiD:
    if (jeta - 41 < 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=2
      for (int i = 1; i < 2; i++) {
        TH1F *HEnegativedirectionDigiD2 = (TH1F *)h2CeffHEnegativedirectionDigiD2->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = digivariancehe[i][jeta][jphi];
          if (adigihe[i][jeta][jphi] > 0.) {
            HEnegativedirectionDigiD2->Fill(jphi, ccc1);
            ccctest = 1.;  //HEnegativedirectionDigiD2->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1515       kcountHEnegativedirectionDigiD2   =     "<<kcountHEnegativedirectionDigiD2  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEnegativedirectionDigiD2);
          HEnegativedirectionDigiD2->SetMarkerStyle(20);
          HEnegativedirectionDigiD2->SetMarkerSize(0.4);
          HEnegativedirectionDigiD2->GetYaxis()->SetLabelSize(0.04);
          HEnegativedirectionDigiD2->SetXTitle("HEnegativedirectionDigiD2 \b");
          HEnegativedirectionDigiD2->SetMarkerColor(2);
          HEnegativedirectionDigiD2->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEnegativedirectionDigiD2 == 1)
            HEnegativedirectionDigiD2->SetXTitle("D for HE- jeta =-29; depth = 2 \b");
          if (kcountHEnegativedirectionDigiD2 == 2)
            HEnegativedirectionDigiD2->SetXTitle("D for HE- jeta =-28; depth = 2 \b");
          if (kcountHEnegativedirectionDigiD2 == 3)
            HEnegativedirectionDigiD2->SetXTitle("D for HE- jeta =-27; depth = 2 \b");
          if (kcountHEnegativedirectionDigiD2 == 4)
            HEnegativedirectionDigiD2->SetXTitle("D for HE- jeta =-26; depth = 2 \b");
          if (kcountHEnegativedirectionDigiD2 == 5)
            HEnegativedirectionDigiD2->SetXTitle("D for HE- jeta =-25; depth = 2 \b");
          if (kcountHEnegativedirectionDigiD2 == 6)
            HEnegativedirectionDigiD2->SetXTitle("D for HE- jeta =-24; depth = 2 \b");
          if (kcountHEnegativedirectionDigiD2 == 7)
            HEnegativedirectionDigiD2->SetXTitle("D for HE- jeta =-23; depth = 2 \b");
          if (kcountHEnegativedirectionDigiD2 == 8)
            HEnegativedirectionDigiD2->SetXTitle("D for HE- jeta =-22; depth = 2 \b");
          if (kcountHEnegativedirectionDigiD2 == 9)
            HEnegativedirectionDigiD2->SetXTitle("D for HE- jeta =-21; depth = 2 \b");
          if (kcountHEnegativedirectionDigiD2 == 10)
            HEnegativedirectionDigiD2->SetXTitle("D for HE- jeta =-20; depth = 2 \b");
          if (kcountHEnegativedirectionDigiD2 == 11)
            HEnegativedirectionDigiD2->SetXTitle("D for HE- jeta =-19; depth = 2 \b");
          if (kcountHEnegativedirectionDigiD2 == 12)
            HEnegativedirectionDigiD2->SetXTitle("D for HE- jeta =-18; depth = 2 \b");
          if (kcountHEnegativedirectionDigiD2 == 13)
            HEnegativedirectionDigiD2->SetXTitle("D for HE- jeta =-17; depth = 2 \b");
          HEnegativedirectionDigiD2->Draw("Error");
          kcountHEnegativedirectionDigiD2++;
          if (kcountHEnegativedirectionDigiD2 > 13)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 < 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DdigiNegativeDirectionhistD1PhiSymmetryDepth2HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEnegativedirectionDigiD2)
    delete h2CeffHEnegativedirectionDigiD2;
  //========================================================================================== 22222216
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=3
  //cout<<"      1D plot: D vs phi , different eta,  depth=3 *****" <<endl;
  c3x5->Clear();
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEnegativedirectionDigiD3 = 1;
  TH1F *h2CeffHEnegativedirectionDigiD3 = new TH1F("h2CeffHEnegativedirectionDigiD3", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionDigiD:
    if (jeta - 41 < 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=3
      for (int i = 2; i < 3; i++) {
        TH1F *HEnegativedirectionDigiD3 = (TH1F *)h2CeffHEnegativedirectionDigiD3->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = digivariancehe[i][jeta][jphi];
          if (adigihe[i][jeta][jphi] > 0.) {
            HEnegativedirectionDigiD3->Fill(jphi, ccc1);
            ccctest = 1.;  //HEnegativedirectionDigiD3->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1616       kcountHEnegativedirectionDigiD3   =     "<<kcountHEnegativedirectionDigiD3  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEnegativedirectionDigiD3);
          HEnegativedirectionDigiD3->SetMarkerStyle(20);
          HEnegativedirectionDigiD3->SetMarkerSize(0.4);
          HEnegativedirectionDigiD3->GetYaxis()->SetLabelSize(0.04);
          HEnegativedirectionDigiD3->SetXTitle("HEnegativedirectionDigiD3 \b");
          HEnegativedirectionDigiD3->SetMarkerColor(2);
          HEnegativedirectionDigiD3->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEnegativedirectionDigiD3 == 1)
            HEnegativedirectionDigiD3->SetXTitle("D for HE- jeta =-29; depth = 3 \b");
          if (kcountHEnegativedirectionDigiD3 == 2)
            HEnegativedirectionDigiD3->SetXTitle("D for HE- jeta =-28; depth = 3 \b");
          if (kcountHEnegativedirectionDigiD3 == 3)
            HEnegativedirectionDigiD3->SetXTitle("D for HE- jeta =-27; depth = 3 \b");
          if (kcountHEnegativedirectionDigiD3 == 4)
            HEnegativedirectionDigiD3->SetXTitle("D for HE- jeta =-26; depth = 3 \b");
          if (kcountHEnegativedirectionDigiD3 == 5)
            HEnegativedirectionDigiD3->SetXTitle("D for HE- jeta =-25; depth = 3 \b");
          if (kcountHEnegativedirectionDigiD3 == 6)
            HEnegativedirectionDigiD3->SetXTitle("D for HE- jeta =-24; depth = 3 \b");
          if (kcountHEnegativedirectionDigiD3 == 7)
            HEnegativedirectionDigiD3->SetXTitle("D for HE- jeta =-23; depth = 3 \b");
          if (kcountHEnegativedirectionDigiD3 == 8)
            HEnegativedirectionDigiD3->SetXTitle("D for HE- jeta =-22; depth = 3 \b");
          if (kcountHEnegativedirectionDigiD3 == 9)
            HEnegativedirectionDigiD3->SetXTitle("D for HE- jeta =-21; depth = 3 \b");
          if (kcountHEnegativedirectionDigiD3 == 10)
            HEnegativedirectionDigiD3->SetXTitle("D for HE- jeta =-20; depth = 3 \b");
          if (kcountHEnegativedirectionDigiD3 == 11)
            HEnegativedirectionDigiD3->SetXTitle("D for HE- jeta =-19; depth = 3 \b");
          if (kcountHEnegativedirectionDigiD3 == 12)
            HEnegativedirectionDigiD3->SetXTitle("D for HE- jeta =-18; depth = 3 \b");
          if (kcountHEnegativedirectionDigiD3 == 13)
            HEnegativedirectionDigiD3->SetXTitle("D for HE- jeta =-17; depth = 3 \b");
          HEnegativedirectionDigiD3->Draw("Error");
          kcountHEnegativedirectionDigiD3++;
          if (kcountHEnegativedirectionDigiD3 > 13)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 < 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DdigiNegativeDirectionhistD1PhiSymmetryDepth3HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEnegativedirectionDigiD3)
    delete h2CeffHEnegativedirectionDigiD3;
  //========================================================================================== 22222217
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=4
  //cout<<"      1D plot: D vs phi , different eta,  depth=4 *****" <<endl;
  c3x5->Clear();
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEnegativedirectionDigiD4 = 1;
  TH1F *h2CeffHEnegativedirectionDigiD4 = new TH1F("h2CeffHEnegativedirectionDigiD4", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionDigiD:
    if (jeta - 41 < 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=4
      for (int i = 3; i < 4; i++) {
        TH1F *HEnegativedirectionDigiD4 = (TH1F *)h2CeffHEnegativedirectionDigiD4->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = digivariancehe[i][jeta][jphi];
          if (adigihe[i][jeta][jphi] > 0.) {
            HEnegativedirectionDigiD4->Fill(jphi, ccc1);
            ccctest = 1.;  //HEnegativedirectionDigiD4->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1717       kcountHEnegativedirectionDigiD4   =     "<<kcountHEnegativedirectionDigiD4  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEnegativedirectionDigiD4);
          HEnegativedirectionDigiD4->SetMarkerStyle(20);
          HEnegativedirectionDigiD4->SetMarkerSize(0.4);
          HEnegativedirectionDigiD4->GetYaxis()->SetLabelSize(0.04);
          HEnegativedirectionDigiD4->SetXTitle("HEnegativedirectionDigiD4 \b");
          HEnegativedirectionDigiD4->SetMarkerColor(2);
          HEnegativedirectionDigiD4->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEnegativedirectionDigiD4 == 1)
            HEnegativedirectionDigiD4->SetXTitle("D for HE- jeta =-28; depth = 4 \b");
          if (kcountHEnegativedirectionDigiD4 == 2)
            HEnegativedirectionDigiD4->SetXTitle("D for HE- jeta =-27; depth = 4 \b");
          if (kcountHEnegativedirectionDigiD4 == 3)
            HEnegativedirectionDigiD4->SetXTitle("D for HE- jeta =-26; depth = 4 \b");
          if (kcountHEnegativedirectionDigiD4 == 4)
            HEnegativedirectionDigiD4->SetXTitle("D for HE- jeta =-25; depth = 4 \b");
          if (kcountHEnegativedirectionDigiD4 == 5)
            HEnegativedirectionDigiD4->SetXTitle("D for HE- jeta =-24; depth = 4 \b");
          if (kcountHEnegativedirectionDigiD4 == 6)
            HEnegativedirectionDigiD4->SetXTitle("D for HE- jeta =-23; depth = 4 \b");
          if (kcountHEnegativedirectionDigiD4 == 7)
            HEnegativedirectionDigiD4->SetXTitle("D for HE- jeta =-22; depth = 4 \b");
          if (kcountHEnegativedirectionDigiD4 == 8)
            HEnegativedirectionDigiD4->SetXTitle("D for HE- jeta =-21; depth = 4 \b");
          if (kcountHEnegativedirectionDigiD4 == 9)
            HEnegativedirectionDigiD4->SetXTitle("D for HE- jeta =-20; depth = 4 \b");
          if (kcountHEnegativedirectionDigiD4 == 10)
            HEnegativedirectionDigiD4->SetXTitle("D for HE- jeta =-19; depth = 4 \b");
          if (kcountHEnegativedirectionDigiD4 == 11)
            HEnegativedirectionDigiD4->SetXTitle("D for HE- jeta =-18; depth = 4 \b");
          if (kcountHEnegativedirectionDigiD4 == 12)
            HEnegativedirectionDigiD4->SetXTitle("D for HE- jeta =-16; depth = 4 \b");
          HEnegativedirectionDigiD4->Draw("Error");
          kcountHEnegativedirectionDigiD4++;
          if (kcountHEnegativedirectionDigiD4 > 12)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 < 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DdigiNegativeDirectionhistD1PhiSymmetryDepth4HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEnegativedirectionDigiD4)
    delete h2CeffHEnegativedirectionDigiD4;
  //========================================================================================== 22222218
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=5
  //cout<<"      1D plot: D vs phi , different eta,  depth=5 *****" <<endl;
  c3x5->Clear();
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEnegativedirectionDigiD5 = 1;
  TH1F *h2CeffHEnegativedirectionDigiD5 = new TH1F("h2CeffHEnegativedirectionDigiD5", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionDigiD:
    if (jeta - 41 < 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=5
      for (int i = 4; i < 5; i++) {
        TH1F *HEnegativedirectionDigiD5 = (TH1F *)h2CeffHEnegativedirectionDigiD5->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = digivariancehe[i][jeta][jphi];
          if (adigihe[i][jeta][jphi] > 0.) {
            HEnegativedirectionDigiD5->Fill(jphi, ccc1);
            ccctest = 1.;  //HEnegativedirectionDigiD5->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1818       kcountHEnegativedirectionDigiD5   =     "<<kcountHEnegativedirectionDigiD5  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEnegativedirectionDigiD5);
          HEnegativedirectionDigiD5->SetMarkerStyle(20);
          HEnegativedirectionDigiD5->SetMarkerSize(0.4);
          HEnegativedirectionDigiD5->GetYaxis()->SetLabelSize(0.04);
          HEnegativedirectionDigiD5->SetXTitle("HEnegativedirectionDigiD5 \b");
          HEnegativedirectionDigiD5->SetMarkerColor(2);
          HEnegativedirectionDigiD5->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEnegativedirectionDigiD5 == 1)
            HEnegativedirectionDigiD5->SetXTitle("D for HE- jeta =-28; depth = 5 \b");
          if (kcountHEnegativedirectionDigiD5 == 2)
            HEnegativedirectionDigiD5->SetXTitle("D for HE- jeta =-27; depth = 5 \b");
          if (kcountHEnegativedirectionDigiD5 == 3)
            HEnegativedirectionDigiD5->SetXTitle("D for HE- jeta =-26; depth = 5 \b");
          if (kcountHEnegativedirectionDigiD5 == 4)
            HEnegativedirectionDigiD5->SetXTitle("D for HE- jeta =-25; depth = 5 \b");
          if (kcountHEnegativedirectionDigiD5 == 5)
            HEnegativedirectionDigiD5->SetXTitle("D for HE- jeta =-24; depth = 5 \b");
          if (kcountHEnegativedirectionDigiD5 == 6)
            HEnegativedirectionDigiD5->SetXTitle("D for HE- jeta =-23; depth = 5 \b");
          if (kcountHEnegativedirectionDigiD5 == 7)
            HEnegativedirectionDigiD5->SetXTitle("D for HE- jeta =-22; depth = 5 \b");
          if (kcountHEnegativedirectionDigiD5 == 8)
            HEnegativedirectionDigiD5->SetXTitle("D for HE- jeta =-21; depth = 5 \b");
          if (kcountHEnegativedirectionDigiD5 == 9)
            HEnegativedirectionDigiD5->SetXTitle("D for HE- jeta =-20; depth = 5 \b");
          if (kcountHEnegativedirectionDigiD5 == 10)
            HEnegativedirectionDigiD5->SetXTitle("D for HE- jeta =-19; depth = 5 \b");
          if (kcountHEnegativedirectionDigiD5 == 11)
            HEnegativedirectionDigiD5->SetXTitle("D for HE- jeta =-18; depth = 5 \b");
          HEnegativedirectionDigiD5->Draw("Error");
          kcountHEnegativedirectionDigiD5++;
          if (kcountHEnegativedirectionDigiD5 > 11)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 < 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DdigiNegativeDirectionhistD1PhiSymmetryDepth5HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEnegativedirectionDigiD5)
    delete h2CeffHEnegativedirectionDigiD5;
  //========================================================================================== 22222219
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=6
  //cout<<"      1D plot: D vs phi , different eta,  depth=6 *****" <<endl;
  c3x5->Clear();
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEnegativedirectionDigiD6 = 1;
  TH1F *h2CeffHEnegativedirectionDigiD6 = new TH1F("h2CeffHEnegativedirectionDigiD6", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionDigiD:
    if (jeta - 41 < 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=6
      for (int i = 5; i < 6; i++) {
        TH1F *HEnegativedirectionDigiD6 = (TH1F *)h2CeffHEnegativedirectionDigiD6->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = digivariancehe[i][jeta][jphi];
          if (adigihe[i][jeta][jphi] > 0.) {
            HEnegativedirectionDigiD6->Fill(jphi, ccc1);
            ccctest = 1.;  //HEnegativedirectionDigiD6->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1919       kcountHEnegativedirectionDigiD6   =     "<<kcountHEnegativedirectionDigiD6  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEnegativedirectionDigiD6);
          HEnegativedirectionDigiD6->SetMarkerStyle(20);
          HEnegativedirectionDigiD6->SetMarkerSize(0.4);
          HEnegativedirectionDigiD6->GetYaxis()->SetLabelSize(0.04);
          HEnegativedirectionDigiD6->SetXTitle("HEnegativedirectionDigiD6 \b");
          HEnegativedirectionDigiD6->SetMarkerColor(2);
          HEnegativedirectionDigiD6->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEnegativedirectionDigiD6 == 1)
            HEnegativedirectionDigiD6->SetXTitle("D for HE- jeta =-28; depth = 6 \b");
          if (kcountHEnegativedirectionDigiD6 == 2)
            HEnegativedirectionDigiD6->SetXTitle("D for HE- jeta =-27; depth = 6 \b");
          if (kcountHEnegativedirectionDigiD6 == 3)
            HEnegativedirectionDigiD6->SetXTitle("D for HE- jeta =-26; depth = 6 \b");
          if (kcountHEnegativedirectionDigiD6 == 4)
            HEnegativedirectionDigiD6->SetXTitle("D for HE- jeta =-25; depth = 6 \b");
          if (kcountHEnegativedirectionDigiD6 == 5)
            HEnegativedirectionDigiD6->SetXTitle("D for HE- jeta =-24; depth = 6 \b");
          if (kcountHEnegativedirectionDigiD6 == 6)
            HEnegativedirectionDigiD6->SetXTitle("D for HE- jeta =-23; depth = 6 \b");
          if (kcountHEnegativedirectionDigiD6 == 7)
            HEnegativedirectionDigiD6->SetXTitle("D for HE- jeta =-22; depth = 6 \b");
          if (kcountHEnegativedirectionDigiD6 == 8)
            HEnegativedirectionDigiD6->SetXTitle("D for HE- jeta =-21; depth = 6 \b");
          if (kcountHEnegativedirectionDigiD6 == 9)
            HEnegativedirectionDigiD6->SetXTitle("D for HE- jeta =-20; depth = 6 \b");
          if (kcountHEnegativedirectionDigiD6 == 10)
            HEnegativedirectionDigiD6->SetXTitle("D for HE- jeta =-19; depth = 6 \b");
          HEnegativedirectionDigiD6->Draw("Error");
          kcountHEnegativedirectionDigiD6++;
          if (kcountHEnegativedirectionDigiD6 > 10)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 < 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DdigiNegativeDirectionhistD1PhiSymmetryDepth6HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEnegativedirectionDigiD6)
    delete h2CeffHEnegativedirectionDigiD6;
  //========================================================================================== 22222220
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=7
  //cout<<"      1D plot: D vs phi , different eta,  depth=7 *****" <<endl;
  c3x5->Clear();
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEnegativedirectionDigiD7 = 1;
  TH1F *h2CeffHEnegativedirectionDigiD7 = new TH1F("h2CeffHEnegativedirectionDigiD7", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionDigiD:
    if (jeta - 41 < 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=7
      for (int i = 6; i < 7; i++) {
        TH1F *HEnegativedirectionDigiD7 = (TH1F *)h2CeffHEnegativedirectionDigiD7->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = digivariancehe[i][jeta][jphi];
          if (adigihe[i][jeta][jphi] > 0.) {
            HEnegativedirectionDigiD7->Fill(jphi, ccc1);
            ccctest = 1.;  //HEnegativedirectionDigiD7->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest != 0.) {
          //cout<<"2020       kcountHEnegativedirectionDigiD7   =     "<<kcountHEnegativedirectionDigiD7  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEnegativedirectionDigiD7);
          HEnegativedirectionDigiD7->SetMarkerStyle(20);
          HEnegativedirectionDigiD7->SetMarkerSize(0.4);
          HEnegativedirectionDigiD7->GetYaxis()->SetLabelSize(0.04);
          HEnegativedirectionDigiD7->SetXTitle("HEnegativedirectionDigiD7 \b");
          HEnegativedirectionDigiD7->SetMarkerColor(2);
          HEnegativedirectionDigiD7->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEnegativedirectionDigiD7 == 1)
            HEnegativedirectionDigiD7->SetXTitle("D for HE- jeta =-28; depth = 7 \b");
          if (kcountHEnegativedirectionDigiD7 == 2)
            HEnegativedirectionDigiD7->SetXTitle("D for HE- jeta =-27; depth = 7 \b");
          if (kcountHEnegativedirectionDigiD7 == 3)
            HEnegativedirectionDigiD7->SetXTitle("D for HE- jeta =-26; depth = 7 \b");
          HEnegativedirectionDigiD7->Draw("Error");
          kcountHEnegativedirectionDigiD7++;
          if (kcountHEnegativedirectionDigiD7 > 3)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 < 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DdigiNegativeDirectionhistD1PhiSymmetryDepth7HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEnegativedirectionDigiD7)
    delete h2CeffHEnegativedirectionDigiD7;
  //=====================================================================       END of Digi HE for phi-symmetry
  //=====================================================================       END of Digi HE for phi-symmetry
  //=====================================================================       END of Digi HE for phi-symmetry

  ////////////////////////////////////////////////////////////////////////////////////////////////////         Phi-symmetry for Calibration Group:    Digi HF
  ////////////////////////////////////////////////////////////////////////////////////////////////////         Phi-symmetry for Calibration Group:    Digi HF
  ////////////////////////////////////////////////////////////////////////////////////////////////////         Phi-symmetry for Calibration Group:    Digi HF
  //  int k_max[5]={0,4,7,4,4}; // maximum depth for each subdet
  //ndepth = k_max[5];
  ndepth = 4;
  double adigiHF[ndepth][njeta][njphi];
  double digivarianceHF[ndepth][njeta][njphi];
  //                                   RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR:   Digi HF
  TH2F *amplitudechannel1HF1 = (TH2F *)dir->FindObjectAny("h_amplitudechannel1_HF1");
  TH2F *amplitudechannel0HF1 = (TH2F *)dir->FindObjectAny("h_amplitudechannel0_HF1");
  TH2F *amplitudechannelHF1 = (TH2F *)amplitudechannel1HF1->Clone("amplitudechannelHF1");
  amplitudechannelHF1->Divide(amplitudechannel1HF1, amplitudechannel0HF1, 1, 1, "B");
  TH2F *amplitudechannel1HF2 = (TH2F *)dir->FindObjectAny("h_amplitudechannel1_HF2");
  TH2F *amplitudechannel0HF2 = (TH2F *)dir->FindObjectAny("h_amplitudechannel0_HF2");
  TH2F *amplitudechannelHF2 = (TH2F *)amplitudechannel1HF2->Clone("amplitudechannelHF2");
  amplitudechannelHF2->Divide(amplitudechannel1HF2, amplitudechannel0HF2, 1, 1, "B");
  TH2F *amplitudechannel1HF3 = (TH2F *)dir->FindObjectAny("h_amplitudechannel1_HF3");
  TH2F *amplitudechannel0HF3 = (TH2F *)dir->FindObjectAny("h_amplitudechannel0_HF3");
  TH2F *amplitudechannelHF3 = (TH2F *)amplitudechannel1HF3->Clone("amplitudechannelHF3");
  amplitudechannelHF3->Divide(amplitudechannel1HF3, amplitudechannel0HF3, 1, 1, "B");
  TH2F *amplitudechannel1HF4 = (TH2F *)dir->FindObjectAny("h_amplitudechannel1_HF4");
  TH2F *amplitudechannel0HF4 = (TH2F *)dir->FindObjectAny("h_amplitudechannel0_HF4");
  TH2F *amplitudechannelHF4 = (TH2F *)amplitudechannel1HF4->Clone("amplitudechannelHF4");
  amplitudechannelHF4->Divide(amplitudechannel1HF4, amplitudechannel0HF4, 1, 1, "B");
  for (int jeta = 0; jeta < njeta; jeta++) {
    //====================================================================== PHI normalization & put R into massive adigiHF
    //preparation for PHI normalization:
    double sumdigiHF0 = 0;
    int nsumdigiHF0 = 0;
    double sumdigiHF1 = 0;
    int nsumdigiHF1 = 0;
    double sumdigiHF2 = 0;
    int nsumdigiHF2 = 0;
    double sumdigiHF3 = 0;
    int nsumdigiHF3 = 0;
    for (int jphi = 0; jphi < njphi; jphi++) {
      adigiHF[0][jeta][jphi] = amplitudechannelHF1->GetBinContent(jeta + 1, jphi + 1);
      adigiHF[1][jeta][jphi] = amplitudechannelHF2->GetBinContent(jeta + 1, jphi + 1);
      adigiHF[2][jeta][jphi] = amplitudechannelHF3->GetBinContent(jeta + 1, jphi + 1);
      adigiHF[3][jeta][jphi] = amplitudechannelHF4->GetBinContent(jeta + 1, jphi + 1);
      if (adigiHF[0][jeta][jphi] > 0.) {
        sumdigiHF0 += adigiHF[0][jeta][jphi];
        ++nsumdigiHF0;
      }
      if (adigiHF[1][jeta][jphi] > 0.) {
        sumdigiHF1 += adigiHF[1][jeta][jphi];
        ++nsumdigiHF1;
      }
      if (adigiHF[2][jeta][jphi] > 0.) {
        sumdigiHF2 += adigiHF[2][jeta][jphi];
        ++nsumdigiHF2;
      }
      if (adigiHF[3][jeta][jphi] > 0.) {
        sumdigiHF3 += adigiHF[3][jeta][jphi];
        ++nsumdigiHF3;
      }
    }  // phi
    // PHI normalization:
    for (int jphi = 0; jphi < njphi; jphi++) {
      if (adigiHF[0][jeta][jphi] > 0.)
        adigiHF[0][jeta][jphi] /= (sumdigiHF0 / nsumdigiHF0);
      if (adigiHF[1][jeta][jphi] > 0.)
        adigiHF[1][jeta][jphi] /= (sumdigiHF1 / nsumdigiHF1);
      if (adigiHF[2][jeta][jphi] > 0.)
        adigiHF[2][jeta][jphi] /= (sumdigiHF2 / nsumdigiHF2);
      if (adigiHF[3][jeta][jphi] > 0.)
        adigiHF[3][jeta][jphi] /= (sumdigiHF3 / nsumdigiHF3);
    }  // phi
  }    //eta
  //------------------------  2D-eta/phi-plot: R, averaged over depthfs
  //======================================================================
  //======================================================================
  //cout<<"      R2D-eta/phi-plot: R, averaged over depthfs *****" <<endl;
  c1x0->Clear();
  /////////////////
  c1x0->Divide(1, 1);
  c1x0->cd(1);
  TH2F *GefzRdigiHF42D = new TH2F("GefzRdigiHF42D", "", neta, -41., 41., nphi, 0., 72.);
  TH2F *GefzRdigiHF42D0 = new TH2F("GefzRdigiHF42D0", "", neta, -41., 41., nphi, 0., 72.);
  TH2F *GefzRdigiHF42DF = (TH2F *)GefzRdigiHF42D0->Clone("GefzRdigiHF42DF");
  for (int i = 0; i < ndepth; i++) {
    for (int jeta = 0; jeta < neta; jeta++) {
      for (int jphi = 0; jphi < nphi; jphi++) {
        double ccc1 = adigiHF[i][jeta][jphi];
        int k2plot = jeta - 41;
        int kkk = k2plot;  //if(k2plot >0 ) kkk=k2plot+1; //-41 +41 !=0
        if (ccc1 != 0.) {
          GefzRdigiHF42D->Fill(kkk, jphi, ccc1);
          GefzRdigiHF42D0->Fill(kkk, jphi, 1.);
        }
      }
    }
  }
  GefzRdigiHF42DF->Divide(GefzRdigiHF42D, GefzRdigiHF42D0, 1, 1, "B");  // average A
  gPad->SetGridy();
  gPad->SetGridx();  //      gPad->SetLogz();
  GefzRdigiHF42DF->SetMarkerStyle(20);
  GefzRdigiHF42DF->SetMarkerSize(0.4);
  GefzRdigiHF42DF->GetZaxis()->SetLabelSize(0.08);
  GefzRdigiHF42DF->SetXTitle("<R>_depth       #eta  \b");
  GefzRdigiHF42DF->SetYTitle("      #phi \b");
  GefzRdigiHF42DF->SetZTitle("<R>_depth \b");
  GefzRdigiHF42DF->SetMarkerColor(2);
  GefzRdigiHF42DF->SetLineColor(
      0);  //      GefzRdigiHF42DF->SetMaximum(1.000);  //      GefzRdigiHF42DF->SetMinimum(1.0);
  GefzRdigiHF42DF->Draw("COLZ");
  /////////////////
  c1x0->Update();
  c1x0->Print("RdigiGeneralD2PhiSymmetryHF.png");
  c1x0->Clear();
  // clean-up
  if (GefzRdigiHF42D)
    delete GefzRdigiHF42D;
  if (GefzRdigiHF42D0)
    delete GefzRdigiHF42D0;
  if (GefzRdigiHF42DF)
    delete GefzRdigiHF42DF;
  //====================================================================== 1D plot: R vs phi , averaged over depthfs & eta
  //======================================================================
  //cout<<"      1D plot: R vs phi , averaged over depthfs & eta *****" <<endl;
  c1x1->Clear();
  /////////////////
  c1x1->Divide(1, 1);
  c1x1->cd(1);
  TH1F *GefzRdigiHF41D = new TH1F("GefzRdigiHF41D", "", nphi, 0., 72.);
  TH1F *GefzRdigiHF41D0 = new TH1F("GefzRdigiHF41D0", "", nphi, 0., 72.);
  TH1F *GefzRdigiHF41DF = (TH1F *)GefzRdigiHF41D0->Clone("GefzRdigiHF41DF");
  for (int jphi = 0; jphi < nphi; jphi++) {
    for (int jeta = 0; jeta < neta; jeta++) {
      for (int i = 0; i < ndepth; i++) {
        double ccc1 = adigiHF[i][jeta][jphi];
        if (ccc1 != 0.) {
          GefzRdigiHF41D->Fill(jphi, ccc1);
          GefzRdigiHF41D0->Fill(jphi, 1.);
        }
      }
    }
  }
  GefzRdigiHF41DF->Divide(GefzRdigiHF41D, GefzRdigiHF41D0, 1, 1, "B");  // R averaged over depthfs & eta
  GefzRdigiHF41D0->Sumw2();
  //    for (int jphi=1;jphi<73;jphi++) {GefzRdigiHF41DF->SetBinError(jphi,0.01);}
  gPad->SetGridy();
  gPad->SetGridx();  //      gPad->SetLogz();
  GefzRdigiHF41DF->SetMarkerStyle(20);
  GefzRdigiHF41DF->SetMarkerSize(1.4);
  GefzRdigiHF41DF->GetZaxis()->SetLabelSize(0.08);
  GefzRdigiHF41DF->SetXTitle("#phi  \b");
  GefzRdigiHF41DF->SetYTitle("  <R> \b");
  GefzRdigiHF41DF->SetZTitle("<R>_PHI  - AllDepthfs \b");
  GefzRdigiHF41DF->SetMarkerColor(4);
  GefzRdigiHF41DF->SetLineColor(
      4);  // GefzRdigiHF41DF->SetMinimum(0.8);     //      GefzRdigiHF41DF->SetMaximum(1.000);
  GefzRdigiHF41DF->Draw("Error");
  /////////////////
  c1x1->Update();
  c1x1->Print("RdigiGeneralD1PhiSymmetryHF.png");
  c1x1->Clear();
  // clean-up
  if (GefzRdigiHF41D)
    delete GefzRdigiHF41D;
  if (GefzRdigiHF41D0)
    delete GefzRdigiHF41D0;
  if (GefzRdigiHF41DF)
    delete GefzRdigiHF41DF;
  //========================================================================================== 4
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=1
  //cout<<"      1D plot: R vs phi , different eta,  depth=1 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHFpositivedirectionDigi1 = 1;
  TH1F *h2CeffHFpositivedirectionDigi1 = new TH1F("h2CeffHFpositivedirectionDigi1", "", nphi, 0., 72.);
  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionDigi:
    if (jeta - 41 >= 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=1
      for (int i = 0; i < 1; i++) {
        TH1F *HFpositivedirectionDigi1 = (TH1F *)h2CeffHFpositivedirectionDigi1->Clone("twod1");
        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = adigiHF[i][jeta][jphi];
          if (ccc1 != 0.) {
            HFpositivedirectionDigi1->Fill(jphi, ccc1);
            ccctest = 1.;  //HFpositivedirectionDigi1->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //	  cout<<"444        kcountHFpositivedirectionDigi1   =     "<<kcountHFpositivedirectionDigi1  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHFpositivedirectionDigi1);
          HFpositivedirectionDigi1->SetMarkerStyle(20);
          HFpositivedirectionDigi1->SetMarkerSize(0.4);
          HFpositivedirectionDigi1->GetYaxis()->SetLabelSize(0.04);
          HFpositivedirectionDigi1->SetXTitle("HFpositivedirectionDigi1 \b");
          HFpositivedirectionDigi1->SetMarkerColor(2);
          HFpositivedirectionDigi1->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHFpositivedirectionDigi1 == 1)
            HFpositivedirectionDigi1->SetXTitle("R for HF+ jeta = 28; depth = 1 \b");
          if (kcountHFpositivedirectionDigi1 == 2)
            HFpositivedirectionDigi1->SetXTitle("R for HF+ jeta = 29; depth = 1 \b");
          if (kcountHFpositivedirectionDigi1 == 3)
            HFpositivedirectionDigi1->SetXTitle("R for HF+ jeta = 30; depth = 1 \b");
          if (kcountHFpositivedirectionDigi1 == 4)
            HFpositivedirectionDigi1->SetXTitle("R for HF+ jeta = 31; depth = 1 \b");
          if (kcountHFpositivedirectionDigi1 == 5)
            HFpositivedirectionDigi1->SetXTitle("R for HF+ jeta = 32; depth = 1 \b");
          if (kcountHFpositivedirectionDigi1 == 6)
            HFpositivedirectionDigi1->SetXTitle("R for HF+ jeta = 33; depth = 1 \b");
          if (kcountHFpositivedirectionDigi1 == 7)
            HFpositivedirectionDigi1->SetXTitle("R for HF+ jeta = 34; depth = 1 \b");
          if (kcountHFpositivedirectionDigi1 == 8)
            HFpositivedirectionDigi1->SetXTitle("R for HF+ jeta = 35; depth = 1 \b");
          if (kcountHFpositivedirectionDigi1 == 9)
            HFpositivedirectionDigi1->SetXTitle("R for HF+ jeta = 36; depth = 1 \b");
          if (kcountHFpositivedirectionDigi1 == 10)
            HFpositivedirectionDigi1->SetXTitle("R for HF+ jeta = 37; depth = 1 \b");
          if (kcountHFpositivedirectionDigi1 == 11)
            HFpositivedirectionDigi1->SetXTitle("R for HF+ jeta = 38; depth = 1 \b");
          if (kcountHFpositivedirectionDigi1 == 12)
            HFpositivedirectionDigi1->SetXTitle("R for HF+ jeta = 39; depth = 1 \b");
          if (kcountHFpositivedirectionDigi1 == 13)
            HFpositivedirectionDigi1->SetXTitle("R for HF+ jeta = 40; depth = 1 \b");
          HFpositivedirectionDigi1->Draw("Error");
          kcountHFpositivedirectionDigi1++;
          if (kcountHFpositivedirectionDigi1 > 13)
            break;  //
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RdigiPositiveDirectionhistD1PhiSymmetryDepth1HF.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHFpositivedirectionDigi1)
    delete h2CeffHFpositivedirectionDigi1;

  //========================================================================================== 5
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=2
  //  cout<<"      1D plot: R vs phi , different eta,  depth=2 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHFpositivedirectionDigi2 = 1;
  TH1F *h2CeffHFpositivedirectionDigi2 = new TH1F("h2CeffHFpositivedirectionDigi2", "", nphi, 0., 72.);
  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionDigi:
    if (jeta - 41 >= 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=2
      for (int i = 1; i < 2; i++) {
        TH1F *HFpositivedirectionDigi2 = (TH1F *)h2CeffHFpositivedirectionDigi2->Clone("twod1");
        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = adigiHF[i][jeta][jphi];
          if (ccc1 != 0.) {
            HFpositivedirectionDigi2->Fill(jphi, ccc1);
            ccctest = 1.;  //HFpositivedirectionDigi2->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"555        kcountHFpositivedirectionDigi2   =     "<<kcountHFpositivedirectionDigi2  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHFpositivedirectionDigi2);
          HFpositivedirectionDigi2->SetMarkerStyle(20);
          HFpositivedirectionDigi2->SetMarkerSize(0.4);
          HFpositivedirectionDigi2->GetYaxis()->SetLabelSize(0.04);
          HFpositivedirectionDigi2->SetXTitle("HFpositivedirectionDigi2 \b");
          HFpositivedirectionDigi2->SetMarkerColor(2);
          HFpositivedirectionDigi2->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHFpositivedirectionDigi2 == 1)
            HFpositivedirectionDigi2->SetXTitle("R for HF+ jeta = 28; depth = 2 \b");
          if (kcountHFpositivedirectionDigi2 == 2)
            HFpositivedirectionDigi2->SetXTitle("R for HF+ jeta = 29; depth = 2 \b");
          if (kcountHFpositivedirectionDigi2 == 3)
            HFpositivedirectionDigi2->SetXTitle("R for HF+ jeta = 30; depth = 2 \b");
          if (kcountHFpositivedirectionDigi2 == 4)
            HFpositivedirectionDigi2->SetXTitle("R for HF+ jeta = 31; depth = 2 \b");
          if (kcountHFpositivedirectionDigi2 == 5)
            HFpositivedirectionDigi2->SetXTitle("R for HF+ jeta = 32; depth = 2 \b");
          if (kcountHFpositivedirectionDigi2 == 6)
            HFpositivedirectionDigi2->SetXTitle("R for HF+ jeta = 33; depth = 2 \b");
          if (kcountHFpositivedirectionDigi2 == 7)
            HFpositivedirectionDigi2->SetXTitle("R for HF+ jeta = 34; depth = 2 \b");
          if (kcountHFpositivedirectionDigi2 == 8)
            HFpositivedirectionDigi2->SetXTitle("R for HF+ jeta = 35; depth = 2 \b");
          if (kcountHFpositivedirectionDigi2 == 9)
            HFpositivedirectionDigi2->SetXTitle("R for HF+ jeta = 36; depth = 2 \b");
          if (kcountHFpositivedirectionDigi2 == 10)
            HFpositivedirectionDigi2->SetXTitle("R for HF+ jeta = 37; depth = 2 \b");
          if (kcountHFpositivedirectionDigi2 == 11)
            HFpositivedirectionDigi2->SetXTitle("R for HF+ jeta = 38; depth = 2 \b");
          if (kcountHFpositivedirectionDigi2 == 12)
            HFpositivedirectionDigi2->SetXTitle("R for HF+ jeta = 39; depth = 2 \b");
          if (kcountHFpositivedirectionDigi2 == 13)
            HFpositivedirectionDigi2->SetXTitle("R for HF+ jeta = 40; depth = 2 \b");
          HFpositivedirectionDigi2->Draw("Error");
          kcountHFpositivedirectionDigi2++;
          if (kcountHFpositivedirectionDigi2 > 13)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RdigiPositiveDirectionhistD1PhiSymmetryDepth2HF.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHFpositivedirectionDigi2)
    delete h2CeffHFpositivedirectionDigi2;
  //========================================================================================== 6
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=3
  //cout<<"      1D plot: R vs phi , different eta,  depth=3 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHFpositivedirectionDigi3 = 1;
  TH1F *h2CeffHFpositivedirectionDigi3 = new TH1F("h2CeffHFpositivedirectionDigi3", "", nphi, 0., 72.);
  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionDigi:
    if (jeta - 41 >= 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=3
      for (int i = 2; i < 3; i++) {
        TH1F *HFpositivedirectionDigi3 = (TH1F *)h2CeffHFpositivedirectionDigi3->Clone("twod1");
        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = adigiHF[i][jeta][jphi];
          if (ccc1 != 0.) {
            HFpositivedirectionDigi3->Fill(jphi, ccc1);
            ccctest = 1.;  //HFpositivedirectionDigi3->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"666        kcountHFpositivedirectionDigi3   =     "<<kcountHFpositivedirectionDigi3  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHFpositivedirectionDigi3);
          HFpositivedirectionDigi3->SetMarkerStyle(20);
          HFpositivedirectionDigi3->SetMarkerSize(0.4);
          HFpositivedirectionDigi3->GetYaxis()->SetLabelSize(0.04);
          HFpositivedirectionDigi3->SetXTitle("HFpositivedirectionDigi3 \b");
          HFpositivedirectionDigi3->SetMarkerColor(2);
          HFpositivedirectionDigi3->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHFpositivedirectionDigi3 == 1)
            HFpositivedirectionDigi3->SetXTitle("R for HF+ jeta = 28; depth = 3 \b");
          if (kcountHFpositivedirectionDigi3 == 2)
            HFpositivedirectionDigi3->SetXTitle("R for HF+ jeta = 29; depth = 3 \b");
          if (kcountHFpositivedirectionDigi3 == 3)
            HFpositivedirectionDigi3->SetXTitle("R for HF+ jeta = 30; depth = 3 \b");
          if (kcountHFpositivedirectionDigi3 == 4)
            HFpositivedirectionDigi3->SetXTitle("R for HF+ jeta = 31; depth = 3 \b");
          if (kcountHFpositivedirectionDigi3 == 5)
            HFpositivedirectionDigi3->SetXTitle("R for HF+ jeta = 32; depth = 3 \b");
          if (kcountHFpositivedirectionDigi3 == 6)
            HFpositivedirectionDigi3->SetXTitle("R for HF+ jeta = 33; depth = 3 \b");
          if (kcountHFpositivedirectionDigi3 == 7)
            HFpositivedirectionDigi3->SetXTitle("R for HF+ jeta = 34; depth = 3 \b");
          if (kcountHFpositivedirectionDigi3 == 8)
            HFpositivedirectionDigi3->SetXTitle("R for HF+ jeta = 35; depth = 3 \b");
          if (kcountHFpositivedirectionDigi3 == 9)
            HFpositivedirectionDigi3->SetXTitle("R for HF+ jeta = 36; depth = 3 \b");
          if (kcountHFpositivedirectionDigi3 == 10)
            HFpositivedirectionDigi3->SetXTitle("R for HF+ jeta = 37; depth = 3 \b");
          if (kcountHFpositivedirectionDigi3 == 11)
            HFpositivedirectionDigi3->SetXTitle("R for HF+ jeta = 38; depth = 3 \b");
          if (kcountHFpositivedirectionDigi3 == 12)
            HFpositivedirectionDigi3->SetXTitle("R for HF+ jeta = 39; depth = 3 \b");
          if (kcountHFpositivedirectionDigi3 == 13)
            HFpositivedirectionDigi3->SetXTitle("R for HF+ jeta = 40; depth = 3 \b");
          HFpositivedirectionDigi3->Draw("Error");
          kcountHFpositivedirectionDigi3++;
          if (kcountHFpositivedirectionDigi3 > 13)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RdigiPositiveDirectionhistD1PhiSymmetryDepth3HF.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHFpositivedirectionDigi3)
    delete h2CeffHFpositivedirectionDigi3;
  //========================================================================================== 7
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=4
  //cout<<"      1D plot: R vs phi , different eta,  depth=4 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHFpositivedirectionDigi4 = 1;
  TH1F *h2CeffHFpositivedirectionDigi4 = new TH1F("h2CeffHFpositivedirectionDigi4", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionDigi:
    if (jeta - 41 >= 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=4
      for (int i = 3; i < 4; i++) {
        TH1F *HFpositivedirectionDigi4 = (TH1F *)h2CeffHFpositivedirectionDigi4->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = adigiHF[i][jeta][jphi];
          if (ccc1 != 0.) {
            HFpositivedirectionDigi4->Fill(jphi, ccc1);
            ccctest = 1.;  //HFpositivedirectionDigi4->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"777        kcountHFpositivedirectionDigi4   =     "<<kcountHFpositivedirectionDigi4  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHFpositivedirectionDigi4);
          HFpositivedirectionDigi4->SetMarkerStyle(20);
          HFpositivedirectionDigi4->SetMarkerSize(0.4);
          HFpositivedirectionDigi4->GetYaxis()->SetLabelSize(0.04);
          HFpositivedirectionDigi4->SetXTitle("HFpositivedirectionDigi4 \b");
          HFpositivedirectionDigi4->SetMarkerColor(2);
          HFpositivedirectionDigi4->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHFpositivedirectionDigi4 == 1)
            HFpositivedirectionDigi4->SetXTitle("R for HF+ jeta = 28; depth = 4 \b");
          if (kcountHFpositivedirectionDigi4 == 2)
            HFpositivedirectionDigi4->SetXTitle("R for HF+ jeta = 29; depth = 4 \b");
          if (kcountHFpositivedirectionDigi4 == 3)
            HFpositivedirectionDigi4->SetXTitle("R for HF+ jeta = 30; depth = 4 \b");
          if (kcountHFpositivedirectionDigi4 == 4)
            HFpositivedirectionDigi4->SetXTitle("R for HF+ jeta = 31; depth = 4 \b");
          if (kcountHFpositivedirectionDigi4 == 5)
            HFpositivedirectionDigi4->SetXTitle("R for HF+ jeta = 32; depth = 4 \b");
          if (kcountHFpositivedirectionDigi4 == 6)
            HFpositivedirectionDigi4->SetXTitle("R for HF+ jeta = 33; depth = 4 \b");
          if (kcountHFpositivedirectionDigi4 == 7)
            HFpositivedirectionDigi4->SetXTitle("R for HF+ jeta = 34; depth = 4 \b");
          if (kcountHFpositivedirectionDigi4 == 8)
            HFpositivedirectionDigi4->SetXTitle("R for HF+ jeta = 35; depth = 4 \b");
          if (kcountHFpositivedirectionDigi4 == 9)
            HFpositivedirectionDigi4->SetXTitle("R for HF+ jeta = 36; depth = 4 \b");
          if (kcountHFpositivedirectionDigi4 == 10)
            HFpositivedirectionDigi4->SetXTitle("R for HF+ jeta = 37; depth = 4 \b");
          if (kcountHFpositivedirectionDigi4 == 11)
            HFpositivedirectionDigi4->SetXTitle("R for HF+ jeta = 38; depth = 4 \b");
          if (kcountHFpositivedirectionDigi4 == 12)
            HFpositivedirectionDigi4->SetXTitle("R for HF+ jeta = 39; depth = 4 \b");
          if (kcountHFpositivedirectionDigi4 == 13)
            HFpositivedirectionDigi4->SetXTitle("R for HF+ jeta = 40; depth = 4 \b");
          HFpositivedirectionDigi4->Draw("Error");
          kcountHFpositivedirectionDigi4++;
          if (kcountHFpositivedirectionDigi4 > 13)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RdigiPositiveDirectionhistD1PhiSymmetryDepth4HF.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHFpositivedirectionDigi4)
    delete h2CeffHFpositivedirectionDigi4;

  //========================================================================================== 1111114
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=1
  //cout<<"      1D plot: R vs phi , different eta,  depth=1 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHFnegativedirectionDigi1 = 1;
  TH1F *h2CeffHFnegativedirectionDigi1 = new TH1F("h2CeffHFnegativedirectionDigi1", "", nphi, 0., 72.);
  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionDigi:
    if (jeta - 41 < 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=1
      for (int i = 0; i < 1; i++) {
        TH1F *HFnegativedirectionDigi1 = (TH1F *)h2CeffHFnegativedirectionDigi1->Clone("twod1");
        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = adigiHF[i][jeta][jphi];
          if (ccc1 != 0.) {
            HFnegativedirectionDigi1->Fill(jphi, ccc1);
            ccctest = 1.;  //HFnegativedirectionDigi1->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //	  cout<<"444        kcountHFnegativedirectionDigi1   =     "<<kcountHFnegativedirectionDigi1  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHFnegativedirectionDigi1);
          HFnegativedirectionDigi1->SetMarkerStyle(20);
          HFnegativedirectionDigi1->SetMarkerSize(0.4);
          HFnegativedirectionDigi1->GetYaxis()->SetLabelSize(0.04);
          HFnegativedirectionDigi1->SetXTitle("HFnegativedirectionDigi1 \b");
          HFnegativedirectionDigi1->SetMarkerColor(2);
          HFnegativedirectionDigi1->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHFnegativedirectionDigi1 == 1)
            HFnegativedirectionDigi1->SetXTitle("R for HF- jeta =-41; depth = 1 \b");
          if (kcountHFnegativedirectionDigi1 == 2)
            HFnegativedirectionDigi1->SetXTitle("R for HF- jeta =-40; depth = 1 \b");
          if (kcountHFnegativedirectionDigi1 == 3)
            HFnegativedirectionDigi1->SetXTitle("R for HF- jeta =-39; depth = 1 \b");
          if (kcountHFnegativedirectionDigi1 == 4)
            HFnegativedirectionDigi1->SetXTitle("R for HF- jeta =-38; depth = 1 \b");
          if (kcountHFnegativedirectionDigi1 == 5)
            HFnegativedirectionDigi1->SetXTitle("R for HF- jeta =-37; depth = 1 \b");
          if (kcountHFnegativedirectionDigi1 == 6)
            HFnegativedirectionDigi1->SetXTitle("R for HF- jeta =-36; depth = 1 \b");
          if (kcountHFnegativedirectionDigi1 == 7)
            HFnegativedirectionDigi1->SetXTitle("R for HF- jeta =-35; depth = 1 \b");
          if (kcountHFnegativedirectionDigi1 == 8)
            HFnegativedirectionDigi1->SetXTitle("R for HF- jeta =-34; depth = 1 \b");
          if (kcountHFnegativedirectionDigi1 == 9)
            HFnegativedirectionDigi1->SetXTitle("R for HF- jeta =-33; depth = 1 \b");
          if (kcountHFnegativedirectionDigi1 == 10)
            HFnegativedirectionDigi1->SetXTitle("R for HF- jeta =-32; depth = 1 \b");
          if (kcountHFnegativedirectionDigi1 == 11)
            HFnegativedirectionDigi1->SetXTitle("R for HF- jeta =-31; depth = 1 \b");
          if (kcountHFnegativedirectionDigi1 == 12)
            HFnegativedirectionDigi1->SetXTitle("R for HF- jeta =-30; depth = 1 \b");
          if (kcountHFnegativedirectionDigi1 == 13)
            HFnegativedirectionDigi1->SetXTitle("R for HF- jeta =-29; depth = 1 \b");
          HFnegativedirectionDigi1->Draw("Error");
          kcountHFnegativedirectionDigi1++;
          if (kcountHFnegativedirectionDigi1 > 13)
            break;  //
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41< 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RdigiNegativeDirectionhistD1PhiSymmetryDepth1HF.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHFnegativedirectionDigi1)
    delete h2CeffHFnegativedirectionDigi1;

  //========================================================================================== 1111115
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=2
  //  cout<<"      1D plot: R vs phi , different eta,  depth=2 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHFnegativedirectionDigi2 = 1;
  TH1F *h2CeffHFnegativedirectionDigi2 = new TH1F("h2CeffHFnegativedirectionDigi2", "", nphi, 0., 72.);
  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionDigi:
    if (jeta - 41 < 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=2
      for (int i = 1; i < 2; i++) {
        TH1F *HFnegativedirectionDigi2 = (TH1F *)h2CeffHFnegativedirectionDigi2->Clone("twod1");
        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = adigiHF[i][jeta][jphi];
          if (ccc1 != 0.) {
            HFnegativedirectionDigi2->Fill(jphi, ccc1);
            ccctest = 1.;  //HFnegativedirectionDigi2->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"555        kcountHFnegativedirectionDigi2   =     "<<kcountHFnegativedirectionDigi2  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHFnegativedirectionDigi2);
          HFnegativedirectionDigi2->SetMarkerStyle(20);
          HFnegativedirectionDigi2->SetMarkerSize(0.4);
          HFnegativedirectionDigi2->GetYaxis()->SetLabelSize(0.04);
          HFnegativedirectionDigi2->SetXTitle("HFnegativedirectionDigi2 \b");
          HFnegativedirectionDigi2->SetMarkerColor(2);
          HFnegativedirectionDigi2->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHFnegativedirectionDigi2 == 1)
            HFnegativedirectionDigi2->SetXTitle("R for HF- jeta =-41; depth = 2 \b");
          if (kcountHFnegativedirectionDigi2 == 2)
            HFnegativedirectionDigi2->SetXTitle("R for HF- jeta =-40; depth = 2 \b");
          if (kcountHFnegativedirectionDigi2 == 3)
            HFnegativedirectionDigi2->SetXTitle("R for HF- jeta =-39; depth = 2 \b");
          if (kcountHFnegativedirectionDigi2 == 4)
            HFnegativedirectionDigi2->SetXTitle("R for HF- jeta =-38; depth = 2 \b");
          if (kcountHFnegativedirectionDigi2 == 5)
            HFnegativedirectionDigi2->SetXTitle("R for HF- jeta =-37; depth = 2 \b");
          if (kcountHFnegativedirectionDigi2 == 6)
            HFnegativedirectionDigi2->SetXTitle("R for HF- jeta =-36; depth = 2 \b");
          if (kcountHFnegativedirectionDigi2 == 7)
            HFnegativedirectionDigi2->SetXTitle("R for HF- jeta =-35; depth = 2 \b");
          if (kcountHFnegativedirectionDigi2 == 8)
            HFnegativedirectionDigi2->SetXTitle("R for HF- jeta =-34; depth = 2 \b");
          if (kcountHFnegativedirectionDigi2 == 9)
            HFnegativedirectionDigi2->SetXTitle("R for HF- jeta =-33; depth = 2 \b");
          if (kcountHFnegativedirectionDigi2 == 10)
            HFnegativedirectionDigi2->SetXTitle("R for HF- jeta =-32; depth = 2 \b");
          if (kcountHFnegativedirectionDigi2 == 11)
            HFnegativedirectionDigi2->SetXTitle("R for HF- jeta =-31; depth = 2 \b");
          if (kcountHFnegativedirectionDigi2 == 12)
            HFnegativedirectionDigi2->SetXTitle("R for HF- jeta =-30; depth = 2 \b");
          if (kcountHFnegativedirectionDigi2 == 13)
            HFnegativedirectionDigi2->SetXTitle("R for HF- jeta =-20; depth = 2 \b");
          HFnegativedirectionDigi2->Draw("Error");
          kcountHFnegativedirectionDigi2++;
          if (kcountHFnegativedirectionDigi2 > 13)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41< 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RdigiNegativeDirectionhistD1PhiSymmetryDepth2HF.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHFnegativedirectionDigi2)
    delete h2CeffHFnegativedirectionDigi2;
  //========================================================================================== 1111116
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=3
  //cout<<"      1D plot: R vs phi , different eta,  depth=3 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHFnegativedirectionDigi3 = 1;
  TH1F *h2CeffHFnegativedirectionDigi3 = new TH1F("h2CeffHFnegativedirectionDigi3", "", nphi, 0., 72.);
  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionDigi:
    if (jeta - 41 < 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=3
      for (int i = 2; i < 3; i++) {
        TH1F *HFnegativedirectionDigi3 = (TH1F *)h2CeffHFnegativedirectionDigi3->Clone("twod1");
        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = adigiHF[i][jeta][jphi];
          if (ccc1 != 0.) {
            HFnegativedirectionDigi3->Fill(jphi, ccc1);
            ccctest = 1.;  //HFnegativedirectionDigi3->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"666        kcountHFnegativedirectionDigi3   =     "<<kcountHFnegativedirectionDigi3  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHFnegativedirectionDigi3);
          HFnegativedirectionDigi3->SetMarkerStyle(20);
          HFnegativedirectionDigi3->SetMarkerSize(0.4);
          HFnegativedirectionDigi3->GetYaxis()->SetLabelSize(0.04);
          HFnegativedirectionDigi3->SetXTitle("HFnegativedirectionDigi3 \b");
          HFnegativedirectionDigi3->SetMarkerColor(2);
          HFnegativedirectionDigi3->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHFnegativedirectionDigi3 == 1)
            HFnegativedirectionDigi3->SetXTitle("R for HF- jeta =-41; depth = 3 \b");
          if (kcountHFnegativedirectionDigi3 == 2)
            HFnegativedirectionDigi3->SetXTitle("R for HF- jeta =-40; depth = 3 \b");
          if (kcountHFnegativedirectionDigi3 == 3)
            HFnegativedirectionDigi3->SetXTitle("R for HF- jeta =-39; depth = 3 \b");
          if (kcountHFnegativedirectionDigi3 == 4)
            HFnegativedirectionDigi3->SetXTitle("R for HF- jeta =-38; depth = 3 \b");
          if (kcountHFnegativedirectionDigi3 == 5)
            HFnegativedirectionDigi3->SetXTitle("R for HF- jeta =-37; depth = 3 \b");
          if (kcountHFnegativedirectionDigi3 == 6)
            HFnegativedirectionDigi3->SetXTitle("R for HF- jeta =-36; depth = 3 \b");
          if (kcountHFnegativedirectionDigi3 == 7)
            HFnegativedirectionDigi3->SetXTitle("R for HF- jeta =-35; depth = 3 \b");
          if (kcountHFnegativedirectionDigi3 == 8)
            HFnegativedirectionDigi3->SetXTitle("R for HF- jeta =-34; depth = 3 \b");
          if (kcountHFnegativedirectionDigi3 == 9)
            HFnegativedirectionDigi3->SetXTitle("R for HF- jeta =-33; depth = 3 \b");
          if (kcountHFnegativedirectionDigi3 == 10)
            HFnegativedirectionDigi3->SetXTitle("R for HF- jeta =-32; depth = 3 \b");
          if (kcountHFnegativedirectionDigi3 == 11)
            HFnegativedirectionDigi3->SetXTitle("R for HF- jeta =-31; depth = 3 \b");
          if (kcountHFnegativedirectionDigi3 == 12)
            HFnegativedirectionDigi3->SetXTitle("R for HF- jeta =-30; depth = 3 \b");
          if (kcountHFnegativedirectionDigi3 == 13)
            HFnegativedirectionDigi3->SetXTitle("R for HF- jeta =-29; depth = 3 \b");
          HFnegativedirectionDigi3->Draw("Error");
          kcountHFnegativedirectionDigi3++;
          if (kcountHFnegativedirectionDigi3 > 13)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41< 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RdigiNegativeDirectionhistD1PhiSymmetryDepth3HF.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHFnegativedirectionDigi3)
    delete h2CeffHFnegativedirectionDigi3;
  //========================================================================================== 1111117
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=4
  //cout<<"      1D plot: R vs phi , different eta,  depth=4 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHFnegativedirectionDigi4 = 1;
  TH1F *h2CeffHFnegativedirectionDigi4 = new TH1F("h2CeffHFnegativedirectionDigi4", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionDigi:
    if (jeta - 41 < 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=4
      for (int i = 3; i < 4; i++) {
        TH1F *HFnegativedirectionDigi4 = (TH1F *)h2CeffHFnegativedirectionDigi4->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = adigiHF[i][jeta][jphi];
          if (ccc1 != 0.) {
            HFnegativedirectionDigi4->Fill(jphi, ccc1);
            ccctest = 1.;  //HFnegativedirectionDigi4->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"777        kcountHFnegativedirectionDigi4   =     "<<kcountHFnegativedirectionDigi4  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHFnegativedirectionDigi4);
          HFnegativedirectionDigi4->SetMarkerStyle(20);
          HFnegativedirectionDigi4->SetMarkerSize(0.4);
          HFnegativedirectionDigi4->GetYaxis()->SetLabelSize(0.04);
          HFnegativedirectionDigi4->SetXTitle("HFnegativedirectionDigi4 \b");
          HFnegativedirectionDigi4->SetMarkerColor(2);
          HFnegativedirectionDigi4->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHFnegativedirectionDigi4 == 1)
            HFnegativedirectionDigi4->SetXTitle("R for HF- jeta =-41; depth = 4 \b");
          if (kcountHFnegativedirectionDigi4 == 2)
            HFnegativedirectionDigi4->SetXTitle("R for HF- jeta =-40; depth = 4 \b");
          if (kcountHFnegativedirectionDigi4 == 3)
            HFnegativedirectionDigi4->SetXTitle("R for HF- jeta =-39; depth = 4 \b");
          if (kcountHFnegativedirectionDigi4 == 4)
            HFnegativedirectionDigi4->SetXTitle("R for HF- jeta =-38; depth = 4 \b");
          if (kcountHFnegativedirectionDigi4 == 5)
            HFnegativedirectionDigi4->SetXTitle("R for HF- jeta =-37; depth = 4 \b");
          if (kcountHFnegativedirectionDigi4 == 6)
            HFnegativedirectionDigi4->SetXTitle("R for HF- jeta =-36; depth = 4 \b");
          if (kcountHFnegativedirectionDigi4 == 7)
            HFnegativedirectionDigi4->SetXTitle("R for HF- jeta =-35; depth = 4 \b");
          if (kcountHFnegativedirectionDigi4 == 8)
            HFnegativedirectionDigi4->SetXTitle("R for HF- jeta =-34; depth = 4 \b");
          if (kcountHFnegativedirectionDigi4 == 9)
            HFnegativedirectionDigi4->SetXTitle("R for HF- jeta =-33; depth = 4 \b");
          if (kcountHFnegativedirectionDigi4 == 10)
            HFnegativedirectionDigi4->SetXTitle("R for HF- jeta =-32; depth = 4 \b");
          if (kcountHFnegativedirectionDigi4 == 11)
            HFnegativedirectionDigi4->SetXTitle("R for HF- jeta =-31; depth = 4 \b");
          if (kcountHFnegativedirectionDigi4 == 12)
            HFnegativedirectionDigi4->SetXTitle("R for HF- jeta =-30; depth = 4 \b");
          if (kcountHFnegativedirectionDigi4 == 13)
            HFnegativedirectionDigi4->SetXTitle("R for HF- jeta =-29; depth = 4 \b");
          HFnegativedirectionDigi4->Draw("Error");
          kcountHFnegativedirectionDigi4++;
          if (kcountHFnegativedirectionDigi4 > 13)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41< 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RdigiNegativeDirectionhistD1PhiSymmetryDepth4HF.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHFnegativedirectionDigi4)
    delete h2CeffHFnegativedirectionDigi4;

  //======================================================================================================================
  //======================================================================================================================
  //======================================================================================================================
  //                            DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD:

  //cout<<"    Start Vaiance: preparation  *****" <<endl;
  TH2F *digiVariance1HF1 = (TH2F *)dir->FindObjectAny("h_amplitudechannel2_HF1");
  TH2F *digiVariance0HF1 = (TH2F *)dir->FindObjectAny("h_amplitudechannel0_HF1");
  TH2F *digiVarianceHF1 = (TH2F *)digiVariance1HF1->Clone("digiVarianceHF1");
  digiVarianceHF1->Divide(digiVariance1HF1, digiVariance0HF1, 1, 1, "B");
  TH2F *digiVariance1HF2 = (TH2F *)dir->FindObjectAny("h_amplitudechannel2_HF2");
  TH2F *digiVariance0HF2 = (TH2F *)dir->FindObjectAny("h_amplitudechannel0_HF2");
  TH2F *digiVarianceHF2 = (TH2F *)digiVariance1HF2->Clone("digiVarianceHF2");
  digiVarianceHF2->Divide(digiVariance1HF2, digiVariance0HF2, 1, 1, "B");
  TH2F *digiVariance1HF3 = (TH2F *)dir->FindObjectAny("h_amplitudechannel2_HF3");
  TH2F *digiVariance0HF3 = (TH2F *)dir->FindObjectAny("h_amplitudechannel0_HF3");
  TH2F *digiVarianceHF3 = (TH2F *)digiVariance1HF3->Clone("digiVarianceHF3");
  digiVarianceHF3->Divide(digiVariance1HF3, digiVariance0HF3, 1, 1, "B");
  TH2F *digiVariance1HF4 = (TH2F *)dir->FindObjectAny("h_amplitudechannel2_HF4");
  TH2F *digiVariance0HF4 = (TH2F *)dir->FindObjectAny("h_amplitudechannel0_HF4");
  TH2F *digiVarianceHF4 = (TH2F *)digiVariance1HF4->Clone("digiVarianceHF4");
  digiVarianceHF4->Divide(digiVariance1HF4, digiVariance0HF4, 1, 1, "B");
  //cout<<"      Vaiance: preparation DONE *****" <<endl;
  //====================================================================== put Vaiance=Dispersia = Sig**2=<R**2> - (<R>)**2 into massive digivarianceHF
  //                                                                                           = sum(R*R)/N - (sum(R)/N)**2
  for (int jeta = 0; jeta < njeta; jeta++) {
    //preparation for PHI normalization:
    double sumdigiHF0 = 0;
    int nsumdigiHF0 = 0;
    double sumdigiHF1 = 0;
    int nsumdigiHF1 = 0;
    double sumdigiHF2 = 0;
    int nsumdigiHF2 = 0;
    double sumdigiHF3 = 0;
    int nsumdigiHF3 = 0;
    for (int jphi = 0; jphi < njphi; jphi++) {
      digivarianceHF[0][jeta][jphi] = digiVarianceHF1->GetBinContent(jeta + 1, jphi + 1);
      digivarianceHF[1][jeta][jphi] = digiVarianceHF2->GetBinContent(jeta + 1, jphi + 1);
      digivarianceHF[2][jeta][jphi] = digiVarianceHF3->GetBinContent(jeta + 1, jphi + 1);
      digivarianceHF[3][jeta][jphi] = digiVarianceHF4->GetBinContent(jeta + 1, jphi + 1);
      if (digivarianceHF[0][jeta][jphi] > 0.) {
        sumdigiHF0 += digivarianceHF[0][jeta][jphi];
        ++nsumdigiHF0;
      }
      if (digivarianceHF[1][jeta][jphi] > 0.) {
        sumdigiHF1 += digivarianceHF[1][jeta][jphi];
        ++nsumdigiHF1;
      }
      if (digivarianceHF[2][jeta][jphi] > 0.) {
        sumdigiHF2 += digivarianceHF[2][jeta][jphi];
        ++nsumdigiHF2;
      }
      if (digivarianceHF[3][jeta][jphi] > 0.) {
        sumdigiHF3 += digivarianceHF[3][jeta][jphi];
        ++nsumdigiHF3;
      }
    }  // phi
    // PHI normalization :
    for (int jphi = 0; jphi < njphi; jphi++) {
      if (digivarianceHF[0][jeta][jphi] > 0.)
        digivarianceHF[0][jeta][jphi] /= (sumdigiHF0 / nsumdigiHF0);
      if (digivarianceHF[1][jeta][jphi] > 0.)
        digivarianceHF[1][jeta][jphi] /= (sumdigiHF1 / nsumdigiHF1);
      if (digivarianceHF[2][jeta][jphi] > 0.)
        digivarianceHF[2][jeta][jphi] /= (sumdigiHF2 / nsumdigiHF2);
      if (digivarianceHF[3][jeta][jphi] > 0.)
        digivarianceHF[3][jeta][jphi] /= (sumdigiHF3 / nsumdigiHF3);
    }  // phi
    //       digivarianceHF (D)           = sum(R*R)/N - (sum(R)/N)**2
    for (int jphi = 0; jphi < njphi; jphi++) {
      //	   cout<<"12 12 12   jeta=     "<< jeta <<"   jphi   =     "<<jphi  <<endl;
      digivarianceHF[0][jeta][jphi] -= adigiHF[0][jeta][jphi] * adigiHF[0][jeta][jphi];
      digivarianceHF[0][jeta][jphi] = fabs(digivarianceHF[0][jeta][jphi]);
      digivarianceHF[1][jeta][jphi] -= adigiHF[1][jeta][jphi] * adigiHF[1][jeta][jphi];
      digivarianceHF[1][jeta][jphi] = fabs(digivarianceHF[1][jeta][jphi]);
      digivarianceHF[2][jeta][jphi] -= adigiHF[2][jeta][jphi] * adigiHF[2][jeta][jphi];
      digivarianceHF[2][jeta][jphi] = fabs(digivarianceHF[2][jeta][jphi]);
      digivarianceHF[3][jeta][jphi] -= adigiHF[3][jeta][jphi] * adigiHF[3][jeta][jphi];
      digivarianceHF[3][jeta][jphi] = fabs(digivarianceHF[3][jeta][jphi]);
    }
  }
  //cout<<"      Vaiance: DONE*****" <<endl;
  //------------------------  2D-eta/phi-plot: D, averaged over depthfs
  //======================================================================
  //======================================================================
  //cout<<"      R2D-eta/phi-plot: D, averaged over depthfs *****" <<endl;
  c1x1->Clear();
  /////////////////
  c1x0->Divide(1, 1);
  c1x0->cd(1);
  TH2F *DefzDdigiHF42D = new TH2F("DefzDdigiHF42D", "", neta, -41., 41., nphi, 0., 72.);
  TH2F *DefzDdigiHF42D0 = new TH2F("DefzDdigiHF42D0", "", neta, -41., 41., nphi, 0., 72.);
  TH2F *DefzDdigiHF42DF = (TH2F *)DefzDdigiHF42D0->Clone("DefzDdigiHF42DF");
  for (int i = 0; i < ndepth; i++) {
    for (int jeta = 0; jeta < neta; jeta++) {
      for (int jphi = 0; jphi < nphi; jphi++) {
        double ccc1 = digivarianceHF[i][jeta][jphi];
        int k2plot = jeta - 41;
        int kkk = k2plot;  //if(k2plot >0   kkk=k2plot+1; //-41 +41 !=0
        if (adigiHF[i][jeta][jphi] > 0.) {
          DefzDdigiHF42D->Fill(kkk, jphi, ccc1);
          DefzDdigiHF42D0->Fill(kkk, jphi, 1.);
        }
      }
    }
  }
  DefzDdigiHF42DF->Divide(DefzDdigiHF42D, DefzDdigiHF42D0, 1, 1, "B");  // average A
  //    DefzDdigiHF1->Sumw2();
  gPad->SetGridy();
  gPad->SetGridx();  //      gPad->SetLogz();
  DefzDdigiHF42DF->SetMarkerStyle(20);
  DefzDdigiHF42DF->SetMarkerSize(0.4);
  DefzDdigiHF42DF->GetZaxis()->SetLabelSize(0.08);
  DefzDdigiHF42DF->SetXTitle("<D>_depth       #eta  \b");
  DefzDdigiHF42DF->SetYTitle("      #phi \b");
  DefzDdigiHF42DF->SetZTitle("<D>_depth \b");
  DefzDdigiHF42DF->SetMarkerColor(2);
  DefzDdigiHF42DF->SetLineColor(
      0);  //      DefzDdigiHF42DF->SetMaximum(1.000);  //      DefzDdigiHF42DF->SetMinimum(1.0);
  DefzDdigiHF42DF->Draw("COLZ");
  /////////////////
  c1x0->Update();
  c1x0->Print("DdigiGeneralD2PhiSymmetryHF.png");
  c1x0->Clear();
  // clean-up
  if (DefzDdigiHF42D)
    delete DefzDdigiHF42D;
  if (DefzDdigiHF42D0)
    delete DefzDdigiHF42D0;
  if (DefzDdigiHF42DF)
    delete DefzDdigiHF42DF;
  //====================================================================== 1D plot: D vs phi , averaged over depthfs & eta
  //======================================================================
  //cout<<"      1D plot: D vs phi , averaged over depthfs & eta *****" <<endl;
  c1x1->Clear();
  /////////////////
  c1x1->Divide(1, 1);
  c1x1->cd(1);
  TH1F *DefzDdigiHF41D = new TH1F("DefzDdigiHF41D", "", nphi, 0., 72.);
  TH1F *DefzDdigiHF41D0 = new TH1F("DefzDdigiHF41D0", "", nphi, 0., 72.);
  TH1F *DefzDdigiHF41DF = (TH1F *)DefzDdigiHF41D0->Clone("DefzDdigiHF41DF");

  for (int jphi = 0; jphi < nphi; jphi++) {
    for (int jeta = 0; jeta < neta; jeta++) {
      for (int i = 0; i < ndepth; i++) {
        double ccc1 = digivarianceHF[i][jeta][jphi];
        if (adigiHF[i][jeta][jphi] > 0.) {
          DefzDdigiHF41D->Fill(jphi, ccc1);
          DefzDdigiHF41D0->Fill(jphi, 1.);
        }
      }
    }
  }
  //     DefzDdigiHF41D->Sumw2();DefzDdigiHF41D0->Sumw2();

  DefzDdigiHF41DF->Divide(DefzDdigiHF41D, DefzDdigiHF41D0, 1, 1, "B");  // R averaged over depthfs & eta
  DefzDdigiHF41D0->Sumw2();
  //    for (int jphi=1;jphi<73;jphi++) {DefzDdigiHF41DF->SetBinError(jphi,0.01);}
  gPad->SetGridy();
  gPad->SetGridx();  //      gPad->SetLogz();
  DefzDdigiHF41DF->SetMarkerStyle(20);
  DefzDdigiHF41DF->SetMarkerSize(1.4);
  DefzDdigiHF41DF->GetZaxis()->SetLabelSize(0.08);
  DefzDdigiHF41DF->SetXTitle("#phi  \b");
  DefzDdigiHF41DF->SetYTitle("  <D> \b");
  DefzDdigiHF41DF->SetZTitle("<D>_PHI  - AllDepthfs \b");
  DefzDdigiHF41DF->SetMarkerColor(4);
  DefzDdigiHF41DF->SetLineColor(4);  //  DefzDdigiHF41DF->SetMinimum(0.8);     DefzDdigiHF41DF->SetMinimum(-0.015);
  DefzDdigiHF41DF->Draw("Error");
  /////////////////
  c1x1->Update();
  c1x1->Print("DdigiGeneralD1PhiSymmetryHF.png");
  c1x1->Clear();
  // clean-up
  if (DefzDdigiHF41D)
    delete DefzDdigiHF41D;
  if (DefzDdigiHF41D0)
    delete DefzDdigiHF41D0;
  if (DefzDdigiHF41DF)
    delete DefzDdigiHF41DF;
  //========================================================================================== 14
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=1
  //cout<<"      1D plot: D vs phi , different eta,  depth=1 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHFpositivedirectionDigiD1 = 1;
  TH1F *h2CeffHFpositivedirectionDigiD1 = new TH1F("h2CeffHFpositivedirectionDigiD1", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionDigiD:
    if (jeta - 41 >= 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=1
      for (int i = 0; i < 1; i++) {
        TH1F *HFpositivedirectionDigiD1 = (TH1F *)h2CeffHFpositivedirectionDigiD1->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = digivarianceHF[i][jeta][jphi];
          if (adigiHF[i][jeta][jphi] > 0.) {
            HFpositivedirectionDigiD1->Fill(jphi, ccc1);
            ccctest = 1.;  //HFpositivedirectionDigiD1->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1414       kcountHFpositivedirectionDigiD1   =     "<<kcountHFpositivedirectionDigiD1  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHFpositivedirectionDigiD1);
          HFpositivedirectionDigiD1->SetMarkerStyle(20);
          HFpositivedirectionDigiD1->SetMarkerSize(0.4);
          HFpositivedirectionDigiD1->GetYaxis()->SetLabelSize(0.04);
          HFpositivedirectionDigiD1->SetXTitle("HFpositivedirectionDigiD1 \b");
          HFpositivedirectionDigiD1->SetMarkerColor(2);
          HFpositivedirectionDigiD1->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHFpositivedirectionDigiD1 == 1)
            HFpositivedirectionDigiD1->SetXTitle("D for HF+ jeta = 28; depth = 1 \b");
          if (kcountHFpositivedirectionDigiD1 == 2)
            HFpositivedirectionDigiD1->SetXTitle("D for HF+ jeta = 29; depth = 1 \b");
          if (kcountHFpositivedirectionDigiD1 == 3)
            HFpositivedirectionDigiD1->SetXTitle("D for HF+ jeta = 30; depth = 1 \b");
          if (kcountHFpositivedirectionDigiD1 == 4)
            HFpositivedirectionDigiD1->SetXTitle("D for HF+ jeta = 31; depth = 1 \b");
          if (kcountHFpositivedirectionDigiD1 == 5)
            HFpositivedirectionDigiD1->SetXTitle("D for HF+ jeta = 32; depth = 1 \b");
          if (kcountHFpositivedirectionDigiD1 == 6)
            HFpositivedirectionDigiD1->SetXTitle("D for HF+ jeta = 33; depth = 1 \b");
          if (kcountHFpositivedirectionDigiD1 == 7)
            HFpositivedirectionDigiD1->SetXTitle("D for HF+ jeta = 34; depth = 1 \b");
          if (kcountHFpositivedirectionDigiD1 == 8)
            HFpositivedirectionDigiD1->SetXTitle("D for HF+ jeta = 35; depth = 1 \b");
          if (kcountHFpositivedirectionDigiD1 == 9)
            HFpositivedirectionDigiD1->SetXTitle("D for HF+ jeta = 36; depth = 1 \b");
          if (kcountHFpositivedirectionDigiD1 == 10)
            HFpositivedirectionDigiD1->SetXTitle("D for HF+ jeta = 37; depth = 1 \b");
          if (kcountHFpositivedirectionDigiD1 == 11)
            HFpositivedirectionDigiD1->SetXTitle("D for HF+ jeta = 38; depth = 1 \b");
          if (kcountHFpositivedirectionDigiD1 == 12)
            HFpositivedirectionDigiD1->SetXTitle("D for HF+ jeta = 39; depth = 1 \b");
          if (kcountHFpositivedirectionDigiD1 == 13)
            HFpositivedirectionDigiD1->SetXTitle("D for HF+ jeta = 40; depth = 1 \b");
          HFpositivedirectionDigiD1->Draw("Error");
          kcountHFpositivedirectionDigiD1++;
          if (kcountHFpositivedirectionDigiD1 > 13)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DdigiPositiveDirectionhistD1PhiSymmetryDepth1HF.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHFpositivedirectionDigiD1)
    delete h2CeffHFpositivedirectionDigiD1;
  //========================================================================================== 15
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=2
  //cout<<"      1D plot: D vs phi , different eta,  depth=2 *****" <<endl;
  c3x5->Clear();
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHFpositivedirectionDigiD2 = 1;
  TH1F *h2CeffHFpositivedirectionDigiD2 = new TH1F("h2CeffHFpositivedirectionDigiD2", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionDigiD:
    if (jeta - 41 >= 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=2
      for (int i = 1; i < 2; i++) {
        TH1F *HFpositivedirectionDigiD2 = (TH1F *)h2CeffHFpositivedirectionDigiD2->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = digivarianceHF[i][jeta][jphi];
          if (adigiHF[i][jeta][jphi] > 0.) {
            HFpositivedirectionDigiD2->Fill(jphi, ccc1);
            ccctest = 1.;  //HFpositivedirectionDigiD2->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1515       kcountHFpositivedirectionDigiD2   =     "<<kcountHFpositivedirectionDigiD2  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHFpositivedirectionDigiD2);
          HFpositivedirectionDigiD2->SetMarkerStyle(20);
          HFpositivedirectionDigiD2->SetMarkerSize(0.4);
          HFpositivedirectionDigiD2->GetYaxis()->SetLabelSize(0.04);
          HFpositivedirectionDigiD2->SetXTitle("HFpositivedirectionDigiD2 \b");
          HFpositivedirectionDigiD2->SetMarkerColor(2);
          HFpositivedirectionDigiD2->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHFpositivedirectionDigiD2 == 1)
            HFpositivedirectionDigiD2->SetXTitle("D for HF+ jeta = 28; depth = 2 \b");
          if (kcountHFpositivedirectionDigiD2 == 2)
            HFpositivedirectionDigiD2->SetXTitle("D for HF+ jeta = 29; depth = 2 \b");
          if (kcountHFpositivedirectionDigiD2 == 3)
            HFpositivedirectionDigiD2->SetXTitle("D for HF+ jeta = 30; depth = 2 \b");
          if (kcountHFpositivedirectionDigiD2 == 4)
            HFpositivedirectionDigiD2->SetXTitle("D for HF+ jeta = 31; depth = 2 \b");
          if (kcountHFpositivedirectionDigiD2 == 5)
            HFpositivedirectionDigiD2->SetXTitle("D for HF+ jeta = 32; depth = 2 \b");
          if (kcountHFpositivedirectionDigiD2 == 6)
            HFpositivedirectionDigiD2->SetXTitle("D for HF+ jeta = 33; depth = 2 \b");
          if (kcountHFpositivedirectionDigiD2 == 7)
            HFpositivedirectionDigiD2->SetXTitle("D for HF+ jeta = 34; depth = 2 \b");
          if (kcountHFpositivedirectionDigiD2 == 8)
            HFpositivedirectionDigiD2->SetXTitle("D for HF+ jeta = 35; depth = 2 \b");
          if (kcountHFpositivedirectionDigiD2 == 9)
            HFpositivedirectionDigiD2->SetXTitle("D for HF+ jeta = 36; depth = 2 \b");
          if (kcountHFpositivedirectionDigiD2 == 10)
            HFpositivedirectionDigiD2->SetXTitle("D for HF+ jeta = 37; depth = 2 \b");
          if (kcountHFpositivedirectionDigiD2 == 11)
            HFpositivedirectionDigiD2->SetXTitle("D for HF+ jeta = 38; depth = 2 \b");
          if (kcountHFpositivedirectionDigiD2 == 12)
            HFpositivedirectionDigiD2->SetXTitle("D for HF+ jeta = 39; depth = 2 \b");
          if (kcountHFpositivedirectionDigiD2 == 13)
            HFpositivedirectionDigiD2->SetXTitle("D for HF+ jeta = 40; depth = 2 \b");
          HFpositivedirectionDigiD2->Draw("Error");
          kcountHFpositivedirectionDigiD2++;
          if (kcountHFpositivedirectionDigiD2 > 13)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DdigiPositiveDirectionhistD1PhiSymmetryDepth2HF.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHFpositivedirectionDigiD2)
    delete h2CeffHFpositivedirectionDigiD2;
  //========================================================================================== 16
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=3
  //cout<<"      1D plot: D vs phi , different eta,  depth=3 *****" <<endl;
  c3x5->Clear();
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHFpositivedirectionDigiD3 = 1;
  TH1F *h2CeffHFpositivedirectionDigiD3 = new TH1F("h2CeffHFpositivedirectionDigiD3", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionDigiD:
    if (jeta - 41 >= 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=3
      for (int i = 2; i < 3; i++) {
        TH1F *HFpositivedirectionDigiD3 = (TH1F *)h2CeffHFpositivedirectionDigiD3->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = digivarianceHF[i][jeta][jphi];
          if (adigiHF[i][jeta][jphi] > 0.) {
            HFpositivedirectionDigiD3->Fill(jphi, ccc1);
            ccctest = 1.;  //HFpositivedirectionDigiD3->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1616       kcountHFpositivedirectionDigiD3   =     "<<kcountHFpositivedirectionDigiD3  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHFpositivedirectionDigiD3);
          HFpositivedirectionDigiD3->SetMarkerStyle(20);
          HFpositivedirectionDigiD3->SetMarkerSize(0.4);
          HFpositivedirectionDigiD3->GetYaxis()->SetLabelSize(0.04);
          HFpositivedirectionDigiD3->SetXTitle("HFpositivedirectionDigiD3 \b");
          HFpositivedirectionDigiD3->SetMarkerColor(2);
          HFpositivedirectionDigiD3->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHFpositivedirectionDigiD3 == 1)
            HFpositivedirectionDigiD3->SetXTitle("D for HF+ jeta = 28; depth = 3 \b");
          if (kcountHFpositivedirectionDigiD3 == 2)
            HFpositivedirectionDigiD3->SetXTitle("D for HF+ jeta = 29; depth = 3 \b");
          if (kcountHFpositivedirectionDigiD3 == 3)
            HFpositivedirectionDigiD3->SetXTitle("D for HF+ jeta = 30; depth = 3 \b");
          if (kcountHFpositivedirectionDigiD3 == 4)
            HFpositivedirectionDigiD3->SetXTitle("D for HF+ jeta = 31; depth = 3 \b");
          if (kcountHFpositivedirectionDigiD3 == 5)
            HFpositivedirectionDigiD3->SetXTitle("D for HF+ jeta = 32; depth = 3 \b");
          if (kcountHFpositivedirectionDigiD3 == 6)
            HFpositivedirectionDigiD3->SetXTitle("D for HF+ jeta = 33; depth = 3 \b");
          if (kcountHFpositivedirectionDigiD3 == 7)
            HFpositivedirectionDigiD3->SetXTitle("D for HF+ jeta = 34; depth = 3 \b");
          if (kcountHFpositivedirectionDigiD3 == 8)
            HFpositivedirectionDigiD3->SetXTitle("D for HF+ jeta = 35; depth = 3 \b");
          if (kcountHFpositivedirectionDigiD3 == 9)
            HFpositivedirectionDigiD3->SetXTitle("D for HF+ jeta = 36; depth = 3 \b");
          if (kcountHFpositivedirectionDigiD3 == 10)
            HFpositivedirectionDigiD3->SetXTitle("D for HF+ jeta = 37; depth = 3 \b");
          if (kcountHFpositivedirectionDigiD3 == 11)
            HFpositivedirectionDigiD3->SetXTitle("D for HF+ jeta = 38; depth = 3 \b");
          if (kcountHFpositivedirectionDigiD3 == 12)
            HFpositivedirectionDigiD3->SetXTitle("D for HF+ jeta = 39; depth = 3 \b");
          if (kcountHFpositivedirectionDigiD3 == 13)
            HFpositivedirectionDigiD3->SetXTitle("D for HF+ jeta = 40; depth = 3 \b");
          HFpositivedirectionDigiD3->Draw("Error");
          kcountHFpositivedirectionDigiD3++;
          if (kcountHFpositivedirectionDigiD3 > 13)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DdigiPositiveDirectionhistD1PhiSymmetryDepth3HF.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHFpositivedirectionDigiD3)
    delete h2CeffHFpositivedirectionDigiD3;
  //========================================================================================== 17
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=4
  //cout<<"      1D plot: D vs phi , different eta,  depth=4 *****" <<endl;
  c3x5->Clear();
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHFpositivedirectionDigiD4 = 1;
  TH1F *h2CeffHFpositivedirectionDigiD4 = new TH1F("h2CeffHFpositivedirectionDigiD4", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionDigiD:
    if (jeta - 41 >= 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=4
      for (int i = 3; i < 4; i++) {
        TH1F *HFpositivedirectionDigiD4 = (TH1F *)h2CeffHFpositivedirectionDigiD4->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = digivarianceHF[i][jeta][jphi];
          if (adigiHF[i][jeta][jphi] > 0.) {
            HFpositivedirectionDigiD4->Fill(jphi, ccc1);
            ccctest = 1.;  //HFpositivedirectionDigiD4->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1717       kcountHFpositivedirectionDigiD4   =     "<<kcountHFpositivedirectionDigiD4  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHFpositivedirectionDigiD4);
          HFpositivedirectionDigiD4->SetMarkerStyle(20);
          HFpositivedirectionDigiD4->SetMarkerSize(0.4);
          HFpositivedirectionDigiD4->GetYaxis()->SetLabelSize(0.04);
          HFpositivedirectionDigiD4->SetXTitle("HFpositivedirectionDigiD4 \b");
          HFpositivedirectionDigiD4->SetMarkerColor(2);
          HFpositivedirectionDigiD4->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHFpositivedirectionDigiD4 == 1)
            HFpositivedirectionDigiD4->SetXTitle("D for HF+ jeta = 28; depth = 4 \b");
          if (kcountHFpositivedirectionDigiD4 == 2)
            HFpositivedirectionDigiD4->SetXTitle("D for HF+ jeta = 29; depth = 4 \b");
          if (kcountHFpositivedirectionDigiD4 == 3)
            HFpositivedirectionDigiD4->SetXTitle("D for HF+ jeta = 30; depth = 4 \b");
          if (kcountHFpositivedirectionDigiD4 == 4)
            HFpositivedirectionDigiD4->SetXTitle("D for HF+ jeta = 31; depth = 4 \b");
          if (kcountHFpositivedirectionDigiD4 == 5)
            HFpositivedirectionDigiD4->SetXTitle("D for HF+ jeta = 32; depth = 4 \b");
          if (kcountHFpositivedirectionDigiD4 == 6)
            HFpositivedirectionDigiD4->SetXTitle("D for HF+ jeta = 33; depth = 4 \b");
          if (kcountHFpositivedirectionDigiD4 == 7)
            HFpositivedirectionDigiD4->SetXTitle("D for HF+ jeta = 34; depth = 4 \b");
          if (kcountHFpositivedirectionDigiD4 == 8)
            HFpositivedirectionDigiD4->SetXTitle("D for HF+ jeta = 35; depth = 4 \b");
          if (kcountHFpositivedirectionDigiD4 == 9)
            HFpositivedirectionDigiD4->SetXTitle("D for HF+ jeta = 36; depth = 4 \b");
          if (kcountHFpositivedirectionDigiD4 == 10)
            HFpositivedirectionDigiD4->SetXTitle("D for HF+ jeta = 37; depth = 4 \b");
          if (kcountHFpositivedirectionDigiD4 == 11)
            HFpositivedirectionDigiD4->SetXTitle("D for HF+ jeta = 38; depth = 4 \b");
          if (kcountHFpositivedirectionDigiD4 == 12)
            HFpositivedirectionDigiD4->SetXTitle("D for HF+ jeta = 39; depth = 4 \b");
          if (kcountHFpositivedirectionDigiD4 == 13)
            HFpositivedirectionDigiD4->SetXTitle("D for HF+ jeta = 40; depth = 4 \b");
          HFpositivedirectionDigiD4->Draw("Error");
          kcountHFpositivedirectionDigiD4++;
          if (kcountHFpositivedirectionDigiD4 > 13)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DdigiPositiveDirectionhistD1PhiSymmetryDepth4HF.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHFpositivedirectionDigiD4)
    delete h2CeffHFpositivedirectionDigiD4;

  //========================================================================================== 22222214
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=1
  //cout<<"      1D plot: D vs phi , different eta,  depth=1 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHFnegativedirectionDigiD1 = 1;
  TH1F *h2CeffHFnegativedirectionDigiD1 = new TH1F("h2CeffHFnegativedirectionDigiD1", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionDigiD:
    if (jeta - 41 < 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=1
      for (int i = 0; i < 1; i++) {
        TH1F *HFnegativedirectionDigiD1 = (TH1F *)h2CeffHFnegativedirectionDigiD1->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = digivarianceHF[i][jeta][jphi];
          if (adigiHF[i][jeta][jphi] > 0.) {
            HFnegativedirectionDigiD1->Fill(jphi, ccc1);
            ccctest = 1.;  //HFnegativedirectionDigiD1->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1414       kcountHFnegativedirectionDigiD1   =     "<<kcountHFnegativedirectionDigiD1  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHFnegativedirectionDigiD1);
          HFnegativedirectionDigiD1->SetMarkerStyle(20);
          HFnegativedirectionDigiD1->SetMarkerSize(0.4);
          HFnegativedirectionDigiD1->GetYaxis()->SetLabelSize(0.04);
          HFnegativedirectionDigiD1->SetXTitle("HFnegativedirectionDigiD1 \b");
          HFnegativedirectionDigiD1->SetMarkerColor(2);
          HFnegativedirectionDigiD1->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHFnegativedirectionDigiD1 == 1)
            HFnegativedirectionDigiD1->SetXTitle("D for HF- jeta =-41; depth = 1 \b");
          if (kcountHFnegativedirectionDigiD1 == 2)
            HFnegativedirectionDigiD1->SetXTitle("D for HF- jeta =-40; depth = 1 \b");
          if (kcountHFnegativedirectionDigiD1 == 3)
            HFnegativedirectionDigiD1->SetXTitle("D for HF- jeta =-39; depth = 1 \b");
          if (kcountHFnegativedirectionDigiD1 == 4)
            HFnegativedirectionDigiD1->SetXTitle("D for HF- jeta =-38; depth = 1 \b");
          if (kcountHFnegativedirectionDigiD1 == 5)
            HFnegativedirectionDigiD1->SetXTitle("D for HF- jeta =-37; depth = 1 \b");
          if (kcountHFnegativedirectionDigiD1 == 6)
            HFnegativedirectionDigiD1->SetXTitle("D for HF- jeta =-36; depth = 1 \b");
          if (kcountHFnegativedirectionDigiD1 == 7)
            HFnegativedirectionDigiD1->SetXTitle("D for HF- jeta =-35; depth = 1 \b");
          if (kcountHFnegativedirectionDigiD1 == 8)
            HFnegativedirectionDigiD1->SetXTitle("D for HF- jeta =-34; depth = 1 \b");
          if (kcountHFnegativedirectionDigiD1 == 9)
            HFnegativedirectionDigiD1->SetXTitle("D for HF- jeta =-33; depth = 1 \b");
          if (kcountHFnegativedirectionDigiD1 == 10)
            HFnegativedirectionDigiD1->SetXTitle("D for HF- jeta =-32; depth = 1 \b");
          if (kcountHFnegativedirectionDigiD1 == 11)
            HFnegativedirectionDigiD1->SetXTitle("D for HF- jeta =-31; depth = 1 \b");
          if (kcountHFnegativedirectionDigiD1 == 12)
            HFnegativedirectionDigiD1->SetXTitle("D for HF- jeta =-30; depth = 1 \b");
          if (kcountHFnegativedirectionDigiD1 == 13)
            HFnegativedirectionDigiD1->SetXTitle("D for HF- jeta =-29; depth = 1 \b");
          HFnegativedirectionDigiD1->Draw("Error");
          kcountHFnegativedirectionDigiD1++;
          if (kcountHFnegativedirectionDigiD1 > 13)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41< 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DdigiNegativeDirectionhistD1PhiSymmetryDepth1HF.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHFnegativedirectionDigiD1)
    delete h2CeffHFnegativedirectionDigiD1;
  //========================================================================================== 22222215
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=2
  //cout<<"      1D plot: D vs phi , different eta,  depth=2 *****" <<endl;
  c3x5->Clear();
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHFnegativedirectionDigiD2 = 1;
  TH1F *h2CeffHFnegativedirectionDigiD2 = new TH1F("h2CeffHFnegativedirectionDigiD2", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionDigiD:
    if (jeta - 41 < 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=2
      for (int i = 1; i < 2; i++) {
        TH1F *HFnegativedirectionDigiD2 = (TH1F *)h2CeffHFnegativedirectionDigiD2->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = digivarianceHF[i][jeta][jphi];
          if (adigiHF[i][jeta][jphi] > 0.) {
            HFnegativedirectionDigiD2->Fill(jphi, ccc1);
            ccctest = 1.;  //HFnegativedirectionDigiD2->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1515       kcountHFnegativedirectionDigiD2   =     "<<kcountHFnegativedirectionDigiD2  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHFnegativedirectionDigiD2);
          HFnegativedirectionDigiD2->SetMarkerStyle(20);
          HFnegativedirectionDigiD2->SetMarkerSize(0.4);
          HFnegativedirectionDigiD2->GetYaxis()->SetLabelSize(0.04);
          HFnegativedirectionDigiD2->SetXTitle("HFnegativedirectionDigiD2 \b");
          HFnegativedirectionDigiD2->SetMarkerColor(2);
          HFnegativedirectionDigiD2->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHFnegativedirectionDigiD2 == 1)
            HFnegativedirectionDigiD2->SetXTitle("D for HF- jeta =-41; depth = 2 \b");
          if (kcountHFnegativedirectionDigiD2 == 2)
            HFnegativedirectionDigiD2->SetXTitle("D for HF- jeta =-40; depth = 2 \b");
          if (kcountHFnegativedirectionDigiD2 == 3)
            HFnegativedirectionDigiD2->SetXTitle("D for HF- jeta =-39; depth = 2 \b");
          if (kcountHFnegativedirectionDigiD2 == 4)
            HFnegativedirectionDigiD2->SetXTitle("D for HF- jeta =-38; depth = 2 \b");
          if (kcountHFnegativedirectionDigiD2 == 5)
            HFnegativedirectionDigiD2->SetXTitle("D for HF- jeta =-37; depth = 2 \b");
          if (kcountHFnegativedirectionDigiD2 == 6)
            HFnegativedirectionDigiD2->SetXTitle("D for HF- jeta =-36; depth = 2 \b");
          if (kcountHFnegativedirectionDigiD2 == 7)
            HFnegativedirectionDigiD2->SetXTitle("D for HF- jeta =-35; depth = 2 \b");
          if (kcountHFnegativedirectionDigiD2 == 8)
            HFnegativedirectionDigiD2->SetXTitle("D for HF- jeta =-34; depth = 2 \b");
          if (kcountHFnegativedirectionDigiD2 == 9)
            HFnegativedirectionDigiD2->SetXTitle("D for HF- jeta =-33; depth = 2 \b");
          if (kcountHFnegativedirectionDigiD2 == 10)
            HFnegativedirectionDigiD2->SetXTitle("D for HF- jeta =-32; depth = 2 \b");
          if (kcountHFnegativedirectionDigiD2 == 11)
            HFnegativedirectionDigiD2->SetXTitle("D for HF- jeta =-31; depth = 2 \b");
          if (kcountHFnegativedirectionDigiD2 == 12)
            HFnegativedirectionDigiD2->SetXTitle("D for HF- jeta =-30; depth = 2 \b");
          if (kcountHFnegativedirectionDigiD2 == 13)
            HFnegativedirectionDigiD2->SetXTitle("D for HF- jeta =-29; depth = 2 \b");
          HFnegativedirectionDigiD2->Draw("Error");
          kcountHFnegativedirectionDigiD2++;
          if (kcountHFnegativedirectionDigiD2 > 13)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41< 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DdigiNegativeDirectionhistD1PhiSymmetryDepth2HF.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHFnegativedirectionDigiD2)
    delete h2CeffHFnegativedirectionDigiD2;
  //========================================================================================== 22222216
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=3
  //cout<<"      1D plot: D vs phi , different eta,  depth=3 *****" <<endl;
  c3x5->Clear();
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHFnegativedirectionDigiD3 = 1;
  TH1F *h2CeffHFnegativedirectionDigiD3 = new TH1F("h2CeffHFnegativedirectionDigiD3", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionDigiD:
    if (jeta - 41 < 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=3
      for (int i = 2; i < 3; i++) {
        TH1F *HFnegativedirectionDigiD3 = (TH1F *)h2CeffHFnegativedirectionDigiD3->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = digivarianceHF[i][jeta][jphi];
          if (adigiHF[i][jeta][jphi] > 0.) {
            HFnegativedirectionDigiD3->Fill(jphi, ccc1);
            ccctest = 1.;  //HFnegativedirectionDigiD3->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1616       kcountHFnegativedirectionDigiD3   =     "<<kcountHFnegativedirectionDigiD3  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHFnegativedirectionDigiD3);
          HFnegativedirectionDigiD3->SetMarkerStyle(20);
          HFnegativedirectionDigiD3->SetMarkerSize(0.4);
          HFnegativedirectionDigiD3->GetYaxis()->SetLabelSize(0.04);
          HFnegativedirectionDigiD3->SetXTitle("HFnegativedirectionDigiD3 \b");
          HFnegativedirectionDigiD3->SetMarkerColor(2);
          HFnegativedirectionDigiD3->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHFnegativedirectionDigiD3 == 1)
            HFnegativedirectionDigiD3->SetXTitle("D for HF- jeta =-41; depth = 3 \b");
          if (kcountHFnegativedirectionDigiD3 == 2)
            HFnegativedirectionDigiD3->SetXTitle("D for HF- jeta =-40; depth = 3 \b");
          if (kcountHFnegativedirectionDigiD3 == 3)
            HFnegativedirectionDigiD3->SetXTitle("D for HF- jeta =-39; depth = 3 \b");
          if (kcountHFnegativedirectionDigiD3 == 4)
            HFnegativedirectionDigiD3->SetXTitle("D for HF- jeta =-38; depth = 3 \b");
          if (kcountHFnegativedirectionDigiD3 == 5)
            HFnegativedirectionDigiD3->SetXTitle("D for HF- jeta =-37; depth = 3 \b");
          if (kcountHFnegativedirectionDigiD3 == 6)
            HFnegativedirectionDigiD3->SetXTitle("D for HF- jeta =-36; depth = 3 \b");
          if (kcountHFnegativedirectionDigiD3 == 7)
            HFnegativedirectionDigiD3->SetXTitle("D for HF- jeta =-35; depth = 3 \b");
          if (kcountHFnegativedirectionDigiD3 == 8)
            HFnegativedirectionDigiD3->SetXTitle("D for HF- jeta =-34; depth = 3 \b");
          if (kcountHFnegativedirectionDigiD3 == 9)
            HFnegativedirectionDigiD3->SetXTitle("D for HF- jeta =-33; depth = 3 \b");
          if (kcountHFnegativedirectionDigiD3 == 10)
            HFnegativedirectionDigiD3->SetXTitle("D for HF- jeta =-32; depth = 3 \b");
          if (kcountHFnegativedirectionDigiD3 == 11)
            HFnegativedirectionDigiD3->SetXTitle("D for HF- jeta =-31; depth = 3 \b");
          if (kcountHFnegativedirectionDigiD3 == 12)
            HFnegativedirectionDigiD3->SetXTitle("D for HF- jeta =-30; depth = 3 \b");
          if (kcountHFnegativedirectionDigiD3 == 13)
            HFnegativedirectionDigiD3->SetXTitle("D for HF- jeta =-29; depth = 3 \b");
          HFnegativedirectionDigiD3->Draw("Error");
          kcountHFnegativedirectionDigiD3++;
          if (kcountHFnegativedirectionDigiD3 > 13)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41< 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DdigiNegativeDirectionhistD1PhiSymmetryDepth3HF.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHFnegativedirectionDigiD3)
    delete h2CeffHFnegativedirectionDigiD3;
  //========================================================================================== 22222217
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=4
  //cout<<"      1D plot: D vs phi , different eta,  depth=4 *****" <<endl;
  c3x5->Clear();
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHFnegativedirectionDigiD4 = 1;
  TH1F *h2CeffHFnegativedirectionDigiD4 = new TH1F("h2CeffHFnegativedirectionDigiD4", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionDigiD:
    if (jeta - 41 < 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=4
      for (int i = 3; i < 4; i++) {
        TH1F *HFnegativedirectionDigiD4 = (TH1F *)h2CeffHFnegativedirectionDigiD4->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = digivarianceHF[i][jeta][jphi];
          if (adigiHF[i][jeta][jphi] > 0.) {
            HFnegativedirectionDigiD4->Fill(jphi, ccc1);
            ccctest = 1.;  //HFnegativedirectionDigiD4->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1717       kcountHFnegativedirectionDigiD4   =     "<<kcountHFnegativedirectionDigiD4  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHFnegativedirectionDigiD4);
          HFnegativedirectionDigiD4->SetMarkerStyle(20);
          HFnegativedirectionDigiD4->SetMarkerSize(0.4);
          HFnegativedirectionDigiD4->GetYaxis()->SetLabelSize(0.04);
          HFnegativedirectionDigiD4->SetXTitle("HFnegativedirectionDigiD4 \b");
          HFnegativedirectionDigiD4->SetMarkerColor(2);
          HFnegativedirectionDigiD4->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHFnegativedirectionDigiD4 == 1)
            HFnegativedirectionDigiD4->SetXTitle("D for HF- jeta =-41; depth = 4 \b");
          if (kcountHFnegativedirectionDigiD4 == 2)
            HFnegativedirectionDigiD4->SetXTitle("D for HF- jeta =-40; depth = 4 \b");
          if (kcountHFnegativedirectionDigiD4 == 3)
            HFnegativedirectionDigiD4->SetXTitle("D for HF- jeta =-39; depth = 4 \b");
          if (kcountHFnegativedirectionDigiD4 == 4)
            HFnegativedirectionDigiD4->SetXTitle("D for HF- jeta =-38; depth = 4 \b");
          if (kcountHFnegativedirectionDigiD4 == 5)
            HFnegativedirectionDigiD4->SetXTitle("D for HF- jeta =-37; depth = 4 \b");
          if (kcountHFnegativedirectionDigiD4 == 6)
            HFnegativedirectionDigiD4->SetXTitle("D for HF- jeta =-36; depth = 4 \b");
          if (kcountHFnegativedirectionDigiD4 == 7)
            HFnegativedirectionDigiD4->SetXTitle("D for HF- jeta =-35; depth = 4 \b");
          if (kcountHFnegativedirectionDigiD4 == 8)
            HFnegativedirectionDigiD4->SetXTitle("D for HF- jeta =-34; depth = 4 \b");
          if (kcountHFnegativedirectionDigiD4 == 9)
            HFnegativedirectionDigiD4->SetXTitle("D for HF- jeta =-33; depth = 4 \b");
          if (kcountHFnegativedirectionDigiD4 == 10)
            HFnegativedirectionDigiD4->SetXTitle("D for HF- jeta =-32; depth = 4 \b");
          if (kcountHFnegativedirectionDigiD4 == 11)
            HFnegativedirectionDigiD4->SetXTitle("D for HF- jeta =-31; depth = 4 \b");
          if (kcountHFnegativedirectionDigiD4 == 12)
            HFnegativedirectionDigiD4->SetXTitle("D for HF- jeta =-30; depth = 4 \b");
          if (kcountHFnegativedirectionDigiD4 == 13)
            HFnegativedirectionDigiD4->SetXTitle("D for HF- jeta =-29; depth = 4 \b");
          HFnegativedirectionDigiD4->Draw("Error");
          kcountHFnegativedirectionDigiD4++;
          if (kcountHFnegativedirectionDigiD4 > 13)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41< 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DdigiNegativeDirectionhistD1PhiSymmetryDepth4HF.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHFnegativedirectionDigiD4)
    delete h2CeffHFnegativedirectionDigiD4;

  //=====================================================================       END of Digi HF for phi-symmetry
  //=====================================================================       END of Digi HF for phi-symmetry
  //=====================================================================       END of Digi HF for phi-symmetry

  //============================================================================================================       END of Digi for phi-symmetry
  //============================================================================================================       END of Digi for phi-symmetry
  //============================================================================================================       END of Digi for phi-symmetry

  //============================================================================================================       END of Digi for phi-symmetry
  //============================================================================================================       END of Digi for phi-symmetry
  //============================================================================================================       END of Digi for phi-symmetry
  //============================================================================================================       END of Digi for phi-symmetry
  //============================================================================================================       END of Digi for phi-symmetry
  //============================================================================================================       END of Digi for phi-symmetry
  //============================================================================================================       END of Digi for phi-symmetry
  //============================================================================================================       END of Digi for phi-symmetry
  //============================================================================================================       END of Digi for phi-symmetry

  // END of Digi  Digi  Digi  Digi  Digi  ENDDigi  Digi  Digi  Digi  Digi  ENDDigi  Digi  Digi  Digi  ENDDigi  Digi  Digi  Digi  Digi  Digi  Digi  ENDDigi  Digi  Digi  Digi  Digi  Digi  Digi  Digi  Digi  Digi  ENDDigi END

  ////////////////////// Start   Recosignal  Start Recosignal  Start   Recosignal  Start   Recosignal  Start   Recosignal Start  Recosignal Start Recosignal Start Recosignal Start Recosignal Start Recosignal Start
  ////////////////////// Start   Recosignal  Start Recosignal  Start   Recosignal  Start   Recosignal  Start   Recosignal Start  Recosignal Start Recosignal Start Recosignal Start Recosignal Start Recosignal Start
  ////////////////////// Start   Recosignal  Start Recosignal  Start   Recosignal  Start   Recosignal  Start   Recosignal Start  Recosignal Start Recosignal Start Recosignal Start Recosignal Start Recosignal Start

  ////////////////////////////////////////////////////////////////////////////////////////////////////     Recosignal HB
  ////////////////////////////////////////////////////////////////////////////////////////////////////     Recosignal HB
  ////////////////////////////////////////////////////////////////////////////////////////////////////     Recosignal HB
  //  int k_max[5]={0,4,7,4,4}; // maximum depth for each subdet
  //ndepth = k_max[5];
  ndepth = 4;
  double arecosignalHB[ndepth][njeta][njphi];
  double recosignalvarianceHB[ndepth][njeta][njphi];
  //                                   RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR:   Recosignal HB  recSignalEnergy
  TH2F *recSignalEnergy1HB1 = (TH2F *)dir->FindObjectAny("h_recSignalEnergy1_HB1");
  TH2F *recSignalEnergy0HB1 = (TH2F *)dir->FindObjectAny("h_recSignalEnergy0_HB1");
  TH2F *recSignalEnergyHB1 = (TH2F *)recSignalEnergy1HB1->Clone("recSignalEnergyHB1");
  recSignalEnergyHB1->Divide(recSignalEnergy1HB1, recSignalEnergy0HB1, 1, 1, "B");
  TH2F *recSignalEnergy1HB2 = (TH2F *)dir->FindObjectAny("h_recSignalEnergy1_HB2");
  TH2F *recSignalEnergy0HB2 = (TH2F *)dir->FindObjectAny("h_recSignalEnergy0_HB2");
  TH2F *recSignalEnergyHB2 = (TH2F *)recSignalEnergy1HB2->Clone("recSignalEnergyHB2");
  recSignalEnergyHB2->Divide(recSignalEnergy1HB2, recSignalEnergy0HB2, 1, 1, "B");
  TH2F *recSignalEnergy1HB3 = (TH2F *)dir->FindObjectAny("h_recSignalEnergy1_HB3");
  TH2F *recSignalEnergy0HB3 = (TH2F *)dir->FindObjectAny("h_recSignalEnergy0_HB3");
  TH2F *recSignalEnergyHB3 = (TH2F *)recSignalEnergy1HB3->Clone("recSignalEnergyHB3");
  recSignalEnergyHB3->Divide(recSignalEnergy1HB3, recSignalEnergy0HB3, 1, 1, "B");
  TH2F *recSignalEnergy1HB4 = (TH2F *)dir->FindObjectAny("h_recSignalEnergy1_HB4");
  TH2F *recSignalEnergy0HB4 = (TH2F *)dir->FindObjectAny("h_recSignalEnergy0_HB4");
  TH2F *recSignalEnergyHB4 = (TH2F *)recSignalEnergy1HB4->Clone("recSignalEnergyHB4");
  recSignalEnergyHB4->Divide(recSignalEnergy1HB4, recSignalEnergy0HB4, 1, 1, "B");
  for (int jeta = 0; jeta < njeta; jeta++) {
    //====================================================================== PHI normalization & put R into massive arecosignalHB
    //preparation for PHI normalization:
    double sumrecosignalHB0 = 0;
    int nsumrecosignalHB0 = 0;
    double sumrecosignalHB1 = 0;
    int nsumrecosignalHB1 = 0;
    double sumrecosignalHB2 = 0;
    int nsumrecosignalHB2 = 0;
    double sumrecosignalHB3 = 0;
    int nsumrecosignalHB3 = 0;
    for (int jphi = 0; jphi < njphi; jphi++) {
      arecosignalHB[0][jeta][jphi] = recSignalEnergyHB1->GetBinContent(jeta + 1, jphi + 1);
      arecosignalHB[1][jeta][jphi] = recSignalEnergyHB2->GetBinContent(jeta + 1, jphi + 1);
      arecosignalHB[2][jeta][jphi] = recSignalEnergyHB3->GetBinContent(jeta + 1, jphi + 1);
      arecosignalHB[3][jeta][jphi] = recSignalEnergyHB4->GetBinContent(jeta + 1, jphi + 1);
      if (arecosignalHB[0][jeta][jphi] > 0.) {
        sumrecosignalHB0 += arecosignalHB[0][jeta][jphi];
        ++nsumrecosignalHB0;
      }
      if (arecosignalHB[1][jeta][jphi] > 0.) {
        sumrecosignalHB1 += arecosignalHB[1][jeta][jphi];
        ++nsumrecosignalHB1;
      }
      if (arecosignalHB[2][jeta][jphi] > 0.) {
        sumrecosignalHB2 += arecosignalHB[2][jeta][jphi];
        ++nsumrecosignalHB2;
      }
      if (arecosignalHB[3][jeta][jphi] > 0.) {
        sumrecosignalHB3 += arecosignalHB[3][jeta][jphi];
        ++nsumrecosignalHB3;
      }
    }  // phi
    // PHI normalization:
    for (int jphi = 0; jphi < njphi; jphi++) {
      if (arecosignalHB[0][jeta][jphi] > 0.)
        arecosignalHB[0][jeta][jphi] /= (sumrecosignalHB0 / nsumrecosignalHB0);
      if (arecosignalHB[1][jeta][jphi] > 0.)
        arecosignalHB[1][jeta][jphi] /= (sumrecosignalHB1 / nsumrecosignalHB1);
      if (arecosignalHB[2][jeta][jphi] > 0.)
        arecosignalHB[2][jeta][jphi] /= (sumrecosignalHB2 / nsumrecosignalHB2);
      if (arecosignalHB[3][jeta][jphi] > 0.)
        arecosignalHB[3][jeta][jphi] /= (sumrecosignalHB3 / nsumrecosignalHB3);
    }  // phi
  }    //eta
  //------------------------  2D-eta/phi-plot: R, averaged over depthfs
  //======================================================================
  //======================================================================
  //cout<<"      R2D-eta/phi-plot: R, averaged over depthfs *****" <<endl;
  c2x1->Clear();
  /////////////////
  c2x1->Divide(2, 1);
  c2x1->cd(1);
  TH2F *GefzRrecosignalHB42D = new TH2F("GefzRrecosignalHB42D", "", neta, -41., 41., nphi, 0., 72.);
  TH2F *GefzRrecosignalHB42D0 = new TH2F("GefzRrecosignalHB42D0", "", neta, -41., 41., nphi, 0., 72.);
  TH2F *GefzRrecosignalHB42DF = (TH2F *)GefzRrecosignalHB42D0->Clone("GefzRrecosignalHB42DF");
  for (int i = 0; i < ndepth; i++) {
    for (int jeta = 0; jeta < neta; jeta++) {
      for (int jphi = 0; jphi < nphi; jphi++) {
        double ccc1 = arecosignalHB[i][jeta][jphi];
        int k2plot = jeta - 41;
        int kkk = k2plot;  //if(k2plot >0 ) kkk=k2plot+1; //-41 +41 !=0
        if (ccc1 != 0.) {
          GefzRrecosignalHB42D->Fill(kkk, jphi, ccc1);
          GefzRrecosignalHB42D0->Fill(kkk, jphi, 1.);
        }
      }
    }
  }
  GefzRrecosignalHB42DF->Divide(GefzRrecosignalHB42D, GefzRrecosignalHB42D0, 1, 1, "B");  // average A
  gPad->SetGridy();
  gPad->SetGridx();  //      gPad->SetLogz();
  GefzRrecosignalHB42DF->SetXTitle("<R>_depth       #eta  \b");
  GefzRrecosignalHB42DF->SetYTitle("      #phi \b");
  GefzRrecosignalHB42DF->Draw("COLZ");

  c2x1->cd(2);
  TH1F *energyhitSignal_HB = (TH1F *)dir->FindObjectAny("h_energyhitSignal_HB");
  energyhitSignal_HB->SetMarkerStyle(20);
  energyhitSignal_HB->SetMarkerSize(0.4);
  energyhitSignal_HB->GetYaxis()->SetLabelSize(0.04);
  energyhitSignal_HB->SetXTitle("energyhitSignal_HB \b");
  energyhitSignal_HB->SetMarkerColor(2);
  energyhitSignal_HB->SetLineColor(0);
  gPad->SetGridy();
  gPad->SetGridx();
  energyhitSignal_HB->Draw("Error");

  /////////////////
  c2x1->Update();
  c2x1->Print("RrecosignalGeneralD2PhiSymmetryHB.png");
  c2x1->Clear();
  // clean-up
  if (GefzRrecosignalHB42D)
    delete GefzRrecosignalHB42D;
  if (GefzRrecosignalHB42D0)
    delete GefzRrecosignalHB42D0;
  if (GefzRrecosignalHB42DF)
    delete GefzRrecosignalHB42DF;
  //====================================================================== 1D plot: R vs phi , averaged over depthfs & eta
  //======================================================================
  //cout<<"      1D plot: R vs phi , averaged over depthfs & eta *****" <<endl;
  c1x1->Clear();
  /////////////////
  c1x1->Divide(1, 1);
  c1x1->cd(1);
  TH1F *GefzRrecosignalHB41D = new TH1F("GefzRrecosignalHB41D", "", nphi, 0., 72.);
  TH1F *GefzRrecosignalHB41D0 = new TH1F("GefzRrecosignalHB41D0", "", nphi, 0., 72.);
  TH1F *GefzRrecosignalHB41DF = (TH1F *)GefzRrecosignalHB41D0->Clone("GefzRrecosignalHB41DF");
  for (int jphi = 0; jphi < nphi; jphi++) {
    for (int jeta = 0; jeta < neta; jeta++) {
      for (int i = 0; i < ndepth; i++) {
        double ccc1 = arecosignalHB[i][jeta][jphi];
        if (ccc1 != 0.) {
          GefzRrecosignalHB41D->Fill(jphi, ccc1);
          GefzRrecosignalHB41D0->Fill(jphi, 1.);
        }
      }
    }
  }
  GefzRrecosignalHB41DF->Divide(
      GefzRrecosignalHB41D, GefzRrecosignalHB41D0, 1, 1, "B");  // R averaged over depthfs & eta
  GefzRrecosignalHB41D0->Sumw2();
  //    for (int jphi=1;jphi<73;jphi++) {GefzRrecosignalHB41DF->SetBinError(jphi,0.01);}
  gPad->SetGridy();
  gPad->SetGridx();  //      gPad->SetLogz();
  GefzRrecosignalHB41DF->SetMarkerStyle(20);
  GefzRrecosignalHB41DF->SetMarkerSize(1.4);
  GefzRrecosignalHB41DF->GetZaxis()->SetLabelSize(0.08);
  GefzRrecosignalHB41DF->SetXTitle("#phi  \b");
  GefzRrecosignalHB41DF->SetYTitle("  <R> \b");
  GefzRrecosignalHB41DF->SetZTitle("<R>_PHI  - AllDepthfs \b");
  GefzRrecosignalHB41DF->SetMarkerColor(4);
  GefzRrecosignalHB41DF->SetLineColor(
      4);  //  GefzRrecosignalHB41DF->SetMinimum(0.8);     //      GefzRrecosignalHB41DF->SetMaximum(1.000);
  GefzRrecosignalHB41DF->Draw("Error");
  /////////////////
  c1x1->Update();
  c1x1->Print("RrecosignalGeneralD1PhiSymmetryHB.png");
  c1x1->Clear();
  // clean-up
  if (GefzRrecosignalHB41D)
    delete GefzRrecosignalHB41D;
  if (GefzRrecosignalHB41D0)
    delete GefzRrecosignalHB41D0;
  if (GefzRrecosignalHB41DF)
    delete GefzRrecosignalHB41DF;
  //========================================================================================== 4
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=1
  //cout<<"      1D plot: R vs phi , different eta,  depth=1 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(4, 4);
  c3x5->cd(1);
  int kcountHBpositivedirectionRecosignal1 = 1;
  TH1F *h2CeffHBpositivedirectionRecosignal1 = new TH1F("h2CeffHBpositivedirectionRecosignal1", "", nphi, 0., 72.);
  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionRecosignal:
    if (jeta - 41 >= 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=1
      for (int i = 0; i < 1; i++) {
        TH1F *HBpositivedirectionRecosignal1 = (TH1F *)h2CeffHBpositivedirectionRecosignal1->Clone("twod1");
        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = arecosignalHB[i][jeta][jphi];
          if (ccc1 != 0.) {
            HBpositivedirectionRecosignal1->Fill(jphi, ccc1);
            ccctest = 1.;  //HBpositivedirectionRecosignal1->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //	  cout<<"444        kcountHBpositivedirectionRecosignal1   =     "<<kcountHBpositivedirectionRecosignal1  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHBpositivedirectionRecosignal1);
          HBpositivedirectionRecosignal1->SetMarkerStyle(20);
          HBpositivedirectionRecosignal1->SetMarkerSize(0.4);
          HBpositivedirectionRecosignal1->GetYaxis()->SetLabelSize(0.04);
          HBpositivedirectionRecosignal1->SetXTitle("HBpositivedirectionRecosignal1 \b");
          HBpositivedirectionRecosignal1->SetMarkerColor(2);
          HBpositivedirectionRecosignal1->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHBpositivedirectionRecosignal1 == 1)
            HBpositivedirectionRecosignal1->SetXTitle("R for HB+ jeta =  0; depth = 1 \b");
          if (kcountHBpositivedirectionRecosignal1 == 2)
            HBpositivedirectionRecosignal1->SetXTitle("R for HB+ jeta =  1; depth = 1 \b");
          if (kcountHBpositivedirectionRecosignal1 == 3)
            HBpositivedirectionRecosignal1->SetXTitle("R for HB+ jeta =  2; depth = 1 \b");
          if (kcountHBpositivedirectionRecosignal1 == 4)
            HBpositivedirectionRecosignal1->SetXTitle("R for HB+ jeta =  3; depth = 1 \b");
          if (kcountHBpositivedirectionRecosignal1 == 5)
            HBpositivedirectionRecosignal1->SetXTitle("R for HB+ jeta =  4; depth = 1 \b");
          if (kcountHBpositivedirectionRecosignal1 == 6)
            HBpositivedirectionRecosignal1->SetXTitle("R for HB+ jeta =  5; depth = 1 \b");
          if (kcountHBpositivedirectionRecosignal1 == 7)
            HBpositivedirectionRecosignal1->SetXTitle("R for HB+ jeta =  6; depth = 1 \b");
          if (kcountHBpositivedirectionRecosignal1 == 8)
            HBpositivedirectionRecosignal1->SetXTitle("R for HB+ jeta =  7; depth = 1 \b");
          if (kcountHBpositivedirectionRecosignal1 == 9)
            HBpositivedirectionRecosignal1->SetXTitle("R for HB+ jeta =  8; depth = 1 \b");
          if (kcountHBpositivedirectionRecosignal1 == 10)
            HBpositivedirectionRecosignal1->SetXTitle("R for HB+ jeta =  9; depth = 1 \b");
          if (kcountHBpositivedirectionRecosignal1 == 11)
            HBpositivedirectionRecosignal1->SetXTitle("R for HB+ jeta = 10; depth = 1 \b");
          if (kcountHBpositivedirectionRecosignal1 == 12)
            HBpositivedirectionRecosignal1->SetXTitle("R for HB+ jeta = 11; depth = 1 \b");
          if (kcountHBpositivedirectionRecosignal1 == 13)
            HBpositivedirectionRecosignal1->SetXTitle("R for HB+ jeta = 12; depth = 1 \b");
          if (kcountHBpositivedirectionRecosignal1 == 14)
            HBpositivedirectionRecosignal1->SetXTitle("R for HB+ jeta = 13; depth = 1 \b");
          if (kcountHBpositivedirectionRecosignal1 == 15)
            HBpositivedirectionRecosignal1->SetXTitle("R for HB+ jeta = 14; depth = 1 \b");
          if (kcountHBpositivedirectionRecosignal1 == 16)
            HBpositivedirectionRecosignal1->SetXTitle("R for HB+ jeta = 15; depth = 1 \b");
          HBpositivedirectionRecosignal1->Draw("Error");
          kcountHBpositivedirectionRecosignal1++;
          if (kcountHBpositivedirectionRecosignal1 > 16)
            break;  //
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RrecosignalPositiveDirectionhistD1PhiSymmetryDepth1HB.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHBpositivedirectionRecosignal1)
    delete h2CeffHBpositivedirectionRecosignal1;

  //========================================================================================== 5
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=2
  //  cout<<"      1D plot: R vs phi , different eta,  depth=2 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(4, 4);
  c3x5->cd(1);
  int kcountHBpositivedirectionRecosignal2 = 1;
  TH1F *h2CeffHBpositivedirectionRecosignal2 = new TH1F("h2CeffHBpositivedirectionRecosignal2", "", nphi, 0., 72.);
  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionRecosignal:
    if (jeta - 41 >= 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=2
      for (int i = 1; i < 2; i++) {
        TH1F *HBpositivedirectionRecosignal2 = (TH1F *)h2CeffHBpositivedirectionRecosignal2->Clone("twod1");
        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = arecosignalHB[i][jeta][jphi];
          if (ccc1 != 0.) {
            HBpositivedirectionRecosignal2->Fill(jphi, ccc1);
            ccctest = 1.;  //HBpositivedirectionRecosignal2->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"555        kcountHBpositivedirectionRecosignal2   =     "<<kcountHBpositivedirectionRecosignal2  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHBpositivedirectionRecosignal2);
          HBpositivedirectionRecosignal2->SetMarkerStyle(20);
          HBpositivedirectionRecosignal2->SetMarkerSize(0.4);
          HBpositivedirectionRecosignal2->GetYaxis()->SetLabelSize(0.04);
          HBpositivedirectionRecosignal2->SetXTitle("HBpositivedirectionRecosignal2 \b");
          HBpositivedirectionRecosignal2->SetMarkerColor(2);
          HBpositivedirectionRecosignal2->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHBpositivedirectionRecosignal2 == 1)
            HBpositivedirectionRecosignal2->SetXTitle("R for HB+ jeta =  0; depth = 2 \b");
          if (kcountHBpositivedirectionRecosignal2 == 2)
            HBpositivedirectionRecosignal2->SetXTitle("R for HB+ jeta =  1; depth = 2 \b");
          if (kcountHBpositivedirectionRecosignal2 == 3)
            HBpositivedirectionRecosignal2->SetXTitle("R for HB+ jeta =  2; depth = 2 \b");
          if (kcountHBpositivedirectionRecosignal2 == 4)
            HBpositivedirectionRecosignal2->SetXTitle("R for HB+ jeta =  3; depth = 2 \b");
          if (kcountHBpositivedirectionRecosignal2 == 5)
            HBpositivedirectionRecosignal2->SetXTitle("R for HB+ jeta =  4; depth = 2 \b");
          if (kcountHBpositivedirectionRecosignal2 == 6)
            HBpositivedirectionRecosignal2->SetXTitle("R for HB+ jeta =  5; depth = 2 \b");
          if (kcountHBpositivedirectionRecosignal2 == 7)
            HBpositivedirectionRecosignal2->SetXTitle("R for HB+ jeta =  6; depth = 2 \b");
          if (kcountHBpositivedirectionRecosignal2 == 8)
            HBpositivedirectionRecosignal2->SetXTitle("R for HB+ jeta =  7; depth = 2 \b");
          if (kcountHBpositivedirectionRecosignal2 == 9)
            HBpositivedirectionRecosignal2->SetXTitle("R for HB+ jeta =  8; depth = 2 \b");
          if (kcountHBpositivedirectionRecosignal2 == 10)
            HBpositivedirectionRecosignal2->SetXTitle("R for HB+ jeta =  9; depth = 2 \b");
          if (kcountHBpositivedirectionRecosignal2 == 11)
            HBpositivedirectionRecosignal2->SetXTitle("R for HB+ jeta = 10; depth = 2 \b");
          if (kcountHBpositivedirectionRecosignal2 == 12)
            HBpositivedirectionRecosignal2->SetXTitle("R for HB+ jeta = 11; depth = 2 \b");
          if (kcountHBpositivedirectionRecosignal2 == 13)
            HBpositivedirectionRecosignal2->SetXTitle("R for HB+ jeta = 12; depth = 2 \b");
          if (kcountHBpositivedirectionRecosignal2 == 14)
            HBpositivedirectionRecosignal2->SetXTitle("R for HB+ jeta = 13; depth = 2 \b");
          if (kcountHBpositivedirectionRecosignal2 == 15)
            HBpositivedirectionRecosignal2->SetXTitle("R for HB+ jeta = 14; depth = 2 \b");
          if (kcountHBpositivedirectionRecosignal2 == 16)
            HBpositivedirectionRecosignal2->SetXTitle("R for HB+ jeta = 15; depth = 2 \b");
          HBpositivedirectionRecosignal2->Draw("Error");
          kcountHBpositivedirectionRecosignal2++;
          if (kcountHBpositivedirectionRecosignal2 > 16)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RrecosignalPositiveDirectionhistD1PhiSymmetryDepth2HB.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHBpositivedirectionRecosignal2)
    delete h2CeffHBpositivedirectionRecosignal2;
  //========================================================================================== 6
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=3
  //cout<<"      1D plot: R vs phi , different eta,  depth=3 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(4, 4);
  c3x5->cd(1);
  int kcountHBpositivedirectionRecosignal3 = 1;
  TH1F *h2CeffHBpositivedirectionRecosignal3 = new TH1F("h2CeffHBpositivedirectionRecosignal3", "", nphi, 0., 72.);
  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionRecosignal:
    if (jeta - 41 >= 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=3
      for (int i = 2; i < 3; i++) {
        TH1F *HBpositivedirectionRecosignal3 = (TH1F *)h2CeffHBpositivedirectionRecosignal3->Clone("twod1");
        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = arecosignalHB[i][jeta][jphi];
          if (ccc1 != 0.) {
            HBpositivedirectionRecosignal3->Fill(jphi, ccc1);
            ccctest = 1.;  //HBpositivedirectionRecosignal3->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"666        kcountHBpositivedirectionRecosignal3   =     "<<kcountHBpositivedirectionRecosignal3  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHBpositivedirectionRecosignal3);
          HBpositivedirectionRecosignal3->SetMarkerStyle(20);
          HBpositivedirectionRecosignal3->SetMarkerSize(0.4);
          HBpositivedirectionRecosignal3->GetYaxis()->SetLabelSize(0.04);
          HBpositivedirectionRecosignal3->SetXTitle("HBpositivedirectionRecosignal3 \b");
          HBpositivedirectionRecosignal3->SetMarkerColor(2);
          HBpositivedirectionRecosignal3->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHBpositivedirectionRecosignal3 == 1)
            HBpositivedirectionRecosignal3->SetXTitle("R for HB+ jeta =  0; depth = 3 \b");
          if (kcountHBpositivedirectionRecosignal3 == 2)
            HBpositivedirectionRecosignal3->SetXTitle("R for HB+ jeta =  1; depth = 3 \b");
          if (kcountHBpositivedirectionRecosignal3 == 3)
            HBpositivedirectionRecosignal3->SetXTitle("R for HB+ jeta =  2; depth = 3 \b");
          if (kcountHBpositivedirectionRecosignal3 == 4)
            HBpositivedirectionRecosignal3->SetXTitle("R for HB+ jeta =  3; depth = 3 \b");
          if (kcountHBpositivedirectionRecosignal3 == 5)
            HBpositivedirectionRecosignal3->SetXTitle("R for HB+ jeta =  4; depth = 3 \b");
          if (kcountHBpositivedirectionRecosignal3 == 6)
            HBpositivedirectionRecosignal3->SetXTitle("R for HB+ jeta =  5; depth = 3 \b");
          if (kcountHBpositivedirectionRecosignal3 == 7)
            HBpositivedirectionRecosignal3->SetXTitle("R for HB+ jeta =  6; depth = 3 \b");
          if (kcountHBpositivedirectionRecosignal3 == 8)
            HBpositivedirectionRecosignal3->SetXTitle("R for HB+ jeta =  7; depth = 3 \b");
          if (kcountHBpositivedirectionRecosignal3 == 9)
            HBpositivedirectionRecosignal3->SetXTitle("R for HB+ jeta =  8; depth = 3 \b");
          if (kcountHBpositivedirectionRecosignal3 == 10)
            HBpositivedirectionRecosignal3->SetXTitle("R for HB+ jeta =  9; depth = 3 \b");
          if (kcountHBpositivedirectionRecosignal3 == 11)
            HBpositivedirectionRecosignal3->SetXTitle("R for HB+ jeta =  0; depth = 3 \b");
          if (kcountHBpositivedirectionRecosignal3 == 12)
            HBpositivedirectionRecosignal3->SetXTitle("R for HB+ jeta = 11; depth = 3 \b");
          if (kcountHBpositivedirectionRecosignal3 == 13)
            HBpositivedirectionRecosignal3->SetXTitle("R for HB+ jeta = 12; depth = 3 \b");
          if (kcountHBpositivedirectionRecosignal3 == 14)
            HBpositivedirectionRecosignal3->SetXTitle("R for HB+ jeta = 13; depth = 3 \b");
          if (kcountHBpositivedirectionRecosignal3 == 15)
            HBpositivedirectionRecosignal3->SetXTitle("R for HB+ jeta = 14; depth = 3 \b");
          if (kcountHBpositivedirectionRecosignal3 == 16)
            HBpositivedirectionRecosignal3->SetXTitle("R for HB+ jeta = 15; depth = 3 \b");
          HBpositivedirectionRecosignal3->Draw("Error");
          kcountHBpositivedirectionRecosignal3++;
          if (kcountHBpositivedirectionRecosignal3 > 16)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RrecosignalPositiveDirectionhistD1PhiSymmetryDepth3HB.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHBpositivedirectionRecosignal3)
    delete h2CeffHBpositivedirectionRecosignal3;
  //========================================================================================== 7
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=4
  //cout<<"      1D plot: R vs phi , different eta,  depth=4 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(4, 4);
  c3x5->cd(1);
  int kcountHBpositivedirectionRecosignal4 = 1;
  TH1F *h2CeffHBpositivedirectionRecosignal4 = new TH1F("h2CeffHBpositivedirectionRecosignal4", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionRecosignal:
    if (jeta - 41 >= 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=4
      for (int i = 3; i < 4; i++) {
        TH1F *HBpositivedirectionRecosignal4 = (TH1F *)h2CeffHBpositivedirectionRecosignal4->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = arecosignalHB[i][jeta][jphi];
          if (ccc1 != 0.) {
            HBpositivedirectionRecosignal4->Fill(jphi, ccc1);
            ccctest = 1.;  //HBpositivedirectionRecosignal4->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"777        kcountHBpositivedirectionRecosignal4   =     "<<kcountHBpositivedirectionRecosignal4  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHBpositivedirectionRecosignal4);
          HBpositivedirectionRecosignal4->SetMarkerStyle(20);
          HBpositivedirectionRecosignal4->SetMarkerSize(0.4);
          HBpositivedirectionRecosignal4->GetYaxis()->SetLabelSize(0.04);
          HBpositivedirectionRecosignal4->SetXTitle("HBpositivedirectionRecosignal4 \b");
          HBpositivedirectionRecosignal4->SetMarkerColor(2);
          HBpositivedirectionRecosignal4->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHBpositivedirectionRecosignal4 == 1)
            HBpositivedirectionRecosignal4->SetXTitle("R for HB+ jeta =  0; depth = 4 \b");
          if (kcountHBpositivedirectionRecosignal4 == 2)
            HBpositivedirectionRecosignal4->SetXTitle("R for HB+ jeta =  1; depth = 4 \b");
          if (kcountHBpositivedirectionRecosignal4 == 3)
            HBpositivedirectionRecosignal4->SetXTitle("R for HB+ jeta =  2; depth = 4 \b");
          if (kcountHBpositivedirectionRecosignal4 == 4)
            HBpositivedirectionRecosignal4->SetXTitle("R for HB+ jeta =  3; depth = 4 \b");
          if (kcountHBpositivedirectionRecosignal4 == 5)
            HBpositivedirectionRecosignal4->SetXTitle("R for HB+ jeta =  4; depth = 4 \b");
          if (kcountHBpositivedirectionRecosignal4 == 6)
            HBpositivedirectionRecosignal4->SetXTitle("R for HB+ jeta =  5; depth = 4 \b");
          if (kcountHBpositivedirectionRecosignal4 == 7)
            HBpositivedirectionRecosignal4->SetXTitle("R for HB+ jeta =  6; depth = 4 \b");
          if (kcountHBpositivedirectionRecosignal4 == 8)
            HBpositivedirectionRecosignal4->SetXTitle("R for HB+ jeta =  7; depth = 4 \b");
          if (kcountHBpositivedirectionRecosignal4 == 9)
            HBpositivedirectionRecosignal4->SetXTitle("R for HB+ jeta =  8; depth = 4 \b");
          if (kcountHBpositivedirectionRecosignal4 == 10)
            HBpositivedirectionRecosignal4->SetXTitle("R for HB+ jeta =  9; depth = 4 \b");
          if (kcountHBpositivedirectionRecosignal4 == 11)
            HBpositivedirectionRecosignal4->SetXTitle("R for HB+ jeta = 10; depth = 4 \b");
          if (kcountHBpositivedirectionRecosignal4 == 12)
            HBpositivedirectionRecosignal4->SetXTitle("R for HB+ jeta = 11; depth = 4 \b");
          if (kcountHBpositivedirectionRecosignal4 == 13)
            HBpositivedirectionRecosignal4->SetXTitle("R for HB+ jeta = 12; depth = 4 \b");
          if (kcountHBpositivedirectionRecosignal4 == 14)
            HBpositivedirectionRecosignal4->SetXTitle("R for HB+ jeta = 13; depth = 4 \b");
          if (kcountHBpositivedirectionRecosignal4 == 15)
            HBpositivedirectionRecosignal4->SetXTitle("R for HB+ jeta = 14; depth = 4 \b");
          if (kcountHBpositivedirectionRecosignal4 == 16)
            HBpositivedirectionRecosignal4->SetXTitle("R for HB+ jeta = 15; depth = 4 \b");
          HBpositivedirectionRecosignal4->Draw("Error");
          kcountHBpositivedirectionRecosignal4++;
          if (kcountHBpositivedirectionRecosignal4 > 16)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RrecosignalPositiveDirectionhistD1PhiSymmetryDepth4HB.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHBpositivedirectionRecosignal4)
    delete h2CeffHBpositivedirectionRecosignal4;

  //========================================================================================== 1114
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=1
  //cout<<"      1D plot: R vs phi , different eta,  depth=1 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(4, 4);
  c3x5->cd(1);
  int kcountHBnegativedirectionRecosignal1 = 1;
  TH1F *h2CeffHBnegativedirectionRecosignal1 = new TH1F("h2CeffHBnegativedirectionRecosignal1", "", nphi, 0., 72.);
  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionRecosignal:
    if (jeta - 41 < 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=1
      for (int i = 0; i < 1; i++) {
        TH1F *HBnegativedirectionRecosignal1 = (TH1F *)h2CeffHBnegativedirectionRecosignal1->Clone("twod1");
        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = arecosignalHB[i][jeta][jphi];
          if (ccc1 != 0.) {
            HBnegativedirectionRecosignal1->Fill(jphi, ccc1);
            ccctest = 1.;  //HBnegativedirectionRecosignal1->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //	  cout<<"444        kcountHBnegativedirectionRecosignal1   =     "<<kcountHBnegativedirectionRecosignal1  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHBnegativedirectionRecosignal1);
          HBnegativedirectionRecosignal1->SetMarkerStyle(20);
          HBnegativedirectionRecosignal1->SetMarkerSize(0.4);
          HBnegativedirectionRecosignal1->GetYaxis()->SetLabelSize(0.04);
          HBnegativedirectionRecosignal1->SetXTitle("HBnegativedirectionRecosignal1 \b");
          HBnegativedirectionRecosignal1->SetMarkerColor(2);
          HBnegativedirectionRecosignal1->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHBnegativedirectionRecosignal1 == 1)
            HBnegativedirectionRecosignal1->SetXTitle("R for HB- jeta = -16; depth = 1 \b");
          if (kcountHBnegativedirectionRecosignal1 == 2)
            HBnegativedirectionRecosignal1->SetXTitle("R for HB- jeta = -15; depth = 1 \b");
          if (kcountHBnegativedirectionRecosignal1 == 3)
            HBnegativedirectionRecosignal1->SetXTitle("R for HB- jeta = -14; depth = 1 \b");
          if (kcountHBnegativedirectionRecosignal1 == 4)
            HBnegativedirectionRecosignal1->SetXTitle("R for HB- jeta = -13; depth = 1 \b");
          if (kcountHBnegativedirectionRecosignal1 == 5)
            HBnegativedirectionRecosignal1->SetXTitle("R for HB- jeta = -12; depth = 1 \b");
          if (kcountHBnegativedirectionRecosignal1 == 6)
            HBnegativedirectionRecosignal1->SetXTitle("R for HB- jeta = -11; depth = 1 \b");
          if (kcountHBnegativedirectionRecosignal1 == 7)
            HBnegativedirectionRecosignal1->SetXTitle("R for HB- jeta = -10; depth = 1 \b");
          if (kcountHBnegativedirectionRecosignal1 == 8)
            HBnegativedirectionRecosignal1->SetXTitle("R for HB- jeta =  -9; depth = 1 \b");
          if (kcountHBnegativedirectionRecosignal1 == 9)
            HBnegativedirectionRecosignal1->SetXTitle("R for HB- jeta =  -8; depth = 1 \b");
          if (kcountHBnegativedirectionRecosignal1 == 10)
            HBnegativedirectionRecosignal1->SetXTitle("R for HB- jeta =  -7; depth = 1 \b");
          if (kcountHBnegativedirectionRecosignal1 == 11)
            HBnegativedirectionRecosignal1->SetXTitle("R for HB- jeta =  -6; depth = 1 \b");
          if (kcountHBnegativedirectionRecosignal1 == 12)
            HBnegativedirectionRecosignal1->SetXTitle("R for HB- jeta =  -5; depth = 1 \b");
          if (kcountHBnegativedirectionRecosignal1 == 13)
            HBnegativedirectionRecosignal1->SetXTitle("R for HB- jeta =  -4; depth = 1 \b");
          if (kcountHBnegativedirectionRecosignal1 == 14)
            HBnegativedirectionRecosignal1->SetXTitle("R for HB- jeta =  -3; depth = 1 \b");
          if (kcountHBnegativedirectionRecosignal1 == 15)
            HBnegativedirectionRecosignal1->SetXTitle("R for HB- jeta =  -2; depth = 1 \b");
          if (kcountHBnegativedirectionRecosignal1 == 16)
            HBnegativedirectionRecosignal1->SetXTitle("R for HB- jeta =  -1; depth = 1 \b");
          HBnegativedirectionRecosignal1->Draw("Error");
          kcountHBnegativedirectionRecosignal1++;
          if (kcountHBnegativedirectionRecosignal1 > 16)
            break;  //
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 < 0 )
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RrecosignalNegativeDirectionhistD1PhiSymmetryDepth1HB.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHBnegativedirectionRecosignal1)
    delete h2CeffHBnegativedirectionRecosignal1;

  //========================================================================================== 1115
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=2
  //  cout<<"      1D plot: R vs phi , different eta,  depth=2 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(4, 4);
  c3x5->cd(1);
  int kcountHBnegativedirectionRecosignal2 = 1;
  TH1F *h2CeffHBnegativedirectionRecosignal2 = new TH1F("h2CeffHBnegativedirectionRecosignal2", "", nphi, 0., 72.);
  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionRecosignal:
    if (jeta - 41 < 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=2
      for (int i = 1; i < 2; i++) {
        TH1F *HBnegativedirectionRecosignal2 = (TH1F *)h2CeffHBnegativedirectionRecosignal2->Clone("twod1");
        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = arecosignalHB[i][jeta][jphi];
          if (ccc1 != 0.) {
            HBnegativedirectionRecosignal2->Fill(jphi, ccc1);
            ccctest = 1.;  //HBnegativedirectionRecosignal2->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"555        kcountHBnegativedirectionRecosignal2   =     "<<kcountHBnegativedirectionRecosignal2  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHBnegativedirectionRecosignal2);
          HBnegativedirectionRecosignal2->SetMarkerStyle(20);
          HBnegativedirectionRecosignal2->SetMarkerSize(0.4);
          HBnegativedirectionRecosignal2->GetYaxis()->SetLabelSize(0.04);
          HBnegativedirectionRecosignal2->SetXTitle("HBnegativedirectionRecosignal2 \b");
          HBnegativedirectionRecosignal2->SetMarkerColor(2);
          HBnegativedirectionRecosignal2->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHBnegativedirectionRecosignal2 == 1)
            HBnegativedirectionRecosignal2->SetXTitle("R for HB- jeta = -16; depth = 2 \b");
          if (kcountHBnegativedirectionRecosignal2 == 2)
            HBnegativedirectionRecosignal2->SetXTitle("R for HB- jeta = -15; depth = 2 \b");
          if (kcountHBnegativedirectionRecosignal2 == 3)
            HBnegativedirectionRecosignal2->SetXTitle("R for HB- jeta = -14; depth = 2 \b");
          if (kcountHBnegativedirectionRecosignal2 == 4)
            HBnegativedirectionRecosignal2->SetXTitle("R for HB- jeta = -13; depth = 2 \b");
          if (kcountHBnegativedirectionRecosignal2 == 5)
            HBnegativedirectionRecosignal2->SetXTitle("R for HB- jeta = -12; depth = 2 \b");
          if (kcountHBnegativedirectionRecosignal2 == 6)
            HBnegativedirectionRecosignal2->SetXTitle("R for HB- jeta = -11; depth = 2 \b");
          if (kcountHBnegativedirectionRecosignal2 == 7)
            HBnegativedirectionRecosignal2->SetXTitle("R for HB- jeta = -10; depth = 2 \b");
          if (kcountHBnegativedirectionRecosignal2 == 8)
            HBnegativedirectionRecosignal2->SetXTitle("R for HB- jeta =  -9; depth = 2 \b");
          if (kcountHBnegativedirectionRecosignal2 == 9)
            HBnegativedirectionRecosignal2->SetXTitle("R for HB- jeta =  -8; depth = 2 \b");
          if (kcountHBnegativedirectionRecosignal2 == 10)
            HBnegativedirectionRecosignal2->SetXTitle("R for HB- jeta =  -7; depth = 2 \b");
          if (kcountHBnegativedirectionRecosignal2 == 11)
            HBnegativedirectionRecosignal2->SetXTitle("R for HB- jeta =  -6; depth = 2 \b");
          if (kcountHBnegativedirectionRecosignal2 == 12)
            HBnegativedirectionRecosignal2->SetXTitle("R for HB- jeta =  -5; depth = 2 \b");
          if (kcountHBnegativedirectionRecosignal2 == 13)
            HBnegativedirectionRecosignal2->SetXTitle("R for HB- jeta =  -4; depth = 2 \b");
          if (kcountHBnegativedirectionRecosignal2 == 14)
            HBnegativedirectionRecosignal2->SetXTitle("R for HB- jeta =  -3; depth = 2 \b");
          if (kcountHBnegativedirectionRecosignal2 == 15)
            HBnegativedirectionRecosignal2->SetXTitle("R for HB- jeta =  -2; depth = 2 \b");
          if (kcountHBnegativedirectionRecosignal2 == 16)
            HBnegativedirectionRecosignal2->SetXTitle("R for HB- jeta =  -1; depth = 2 \b");
          HBnegativedirectionRecosignal2->Draw("Error");
          kcountHBnegativedirectionRecosignal2++;
          if (kcountHBnegativedirectionRecosignal2 > 16)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 < 0 )
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RrecosignalNegativeDirectionhistD1PhiSymmetryDepth2HB.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHBnegativedirectionRecosignal2)
    delete h2CeffHBnegativedirectionRecosignal2;
  //========================================================================================== 1116
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=3
  //cout<<"      1D plot: R vs phi , different eta,  depth=3 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(4, 4);
  c3x5->cd(1);
  int kcountHBnegativedirectionRecosignal3 = 1;
  TH1F *h2CeffHBnegativedirectionRecosignal3 = new TH1F("h2CeffHBnegativedirectionRecosignal3", "", nphi, 0., 72.);
  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionRecosignal:
    if (jeta - 41 < 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=3
      for (int i = 2; i < 3; i++) {
        TH1F *HBnegativedirectionRecosignal3 = (TH1F *)h2CeffHBnegativedirectionRecosignal3->Clone("twod1");
        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = arecosignalHB[i][jeta][jphi];
          if (ccc1 != 0.) {
            HBnegativedirectionRecosignal3->Fill(jphi, ccc1);
            ccctest = 1.;  //HBnegativedirectionRecosignal3->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"666        kcountHBnegativedirectionRecosignal3   =     "<<kcountHBnegativedirectionRecosignal3  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHBnegativedirectionRecosignal3);
          HBnegativedirectionRecosignal3->SetMarkerStyle(20);
          HBnegativedirectionRecosignal3->SetMarkerSize(0.4);
          HBnegativedirectionRecosignal3->GetYaxis()->SetLabelSize(0.04);
          HBnegativedirectionRecosignal3->SetXTitle("HBnegativedirectionRecosignal3 \b");
          HBnegativedirectionRecosignal3->SetMarkerColor(2);
          HBnegativedirectionRecosignal3->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHBnegativedirectionRecosignal3 == 1)
            HBnegativedirectionRecosignal3->SetXTitle("R for HB- jeta = -16; depth = 3 \b");
          if (kcountHBnegativedirectionRecosignal3 == 2)
            HBnegativedirectionRecosignal3->SetXTitle("R for HB- jeta = -15; depth = 3 \b");
          if (kcountHBnegativedirectionRecosignal3 == 3)
            HBnegativedirectionRecosignal3->SetXTitle("R for HB- jeta = -14; depth = 3 \b");
          if (kcountHBnegativedirectionRecosignal3 == 4)
            HBnegativedirectionRecosignal3->SetXTitle("R for HB- jeta = -13; depth = 3 \b");
          if (kcountHBnegativedirectionRecosignal3 == 5)
            HBnegativedirectionRecosignal3->SetXTitle("R for HB- jeta = -12; depth = 3 \b");
          if (kcountHBnegativedirectionRecosignal3 == 6)
            HBnegativedirectionRecosignal3->SetXTitle("R for HB- jeta = -11; depth = 3 \b");
          if (kcountHBnegativedirectionRecosignal3 == 7)
            HBnegativedirectionRecosignal3->SetXTitle("R for HB- jeta = -10; depth = 3 \b");
          if (kcountHBnegativedirectionRecosignal3 == 8)
            HBnegativedirectionRecosignal3->SetXTitle("R for HB- jeta =  -9; depth = 3 \b");
          if (kcountHBnegativedirectionRecosignal3 == 9)
            HBnegativedirectionRecosignal3->SetXTitle("R for HB- jeta =  -8; depth = 3 \b");
          if (kcountHBnegativedirectionRecosignal3 == 10)
            HBnegativedirectionRecosignal3->SetXTitle("R for HB- jeta =  -7; depth = 3 \b");
          if (kcountHBnegativedirectionRecosignal3 == 11)
            HBnegativedirectionRecosignal3->SetXTitle("R for HB- jeta =  -6; depth = 3 \b");
          if (kcountHBnegativedirectionRecosignal3 == 12)
            HBnegativedirectionRecosignal3->SetXTitle("R for HB- jeta =  -5; depth = 3 \b");
          if (kcountHBnegativedirectionRecosignal3 == 13)
            HBnegativedirectionRecosignal3->SetXTitle("R for HB- jeta =  -4; depth = 3 \b");
          if (kcountHBnegativedirectionRecosignal3 == 14)
            HBnegativedirectionRecosignal3->SetXTitle("R for HB- jeta =  -3; depth = 3 \b");
          if (kcountHBnegativedirectionRecosignal3 == 15)
            HBnegativedirectionRecosignal3->SetXTitle("R for HB- jeta =  -2; depth = 3 \b");
          if (kcountHBnegativedirectionRecosignal3 == 16)
            HBnegativedirectionRecosignal3->SetXTitle("R for HB- jeta =  -1; depth = 3 \b");

          HBnegativedirectionRecosignal3->Draw("Error");
          kcountHBnegativedirectionRecosignal3++;
          if (kcountHBnegativedirectionRecosignal3 > 16)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 < 0 )
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RrecosignalNegativeDirectionhistD1PhiSymmetryDepth3HB.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHBnegativedirectionRecosignal3)
    delete h2CeffHBnegativedirectionRecosignal3;
  //========================================================================================== 1117
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=4
  //cout<<"      1D plot: R vs phi , different eta,  depth=4 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(4, 4);
  c3x5->cd(1);
  int kcountHBnegativedirectionRecosignal4 = 1;
  TH1F *h2CeffHBnegativedirectionRecosignal4 = new TH1F("h2CeffHBnegativedirectionRecosignal4", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionRecosignal:
    if (jeta - 41 < 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=4
      for (int i = 3; i < 4; i++) {
        TH1F *HBnegativedirectionRecosignal4 = (TH1F *)h2CeffHBnegativedirectionRecosignal4->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = arecosignalHB[i][jeta][jphi];
          if (ccc1 != 0.) {
            HBnegativedirectionRecosignal4->Fill(jphi, ccc1);
            ccctest = 1.;  //HBnegativedirectionRecosignal4->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"777        kcountHBnegativedirectionRecosignal4   =     "<<kcountHBnegativedirectionRecosignal4  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHBnegativedirectionRecosignal4);
          HBnegativedirectionRecosignal4->SetMarkerStyle(20);
          HBnegativedirectionRecosignal4->SetMarkerSize(0.4);
          HBnegativedirectionRecosignal4->GetYaxis()->SetLabelSize(0.04);
          HBnegativedirectionRecosignal4->SetXTitle("HBnegativedirectionRecosignal4 \b");
          HBnegativedirectionRecosignal4->SetMarkerColor(2);
          HBnegativedirectionRecosignal4->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHBnegativedirectionRecosignal4 == 1)
            HBnegativedirectionRecosignal4->SetXTitle("R for HB- jeta = -16; depth = 4 \b");
          if (kcountHBnegativedirectionRecosignal4 == 2)
            HBnegativedirectionRecosignal4->SetXTitle("R for HB- jeta = -15; depth = 4 \b");
          if (kcountHBnegativedirectionRecosignal4 == 3)
            HBnegativedirectionRecosignal4->SetXTitle("R for HB- jeta = -14; depth = 4 \b");
          if (kcountHBnegativedirectionRecosignal4 == 4)
            HBnegativedirectionRecosignal4->SetXTitle("R for HB- jeta = -13; depth = 4 \b");
          if (kcountHBnegativedirectionRecosignal4 == 5)
            HBnegativedirectionRecosignal4->SetXTitle("R for HB- jeta = -12; depth = 4 \b");
          if (kcountHBnegativedirectionRecosignal4 == 6)
            HBnegativedirectionRecosignal4->SetXTitle("R for HB- jeta = -11; depth = 4 \b");
          if (kcountHBnegativedirectionRecosignal4 == 7)
            HBnegativedirectionRecosignal4->SetXTitle("R for HB- jeta = -10; depth = 4 \b");
          if (kcountHBnegativedirectionRecosignal4 == 8)
            HBnegativedirectionRecosignal4->SetXTitle("R for HB- jeta =  -9; depth = 4 \b");
          if (kcountHBnegativedirectionRecosignal4 == 9)
            HBnegativedirectionRecosignal4->SetXTitle("R for HB- jeta =  -8; depth = 4 \b");
          if (kcountHBnegativedirectionRecosignal4 == 10)
            HBnegativedirectionRecosignal4->SetXTitle("R for HB- jeta =  -7; depth = 4 \b");
          if (kcountHBnegativedirectionRecosignal4 == 11)
            HBnegativedirectionRecosignal4->SetXTitle("R for HB- jeta =  -6; depth = 4 \b");
          if (kcountHBnegativedirectionRecosignal4 == 12)
            HBnegativedirectionRecosignal4->SetXTitle("R for HB- jeta =  -5; depth = 4 \b");
          if (kcountHBnegativedirectionRecosignal4 == 13)
            HBnegativedirectionRecosignal4->SetXTitle("R for HB- jeta =  -4; depth = 4 \b");
          if (kcountHBnegativedirectionRecosignal4 == 14)
            HBnegativedirectionRecosignal4->SetXTitle("R for HB- jeta =  -3; depth = 4 \b");
          if (kcountHBnegativedirectionRecosignal4 == 15)
            HBnegativedirectionRecosignal4->SetXTitle("R for HB- jeta =  -2; depth = 4 \b");
          if (kcountHBnegativedirectionRecosignal4 == 16)
            HBnegativedirectionRecosignal4->SetXTitle("R for HB- jeta =  -1; depth = 4 \b");
          HBnegativedirectionRecosignal4->Draw("Error");
          kcountHBnegativedirectionRecosignal4++;
          if (kcountHBnegativedirectionRecosignal4 > 16)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 < 0 )
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RrecosignalNegativeDirectionhistD1PhiSymmetryDepth4HB.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHBnegativedirectionRecosignal4)
    delete h2CeffHBnegativedirectionRecosignal4;

  //======================================================================================================================
  //======================================================================================================================
  //======================================================================================================================
  //                            DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD:

  //cout<<"    Start Vaiance: preparation  *****" <<endl;
  TH2F *recosignalVariance1HB1 = (TH2F *)dir->FindObjectAny("h_recSignalEnergy2_HB1");
  TH2F *recosignalVariance0HB1 = (TH2F *)dir->FindObjectAny("h_recSignalEnergy0_HB1");
  TH2F *recosignalVarianceHB1 = (TH2F *)recosignalVariance1HB1->Clone("recosignalVarianceHB1");
  recosignalVarianceHB1->Divide(recosignalVariance1HB1, recosignalVariance0HB1, 1, 1, "B");
  TH2F *recosignalVariance1HB2 = (TH2F *)dir->FindObjectAny("h_recSignalEnergy2_HB2");
  TH2F *recosignalVariance0HB2 = (TH2F *)dir->FindObjectAny("h_recSignalEnergy0_HB2");
  TH2F *recosignalVarianceHB2 = (TH2F *)recosignalVariance1HB2->Clone("recosignalVarianceHB2");
  recosignalVarianceHB2->Divide(recosignalVariance1HB2, recosignalVariance0HB2, 1, 1, "B");
  TH2F *recosignalVariance1HB3 = (TH2F *)dir->FindObjectAny("h_recSignalEnergy2_HB3");
  TH2F *recosignalVariance0HB3 = (TH2F *)dir->FindObjectAny("h_recSignalEnergy0_HB3");
  TH2F *recosignalVarianceHB3 = (TH2F *)recosignalVariance1HB3->Clone("recosignalVarianceHB3");
  recosignalVarianceHB3->Divide(recosignalVariance1HB3, recosignalVariance0HB3, 1, 1, "B");
  TH2F *recosignalVariance1HB4 = (TH2F *)dir->FindObjectAny("h_recSignalEnergy2_HB4");
  TH2F *recosignalVariance0HB4 = (TH2F *)dir->FindObjectAny("h_recSignalEnergy0_HB4");
  TH2F *recosignalVarianceHB4 = (TH2F *)recosignalVariance1HB4->Clone("recosignalVarianceHB4");
  recosignalVarianceHB4->Divide(recosignalVariance1HB4, recosignalVariance0HB4, 1, 1, "B");
  //cout<<"      Vaiance: preparation DONE *****" <<endl;
  //====================================================================== put Vaiance=Dispersia = Sig**2=<R**2> - (<R>)**2 into massive recosignalvarianceHB
  //                                                                                           = sum(R*R)/N - (sum(R)/N)**2
  for (int jeta = 0; jeta < njeta; jeta++) {
    //preparation for PHI normalization:
    double sumrecosignalHB0 = 0;
    int nsumrecosignalHB0 = 0;
    double sumrecosignalHB1 = 0;
    int nsumrecosignalHB1 = 0;
    double sumrecosignalHB2 = 0;
    int nsumrecosignalHB2 = 0;
    double sumrecosignalHB3 = 0;
    int nsumrecosignalHB3 = 0;
    for (int jphi = 0; jphi < njphi; jphi++) {
      recosignalvarianceHB[0][jeta][jphi] = recosignalVarianceHB1->GetBinContent(jeta + 1, jphi + 1);
      recosignalvarianceHB[1][jeta][jphi] = recosignalVarianceHB2->GetBinContent(jeta + 1, jphi + 1);
      recosignalvarianceHB[2][jeta][jphi] = recosignalVarianceHB3->GetBinContent(jeta + 1, jphi + 1);
      recosignalvarianceHB[3][jeta][jphi] = recosignalVarianceHB4->GetBinContent(jeta + 1, jphi + 1);
      if (recosignalvarianceHB[0][jeta][jphi] > 0.) {
        sumrecosignalHB0 += recosignalvarianceHB[0][jeta][jphi];
        ++nsumrecosignalHB0;
      }
      if (recosignalvarianceHB[1][jeta][jphi] > 0.) {
        sumrecosignalHB1 += recosignalvarianceHB[1][jeta][jphi];
        ++nsumrecosignalHB1;
      }
      if (recosignalvarianceHB[2][jeta][jphi] > 0.) {
        sumrecosignalHB2 += recosignalvarianceHB[2][jeta][jphi];
        ++nsumrecosignalHB2;
      }
      if (recosignalvarianceHB[3][jeta][jphi] > 0.) {
        sumrecosignalHB3 += recosignalvarianceHB[3][jeta][jphi];
        ++nsumrecosignalHB3;
      }
    }  // phi
    // PHI normalization :
    for (int jphi = 0; jphi < njphi; jphi++) {
      if (recosignalvarianceHB[0][jeta][jphi] > 0.)
        recosignalvarianceHB[0][jeta][jphi] /= (sumrecosignalHB0 / nsumrecosignalHB0);
      if (recosignalvarianceHB[1][jeta][jphi] > 0.)
        recosignalvarianceHB[1][jeta][jphi] /= (sumrecosignalHB1 / nsumrecosignalHB1);
      if (recosignalvarianceHB[2][jeta][jphi] > 0.)
        recosignalvarianceHB[2][jeta][jphi] /= (sumrecosignalHB2 / nsumrecosignalHB2);
      if (recosignalvarianceHB[3][jeta][jphi] > 0.)
        recosignalvarianceHB[3][jeta][jphi] /= (sumrecosignalHB3 / nsumrecosignalHB3);
    }  // phi
    //       recosignalvarianceHB (D)           = sum(R*R)/N - (sum(R)/N)**2
    for (int jphi = 0; jphi < njphi; jphi++) {
      //	   cout<<"12 12 12   jeta=     "<< jeta <<"   jphi   =     "<<jphi  <<endl;
      recosignalvarianceHB[0][jeta][jphi] -= arecosignalHB[0][jeta][jphi] * arecosignalHB[0][jeta][jphi];
      recosignalvarianceHB[0][jeta][jphi] = fabs(recosignalvarianceHB[0][jeta][jphi]);
      recosignalvarianceHB[1][jeta][jphi] -= arecosignalHB[1][jeta][jphi] * arecosignalHB[1][jeta][jphi];
      recosignalvarianceHB[1][jeta][jphi] = fabs(recosignalvarianceHB[1][jeta][jphi]);
      recosignalvarianceHB[2][jeta][jphi] -= arecosignalHB[2][jeta][jphi] * arecosignalHB[2][jeta][jphi];
      recosignalvarianceHB[2][jeta][jphi] = fabs(recosignalvarianceHB[2][jeta][jphi]);
      recosignalvarianceHB[3][jeta][jphi] -= arecosignalHB[3][jeta][jphi] * arecosignalHB[3][jeta][jphi];
      recosignalvarianceHB[3][jeta][jphi] = fabs(recosignalvarianceHB[3][jeta][jphi]);
    }
  }
  //cout<<"      Vaiance: DONE*****" <<endl;
  //------------------------  2D-eta/phi-plot: D, averaged over depthfs
  //======================================================================
  //======================================================================
  //cout<<"      R2D-eta/phi-plot: D, averaged over depthfs *****" <<endl;
  c1x1->Clear();
  /////////////////
  c1x0->Divide(1, 1);
  c1x0->cd(1);
  TH2F *DefzDrecosignalHB42D = new TH2F("DefzDrecosignalHB42D", "", neta, -41., 41., nphi, 0., 72.);
  TH2F *DefzDrecosignalHB42D0 = new TH2F("DefzDrecosignalHB42D0", "", neta, -41., 41., nphi, 0., 72.);
  TH2F *DefzDrecosignalHB42DF = (TH2F *)DefzDrecosignalHB42D0->Clone("DefzDrecosignalHB42DF");
  for (int i = 0; i < ndepth; i++) {
    for (int jeta = 0; jeta < neta; jeta++) {
      for (int jphi = 0; jphi < nphi; jphi++) {
        double ccc1 = recosignalvarianceHB[i][jeta][jphi];
        int k2plot = jeta - 41;
        int kkk = k2plot;  //if(k2plot >0   kkk=k2plot+1; //-41 +41 !=0
        if (arecosignalHB[i][jeta][jphi] > 0.) {
          DefzDrecosignalHB42D->Fill(kkk, jphi, ccc1);
          DefzDrecosignalHB42D0->Fill(kkk, jphi, 1.);
        }
      }
    }
  }
  DefzDrecosignalHB42DF->Divide(DefzDrecosignalHB42D, DefzDrecosignalHB42D0, 1, 1, "B");  // average A
  //    DefzDrecosignalHB1->Sumw2();
  gPad->SetGridy();
  gPad->SetGridx();  //      gPad->SetLogz();
  DefzDrecosignalHB42DF->SetMarkerStyle(20);
  DefzDrecosignalHB42DF->SetMarkerSize(0.4);
  DefzDrecosignalHB42DF->GetZaxis()->SetLabelSize(0.08);
  DefzDrecosignalHB42DF->SetXTitle("<D>_depth       #eta  \b");
  DefzDrecosignalHB42DF->SetYTitle("      #phi \b");
  DefzDrecosignalHB42DF->SetZTitle("<D>_depth \b");
  DefzDrecosignalHB42DF->SetMarkerColor(2);
  DefzDrecosignalHB42DF->SetLineColor(
      0);  //      DefzDrecosignalHB42DF->SetMaximum(1.000);  //      DefzDrecosignalHB42DF->SetMinimum(1.0);
  DefzDrecosignalHB42DF->Draw("COLZ");
  /////////////////
  c1x0->Update();
  c1x0->Print("DrecosignalGeneralD2PhiSymmetryHB.png");
  c1x0->Clear();
  // clean-up
  if (DefzDrecosignalHB42D)
    delete DefzDrecosignalHB42D;
  if (DefzDrecosignalHB42D0)
    delete DefzDrecosignalHB42D0;
  if (DefzDrecosignalHB42DF)
    delete DefzDrecosignalHB42DF;
  //====================================================================== 1D plot: D vs phi , averaged over depthfs & eta
  //======================================================================
  //cout<<"      1D plot: D vs phi , averaged over depthfs & eta *****" <<endl;
  c1x1->Clear();
  /////////////////
  c1x1->Divide(1, 1);
  c1x1->cd(1);
  TH1F *DefzDrecosignalHB41D = new TH1F("DefzDrecosignalHB41D", "", nphi, 0., 72.);
  TH1F *DefzDrecosignalHB41D0 = new TH1F("DefzDrecosignalHB41D0", "", nphi, 0., 72.);
  TH1F *DefzDrecosignalHB41DF = (TH1F *)DefzDrecosignalHB41D0->Clone("DefzDrecosignalHB41DF");

  for (int jphi = 0; jphi < nphi; jphi++) {
    for (int jeta = 0; jeta < neta; jeta++) {
      for (int i = 0; i < ndepth; i++) {
        double ccc1 = recosignalvarianceHB[i][jeta][jphi];
        if (arecosignalHB[i][jeta][jphi] > 0.) {
          DefzDrecosignalHB41D->Fill(jphi, ccc1);
          DefzDrecosignalHB41D0->Fill(jphi, 1.);
        }
      }
    }
  }
  //     DefzDrecosignalHB41D->Sumw2();DefzDrecosignalHB41D0->Sumw2();

  DefzDrecosignalHB41DF->Divide(
      DefzDrecosignalHB41D, DefzDrecosignalHB41D0, 1, 1, "B");  // R averaged over depthfs & eta
  DefzDrecosignalHB41D0->Sumw2();
  //    for (int jphi=1;jphi<73;jphi++) {DefzDrecosignalHB41DF->SetBinError(jphi,0.01);}
  gPad->SetGridy();
  gPad->SetGridx();  //      gPad->SetLogz();
  DefzDrecosignalHB41DF->SetMarkerStyle(20);
  DefzDrecosignalHB41DF->SetMarkerSize(1.4);
  DefzDrecosignalHB41DF->GetZaxis()->SetLabelSize(0.08);
  DefzDrecosignalHB41DF->SetXTitle("#phi  \b");
  DefzDrecosignalHB41DF->SetYTitle("  <D> \b");
  DefzDrecosignalHB41DF->SetZTitle("<D>_PHI  - AllDepthfs \b");
  DefzDrecosignalHB41DF->SetMarkerColor(4);
  DefzDrecosignalHB41DF->SetLineColor(
      4);  //  DefzDrecosignalHB41DF->SetMinimum(0.8);     DefzDrecosignalHB41DF->SetMinimum(-0.015);
  DefzDrecosignalHB41DF->Draw("Error");
  /////////////////
  c1x1->Update();
  c1x1->Print("DrecosignalGeneralD1PhiSymmetryHB.png");
  c1x1->Clear();
  // clean-up
  if (DefzDrecosignalHB41D)
    delete DefzDrecosignalHB41D;
  if (DefzDrecosignalHB41D0)
    delete DefzDrecosignalHB41D0;
  if (DefzDrecosignalHB41DF)
    delete DefzDrecosignalHB41DF;

  //========================================================================================== 14
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=1
  //cout<<"      1D plot: D vs phi , different eta,  depth=1 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(4, 4);
  c3x5->cd(1);
  int kcountHBpositivedirectionRecosignalD1 = 1;
  TH1F *h2CeffHBpositivedirectionRecosignalD1 = new TH1F("h2CeffHBpositivedirectionRecosignalD1", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionRecosignalD:
    if (jeta - 41 >= 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=1
      for (int i = 0; i < 1; i++) {
        TH1F *HBpositivedirectionRecosignalD1 = (TH1F *)h2CeffHBpositivedirectionRecosignalD1->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = recosignalvarianceHB[i][jeta][jphi];
          if (arecosignalHB[i][jeta][jphi] > 0.) {
            HBpositivedirectionRecosignalD1->Fill(jphi, ccc1);
            ccctest = 1.;  //HBpositivedirectionRecosignalD1->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1414       kcountHBpositivedirectionRecosignalD1   =     "<<kcountHBpositivedirectionRecosignalD1  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHBpositivedirectionRecosignalD1);
          HBpositivedirectionRecosignalD1->SetMarkerStyle(20);
          HBpositivedirectionRecosignalD1->SetMarkerSize(0.4);
          HBpositivedirectionRecosignalD1->GetYaxis()->SetLabelSize(0.04);
          HBpositivedirectionRecosignalD1->SetXTitle("HBpositivedirectionRecosignalD1 \b");
          HBpositivedirectionRecosignalD1->SetMarkerColor(2);
          HBpositivedirectionRecosignalD1->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHBpositivedirectionRecosignalD1 == 1)
            HBpositivedirectionRecosignalD1->SetXTitle("D for HB+ jeta =  0; depth = 1 \b");
          if (kcountHBpositivedirectionRecosignalD1 == 2)
            HBpositivedirectionRecosignalD1->SetXTitle("D for HB+ jeta =  1; depth = 1 \b");
          if (kcountHBpositivedirectionRecosignalD1 == 3)
            HBpositivedirectionRecosignalD1->SetXTitle("D for HB+ jeta =  2; depth = 1 \b");
          if (kcountHBpositivedirectionRecosignalD1 == 4)
            HBpositivedirectionRecosignalD1->SetXTitle("D for HB+ jeta =  3; depth = 1 \b");
          if (kcountHBpositivedirectionRecosignalD1 == 5)
            HBpositivedirectionRecosignalD1->SetXTitle("D for HB+ jeta =  4; depth = 1 \b");
          if (kcountHBpositivedirectionRecosignalD1 == 6)
            HBpositivedirectionRecosignalD1->SetXTitle("D for HB+ jeta =  5; depth = 1 \b");
          if (kcountHBpositivedirectionRecosignalD1 == 7)
            HBpositivedirectionRecosignalD1->SetXTitle("D for HB+ jeta =  6; depth = 1 \b");
          if (kcountHBpositivedirectionRecosignalD1 == 8)
            HBpositivedirectionRecosignalD1->SetXTitle("D for HB+ jeta =  7; depth = 1 \b");
          if (kcountHBpositivedirectionRecosignalD1 == 9)
            HBpositivedirectionRecosignalD1->SetXTitle("D for HB+ jeta =  8; depth = 1 \b");
          if (kcountHBpositivedirectionRecosignalD1 == 10)
            HBpositivedirectionRecosignalD1->SetXTitle("D for HB+ jeta =  9; depth = 1 \b");
          if (kcountHBpositivedirectionRecosignalD1 == 11)
            HBpositivedirectionRecosignalD1->SetXTitle("D for HB+ jeta = 10; depth = 1 \b");
          if (kcountHBpositivedirectionRecosignalD1 == 12)
            HBpositivedirectionRecosignalD1->SetXTitle("D for HB+ jeta = 11; depth = 1 \b");
          if (kcountHBpositivedirectionRecosignalD1 == 13)
            HBpositivedirectionRecosignalD1->SetXTitle("D for HB+ jeta = 12; depth = 1 \b");
          if (kcountHBpositivedirectionRecosignalD1 == 14)
            HBpositivedirectionRecosignalD1->SetXTitle("D for HB+ jeta = 13; depth = 1 \b");
          if (kcountHBpositivedirectionRecosignalD1 == 15)
            HBpositivedirectionRecosignalD1->SetXTitle("D for HB+ jeta = 14; depth = 1 \b");
          if (kcountHBpositivedirectionRecosignalD1 == 16)
            HBpositivedirectionRecosignalD1->SetXTitle("D for HB+ jeta = 15; depth = 1 \b");
          HBpositivedirectionRecosignalD1->Draw("Error");
          kcountHBpositivedirectionRecosignalD1++;
          if (kcountHBpositivedirectionRecosignalD1 > 16)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DrecosignalPositiveDirectionhistD1PhiSymmetryDepth1HB.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHBpositivedirectionRecosignalD1)
    delete h2CeffHBpositivedirectionRecosignalD1;
  //========================================================================================== 15
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=2
  //cout<<"      1D plot: D vs phi , different eta,  depth=2 *****" <<endl;
  c3x5->Clear();
  c3x5->Divide(4, 4);
  c3x5->cd(1);
  int kcountHBpositivedirectionRecosignalD2 = 1;
  TH1F *h2CeffHBpositivedirectionRecosignalD2 = new TH1F("h2CeffHBpositivedirectionRecosignalD2", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionRecosignalD:
    if (jeta - 41 >= 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=2
      for (int i = 1; i < 2; i++) {
        TH1F *HBpositivedirectionRecosignalD2 = (TH1F *)h2CeffHBpositivedirectionRecosignalD2->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = recosignalvarianceHB[i][jeta][jphi];
          if (arecosignalHB[i][jeta][jphi] > 0.) {
            HBpositivedirectionRecosignalD2->Fill(jphi, ccc1);
            ccctest = 1.;  //HBpositivedirectionRecosignalD2->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1515       kcountHBpositivedirectionRecosignalD2   =     "<<kcountHBpositivedirectionRecosignalD2  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHBpositivedirectionRecosignalD2);
          HBpositivedirectionRecosignalD2->SetMarkerStyle(20);
          HBpositivedirectionRecosignalD2->SetMarkerSize(0.4);
          HBpositivedirectionRecosignalD2->GetYaxis()->SetLabelSize(0.04);
          HBpositivedirectionRecosignalD2->SetXTitle("HBpositivedirectionRecosignalD2 \b");
          HBpositivedirectionRecosignalD2->SetMarkerColor(2);
          HBpositivedirectionRecosignalD2->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHBpositivedirectionRecosignalD2 == 1)
            HBpositivedirectionRecosignalD2->SetXTitle("D for HB+ jeta =  0; depth = 2 \b");
          if (kcountHBpositivedirectionRecosignalD2 == 2)
            HBpositivedirectionRecosignalD2->SetXTitle("D for HB+ jeta =  1; depth = 2 \b");
          if (kcountHBpositivedirectionRecosignalD2 == 3)
            HBpositivedirectionRecosignalD2->SetXTitle("D for HB+ jeta =  2; depth = 2 \b");
          if (kcountHBpositivedirectionRecosignalD2 == 4)
            HBpositivedirectionRecosignalD2->SetXTitle("D for HB+ jeta =  3; depth = 2 \b");
          if (kcountHBpositivedirectionRecosignalD2 == 5)
            HBpositivedirectionRecosignalD2->SetXTitle("D for HB+ jeta =  4; depth = 2 \b");
          if (kcountHBpositivedirectionRecosignalD2 == 6)
            HBpositivedirectionRecosignalD2->SetXTitle("D for HB+ jeta =  5; depth = 2 \b");
          if (kcountHBpositivedirectionRecosignalD2 == 7)
            HBpositivedirectionRecosignalD2->SetXTitle("D for HB+ jeta =  6; depth = 2 \b");
          if (kcountHBpositivedirectionRecosignalD2 == 8)
            HBpositivedirectionRecosignalD2->SetXTitle("D for HB+ jeta =  7; depth = 2 \b");
          if (kcountHBpositivedirectionRecosignalD2 == 9)
            HBpositivedirectionRecosignalD2->SetXTitle("D for HB+ jeta =  8; depth = 2 \b");
          if (kcountHBpositivedirectionRecosignalD2 == 10)
            HBpositivedirectionRecosignalD2->SetXTitle("D for HB+ jeta =  9; depth = 2 \b");
          if (kcountHBpositivedirectionRecosignalD2 == 11)
            HBpositivedirectionRecosignalD2->SetXTitle("D for HB+ jeta = 10; depth = 2 \b");
          if (kcountHBpositivedirectionRecosignalD2 == 12)
            HBpositivedirectionRecosignalD2->SetXTitle("D for HB+ jeta = 11; depth = 2 \b");
          if (kcountHBpositivedirectionRecosignalD2 == 13)
            HBpositivedirectionRecosignalD2->SetXTitle("D for HB+ jeta = 12; depth = 2 \b");
          if (kcountHBpositivedirectionRecosignalD2 == 14)
            HBpositivedirectionRecosignalD2->SetXTitle("D for HB+ jeta = 13; depth = 2 \b");
          if (kcountHBpositivedirectionRecosignalD2 == 15)
            HBpositivedirectionRecosignalD2->SetXTitle("D for HB+ jeta = 14; depth = 2 \b");
          if (kcountHBpositivedirectionRecosignalD2 == 16)
            HBpositivedirectionRecosignalD2->SetXTitle("D for HB+ jeta = 15; depth = 2 \b");
          HBpositivedirectionRecosignalD2->Draw("Error");
          kcountHBpositivedirectionRecosignalD2++;
          if (kcountHBpositivedirectionRecosignalD2 > 16)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DrecosignalPositiveDirectionhistD1PhiSymmetryDepth2HB.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHBpositivedirectionRecosignalD2)
    delete h2CeffHBpositivedirectionRecosignalD2;
  //========================================================================================== 16
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=3
  //cout<<"      1D plot: D vs phi , different eta,  depth=3 *****" <<endl;
  c3x5->Clear();
  c3x5->Divide(4, 4);
  c3x5->cd(1);
  int kcountHBpositivedirectionRecosignalD3 = 1;
  TH1F *h2CeffHBpositivedirectionRecosignalD3 = new TH1F("h2CeffHBpositivedirectionRecosignalD3", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionRecosignalD:
    if (jeta - 41 >= 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=3
      for (int i = 2; i < 3; i++) {
        TH1F *HBpositivedirectionRecosignalD3 = (TH1F *)h2CeffHBpositivedirectionRecosignalD3->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = recosignalvarianceHB[i][jeta][jphi];
          if (arecosignalHB[i][jeta][jphi] > 0.) {
            HBpositivedirectionRecosignalD3->Fill(jphi, ccc1);
            ccctest = 1.;  //HBpositivedirectionRecosignalD3->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1616       kcountHBpositivedirectionRecosignalD3   =     "<<kcountHBpositivedirectionRecosignalD3  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHBpositivedirectionRecosignalD3);
          HBpositivedirectionRecosignalD3->SetMarkerStyle(20);
          HBpositivedirectionRecosignalD3->SetMarkerSize(0.4);
          HBpositivedirectionRecosignalD3->GetYaxis()->SetLabelSize(0.04);
          HBpositivedirectionRecosignalD3->SetXTitle("HBpositivedirectionRecosignalD3 \b");
          HBpositivedirectionRecosignalD3->SetMarkerColor(2);
          HBpositivedirectionRecosignalD3->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHBpositivedirectionRecosignalD3 == 1)
            HBpositivedirectionRecosignalD3->SetXTitle("D for HB+ jeta =  0; depth = 3 \b");
          if (kcountHBpositivedirectionRecosignalD3 == 2)
            HBpositivedirectionRecosignalD3->SetXTitle("D for HB+ jeta =  1; depth = 3 \b");
          if (kcountHBpositivedirectionRecosignalD3 == 3)
            HBpositivedirectionRecosignalD3->SetXTitle("D for HB+ jeta =  2; depth = 3 \b");
          if (kcountHBpositivedirectionRecosignalD3 == 4)
            HBpositivedirectionRecosignalD3->SetXTitle("D for HB+ jeta =  3; depth = 3 \b");
          if (kcountHBpositivedirectionRecosignalD3 == 5)
            HBpositivedirectionRecosignalD3->SetXTitle("D for HB+ jeta =  4; depth = 3 \b");
          if (kcountHBpositivedirectionRecosignalD3 == 6)
            HBpositivedirectionRecosignalD3->SetXTitle("D for HB+ jeta =  5; depth = 3 \b");
          if (kcountHBpositivedirectionRecosignalD3 == 7)
            HBpositivedirectionRecosignalD3->SetXTitle("D for HB+ jeta =  6; depth = 3 \b");
          if (kcountHBpositivedirectionRecosignalD3 == 8)
            HBpositivedirectionRecosignalD3->SetXTitle("D for HB+ jeta =  7; depth = 3 \b");
          if (kcountHBpositivedirectionRecosignalD3 == 9)
            HBpositivedirectionRecosignalD3->SetXTitle("D for HB+ jeta =  8; depth = 3 \b");
          if (kcountHBpositivedirectionRecosignalD3 == 10)
            HBpositivedirectionRecosignalD3->SetXTitle("D for HB+ jeta =  9; depth = 3 \b");
          if (kcountHBpositivedirectionRecosignalD3 == 11)
            HBpositivedirectionRecosignalD3->SetXTitle("D for HB+ jeta = 10; depth = 3 \b");
          if (kcountHBpositivedirectionRecosignalD3 == 12)
            HBpositivedirectionRecosignalD3->SetXTitle("D for HB+ jeta = 11; depth = 3 \b");
          if (kcountHBpositivedirectionRecosignalD3 == 13)
            HBpositivedirectionRecosignalD3->SetXTitle("D for HB+ jeta = 12; depth = 3 \b");
          if (kcountHBpositivedirectionRecosignalD3 == 14)
            HBpositivedirectionRecosignalD3->SetXTitle("D for HB+ jeta = 13; depth = 3 \b");
          if (kcountHBpositivedirectionRecosignalD3 == 15)
            HBpositivedirectionRecosignalD3->SetXTitle("D for HB+ jeta = 14; depth = 3 \b");
          if (kcountHBpositivedirectionRecosignalD3 == 16)
            HBpositivedirectionRecosignalD3->SetXTitle("D for HB+ jeta = 15; depth = 3 \b");
          HBpositivedirectionRecosignalD3->Draw("Error");
          kcountHBpositivedirectionRecosignalD3++;
          if (kcountHBpositivedirectionRecosignalD3 > 16)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DrecosignalPositiveDirectionhistD1PhiSymmetryDepth3HB.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHBpositivedirectionRecosignalD3)
    delete h2CeffHBpositivedirectionRecosignalD3;
  //========================================================================================== 17
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=4
  //cout<<"      1D plot: D vs phi , different eta,  depth=4 *****" <<endl;
  c3x5->Clear();
  c3x5->Divide(4, 4);
  c3x5->cd(1);
  int kcountHBpositivedirectionRecosignalD4 = 1;
  TH1F *h2CeffHBpositivedirectionRecosignalD4 = new TH1F("h2CeffHBpositivedirectionRecosignalD4", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionRecosignalD:
    if (jeta - 41 >= 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=4
      for (int i = 3; i < 4; i++) {
        TH1F *HBpositivedirectionRecosignalD4 = (TH1F *)h2CeffHBpositivedirectionRecosignalD4->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = recosignalvarianceHB[i][jeta][jphi];
          if (arecosignalHB[i][jeta][jphi] > 0.) {
            HBpositivedirectionRecosignalD4->Fill(jphi, ccc1);
            ccctest = 1.;  //HBpositivedirectionRecosignalD4->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1717       kcountHBpositivedirectionRecosignalD4   =     "<<kcountHBpositivedirectionRecosignalD4  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHBpositivedirectionRecosignalD4);
          HBpositivedirectionRecosignalD4->SetMarkerStyle(20);
          HBpositivedirectionRecosignalD4->SetMarkerSize(0.4);
          HBpositivedirectionRecosignalD4->GetYaxis()->SetLabelSize(0.04);
          HBpositivedirectionRecosignalD4->SetXTitle("HBpositivedirectionRecosignalD4 \b");
          HBpositivedirectionRecosignalD4->SetMarkerColor(2);
          HBpositivedirectionRecosignalD4->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHBpositivedirectionRecosignalD4 == 1)
            HBpositivedirectionRecosignalD4->SetXTitle("D for HB+ jeta =  0; depth = 4 \b");
          if (kcountHBpositivedirectionRecosignalD4 == 2)
            HBpositivedirectionRecosignalD4->SetXTitle("D for HB+ jeta =  1; depth = 4 \b");
          if (kcountHBpositivedirectionRecosignalD4 == 3)
            HBpositivedirectionRecosignalD4->SetXTitle("D for HB+ jeta =  2; depth = 4 \b");
          if (kcountHBpositivedirectionRecosignalD4 == 4)
            HBpositivedirectionRecosignalD4->SetXTitle("D for HB+ jeta =  3; depth = 4 \b");
          if (kcountHBpositivedirectionRecosignalD4 == 5)
            HBpositivedirectionRecosignalD4->SetXTitle("D for HB+ jeta =  4; depth = 4 \b");
          if (kcountHBpositivedirectionRecosignalD4 == 6)
            HBpositivedirectionRecosignalD4->SetXTitle("D for HB+ jeta =  5; depth = 4 \b");
          if (kcountHBpositivedirectionRecosignalD4 == 7)
            HBpositivedirectionRecosignalD4->SetXTitle("D for HB+ jeta =  6; depth = 4 \b");
          if (kcountHBpositivedirectionRecosignalD4 == 8)
            HBpositivedirectionRecosignalD4->SetXTitle("D for HB+ jeta =  7; depth = 4 \b");
          if (kcountHBpositivedirectionRecosignalD4 == 9)
            HBpositivedirectionRecosignalD4->SetXTitle("D for HB+ jeta =  8; depth = 4 \b");
          if (kcountHBpositivedirectionRecosignalD4 == 10)
            HBpositivedirectionRecosignalD4->SetXTitle("D for HB+ jeta =  9; depth = 4 \b");
          if (kcountHBpositivedirectionRecosignalD4 == 11)
            HBpositivedirectionRecosignalD4->SetXTitle("D for HB+ jeta = 10; depth = 4 \b");
          if (kcountHBpositivedirectionRecosignalD4 == 12)
            HBpositivedirectionRecosignalD4->SetXTitle("D for HB+ jeta = 11; depth = 4 \b");
          if (kcountHBpositivedirectionRecosignalD4 == 13)
            HBpositivedirectionRecosignalD4->SetXTitle("D for HB+ jeta = 12; depth = 4 \b");
          if (kcountHBpositivedirectionRecosignalD4 == 14)
            HBpositivedirectionRecosignalD4->SetXTitle("D for HB+ jeta = 13; depth = 4 \b");
          if (kcountHBpositivedirectionRecosignalD4 == 15)
            HBpositivedirectionRecosignalD4->SetXTitle("D for HB+ jeta = 14; depth = 4 \b");
          if (kcountHBpositivedirectionRecosignalD4 == 16)
            HBpositivedirectionRecosignalD4->SetXTitle("D for HB+ jeta = 15; depth = 4 \b");
          HBpositivedirectionRecosignalD4->Draw("Error");
          kcountHBpositivedirectionRecosignalD4++;
          if (kcountHBpositivedirectionRecosignalD4 > 16)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DrecosignalPositiveDirectionhistD1PhiSymmetryDepth4HB.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHBpositivedirectionRecosignalD4)
    delete h2CeffHBpositivedirectionRecosignalD4;

  //========================================================================================== 22214
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=1
  //cout<<"      1D plot: D vs phi , different eta,  depth=1 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(4, 4);
  c3x5->cd(1);
  int kcountHBnegativedirectionRecosignalD1 = 1;
  TH1F *h2CeffHBnegativedirectionRecosignalD1 = new TH1F("h2CeffHBnegativedirectionRecosignalD1", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionRecosignalD:
    if (jeta - 41 < 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=1
      for (int i = 0; i < 1; i++) {
        TH1F *HBnegativedirectionRecosignalD1 = (TH1F *)h2CeffHBnegativedirectionRecosignalD1->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = recosignalvarianceHB[i][jeta][jphi];
          if (arecosignalHB[i][jeta][jphi] > 0.) {
            HBnegativedirectionRecosignalD1->Fill(jphi, ccc1);
            ccctest = 1.;  //HBnegativedirectionRecosignalD1->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1414       kcountHBnegativedirectionRecosignalD1   =     "<<kcountHBnegativedirectionRecosignalD1  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHBnegativedirectionRecosignalD1);
          HBnegativedirectionRecosignalD1->SetMarkerStyle(20);
          HBnegativedirectionRecosignalD1->SetMarkerSize(0.4);
          HBnegativedirectionRecosignalD1->GetYaxis()->SetLabelSize(0.04);
          HBnegativedirectionRecosignalD1->SetXTitle("HBnegativedirectionRecosignalD1 \b");
          HBnegativedirectionRecosignalD1->SetMarkerColor(2);
          HBnegativedirectionRecosignalD1->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHBnegativedirectionRecosignalD1 == 1)
            HBnegativedirectionRecosignalD1->SetXTitle("D for HB- jeta = -16; depth = 1 \b");
          if (kcountHBnegativedirectionRecosignalD1 == 2)
            HBnegativedirectionRecosignalD1->SetXTitle("D for HB- jeta = -15; depth = 1 \b");
          if (kcountHBnegativedirectionRecosignalD1 == 3)
            HBnegativedirectionRecosignalD1->SetXTitle("D for HB- jeta = -14; depth = 1 \b");
          if (kcountHBnegativedirectionRecosignalD1 == 4)
            HBnegativedirectionRecosignalD1->SetXTitle("D for HB- jeta = -13; depth = 1 \b");
          if (kcountHBnegativedirectionRecosignalD1 == 5)
            HBnegativedirectionRecosignalD1->SetXTitle("D for HB- jeta = -12; depth = 1 \b");
          if (kcountHBnegativedirectionRecosignalD1 == 6)
            HBnegativedirectionRecosignalD1->SetXTitle("D for HB- jeta = -11; depth = 1 \b");
          if (kcountHBnegativedirectionRecosignalD1 == 7)
            HBnegativedirectionRecosignalD1->SetXTitle("D for HB- jeta = -10; depth = 1 \b");
          if (kcountHBnegativedirectionRecosignalD1 == 8)
            HBnegativedirectionRecosignalD1->SetXTitle("D for HB- jeta =  -9; depth = 1 \b");
          if (kcountHBnegativedirectionRecosignalD1 == 9)
            HBnegativedirectionRecosignalD1->SetXTitle("D for HB- jeta =  -8; depth = 1 \b");
          if (kcountHBnegativedirectionRecosignalD1 == 10)
            HBnegativedirectionRecosignalD1->SetXTitle("D for HB- jeta =  -7; depth = 1 \b");
          if (kcountHBnegativedirectionRecosignalD1 == 11)
            HBnegativedirectionRecosignalD1->SetXTitle("D for HB- jeta =  -6; depth = 1 \b");
          if (kcountHBnegativedirectionRecosignalD1 == 12)
            HBnegativedirectionRecosignalD1->SetXTitle("D for HB- jeta =  -5; depth = 1 \b");
          if (kcountHBnegativedirectionRecosignalD1 == 13)
            HBnegativedirectionRecosignalD1->SetXTitle("D for HB- jeta =  -4; depth = 1 \b");
          if (kcountHBnegativedirectionRecosignalD1 == 14)
            HBnegativedirectionRecosignalD1->SetXTitle("D for HB- jeta =  -3; depth = 1 \b");
          if (kcountHBnegativedirectionRecosignalD1 == 15)
            HBnegativedirectionRecosignalD1->SetXTitle("D for HB- jeta =  -2; depth = 1 \b");
          if (kcountHBnegativedirectionRecosignalD1 == 16)
            HBnegativedirectionRecosignalD1->SetXTitle("D for HB- jeta =  -1; depth = 1 \b");
          HBnegativedirectionRecosignalD1->Draw("Error");
          kcountHBnegativedirectionRecosignalD1++;
          if (kcountHBnegativedirectionRecosignalD1 > 16)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 < 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DrecosignalNegativeDirectionhistD1PhiSymmetryDepth1HB.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHBnegativedirectionRecosignalD1)
    delete h2CeffHBnegativedirectionRecosignalD1;
  //========================================================================================== 22215
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=2
  //cout<<"      1D plot: D vs phi , different eta,  depth=2 *****" <<endl;
  c3x5->Clear();
  c3x5->Divide(4, 4);
  c3x5->cd(1);
  int kcountHBnegativedirectionRecosignalD2 = 1;
  TH1F *h2CeffHBnegativedirectionRecosignalD2 = new TH1F("h2CeffHBnegativedirectionRecosignalD2", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionRecosignalD:
    if (jeta - 41 < 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=2
      for (int i = 1; i < 2; i++) {
        TH1F *HBnegativedirectionRecosignalD2 = (TH1F *)h2CeffHBnegativedirectionRecosignalD2->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = recosignalvarianceHB[i][jeta][jphi];
          if (arecosignalHB[i][jeta][jphi] > 0.) {
            HBnegativedirectionRecosignalD2->Fill(jphi, ccc1);
            ccctest = 1.;  //HBnegativedirectionRecosignalD2->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1515       kcountHBnegativedirectionRecosignalD2   =     "<<kcountHBnegativedirectionRecosignalD2  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHBnegativedirectionRecosignalD2);
          HBnegativedirectionRecosignalD2->SetMarkerStyle(20);
          HBnegativedirectionRecosignalD2->SetMarkerSize(0.4);
          HBnegativedirectionRecosignalD2->GetYaxis()->SetLabelSize(0.04);
          HBnegativedirectionRecosignalD2->SetXTitle("HBnegativedirectionRecosignalD2 \b");
          HBnegativedirectionRecosignalD2->SetMarkerColor(2);
          HBnegativedirectionRecosignalD2->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHBnegativedirectionRecosignalD2 == 1)
            HBnegativedirectionRecosignalD2->SetXTitle("D for HB- jeta =-16; depth = 2 \b");
          if (kcountHBnegativedirectionRecosignalD2 == 2)
            HBnegativedirectionRecosignalD2->SetXTitle("D for HB- jeta =-15; depth = 2 \b");
          if (kcountHBnegativedirectionRecosignalD2 == 3)
            HBnegativedirectionRecosignalD2->SetXTitle("D for HB- jeta =-14; depth = 2 \b");
          if (kcountHBnegativedirectionRecosignalD2 == 4)
            HBnegativedirectionRecosignalD2->SetXTitle("D for HB- jeta =-13; depth = 2 \b");
          if (kcountHBnegativedirectionRecosignalD2 == 5)
            HBnegativedirectionRecosignalD2->SetXTitle("D for HB- jeta =-12; depth = 2 \b");
          if (kcountHBnegativedirectionRecosignalD2 == 6)
            HBnegativedirectionRecosignalD2->SetXTitle("D for HB- jeta =-11; depth = 2 \b");
          if (kcountHBnegativedirectionRecosignalD2 == 7)
            HBnegativedirectionRecosignalD2->SetXTitle("D for HB- jeta =-10; depth = 2 \b");
          if (kcountHBnegativedirectionRecosignalD2 == 8)
            HBnegativedirectionRecosignalD2->SetXTitle("D for HB- jeta =-9 ; depth = 2 \b");
          if (kcountHBnegativedirectionRecosignalD2 == 9)
            HBnegativedirectionRecosignalD2->SetXTitle("D for HB- jeta =-8 ; depth = 2 \b");
          if (kcountHBnegativedirectionRecosignalD2 == 10)
            HBnegativedirectionRecosignalD2->SetXTitle("D for HB- jeta =-7 ; depth = 2 \b");
          if (kcountHBnegativedirectionRecosignalD2 == 11)
            HBnegativedirectionRecosignalD2->SetXTitle("D for HB- jeta =-6 ; depth = 2 \b");
          if (kcountHBnegativedirectionRecosignalD2 == 12)
            HBnegativedirectionRecosignalD2->SetXTitle("D for HB- jeta =-5 ; depth = 2 \b");
          if (kcountHBnegativedirectionRecosignalD2 == 13)
            HBnegativedirectionRecosignalD2->SetXTitle("D for HB- jeta =-4 ; depth = 2 \b");
          if (kcountHBnegativedirectionRecosignalD2 == 14)
            HBnegativedirectionRecosignalD2->SetXTitle("D for HB- jeta =-3 ; depth = 2 \b");
          if (kcountHBnegativedirectionRecosignalD2 == 15)
            HBnegativedirectionRecosignalD2->SetXTitle("D for HB- jeta =-2 ; depth = 2 \b");
          if (kcountHBnegativedirectionRecosignalD2 == 16)
            HBnegativedirectionRecosignalD2->SetXTitle("D for HB- jeta =-1 ; depth = 2 \b");
          HBnegativedirectionRecosignalD2->Draw("Error");
          kcountHBnegativedirectionRecosignalD2++;
          if (kcountHBnegativedirectionRecosignalD2 > 16)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 < 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DrecosignalNegativeDirectionhistD1PhiSymmetryDepth2HB.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHBnegativedirectionRecosignalD2)
    delete h2CeffHBnegativedirectionRecosignalD2;
  //========================================================================================== 22216
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=3
  //cout<<"      1D plot: D vs phi , different eta,  depth=3 *****" <<endl;
  c3x5->Clear();
  c3x5->Divide(4, 4);
  c3x5->cd(1);
  int kcountHBnegativedirectionRecosignalD3 = 1;
  TH1F *h2CeffHBnegativedirectionRecosignalD3 = new TH1F("h2CeffHBnegativedirectionRecosignalD3", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionRecosignalD:
    if (jeta - 41 < 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=3
      for (int i = 2; i < 3; i++) {
        TH1F *HBnegativedirectionRecosignalD3 = (TH1F *)h2CeffHBnegativedirectionRecosignalD3->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = recosignalvarianceHB[i][jeta][jphi];
          if (arecosignalHB[i][jeta][jphi] > 0.) {
            HBnegativedirectionRecosignalD3->Fill(jphi, ccc1);
            ccctest = 1.;  //HBnegativedirectionRecosignalD3->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1616       kcountHBnegativedirectionRecosignalD3   =     "<<kcountHBnegativedirectionRecosignalD3  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHBnegativedirectionRecosignalD3);
          HBnegativedirectionRecosignalD3->SetMarkerStyle(20);
          HBnegativedirectionRecosignalD3->SetMarkerSize(0.4);
          HBnegativedirectionRecosignalD3->GetYaxis()->SetLabelSize(0.04);
          HBnegativedirectionRecosignalD3->SetXTitle("HBnegativedirectionRecosignalD3 \b");
          HBnegativedirectionRecosignalD3->SetMarkerColor(2);
          HBnegativedirectionRecosignalD3->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHBnegativedirectionRecosignalD3 == 1)
            HBnegativedirectionRecosignalD3->SetXTitle("D for HB- jeta =-16; depth = 3 \b");
          if (kcountHBnegativedirectionRecosignalD3 == 2)
            HBnegativedirectionRecosignalD3->SetXTitle("D for HB- jeta =-15; depth = 3 \b");
          if (kcountHBnegativedirectionRecosignalD3 == 3)
            HBnegativedirectionRecosignalD3->SetXTitle("D for HB- jeta =-14; depth = 3 \b");
          if (kcountHBnegativedirectionRecosignalD3 == 4)
            HBnegativedirectionRecosignalD3->SetXTitle("D for HB- jeta =-13; depth = 3 \b");
          if (kcountHBnegativedirectionRecosignalD3 == 5)
            HBnegativedirectionRecosignalD3->SetXTitle("D for HB- jeta =-12; depth = 3 \b");
          if (kcountHBnegativedirectionRecosignalD3 == 6)
            HBnegativedirectionRecosignalD3->SetXTitle("D for HB- jeta =-11; depth = 3 \b");
          if (kcountHBnegativedirectionRecosignalD3 == 7)
            HBnegativedirectionRecosignalD3->SetXTitle("D for HB- jeta =-10; depth = 3 \b");
          if (kcountHBnegativedirectionRecosignalD3 == 8)
            HBnegativedirectionRecosignalD3->SetXTitle("D for HB- jeta =-9 ; depth = 3 \b");
          if (kcountHBnegativedirectionRecosignalD3 == 9)
            HBnegativedirectionRecosignalD3->SetXTitle("D for HB- jeta =-8 ; depth = 3 \b");
          if (kcountHBnegativedirectionRecosignalD3 == 10)
            HBnegativedirectionRecosignalD3->SetXTitle("D for HB- jeta =-7 ; depth = 3 \b");
          if (kcountHBnegativedirectionRecosignalD3 == 11)
            HBnegativedirectionRecosignalD3->SetXTitle("D for HB- jeta =-6 ; depth = 3 \b");
          if (kcountHBnegativedirectionRecosignalD3 == 12)
            HBnegativedirectionRecosignalD3->SetXTitle("D for HB- jeta =-5 ; depth = 3 \b");
          if (kcountHBnegativedirectionRecosignalD3 == 13)
            HBnegativedirectionRecosignalD3->SetXTitle("D for HB- jeta =-4 ; depth = 3 \b");
          if (kcountHBnegativedirectionRecosignalD3 == 14)
            HBnegativedirectionRecosignalD3->SetXTitle("D for HB- jeta =-3 ; depth = 3 \b");
          if (kcountHBnegativedirectionRecosignalD3 == 15)
            HBnegativedirectionRecosignalD3->SetXTitle("D for HB- jeta =-2 ; depth = 3 \b");
          if (kcountHBnegativedirectionRecosignalD3 == 16)
            HBnegativedirectionRecosignalD3->SetXTitle("D for HB- jeta =-1 ; depth = 3 \b");
          HBnegativedirectionRecosignalD3->Draw("Error");
          kcountHBnegativedirectionRecosignalD3++;
          if (kcountHBnegativedirectionRecosignalD3 > 16)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 < 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DrecosignalNegativeDirectionhistD1PhiSymmetryDepth3HB.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHBnegativedirectionRecosignalD3)
    delete h2CeffHBnegativedirectionRecosignalD3;
  //========================================================================================== 22217
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=4
  //cout<<"      1D plot: D vs phi , different eta,  depth=4 *****" <<endl;
  c3x5->Clear();
  c3x5->Divide(4, 4);
  c3x5->cd(1);
  int kcountHBnegativedirectionRecosignalD4 = 1;
  TH1F *h2CeffHBnegativedirectionRecosignalD4 = new TH1F("h2CeffHBnegativedirectionRecosignalD4", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionRecosignalD:
    if (jeta - 41 < 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=4
      for (int i = 3; i < 4; i++) {
        TH1F *HBnegativedirectionRecosignalD4 = (TH1F *)h2CeffHBnegativedirectionRecosignalD4->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = recosignalvarianceHB[i][jeta][jphi];
          if (arecosignalHB[i][jeta][jphi] > 0.) {
            HBnegativedirectionRecosignalD4->Fill(jphi, ccc1);
            ccctest = 1.;  //HBnegativedirectionRecosignalD4->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1717       kcountHBnegativedirectionRecosignalD4   =     "<<kcountHBnegativedirectionRecosignalD4  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHBnegativedirectionRecosignalD4);
          HBnegativedirectionRecosignalD4->SetMarkerStyle(20);
          HBnegativedirectionRecosignalD4->SetMarkerSize(0.4);
          HBnegativedirectionRecosignalD4->GetYaxis()->SetLabelSize(0.04);
          HBnegativedirectionRecosignalD4->SetXTitle("HBnegativedirectionRecosignalD4 \b");
          HBnegativedirectionRecosignalD4->SetMarkerColor(2);
          HBnegativedirectionRecosignalD4->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHBnegativedirectionRecosignalD4 == 1)
            HBnegativedirectionRecosignalD4->SetXTitle("D for HB- jeta =-16; depth = 4 \b");
          if (kcountHBnegativedirectionRecosignalD4 == 2)
            HBnegativedirectionRecosignalD4->SetXTitle("D for HB- jeta =-15; depth = 4 \b");
          if (kcountHBnegativedirectionRecosignalD4 == 3)
            HBnegativedirectionRecosignalD4->SetXTitle("D for HB- jeta =-14; depth = 4 \b");
          if (kcountHBnegativedirectionRecosignalD4 == 4)
            HBnegativedirectionRecosignalD4->SetXTitle("D for HB- jeta =-13; depth = 4 \b");
          if (kcountHBnegativedirectionRecosignalD4 == 5)
            HBnegativedirectionRecosignalD4->SetXTitle("D for HB- jeta =-12; depth = 4 \b");
          if (kcountHBnegativedirectionRecosignalD4 == 6)
            HBnegativedirectionRecosignalD4->SetXTitle("D for HB- jeta =-11; depth = 4 \b");
          if (kcountHBnegativedirectionRecosignalD4 == 7)
            HBnegativedirectionRecosignalD4->SetXTitle("D for HB- jeta =-10; depth = 4 \b");
          if (kcountHBnegativedirectionRecosignalD4 == 8)
            HBnegativedirectionRecosignalD4->SetXTitle("D for HB- jeta =-9 ; depth = 4 \b");
          if (kcountHBnegativedirectionRecosignalD4 == 9)
            HBnegativedirectionRecosignalD4->SetXTitle("D for HB- jeta =-8 ; depth = 4 \b");
          if (kcountHBnegativedirectionRecosignalD4 == 10)
            HBnegativedirectionRecosignalD4->SetXTitle("D for HB- jeta =-7 ; depth = 4 \b");
          if (kcountHBnegativedirectionRecosignalD4 == 11)
            HBnegativedirectionRecosignalD4->SetXTitle("D for HB- jeta =-6 ; depth = 4 \b");
          if (kcountHBnegativedirectionRecosignalD4 == 12)
            HBnegativedirectionRecosignalD4->SetXTitle("D for HB- jeta =-5 ; depth = 4 \b");
          if (kcountHBnegativedirectionRecosignalD4 == 13)
            HBnegativedirectionRecosignalD4->SetXTitle("D for HB- jeta =-4 ; depth = 4 \b");
          if (kcountHBnegativedirectionRecosignalD4 == 14)
            HBnegativedirectionRecosignalD4->SetXTitle("D for HB- jeta =-3 ; depth = 4 \b");
          if (kcountHBnegativedirectionRecosignalD4 == 15)
            HBnegativedirectionRecosignalD4->SetXTitle("D for HB- jeta =-2 ; depth = 4 \b");
          if (kcountHBnegativedirectionRecosignalD4 == 16)
            HBnegativedirectionRecosignalD4->SetXTitle("D for HB- jeta =-1 ; depth = 4 \b");
          HBnegativedirectionRecosignalD4->Draw("Error");
          kcountHBnegativedirectionRecosignalD4++;
          if (kcountHBnegativedirectionRecosignalD4 > 16)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 < 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DrecosignalNegativeDirectionhistD1PhiSymmetryDepth4HB.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHBnegativedirectionRecosignalD4)
    delete h2CeffHBnegativedirectionRecosignalD4;

  //=====================================================================       END of Recosignal HB for phi-symmetry
  //=====================================================================       END of Recosignal HB for phi-symmetry
  //=====================================================================       END of Recosignal HB for phi-symmetry

  ////////////////////////////////////////////////////////////////////////////////////////////////////         Phi-symmetry for Calibration Group:    Recosignal HE
  ////////////////////////////////////////////////////////////////////////////////////////////////////         Phi-symmetry for Calibration Group:    Recosignal HE
  ////////////////////////////////////////////////////////////////////////////////////////////////////         Phi-symmetry for Calibration Group:    Recosignal HE
  //  int k_max[5]={0,4,7,4,4}; // maximum depth for each subdet
  //ndepth = k_max[3];
  ndepth = 7;
  //  const int ndepth = 7;
  double arecosignalhe[ndepth][njeta][njphi];
  double recosignalvariancehe[ndepth][njeta][njphi];
  //                                   RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR:   Recosignal HE
  TH2F *recSignalEnergy1HE1 = (TH2F *)dir->FindObjectAny("h_recSignalEnergy1_HE1");
  TH2F *recSignalEnergy0HE1 = (TH2F *)dir->FindObjectAny("h_recSignalEnergy0_HE1");
  TH2F *recSignalEnergyHE1 = (TH2F *)recSignalEnergy1HE1->Clone("recSignalEnergyHE1");
  recSignalEnergyHE1->Divide(recSignalEnergy1HE1, recSignalEnergy0HE1, 1, 1, "B");
  TH2F *recSignalEnergy1HE2 = (TH2F *)dir->FindObjectAny("h_recSignalEnergy1_HE2");
  TH2F *recSignalEnergy0HE2 = (TH2F *)dir->FindObjectAny("h_recSignalEnergy0_HE2");
  TH2F *recSignalEnergyHE2 = (TH2F *)recSignalEnergy1HE2->Clone("recSignalEnergyHE2");
  recSignalEnergyHE2->Divide(recSignalEnergy1HE2, recSignalEnergy0HE2, 1, 1, "B");
  TH2F *recSignalEnergy1HE3 = (TH2F *)dir->FindObjectAny("h_recSignalEnergy1_HE3");
  TH2F *recSignalEnergy0HE3 = (TH2F *)dir->FindObjectAny("h_recSignalEnergy0_HE3");
  TH2F *recSignalEnergyHE3 = (TH2F *)recSignalEnergy1HE3->Clone("recSignalEnergyHE3");
  recSignalEnergyHE3->Divide(recSignalEnergy1HE3, recSignalEnergy0HE3, 1, 1, "B");
  TH2F *recSignalEnergy1HE4 = (TH2F *)dir->FindObjectAny("h_recSignalEnergy1_HE4");
  TH2F *recSignalEnergy0HE4 = (TH2F *)dir->FindObjectAny("h_recSignalEnergy0_HE4");
  TH2F *recSignalEnergyHE4 = (TH2F *)recSignalEnergy1HE4->Clone("recSignalEnergyHE4");
  recSignalEnergyHE4->Divide(recSignalEnergy1HE4, recSignalEnergy0HE4, 1, 1, "B");
  TH2F *recSignalEnergy1HE5 = (TH2F *)dir->FindObjectAny("h_recSignalEnergy1_HE5");
  TH2F *recSignalEnergy0HE5 = (TH2F *)dir->FindObjectAny("h_recSignalEnergy0_HE5");
  TH2F *recSignalEnergyHE5 = (TH2F *)recSignalEnergy1HE5->Clone("recSignalEnergyHE5");
  recSignalEnergyHE5->Divide(recSignalEnergy1HE5, recSignalEnergy0HE5, 1, 1, "B");
  TH2F *recSignalEnergy1HE6 = (TH2F *)dir->FindObjectAny("h_recSignalEnergy1_HE6");
  TH2F *recSignalEnergy0HE6 = (TH2F *)dir->FindObjectAny("h_recSignalEnergy0_HE6");
  TH2F *recSignalEnergyHE6 = (TH2F *)recSignalEnergy1HE6->Clone("recSignalEnergyHE6");
  recSignalEnergyHE6->Divide(recSignalEnergy1HE6, recSignalEnergy0HE6, 1, 1, "B");
  TH2F *recSignalEnergy1HE7 = (TH2F *)dir->FindObjectAny("h_recSignalEnergy1_HE7");
  TH2F *recSignalEnergy0HE7 = (TH2F *)dir->FindObjectAny("h_recSignalEnergy0_HE7");
  TH2F *recSignalEnergyHE7 = (TH2F *)recSignalEnergy1HE7->Clone("recSignalEnergyHE7");
  recSignalEnergyHE7->Divide(recSignalEnergy1HE7, recSignalEnergy0HE7, 1, 1, "B");
  for (int jeta = 0; jeta < njeta; jeta++) {
    //====================================================================== PHI normalization & put R into massive arecosignalhe
    //preparation for PHI normalization:
    double sumrecosignalHE0 = 0;
    int nsumrecosignalHE0 = 0;
    double sumrecosignalHE1 = 0;
    int nsumrecosignalHE1 = 0;
    double sumrecosignalHE2 = 0;
    int nsumrecosignalHE2 = 0;
    double sumrecosignalHE3 = 0;
    int nsumrecosignalHE3 = 0;
    double sumrecosignalHE4 = 0;
    int nsumrecosignalHE4 = 0;
    double sumrecosignalHE5 = 0;
    int nsumrecosignalHE5 = 0;
    double sumrecosignalHE6 = 0;
    int nsumrecosignalHE6 = 0;
    for (int jphi = 0; jphi < njphi; jphi++) {
      arecosignalhe[0][jeta][jphi] = recSignalEnergyHE1->GetBinContent(jeta + 1, jphi + 1);
      arecosignalhe[1][jeta][jphi] = recSignalEnergyHE2->GetBinContent(jeta + 1, jphi + 1);
      arecosignalhe[2][jeta][jphi] = recSignalEnergyHE3->GetBinContent(jeta + 1, jphi + 1);
      arecosignalhe[3][jeta][jphi] = recSignalEnergyHE4->GetBinContent(jeta + 1, jphi + 1);
      arecosignalhe[4][jeta][jphi] = recSignalEnergyHE5->GetBinContent(jeta + 1, jphi + 1);
      arecosignalhe[5][jeta][jphi] = recSignalEnergyHE6->GetBinContent(jeta + 1, jphi + 1);
      arecosignalhe[6][jeta][jphi] = recSignalEnergyHE7->GetBinContent(jeta + 1, jphi + 1);
      if (arecosignalhe[0][jeta][jphi] > 0.) {
        sumrecosignalHE0 += arecosignalhe[0][jeta][jphi];
        ++nsumrecosignalHE0;
      }
      if (arecosignalhe[1][jeta][jphi] > 0.) {
        sumrecosignalHE1 += arecosignalhe[1][jeta][jphi];
        ++nsumrecosignalHE1;
      }
      if (arecosignalhe[2][jeta][jphi] > 0.) {
        sumrecosignalHE2 += arecosignalhe[2][jeta][jphi];
        ++nsumrecosignalHE2;
      }
      if (arecosignalhe[3][jeta][jphi] > 0.) {
        sumrecosignalHE3 += arecosignalhe[3][jeta][jphi];
        ++nsumrecosignalHE3;
      }
      if (arecosignalhe[4][jeta][jphi] > 0.) {
        sumrecosignalHE4 += arecosignalhe[4][jeta][jphi];
        ++nsumrecosignalHE4;
      }
      if (arecosignalhe[5][jeta][jphi] > 0.) {
        sumrecosignalHE5 += arecosignalhe[5][jeta][jphi];
        ++nsumrecosignalHE5;
      }
      if (arecosignalhe[6][jeta][jphi] > 0.) {
        sumrecosignalHE6 += arecosignalhe[6][jeta][jphi];
        ++nsumrecosignalHE6;
      }
    }  // phi
    // PHI normalization:
    for (int jphi = 0; jphi < njphi; jphi++) {
      if (arecosignalhe[0][jeta][jphi] > 0.)
        arecosignalhe[0][jeta][jphi] /= (sumrecosignalHE0 / nsumrecosignalHE0);
      if (arecosignalhe[1][jeta][jphi] > 0.)
        arecosignalhe[1][jeta][jphi] /= (sumrecosignalHE1 / nsumrecosignalHE1);
      if (arecosignalhe[2][jeta][jphi] > 0.)
        arecosignalhe[2][jeta][jphi] /= (sumrecosignalHE2 / nsumrecosignalHE2);
      if (arecosignalhe[3][jeta][jphi] > 0.)
        arecosignalhe[3][jeta][jphi] /= (sumrecosignalHE3 / nsumrecosignalHE3);
      if (arecosignalhe[4][jeta][jphi] > 0.)
        arecosignalhe[4][jeta][jphi] /= (sumrecosignalHE4 / nsumrecosignalHE4);
      if (arecosignalhe[5][jeta][jphi] > 0.)
        arecosignalhe[5][jeta][jphi] /= (sumrecosignalHE5 / nsumrecosignalHE5);
      if (arecosignalhe[6][jeta][jphi] > 0.)
        arecosignalhe[6][jeta][jphi] /= (sumrecosignalHE6 / nsumrecosignalHE6);
    }  // phi
  }    //eta
  //------------------------  2D-eta/phi-plot: R, averaged over depthes
  //======================================================================
  //======================================================================
  //cout<<"      R2D-eta/phi-plot: R, averaged over depthes *****" <<endl;
  c2x1->Clear();
  /////////////////
  c2x1->Divide(2, 1);
  c2x1->cd(1);
  TH2F *GefzRrecosignalHE42D = new TH2F("GefzRrecosignalHE42D", "", neta, -41., 41., nphi, 0., 72.);
  TH2F *GefzRrecosignalHE42D0 = new TH2F("GefzRrecosignalHE42D0", "", neta, -41., 41., nphi, 0., 72.);
  TH2F *GefzRrecosignalHE42DF = (TH2F *)GefzRrecosignalHE42D0->Clone("GefzRrecosignalHE42DF");
  for (int i = 0; i < ndepth; i++) {
    for (int jeta = 0; jeta < neta; jeta++) {
      for (int jphi = 0; jphi < nphi; jphi++) {
        double ccc1 = arecosignalhe[i][jeta][jphi];
        int k2plot = jeta - 41;
        int kkk = k2plot;  //if(k2plot >0 ) kkk=k2plot+1; //-41 +41 !=0
        if (ccc1 != 0.) {
          GefzRrecosignalHE42D->Fill(kkk, jphi, ccc1);
          GefzRrecosignalHE42D0->Fill(kkk, jphi, 1.);
        }
      }
    }
  }
  GefzRrecosignalHE42DF->Divide(GefzRrecosignalHE42D, GefzRrecosignalHE42D0, 1, 1, "B");  // average A
  gPad->SetGridy();
  gPad->SetGridx();  //      gPad->SetLogz();
  GefzRrecosignalHE42DF->SetXTitle("<R>_depth       #eta  \b");
  GefzRrecosignalHE42DF->SetYTitle("      #phi \b");
  GefzRrecosignalHE42DF->Draw("COLZ");

  c2x1->cd(2);
  TH1F *energyhitSignal_HE = (TH1F *)dir->FindObjectAny("h_energyhitSignal_HE");
  energyhitSignal_HE->SetMarkerStyle(20);
  energyhitSignal_HE->SetMarkerSize(0.4);
  energyhitSignal_HE->GetYaxis()->SetLabelSize(0.04);
  energyhitSignal_HE->SetXTitle("energyhitSignal_HE \b");
  energyhitSignal_HE->SetMarkerColor(2);
  energyhitSignal_HE->SetLineColor(0);
  gPad->SetGridy();
  gPad->SetGridx();
  energyhitSignal_HE->Draw("Error");

  /////////////////
  c2x1->Update();
  c2x1->Print("RrecosignalGeneralD2PhiSymmetryHE.png");
  c2x1->Clear();
  // clean-up
  if (GefzRrecosignalHE42D)
    delete GefzRrecosignalHE42D;
  if (GefzRrecosignalHE42D0)
    delete GefzRrecosignalHE42D0;
  if (GefzRrecosignalHE42DF)
    delete GefzRrecosignalHE42DF;
  //====================================================================== 1D plot: R vs phi , averaged over depthes & eta
  //======================================================================
  //cout<<"      1D plot: R vs phi , averaged over depthes & eta *****" <<endl;
  c1x1->Clear();
  /////////////////
  c1x1->Divide(1, 1);
  c1x1->cd(1);
  TH1F *GefzRrecosignalHE41D = new TH1F("GefzRrecosignalHE41D", "", nphi, 0., 72.);
  TH1F *GefzRrecosignalHE41D0 = new TH1F("GefzRrecosignalHE41D0", "", nphi, 0., 72.);
  TH1F *GefzRrecosignalHE41DF = (TH1F *)GefzRrecosignalHE41D0->Clone("GefzRrecosignalHE41DF");
  for (int jphi = 0; jphi < nphi; jphi++) {
    for (int jeta = 0; jeta < neta; jeta++) {
      for (int i = 0; i < ndepth; i++) {
        double ccc1 = arecosignalhe[i][jeta][jphi];
        if (ccc1 != 0.) {
          GefzRrecosignalHE41D->Fill(jphi, ccc1);
          GefzRrecosignalHE41D0->Fill(jphi, 1.);
        }
      }
    }
  }
  GefzRrecosignalHE41DF->Divide(
      GefzRrecosignalHE41D, GefzRrecosignalHE41D0, 1, 1, "B");  // R averaged over depthes & eta
  GefzRrecosignalHE41D0->Sumw2();
  //    for (int jphi=1;jphi<73;jphi++) {GefzRrecosignalHE41DF->SetBinError(jphi,0.01);}
  gPad->SetGridy();
  gPad->SetGridx();  //      gPad->SetLogz();
  GefzRrecosignalHE41DF->SetMarkerStyle(20);
  GefzRrecosignalHE41DF->SetMarkerSize(1.4);
  GefzRrecosignalHE41DF->GetZaxis()->SetLabelSize(0.08);
  GefzRrecosignalHE41DF->SetXTitle("#phi  \b");
  GefzRrecosignalHE41DF->SetYTitle("  <R> \b");
  GefzRrecosignalHE41DF->SetZTitle("<R>_PHI  - AllDepthes \b");
  GefzRrecosignalHE41DF->SetMarkerColor(4);
  GefzRrecosignalHE41DF->SetLineColor(
      4);  //  GefzRrecosignalHE41DF->SetMinimum(0.8);     //      GefzRrecosignalHE41DF->SetMaximum(1.000);
  GefzRrecosignalHE41DF->Draw("Error");
  /////////////////
  c1x1->Update();
  c1x1->Print("RrecosignalGeneralD1PhiSymmetryHE.png");
  c1x1->Clear();
  // clean-up
  if (GefzRrecosignalHE41D)
    delete GefzRrecosignalHE41D;
  if (GefzRrecosignalHE41D0)
    delete GefzRrecosignalHE41D0;
  if (GefzRrecosignalHE41DF)
    delete GefzRrecosignalHE41DF;

  //========================================================================================== 4
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=1
  //cout<<"      1D plot: R vs phi , different eta,  depth=1 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEpositivedirectionRecosignal1 = 1;
  TH1F *h2CeffHEpositivedirectionRecosignal1 = new TH1F("h2CeffHEpositivedirectionRecosignal1", "", nphi, 0., 72.);
  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionRecosignal:
    if (jeta - 41 >= 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=1
      for (int i = 0; i < 1; i++) {
        TH1F *HEpositivedirectionRecosignal1 = (TH1F *)h2CeffHEpositivedirectionRecosignal1->Clone("twod1");
        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = arecosignalhe[i][jeta][jphi];
          if (ccc1 != 0.) {
            HEpositivedirectionRecosignal1->Fill(jphi, ccc1);
            ccctest = 1.;  //HEpositivedirectionRecosignal1->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //	  cout<<"444        kcountHEpositivedirectionRecosignal1   =     "<<kcountHEpositivedirectionRecosignal1  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEpositivedirectionRecosignal1);
          HEpositivedirectionRecosignal1->SetMarkerStyle(20);
          HEpositivedirectionRecosignal1->SetMarkerSize(0.4);
          HEpositivedirectionRecosignal1->GetYaxis()->SetLabelSize(0.04);
          HEpositivedirectionRecosignal1->SetXTitle("HEpositivedirectionRecosignal1 \b");
          HEpositivedirectionRecosignal1->SetMarkerColor(2);
          HEpositivedirectionRecosignal1->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEpositivedirectionRecosignal1 == 1)
            HEpositivedirectionRecosignal1->SetXTitle("R for HE+ jeta = 17; depth = 1 \b");
          if (kcountHEpositivedirectionRecosignal1 == 2)
            HEpositivedirectionRecosignal1->SetXTitle("R for HE+ jeta = 18; depth = 1 \b");
          if (kcountHEpositivedirectionRecosignal1 == 3)
            HEpositivedirectionRecosignal1->SetXTitle("R for HE+ jeta = 19; depth = 1 \b");
          if (kcountHEpositivedirectionRecosignal1 == 4)
            HEpositivedirectionRecosignal1->SetXTitle("R for HE+ jeta = 20; depth = 1 \b");
          if (kcountHEpositivedirectionRecosignal1 == 5)
            HEpositivedirectionRecosignal1->SetXTitle("R for HE+ jeta = 21; depth = 1 \b");
          if (kcountHEpositivedirectionRecosignal1 == 6)
            HEpositivedirectionRecosignal1->SetXTitle("R for HE+ jeta = 22; depth = 1 \b");
          if (kcountHEpositivedirectionRecosignal1 == 7)
            HEpositivedirectionRecosignal1->SetXTitle("R for HE+ jeta = 23; depth = 1 \b");
          if (kcountHEpositivedirectionRecosignal1 == 8)
            HEpositivedirectionRecosignal1->SetXTitle("R for HE+ jeta = 24; depth = 1 \b");
          if (kcountHEpositivedirectionRecosignal1 == 9)
            HEpositivedirectionRecosignal1->SetXTitle("R for HE+ jeta = 25; depth = 1 \b");
          if (kcountHEpositivedirectionRecosignal1 == 10)
            HEpositivedirectionRecosignal1->SetXTitle("R for HE+ jeta = 26; depth = 1 \b");
          if (kcountHEpositivedirectionRecosignal1 == 11)
            HEpositivedirectionRecosignal1->SetXTitle("R for HE+ jeta = 27; depth = 1 \b");
          if (kcountHEpositivedirectionRecosignal1 == 12)
            HEpositivedirectionRecosignal1->SetXTitle("R for HE+ jeta = 28; depth = 1 \b");
          HEpositivedirectionRecosignal1->Draw("Error");
          kcountHEpositivedirectionRecosignal1++;
          if (kcountHEpositivedirectionRecosignal1 > 12)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RrecosignalPositiveDirectionhistD1PhiSymmetryDepth1HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEpositivedirectionRecosignal1)
    delete h2CeffHEpositivedirectionRecosignal1;

  //========================================================================================== 5
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=2
  //  cout<<"      1D plot: R vs phi , different eta,  depth=2 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEpositivedirectionRecosignal2 = 1;
  TH1F *h2CeffHEpositivedirectionRecosignal2 = new TH1F("h2CeffHEpositivedirectionRecosignal2", "", nphi, 0., 72.);
  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionRecosignal:
    if (jeta - 41 >= 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=2
      for (int i = 1; i < 2; i++) {
        TH1F *HEpositivedirectionRecosignal2 = (TH1F *)h2CeffHEpositivedirectionRecosignal2->Clone("twod1");
        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = arecosignalhe[i][jeta][jphi];
          if (ccc1 != 0.) {
            HEpositivedirectionRecosignal2->Fill(jphi, ccc1);
            ccctest = 1.;  //HEpositivedirectionRecosignal2->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"555        kcountHEpositivedirectionRecosignal2   =     "<<kcountHEpositivedirectionRecosignal2  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEpositivedirectionRecosignal2);
          HEpositivedirectionRecosignal2->SetMarkerStyle(20);
          HEpositivedirectionRecosignal2->SetMarkerSize(0.4);
          HEpositivedirectionRecosignal2->GetYaxis()->SetLabelSize(0.04);
          HEpositivedirectionRecosignal2->SetXTitle("HEpositivedirectionRecosignal2 \b");
          HEpositivedirectionRecosignal2->SetMarkerColor(2);
          HEpositivedirectionRecosignal2->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEpositivedirectionRecosignal2 == 1)
            HEpositivedirectionRecosignal2->SetXTitle("R for HE+ jeta = 16; depth = 2 \b");
          if (kcountHEpositivedirectionRecosignal2 == 2)
            HEpositivedirectionRecosignal2->SetXTitle("R for HE+ jeta = 17; depth = 2 \b");
          if (kcountHEpositivedirectionRecosignal2 == 3)
            HEpositivedirectionRecosignal2->SetXTitle("R for HE+ jeta = 18; depth = 2 \b");
          if (kcountHEpositivedirectionRecosignal2 == 4)
            HEpositivedirectionRecosignal2->SetXTitle("R for HE+ jeta = 19; depth = 2 \b");
          if (kcountHEpositivedirectionRecosignal2 == 5)
            HEpositivedirectionRecosignal2->SetXTitle("R for HE+ jeta = 20; depth = 2 \b");
          if (kcountHEpositivedirectionRecosignal2 == 6)
            HEpositivedirectionRecosignal2->SetXTitle("R for HE+ jeta = 21; depth = 2 \b");
          if (kcountHEpositivedirectionRecosignal2 == 7)
            HEpositivedirectionRecosignal2->SetXTitle("R for HE+ jeta = 22; depth = 2 \b");
          if (kcountHEpositivedirectionRecosignal2 == 8)
            HEpositivedirectionRecosignal2->SetXTitle("R for HE+ jeta = 23; depth = 2 \b");
          if (kcountHEpositivedirectionRecosignal2 == 9)
            HEpositivedirectionRecosignal2->SetXTitle("R for HE+ jeta = 24; depth = 2 \b");
          if (kcountHEpositivedirectionRecosignal2 == 10)
            HEpositivedirectionRecosignal2->SetXTitle("R for HE+ jeta = 25; depth = 2 \b");
          if (kcountHEpositivedirectionRecosignal2 == 11)
            HEpositivedirectionRecosignal2->SetXTitle("R for HE+ jeta = 26; depth = 2 \b");
          if (kcountHEpositivedirectionRecosignal2 == 12)
            HEpositivedirectionRecosignal2->SetXTitle("R for HE+ jeta = 27; depth = 2 \b");
          if (kcountHEpositivedirectionRecosignal2 == 13)
            HEpositivedirectionRecosignal2->SetXTitle("R for HE+ jeta = 28; depth = 2 \b");
          HEpositivedirectionRecosignal2->Draw("Error");
          kcountHEpositivedirectionRecosignal2++;
          if (kcountHEpositivedirectionRecosignal2 > 13)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RrecosignalPositiveDirectionhistD1PhiSymmetryDepth2HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEpositivedirectionRecosignal2)
    delete h2CeffHEpositivedirectionRecosignal2;
  //========================================================================================== 6
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=3
  //cout<<"      1D plot: R vs phi , different eta,  depth=3 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEpositivedirectionRecosignal3 = 1;
  TH1F *h2CeffHEpositivedirectionRecosignal3 = new TH1F("h2CeffHEpositivedirectionRecosignal3", "", nphi, 0., 72.);
  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionRecosignal:
    if (jeta - 41 >= 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=3
      for (int i = 2; i < 3; i++) {
        TH1F *HEpositivedirectionRecosignal3 = (TH1F *)h2CeffHEpositivedirectionRecosignal3->Clone("twod1");
        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = arecosignalhe[i][jeta][jphi];
          if (ccc1 != 0.) {
            HEpositivedirectionRecosignal3->Fill(jphi, ccc1);
            ccctest = 1.;  //HEpositivedirectionRecosignal3->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"666        kcountHEpositivedirectionRecosignal3   =     "<<kcountHEpositivedirectionRecosignal3  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEpositivedirectionRecosignal3);
          HEpositivedirectionRecosignal3->SetMarkerStyle(20);
          HEpositivedirectionRecosignal3->SetMarkerSize(0.4);
          HEpositivedirectionRecosignal3->GetYaxis()->SetLabelSize(0.04);
          HEpositivedirectionRecosignal3->SetXTitle("HEpositivedirectionRecosignal3 \b");
          HEpositivedirectionRecosignal3->SetMarkerColor(2);
          HEpositivedirectionRecosignal3->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEpositivedirectionRecosignal3 == 1)
            HEpositivedirectionRecosignal3->SetXTitle("R for HE+ jeta = 16; depth = 3 \b");
          if (kcountHEpositivedirectionRecosignal3 == 2)
            HEpositivedirectionRecosignal3->SetXTitle("R for HE+ jeta = 17; depth = 3 \b");
          if (kcountHEpositivedirectionRecosignal3 == 3)
            HEpositivedirectionRecosignal3->SetXTitle("R for HE+ jeta = 18; depth = 3 \b");
          if (kcountHEpositivedirectionRecosignal3 == 4)
            HEpositivedirectionRecosignal3->SetXTitle("R for HE+ jeta = 19; depth = 3 \b");
          if (kcountHEpositivedirectionRecosignal3 == 5)
            HEpositivedirectionRecosignal3->SetXTitle("R for HE+ jeta = 20; depth = 3 \b");
          if (kcountHEpositivedirectionRecosignal3 == 6)
            HEpositivedirectionRecosignal3->SetXTitle("R for HE+ jeta = 21; depth = 3 \b");
          if (kcountHEpositivedirectionRecosignal3 == 7)
            HEpositivedirectionRecosignal3->SetXTitle("R for HE+ jeta = 22; depth = 3 \b");
          if (kcountHEpositivedirectionRecosignal3 == 8)
            HEpositivedirectionRecosignal3->SetXTitle("R for HE+ jeta = 23; depth = 3 \b");
          if (kcountHEpositivedirectionRecosignal3 == 9)
            HEpositivedirectionRecosignal3->SetXTitle("R for HE+ jeta = 24; depth = 3 \b");
          if (kcountHEpositivedirectionRecosignal3 == 10)
            HEpositivedirectionRecosignal3->SetXTitle("R for HE+ jeta = 25; depth = 3 \b");
          if (kcountHEpositivedirectionRecosignal3 == 11)
            HEpositivedirectionRecosignal3->SetXTitle("R for HE+ jeta = 26; depth = 3 \b");
          if (kcountHEpositivedirectionRecosignal3 == 12)
            HEpositivedirectionRecosignal3->SetXTitle("R for HE+ jeta = 27; depth = 3 \b");
          if (kcountHEpositivedirectionRecosignal3 == 13)
            HEpositivedirectionRecosignal3->SetXTitle("R for HE+ jeta = 28; depth = 3 \b");
          HEpositivedirectionRecosignal3->Draw("Error");
          kcountHEpositivedirectionRecosignal3++;
          if (kcountHEpositivedirectionRecosignal3 > 13)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RrecosignalPositiveDirectionhistD1PhiSymmetryDepth3HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEpositivedirectionRecosignal3)
    delete h2CeffHEpositivedirectionRecosignal3;
  //========================================================================================== 7
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=4
  //cout<<"      1D plot: R vs phi , different eta,  depth=4 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEpositivedirectionRecosignal4 = 1;
  TH1F *h2CeffHEpositivedirectionRecosignal4 = new TH1F("h2CeffHEpositivedirectionRecosignal4", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionRecosignal:
    if (jeta - 41 >= 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=4
      for (int i = 3; i < 4; i++) {
        TH1F *HEpositivedirectionRecosignal4 = (TH1F *)h2CeffHEpositivedirectionRecosignal4->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = arecosignalhe[i][jeta][jphi];
          if (ccc1 != 0.) {
            HEpositivedirectionRecosignal4->Fill(jphi, ccc1);
            ccctest = 1.;  //HEpositivedirectionRecosignal4->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"777        kcountHEpositivedirectionRecosignal4   =     "<<kcountHEpositivedirectionRecosignal4  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEpositivedirectionRecosignal4);
          HEpositivedirectionRecosignal4->SetMarkerStyle(20);
          HEpositivedirectionRecosignal4->SetMarkerSize(0.4);
          HEpositivedirectionRecosignal4->GetYaxis()->SetLabelSize(0.04);
          HEpositivedirectionRecosignal4->SetXTitle("HEpositivedirectionRecosignal4 \b");
          HEpositivedirectionRecosignal4->SetMarkerColor(2);
          HEpositivedirectionRecosignal4->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEpositivedirectionRecosignal4 == 1)
            HEpositivedirectionRecosignal4->SetXTitle("R for HE+ jeta = 15; depth = 4 \b");
          if (kcountHEpositivedirectionRecosignal4 == 2)
            HEpositivedirectionRecosignal4->SetXTitle("R for HE+ jeta = 17; depth = 4 \b");
          if (kcountHEpositivedirectionRecosignal4 == 3)
            HEpositivedirectionRecosignal4->SetXTitle("R for HE+ jeta = 18; depth = 4 \b");
          if (kcountHEpositivedirectionRecosignal4 == 4)
            HEpositivedirectionRecosignal4->SetXTitle("R for HE+ jeta = 19; depth = 4 \b");
          if (kcountHEpositivedirectionRecosignal4 == 5)
            HEpositivedirectionRecosignal4->SetXTitle("R for HE+ jeta = 20; depth = 4 \b");
          if (kcountHEpositivedirectionRecosignal4 == 6)
            HEpositivedirectionRecosignal4->SetXTitle("R for HE+ jeta = 21; depth = 4 \b");
          if (kcountHEpositivedirectionRecosignal4 == 7)
            HEpositivedirectionRecosignal4->SetXTitle("R for HE+ jeta = 22; depth = 4 \b");
          if (kcountHEpositivedirectionRecosignal4 == 8)
            HEpositivedirectionRecosignal4->SetXTitle("R for HE+ jeta = 23; depth = 4 \b");
          if (kcountHEpositivedirectionRecosignal4 == 9)
            HEpositivedirectionRecosignal4->SetXTitle("R for HE+ jeta = 24; depth = 4 \b");
          if (kcountHEpositivedirectionRecosignal4 == 10)
            HEpositivedirectionRecosignal4->SetXTitle("R for HE+ jeta = 25; depth = 4 \b");
          if (kcountHEpositivedirectionRecosignal4 == 11)
            HEpositivedirectionRecosignal4->SetXTitle("R for HE+ jeta = 26; depth = 4 \b");
          if (kcountHEpositivedirectionRecosignal4 == 12)
            HEpositivedirectionRecosignal4->SetXTitle("R for HE+ jeta = 27; depth = 4 \b");
          HEpositivedirectionRecosignal4->Draw("Error");
          kcountHEpositivedirectionRecosignal4++;
          if (kcountHEpositivedirectionRecosignal4 > 12)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RrecosignalPositiveDirectionhistD1PhiSymmetryDepth4HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEpositivedirectionRecosignal4)
    delete h2CeffHEpositivedirectionRecosignal4;
  //========================================================================================== 8
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=5
  //cout<<"      1D plot: R vs phi , different eta,  depth=5 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEpositivedirectionRecosignal5 = 1;
  TH1F *h2CeffHEpositivedirectionRecosignal5 = new TH1F("h2CeffHEpositivedirectionRecosignal5", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionRecosignal:
    if (jeta - 41 >= 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=5
      for (int i = 4; i < 5; i++) {
        TH1F *HEpositivedirectionRecosignal5 = (TH1F *)h2CeffHEpositivedirectionRecosignal5->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          //	       cout<<"888  initial      kcountHEpositivedirectionRecosignal5   =     "<<kcountHEpositivedirectionRecosignal5  <<"   jeta-41=     "<< jeta-41 <<"   jphi=     "<< jphi <<"   arecosignalhe[i][jeta][jphi]=     "<< arecosignalhe[i][jeta][jphi] <<"  depth=     "<< i <<endl;

          double ccc1 = arecosignalhe[i][jeta][jphi];
          if (ccc1 != 0.) {
            HEpositivedirectionRecosignal5->Fill(jphi, ccc1);
            ccctest = 1.;  //HEpositivedirectionRecosignal5->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"888        kcountHEpositivedirectionRecosignal5   =     "<<kcountHEpositivedirectionRecosignal5  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEpositivedirectionRecosignal5);
          HEpositivedirectionRecosignal5->SetMarkerStyle(20);
          HEpositivedirectionRecosignal5->SetMarkerSize(0.4);
          HEpositivedirectionRecosignal5->GetYaxis()->SetLabelSize(0.04);
          HEpositivedirectionRecosignal5->SetXTitle("HEpositivedirectionRecosignal5 \b");
          HEpositivedirectionRecosignal5->SetMarkerColor(2);
          HEpositivedirectionRecosignal5->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEpositivedirectionRecosignal5 == 1)
            HEpositivedirectionRecosignal5->SetXTitle("R for HE+ jeta = 17; depth = 5 \b");
          if (kcountHEpositivedirectionRecosignal5 == 2)
            HEpositivedirectionRecosignal5->SetXTitle("R for HE+ jeta = 18; depth = 5 \b");
          if (kcountHEpositivedirectionRecosignal5 == 3)
            HEpositivedirectionRecosignal5->SetXTitle("R for HE+ jeta = 19; depth = 5 \b");
          if (kcountHEpositivedirectionRecosignal5 == 4)
            HEpositivedirectionRecosignal5->SetXTitle("R for HE+ jeta = 20; depth = 5 \b");
          if (kcountHEpositivedirectionRecosignal5 == 5)
            HEpositivedirectionRecosignal5->SetXTitle("R for HE+ jeta = 21; depth = 5 \b");
          if (kcountHEpositivedirectionRecosignal5 == 6)
            HEpositivedirectionRecosignal5->SetXTitle("R for HE+ jeta = 22; depth = 5 \b");
          if (kcountHEpositivedirectionRecosignal5 == 7)
            HEpositivedirectionRecosignal5->SetXTitle("R for HE+ jeta = 23; depth = 5 \b");
          if (kcountHEpositivedirectionRecosignal5 == 8)
            HEpositivedirectionRecosignal5->SetXTitle("R for HE+ jeta = 24; depth = 5 \b");
          if (kcountHEpositivedirectionRecosignal5 == 9)
            HEpositivedirectionRecosignal5->SetXTitle("R for HE+ jeta = 25; depth = 5 \b");
          if (kcountHEpositivedirectionRecosignal5 == 10)
            HEpositivedirectionRecosignal5->SetXTitle("R for HE+ jeta = 26; depth = 5 \b");
          if (kcountHEpositivedirectionRecosignal5 == 11)
            HEpositivedirectionRecosignal5->SetXTitle("R for HE+ jeta = 27; depth = 5 \b");
          HEpositivedirectionRecosignal5->Draw("Error");
          kcountHEpositivedirectionRecosignal5++;
          if (kcountHEpositivedirectionRecosignal5 > 11)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RrecosignalPositiveDirectionhistD1PhiSymmetryDepth5HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEpositivedirectionRecosignal5)
    delete h2CeffHEpositivedirectionRecosignal5;
  //========================================================================================== 9
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=6
  //cout<<"      1D plot: R vs phi , different eta,  depth=6 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEpositivedirectionRecosignal6 = 1;
  TH1F *h2CeffHEpositivedirectionRecosignal6 = new TH1F("h2CeffHEpositivedirectionRecosignal6", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionRecosignal:
    if (jeta - 41 >= 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=6
      for (int i = 5; i < 6; i++) {
        TH1F *HEpositivedirectionRecosignal6 = (TH1F *)h2CeffHEpositivedirectionRecosignal6->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = arecosignalhe[i][jeta][jphi];
          if (ccc1 != 0.) {
            HEpositivedirectionRecosignal6->Fill(jphi, ccc1);
            ccctest = 1.;  //HEpositivedirectionRecosignal6->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"999        kcountHEpositivedirectionRecosignal6   =     "<<kcountHEpositivedirectionRecosignal6  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEpositivedirectionRecosignal6);
          HEpositivedirectionRecosignal6->SetMarkerStyle(20);
          HEpositivedirectionRecosignal6->SetMarkerSize(0.4);
          HEpositivedirectionRecosignal6->GetYaxis()->SetLabelSize(0.04);
          HEpositivedirectionRecosignal6->SetXTitle("HEpositivedirectionRecosignal6 \b");
          HEpositivedirectionRecosignal6->SetMarkerColor(2);
          HEpositivedirectionRecosignal6->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEpositivedirectionRecosignal6 == 1)
            HEpositivedirectionRecosignal6->SetXTitle("R for HE+ jeta = 18; depth = 6 \b");
          if (kcountHEpositivedirectionRecosignal6 == 2)
            HEpositivedirectionRecosignal6->SetXTitle("R for HE+ jeta = 19; depth = 6 \b");
          if (kcountHEpositivedirectionRecosignal6 == 3)
            HEpositivedirectionRecosignal6->SetXTitle("R for HE+ jeta = 20; depth = 6 \b");
          if (kcountHEpositivedirectionRecosignal6 == 4)
            HEpositivedirectionRecosignal6->SetXTitle("R for HE+ jeta = 21; depth = 6 \b");
          if (kcountHEpositivedirectionRecosignal6 == 5)
            HEpositivedirectionRecosignal6->SetXTitle("R for HE+ jeta = 22; depth = 6 \b");
          if (kcountHEpositivedirectionRecosignal6 == 6)
            HEpositivedirectionRecosignal6->SetXTitle("R for HE+ jeta = 23; depth = 6 \b");
          if (kcountHEpositivedirectionRecosignal6 == 7)
            HEpositivedirectionRecosignal6->SetXTitle("R for HE+ jeta = 24; depth = 6 \b");
          if (kcountHEpositivedirectionRecosignal6 == 8)
            HEpositivedirectionRecosignal6->SetXTitle("R for HE+ jeta = 25; depth = 6 \b");
          if (kcountHEpositivedirectionRecosignal6 == 9)
            HEpositivedirectionRecosignal6->SetXTitle("R for HE+ jeta = 26; depth = 6 \b");
          if (kcountHEpositivedirectionRecosignal6 == 10)
            HEpositivedirectionRecosignal6->SetXTitle("R for HE+ jeta = 27; depth = 6 \b");
          HEpositivedirectionRecosignal6->Draw("Error");
          kcountHEpositivedirectionRecosignal6++;
          if (kcountHEpositivedirectionRecosignal6 > 10)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RrecosignalPositiveDirectionhistD1PhiSymmetryDepth6HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEpositivedirectionRecosignal6)
    delete h2CeffHEpositivedirectionRecosignal6;
  //========================================================================================== 10
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=7
  //cout<<"      1D plot: R vs phi , different eta,  depth=7 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEpositivedirectionRecosignal7 = 1;
  TH1F *h2CeffHEpositivedirectionRecosignal7 = new TH1F("h2CeffHEpositivedirectionRecosignal7", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionRecosignal:
    if (jeta - 41 >= 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=7
      for (int i = 6; i < 7; i++) {
        TH1F *HEpositivedirectionRecosignal7 = (TH1F *)h2CeffHEpositivedirectionRecosignal7->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = arecosignalhe[i][jeta][jphi];
          if (ccc1 != 0.) {
            HEpositivedirectionRecosignal7->Fill(jphi, ccc1);
            ccctest = 1.;  //HEpositivedirectionRecosignal7->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1010       kcountHEpositivedirectionRecosignal7   =     "<<kcountHEpositivedirectionRecosignal7  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEpositivedirectionRecosignal7);
          HEpositivedirectionRecosignal7->SetMarkerStyle(20);
          HEpositivedirectionRecosignal7->SetMarkerSize(0.4);
          HEpositivedirectionRecosignal7->GetYaxis()->SetLabelSize(0.04);
          HEpositivedirectionRecosignal7->SetXTitle("HEpositivedirectionRecosignal7 \b");
          HEpositivedirectionRecosignal7->SetMarkerColor(2);
          HEpositivedirectionRecosignal7->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEpositivedirectionRecosignal7 == 1)
            HEpositivedirectionRecosignal7->SetXTitle("R for HE+ jeta = 25; depth = 7 \b");
          if (kcountHEpositivedirectionRecosignal7 == 2)
            HEpositivedirectionRecosignal7->SetXTitle("R for HE+ jeta = 26; depth = 7 \b");
          if (kcountHEpositivedirectionRecosignal7 == 3)
            HEpositivedirectionRecosignal7->SetXTitle("R for HE+ jeta = 27; depth = 7 \b");
          HEpositivedirectionRecosignal7->Draw("Error");
          kcountHEpositivedirectionRecosignal7++;
          if (kcountHEpositivedirectionRecosignal7 > 3)
            break;  //
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RrecosignalPositiveDirectionhistD1PhiSymmetryDepth7HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEpositivedirectionRecosignal7)
    delete h2CeffHEpositivedirectionRecosignal7;

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //========================================================================================== 1114
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=1
  //cout<<"      1D plot: R vs phi , different eta,  depth=1 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEnegativedirectionRecosignal1 = 1;
  TH1F *h2CeffHEnegativedirectionRecosignal1 = new TH1F("h2CeffHEnegativedirectionRecosignal1", "", nphi, 0., 72.);
  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionRecosignal:
    if (jeta - 41 < 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=1
      for (int i = 0; i < 1; i++) {
        TH1F *HEnegativedirectionRecosignal1 = (TH1F *)h2CeffHEnegativedirectionRecosignal1->Clone("twod1");
        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = arecosignalhe[i][jeta][jphi];
          if (ccc1 != 0.) {
            HEnegativedirectionRecosignal1->Fill(jphi, ccc1);
            ccctest = 1.;  //HEnegativedirectionRecosignal1->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //	  cout<<"444        kcountHEnegativedirectionRecosignal1   =     "<<kcountHEnegativedirectionRecosignal1  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEnegativedirectionRecosignal1);
          HEnegativedirectionRecosignal1->SetMarkerStyle(20);
          HEnegativedirectionRecosignal1->SetMarkerSize(0.4);
          HEnegativedirectionRecosignal1->GetYaxis()->SetLabelSize(0.04);
          HEnegativedirectionRecosignal1->SetXTitle("HEnegativedirectionRecosignal1 \b");
          HEnegativedirectionRecosignal1->SetMarkerColor(2);
          HEnegativedirectionRecosignal1->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEnegativedirectionRecosignal1 == 1)
            HEnegativedirectionRecosignal1->SetXTitle("R for HE- jeta =-29; depth = 1 \b");
          if (kcountHEnegativedirectionRecosignal1 == 2)
            HEnegativedirectionRecosignal1->SetXTitle("R for HE- jeta =-28; depth = 1 \b");
          if (kcountHEnegativedirectionRecosignal1 == 3)
            HEnegativedirectionRecosignal1->SetXTitle("R for HE- jeta =-27; depth = 1 \b");
          if (kcountHEnegativedirectionRecosignal1 == 4)
            HEnegativedirectionRecosignal1->SetXTitle("R for HE- jeta =-26; depth = 1 \b");
          if (kcountHEnegativedirectionRecosignal1 == 5)
            HEnegativedirectionRecosignal1->SetXTitle("R for HE- jeta =-25; depth = 1 \b");
          if (kcountHEnegativedirectionRecosignal1 == 6)
            HEnegativedirectionRecosignal1->SetXTitle("R for HE- jeta =-24; depth = 1 \b");
          if (kcountHEnegativedirectionRecosignal1 == 7)
            HEnegativedirectionRecosignal1->SetXTitle("R for HE- jeta =-23; depth = 1 \b");
          if (kcountHEnegativedirectionRecosignal1 == 8)
            HEnegativedirectionRecosignal1->SetXTitle("R for HE- jeta =-22; depth = 1 \b");
          if (kcountHEnegativedirectionRecosignal1 == 9)
            HEnegativedirectionRecosignal1->SetXTitle("R for HE- jeta =-21; depth = 1 \b");
          if (kcountHEnegativedirectionRecosignal1 == 10)
            HEnegativedirectionRecosignal1->SetXTitle("R for HE- jeta =-20; depth = 1 \b");
          if (kcountHEnegativedirectionRecosignal1 == 11)
            HEnegativedirectionRecosignal1->SetXTitle("R for HE- jeta =-19; depth = 1 \b");
          if (kcountHEnegativedirectionRecosignal1 == 12)
            HEnegativedirectionRecosignal1->SetXTitle("R for HE- jeta =-18; depth = 1 \b");
          HEnegativedirectionRecosignal1->Draw("Error");
          kcountHEnegativedirectionRecosignal1++;
          if (kcountHEnegativedirectionRecosignal1 > 12)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 < 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RrecosignalNegativeDirectionhistD1PhiSymmetryDepth1HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEnegativedirectionRecosignal1)
    delete h2CeffHEnegativedirectionRecosignal1;

  //========================================================================================== 1115
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=2
  //  cout<<"      1D plot: R vs phi , different eta,  depth=2 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEnegativedirectionRecosignal2 = 1;
  TH1F *h2CeffHEnegativedirectionRecosignal2 = new TH1F("h2CeffHEnegativedirectionRecosignal2", "", nphi, 0., 72.);
  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionRecosignal:
    if (jeta - 41 < 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=2
      for (int i = 1; i < 2; i++) {
        TH1F *HEnegativedirectionRecosignal2 = (TH1F *)h2CeffHEnegativedirectionRecosignal2->Clone("twod1");
        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = arecosignalhe[i][jeta][jphi];
          if (ccc1 != 0.) {
            HEnegativedirectionRecosignal2->Fill(jphi, ccc1);
            ccctest = 1.;  //HEnegativedirectionRecosignal2->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"555        kcountHEnegativedirectionRecosignal2   =     "<<kcountHEnegativedirectionRecosignal2  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEnegativedirectionRecosignal2);
          HEnegativedirectionRecosignal2->SetMarkerStyle(20);
          HEnegativedirectionRecosignal2->SetMarkerSize(0.4);
          HEnegativedirectionRecosignal2->GetYaxis()->SetLabelSize(0.04);
          HEnegativedirectionRecosignal2->SetXTitle("HEnegativedirectionRecosignal2 \b");
          HEnegativedirectionRecosignal2->SetMarkerColor(2);
          HEnegativedirectionRecosignal2->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEnegativedirectionRecosignal2 == 1)
            HEnegativedirectionRecosignal2->SetXTitle("R for HE- jeta =-29; depth = 2 \b");
          if (kcountHEnegativedirectionRecosignal2 == 2)
            HEnegativedirectionRecosignal2->SetXTitle("R for HE- jeta =-28; depth = 2 \b");
          if (kcountHEnegativedirectionRecosignal2 == 3)
            HEnegativedirectionRecosignal2->SetXTitle("R for HE- jeta =-27; depth = 2 \b");
          if (kcountHEnegativedirectionRecosignal2 == 4)
            HEnegativedirectionRecosignal2->SetXTitle("R for HE- jeta =-26; depth = 2 \b");
          if (kcountHEnegativedirectionRecosignal2 == 5)
            HEnegativedirectionRecosignal2->SetXTitle("R for HE- jeta =-25; depth = 2 \b");
          if (kcountHEnegativedirectionRecosignal2 == 6)
            HEnegativedirectionRecosignal2->SetXTitle("R for HE- jeta =-24; depth = 2 \b");
          if (kcountHEnegativedirectionRecosignal2 == 7)
            HEnegativedirectionRecosignal2->SetXTitle("R for HE- jeta =-23; depth = 2 \b");
          if (kcountHEnegativedirectionRecosignal2 == 8)
            HEnegativedirectionRecosignal2->SetXTitle("R for HE- jeta =-22; depth = 2 \b");
          if (kcountHEnegativedirectionRecosignal2 == 9)
            HEnegativedirectionRecosignal2->SetXTitle("R for HE- jeta =-21; depth = 2 \b");
          if (kcountHEnegativedirectionRecosignal2 == 10)
            HEnegativedirectionRecosignal2->SetXTitle("R for HE- jeta =-20; depth = 2 \b");
          if (kcountHEnegativedirectionRecosignal2 == 11)
            HEnegativedirectionRecosignal2->SetXTitle("R for HE- jeta =-19; depth = 2 \b");
          if (kcountHEnegativedirectionRecosignal2 == 12)
            HEnegativedirectionRecosignal2->SetXTitle("R for HE- jeta =-18; depth = 2 \b");
          if (kcountHEnegativedirectionRecosignal2 == 13)
            HEnegativedirectionRecosignal2->SetXTitle("R for HE- jeta =-17; depth = 2 \b");
          HEnegativedirectionRecosignal2->Draw("Error");
          kcountHEnegativedirectionRecosignal2++;
          if (kcountHEnegativedirectionRecosignal2 > 13)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 < 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RrecosignalNegativeDirectionhistD1PhiSymmetryDepth2HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEnegativedirectionRecosignal2)
    delete h2CeffHEnegativedirectionRecosignal2;
  //========================================================================================== 1116
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=3
  //cout<<"      1D plot: R vs phi , different eta,  depth=3 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEnegativedirectionRecosignal3 = 1;
  TH1F *h2CeffHEnegativedirectionRecosignal3 = new TH1F("h2CeffHEnegativedirectionRecosignal3", "", nphi, 0., 72.);
  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionRecosignal:
    if (jeta - 41 < 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=3
      for (int i = 2; i < 3; i++) {
        TH1F *HEnegativedirectionRecosignal3 = (TH1F *)h2CeffHEnegativedirectionRecosignal3->Clone("twod1");
        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = arecosignalhe[i][jeta][jphi];
          if (ccc1 != 0.) {
            HEnegativedirectionRecosignal3->Fill(jphi, ccc1);
            ccctest = 1.;  //HEnegativedirectionRecosignal3->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"666        kcountHEnegativedirectionRecosignal3   =     "<<kcountHEnegativedirectionRecosignal3  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEnegativedirectionRecosignal3);
          HEnegativedirectionRecosignal3->SetMarkerStyle(20);
          HEnegativedirectionRecosignal3->SetMarkerSize(0.4);
          HEnegativedirectionRecosignal3->GetYaxis()->SetLabelSize(0.04);
          HEnegativedirectionRecosignal3->SetXTitle("HEnegativedirectionRecosignal3 \b");
          HEnegativedirectionRecosignal3->SetMarkerColor(2);
          HEnegativedirectionRecosignal3->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEnegativedirectionRecosignal3 == 1)
            HEnegativedirectionRecosignal3->SetXTitle("R for HE- jeta =-29; depth = 3 \b");
          if (kcountHEnegativedirectionRecosignal3 == 2)
            HEnegativedirectionRecosignal3->SetXTitle("R for HE- jeta =-28; depth = 3 \b");
          if (kcountHEnegativedirectionRecosignal3 == 3)
            HEnegativedirectionRecosignal3->SetXTitle("R for HE- jeta =-27; depth = 3 \b");
          if (kcountHEnegativedirectionRecosignal3 == 4)
            HEnegativedirectionRecosignal3->SetXTitle("R for HE- jeta =-26; depth = 3 \b");
          if (kcountHEnegativedirectionRecosignal3 == 5)
            HEnegativedirectionRecosignal3->SetXTitle("R for HE- jeta =-25; depth = 3 \b");
          if (kcountHEnegativedirectionRecosignal3 == 6)
            HEnegativedirectionRecosignal3->SetXTitle("R for HE- jeta =-24; depth = 3 \b");
          if (kcountHEnegativedirectionRecosignal3 == 7)
            HEnegativedirectionRecosignal3->SetXTitle("R for HE- jeta =-23; depth = 3 \b");
          if (kcountHEnegativedirectionRecosignal3 == 8)
            HEnegativedirectionRecosignal3->SetXTitle("R for HE- jeta =-22; depth = 3 \b");
          if (kcountHEnegativedirectionRecosignal3 == 9)
            HEnegativedirectionRecosignal3->SetXTitle("R for HE- jeta =-21; depth = 3 \b");
          if (kcountHEnegativedirectionRecosignal3 == 10)
            HEnegativedirectionRecosignal3->SetXTitle("R for HE- jeta =-20; depth = 3 \b");
          if (kcountHEnegativedirectionRecosignal3 == 11)
            HEnegativedirectionRecosignal3->SetXTitle("R for HE- jeta =-19; depth = 3 \b");
          if (kcountHEnegativedirectionRecosignal3 == 12)
            HEnegativedirectionRecosignal3->SetXTitle("R for HE- jeta =-18; depth = 3 \b");
          if (kcountHEnegativedirectionRecosignal3 == 13)
            HEnegativedirectionRecosignal3->SetXTitle("R for HE- jeta =-17; depth = 3 \b");
          HEnegativedirectionRecosignal3->Draw("Error");
          kcountHEnegativedirectionRecosignal3++;
          if (kcountHEnegativedirectionRecosignal3 > 13)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 < 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RrecosignalNegativeDirectionhistD1PhiSymmetryDepth3HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEnegativedirectionRecosignal3)
    delete h2CeffHEnegativedirectionRecosignal3;
  //========================================================================================== 1117
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=4
  //cout<<"      1D plot: R vs phi , different eta,  depth=4 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEnegativedirectionRecosignal4 = 1;
  TH1F *h2CeffHEnegativedirectionRecosignal4 = new TH1F("h2CeffHEnegativedirectionRecosignal4", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionRecosignal:
    if (jeta - 41 < 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=4
      for (int i = 3; i < 4; i++) {
        TH1F *HEnegativedirectionRecosignal4 = (TH1F *)h2CeffHEnegativedirectionRecosignal4->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = arecosignalhe[i][jeta][jphi];
          if (ccc1 != 0.) {
            HEnegativedirectionRecosignal4->Fill(jphi, ccc1);
            ccctest = 1.;  //HEnegativedirectionRecosignal4->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"777        kcountHEnegativedirectionRecosignal4   =     "<<kcountHEnegativedirectionRecosignal4  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEnegativedirectionRecosignal4);
          HEnegativedirectionRecosignal4->SetMarkerStyle(20);
          HEnegativedirectionRecosignal4->SetMarkerSize(0.4);
          HEnegativedirectionRecosignal4->GetYaxis()->SetLabelSize(0.04);
          HEnegativedirectionRecosignal4->SetXTitle("HEnegativedirectionRecosignal4 \b");
          HEnegativedirectionRecosignal4->SetMarkerColor(2);
          HEnegativedirectionRecosignal4->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEnegativedirectionRecosignal4 == 1)
            HEnegativedirectionRecosignal4->SetXTitle("R for HE- jeta =-28; depth = 4 \b");
          if (kcountHEnegativedirectionRecosignal4 == 2)
            HEnegativedirectionRecosignal4->SetXTitle("R for HE- jeta =-27; depth = 4 \b");
          if (kcountHEnegativedirectionRecosignal4 == 3)
            HEnegativedirectionRecosignal4->SetXTitle("R for HE- jeta =-26; depth = 4 \b");
          if (kcountHEnegativedirectionRecosignal4 == 4)
            HEnegativedirectionRecosignal4->SetXTitle("R for HE- jeta =-25; depth = 4 \b");
          if (kcountHEnegativedirectionRecosignal4 == 5)
            HEnegativedirectionRecosignal4->SetXTitle("R for HE- jeta =-24; depth = 4 \b");
          if (kcountHEnegativedirectionRecosignal4 == 6)
            HEnegativedirectionRecosignal4->SetXTitle("R for HE- jeta =-23; depth = 4 \b");
          if (kcountHEnegativedirectionRecosignal4 == 7)
            HEnegativedirectionRecosignal4->SetXTitle("R for HE- jeta =-22; depth = 4 \b");
          if (kcountHEnegativedirectionRecosignal4 == 8)
            HEnegativedirectionRecosignal4->SetXTitle("R for HE- jeta =-21; depth = 4 \b");
          if (kcountHEnegativedirectionRecosignal4 == 9)
            HEnegativedirectionRecosignal4->SetXTitle("R for HE- jeta =-20; depth = 4 \b");
          if (kcountHEnegativedirectionRecosignal4 == 10)
            HEnegativedirectionRecosignal4->SetXTitle("R for HE- jeta =-19; depth = 4 \b");
          if (kcountHEnegativedirectionRecosignal4 == 11)
            HEnegativedirectionRecosignal4->SetXTitle("R for HE- jeta =-18; depth = 4 \b");
          if (kcountHEnegativedirectionRecosignal4 == 12)
            HEnegativedirectionRecosignal4->SetXTitle("R for HE- jeta =-16; depth = 4 \b");
          HEnegativedirectionRecosignal4->Draw("Error");
          kcountHEnegativedirectionRecosignal4++;
          if (kcountHEnegativedirectionRecosignal4 > 12)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 < 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RrecosignalNegativeDirectionhistD1PhiSymmetryDepth4HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEnegativedirectionRecosignal4)
    delete h2CeffHEnegativedirectionRecosignal4;
  //========================================================================================== 1118
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=5
  //cout<<"      1D plot: R vs phi , different eta,  depth=5 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEnegativedirectionRecosignal5 = 1;
  TH1F *h2CeffHEnegativedirectionRecosignal5 = new TH1F("h2CeffHEnegativedirectionRecosignal5", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionRecosignal:
    if (jeta - 41 < 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=5
      for (int i = 4; i < 5; i++) {
        TH1F *HEnegativedirectionRecosignal5 = (TH1F *)h2CeffHEnegativedirectionRecosignal5->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          //	       cout<<"888  initial      kcountHEnegativedirectionRecosignal5   =     "<<kcountHEnegativedirectionRecosignal5  <<"   jeta-41=     "<< jeta-41 <<"   jphi=     "<< jphi <<"   arecosignalhe[i][jeta][jphi]=     "<< arecosignalhe[i][jeta][jphi] <<"  depth=     "<< i <<endl;

          double ccc1 = arecosignalhe[i][jeta][jphi];
          if (ccc1 != 0.) {
            HEnegativedirectionRecosignal5->Fill(jphi, ccc1);
            ccctest = 1.;  //HEnegativedirectionRecosignal5->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"888        kcountHEnegativedirectionRecosignal5   =     "<<kcountHEnegativedirectionRecosignal5  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEnegativedirectionRecosignal5);
          HEnegativedirectionRecosignal5->SetMarkerStyle(20);
          HEnegativedirectionRecosignal5->SetMarkerSize(0.4);
          HEnegativedirectionRecosignal5->GetYaxis()->SetLabelSize(0.04);
          HEnegativedirectionRecosignal5->SetXTitle("HEnegativedirectionRecosignal5 \b");
          HEnegativedirectionRecosignal5->SetMarkerColor(2);
          HEnegativedirectionRecosignal5->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEnegativedirectionRecosignal5 == 1)
            HEnegativedirectionRecosignal5->SetXTitle("R for HE- jeta =-28; depth = 5 \b");
          if (kcountHEnegativedirectionRecosignal5 == 2)
            HEnegativedirectionRecosignal5->SetXTitle("R for HE- jeta =-27; depth = 5 \b");
          if (kcountHEnegativedirectionRecosignal5 == 3)
            HEnegativedirectionRecosignal5->SetXTitle("R for HE- jeta =-26; depth = 5 \b");
          if (kcountHEnegativedirectionRecosignal5 == 4)
            HEnegativedirectionRecosignal5->SetXTitle("R for HE- jeta =-25; depth = 5 \b");
          if (kcountHEnegativedirectionRecosignal5 == 5)
            HEnegativedirectionRecosignal5->SetXTitle("R for HE- jeta =-24; depth = 5 \b");
          if (kcountHEnegativedirectionRecosignal5 == 6)
            HEnegativedirectionRecosignal5->SetXTitle("R for HE- jeta =-23; depth = 5 \b");
          if (kcountHEnegativedirectionRecosignal5 == 7)
            HEnegativedirectionRecosignal5->SetXTitle("R for HE- jeta =-22; depth = 5 \b");
          if (kcountHEnegativedirectionRecosignal5 == 8)
            HEnegativedirectionRecosignal5->SetXTitle("R for HE- jeta =-21; depth = 5 \b");
          if (kcountHEnegativedirectionRecosignal5 == 9)
            HEnegativedirectionRecosignal5->SetXTitle("R for HE- jeta =-20; depth = 5 \b");
          if (kcountHEnegativedirectionRecosignal5 == 10)
            HEnegativedirectionRecosignal5->SetXTitle("R for HE- jeta =-19; depth = 5 \b");
          if (kcountHEnegativedirectionRecosignal5 == 11)
            HEnegativedirectionRecosignal5->SetXTitle("R for HE- jeta =-18; depth = 5 \b");
          HEnegativedirectionRecosignal5->Draw("Error");
          kcountHEnegativedirectionRecosignal5++;
          if (kcountHEnegativedirectionRecosignal5 > 11)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 < 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RrecosignalNegativeDirectionhistD1PhiSymmetryDepth5HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEnegativedirectionRecosignal5)
    delete h2CeffHEnegativedirectionRecosignal5;
  //========================================================================================== 1119
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=6
  //cout<<"      1D plot: R vs phi , different eta,  depth=6 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEnegativedirectionRecosignal6 = 1;
  TH1F *h2CeffHEnegativedirectionRecosignal6 = new TH1F("h2CeffHEnegativedirectionRecosignal6", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionRecosignal:
    if (jeta - 41 < 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=6
      for (int i = 5; i < 6; i++) {
        TH1F *HEnegativedirectionRecosignal6 = (TH1F *)h2CeffHEnegativedirectionRecosignal6->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = arecosignalhe[i][jeta][jphi];
          if (ccc1 != 0.) {
            HEnegativedirectionRecosignal6->Fill(jphi, ccc1);
            ccctest = 1.;  //HEnegativedirectionRecosignal6->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"999        kcountHEnegativedirectionRecosignal6   =     "<<kcountHEnegativedirectionRecosignal6  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEnegativedirectionRecosignal6);
          HEnegativedirectionRecosignal6->SetMarkerStyle(20);
          HEnegativedirectionRecosignal6->SetMarkerSize(0.4);
          HEnegativedirectionRecosignal6->GetYaxis()->SetLabelSize(0.04);
          HEnegativedirectionRecosignal6->SetXTitle("HEnegativedirectionRecosignal6 \b");
          HEnegativedirectionRecosignal6->SetMarkerColor(2);
          HEnegativedirectionRecosignal6->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEnegativedirectionRecosignal6 == 1)
            HEnegativedirectionRecosignal6->SetXTitle("R for HE- jeta =-28; depth = 6 \b");
          if (kcountHEnegativedirectionRecosignal6 == 2)
            HEnegativedirectionRecosignal6->SetXTitle("R for HE- jeta =-27; depth = 6 \b");
          if (kcountHEnegativedirectionRecosignal6 == 3)
            HEnegativedirectionRecosignal6->SetXTitle("R for HE- jeta =-26; depth = 6 \b");
          if (kcountHEnegativedirectionRecosignal6 == 4)
            HEnegativedirectionRecosignal6->SetXTitle("R for HE- jeta =-25; depth = 6 \b");
          if (kcountHEnegativedirectionRecosignal6 == 5)
            HEnegativedirectionRecosignal6->SetXTitle("R for HE- jeta =-24; depth = 6 \b");
          if (kcountHEnegativedirectionRecosignal6 == 6)
            HEnegativedirectionRecosignal6->SetXTitle("R for HE- jeta =-23; depth = 6 \b");
          if (kcountHEnegativedirectionRecosignal6 == 7)
            HEnegativedirectionRecosignal6->SetXTitle("R for HE- jeta =-22; depth = 6 \b");
          if (kcountHEnegativedirectionRecosignal6 == 8)
            HEnegativedirectionRecosignal6->SetXTitle("R for HE- jeta =-21; depth = 6 \b");
          if (kcountHEnegativedirectionRecosignal6 == 9)
            HEnegativedirectionRecosignal6->SetXTitle("R for HE- jeta =-20; depth = 6 \b");
          if (kcountHEnegativedirectionRecosignal6 == 10)
            HEnegativedirectionRecosignal6->SetXTitle("R for HE- jeta =-19; depth = 6 \b");
          HEnegativedirectionRecosignal6->Draw("Error");
          kcountHEnegativedirectionRecosignal6++;
          if (kcountHEnegativedirectionRecosignal6 > 10)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 < 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RrecosignalNegativeDirectionhistD1PhiSymmetryDepth6HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEnegativedirectionRecosignal6)
    delete h2CeffHEnegativedirectionRecosignal6;
  //========================================================================================== 11110
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=7
  //cout<<"      1D plot: R vs phi , different eta,  depth=7 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEnegativedirectionRecosignal7 = 1;
  TH1F *h2CeffHEnegativedirectionRecosignal7 = new TH1F("h2CeffHEnegativedirectionRecosignal7", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionRecosignal:
    if (jeta - 41 < 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=7
      for (int i = 6; i < 7; i++) {
        TH1F *HEnegativedirectionRecosignal7 = (TH1F *)h2CeffHEnegativedirectionRecosignal7->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = arecosignalhe[i][jeta][jphi];
          if (ccc1 != 0.) {
            HEnegativedirectionRecosignal7->Fill(jphi, ccc1);
            ccctest = 1.;  //HEnegativedirectionRecosignal7->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1010       kcountHEnegativedirectionRecosignal7   =     "<<kcountHEnegativedirectionRecosignal7  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEnegativedirectionRecosignal7);
          HEnegativedirectionRecosignal7->SetMarkerStyle(20);
          HEnegativedirectionRecosignal7->SetMarkerSize(0.4);
          HEnegativedirectionRecosignal7->GetYaxis()->SetLabelSize(0.04);
          HEnegativedirectionRecosignal7->SetXTitle("HEnegativedirectionRecosignal7 \b");
          HEnegativedirectionRecosignal7->SetMarkerColor(2);
          HEnegativedirectionRecosignal7->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEnegativedirectionRecosignal7 == 1)
            HEnegativedirectionRecosignal7->SetXTitle("R for HE- jeta =-28; depth = 7 \b");
          if (kcountHEnegativedirectionRecosignal7 == 2)
            HEnegativedirectionRecosignal7->SetXTitle("R for HE- jeta =-27; depth = 7 \b");
          if (kcountHEnegativedirectionRecosignal7 == 3)
            HEnegativedirectionRecosignal7->SetXTitle("R for HE- jeta =-26; depth = 7 \b");
          HEnegativedirectionRecosignal7->Draw("Error");
          kcountHEnegativedirectionRecosignal7++;
          if (kcountHEnegativedirectionRecosignal7 > 3)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 < 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RrecosignalNegativeDirectionhistD1PhiSymmetryDepth7HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEnegativedirectionRecosignal7)
    delete h2CeffHEnegativedirectionRecosignal7;

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  //                            DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD:

  //cout<<"    Start Vaiance: preparation  *****" <<endl;
  TH2F *recosignalVariance1HE1 = (TH2F *)dir->FindObjectAny("h_recSignalEnergy2_HE1");
  TH2F *recosignalVariance0HE1 = (TH2F *)dir->FindObjectAny("h_recSignalEnergy0_HE1");
  TH2F *recosignalVarianceHE1 = (TH2F *)recosignalVariance1HE1->Clone("recosignalVarianceHE1");
  recosignalVarianceHE1->Divide(recosignalVariance1HE1, recosignalVariance0HE1, 1, 1, "B");
  TH2F *recosignalVariance1HE2 = (TH2F *)dir->FindObjectAny("h_recSignalEnergy2_HE2");
  TH2F *recosignalVariance0HE2 = (TH2F *)dir->FindObjectAny("h_recSignalEnergy0_HE2");
  TH2F *recosignalVarianceHE2 = (TH2F *)recosignalVariance1HE2->Clone("recosignalVarianceHE2");
  recosignalVarianceHE2->Divide(recosignalVariance1HE2, recosignalVariance0HE2, 1, 1, "B");
  TH2F *recosignalVariance1HE3 = (TH2F *)dir->FindObjectAny("h_recSignalEnergy2_HE3");
  TH2F *recosignalVariance0HE3 = (TH2F *)dir->FindObjectAny("h_recSignalEnergy0_HE3");
  TH2F *recosignalVarianceHE3 = (TH2F *)recosignalVariance1HE3->Clone("recosignalVarianceHE3");
  recosignalVarianceHE3->Divide(recosignalVariance1HE3, recosignalVariance0HE3, 1, 1, "B");
  TH2F *recosignalVariance1HE4 = (TH2F *)dir->FindObjectAny("h_recSignalEnergy2_HE4");
  TH2F *recosignalVariance0HE4 = (TH2F *)dir->FindObjectAny("h_recSignalEnergy0_HE4");
  TH2F *recosignalVarianceHE4 = (TH2F *)recosignalVariance1HE4->Clone("recosignalVarianceHE4");
  recosignalVarianceHE4->Divide(recosignalVariance1HE4, recosignalVariance0HE4, 1, 1, "B");
  TH2F *recosignalVariance1HE5 = (TH2F *)dir->FindObjectAny("h_recSignalEnergy2_HE5");
  TH2F *recosignalVariance0HE5 = (TH2F *)dir->FindObjectAny("h_recSignalEnergy0_HE5");
  TH2F *recosignalVarianceHE5 = (TH2F *)recosignalVariance1HE5->Clone("recosignalVarianceHE5");
  recosignalVarianceHE5->Divide(recosignalVariance1HE5, recosignalVariance0HE5, 1, 1, "B");
  TH2F *recosignalVariance1HE6 = (TH2F *)dir->FindObjectAny("h_recSignalEnergy2_HE6");
  TH2F *recosignalVariance0HE6 = (TH2F *)dir->FindObjectAny("h_recSignalEnergy0_HE6");
  TH2F *recosignalVarianceHE6 = (TH2F *)recosignalVariance1HE6->Clone("recosignalVarianceHE6");
  recosignalVarianceHE6->Divide(recosignalVariance1HE6, recosignalVariance0HE6, 1, 1, "B");
  TH2F *recosignalVariance1HE7 = (TH2F *)dir->FindObjectAny("h_recSignalEnergy2_HE7");
  TH2F *recosignalVariance0HE7 = (TH2F *)dir->FindObjectAny("h_recSignalEnergy0_HE7");
  TH2F *recosignalVarianceHE7 = (TH2F *)recosignalVariance1HE7->Clone("recosignalVarianceHE7");
  recosignalVarianceHE7->Divide(recosignalVariance1HE7, recosignalVariance0HE7, 1, 1, "B");
  //cout<<"      Vaiance: preparation DONE *****" <<endl;
  //====================================================================== put Vaiance=Dispersia = Sig**2=<R**2> - (<R>)**2 into massive recosignalvariancehe
  //                                                                                           = sum(R*R)/N - (sum(R)/N)**2
  for (int jeta = 0; jeta < njeta; jeta++) {
    //preparation for PHI normalization:
    double sumrecosignalHE0 = 0;
    int nsumrecosignalHE0 = 0;
    double sumrecosignalHE1 = 0;
    int nsumrecosignalHE1 = 0;
    double sumrecosignalHE2 = 0;
    int nsumrecosignalHE2 = 0;
    double sumrecosignalHE3 = 0;
    int nsumrecosignalHE3 = 0;
    double sumrecosignalHE4 = 0;
    int nsumrecosignalHE4 = 0;
    double sumrecosignalHE5 = 0;
    int nsumrecosignalHE5 = 0;
    double sumrecosignalHE6 = 0;
    int nsumrecosignalHE6 = 0;
    for (int jphi = 0; jphi < njphi; jphi++) {
      recosignalvariancehe[0][jeta][jphi] = recosignalVarianceHE1->GetBinContent(jeta + 1, jphi + 1);
      recosignalvariancehe[1][jeta][jphi] = recosignalVarianceHE2->GetBinContent(jeta + 1, jphi + 1);
      recosignalvariancehe[2][jeta][jphi] = recosignalVarianceHE3->GetBinContent(jeta + 1, jphi + 1);
      recosignalvariancehe[3][jeta][jphi] = recosignalVarianceHE4->GetBinContent(jeta + 1, jphi + 1);
      recosignalvariancehe[4][jeta][jphi] = recosignalVarianceHE5->GetBinContent(jeta + 1, jphi + 1);
      recosignalvariancehe[5][jeta][jphi] = recosignalVarianceHE6->GetBinContent(jeta + 1, jphi + 1);
      recosignalvariancehe[6][jeta][jphi] = recosignalVarianceHE7->GetBinContent(jeta + 1, jphi + 1);
      if (recosignalvariancehe[0][jeta][jphi] > 0.) {
        sumrecosignalHE0 += recosignalvariancehe[0][jeta][jphi];
        ++nsumrecosignalHE0;
      }
      if (recosignalvariancehe[1][jeta][jphi] > 0.) {
        sumrecosignalHE1 += recosignalvariancehe[1][jeta][jphi];
        ++nsumrecosignalHE1;
      }
      if (recosignalvariancehe[2][jeta][jphi] > 0.) {
        sumrecosignalHE2 += recosignalvariancehe[2][jeta][jphi];
        ++nsumrecosignalHE2;
      }
      if (recosignalvariancehe[3][jeta][jphi] > 0.) {
        sumrecosignalHE3 += recosignalvariancehe[3][jeta][jphi];
        ++nsumrecosignalHE3;
      }
      if (recosignalvariancehe[4][jeta][jphi] > 0.) {
        sumrecosignalHE4 += recosignalvariancehe[4][jeta][jphi];
        ++nsumrecosignalHE4;
      }
      if (recosignalvariancehe[5][jeta][jphi] > 0.) {
        sumrecosignalHE5 += recosignalvariancehe[5][jeta][jphi];
        ++nsumrecosignalHE5;
      }
      if (recosignalvariancehe[6][jeta][jphi] > 0.) {
        sumrecosignalHE6 += recosignalvariancehe[6][jeta][jphi];
        ++nsumrecosignalHE6;
      }
    }  // phi
    // PHI normalization :
    for (int jphi = 0; jphi < njphi; jphi++) {
      if (recosignalvariancehe[0][jeta][jphi] > 0.)
        recosignalvariancehe[0][jeta][jphi] /= (sumrecosignalHE0 / nsumrecosignalHE0);
      if (recosignalvariancehe[1][jeta][jphi] > 0.)
        recosignalvariancehe[1][jeta][jphi] /= (sumrecosignalHE1 / nsumrecosignalHE1);
      if (recosignalvariancehe[2][jeta][jphi] > 0.)
        recosignalvariancehe[2][jeta][jphi] /= (sumrecosignalHE2 / nsumrecosignalHE2);
      if (recosignalvariancehe[3][jeta][jphi] > 0.)
        recosignalvariancehe[3][jeta][jphi] /= (sumrecosignalHE3 / nsumrecosignalHE3);
      if (recosignalvariancehe[4][jeta][jphi] > 0.)
        recosignalvariancehe[4][jeta][jphi] /= (sumrecosignalHE4 / nsumrecosignalHE4);
      if (recosignalvariancehe[5][jeta][jphi] > 0.)
        recosignalvariancehe[5][jeta][jphi] /= (sumrecosignalHE5 / nsumrecosignalHE5);
      if (recosignalvariancehe[6][jeta][jphi] > 0.)
        recosignalvariancehe[6][jeta][jphi] /= (sumrecosignalHE6 / nsumrecosignalHE6);
    }  // phi
    //       recosignalvariancehe (D)           = sum(R*R)/N - (sum(R)/N)**2
    for (int jphi = 0; jphi < njphi; jphi++) {
      //	   cout<<"12 12 12   jeta=     "<< jeta <<"   jphi   =     "<<jphi  <<endl;
      recosignalvariancehe[0][jeta][jphi] -= arecosignalhe[0][jeta][jphi] * arecosignalhe[0][jeta][jphi];
      recosignalvariancehe[0][jeta][jphi] = fabs(recosignalvariancehe[0][jeta][jphi]);
      recosignalvariancehe[1][jeta][jphi] -= arecosignalhe[1][jeta][jphi] * arecosignalhe[1][jeta][jphi];
      recosignalvariancehe[1][jeta][jphi] = fabs(recosignalvariancehe[1][jeta][jphi]);
      recosignalvariancehe[2][jeta][jphi] -= arecosignalhe[2][jeta][jphi] * arecosignalhe[2][jeta][jphi];
      recosignalvariancehe[2][jeta][jphi] = fabs(recosignalvariancehe[2][jeta][jphi]);
      recosignalvariancehe[3][jeta][jphi] -= arecosignalhe[3][jeta][jphi] * arecosignalhe[3][jeta][jphi];
      recosignalvariancehe[3][jeta][jphi] = fabs(recosignalvariancehe[3][jeta][jphi]);
      recosignalvariancehe[4][jeta][jphi] -= arecosignalhe[4][jeta][jphi] * arecosignalhe[4][jeta][jphi];
      recosignalvariancehe[4][jeta][jphi] = fabs(recosignalvariancehe[4][jeta][jphi]);
      recosignalvariancehe[5][jeta][jphi] -= arecosignalhe[5][jeta][jphi] * arecosignalhe[5][jeta][jphi];
      recosignalvariancehe[5][jeta][jphi] = fabs(recosignalvariancehe[5][jeta][jphi]);
      recosignalvariancehe[6][jeta][jphi] -= arecosignalhe[6][jeta][jphi] * arecosignalhe[6][jeta][jphi];
      recosignalvariancehe[6][jeta][jphi] = fabs(recosignalvariancehe[6][jeta][jphi]);
    }
  }
  //cout<<"      Vaiance: DONE*****" <<endl;
  //------------------------  2D-eta/phi-plot: D, averaged over depthes
  //======================================================================
  //======================================================================
  //cout<<"      R2D-eta/phi-plot: D, averaged over depthes *****" <<endl;
  c1x1->Clear();
  /////////////////
  c1x0->Divide(1, 1);
  c1x0->cd(1);
  TH2F *DefzDrecosignalHE42D = new TH2F("DefzDrecosignalHE42D", "", neta, -41., 41., nphi, 0., 72.);
  TH2F *DefzDrecosignalHE42D0 = new TH2F("DefzDrecosignalHE42D0", "", neta, -41., 41., nphi, 0., 72.);
  TH2F *DefzDrecosignalHE42DF = (TH2F *)DefzDrecosignalHE42D0->Clone("DefzDrecosignalHE42DF");
  for (int i = 0; i < ndepth; i++) {
    for (int jeta = 0; jeta < neta; jeta++) {
      for (int jphi = 0; jphi < nphi; jphi++) {
        double ccc1 = recosignalvariancehe[i][jeta][jphi];
        int k2plot = jeta - 41;
        int kkk = k2plot;  //if(k2plot >0   kkk=k2plot+1; //-41 +41 !=0
        if (arecosignalhe[i][jeta][jphi] > 0.) {
          DefzDrecosignalHE42D->Fill(kkk, jphi, ccc1);
          DefzDrecosignalHE42D0->Fill(kkk, jphi, 1.);
        }
      }
    }
  }
  DefzDrecosignalHE42DF->Divide(DefzDrecosignalHE42D, DefzDrecosignalHE42D0, 1, 1, "B");  // average A
  //    DefzDrecosignalHE1->Sumw2();
  gPad->SetGridy();
  gPad->SetGridx();  //      gPad->SetLogz();
  DefzDrecosignalHE42DF->SetMarkerStyle(20);
  DefzDrecosignalHE42DF->SetMarkerSize(0.4);
  DefzDrecosignalHE42DF->GetZaxis()->SetLabelSize(0.08);
  DefzDrecosignalHE42DF->SetXTitle("<D>_depth       #eta  \b");
  DefzDrecosignalHE42DF->SetYTitle("      #phi \b");
  DefzDrecosignalHE42DF->SetZTitle("<D>_depth \b");
  DefzDrecosignalHE42DF->SetMarkerColor(2);
  DefzDrecosignalHE42DF->SetLineColor(
      0);  //      DefzDrecosignalHE42DF->SetMaximum(1.000);  //      DefzDrecosignalHE42DF->SetMinimum(1.0);
  DefzDrecosignalHE42DF->Draw("COLZ");
  /////////////////
  c1x0->Update();
  c1x0->Print("DrecosignalGeneralD2PhiSymmetryHE.png");
  c1x0->Clear();
  // clean-up
  if (DefzDrecosignalHE42D)
    delete DefzDrecosignalHE42D;
  if (DefzDrecosignalHE42D0)
    delete DefzDrecosignalHE42D0;
  if (DefzDrecosignalHE42DF)
    delete DefzDrecosignalHE42DF;
  //====================================================================== 1D plot: D vs phi , averaged over depthes & eta
  //======================================================================
  //cout<<"      1D plot: D vs phi , averaged over depthes & eta *****" <<endl;
  c1x1->Clear();
  /////////////////
  c1x1->Divide(1, 1);
  c1x1->cd(1);
  TH1F *DefzDrecosignalHE41D = new TH1F("DefzDrecosignalHE41D", "", nphi, 0., 72.);
  TH1F *DefzDrecosignalHE41D0 = new TH1F("DefzDrecosignalHE41D0", "", nphi, 0., 72.);
  TH1F *DefzDrecosignalHE41DF = (TH1F *)DefzDrecosignalHE41D0->Clone("DefzDrecosignalHE41DF");

  for (int jphi = 0; jphi < nphi; jphi++) {
    for (int jeta = 0; jeta < neta; jeta++) {
      for (int i = 0; i < ndepth; i++) {
        double ccc1 = recosignalvariancehe[i][jeta][jphi];
        if (arecosignalhe[i][jeta][jphi] > 0.) {
          DefzDrecosignalHE41D->Fill(jphi, ccc1);
          DefzDrecosignalHE41D0->Fill(jphi, 1.);
        }
      }
    }
  }
  //     DefzDrecosignalHE41D->Sumw2();DefzDrecosignalHE41D0->Sumw2();

  DefzDrecosignalHE41DF->Divide(
      DefzDrecosignalHE41D, DefzDrecosignalHE41D0, 1, 1, "B");  // R averaged over depthes & eta
  DefzDrecosignalHE41D0->Sumw2();
  //    for (int jphi=1;jphi<73;jphi++) {DefzDrecosignalHE41DF->SetBinError(jphi,0.01);}
  gPad->SetGridy();
  gPad->SetGridx();  //      gPad->SetLogz();
  DefzDrecosignalHE41DF->SetMarkerStyle(20);
  DefzDrecosignalHE41DF->SetMarkerSize(1.4);
  DefzDrecosignalHE41DF->GetZaxis()->SetLabelSize(0.08);
  DefzDrecosignalHE41DF->SetXTitle("#phi  \b");
  DefzDrecosignalHE41DF->SetYTitle("  <D> \b");
  DefzDrecosignalHE41DF->SetZTitle("<D>_PHI  - AllDepthes \b");
  DefzDrecosignalHE41DF->SetMarkerColor(4);
  DefzDrecosignalHE41DF->SetLineColor(
      4);  // DefzDrecosignalHE41DF->SetMinimum(0.8);     DefzDrecosignalHE41DF->SetMinimum(-0.015);
  DefzDrecosignalHE41DF->Draw("Error");
  /////////////////
  c1x1->Update();
  c1x1->Print("DrecosignalGeneralD1PhiSymmetryHE.png");
  c1x1->Clear();
  // clean-up
  if (DefzDrecosignalHE41D)
    delete DefzDrecosignalHE41D;
  if (DefzDrecosignalHE41D0)
    delete DefzDrecosignalHE41D0;
  if (DefzDrecosignalHE41DF)
    delete DefzDrecosignalHE41DF;
  //========================================================================================== 14
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=1
  //cout<<"      1D plot: D vs phi , different eta,  depth=1 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEpositivedirectionRecosignalD1 = 1;
  TH1F *h2CeffHEpositivedirectionRecosignalD1 = new TH1F("h2CeffHEpositivedirectionRecosignalD1", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionRecosignalD:
    if (jeta - 41 >= 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=1
      for (int i = 0; i < 1; i++) {
        TH1F *HEpositivedirectionRecosignalD1 = (TH1F *)h2CeffHEpositivedirectionRecosignalD1->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = recosignalvariancehe[i][jeta][jphi];
          if (arecosignalhe[i][jeta][jphi] > 0.) {
            HEpositivedirectionRecosignalD1->Fill(jphi, ccc1);
            ccctest = 1.;  //HEpositivedirectionRecosignalD1->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1414       kcountHEpositivedirectionRecosignalD1   =     "<<kcountHEpositivedirectionRecosignalD1  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEpositivedirectionRecosignalD1);
          HEpositivedirectionRecosignalD1->SetMarkerStyle(20);
          HEpositivedirectionRecosignalD1->SetMarkerSize(0.4);
          HEpositivedirectionRecosignalD1->GetYaxis()->SetLabelSize(0.04);
          HEpositivedirectionRecosignalD1->SetXTitle("HEpositivedirectionRecosignalD1 \b");
          HEpositivedirectionRecosignalD1->SetMarkerColor(2);
          HEpositivedirectionRecosignalD1->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEpositivedirectionRecosignalD1 == 1)
            HEpositivedirectionRecosignalD1->SetXTitle("D for HE+ jeta = 17; depth = 1 \b");
          if (kcountHEpositivedirectionRecosignalD1 == 2)
            HEpositivedirectionRecosignalD1->SetXTitle("D for HE+ jeta = 18; depth = 1 \b");
          if (kcountHEpositivedirectionRecosignalD1 == 3)
            HEpositivedirectionRecosignalD1->SetXTitle("D for HE+ jeta = 19; depth = 1 \b");
          if (kcountHEpositivedirectionRecosignalD1 == 4)
            HEpositivedirectionRecosignalD1->SetXTitle("D for HE+ jeta = 20; depth = 1 \b");
          if (kcountHEpositivedirectionRecosignalD1 == 5)
            HEpositivedirectionRecosignalD1->SetXTitle("D for HE+ jeta = 21; depth = 1 \b");
          if (kcountHEpositivedirectionRecosignalD1 == 6)
            HEpositivedirectionRecosignalD1->SetXTitle("D for HE+ jeta = 22; depth = 1 \b");
          if (kcountHEpositivedirectionRecosignalD1 == 7)
            HEpositivedirectionRecosignalD1->SetXTitle("D for HE+ jeta = 23; depth = 1 \b");
          if (kcountHEpositivedirectionRecosignalD1 == 8)
            HEpositivedirectionRecosignalD1->SetXTitle("D for HE+ jeta = 24; depth = 1 \b");
          if (kcountHEpositivedirectionRecosignalD1 == 9)
            HEpositivedirectionRecosignalD1->SetXTitle("D for HE+ jeta = 25; depth = 1 \b");
          if (kcountHEpositivedirectionRecosignalD1 == 10)
            HEpositivedirectionRecosignalD1->SetXTitle("D for HE+ jeta = 26; depth = 1 \b");
          if (kcountHEpositivedirectionRecosignalD1 == 11)
            HEpositivedirectionRecosignalD1->SetXTitle("D for HE+ jeta = 27; depth = 1 \b");
          if (kcountHEpositivedirectionRecosignalD1 == 12)
            HEpositivedirectionRecosignalD1->SetXTitle("D for HE+ jeta = 28; depth = 1 \b");
          HEpositivedirectionRecosignalD1->Draw("Error");
          kcountHEpositivedirectionRecosignalD1++;
          if (kcountHEpositivedirectionRecosignalD1 > 12)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DrecosignalPositiveDirectionhistD1PhiSymmetryDepth1HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEpositivedirectionRecosignalD1)
    delete h2CeffHEpositivedirectionRecosignalD1;
  //========================================================================================== 15
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=2
  //cout<<"      1D plot: D vs phi , different eta,  depth=2 *****" <<endl;
  c3x5->Clear();
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEpositivedirectionRecosignalD2 = 1;
  TH1F *h2CeffHEpositivedirectionRecosignalD2 = new TH1F("h2CeffHEpositivedirectionRecosignalD2", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionRecosignalD:
    if (jeta - 41 >= 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=2
      for (int i = 1; i < 2; i++) {
        TH1F *HEpositivedirectionRecosignalD2 = (TH1F *)h2CeffHEpositivedirectionRecosignalD2->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = recosignalvariancehe[i][jeta][jphi];
          if (arecosignalhe[i][jeta][jphi] > 0.) {
            HEpositivedirectionRecosignalD2->Fill(jphi, ccc1);
            ccctest = 1.;  //HEpositivedirectionRecosignalD2->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1515       kcountHEpositivedirectionRecosignalD2   =     "<<kcountHEpositivedirectionRecosignalD2  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEpositivedirectionRecosignalD2);
          HEpositivedirectionRecosignalD2->SetMarkerStyle(20);
          HEpositivedirectionRecosignalD2->SetMarkerSize(0.4);
          HEpositivedirectionRecosignalD2->GetYaxis()->SetLabelSize(0.04);
          HEpositivedirectionRecosignalD2->SetXTitle("HEpositivedirectionRecosignalD2 \b");
          HEpositivedirectionRecosignalD2->SetMarkerColor(2);
          HEpositivedirectionRecosignalD2->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEpositivedirectionRecosignalD2 == 1)
            HEpositivedirectionRecosignalD2->SetXTitle("D for HE+ jeta = 16; depth = 2 \b");
          if (kcountHEpositivedirectionRecosignalD2 == 2)
            HEpositivedirectionRecosignalD2->SetXTitle("D for HE+ jeta = 17; depth = 2 \b");
          if (kcountHEpositivedirectionRecosignalD2 == 3)
            HEpositivedirectionRecosignalD2->SetXTitle("D for HE+ jeta = 18; depth = 2 \b");
          if (kcountHEpositivedirectionRecosignalD2 == 4)
            HEpositivedirectionRecosignalD2->SetXTitle("D for HE+ jeta = 19; depth = 2 \b");
          if (kcountHEpositivedirectionRecosignalD2 == 5)
            HEpositivedirectionRecosignalD2->SetXTitle("D for HE+ jeta = 20; depth = 2 \b");
          if (kcountHEpositivedirectionRecosignalD2 == 6)
            HEpositivedirectionRecosignalD2->SetXTitle("D for HE+ jeta = 21; depth = 2 \b");
          if (kcountHEpositivedirectionRecosignalD2 == 7)
            HEpositivedirectionRecosignalD2->SetXTitle("D for HE+ jeta = 22; depth = 2 \b");
          if (kcountHEpositivedirectionRecosignalD2 == 8)
            HEpositivedirectionRecosignalD2->SetXTitle("D for HE+ jeta = 23; depth = 2 \b");
          if (kcountHEpositivedirectionRecosignalD2 == 9)
            HEpositivedirectionRecosignalD2->SetXTitle("D for HE+ jeta = 24; depth = 2 \b");
          if (kcountHEpositivedirectionRecosignalD2 == 10)
            HEpositivedirectionRecosignalD2->SetXTitle("D for HE+ jeta = 25; depth = 2 \b");
          if (kcountHEpositivedirectionRecosignalD2 == 11)
            HEpositivedirectionRecosignalD2->SetXTitle("D for HE+ jeta = 26; depth = 2 \b");
          if (kcountHEpositivedirectionRecosignalD2 == 12)
            HEpositivedirectionRecosignalD2->SetXTitle("D for HE+ jeta = 27; depth = 2 \b");
          if (kcountHEpositivedirectionRecosignalD2 == 13)
            HEpositivedirectionRecosignalD2->SetXTitle("D for HE+ jeta = 28; depth = 2 \b");
          HEpositivedirectionRecosignalD2->Draw("Error");
          kcountHEpositivedirectionRecosignalD2++;
          if (kcountHEpositivedirectionRecosignalD2 > 13)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DrecosignalPositiveDirectionhistD1PhiSymmetryDepth2HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEpositivedirectionRecosignalD2)
    delete h2CeffHEpositivedirectionRecosignalD2;
  //========================================================================================== 16
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=3
  //cout<<"      1D plot: D vs phi , different eta,  depth=3 *****" <<endl;
  c3x5->Clear();
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEpositivedirectionRecosignalD3 = 1;
  TH1F *h2CeffHEpositivedirectionRecosignalD3 = new TH1F("h2CeffHEpositivedirectionRecosignalD3", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionRecosignalD:
    if (jeta - 41 >= 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=3
      for (int i = 2; i < 3; i++) {
        TH1F *HEpositivedirectionRecosignalD3 = (TH1F *)h2CeffHEpositivedirectionRecosignalD3->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = recosignalvariancehe[i][jeta][jphi];
          if (arecosignalhe[i][jeta][jphi] > 0.) {
            HEpositivedirectionRecosignalD3->Fill(jphi, ccc1);
            ccctest = 1.;  //HEpositivedirectionRecosignalD3->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1616       kcountHEpositivedirectionRecosignalD3   =     "<<kcountHEpositivedirectionRecosignalD3  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEpositivedirectionRecosignalD3);
          HEpositivedirectionRecosignalD3->SetMarkerStyle(20);
          HEpositivedirectionRecosignalD3->SetMarkerSize(0.4);
          HEpositivedirectionRecosignalD3->GetYaxis()->SetLabelSize(0.04);
          HEpositivedirectionRecosignalD3->SetXTitle("HEpositivedirectionRecosignalD3 \b");
          HEpositivedirectionRecosignalD3->SetMarkerColor(2);
          HEpositivedirectionRecosignalD3->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEpositivedirectionRecosignalD3 == 1)
            HEpositivedirectionRecosignalD3->SetXTitle("D for HE+ jeta = 16; depth = 3 \b");
          if (kcountHEpositivedirectionRecosignalD3 == 2)
            HEpositivedirectionRecosignalD3->SetXTitle("D for HE+ jeta = 17; depth = 3 \b");
          if (kcountHEpositivedirectionRecosignalD3 == 3)
            HEpositivedirectionRecosignalD3->SetXTitle("D for HE+ jeta = 18; depth = 3 \b");
          if (kcountHEpositivedirectionRecosignalD3 == 4)
            HEpositivedirectionRecosignalD3->SetXTitle("D for HE+ jeta = 19; depth = 3 \b");
          if (kcountHEpositivedirectionRecosignalD3 == 5)
            HEpositivedirectionRecosignalD3->SetXTitle("D for HE+ jeta = 20; depth = 3 \b");
          if (kcountHEpositivedirectionRecosignalD3 == 6)
            HEpositivedirectionRecosignalD3->SetXTitle("D for HE+ jeta = 21; depth = 3 \b");
          if (kcountHEpositivedirectionRecosignalD3 == 7)
            HEpositivedirectionRecosignalD3->SetXTitle("D for HE+ jeta = 22; depth = 3 \b");
          if (kcountHEpositivedirectionRecosignalD3 == 8)
            HEpositivedirectionRecosignalD3->SetXTitle("D for HE+ jeta = 23; depth = 3 \b");
          if (kcountHEpositivedirectionRecosignalD3 == 9)
            HEpositivedirectionRecosignalD3->SetXTitle("D for HE+ jeta = 24; depth = 3 \b");
          if (kcountHEpositivedirectionRecosignalD3 == 10)
            HEpositivedirectionRecosignalD3->SetXTitle("D for HE+ jeta = 25; depth = 3 \b");
          if (kcountHEpositivedirectionRecosignalD3 == 11)
            HEpositivedirectionRecosignalD3->SetXTitle("D for HE+ jeta = 26; depth = 3 \b");
          if (kcountHEpositivedirectionRecosignalD3 == 12)
            HEpositivedirectionRecosignalD3->SetXTitle("D for HE+ jeta = 27; depth = 3 \b");
          if (kcountHEpositivedirectionRecosignalD3 == 13)
            HEpositivedirectionRecosignalD3->SetXTitle("D for HE+ jeta = 28; depth = 3 \b");
          HEpositivedirectionRecosignalD3->Draw("Error");
          kcountHEpositivedirectionRecosignalD3++;
          if (kcountHEpositivedirectionRecosignalD3 > 13)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DrecosignalPositiveDirectionhistD1PhiSymmetryDepth3HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEpositivedirectionRecosignalD3)
    delete h2CeffHEpositivedirectionRecosignalD3;
  //========================================================================================== 17
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=4
  //cout<<"      1D plot: D vs phi , different eta,  depth=4 *****" <<endl;
  c3x5->Clear();
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEpositivedirectionRecosignalD4 = 1;
  TH1F *h2CeffHEpositivedirectionRecosignalD4 = new TH1F("h2CeffHEpositivedirectionRecosignalD4", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionRecosignalD:
    if (jeta - 41 >= 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=4
      for (int i = 3; i < 4; i++) {
        TH1F *HEpositivedirectionRecosignalD4 = (TH1F *)h2CeffHEpositivedirectionRecosignalD4->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = recosignalvariancehe[i][jeta][jphi];
          if (arecosignalhe[i][jeta][jphi] > 0.) {
            HEpositivedirectionRecosignalD4->Fill(jphi, ccc1);
            ccctest = 1.;  //HEpositivedirectionRecosignalD4->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1717       kcountHEpositivedirectionRecosignalD4   =     "<<kcountHEpositivedirectionRecosignalD4  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEpositivedirectionRecosignalD4);
          HEpositivedirectionRecosignalD4->SetMarkerStyle(20);
          HEpositivedirectionRecosignalD4->SetMarkerSize(0.4);
          HEpositivedirectionRecosignalD4->GetYaxis()->SetLabelSize(0.04);
          HEpositivedirectionRecosignalD4->SetXTitle("HEpositivedirectionRecosignalD4 \b");
          HEpositivedirectionRecosignalD4->SetMarkerColor(2);
          HEpositivedirectionRecosignalD4->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEpositivedirectionRecosignalD4 == 1)
            HEpositivedirectionRecosignalD4->SetXTitle("D for HE+ jeta = 15; depth = 4 \b");
          if (kcountHEpositivedirectionRecosignalD4 == 2)
            HEpositivedirectionRecosignalD4->SetXTitle("D for HE+ jeta = 17; depth = 4 \b");
          if (kcountHEpositivedirectionRecosignalD4 == 3)
            HEpositivedirectionRecosignalD4->SetXTitle("D for HE+ jeta = 18; depth = 4 \b");
          if (kcountHEpositivedirectionRecosignalD4 == 4)
            HEpositivedirectionRecosignalD4->SetXTitle("D for HE+ jeta = 19; depth = 4 \b");
          if (kcountHEpositivedirectionRecosignalD4 == 5)
            HEpositivedirectionRecosignalD4->SetXTitle("D for HE+ jeta = 20; depth = 4 \b");
          if (kcountHEpositivedirectionRecosignalD4 == 6)
            HEpositivedirectionRecosignalD4->SetXTitle("D for HE+ jeta = 21; depth = 4 \b");
          if (kcountHEpositivedirectionRecosignalD4 == 7)
            HEpositivedirectionRecosignalD4->SetXTitle("D for HE+ jeta = 22; depth = 4 \b");
          if (kcountHEpositivedirectionRecosignalD4 == 8)
            HEpositivedirectionRecosignalD4->SetXTitle("D for HE+ jeta = 23; depth = 4 \b");
          if (kcountHEpositivedirectionRecosignalD4 == 9)
            HEpositivedirectionRecosignalD4->SetXTitle("D for HE+ jeta = 24; depth = 4 \b");
          if (kcountHEpositivedirectionRecosignalD4 == 10)
            HEpositivedirectionRecosignalD4->SetXTitle("D for HE+ jeta = 25; depth = 4 \b");
          if (kcountHEpositivedirectionRecosignalD4 == 11)
            HEpositivedirectionRecosignalD4->SetXTitle("D for HE+ jeta = 26; depth = 4 \b");
          if (kcountHEpositivedirectionRecosignalD4 == 12)
            HEpositivedirectionRecosignalD4->SetXTitle("D for HE+ jeta = 27; depth = 4 \b");
          HEpositivedirectionRecosignalD4->Draw("Error");
          kcountHEpositivedirectionRecosignalD4++;
          if (kcountHEpositivedirectionRecosignalD4 > 12)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DrecosignalPositiveDirectionhistD1PhiSymmetryDepth4HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEpositivedirectionRecosignalD4)
    delete h2CeffHEpositivedirectionRecosignalD4;
  //========================================================================================== 18
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=5
  //cout<<"      1D plot: D vs phi , different eta,  depth=5 *****" <<endl;
  c3x5->Clear();
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEpositivedirectionRecosignalD5 = 1;
  TH1F *h2CeffHEpositivedirectionRecosignalD5 = new TH1F("h2CeffHEpositivedirectionRecosignalD5", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionRecosignalD:
    if (jeta - 41 >= 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=5
      for (int i = 4; i < 5; i++) {
        TH1F *HEpositivedirectionRecosignalD5 = (TH1F *)h2CeffHEpositivedirectionRecosignalD5->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = recosignalvariancehe[i][jeta][jphi];
          if (arecosignalhe[i][jeta][jphi] > 0.) {
            HEpositivedirectionRecosignalD5->Fill(jphi, ccc1);
            ccctest = 1.;  //HEpositivedirectionRecosignalD5->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1818       kcountHEpositivedirectionRecosignalD5   =     "<<kcountHEpositivedirectionRecosignalD5  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEpositivedirectionRecosignalD5);
          HEpositivedirectionRecosignalD5->SetMarkerStyle(20);
          HEpositivedirectionRecosignalD5->SetMarkerSize(0.4);
          HEpositivedirectionRecosignalD5->GetYaxis()->SetLabelSize(0.04);
          HEpositivedirectionRecosignalD5->SetXTitle("HEpositivedirectionRecosignalD5 \b");
          HEpositivedirectionRecosignalD5->SetMarkerColor(2);
          HEpositivedirectionRecosignalD5->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEpositivedirectionRecosignalD5 == 1)
            HEpositivedirectionRecosignalD5->SetXTitle("D for HE+ jeta = 17; depth = 5 \b");
          if (kcountHEpositivedirectionRecosignalD5 == 2)
            HEpositivedirectionRecosignalD5->SetXTitle("D for HE+ jeta = 18; depth = 5 \b");
          if (kcountHEpositivedirectionRecosignalD5 == 3)
            HEpositivedirectionRecosignalD5->SetXTitle("D for HE+ jeta = 19; depth = 5 \b");
          if (kcountHEpositivedirectionRecosignalD5 == 4)
            HEpositivedirectionRecosignalD5->SetXTitle("D for HE+ jeta = 20; depth = 5 \b");
          if (kcountHEpositivedirectionRecosignalD5 == 5)
            HEpositivedirectionRecosignalD5->SetXTitle("D for HE+ jeta = 21; depth = 5 \b");
          if (kcountHEpositivedirectionRecosignalD5 == 6)
            HEpositivedirectionRecosignalD5->SetXTitle("D for HE+ jeta = 22; depth = 5 \b");
          if (kcountHEpositivedirectionRecosignalD5 == 7)
            HEpositivedirectionRecosignalD5->SetXTitle("D for HE+ jeta = 23; depth = 5 \b");
          if (kcountHEpositivedirectionRecosignalD5 == 8)
            HEpositivedirectionRecosignalD5->SetXTitle("D for HE+ jeta = 24; depth = 5 \b");
          if (kcountHEpositivedirectionRecosignalD5 == 9)
            HEpositivedirectionRecosignalD5->SetXTitle("D for HE+ jeta = 25; depth = 5 \b");
          if (kcountHEpositivedirectionRecosignalD5 == 10)
            HEpositivedirectionRecosignalD5->SetXTitle("D for HE+ jeta = 26; depth = 5 \b");
          if (kcountHEpositivedirectionRecosignalD5 == 11)
            HEpositivedirectionRecosignalD5->SetXTitle("D for HE+ jeta = 27; depth = 5 \b");
          HEpositivedirectionRecosignalD5->Draw("Error");
          kcountHEpositivedirectionRecosignalD5++;
          if (kcountHEpositivedirectionRecosignalD5 > 11)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DrecosignalPositiveDirectionhistD1PhiSymmetryDepth5HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEpositivedirectionRecosignalD5)
    delete h2CeffHEpositivedirectionRecosignalD5;
  //========================================================================================== 19
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=6
  //cout<<"      1D plot: D vs phi , different eta,  depth=6 *****" <<endl;
  c3x5->Clear();
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEpositivedirectionRecosignalD6 = 1;
  TH1F *h2CeffHEpositivedirectionRecosignalD6 = new TH1F("h2CeffHEpositivedirectionRecosignalD6", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionRecosignalD:
    if (jeta - 41 >= 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=6
      for (int i = 5; i < 6; i++) {
        TH1F *HEpositivedirectionRecosignalD6 = (TH1F *)h2CeffHEpositivedirectionRecosignalD6->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = recosignalvariancehe[i][jeta][jphi];
          if (arecosignalhe[i][jeta][jphi] > 0.) {
            HEpositivedirectionRecosignalD6->Fill(jphi, ccc1);
            ccctest = 1.;  //HEpositivedirectionRecosignalD6->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1919       kcountHEpositivedirectionRecosignalD6   =     "<<kcountHEpositivedirectionRecosignalD6  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEpositivedirectionRecosignalD6);
          HEpositivedirectionRecosignalD6->SetMarkerStyle(20);
          HEpositivedirectionRecosignalD6->SetMarkerSize(0.4);
          HEpositivedirectionRecosignalD6->GetYaxis()->SetLabelSize(0.04);
          HEpositivedirectionRecosignalD6->SetXTitle("HEpositivedirectionRecosignalD6 \b");
          HEpositivedirectionRecosignalD6->SetMarkerColor(2);
          HEpositivedirectionRecosignalD6->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEpositivedirectionRecosignalD6 == 1)
            HEpositivedirectionRecosignalD6->SetXTitle("D for HE+ jeta = 18; depth = 6 \b");
          if (kcountHEpositivedirectionRecosignalD6 == 2)
            HEpositivedirectionRecosignalD6->SetXTitle("D for HE+ jeta = 19; depth = 6 \b");
          if (kcountHEpositivedirectionRecosignalD6 == 3)
            HEpositivedirectionRecosignalD6->SetXTitle("D for HE+ jeta = 20; depth = 6 \b");
          if (kcountHEpositivedirectionRecosignalD6 == 4)
            HEpositivedirectionRecosignalD6->SetXTitle("D for HE+ jeta = 21; depth = 6 \b");
          if (kcountHEpositivedirectionRecosignalD6 == 5)
            HEpositivedirectionRecosignalD6->SetXTitle("D for HE+ jeta = 22; depth = 6 \b");
          if (kcountHEpositivedirectionRecosignalD6 == 6)
            HEpositivedirectionRecosignalD6->SetXTitle("D for HE+ jeta = 23; depth = 6 \b");
          if (kcountHEpositivedirectionRecosignalD6 == 7)
            HEpositivedirectionRecosignalD6->SetXTitle("D for HE+ jeta = 24; depth = 6 \b");
          if (kcountHEpositivedirectionRecosignalD6 == 8)
            HEpositivedirectionRecosignalD6->SetXTitle("D for HE+ jeta = 25; depth = 6 \b");
          if (kcountHEpositivedirectionRecosignalD6 == 9)
            HEpositivedirectionRecosignalD6->SetXTitle("D for HE+ jeta = 26; depth = 6 \b");
          if (kcountHEpositivedirectionRecosignalD6 == 10)
            HEpositivedirectionRecosignalD6->SetXTitle("D for HE+ jeta = 27; depth = 6 \b");
          HEpositivedirectionRecosignalD6->Draw("Error");
          kcountHEpositivedirectionRecosignalD6++;
          if (kcountHEpositivedirectionRecosignalD6 > 10)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DrecosignalPositiveDirectionhistD1PhiSymmetryDepth6HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEpositivedirectionRecosignalD6)
    delete h2CeffHEpositivedirectionRecosignalD6;
  //========================================================================================== 20
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=7
  //cout<<"      1D plot: D vs phi , different eta,  depth=7 *****" <<endl;
  c3x5->Clear();
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEpositivedirectionRecosignalD7 = 1;
  TH1F *h2CeffHEpositivedirectionRecosignalD7 = new TH1F("h2CeffHEpositivedirectionRecosignalD7", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionRecosignalD:
    if (jeta - 41 >= 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=7
      for (int i = 6; i < 7; i++) {
        TH1F *HEpositivedirectionRecosignalD7 = (TH1F *)h2CeffHEpositivedirectionRecosignalD7->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = recosignalvariancehe[i][jeta][jphi];
          if (arecosignalhe[i][jeta][jphi] > 0.) {
            HEpositivedirectionRecosignalD7->Fill(jphi, ccc1);
            ccctest = 1.;  //HEpositivedirectionRecosignalD7->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest != 0.) {
          //cout<<"2020       kcountHEpositivedirectionRecosignalD7   =     "<<kcountHEpositivedirectionRecosignalD7  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEpositivedirectionRecosignalD7);
          HEpositivedirectionRecosignalD7->SetMarkerStyle(20);
          HEpositivedirectionRecosignalD7->SetMarkerSize(0.4);
          HEpositivedirectionRecosignalD7->GetYaxis()->SetLabelSize(0.04);
          HEpositivedirectionRecosignalD7->SetXTitle("HEpositivedirectionRecosignalD7 \b");
          HEpositivedirectionRecosignalD7->SetMarkerColor(2);
          HEpositivedirectionRecosignalD7->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEpositivedirectionRecosignalD7 == 1)
            HEpositivedirectionRecosignalD7->SetXTitle("D for HE+ jeta = 25; depth = 7 \b");
          if (kcountHEpositivedirectionRecosignalD7 == 2)
            HEpositivedirectionRecosignalD7->SetXTitle("D for HE+ jeta = 26; depth = 7 \b");
          if (kcountHEpositivedirectionRecosignalD7 == 3)
            HEpositivedirectionRecosignalD7->SetXTitle("D for HE+ jeta = 27; depth = 7 \b");
          HEpositivedirectionRecosignalD7->Draw("Error");
          kcountHEpositivedirectionRecosignalD7++;
          if (kcountHEpositivedirectionRecosignalD7 > 3)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DrecosignalPositiveDirectionhistD1PhiSymmetryDepth7HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEpositivedirectionRecosignalD7)
    delete h2CeffHEpositivedirectionRecosignalD7;

  //========================================================================================== 22222214
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=1
  //cout<<"      1D plot: D vs phi , different eta,  depth=1 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEnegativedirectionRecosignalD1 = 1;
  TH1F *h2CeffHEnegativedirectionRecosignalD1 = new TH1F("h2CeffHEnegativedirectionRecosignalD1", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionRecosignalD:
    if (jeta - 41 < 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=1
      for (int i = 0; i < 1; i++) {
        TH1F *HEnegativedirectionRecosignalD1 = (TH1F *)h2CeffHEnegativedirectionRecosignalD1->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = recosignalvariancehe[i][jeta][jphi];
          if (arecosignalhe[i][jeta][jphi] > 0.) {
            HEnegativedirectionRecosignalD1->Fill(jphi, ccc1);
            ccctest = 1.;  //HEnegativedirectionRecosignalD1->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1414       kcountHEnegativedirectionRecosignalD1   =     "<<kcountHEnegativedirectionRecosignalD1  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEnegativedirectionRecosignalD1);
          HEnegativedirectionRecosignalD1->SetMarkerStyle(20);
          HEnegativedirectionRecosignalD1->SetMarkerSize(0.4);
          HEnegativedirectionRecosignalD1->GetYaxis()->SetLabelSize(0.04);
          HEnegativedirectionRecosignalD1->SetXTitle("HEnegativedirectionRecosignalD1 \b");
          HEnegativedirectionRecosignalD1->SetMarkerColor(2);
          HEnegativedirectionRecosignalD1->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEnegativedirectionRecosignalD1 == 1)
            HEnegativedirectionRecosignalD1->SetXTitle("D for HE- jeta =-29; depth = 1 \b");
          if (kcountHEnegativedirectionRecosignalD1 == 2)
            HEnegativedirectionRecosignalD1->SetXTitle("D for HE- jeta =-28; depth = 1 \b");
          if (kcountHEnegativedirectionRecosignalD1 == 3)
            HEnegativedirectionRecosignalD1->SetXTitle("D for HE- jeta =-27; depth = 1 \b");
          if (kcountHEnegativedirectionRecosignalD1 == 4)
            HEnegativedirectionRecosignalD1->SetXTitle("D for HE- jeta =-26; depth = 1 \b");
          if (kcountHEnegativedirectionRecosignalD1 == 5)
            HEnegativedirectionRecosignalD1->SetXTitle("D for HE- jeta =-25; depth = 1 \b");
          if (kcountHEnegativedirectionRecosignalD1 == 6)
            HEnegativedirectionRecosignalD1->SetXTitle("D for HE- jeta =-24; depth = 1 \b");
          if (kcountHEnegativedirectionRecosignalD1 == 7)
            HEnegativedirectionRecosignalD1->SetXTitle("D for HE- jeta =-23; depth = 1 \b");
          if (kcountHEnegativedirectionRecosignalD1 == 8)
            HEnegativedirectionRecosignalD1->SetXTitle("D for HE- jeta =-22; depth = 1 \b");
          if (kcountHEnegativedirectionRecosignalD1 == 9)
            HEnegativedirectionRecosignalD1->SetXTitle("D for HE- jeta =-21; depth = 1 \b");
          if (kcountHEnegativedirectionRecosignalD1 == 10)
            HEnegativedirectionRecosignalD1->SetXTitle("D for HE- jeta =-20; depth = 1 \b");
          if (kcountHEnegativedirectionRecosignalD1 == 11)
            HEnegativedirectionRecosignalD1->SetXTitle("D for HE- jeta =-19; depth = 1 \b");
          if (kcountHEnegativedirectionRecosignalD1 == 12)
            HEnegativedirectionRecosignalD1->SetXTitle("D for HE- jeta =-18; depth = 1 \b");
          HEnegativedirectionRecosignalD1->Draw("Error");
          kcountHEnegativedirectionRecosignalD1++;
          if (kcountHEnegativedirectionRecosignalD1 > 12)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 < 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DrecosignalNegativeDirectionhistD1PhiSymmetryDepth1HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEnegativedirectionRecosignalD1)
    delete h2CeffHEnegativedirectionRecosignalD1;
  //========================================================================================== 22222215
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=2
  //cout<<"      1D plot: D vs phi , different eta,  depth=2 *****" <<endl;
  c3x5->Clear();
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEnegativedirectionRecosignalD2 = 1;
  TH1F *h2CeffHEnegativedirectionRecosignalD2 = new TH1F("h2CeffHEnegativedirectionRecosignalD2", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionRecosignalD:
    if (jeta - 41 < 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=2
      for (int i = 1; i < 2; i++) {
        TH1F *HEnegativedirectionRecosignalD2 = (TH1F *)h2CeffHEnegativedirectionRecosignalD2->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = recosignalvariancehe[i][jeta][jphi];
          if (arecosignalhe[i][jeta][jphi] > 0.) {
            HEnegativedirectionRecosignalD2->Fill(jphi, ccc1);
            ccctest = 1.;  //HEnegativedirectionRecosignalD2->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1515       kcountHEnegativedirectionRecosignalD2   =     "<<kcountHEnegativedirectionRecosignalD2  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEnegativedirectionRecosignalD2);
          HEnegativedirectionRecosignalD2->SetMarkerStyle(20);
          HEnegativedirectionRecosignalD2->SetMarkerSize(0.4);
          HEnegativedirectionRecosignalD2->GetYaxis()->SetLabelSize(0.04);
          HEnegativedirectionRecosignalD2->SetXTitle("HEnegativedirectionRecosignalD2 \b");
          HEnegativedirectionRecosignalD2->SetMarkerColor(2);
          HEnegativedirectionRecosignalD2->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEnegativedirectionRecosignalD2 == 1)
            HEnegativedirectionRecosignalD2->SetXTitle("D for HE- jeta =-29; depth = 2 \b");
          if (kcountHEnegativedirectionRecosignalD2 == 2)
            HEnegativedirectionRecosignalD2->SetXTitle("D for HE- jeta =-28; depth = 2 \b");
          if (kcountHEnegativedirectionRecosignalD2 == 3)
            HEnegativedirectionRecosignalD2->SetXTitle("D for HE- jeta =-27; depth = 2 \b");
          if (kcountHEnegativedirectionRecosignalD2 == 4)
            HEnegativedirectionRecosignalD2->SetXTitle("D for HE- jeta =-26; depth = 2 \b");
          if (kcountHEnegativedirectionRecosignalD2 == 5)
            HEnegativedirectionRecosignalD2->SetXTitle("D for HE- jeta =-25; depth = 2 \b");
          if (kcountHEnegativedirectionRecosignalD2 == 6)
            HEnegativedirectionRecosignalD2->SetXTitle("D for HE- jeta =-24; depth = 2 \b");
          if (kcountHEnegativedirectionRecosignalD2 == 7)
            HEnegativedirectionRecosignalD2->SetXTitle("D for HE- jeta =-23; depth = 2 \b");
          if (kcountHEnegativedirectionRecosignalD2 == 8)
            HEnegativedirectionRecosignalD2->SetXTitle("D for HE- jeta =-22; depth = 2 \b");
          if (kcountHEnegativedirectionRecosignalD2 == 9)
            HEnegativedirectionRecosignalD2->SetXTitle("D for HE- jeta =-21; depth = 2 \b");
          if (kcountHEnegativedirectionRecosignalD2 == 10)
            HEnegativedirectionRecosignalD2->SetXTitle("D for HE- jeta =-20; depth = 2 \b");
          if (kcountHEnegativedirectionRecosignalD2 == 11)
            HEnegativedirectionRecosignalD2->SetXTitle("D for HE- jeta =-19; depth = 2 \b");
          if (kcountHEnegativedirectionRecosignalD2 == 12)
            HEnegativedirectionRecosignalD2->SetXTitle("D for HE- jeta =-18; depth = 2 \b");
          if (kcountHEnegativedirectionRecosignalD2 == 13)
            HEnegativedirectionRecosignalD2->SetXTitle("D for HE- jeta =-17; depth = 2 \b");
          HEnegativedirectionRecosignalD2->Draw("Error");
          kcountHEnegativedirectionRecosignalD2++;
          if (kcountHEnegativedirectionRecosignalD2 > 13)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 < 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DrecosignalNegativeDirectionhistD1PhiSymmetryDepth2HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEnegativedirectionRecosignalD2)
    delete h2CeffHEnegativedirectionRecosignalD2;
  //========================================================================================== 22222216
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=3
  //cout<<"      1D plot: D vs phi , different eta,  depth=3 *****" <<endl;
  c3x5->Clear();
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEnegativedirectionRecosignalD3 = 1;
  TH1F *h2CeffHEnegativedirectionRecosignalD3 = new TH1F("h2CeffHEnegativedirectionRecosignalD3", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionRecosignalD:
    if (jeta - 41 < 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=3
      for (int i = 2; i < 3; i++) {
        TH1F *HEnegativedirectionRecosignalD3 = (TH1F *)h2CeffHEnegativedirectionRecosignalD3->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = recosignalvariancehe[i][jeta][jphi];
          if (arecosignalhe[i][jeta][jphi] > 0.) {
            HEnegativedirectionRecosignalD3->Fill(jphi, ccc1);
            ccctest = 1.;  //HEnegativedirectionRecosignalD3->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1616       kcountHEnegativedirectionRecosignalD3   =     "<<kcountHEnegativedirectionRecosignalD3  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEnegativedirectionRecosignalD3);
          HEnegativedirectionRecosignalD3->SetMarkerStyle(20);
          HEnegativedirectionRecosignalD3->SetMarkerSize(0.4);
          HEnegativedirectionRecosignalD3->GetYaxis()->SetLabelSize(0.04);
          HEnegativedirectionRecosignalD3->SetXTitle("HEnegativedirectionRecosignalD3 \b");
          HEnegativedirectionRecosignalD3->SetMarkerColor(2);
          HEnegativedirectionRecosignalD3->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEnegativedirectionRecosignalD3 == 1)
            HEnegativedirectionRecosignalD3->SetXTitle("D for HE- jeta =-29; depth = 3 \b");
          if (kcountHEnegativedirectionRecosignalD3 == 2)
            HEnegativedirectionRecosignalD3->SetXTitle("D for HE- jeta =-28; depth = 3 \b");
          if (kcountHEnegativedirectionRecosignalD3 == 3)
            HEnegativedirectionRecosignalD3->SetXTitle("D for HE- jeta =-27; depth = 3 \b");
          if (kcountHEnegativedirectionRecosignalD3 == 4)
            HEnegativedirectionRecosignalD3->SetXTitle("D for HE- jeta =-26; depth = 3 \b");
          if (kcountHEnegativedirectionRecosignalD3 == 5)
            HEnegativedirectionRecosignalD3->SetXTitle("D for HE- jeta =-25; depth = 3 \b");
          if (kcountHEnegativedirectionRecosignalD3 == 6)
            HEnegativedirectionRecosignalD3->SetXTitle("D for HE- jeta =-24; depth = 3 \b");
          if (kcountHEnegativedirectionRecosignalD3 == 7)
            HEnegativedirectionRecosignalD3->SetXTitle("D for HE- jeta =-23; depth = 3 \b");
          if (kcountHEnegativedirectionRecosignalD3 == 8)
            HEnegativedirectionRecosignalD3->SetXTitle("D for HE- jeta =-22; depth = 3 \b");
          if (kcountHEnegativedirectionRecosignalD3 == 9)
            HEnegativedirectionRecosignalD3->SetXTitle("D for HE- jeta =-21; depth = 3 \b");
          if (kcountHEnegativedirectionRecosignalD3 == 10)
            HEnegativedirectionRecosignalD3->SetXTitle("D for HE- jeta =-20; depth = 3 \b");
          if (kcountHEnegativedirectionRecosignalD3 == 11)
            HEnegativedirectionRecosignalD3->SetXTitle("D for HE- jeta =-19; depth = 3 \b");
          if (kcountHEnegativedirectionRecosignalD3 == 12)
            HEnegativedirectionRecosignalD3->SetXTitle("D for HE- jeta =-18; depth = 3 \b");
          if (kcountHEnegativedirectionRecosignalD3 == 13)
            HEnegativedirectionRecosignalD3->SetXTitle("D for HE- jeta =-17; depth = 3 \b");
          HEnegativedirectionRecosignalD3->Draw("Error");
          kcountHEnegativedirectionRecosignalD3++;
          if (kcountHEnegativedirectionRecosignalD3 > 13)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 < 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DrecosignalNegativeDirectionhistD1PhiSymmetryDepth3HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEnegativedirectionRecosignalD3)
    delete h2CeffHEnegativedirectionRecosignalD3;
  //========================================================================================== 22222217
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=4
  //cout<<"      1D plot: D vs phi , different eta,  depth=4 *****" <<endl;
  c3x5->Clear();
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEnegativedirectionRecosignalD4 = 1;
  TH1F *h2CeffHEnegativedirectionRecosignalD4 = new TH1F("h2CeffHEnegativedirectionRecosignalD4", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionRecosignalD:
    if (jeta - 41 < 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=4
      for (int i = 3; i < 4; i++) {
        TH1F *HEnegativedirectionRecosignalD4 = (TH1F *)h2CeffHEnegativedirectionRecosignalD4->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = recosignalvariancehe[i][jeta][jphi];
          if (arecosignalhe[i][jeta][jphi] > 0.) {
            HEnegativedirectionRecosignalD4->Fill(jphi, ccc1);
            ccctest = 1.;  //HEnegativedirectionRecosignalD4->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1717       kcountHEnegativedirectionRecosignalD4   =     "<<kcountHEnegativedirectionRecosignalD4  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEnegativedirectionRecosignalD4);
          HEnegativedirectionRecosignalD4->SetMarkerStyle(20);
          HEnegativedirectionRecosignalD4->SetMarkerSize(0.4);
          HEnegativedirectionRecosignalD4->GetYaxis()->SetLabelSize(0.04);
          HEnegativedirectionRecosignalD4->SetXTitle("HEnegativedirectionRecosignalD4 \b");
          HEnegativedirectionRecosignalD4->SetMarkerColor(2);
          HEnegativedirectionRecosignalD4->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEnegativedirectionRecosignalD4 == 1)
            HEnegativedirectionRecosignalD4->SetXTitle("D for HE- jeta =-28; depth = 4 \b");
          if (kcountHEnegativedirectionRecosignalD4 == 2)
            HEnegativedirectionRecosignalD4->SetXTitle("D for HE- jeta =-27; depth = 4 \b");
          if (kcountHEnegativedirectionRecosignalD4 == 3)
            HEnegativedirectionRecosignalD4->SetXTitle("D for HE- jeta =-26; depth = 4 \b");
          if (kcountHEnegativedirectionRecosignalD4 == 4)
            HEnegativedirectionRecosignalD4->SetXTitle("D for HE- jeta =-25; depth = 4 \b");
          if (kcountHEnegativedirectionRecosignalD4 == 5)
            HEnegativedirectionRecosignalD4->SetXTitle("D for HE- jeta =-24; depth = 4 \b");
          if (kcountHEnegativedirectionRecosignalD4 == 6)
            HEnegativedirectionRecosignalD4->SetXTitle("D for HE- jeta =-23; depth = 4 \b");
          if (kcountHEnegativedirectionRecosignalD4 == 7)
            HEnegativedirectionRecosignalD4->SetXTitle("D for HE- jeta =-22; depth = 4 \b");
          if (kcountHEnegativedirectionRecosignalD4 == 8)
            HEnegativedirectionRecosignalD4->SetXTitle("D for HE- jeta =-21; depth = 4 \b");
          if (kcountHEnegativedirectionRecosignalD4 == 9)
            HEnegativedirectionRecosignalD4->SetXTitle("D for HE- jeta =-20; depth = 4 \b");
          if (kcountHEnegativedirectionRecosignalD4 == 10)
            HEnegativedirectionRecosignalD4->SetXTitle("D for HE- jeta =-19; depth = 4 \b");
          if (kcountHEnegativedirectionRecosignalD4 == 11)
            HEnegativedirectionRecosignalD4->SetXTitle("D for HE- jeta =-18; depth = 4 \b");
          if (kcountHEnegativedirectionRecosignalD4 == 12)
            HEnegativedirectionRecosignalD4->SetXTitle("D for HE- jeta =-16; depth = 4 \b");
          HEnegativedirectionRecosignalD4->Draw("Error");
          kcountHEnegativedirectionRecosignalD4++;
          if (kcountHEnegativedirectionRecosignalD4 > 12)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 < 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DrecosignalNegativeDirectionhistD1PhiSymmetryDepth4HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEnegativedirectionRecosignalD4)
    delete h2CeffHEnegativedirectionRecosignalD4;
  //========================================================================================== 22222218
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=5
  //cout<<"      1D plot: D vs phi , different eta,  depth=5 *****" <<endl;
  c3x5->Clear();
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEnegativedirectionRecosignalD5 = 1;
  TH1F *h2CeffHEnegativedirectionRecosignalD5 = new TH1F("h2CeffHEnegativedirectionRecosignalD5", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionRecosignalD:
    if (jeta - 41 < 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=5
      for (int i = 4; i < 5; i++) {
        TH1F *HEnegativedirectionRecosignalD5 = (TH1F *)h2CeffHEnegativedirectionRecosignalD5->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = recosignalvariancehe[i][jeta][jphi];
          if (arecosignalhe[i][jeta][jphi] > 0.) {
            HEnegativedirectionRecosignalD5->Fill(jphi, ccc1);
            ccctest = 1.;  //HEnegativedirectionRecosignalD5->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1818       kcountHEnegativedirectionRecosignalD5   =     "<<kcountHEnegativedirectionRecosignalD5  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEnegativedirectionRecosignalD5);
          HEnegativedirectionRecosignalD5->SetMarkerStyle(20);
          HEnegativedirectionRecosignalD5->SetMarkerSize(0.4);
          HEnegativedirectionRecosignalD5->GetYaxis()->SetLabelSize(0.04);
          HEnegativedirectionRecosignalD5->SetXTitle("HEnegativedirectionRecosignalD5 \b");
          HEnegativedirectionRecosignalD5->SetMarkerColor(2);
          HEnegativedirectionRecosignalD5->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEnegativedirectionRecosignalD5 == 1)
            HEnegativedirectionRecosignalD5->SetXTitle("D for HE- jeta =-28; depth = 5 \b");
          if (kcountHEnegativedirectionRecosignalD5 == 2)
            HEnegativedirectionRecosignalD5->SetXTitle("D for HE- jeta =-27; depth = 5 \b");
          if (kcountHEnegativedirectionRecosignalD5 == 3)
            HEnegativedirectionRecosignalD5->SetXTitle("D for HE- jeta =-26; depth = 5 \b");
          if (kcountHEnegativedirectionRecosignalD5 == 4)
            HEnegativedirectionRecosignalD5->SetXTitle("D for HE- jeta =-25; depth = 5 \b");
          if (kcountHEnegativedirectionRecosignalD5 == 5)
            HEnegativedirectionRecosignalD5->SetXTitle("D for HE- jeta =-24; depth = 5 \b");
          if (kcountHEnegativedirectionRecosignalD5 == 6)
            HEnegativedirectionRecosignalD5->SetXTitle("D for HE- jeta =-23; depth = 5 \b");
          if (kcountHEnegativedirectionRecosignalD5 == 7)
            HEnegativedirectionRecosignalD5->SetXTitle("D for HE- jeta =-22; depth = 5 \b");
          if (kcountHEnegativedirectionRecosignalD5 == 8)
            HEnegativedirectionRecosignalD5->SetXTitle("D for HE- jeta =-21; depth = 5 \b");
          if (kcountHEnegativedirectionRecosignalD5 == 9)
            HEnegativedirectionRecosignalD5->SetXTitle("D for HE- jeta =-20; depth = 5 \b");
          if (kcountHEnegativedirectionRecosignalD5 == 10)
            HEnegativedirectionRecosignalD5->SetXTitle("D for HE- jeta =-19; depth = 5 \b");
          if (kcountHEnegativedirectionRecosignalD5 == 11)
            HEnegativedirectionRecosignalD5->SetXTitle("D for HE- jeta =-18; depth = 5 \b");
          HEnegativedirectionRecosignalD5->Draw("Error");
          kcountHEnegativedirectionRecosignalD5++;
          if (kcountHEnegativedirectionRecosignalD5 > 11)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 < 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DrecosignalNegativeDirectionhistD1PhiSymmetryDepth5HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEnegativedirectionRecosignalD5)
    delete h2CeffHEnegativedirectionRecosignalD5;
  //========================================================================================== 22222219
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=6
  //cout<<"      1D plot: D vs phi , different eta,  depth=6 *****" <<endl;
  c3x5->Clear();
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEnegativedirectionRecosignalD6 = 1;
  TH1F *h2CeffHEnegativedirectionRecosignalD6 = new TH1F("h2CeffHEnegativedirectionRecosignalD6", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionRecosignalD:
    if (jeta - 41 < 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=6
      for (int i = 5; i < 6; i++) {
        TH1F *HEnegativedirectionRecosignalD6 = (TH1F *)h2CeffHEnegativedirectionRecosignalD6->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = recosignalvariancehe[i][jeta][jphi];
          if (arecosignalhe[i][jeta][jphi] > 0.) {
            HEnegativedirectionRecosignalD6->Fill(jphi, ccc1);
            ccctest = 1.;  //HEnegativedirectionRecosignalD6->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1919       kcountHEnegativedirectionRecosignalD6   =     "<<kcountHEnegativedirectionRecosignalD6  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEnegativedirectionRecosignalD6);
          HEnegativedirectionRecosignalD6->SetMarkerStyle(20);
          HEnegativedirectionRecosignalD6->SetMarkerSize(0.4);
          HEnegativedirectionRecosignalD6->GetYaxis()->SetLabelSize(0.04);
          HEnegativedirectionRecosignalD6->SetXTitle("HEnegativedirectionRecosignalD6 \b");
          HEnegativedirectionRecosignalD6->SetMarkerColor(2);
          HEnegativedirectionRecosignalD6->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEnegativedirectionRecosignalD6 == 1)
            HEnegativedirectionRecosignalD6->SetXTitle("D for HE- jeta =-28; depth = 6 \b");
          if (kcountHEnegativedirectionRecosignalD6 == 2)
            HEnegativedirectionRecosignalD6->SetXTitle("D for HE- jeta =-27; depth = 6 \b");
          if (kcountHEnegativedirectionRecosignalD6 == 3)
            HEnegativedirectionRecosignalD6->SetXTitle("D for HE- jeta =-26; depth = 6 \b");
          if (kcountHEnegativedirectionRecosignalD6 == 4)
            HEnegativedirectionRecosignalD6->SetXTitle("D for HE- jeta =-25; depth = 6 \b");
          if (kcountHEnegativedirectionRecosignalD6 == 5)
            HEnegativedirectionRecosignalD6->SetXTitle("D for HE- jeta =-24; depth = 6 \b");
          if (kcountHEnegativedirectionRecosignalD6 == 6)
            HEnegativedirectionRecosignalD6->SetXTitle("D for HE- jeta =-23; depth = 6 \b");
          if (kcountHEnegativedirectionRecosignalD6 == 7)
            HEnegativedirectionRecosignalD6->SetXTitle("D for HE- jeta =-22; depth = 6 \b");
          if (kcountHEnegativedirectionRecosignalD6 == 8)
            HEnegativedirectionRecosignalD6->SetXTitle("D for HE- jeta =-21; depth = 6 \b");
          if (kcountHEnegativedirectionRecosignalD6 == 9)
            HEnegativedirectionRecosignalD6->SetXTitle("D for HE- jeta =-20; depth = 6 \b");
          if (kcountHEnegativedirectionRecosignalD6 == 10)
            HEnegativedirectionRecosignalD6->SetXTitle("D for HE- jeta =-19; depth = 6 \b");
          HEnegativedirectionRecosignalD6->Draw("Error");
          kcountHEnegativedirectionRecosignalD6++;
          if (kcountHEnegativedirectionRecosignalD6 > 10)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 < 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DrecosignalNegativeDirectionhistD1PhiSymmetryDepth6HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEnegativedirectionRecosignalD6)
    delete h2CeffHEnegativedirectionRecosignalD6;
  //========================================================================================== 22222220
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=7
  //cout<<"      1D plot: D vs phi , different eta,  depth=7 *****" <<endl;
  c3x5->Clear();
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEnegativedirectionRecosignalD7 = 1;
  TH1F *h2CeffHEnegativedirectionRecosignalD7 = new TH1F("h2CeffHEnegativedirectionRecosignalD7", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionRecosignalD:
    if (jeta - 41 < 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=7
      for (int i = 6; i < 7; i++) {
        TH1F *HEnegativedirectionRecosignalD7 = (TH1F *)h2CeffHEnegativedirectionRecosignalD7->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = recosignalvariancehe[i][jeta][jphi];
          if (arecosignalhe[i][jeta][jphi] > 0.) {
            HEnegativedirectionRecosignalD7->Fill(jphi, ccc1);
            ccctest = 1.;  //HEnegativedirectionRecosignalD7->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest != 0.) {
          //cout<<"2020       kcountHEnegativedirectionRecosignalD7   =     "<<kcountHEnegativedirectionRecosignalD7  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEnegativedirectionRecosignalD7);
          HEnegativedirectionRecosignalD7->SetMarkerStyle(20);
          HEnegativedirectionRecosignalD7->SetMarkerSize(0.4);
          HEnegativedirectionRecosignalD7->GetYaxis()->SetLabelSize(0.04);
          HEnegativedirectionRecosignalD7->SetXTitle("HEnegativedirectionRecosignalD7 \b");
          HEnegativedirectionRecosignalD7->SetMarkerColor(2);
          HEnegativedirectionRecosignalD7->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEnegativedirectionRecosignalD7 == 1)
            HEnegativedirectionRecosignalD7->SetXTitle("D for HE- jeta =-28; depth = 7 \b");
          if (kcountHEnegativedirectionRecosignalD7 == 2)
            HEnegativedirectionRecosignalD7->SetXTitle("D for HE- jeta =-27; depth = 7 \b");
          if (kcountHEnegativedirectionRecosignalD7 == 3)
            HEnegativedirectionRecosignalD7->SetXTitle("D for HE- jeta =-26; depth = 7 \b");
          HEnegativedirectionRecosignalD7->Draw("Error");
          kcountHEnegativedirectionRecosignalD7++;
          if (kcountHEnegativedirectionRecosignalD7 > 3)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 < 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DrecosignalNegativeDirectionhistD1PhiSymmetryDepth7HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEnegativedirectionRecosignalD7)
    delete h2CeffHEnegativedirectionRecosignalD7;
  //=====================================================================       END of Recosignal HE for phi-symmetry
  //=====================================================================       END of Recosignal HE for phi-symmetry
  //=====================================================================       END of Recosignal HE for phi-symmetry
  ////////////////////////////////////////////////////////////////////////////////////////////////////         Phi-symmetry for Calibration Group:    Recosignal HF
  ////////////////////////////////////////////////////////////////////////////////////////////////////         Phi-symmetry for Calibration Group:    Recosignal HF
  ////////////////////////////////////////////////////////////////////////////////////////////////////         Phi-symmetry for Calibration Group:    Recosignal HF
  //  int k_max[5]={0,4,7,4,4}; // maximum depth for each subdet
  //ndepth = k_max[5];
  ndepth = 2;
  double arecosignalHF[ndepth][njeta][njphi];
  double recosignalvarianceHF[ndepth][njeta][njphi];
  //cout<<"111RRRRRRRRRRRRRRRRRRRRRRRRR      Recosignal HF" <<endl;
  //                                   RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR:   Recosignal HF
  TH2F *recSignalEnergy1HF1 = (TH2F *)dir->FindObjectAny("h_recSignalEnergy1_HF1");
  TH2F *recSignalEnergy0HF1 = (TH2F *)dir->FindObjectAny("h_recSignalEnergy0_HF1");
  TH2F *recSignalEnergyHF1 = (TH2F *)recSignalEnergy1HF1->Clone("recSignalEnergyHF1");
  recSignalEnergyHF1->Divide(recSignalEnergy1HF1, recSignalEnergy0HF1, 1, 1, "B");
  TH2F *recSignalEnergy1HF2 = (TH2F *)dir->FindObjectAny("h_recSignalEnergy1_HF2");
  TH2F *recSignalEnergy0HF2 = (TH2F *)dir->FindObjectAny("h_recSignalEnergy0_HF2");
  TH2F *recSignalEnergyHF2 = (TH2F *)recSignalEnergy1HF2->Clone("recSignalEnergyHF2");
  recSignalEnergyHF2->Divide(recSignalEnergy1HF2, recSignalEnergy0HF2, 1, 1, "B");
  //  cout<<"222RRRRRRRRRRRRRRRRRRRRRRRRR      Recosignal HF" <<endl;
  //====================================================================== PHI normalization & put R into massive arecosignalHF
  for (int jeta = 0; jeta < njeta; jeta++) {
    //preparation for PHI normalization:
    double sumrecosignalHF0 = 0;
    int nsumrecosignalHF0 = 0;
    double sumrecosignalHF1 = 0;
    int nsumrecosignalHF1 = 0;
    for (int jphi = 0; jphi < njphi; jphi++) {
      arecosignalHF[0][jeta][jphi] = recSignalEnergyHF1->GetBinContent(jeta + 1, jphi + 1);
      arecosignalHF[1][jeta][jphi] = recSignalEnergyHF2->GetBinContent(jeta + 1, jphi + 1);
      if (arecosignalHF[0][jeta][jphi] > 0.) {
        sumrecosignalHF0 += arecosignalHF[0][jeta][jphi];
        ++nsumrecosignalHF0;
      }
      if (arecosignalHF[1][jeta][jphi] > 0.) {
        sumrecosignalHF1 += arecosignalHF[1][jeta][jphi];
        ++nsumrecosignalHF1;
      }
    }  // phi
    // PHI normalization:
    for (int jphi = 0; jphi < njphi; jphi++) {
      if (arecosignalHF[0][jeta][jphi] > 0.)
        arecosignalHF[0][jeta][jphi] /= (sumrecosignalHF0 / nsumrecosignalHF0);
      if (arecosignalHF[1][jeta][jphi] > 0.)
        arecosignalHF[1][jeta][jphi] /= (sumrecosignalHF1 / nsumrecosignalHF1);
    }  // phi
  }    //eta
  //------------------------  2D-eta/phi-plot: R, averaged over depthfs
  //======================================================================
  //======================================================================
  // cout<<"      R2D-eta/phi-plot: R, averaged over depthfs *****" <<endl;
  c2x1->Clear();
  /////////////////
  c2x1->Divide(2, 1);
  c2x1->cd(1);
  TH2F *GefzRrecosignalHF42D = new TH2F("GefzRrecosignalHF42D", "", neta, -41., 41., nphi, 0., 72.);
  TH2F *GefzRrecosignalHF42D0 = new TH2F("GefzRrecosignalHF42D0", "", neta, -41., 41., nphi, 0., 72.);
  TH2F *GefzRrecosignalHF42DF = (TH2F *)GefzRrecosignalHF42D0->Clone("GefzRrecosignalHF42DF");
  for (int i = 0; i < ndepth; i++) {
    for (int jeta = 0; jeta < neta; jeta++) {
      for (int jphi = 0; jphi < nphi; jphi++) {
        double ccc1 = arecosignalHF[i][jeta][jphi];
        int k2plot = jeta - 41;
        int kkk = k2plot;  //if(k2plot >0 ) kkk=k2plot+1; //-41 +41 !=0
        if (ccc1 != 0.) {
          GefzRrecosignalHF42D->Fill(kkk, jphi, ccc1);
          GefzRrecosignalHF42D0->Fill(kkk, jphi, 1.);
        }
      }
    }
  }
  GefzRrecosignalHF42DF->Divide(GefzRrecosignalHF42D, GefzRrecosignalHF42D0, 1, 1, "B");  // average A
  gPad->SetGridy();
  gPad->SetGridx();  //      gPad->SetLogz();
  GefzRrecosignalHF42DF->SetXTitle("<R>_depth       #eta  \b");
  GefzRrecosignalHF42DF->SetYTitle("      #phi \b");
  GefzRrecosignalHF42DF->Draw("COLZ");

  c2x1->cd(2);
  TH1F *energyhitSignal_HF = (TH1F *)dir->FindObjectAny("h_energyhitSignal_HF");
  energyhitSignal_HF->SetMarkerStyle(20);
  energyhitSignal_HF->SetMarkerSize(0.4);
  energyhitSignal_HF->GetYaxis()->SetLabelSize(0.04);
  energyhitSignal_HF->SetXTitle("energyhitSignal_HF \b");
  energyhitSignal_HF->SetMarkerColor(2);
  energyhitSignal_HF->SetLineColor(0);
  gPad->SetGridy();
  gPad->SetGridx();
  energyhitSignal_HF->Draw("Error");

  /////////////////
  c2x1->Update();
  c2x1->Print("RrecosignalGeneralD2PhiSymmetryHF.png");
  c2x1->Clear();
  // clean-up
  if (GefzRrecosignalHF42D)
    delete GefzRrecosignalHF42D;
  if (GefzRrecosignalHF42D0)
    delete GefzRrecosignalHF42D0;
  if (GefzRrecosignalHF42DF)
    delete GefzRrecosignalHF42DF;
  //====================================================================== 1D plot: R vs phi , averaged over depthfs & eta
  //======================================================================
  //cout<<"      1D plot: R vs phi , averaged over depthfs & eta *****" <<endl;
  c1x1->Clear();
  /////////////////
  c1x1->Divide(1, 1);
  c1x1->cd(1);
  TH1F *GefzRrecosignalHF41D = new TH1F("GefzRrecosignalHF41D", "", nphi, 0., 72.);
  TH1F *GefzRrecosignalHF41D0 = new TH1F("GefzRrecosignalHF41D0", "", nphi, 0., 72.);
  TH1F *GefzRrecosignalHF41DF = (TH1F *)GefzRrecosignalHF41D0->Clone("GefzRrecosignalHF41DF");
  for (int jphi = 0; jphi < nphi; jphi++) {
    for (int jeta = 0; jeta < neta; jeta++) {
      for (int i = 0; i < ndepth; i++) {
        double ccc1 = arecosignalHF[i][jeta][jphi];
        if (ccc1 != 0.) {
          GefzRrecosignalHF41D->Fill(jphi, ccc1);
          GefzRrecosignalHF41D0->Fill(jphi, 1.);
        }
      }
    }
  }
  GefzRrecosignalHF41DF->Divide(
      GefzRrecosignalHF41D, GefzRrecosignalHF41D0, 1, 1, "B");  // R averaged over depthfs & eta
  GefzRrecosignalHF41D0->Sumw2();
  //    for (int jphi=1;jphi<73;jphi++) {GefzRrecosignalHF41DF->SetBinError(jphi,0.01);}
  gPad->SetGridy();
  gPad->SetGridx();  //      gPad->SetLogz();
  GefzRrecosignalHF41DF->SetMarkerStyle(20);
  GefzRrecosignalHF41DF->SetMarkerSize(1.4);
  GefzRrecosignalHF41DF->GetZaxis()->SetLabelSize(0.08);
  GefzRrecosignalHF41DF->SetXTitle("#phi  \b");
  GefzRrecosignalHF41DF->SetYTitle("  <R> \b");
  GefzRrecosignalHF41DF->SetZTitle("<R>_PHI  - AllDepthfs \b");
  GefzRrecosignalHF41DF->SetMarkerColor(4);
  GefzRrecosignalHF41DF->SetLineColor(
      4);  //  GefzRrecosignalHF41DF->SetMinimum(0.8);     //      GefzRrecosignalHF41DF->SetMaximum(1.000);
  GefzRrecosignalHF41DF->Draw("Error");
  /////////////////
  c1x1->Update();
  c1x1->Print("RrecosignalGeneralD1PhiSymmetryHF.png");
  c1x1->Clear();
  // clean-up
  if (GefzRrecosignalHF41D)
    delete GefzRrecosignalHF41D;
  if (GefzRrecosignalHF41D0)
    delete GefzRrecosignalHF41D0;
  if (GefzRrecosignalHF41DF)
    delete GefzRrecosignalHF41DF;
  //========================================================================================== 4
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=1
  //cout<<"      1D plot: R vs phi , different eta,  depth=1 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHFpositivedirectionRecosignal1 = 1;
  TH1F *h2CeffHFpositivedirectionRecosignal1 = new TH1F("h2CeffHFpositivedirectionRecosignal1", "", nphi, 0., 72.);
  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionRecosignal:
    if (jeta - 41 >= 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=1
      for (int i = 0; i < 1; i++) {
        TH1F *HFpositivedirectionRecosignal1 = (TH1F *)h2CeffHFpositivedirectionRecosignal1->Clone("twod1");
        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = arecosignalHF[i][jeta][jphi];
          if (ccc1 != 0.) {
            HFpositivedirectionRecosignal1->Fill(jphi, ccc1);
            ccctest = 1.;  //HFpositivedirectionRecosignal1->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //	  cout<<"444        kcountHFpositivedirectionRecosignal1   =     "<<kcountHFpositivedirectionRecosignal1  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHFpositivedirectionRecosignal1);
          HFpositivedirectionRecosignal1->SetMarkerStyle(20);
          HFpositivedirectionRecosignal1->SetMarkerSize(0.4);
          HFpositivedirectionRecosignal1->GetYaxis()->SetLabelSize(0.04);
          HFpositivedirectionRecosignal1->SetXTitle("HFpositivedirectionRecosignal1 \b");
          HFpositivedirectionRecosignal1->SetMarkerColor(2);
          HFpositivedirectionRecosignal1->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHFpositivedirectionRecosignal1 == 1)
            HFpositivedirectionRecosignal1->SetXTitle("R for HF+ jeta = 28; depth = 1 \b");
          if (kcountHFpositivedirectionRecosignal1 == 2)
            HFpositivedirectionRecosignal1->SetXTitle("R for HF+ jeta = 29; depth = 1 \b");
          if (kcountHFpositivedirectionRecosignal1 == 3)
            HFpositivedirectionRecosignal1->SetXTitle("R for HF+ jeta = 30; depth = 1 \b");
          if (kcountHFpositivedirectionRecosignal1 == 4)
            HFpositivedirectionRecosignal1->SetXTitle("R for HF+ jeta = 31; depth = 1 \b");
          if (kcountHFpositivedirectionRecosignal1 == 5)
            HFpositivedirectionRecosignal1->SetXTitle("R for HF+ jeta = 32; depth = 1 \b");
          if (kcountHFpositivedirectionRecosignal1 == 6)
            HFpositivedirectionRecosignal1->SetXTitle("R for HF+ jeta = 33; depth = 1 \b");
          if (kcountHFpositivedirectionRecosignal1 == 7)
            HFpositivedirectionRecosignal1->SetXTitle("R for HF+ jeta = 34; depth = 1 \b");
          if (kcountHFpositivedirectionRecosignal1 == 8)
            HFpositivedirectionRecosignal1->SetXTitle("R for HF+ jeta = 35; depth = 1 \b");
          if (kcountHFpositivedirectionRecosignal1 == 9)
            HFpositivedirectionRecosignal1->SetXTitle("R for HF+ jeta = 36; depth = 1 \b");
          if (kcountHFpositivedirectionRecosignal1 == 10)
            HFpositivedirectionRecosignal1->SetXTitle("R for HF+ jeta = 37; depth = 1 \b");
          if (kcountHFpositivedirectionRecosignal1 == 11)
            HFpositivedirectionRecosignal1->SetXTitle("R for HF+ jeta = 38; depth = 1 \b");
          if (kcountHFpositivedirectionRecosignal1 == 12)
            HFpositivedirectionRecosignal1->SetXTitle("R for HF+ jeta = 39; depth = 1 \b");
          if (kcountHFpositivedirectionRecosignal1 == 13)
            HFpositivedirectionRecosignal1->SetXTitle("R for HF+ jeta = 40; depth = 1 \b");
          HFpositivedirectionRecosignal1->Draw("Error");
          kcountHFpositivedirectionRecosignal1++;
          if (kcountHFpositivedirectionRecosignal1 > 13)
            break;  //
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RrecosignalPositiveDirectionhistD1PhiSymmetryDepth1HF.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHFpositivedirectionRecosignal1)
    delete h2CeffHFpositivedirectionRecosignal1;

  //========================================================================================== 5
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=2
  //  cout<<"      1D plot: R vs phi , different eta,  depth=2 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHFpositivedirectionRecosignal2 = 1;
  TH1F *h2CeffHFpositivedirectionRecosignal2 = new TH1F("h2CeffHFpositivedirectionRecosignal2", "", nphi, 0., 72.);
  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionRecosignal:
    if (jeta - 41 >= 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=2
      for (int i = 1; i < 2; i++) {
        TH1F *HFpositivedirectionRecosignal2 = (TH1F *)h2CeffHFpositivedirectionRecosignal2->Clone("twod1");
        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = arecosignalHF[i][jeta][jphi];
          if (ccc1 != 0.) {
            HFpositivedirectionRecosignal2->Fill(jphi, ccc1);
            ccctest = 1.;  //HFpositivedirectionRecosignal2->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"555        kcountHFpositivedirectionRecosignal2   =     "<<kcountHFpositivedirectionRecosignal2  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHFpositivedirectionRecosignal2);
          HFpositivedirectionRecosignal2->SetMarkerStyle(20);
          HFpositivedirectionRecosignal2->SetMarkerSize(0.4);
          HFpositivedirectionRecosignal2->GetYaxis()->SetLabelSize(0.04);
          HFpositivedirectionRecosignal2->SetXTitle("HFpositivedirectionRecosignal2 \b");
          HFpositivedirectionRecosignal2->SetMarkerColor(2);
          HFpositivedirectionRecosignal2->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHFpositivedirectionRecosignal2 == 1)
            HFpositivedirectionRecosignal2->SetXTitle("R for HF+ jeta = 28; depth = 2 \b");
          if (kcountHFpositivedirectionRecosignal2 == 2)
            HFpositivedirectionRecosignal2->SetXTitle("R for HF+ jeta = 29; depth = 2 \b");
          if (kcountHFpositivedirectionRecosignal2 == 3)
            HFpositivedirectionRecosignal2->SetXTitle("R for HF+ jeta = 30; depth = 2 \b");
          if (kcountHFpositivedirectionRecosignal2 == 4)
            HFpositivedirectionRecosignal2->SetXTitle("R for HF+ jeta = 31; depth = 2 \b");
          if (kcountHFpositivedirectionRecosignal2 == 5)
            HFpositivedirectionRecosignal2->SetXTitle("R for HF+ jeta = 32; depth = 2 \b");
          if (kcountHFpositivedirectionRecosignal2 == 6)
            HFpositivedirectionRecosignal2->SetXTitle("R for HF+ jeta = 33; depth = 2 \b");
          if (kcountHFpositivedirectionRecosignal2 == 7)
            HFpositivedirectionRecosignal2->SetXTitle("R for HF+ jeta = 34; depth = 2 \b");
          if (kcountHFpositivedirectionRecosignal2 == 8)
            HFpositivedirectionRecosignal2->SetXTitle("R for HF+ jeta = 35; depth = 2 \b");
          if (kcountHFpositivedirectionRecosignal2 == 9)
            HFpositivedirectionRecosignal2->SetXTitle("R for HF+ jeta = 36; depth = 2 \b");
          if (kcountHFpositivedirectionRecosignal2 == 10)
            HFpositivedirectionRecosignal2->SetXTitle("R for HF+ jeta = 37; depth = 2 \b");
          if (kcountHFpositivedirectionRecosignal2 == 11)
            HFpositivedirectionRecosignal2->SetXTitle("R for HF+ jeta = 38; depth = 2 \b");
          if (kcountHFpositivedirectionRecosignal2 == 12)
            HFpositivedirectionRecosignal2->SetXTitle("R for HF+ jeta = 39; depth = 2 \b");
          if (kcountHFpositivedirectionRecosignal2 == 13)
            HFpositivedirectionRecosignal2->SetXTitle("R for HF+ jeta = 40; depth = 2 \b");
          HFpositivedirectionRecosignal2->Draw("Error");
          kcountHFpositivedirectionRecosignal2++;
          if (kcountHFpositivedirectionRecosignal2 > 13)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RrecosignalPositiveDirectionhistD1PhiSymmetryDepth2HF.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHFpositivedirectionRecosignal2)
    delete h2CeffHFpositivedirectionRecosignal2;

  //========================================================================================== 1111114
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=1
  //cout<<"      1D plot: R vs phi , different eta,  depth=1 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHFnegativedirectionRecosignal1 = 1;
  TH1F *h2CeffHFnegativedirectionRecosignal1 = new TH1F("h2CeffHFnegativedirectionRecosignal1", "", nphi, 0., 72.);
  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionRecosignal:
    if (jeta - 41 < 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=1
      for (int i = 0; i < 1; i++) {
        TH1F *HFnegativedirectionRecosignal1 = (TH1F *)h2CeffHFnegativedirectionRecosignal1->Clone("twod1");
        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = arecosignalHF[i][jeta][jphi];
          if (ccc1 != 0.) {
            HFnegativedirectionRecosignal1->Fill(jphi, ccc1);
            ccctest = 1.;  //HFnegativedirectionRecosignal1->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //	  cout<<"444        kcountHFnegativedirectionRecosignal1   =     "<<kcountHFnegativedirectionRecosignal1  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHFnegativedirectionRecosignal1);
          HFnegativedirectionRecosignal1->SetMarkerStyle(20);
          HFnegativedirectionRecosignal1->SetMarkerSize(0.4);
          HFnegativedirectionRecosignal1->GetYaxis()->SetLabelSize(0.04);
          HFnegativedirectionRecosignal1->SetXTitle("HFnegativedirectionRecosignal1 \b");
          HFnegativedirectionRecosignal1->SetMarkerColor(2);
          HFnegativedirectionRecosignal1->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHFnegativedirectionRecosignal1 == 1)
            HFnegativedirectionRecosignal1->SetXTitle("R for HF- jeta =-41; depth = 1 \b");
          if (kcountHFnegativedirectionRecosignal1 == 2)
            HFnegativedirectionRecosignal1->SetXTitle("R for HF- jeta =-40; depth = 1 \b");
          if (kcountHFnegativedirectionRecosignal1 == 3)
            HFnegativedirectionRecosignal1->SetXTitle("R for HF- jeta =-39; depth = 1 \b");
          if (kcountHFnegativedirectionRecosignal1 == 4)
            HFnegativedirectionRecosignal1->SetXTitle("R for HF- jeta =-38; depth = 1 \b");
          if (kcountHFnegativedirectionRecosignal1 == 5)
            HFnegativedirectionRecosignal1->SetXTitle("R for HF- jeta =-37; depth = 1 \b");
          if (kcountHFnegativedirectionRecosignal1 == 6)
            HFnegativedirectionRecosignal1->SetXTitle("R for HF- jeta =-36; depth = 1 \b");
          if (kcountHFnegativedirectionRecosignal1 == 7)
            HFnegativedirectionRecosignal1->SetXTitle("R for HF- jeta =-35; depth = 1 \b");
          if (kcountHFnegativedirectionRecosignal1 == 8)
            HFnegativedirectionRecosignal1->SetXTitle("R for HF- jeta =-34; depth = 1 \b");
          if (kcountHFnegativedirectionRecosignal1 == 9)
            HFnegativedirectionRecosignal1->SetXTitle("R for HF- jeta =-33; depth = 1 \b");
          if (kcountHFnegativedirectionRecosignal1 == 10)
            HFnegativedirectionRecosignal1->SetXTitle("R for HF- jeta =-32; depth = 1 \b");
          if (kcountHFnegativedirectionRecosignal1 == 11)
            HFnegativedirectionRecosignal1->SetXTitle("R for HF- jeta =-31; depth = 1 \b");
          if (kcountHFnegativedirectionRecosignal1 == 12)
            HFnegativedirectionRecosignal1->SetXTitle("R for HF- jeta =-30; depth = 1 \b");
          if (kcountHFnegativedirectionRecosignal1 == 13)
            HFnegativedirectionRecosignal1->SetXTitle("R for HF- jeta =-29; depth = 1 \b");
          HFnegativedirectionRecosignal1->Draw("Error");
          kcountHFnegativedirectionRecosignal1++;
          if (kcountHFnegativedirectionRecosignal1 > 13)
            break;  //
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41< 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RrecosignalNegativeDirectionhistD1PhiSymmetryDepth1HF.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHFnegativedirectionRecosignal1)
    delete h2CeffHFnegativedirectionRecosignal1;

  //========================================================================================== 1111115
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=2
  //  cout<<"      1D plot: R vs phi , different eta,  depth=2 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHFnegativedirectionRecosignal2 = 1;
  TH1F *h2CeffHFnegativedirectionRecosignal2 = new TH1F("h2CeffHFnegativedirectionRecosignal2", "", nphi, 0., 72.);
  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionRecosignal:
    if (jeta - 41 < 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=2
      for (int i = 1; i < 2; i++) {
        TH1F *HFnegativedirectionRecosignal2 = (TH1F *)h2CeffHFnegativedirectionRecosignal2->Clone("twod1");
        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = arecosignalHF[i][jeta][jphi];
          if (ccc1 != 0.) {
            HFnegativedirectionRecosignal2->Fill(jphi, ccc1);
            ccctest = 1.;  //HFnegativedirectionRecosignal2->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"555        kcountHFnegativedirectionRecosignal2   =     "<<kcountHFnegativedirectionRecosignal2  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHFnegativedirectionRecosignal2);
          HFnegativedirectionRecosignal2->SetMarkerStyle(20);
          HFnegativedirectionRecosignal2->SetMarkerSize(0.4);
          HFnegativedirectionRecosignal2->GetYaxis()->SetLabelSize(0.04);
          HFnegativedirectionRecosignal2->SetXTitle("HFnegativedirectionRecosignal2 \b");
          HFnegativedirectionRecosignal2->SetMarkerColor(2);
          HFnegativedirectionRecosignal2->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHFnegativedirectionRecosignal2 == 1)
            HFnegativedirectionRecosignal2->SetXTitle("R for HF- jeta =-41; depth = 2 \b");
          if (kcountHFnegativedirectionRecosignal2 == 2)
            HFnegativedirectionRecosignal2->SetXTitle("R for HF- jeta =-40; depth = 2 \b");
          if (kcountHFnegativedirectionRecosignal2 == 3)
            HFnegativedirectionRecosignal2->SetXTitle("R for HF- jeta =-39; depth = 2 \b");
          if (kcountHFnegativedirectionRecosignal2 == 4)
            HFnegativedirectionRecosignal2->SetXTitle("R for HF- jeta =-38; depth = 2 \b");
          if (kcountHFnegativedirectionRecosignal2 == 5)
            HFnegativedirectionRecosignal2->SetXTitle("R for HF- jeta =-37; depth = 2 \b");
          if (kcountHFnegativedirectionRecosignal2 == 6)
            HFnegativedirectionRecosignal2->SetXTitle("R for HF- jeta =-36; depth = 2 \b");
          if (kcountHFnegativedirectionRecosignal2 == 7)
            HFnegativedirectionRecosignal2->SetXTitle("R for HF- jeta =-35; depth = 2 \b");
          if (kcountHFnegativedirectionRecosignal2 == 8)
            HFnegativedirectionRecosignal2->SetXTitle("R for HF- jeta =-34; depth = 2 \b");
          if (kcountHFnegativedirectionRecosignal2 == 9)
            HFnegativedirectionRecosignal2->SetXTitle("R for HF- jeta =-33; depth = 2 \b");
          if (kcountHFnegativedirectionRecosignal2 == 10)
            HFnegativedirectionRecosignal2->SetXTitle("R for HF- jeta =-32; depth = 2 \b");
          if (kcountHFnegativedirectionRecosignal2 == 11)
            HFnegativedirectionRecosignal2->SetXTitle("R for HF- jeta =-31; depth = 2 \b");
          if (kcountHFnegativedirectionRecosignal2 == 12)
            HFnegativedirectionRecosignal2->SetXTitle("R for HF- jeta =-30; depth = 2 \b");
          if (kcountHFnegativedirectionRecosignal2 == 13)
            HFnegativedirectionRecosignal2->SetXTitle("R for HF- jeta =-20; depth = 2 \b");
          HFnegativedirectionRecosignal2->Draw("Error");
          kcountHFnegativedirectionRecosignal2++;
          if (kcountHFnegativedirectionRecosignal2 > 13)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41< 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RrecosignalNegativeDirectionhistD1PhiSymmetryDepth2HF.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHFnegativedirectionRecosignal2)
    delete h2CeffHFnegativedirectionRecosignal2;

  //======================================================================================================================
  //======================================================================================================================
  //======================================================================================================================
  //                            DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD:

  //cout<<"    Start Vaiance: preparation  *****" <<endl;
  TH2F *recosignalVariance1HF1 = (TH2F *)dir->FindObjectAny("h_recSignalEnergy2_HF1");
  TH2F *recosignalVariance0HF1 = (TH2F *)dir->FindObjectAny("h_recSignalEnergy0_HF1");
  TH2F *recosignalVarianceHF1 = (TH2F *)recosignalVariance1HF1->Clone("recosignalVarianceHF1");
  recosignalVarianceHF1->Divide(recosignalVariance1HF1, recosignalVariance0HF1, 1, 1, "B");
  TH2F *recosignalVariance1HF2 = (TH2F *)dir->FindObjectAny("h_recSignalEnergy2_HF2");
  TH2F *recosignalVariance0HF2 = (TH2F *)dir->FindObjectAny("h_recSignalEnergy0_HF2");
  TH2F *recosignalVarianceHF2 = (TH2F *)recosignalVariance1HF2->Clone("recosignalVarianceHF2");
  recosignalVarianceHF2->Divide(recosignalVariance1HF2, recosignalVariance0HF2, 1, 1, "B");
  //cout<<"      Vaiance: preparation DONE *****" <<endl;
  //====================================================================== put Vaiance=Dispersia = Sig**2=<R**2> - (<R>)**2 into massive recosignalvarianceHF
  //                                                                                           = sum(R*R)/N - (sum(R)/N)**2
  for (int jeta = 0; jeta < njeta; jeta++) {
    //preparation for PHI normalization:
    double sumrecosignalHF0 = 0;
    int nsumrecosignalHF0 = 0;
    double sumrecosignalHF1 = 0;
    int nsumrecosignalHF1 = 0;
    for (int jphi = 0; jphi < njphi; jphi++) {
      recosignalvarianceHF[0][jeta][jphi] = recosignalVarianceHF1->GetBinContent(jeta + 1, jphi + 1);
      recosignalvarianceHF[1][jeta][jphi] = recosignalVarianceHF2->GetBinContent(jeta + 1, jphi + 1);
      if (recosignalvarianceHF[0][jeta][jphi] > 0.) {
        sumrecosignalHF0 += recosignalvarianceHF[0][jeta][jphi];
        ++nsumrecosignalHF0;
      }
      if (recosignalvarianceHF[1][jeta][jphi] > 0.) {
        sumrecosignalHF1 += recosignalvarianceHF[1][jeta][jphi];
        ++nsumrecosignalHF1;
      }
    }  // phi
    // PHI normalization :
    for (int jphi = 0; jphi < njphi; jphi++) {
      if (recosignalvarianceHF[0][jeta][jphi] > 0.)
        recosignalvarianceHF[0][jeta][jphi] /= (sumrecosignalHF0 / nsumrecosignalHF0);
      if (recosignalvarianceHF[1][jeta][jphi] > 0.)
        recosignalvarianceHF[1][jeta][jphi] /= (sumrecosignalHF1 / nsumrecosignalHF1);
    }  // phi
    //       recosignalvarianceHF (D)           = sum(R*R)/N - (sum(R)/N)**2
    for (int jphi = 0; jphi < njphi; jphi++) {
      //	   cout<<"12 12 12   jeta=     "<< jeta <<"   jphi   =     "<<jphi  <<endl;
      recosignalvarianceHF[0][jeta][jphi] -= arecosignalHF[0][jeta][jphi] * arecosignalHF[0][jeta][jphi];
      recosignalvarianceHF[0][jeta][jphi] = fabs(recosignalvarianceHF[0][jeta][jphi]);
      recosignalvarianceHF[1][jeta][jphi] -= arecosignalHF[1][jeta][jphi] * arecosignalHF[1][jeta][jphi];
      recosignalvarianceHF[1][jeta][jphi] = fabs(recosignalvarianceHF[1][jeta][jphi]);
    }
  }
  //cout<<"      Vaiance: DONE*****" <<endl;
  //------------------------  2D-eta/phi-plot: D, averaged over depthfs
  //======================================================================
  //======================================================================
  //cout<<"      R2D-eta/phi-plot: D, averaged over depthfs *****" <<endl;
  c1x1->Clear();
  /////////////////
  c1x0->Divide(1, 1);
  c1x0->cd(1);
  TH2F *DefzDrecosignalHF42D = new TH2F("DefzDrecosignalHF42D", "", neta, -41., 41., nphi, 0., 72.);
  TH2F *DefzDrecosignalHF42D0 = new TH2F("DefzDrecosignalHF42D0", "", neta, -41., 41., nphi, 0., 72.);
  TH2F *DefzDrecosignalHF42DF = (TH2F *)DefzDrecosignalHF42D0->Clone("DefzDrecosignalHF42DF");
  for (int i = 0; i < ndepth; i++) {
    for (int jeta = 0; jeta < neta; jeta++) {
      for (int jphi = 0; jphi < nphi; jphi++) {
        double ccc1 = recosignalvarianceHF[i][jeta][jphi];
        int k2plot = jeta - 41;
        int kkk = k2plot;  //if(k2plot >0   kkk=k2plot+1; //-41 +41 !=0
        if (arecosignalHF[i][jeta][jphi] > 0.) {
          DefzDrecosignalHF42D->Fill(kkk, jphi, ccc1);
          DefzDrecosignalHF42D0->Fill(kkk, jphi, 1.);
        }
      }
    }
  }
  DefzDrecosignalHF42DF->Divide(DefzDrecosignalHF42D, DefzDrecosignalHF42D0, 1, 1, "B");  // average A
  //    DefzDrecosignalHF1->Sumw2();
  gPad->SetGridy();
  gPad->SetGridx();  //      gPad->SetLogz();
  DefzDrecosignalHF42DF->SetMarkerStyle(20);
  DefzDrecosignalHF42DF->SetMarkerSize(0.4);
  DefzDrecosignalHF42DF->GetZaxis()->SetLabelSize(0.08);
  DefzDrecosignalHF42DF->SetXTitle("<D>_depth       #eta  \b");
  DefzDrecosignalHF42DF->SetYTitle("      #phi \b");
  DefzDrecosignalHF42DF->SetZTitle("<D>_depth \b");
  DefzDrecosignalHF42DF->SetMarkerColor(2);
  DefzDrecosignalHF42DF->SetLineColor(
      0);  //      DefzDrecosignalHF42DF->SetMaximum(1.000);  //      DefzDrecosignalHF42DF->SetMinimum(1.0);
  DefzDrecosignalHF42DF->Draw("COLZ");
  /////////////////
  c1x0->Update();
  c1x0->Print("DrecosignalGeneralD2PhiSymmetryHF.png");
  c1x0->Clear();
  // clean-up
  if (DefzDrecosignalHF42D)
    delete DefzDrecosignalHF42D;
  if (DefzDrecosignalHF42D0)
    delete DefzDrecosignalHF42D0;
  if (DefzDrecosignalHF42DF)
    delete DefzDrecosignalHF42DF;
  //====================================================================== 1D plot: D vs phi , averaged over depthfs & eta
  //======================================================================
  //cout<<"      1D plot: D vs phi , averaged over depthfs & eta *****" <<endl;
  c1x1->Clear();
  /////////////////
  c1x1->Divide(1, 1);
  c1x1->cd(1);
  TH1F *DefzDrecosignalHF41D = new TH1F("DefzDrecosignalHF41D", "", nphi, 0., 72.);
  TH1F *DefzDrecosignalHF41D0 = new TH1F("DefzDrecosignalHF41D0", "", nphi, 0., 72.);
  TH1F *DefzDrecosignalHF41DF = (TH1F *)DefzDrecosignalHF41D0->Clone("DefzDrecosignalHF41DF");

  for (int jphi = 0; jphi < nphi; jphi++) {
    for (int jeta = 0; jeta < neta; jeta++) {
      for (int i = 0; i < ndepth; i++) {
        double ccc1 = recosignalvarianceHF[i][jeta][jphi];
        if (arecosignalHF[i][jeta][jphi] > 0.) {
          DefzDrecosignalHF41D->Fill(jphi, ccc1);
          DefzDrecosignalHF41D0->Fill(jphi, 1.);
        }
      }
    }
  }
  //     DefzDrecosignalHF41D->Sumw2();DefzDrecosignalHF41D0->Sumw2();

  DefzDrecosignalHF41DF->Divide(
      DefzDrecosignalHF41D, DefzDrecosignalHF41D0, 1, 1, "B");  // R averaged over depthfs & eta
  DefzDrecosignalHF41D0->Sumw2();
  //    for (int jphi=1;jphi<73;jphi++) {DefzDrecosignalHF41DF->SetBinError(jphi,0.01);}
  gPad->SetGridy();
  gPad->SetGridx();  //      gPad->SetLogz();
  DefzDrecosignalHF41DF->SetMarkerStyle(20);
  DefzDrecosignalHF41DF->SetMarkerSize(1.4);
  DefzDrecosignalHF41DF->GetZaxis()->SetLabelSize(0.08);
  DefzDrecosignalHF41DF->SetXTitle("#phi  \b");
  DefzDrecosignalHF41DF->SetYTitle("  <D> \b");
  DefzDrecosignalHF41DF->SetZTitle("<D>_PHI  - AllDepthfs \b");
  DefzDrecosignalHF41DF->SetMarkerColor(4);
  DefzDrecosignalHF41DF->SetLineColor(
      4);  //  DefzDrecosignalHF41DF->SetMinimum(0.8);     DefzDrecosignalHF41DF->SetMinimum(-0.015);
  DefzDrecosignalHF41DF->Draw("Error");
  /////////////////
  c1x1->Update();
  c1x1->Print("DrecosignalGeneralD1PhiSymmetryHF.png");
  c1x1->Clear();
  // clean-up
  if (DefzDrecosignalHF41D)
    delete DefzDrecosignalHF41D;
  if (DefzDrecosignalHF41D0)
    delete DefzDrecosignalHF41D0;
  if (DefzDrecosignalHF41DF)
    delete DefzDrecosignalHF41DF;
  //========================================================================================== 14
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=1
  //cout<<"      1D plot: D vs phi , different eta,  depth=1 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHFpositivedirectionRecosignalD1 = 1;
  TH1F *h2CeffHFpositivedirectionRecosignalD1 = new TH1F("h2CeffHFpositivedirectionRecosignalD1", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionRecosignalD:
    if (jeta - 41 >= 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=1
      for (int i = 0; i < 1; i++) {
        TH1F *HFpositivedirectionRecosignalD1 = (TH1F *)h2CeffHFpositivedirectionRecosignalD1->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = recosignalvarianceHF[i][jeta][jphi];
          if (arecosignalHF[i][jeta][jphi] > 0.) {
            HFpositivedirectionRecosignalD1->Fill(jphi, ccc1);
            ccctest = 1.;  //HFpositivedirectionRecosignalD1->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1414       kcountHFpositivedirectionRecosignalD1   =     "<<kcountHFpositivedirectionRecosignalD1  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHFpositivedirectionRecosignalD1);
          HFpositivedirectionRecosignalD1->SetMarkerStyle(20);
          HFpositivedirectionRecosignalD1->SetMarkerSize(0.4);
          HFpositivedirectionRecosignalD1->GetYaxis()->SetLabelSize(0.04);
          HFpositivedirectionRecosignalD1->SetXTitle("HFpositivedirectionRecosignalD1 \b");
          HFpositivedirectionRecosignalD1->SetMarkerColor(2);
          HFpositivedirectionRecosignalD1->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHFpositivedirectionRecosignalD1 == 1)
            HFpositivedirectionRecosignalD1->SetXTitle("D for HF+ jeta = 28; depth = 1 \b");
          if (kcountHFpositivedirectionRecosignalD1 == 2)
            HFpositivedirectionRecosignalD1->SetXTitle("D for HF+ jeta = 29; depth = 1 \b");
          if (kcountHFpositivedirectionRecosignalD1 == 3)
            HFpositivedirectionRecosignalD1->SetXTitle("D for HF+ jeta = 30; depth = 1 \b");
          if (kcountHFpositivedirectionRecosignalD1 == 4)
            HFpositivedirectionRecosignalD1->SetXTitle("D for HF+ jeta = 31; depth = 1 \b");
          if (kcountHFpositivedirectionRecosignalD1 == 5)
            HFpositivedirectionRecosignalD1->SetXTitle("D for HF+ jeta = 32; depth = 1 \b");
          if (kcountHFpositivedirectionRecosignalD1 == 6)
            HFpositivedirectionRecosignalD1->SetXTitle("D for HF+ jeta = 33; depth = 1 \b");
          if (kcountHFpositivedirectionRecosignalD1 == 7)
            HFpositivedirectionRecosignalD1->SetXTitle("D for HF+ jeta = 34; depth = 1 \b");
          if (kcountHFpositivedirectionRecosignalD1 == 8)
            HFpositivedirectionRecosignalD1->SetXTitle("D for HF+ jeta = 35; depth = 1 \b");
          if (kcountHFpositivedirectionRecosignalD1 == 9)
            HFpositivedirectionRecosignalD1->SetXTitle("D for HF+ jeta = 36; depth = 1 \b");
          if (kcountHFpositivedirectionRecosignalD1 == 10)
            HFpositivedirectionRecosignalD1->SetXTitle("D for HF+ jeta = 37; depth = 1 \b");
          if (kcountHFpositivedirectionRecosignalD1 == 11)
            HFpositivedirectionRecosignalD1->SetXTitle("D for HF+ jeta = 38; depth = 1 \b");
          if (kcountHFpositivedirectionRecosignalD1 == 12)
            HFpositivedirectionRecosignalD1->SetXTitle("D for HF+ jeta = 39; depth = 1 \b");
          if (kcountHFpositivedirectionRecosignalD1 == 13)
            HFpositivedirectionRecosignalD1->SetXTitle("D for HF+ jeta = 40; depth = 1 \b");
          HFpositivedirectionRecosignalD1->Draw("Error");
          kcountHFpositivedirectionRecosignalD1++;
          if (kcountHFpositivedirectionRecosignalD1 > 13)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DrecosignalPositiveDirectionhistD1PhiSymmetryDepth1HF.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHFpositivedirectionRecosignalD1)
    delete h2CeffHFpositivedirectionRecosignalD1;
  //========================================================================================== 15
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=2
  //cout<<"      1D plot: D vs phi , different eta,  depth=2 *****" <<endl;
  c3x5->Clear();
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHFpositivedirectionRecosignalD2 = 1;
  TH1F *h2CeffHFpositivedirectionRecosignalD2 = new TH1F("h2CeffHFpositivedirectionRecosignalD2", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionRecosignalD:
    if (jeta - 41 >= 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=2
      for (int i = 1; i < 2; i++) {
        TH1F *HFpositivedirectionRecosignalD2 = (TH1F *)h2CeffHFpositivedirectionRecosignalD2->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = recosignalvarianceHF[i][jeta][jphi];
          if (arecosignalHF[i][jeta][jphi] > 0.) {
            HFpositivedirectionRecosignalD2->Fill(jphi, ccc1);
            ccctest = 1.;  //HFpositivedirectionRecosignalD2->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1515       kcountHFpositivedirectionRecosignalD2   =     "<<kcountHFpositivedirectionRecosignalD2  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHFpositivedirectionRecosignalD2);
          HFpositivedirectionRecosignalD2->SetMarkerStyle(20);
          HFpositivedirectionRecosignalD2->SetMarkerSize(0.4);
          HFpositivedirectionRecosignalD2->GetYaxis()->SetLabelSize(0.04);
          HFpositivedirectionRecosignalD2->SetXTitle("HFpositivedirectionRecosignalD2 \b");
          HFpositivedirectionRecosignalD2->SetMarkerColor(2);
          HFpositivedirectionRecosignalD2->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHFpositivedirectionRecosignalD2 == 1)
            HFpositivedirectionRecosignalD2->SetXTitle("D for HF+ jeta = 28; depth = 2 \b");
          if (kcountHFpositivedirectionRecosignalD2 == 2)
            HFpositivedirectionRecosignalD2->SetXTitle("D for HF+ jeta = 29; depth = 2 \b");
          if (kcountHFpositivedirectionRecosignalD2 == 3)
            HFpositivedirectionRecosignalD2->SetXTitle("D for HF+ jeta = 30; depth = 2 \b");
          if (kcountHFpositivedirectionRecosignalD2 == 4)
            HFpositivedirectionRecosignalD2->SetXTitle("D for HF+ jeta = 31; depth = 2 \b");
          if (kcountHFpositivedirectionRecosignalD2 == 5)
            HFpositivedirectionRecosignalD2->SetXTitle("D for HF+ jeta = 32; depth = 2 \b");
          if (kcountHFpositivedirectionRecosignalD2 == 6)
            HFpositivedirectionRecosignalD2->SetXTitle("D for HF+ jeta = 33; depth = 2 \b");
          if (kcountHFpositivedirectionRecosignalD2 == 7)
            HFpositivedirectionRecosignalD2->SetXTitle("D for HF+ jeta = 34; depth = 2 \b");
          if (kcountHFpositivedirectionRecosignalD2 == 8)
            HFpositivedirectionRecosignalD2->SetXTitle("D for HF+ jeta = 35; depth = 2 \b");
          if (kcountHFpositivedirectionRecosignalD2 == 9)
            HFpositivedirectionRecosignalD2->SetXTitle("D for HF+ jeta = 36; depth = 2 \b");
          if (kcountHFpositivedirectionRecosignalD2 == 10)
            HFpositivedirectionRecosignalD2->SetXTitle("D for HF+ jeta = 37; depth = 2 \b");
          if (kcountHFpositivedirectionRecosignalD2 == 11)
            HFpositivedirectionRecosignalD2->SetXTitle("D for HF+ jeta = 38; depth = 2 \b");
          if (kcountHFpositivedirectionRecosignalD2 == 12)
            HFpositivedirectionRecosignalD2->SetXTitle("D for HF+ jeta = 39; depth = 2 \b");
          if (kcountHFpositivedirectionRecosignalD2 == 13)
            HFpositivedirectionRecosignalD2->SetXTitle("D for HF+ jeta = 40; depth = 2 \b");
          HFpositivedirectionRecosignalD2->Draw("Error");
          kcountHFpositivedirectionRecosignalD2++;
          if (kcountHFpositivedirectionRecosignalD2 > 13)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DrecosignalPositiveDirectionhistD1PhiSymmetryDepth2HF.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHFpositivedirectionRecosignalD2)
    delete h2CeffHFpositivedirectionRecosignalD2;
  //========================================================================================== 22222214
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=1
  //cout<<"      1D plot: D vs phi , different eta,  depth=1 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHFnegativedirectionRecosignalD1 = 1;
  TH1F *h2CeffHFnegativedirectionRecosignalD1 = new TH1F("h2CeffHFnegativedirectionRecosignalD1", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionRecosignalD:
    if (jeta - 41 < 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=1
      for (int i = 0; i < 1; i++) {
        TH1F *HFnegativedirectionRecosignalD1 = (TH1F *)h2CeffHFnegativedirectionRecosignalD1->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = recosignalvarianceHF[i][jeta][jphi];
          if (arecosignalHF[i][jeta][jphi] > 0.) {
            HFnegativedirectionRecosignalD1->Fill(jphi, ccc1);
            ccctest = 1.;  //HFnegativedirectionRecosignalD1->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1414       kcountHFnegativedirectionRecosignalD1   =     "<<kcountHFnegativedirectionRecosignalD1  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHFnegativedirectionRecosignalD1);
          HFnegativedirectionRecosignalD1->SetMarkerStyle(20);
          HFnegativedirectionRecosignalD1->SetMarkerSize(0.4);
          HFnegativedirectionRecosignalD1->GetYaxis()->SetLabelSize(0.04);
          HFnegativedirectionRecosignalD1->SetXTitle("HFnegativedirectionRecosignalD1 \b");
          HFnegativedirectionRecosignalD1->SetMarkerColor(2);
          HFnegativedirectionRecosignalD1->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHFnegativedirectionRecosignalD1 == 1)
            HFnegativedirectionRecosignalD1->SetXTitle("D for HF- jeta =-41; depth = 1 \b");
          if (kcountHFnegativedirectionRecosignalD1 == 2)
            HFnegativedirectionRecosignalD1->SetXTitle("D for HF- jeta =-40; depth = 1 \b");
          if (kcountHFnegativedirectionRecosignalD1 == 3)
            HFnegativedirectionRecosignalD1->SetXTitle("D for HF- jeta =-39; depth = 1 \b");
          if (kcountHFnegativedirectionRecosignalD1 == 4)
            HFnegativedirectionRecosignalD1->SetXTitle("D for HF- jeta =-38; depth = 1 \b");
          if (kcountHFnegativedirectionRecosignalD1 == 5)
            HFnegativedirectionRecosignalD1->SetXTitle("D for HF- jeta =-37; depth = 1 \b");
          if (kcountHFnegativedirectionRecosignalD1 == 6)
            HFnegativedirectionRecosignalD1->SetXTitle("D for HF- jeta =-36; depth = 1 \b");
          if (kcountHFnegativedirectionRecosignalD1 == 7)
            HFnegativedirectionRecosignalD1->SetXTitle("D for HF- jeta =-35; depth = 1 \b");
          if (kcountHFnegativedirectionRecosignalD1 == 8)
            HFnegativedirectionRecosignalD1->SetXTitle("D for HF- jeta =-34; depth = 1 \b");
          if (kcountHFnegativedirectionRecosignalD1 == 9)
            HFnegativedirectionRecosignalD1->SetXTitle("D for HF- jeta =-33; depth = 1 \b");
          if (kcountHFnegativedirectionRecosignalD1 == 10)
            HFnegativedirectionRecosignalD1->SetXTitle("D for HF- jeta =-32; depth = 1 \b");
          if (kcountHFnegativedirectionRecosignalD1 == 11)
            HFnegativedirectionRecosignalD1->SetXTitle("D for HF- jeta =-31; depth = 1 \b");
          if (kcountHFnegativedirectionRecosignalD1 == 12)
            HFnegativedirectionRecosignalD1->SetXTitle("D for HF- jeta =-30; depth = 1 \b");
          if (kcountHFnegativedirectionRecosignalD1 == 13)
            HFnegativedirectionRecosignalD1->SetXTitle("D for HF- jeta =-29; depth = 1 \b");
          HFnegativedirectionRecosignalD1->Draw("Error");
          kcountHFnegativedirectionRecosignalD1++;
          if (kcountHFnegativedirectionRecosignalD1 > 13)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41< 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DrecosignalNegativeDirectionhistD1PhiSymmetryDepth1HF.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHFnegativedirectionRecosignalD1)
    delete h2CeffHFnegativedirectionRecosignalD1;
  //========================================================================================== 22222215
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=2
  //cout<<"      1D plot: D vs phi , different eta,  depth=2 *****" <<endl;
  c3x5->Clear();
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHFnegativedirectionRecosignalD2 = 1;
  TH1F *h2CeffHFnegativedirectionRecosignalD2 = new TH1F("h2CeffHFnegativedirectionRecosignalD2", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionRecosignalD:
    if (jeta - 41 < 0) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=2
      for (int i = 1; i < 2; i++) {
        TH1F *HFnegativedirectionRecosignalD2 = (TH1F *)h2CeffHFnegativedirectionRecosignalD2->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = recosignalvarianceHF[i][jeta][jphi];
          if (arecosignalHF[i][jeta][jphi] > 0.) {
            HFnegativedirectionRecosignalD2->Fill(jphi, ccc1);
            ccctest = 1.;  //HFnegativedirectionRecosignalD2->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1515       kcountHFnegativedirectionRecosignalD2   =     "<<kcountHFnegativedirectionRecosignalD2  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHFnegativedirectionRecosignalD2);
          HFnegativedirectionRecosignalD2->SetMarkerStyle(20);
          HFnegativedirectionRecosignalD2->SetMarkerSize(0.4);
          HFnegativedirectionRecosignalD2->GetYaxis()->SetLabelSize(0.04);
          HFnegativedirectionRecosignalD2->SetXTitle("HFnegativedirectionRecosignalD2 \b");
          HFnegativedirectionRecosignalD2->SetMarkerColor(2);
          HFnegativedirectionRecosignalD2->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHFnegativedirectionRecosignalD2 == 1)
            HFnegativedirectionRecosignalD2->SetXTitle("D for HF- jeta =-41; depth = 2 \b");
          if (kcountHFnegativedirectionRecosignalD2 == 2)
            HFnegativedirectionRecosignalD2->SetXTitle("D for HF- jeta =-40; depth = 2 \b");
          if (kcountHFnegativedirectionRecosignalD2 == 3)
            HFnegativedirectionRecosignalD2->SetXTitle("D for HF- jeta =-39; depth = 2 \b");
          if (kcountHFnegativedirectionRecosignalD2 == 4)
            HFnegativedirectionRecosignalD2->SetXTitle("D for HF- jeta =-38; depth = 2 \b");
          if (kcountHFnegativedirectionRecosignalD2 == 5)
            HFnegativedirectionRecosignalD2->SetXTitle("D for HF- jeta =-37; depth = 2 \b");
          if (kcountHFnegativedirectionRecosignalD2 == 6)
            HFnegativedirectionRecosignalD2->SetXTitle("D for HF- jeta =-36; depth = 2 \b");
          if (kcountHFnegativedirectionRecosignalD2 == 7)
            HFnegativedirectionRecosignalD2->SetXTitle("D for HF- jeta =-35; depth = 2 \b");
          if (kcountHFnegativedirectionRecosignalD2 == 8)
            HFnegativedirectionRecosignalD2->SetXTitle("D for HF- jeta =-34; depth = 2 \b");
          if (kcountHFnegativedirectionRecosignalD2 == 9)
            HFnegativedirectionRecosignalD2->SetXTitle("D for HF- jeta =-33; depth = 2 \b");
          if (kcountHFnegativedirectionRecosignalD2 == 10)
            HFnegativedirectionRecosignalD2->SetXTitle("D for HF- jeta =-32; depth = 2 \b");
          if (kcountHFnegativedirectionRecosignalD2 == 11)
            HFnegativedirectionRecosignalD2->SetXTitle("D for HF- jeta =-31; depth = 2 \b");
          if (kcountHFnegativedirectionRecosignalD2 == 12)
            HFnegativedirectionRecosignalD2->SetXTitle("D for HF- jeta =-30; depth = 2 \b");
          if (kcountHFnegativedirectionRecosignalD2 == 13)
            HFnegativedirectionRecosignalD2->SetXTitle("D for HF- jeta =-29; depth = 2 \b");
          HFnegativedirectionRecosignalD2->Draw("Error");
          kcountHFnegativedirectionRecosignalD2++;
          if (kcountHFnegativedirectionRecosignalD2 > 13)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41< 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DrecosignalNegativeDirectionhistD1PhiSymmetryDepth2HF.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHFnegativedirectionRecosignalD2)
    delete h2CeffHFnegativedirectionRecosignalD2;

  //=====================================================================       END of Recosignal HF for phi-symmetry
  //=====================================================================       END of Recosignal HF for phi-symmetry
  //=====================================================================       END of Recosignal HF for phi-symmetry
  //============================================================================================================       END of Recosignal for phi-symmetry
  //============================================================================================================       END of Recosignal for phi-symmetry
  //============================================================================================================       END of Recosignal for phi-symmetry

  ////////////////////// Start   Reconoise  Start Reconoise  Start   Reconoise  Start   Reconoise  Start   Reconoise Start  Reconoise Start Reconoise Start Reconoise Start Reconoise Start Reconoise Start
  ////////////////////// Start   Reconoise  Start Reconoise  Start   Reconoise  Start   Reconoise  Start   Reconoise Start  Reconoise Start Reconoise Start Reconoise Start Reconoise Start Reconoise Start
  ////////////////////// Start   Reconoise  Start Reconoise  Start   Reconoise  Start   Reconoise  Start   Reconoise Start  Reconoise Start Reconoise Start Reconoise Start Reconoise Start Reconoise Start
  ////////////////////////////////////////////////////////////////////////////////////////////////////     Reconoise HB
  ////////////////////////////////////////////////////////////////////////////////////////////////////     Reconoise HB
  ////////////////////////////////////////////////////////////////////////////////////////////////////     Reconoise HB
  //  int k_max[5]={0,4,7,4,4}; // maximum depth for each subdet
  //ndepth = k_max[5];
  ndepth = 4;
  double areconoiseHB[ndepth][njeta][njphi];
  double breconoiseHB[ndepth][njeta][njphi];
  double reconoisevarianceHB[ndepth][njeta][njphi];
  //                                   RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR:   Reconoise HB  recNoiseEnergy
  TH2F *recNoiseEnergy1HB1 = (TH2F *)dir->FindObjectAny("h_recNoiseEnergy1_HB1");
  TH2F *recNoiseEnergy0HB1 = (TH2F *)dir->FindObjectAny("h_recNoiseEnergy0_HB1");
  TH2F *recNoiseEnergyHB1 = (TH2F *)recNoiseEnergy1HB1->Clone("recNoiseEnergyHB1");
  recNoiseEnergyHB1->Divide(recNoiseEnergy1HB1, recNoiseEnergy0HB1, 1, 1, "B");
  TH2F *recNoiseEnergy1HB2 = (TH2F *)dir->FindObjectAny("h_recNoiseEnergy1_HB2");
  TH2F *recNoiseEnergy0HB2 = (TH2F *)dir->FindObjectAny("h_recNoiseEnergy0_HB2");
  TH2F *recNoiseEnergyHB2 = (TH2F *)recNoiseEnergy1HB2->Clone("recNoiseEnergyHB2");
  recNoiseEnergyHB2->Divide(recNoiseEnergy1HB2, recNoiseEnergy0HB2, 1, 1, "B");
  TH2F *recNoiseEnergy1HB3 = (TH2F *)dir->FindObjectAny("h_recNoiseEnergy1_HB3");
  TH2F *recNoiseEnergy0HB3 = (TH2F *)dir->FindObjectAny("h_recNoiseEnergy0_HB3");
  TH2F *recNoiseEnergyHB3 = (TH2F *)recNoiseEnergy1HB3->Clone("recNoiseEnergyHB3");
  recNoiseEnergyHB3->Divide(recNoiseEnergy1HB3, recNoiseEnergy0HB3, 1, 1, "B");
  TH2F *recNoiseEnergy1HB4 = (TH2F *)dir->FindObjectAny("h_recNoiseEnergy1_HB4");
  TH2F *recNoiseEnergy0HB4 = (TH2F *)dir->FindObjectAny("h_recNoiseEnergy0_HB4");
  TH2F *recNoiseEnergyHB4 = (TH2F *)recNoiseEnergy1HB4->Clone("recNoiseEnergyHB4");
  recNoiseEnergyHB4->Divide(recNoiseEnergy1HB4, recNoiseEnergy0HB4, 1, 1, "B");
  for (int jeta = 0; jeta < njeta; jeta++) {
    if ((jeta - 41 >= -16 && jeta - 41 <= -1) || (jeta - 41 >= 0 && jeta - 41 <= 15)) {
      //====================================================================== PHI normalization & put R into massive areconoiseHB
      //preparation for PHI normalization:
      double sumreconoiseHB0 = 0;
      int nsumreconoiseHB0 = 0;
      double sumreconoiseHB1 = 0;
      int nsumreconoiseHB1 = 0;
      double sumreconoiseHB2 = 0;
      int nsumreconoiseHB2 = 0;
      double sumreconoiseHB3 = 0;
      int nsumreconoiseHB3 = 0;
      for (int jphi = 0; jphi < njphi; jphi++) {
        areconoiseHB[0][jeta][jphi] = recNoiseEnergyHB1->GetBinContent(jeta + 1, jphi + 1);
        areconoiseHB[1][jeta][jphi] = recNoiseEnergyHB2->GetBinContent(jeta + 1, jphi + 1);
        areconoiseHB[2][jeta][jphi] = recNoiseEnergyHB3->GetBinContent(jeta + 1, jphi + 1);
        areconoiseHB[3][jeta][jphi] = recNoiseEnergyHB4->GetBinContent(jeta + 1, jphi + 1);
        breconoiseHB[0][jeta][jphi] = recNoiseEnergyHB1->GetBinContent(jeta + 1, jphi + 1);
        breconoiseHB[1][jeta][jphi] = recNoiseEnergyHB2->GetBinContent(jeta + 1, jphi + 1);
        breconoiseHB[2][jeta][jphi] = recNoiseEnergyHB3->GetBinContent(jeta + 1, jphi + 1);
        breconoiseHB[3][jeta][jphi] = recNoiseEnergyHB4->GetBinContent(jeta + 1, jphi + 1);
        if (areconoiseHB[0][jeta][jphi] != 0.) {
          sumreconoiseHB0 += areconoiseHB[0][jeta][jphi];
          ++nsumreconoiseHB0;
        }
        if (areconoiseHB[1][jeta][jphi] != 0.) {
          sumreconoiseHB1 += areconoiseHB[1][jeta][jphi];
          ++nsumreconoiseHB1;
        }
        if (areconoiseHB[2][jeta][jphi] != 0.) {
          sumreconoiseHB2 += areconoiseHB[2][jeta][jphi];
          ++nsumreconoiseHB2;
        }
        if (areconoiseHB[3][jeta][jphi] != 0.) {
          sumreconoiseHB3 += areconoiseHB[3][jeta][jphi];
          ++nsumreconoiseHB3;
        }
      }  // phi
      // PHI normalization:  DIF
      for (int jphi = 0; jphi < njphi; jphi++) {
        if (sumreconoiseHB0 != 0.)
          breconoiseHB[0][jeta][jphi] -= (sumreconoiseHB0 / nsumreconoiseHB0);
        if (sumreconoiseHB1 != 0.)
          breconoiseHB[1][jeta][jphi] -= (sumreconoiseHB1 / nsumreconoiseHB1);
        if (sumreconoiseHB2 != 0.)
          breconoiseHB[2][jeta][jphi] -= (sumreconoiseHB2 / nsumreconoiseHB2);
        if (sumreconoiseHB3 != 0.)
          breconoiseHB[3][jeta][jphi] -= (sumreconoiseHB3 / nsumreconoiseHB3);
      }  // phi
      // PHI normalization:  R
      for (int jphi = 0; jphi < njphi; jphi++) {
        if (areconoiseHB[0][jeta][jphi] != 0.)
          areconoiseHB[0][jeta][jphi] /= (sumreconoiseHB0 / nsumreconoiseHB0);
        if (areconoiseHB[1][jeta][jphi] != 0.)
          areconoiseHB[1][jeta][jphi] /= (sumreconoiseHB1 / nsumreconoiseHB1);
        if (areconoiseHB[2][jeta][jphi] != 0.)
          areconoiseHB[2][jeta][jphi] /= (sumreconoiseHB2 / nsumreconoiseHB2);
        if (areconoiseHB[3][jeta][jphi] != 0.)
          areconoiseHB[3][jeta][jphi] /= (sumreconoiseHB3 / nsumreconoiseHB3);
      }  // phi
    }    //if eta
  }      //eta
  //------------------------  2D-eta/phi-plot: R, averaged over depthfs
  //======================================================================
  //======================================================================
  //cout<<"      R2D-eta/phi-plot: R, averaged over depthfs *****" <<endl;
  c2x1->Clear();
  /////////////////
  c2x1->Divide(2, 1);
  c2x1->cd(1);
  TH2F *GefzRreconoiseHB42D = new TH2F("GefzRreconoiseHB42D", "", neta, -41., 41., nphi, 0., 72.);
  TH2F *GefzRreconoiseHB42D0 = new TH2F("GefzRreconoiseHB42D0", "", neta, -41., 41., nphi, 0., 72.);
  TH2F *GefzRreconoiseHB42DF = (TH2F *)GefzRreconoiseHB42D0->Clone("GefzRreconoiseHB42DF");
  for (int i = 0; i < ndepth; i++) {
    for (int jeta = 0; jeta < neta; jeta++) {
      if ((jeta - 41 >= -16 && jeta - 41 <= -1) || (jeta - 41 >= 0 && jeta - 41 <= 15)) {
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = areconoiseHB[i][jeta][jphi];
          int k2plot = jeta - 41;
          int kkk = k2plot;  //if(k2plot >0 ) kkk=k2plot+1; //-41 +41 !=0
          if (ccc1 != 0.) {
            GefzRreconoiseHB42D->Fill(kkk, jphi, ccc1);
            GefzRreconoiseHB42D0->Fill(kkk, jphi, 1.);
          }
        }
      }
    }
  }
  GefzRreconoiseHB42DF->Divide(GefzRreconoiseHB42D, GefzRreconoiseHB42D0, 1, 1, "B");  // average A
  gPad->SetGridy();
  gPad->SetGridx();  //      gPad->SetLogz();
  GefzRreconoiseHB42DF->SetXTitle("<R>_depth       #eta  \b");
  GefzRreconoiseHB42DF->SetYTitle("      #phi \b");
  GefzRreconoiseHB42DF->Draw("COLZ");

  c2x1->cd(2);
  TH1F *energyhitNoise_HB = (TH1F *)dir->FindObjectAny("h_energyhitNoise_HB");
  energyhitNoise_HB->SetMarkerStyle(20);
  energyhitNoise_HB->SetMarkerSize(0.4);
  energyhitNoise_HB->GetYaxis()->SetLabelSize(0.04);
  energyhitNoise_HB->SetXTitle("energyhitNoise_HB \b");
  energyhitNoise_HB->SetMarkerColor(2);
  energyhitNoise_HB->SetLineColor(0);
  gPad->SetGridy();
  gPad->SetGridx();
  energyhitNoise_HB->Draw("Error");

  /////////////////
  c2x1->Update();
  c2x1->Print("RreconoiseGeneralD2PhiSymmetryHB.png");
  c2x1->Clear();
  // clean-up
  if (GefzRreconoiseHB42D)
    delete GefzRreconoiseHB42D;
  if (GefzRreconoiseHB42D0)
    delete GefzRreconoiseHB42D0;
  if (GefzRreconoiseHB42DF)
    delete GefzRreconoiseHB42DF;
  //====================================================================== 1D plot: R vs phi , averaged over depthfs & eta
  //======================================================================
  //cout<<"      1D plot: R vs phi , averaged over depthfs & eta *****" <<endl;
  c1x1->Clear();
  /////////////////
  c1x1->Divide(1, 1);
  c1x1->cd(1);
  TH1F *GefzRreconoiseHB41D = new TH1F("GefzRreconoiseHB41D", "", nphi, 0., 72.);
  TH1F *GefzRreconoiseHB41D0 = new TH1F("GefzRreconoiseHB41D0", "", nphi, 0., 72.);
  TH1F *GefzRreconoiseHB41DF = (TH1F *)GefzRreconoiseHB41D0->Clone("GefzRreconoiseHB41DF");
  for (int jphi = 0; jphi < nphi; jphi++) {
    for (int jeta = 0; jeta < neta; jeta++) {
      if ((jeta - 41 >= -16 && jeta - 41 <= -1) || (jeta - 41 >= 0 && jeta - 41 <= 15)) {
        for (int i = 0; i < ndepth; i++) {
          double ccc1 = areconoiseHB[i][jeta][jphi];
          if (ccc1 != 0.) {
            GefzRreconoiseHB41D->Fill(jphi, ccc1);
            GefzRreconoiseHB41D0->Fill(jphi, 1.);
          }
        }
      }
    }
  }
  GefzRreconoiseHB41DF->Divide(GefzRreconoiseHB41D, GefzRreconoiseHB41D0, 1, 1, "B");  // R averaged over depthfs & eta
  GefzRreconoiseHB41D0->Sumw2();
  //    for (int jphi=1;jphi<73;jphi++) {GefzRreconoiseHB41DF->SetBinError(jphi,0.01);}
  gPad->SetGridy();
  gPad->SetGridx();  //      gPad->SetLogz();
  GefzRreconoiseHB41DF->SetMarkerStyle(20);
  GefzRreconoiseHB41DF->SetMarkerSize(1.4);
  GefzRreconoiseHB41DF->GetZaxis()->SetLabelSize(0.08);
  GefzRreconoiseHB41DF->SetXTitle("#phi  \b");
  GefzRreconoiseHB41DF->SetYTitle("  <R> \b");
  GefzRreconoiseHB41DF->SetZTitle("<R>_PHI  - AllDepthfs \b");
  GefzRreconoiseHB41DF->SetMarkerColor(4);
  GefzRreconoiseHB41DF->SetLineColor(
      4);  //GefzRreconoiseHB41DF->SetMinimum(0.8);     //      GefzRreconoiseHB41DF->SetMaximum(1.000);
  GefzRreconoiseHB41DF->Draw("Error");
  /////////////////
  c1x1->Update();
  c1x1->Print("RreconoiseGeneralD1PhiSymmetryHB.png");
  c1x1->Clear();
  // clean-up
  if (GefzRreconoiseHB41D)
    delete GefzRreconoiseHB41D;
  if (GefzRreconoiseHB41D0)
    delete GefzRreconoiseHB41D0;
  if (GefzRreconoiseHB41DF)
    delete GefzRreconoiseHB41DF;
  //========================================================================================== 4
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=1
  //cout<<"      1D plot: R vs phi , different eta,  depth=1 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(4, 4);
  c3x5->cd(1);
  int kcountHBpositivedirectionReconoise1 = 1;
  TH1F *h2CeffHBpositivedirectionReconoise1 = new TH1F("h2CeffHBpositivedirectionReconoise1", "", nphi, 0., 72.);
  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionReconoise:
    if (jeta - 41 >= 0 && jeta - 41 <= 15) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=1
      for (int i = 0; i < 1; i++) {
        TH1F *HBpositivedirectionReconoise1 = (TH1F *)h2CeffHBpositivedirectionReconoise1->Clone("twod1");
        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = areconoiseHB[i][jeta][jphi];
          if (ccc1 != 0.) {
            HBpositivedirectionReconoise1->Fill(jphi, ccc1);
            ccctest = 1.;  //HBpositivedirectionReconoise1->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //	  cout<<"444        kcountHBpositivedirectionReconoise1   =     "<<kcountHBpositivedirectionReconoise1  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHBpositivedirectionReconoise1);
          HBpositivedirectionReconoise1->SetMarkerStyle(20);
          HBpositivedirectionReconoise1->SetMarkerSize(0.4);
          HBpositivedirectionReconoise1->GetYaxis()->SetLabelSize(0.04);
          HBpositivedirectionReconoise1->SetXTitle("HBpositivedirectionReconoise1 \b");
          HBpositivedirectionReconoise1->SetMarkerColor(2);
          HBpositivedirectionReconoise1->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHBpositivedirectionReconoise1 == 1)
            HBpositivedirectionReconoise1->SetXTitle("R for HB+ jeta =  0; depth = 1 \b");
          if (kcountHBpositivedirectionReconoise1 == 2)
            HBpositivedirectionReconoise1->SetXTitle("R for HB+ jeta =  1; depth = 1 \b");
          if (kcountHBpositivedirectionReconoise1 == 3)
            HBpositivedirectionReconoise1->SetXTitle("R for HB+ jeta =  2; depth = 1 \b");
          if (kcountHBpositivedirectionReconoise1 == 4)
            HBpositivedirectionReconoise1->SetXTitle("R for HB+ jeta =  3; depth = 1 \b");
          if (kcountHBpositivedirectionReconoise1 == 5)
            HBpositivedirectionReconoise1->SetXTitle("R for HB+ jeta =  4; depth = 1 \b");
          if (kcountHBpositivedirectionReconoise1 == 6)
            HBpositivedirectionReconoise1->SetXTitle("R for HB+ jeta =  5; depth = 1 \b");
          if (kcountHBpositivedirectionReconoise1 == 7)
            HBpositivedirectionReconoise1->SetXTitle("R for HB+ jeta =  6; depth = 1 \b");
          if (kcountHBpositivedirectionReconoise1 == 8)
            HBpositivedirectionReconoise1->SetXTitle("R for HB+ jeta =  7; depth = 1 \b");
          if (kcountHBpositivedirectionReconoise1 == 9)
            HBpositivedirectionReconoise1->SetXTitle("R for HB+ jeta =  8; depth = 1 \b");
          if (kcountHBpositivedirectionReconoise1 == 10)
            HBpositivedirectionReconoise1->SetXTitle("R for HB+ jeta =  9; depth = 1 \b");
          if (kcountHBpositivedirectionReconoise1 == 11)
            HBpositivedirectionReconoise1->SetXTitle("R for HB+ jeta = 10; depth = 1 \b");
          if (kcountHBpositivedirectionReconoise1 == 12)
            HBpositivedirectionReconoise1->SetXTitle("R for HB+ jeta = 11; depth = 1 \b");
          if (kcountHBpositivedirectionReconoise1 == 13)
            HBpositivedirectionReconoise1->SetXTitle("R for HB+ jeta = 12; depth = 1 \b");
          if (kcountHBpositivedirectionReconoise1 == 14)
            HBpositivedirectionReconoise1->SetXTitle("R for HB+ jeta = 13; depth = 1 \b");
          if (kcountHBpositivedirectionReconoise1 == 15)
            HBpositivedirectionReconoise1->SetXTitle("R for HB+ jeta = 14; depth = 1 \b");
          if (kcountHBpositivedirectionReconoise1 == 16)
            HBpositivedirectionReconoise1->SetXTitle("R for HB+ jeta = 15; depth = 1 \b");
          HBpositivedirectionReconoise1->Draw("Error");
          kcountHBpositivedirectionReconoise1++;
          if (kcountHBpositivedirectionReconoise1 > 16)
            break;  //
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RreconoisePositiveDirectionhistD1PhiSymmetryDepth1HB.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHBpositivedirectionReconoise1)
    delete h2CeffHBpositivedirectionReconoise1;

  //========================================================================================== 5
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=2
  //  cout<<"      1D plot: R vs phi , different eta,  depth=2 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(4, 4);
  c3x5->cd(1);
  int kcountHBpositivedirectionReconoise2 = 1;
  TH1F *h2CeffHBpositivedirectionReconoise2 = new TH1F("h2CeffHBpositivedirectionReconoise2", "", nphi, 0., 72.);
  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionReconoise:
    if (jeta - 41 >= 0 && jeta - 41 <= 15) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=2
      for (int i = 1; i < 2; i++) {
        TH1F *HBpositivedirectionReconoise2 = (TH1F *)h2CeffHBpositivedirectionReconoise2->Clone("twod1");
        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = areconoiseHB[i][jeta][jphi];
          if (ccc1 != 0.) {
            HBpositivedirectionReconoise2->Fill(jphi, ccc1);
            ccctest = 1.;  //HBpositivedirectionReconoise2->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"555        kcountHBpositivedirectionReconoise2   =     "<<kcountHBpositivedirectionReconoise2  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHBpositivedirectionReconoise2);
          HBpositivedirectionReconoise2->SetMarkerStyle(20);
          HBpositivedirectionReconoise2->SetMarkerSize(0.4);
          HBpositivedirectionReconoise2->GetYaxis()->SetLabelSize(0.04);
          HBpositivedirectionReconoise2->SetXTitle("HBpositivedirectionReconoise2 \b");
          HBpositivedirectionReconoise2->SetMarkerColor(2);
          HBpositivedirectionReconoise2->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHBpositivedirectionReconoise2 == 1)
            HBpositivedirectionReconoise2->SetXTitle("R for HB+ jeta =  0; depth = 2 \b");
          if (kcountHBpositivedirectionReconoise2 == 2)
            HBpositivedirectionReconoise2->SetXTitle("R for HB+ jeta =  1; depth = 2 \b");
          if (kcountHBpositivedirectionReconoise2 == 3)
            HBpositivedirectionReconoise2->SetXTitle("R for HB+ jeta =  2; depth = 2 \b");
          if (kcountHBpositivedirectionReconoise2 == 4)
            HBpositivedirectionReconoise2->SetXTitle("R for HB+ jeta =  3; depth = 2 \b");
          if (kcountHBpositivedirectionReconoise2 == 5)
            HBpositivedirectionReconoise2->SetXTitle("R for HB+ jeta =  4; depth = 2 \b");
          if (kcountHBpositivedirectionReconoise2 == 6)
            HBpositivedirectionReconoise2->SetXTitle("R for HB+ jeta =  5; depth = 2 \b");
          if (kcountHBpositivedirectionReconoise2 == 7)
            HBpositivedirectionReconoise2->SetXTitle("R for HB+ jeta =  6; depth = 2 \b");
          if (kcountHBpositivedirectionReconoise2 == 8)
            HBpositivedirectionReconoise2->SetXTitle("R for HB+ jeta =  7; depth = 2 \b");
          if (kcountHBpositivedirectionReconoise2 == 9)
            HBpositivedirectionReconoise2->SetXTitle("R for HB+ jeta =  8; depth = 2 \b");
          if (kcountHBpositivedirectionReconoise2 == 10)
            HBpositivedirectionReconoise2->SetXTitle("R for HB+ jeta =  9; depth = 2 \b");
          if (kcountHBpositivedirectionReconoise2 == 11)
            HBpositivedirectionReconoise2->SetXTitle("R for HB+ jeta = 10; depth = 2 \b");
          if (kcountHBpositivedirectionReconoise2 == 12)
            HBpositivedirectionReconoise2->SetXTitle("R for HB+ jeta = 11; depth = 2 \b");
          if (kcountHBpositivedirectionReconoise2 == 13)
            HBpositivedirectionReconoise2->SetXTitle("R for HB+ jeta = 12; depth = 2 \b");
          if (kcountHBpositivedirectionReconoise2 == 14)
            HBpositivedirectionReconoise2->SetXTitle("R for HB+ jeta = 13; depth = 2 \b");
          if (kcountHBpositivedirectionReconoise2 == 15)
            HBpositivedirectionReconoise2->SetXTitle("R for HB+ jeta = 14; depth = 2 \b");
          if (kcountHBpositivedirectionReconoise2 == 16)
            HBpositivedirectionReconoise2->SetXTitle("R for HB+ jeta = 15; depth = 2 \b");
          HBpositivedirectionReconoise2->Draw("Error");
          kcountHBpositivedirectionReconoise2++;
          if (kcountHBpositivedirectionReconoise2 > 16)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RreconoisePositiveDirectionhistD1PhiSymmetryDepth2HB.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHBpositivedirectionReconoise2)
    delete h2CeffHBpositivedirectionReconoise2;
  //========================================================================================== 6
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=3
  //cout<<"      1D plot: R vs phi , different eta,  depth=3 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(4, 4);
  c3x5->cd(1);
  int kcountHBpositivedirectionReconoise3 = 1;
  TH1F *h2CeffHBpositivedirectionReconoise3 = new TH1F("h2CeffHBpositivedirectionReconoise3", "", nphi, 0., 72.);
  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionReconoise:
    if (jeta - 41 >= 0 && jeta - 41 <= 15) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=3
      for (int i = 2; i < 3; i++) {
        TH1F *HBpositivedirectionReconoise3 = (TH1F *)h2CeffHBpositivedirectionReconoise3->Clone("twod1");
        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = areconoiseHB[i][jeta][jphi];
          if (ccc1 != 0.) {
            HBpositivedirectionReconoise3->Fill(jphi, ccc1);
            ccctest = 1.;  //HBpositivedirectionReconoise3->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"666        kcountHBpositivedirectionReconoise3   =     "<<kcountHBpositivedirectionReconoise3  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHBpositivedirectionReconoise3);
          HBpositivedirectionReconoise3->SetMarkerStyle(20);
          HBpositivedirectionReconoise3->SetMarkerSize(0.4);
          HBpositivedirectionReconoise3->GetYaxis()->SetLabelSize(0.04);
          HBpositivedirectionReconoise3->SetXTitle("HBpositivedirectionReconoise3 \b");
          HBpositivedirectionReconoise3->SetMarkerColor(2);
          HBpositivedirectionReconoise3->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHBpositivedirectionReconoise3 == 1)
            HBpositivedirectionReconoise3->SetXTitle("R for HB+ jeta =  0; depth = 3 \b");
          if (kcountHBpositivedirectionReconoise3 == 2)
            HBpositivedirectionReconoise3->SetXTitle("R for HB+ jeta =  1; depth = 3 \b");
          if (kcountHBpositivedirectionReconoise3 == 3)
            HBpositivedirectionReconoise3->SetXTitle("R for HB+ jeta =  2; depth = 3 \b");
          if (kcountHBpositivedirectionReconoise3 == 4)
            HBpositivedirectionReconoise3->SetXTitle("R for HB+ jeta =  3; depth = 3 \b");
          if (kcountHBpositivedirectionReconoise3 == 5)
            HBpositivedirectionReconoise3->SetXTitle("R for HB+ jeta =  4; depth = 3 \b");
          if (kcountHBpositivedirectionReconoise3 == 6)
            HBpositivedirectionReconoise3->SetXTitle("R for HB+ jeta =  5; depth = 3 \b");
          if (kcountHBpositivedirectionReconoise3 == 7)
            HBpositivedirectionReconoise3->SetXTitle("R for HB+ jeta =  6; depth = 3 \b");
          if (kcountHBpositivedirectionReconoise3 == 8)
            HBpositivedirectionReconoise3->SetXTitle("R for HB+ jeta =  7; depth = 3 \b");
          if (kcountHBpositivedirectionReconoise3 == 9)
            HBpositivedirectionReconoise3->SetXTitle("R for HB+ jeta =  8; depth = 3 \b");
          if (kcountHBpositivedirectionReconoise3 == 10)
            HBpositivedirectionReconoise3->SetXTitle("R for HB+ jeta =  9; depth = 3 \b");
          if (kcountHBpositivedirectionReconoise3 == 11)
            HBpositivedirectionReconoise3->SetXTitle("R for HB+ jeta =  0; depth = 3 \b");
          if (kcountHBpositivedirectionReconoise3 == 12)
            HBpositivedirectionReconoise3->SetXTitle("R for HB+ jeta = 11; depth = 3 \b");
          if (kcountHBpositivedirectionReconoise3 == 13)
            HBpositivedirectionReconoise3->SetXTitle("R for HB+ jeta = 12; depth = 3 \b");
          if (kcountHBpositivedirectionReconoise3 == 14)
            HBpositivedirectionReconoise3->SetXTitle("R for HB+ jeta = 13; depth = 3 \b");
          if (kcountHBpositivedirectionReconoise3 == 15)
            HBpositivedirectionReconoise3->SetXTitle("R for HB+ jeta = 14; depth = 3 \b");
          if (kcountHBpositivedirectionReconoise3 == 16)
            HBpositivedirectionReconoise3->SetXTitle("R for HB+ jeta = 15; depth = 3 \b");
          HBpositivedirectionReconoise3->Draw("Error");
          kcountHBpositivedirectionReconoise3++;
          if (kcountHBpositivedirectionReconoise3 > 16)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RreconoisePositiveDirectionhistD1PhiSymmetryDepth3HB.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHBpositivedirectionReconoise3)
    delete h2CeffHBpositivedirectionReconoise3;
  //========================================================================================== 7
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=4
  //cout<<"      1D plot: R vs phi , different eta,  depth=4 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(4, 4);
  c3x5->cd(1);
  int kcountHBpositivedirectionReconoise4 = 1;
  TH1F *h2CeffHBpositivedirectionReconoise4 = new TH1F("h2CeffHBpositivedirectionReconoise4", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionReconoise:
    if (jeta - 41 >= 0 && jeta - 41 <= 15) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=4
      for (int i = 3; i < 4; i++) {
        TH1F *HBpositivedirectionReconoise4 = (TH1F *)h2CeffHBpositivedirectionReconoise4->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = areconoiseHB[i][jeta][jphi];
          if (ccc1 != 0.) {
            HBpositivedirectionReconoise4->Fill(jphi, ccc1);
            ccctest = 1.;  //HBpositivedirectionReconoise4->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"777        kcountHBpositivedirectionReconoise4   =     "<<kcountHBpositivedirectionReconoise4  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHBpositivedirectionReconoise4);
          HBpositivedirectionReconoise4->SetMarkerStyle(20);
          HBpositivedirectionReconoise4->SetMarkerSize(0.4);
          HBpositivedirectionReconoise4->GetYaxis()->SetLabelSize(0.04);
          HBpositivedirectionReconoise4->SetXTitle("HBpositivedirectionReconoise4 \b");
          HBpositivedirectionReconoise4->SetMarkerColor(2);
          HBpositivedirectionReconoise4->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHBpositivedirectionReconoise4 == 1)
            HBpositivedirectionReconoise4->SetXTitle("R for HB+ jeta =  0; depth = 4 \b");
          if (kcountHBpositivedirectionReconoise4 == 2)
            HBpositivedirectionReconoise4->SetXTitle("R for HB+ jeta =  1; depth = 4 \b");
          if (kcountHBpositivedirectionReconoise4 == 3)
            HBpositivedirectionReconoise4->SetXTitle("R for HB+ jeta =  2; depth = 4 \b");
          if (kcountHBpositivedirectionReconoise4 == 4)
            HBpositivedirectionReconoise4->SetXTitle("R for HB+ jeta =  3; depth = 4 \b");
          if (kcountHBpositivedirectionReconoise4 == 5)
            HBpositivedirectionReconoise4->SetXTitle("R for HB+ jeta =  4; depth = 4 \b");
          if (kcountHBpositivedirectionReconoise4 == 6)
            HBpositivedirectionReconoise4->SetXTitle("R for HB+ jeta =  5; depth = 4 \b");
          if (kcountHBpositivedirectionReconoise4 == 7)
            HBpositivedirectionReconoise4->SetXTitle("R for HB+ jeta =  6; depth = 4 \b");
          if (kcountHBpositivedirectionReconoise4 == 8)
            HBpositivedirectionReconoise4->SetXTitle("R for HB+ jeta =  7; depth = 4 \b");
          if (kcountHBpositivedirectionReconoise4 == 9)
            HBpositivedirectionReconoise4->SetXTitle("R for HB+ jeta =  8; depth = 4 \b");
          if (kcountHBpositivedirectionReconoise4 == 10)
            HBpositivedirectionReconoise4->SetXTitle("R for HB+ jeta =  9; depth = 4 \b");
          if (kcountHBpositivedirectionReconoise4 == 11)
            HBpositivedirectionReconoise4->SetXTitle("R for HB+ jeta = 10; depth = 4 \b");
          if (kcountHBpositivedirectionReconoise4 == 12)
            HBpositivedirectionReconoise4->SetXTitle("R for HB+ jeta = 11; depth = 4 \b");
          if (kcountHBpositivedirectionReconoise4 == 13)
            HBpositivedirectionReconoise4->SetXTitle("R for HB+ jeta = 12; depth = 4 \b");
          if (kcountHBpositivedirectionReconoise4 == 14)
            HBpositivedirectionReconoise4->SetXTitle("R for HB+ jeta = 13; depth = 4 \b");
          if (kcountHBpositivedirectionReconoise4 == 15)
            HBpositivedirectionReconoise4->SetXTitle("R for HB+ jeta = 14; depth = 4 \b");
          if (kcountHBpositivedirectionReconoise4 == 16)
            HBpositivedirectionReconoise4->SetXTitle("R for HB+ jeta = 15; depth = 4 \b");
          HBpositivedirectionReconoise4->Draw("Error");
          kcountHBpositivedirectionReconoise4++;
          if (kcountHBpositivedirectionReconoise4 > 16)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RreconoisePositiveDirectionhistD1PhiSymmetryDepth4HB.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHBpositivedirectionReconoise4)
    delete h2CeffHBpositivedirectionReconoise4;

  //========================================================================================== 1114
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=1
  //cout<<"      1D plot: R vs phi , different eta,  depth=1 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(4, 4);
  c3x5->cd(1);
  int kcountHBnegativedirectionReconoise1 = 1;
  TH1F *h2CeffHBnegativedirectionReconoise1 = new TH1F("h2CeffHBnegativedirectionReconoise1", "", nphi, 0., 72.);
  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionReconoise:
    if (jeta - 41 >= -16 && jeta - 41 <= -1) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=1
      for (int i = 0; i < 1; i++) {
        TH1F *HBnegativedirectionReconoise1 = (TH1F *)h2CeffHBnegativedirectionReconoise1->Clone("twod1");
        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = areconoiseHB[i][jeta][jphi];
          if (ccc1 != 0.) {
            HBnegativedirectionReconoise1->Fill(jphi, ccc1);
            ccctest = 1.;  //HBnegativedirectionReconoise1->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //	  cout<<"444        kcountHBnegativedirectionReconoise1   =     "<<kcountHBnegativedirectionReconoise1  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHBnegativedirectionReconoise1);
          HBnegativedirectionReconoise1->SetMarkerStyle(20);
          HBnegativedirectionReconoise1->SetMarkerSize(0.4);
          HBnegativedirectionReconoise1->GetYaxis()->SetLabelSize(0.04);
          HBnegativedirectionReconoise1->SetXTitle("HBnegativedirectionReconoise1 \b");
          HBnegativedirectionReconoise1->SetMarkerColor(2);
          HBnegativedirectionReconoise1->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHBnegativedirectionReconoise1 == 1)
            HBnegativedirectionReconoise1->SetXTitle("R for HB- jeta = -16; depth = 1 \b");
          if (kcountHBnegativedirectionReconoise1 == 2)
            HBnegativedirectionReconoise1->SetXTitle("R for HB- jeta = -15; depth = 1 \b");
          if (kcountHBnegativedirectionReconoise1 == 3)
            HBnegativedirectionReconoise1->SetXTitle("R for HB- jeta = -14; depth = 1 \b");
          if (kcountHBnegativedirectionReconoise1 == 4)
            HBnegativedirectionReconoise1->SetXTitle("R for HB- jeta = -13; depth = 1 \b");
          if (kcountHBnegativedirectionReconoise1 == 5)
            HBnegativedirectionReconoise1->SetXTitle("R for HB- jeta = -12; depth = 1 \b");
          if (kcountHBnegativedirectionReconoise1 == 6)
            HBnegativedirectionReconoise1->SetXTitle("R for HB- jeta = -11; depth = 1 \b");
          if (kcountHBnegativedirectionReconoise1 == 7)
            HBnegativedirectionReconoise1->SetXTitle("R for HB- jeta = -10; depth = 1 \b");
          if (kcountHBnegativedirectionReconoise1 == 8)
            HBnegativedirectionReconoise1->SetXTitle("R for HB- jeta =  -9; depth = 1 \b");
          if (kcountHBnegativedirectionReconoise1 == 9)
            HBnegativedirectionReconoise1->SetXTitle("R for HB- jeta =  -8; depth = 1 \b");
          if (kcountHBnegativedirectionReconoise1 == 10)
            HBnegativedirectionReconoise1->SetXTitle("R for HB- jeta =  -7; depth = 1 \b");
          if (kcountHBnegativedirectionReconoise1 == 11)
            HBnegativedirectionReconoise1->SetXTitle("R for HB- jeta =  -6; depth = 1 \b");
          if (kcountHBnegativedirectionReconoise1 == 12)
            HBnegativedirectionReconoise1->SetXTitle("R for HB- jeta =  -5; depth = 1 \b");
          if (kcountHBnegativedirectionReconoise1 == 13)
            HBnegativedirectionReconoise1->SetXTitle("R for HB- jeta =  -4; depth = 1 \b");
          if (kcountHBnegativedirectionReconoise1 == 14)
            HBnegativedirectionReconoise1->SetXTitle("R for HB- jeta =  -3; depth = 1 \b");
          if (kcountHBnegativedirectionReconoise1 == 15)
            HBnegativedirectionReconoise1->SetXTitle("R for HB- jeta =  -2; depth = 1 \b");
          if (kcountHBnegativedirectionReconoise1 == 16)
            HBnegativedirectionReconoise1->SetXTitle("R for HB- jeta =  -1; depth = 1 \b");
          HBnegativedirectionReconoise1->Draw("Error");
          kcountHBnegativedirectionReconoise1++;
          if (kcountHBnegativedirectionReconoise1 > 16)
            break;  //
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 < 0 )
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RreconoiseNegativeDirectionhistD1PhiSymmetryDepth1HB.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHBnegativedirectionReconoise1)
    delete h2CeffHBnegativedirectionReconoise1;

  //========================================================================================== 1115
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=2
  //  cout<<"      1D plot: R vs phi , different eta,  depth=2 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(4, 4);
  c3x5->cd(1);
  int kcountHBnegativedirectionReconoise2 = 1;
  TH1F *h2CeffHBnegativedirectionReconoise2 = new TH1F("h2CeffHBnegativedirectionReconoise2", "", nphi, 0., 72.);
  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionReconoise:
    if (jeta - 41 >= -16 && jeta - 41 <= -1) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=2
      for (int i = 1; i < 2; i++) {
        TH1F *HBnegativedirectionReconoise2 = (TH1F *)h2CeffHBnegativedirectionReconoise2->Clone("twod1");
        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = areconoiseHB[i][jeta][jphi];
          if (ccc1 != 0.) {
            HBnegativedirectionReconoise2->Fill(jphi, ccc1);
            ccctest = 1.;  //HBnegativedirectionReconoise2->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"555        kcountHBnegativedirectionReconoise2   =     "<<kcountHBnegativedirectionReconoise2  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHBnegativedirectionReconoise2);
          HBnegativedirectionReconoise2->SetMarkerStyle(20);
          HBnegativedirectionReconoise2->SetMarkerSize(0.4);
          HBnegativedirectionReconoise2->GetYaxis()->SetLabelSize(0.04);
          HBnegativedirectionReconoise2->SetXTitle("HBnegativedirectionReconoise2 \b");
          HBnegativedirectionReconoise2->SetMarkerColor(2);
          HBnegativedirectionReconoise2->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHBnegativedirectionReconoise2 == 1)
            HBnegativedirectionReconoise2->SetXTitle("R for HB- jeta = -16; depth = 2 \b");
          if (kcountHBnegativedirectionReconoise2 == 2)
            HBnegativedirectionReconoise2->SetXTitle("R for HB- jeta = -15; depth = 2 \b");
          if (kcountHBnegativedirectionReconoise2 == 3)
            HBnegativedirectionReconoise2->SetXTitle("R for HB- jeta = -14; depth = 2 \b");
          if (kcountHBnegativedirectionReconoise2 == 4)
            HBnegativedirectionReconoise2->SetXTitle("R for HB- jeta = -13; depth = 2 \b");
          if (kcountHBnegativedirectionReconoise2 == 5)
            HBnegativedirectionReconoise2->SetXTitle("R for HB- jeta = -12; depth = 2 \b");
          if (kcountHBnegativedirectionReconoise2 == 6)
            HBnegativedirectionReconoise2->SetXTitle("R for HB- jeta = -11; depth = 2 \b");
          if (kcountHBnegativedirectionReconoise2 == 7)
            HBnegativedirectionReconoise2->SetXTitle("R for HB- jeta = -10; depth = 2 \b");
          if (kcountHBnegativedirectionReconoise2 == 8)
            HBnegativedirectionReconoise2->SetXTitle("R for HB- jeta =  -9; depth = 2 \b");
          if (kcountHBnegativedirectionReconoise2 == 9)
            HBnegativedirectionReconoise2->SetXTitle("R for HB- jeta =  -8; depth = 2 \b");
          if (kcountHBnegativedirectionReconoise2 == 10)
            HBnegativedirectionReconoise2->SetXTitle("R for HB- jeta =  -7; depth = 2 \b");
          if (kcountHBnegativedirectionReconoise2 == 11)
            HBnegativedirectionReconoise2->SetXTitle("R for HB- jeta =  -6; depth = 2 \b");
          if (kcountHBnegativedirectionReconoise2 == 12)
            HBnegativedirectionReconoise2->SetXTitle("R for HB- jeta =  -5; depth = 2 \b");
          if (kcountHBnegativedirectionReconoise2 == 13)
            HBnegativedirectionReconoise2->SetXTitle("R for HB- jeta =  -4; depth = 2 \b");
          if (kcountHBnegativedirectionReconoise2 == 14)
            HBnegativedirectionReconoise2->SetXTitle("R for HB- jeta =  -3; depth = 2 \b");
          if (kcountHBnegativedirectionReconoise2 == 15)
            HBnegativedirectionReconoise2->SetXTitle("R for HB- jeta =  -2; depth = 2 \b");
          if (kcountHBnegativedirectionReconoise2 == 16)
            HBnegativedirectionReconoise2->SetXTitle("R for HB- jeta =  -1; depth = 2 \b");
          HBnegativedirectionReconoise2->Draw("Error");
          kcountHBnegativedirectionReconoise2++;
          if (kcountHBnegativedirectionReconoise2 > 16)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 < 0 )
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RreconoiseNegativeDirectionhistD1PhiSymmetryDepth2HB.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHBnegativedirectionReconoise2)
    delete h2CeffHBnegativedirectionReconoise2;
  //========================================================================================== 1116
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=3
  //cout<<"      1D plot: R vs phi , different eta,  depth=3 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(4, 4);
  c3x5->cd(1);
  int kcountHBnegativedirectionReconoise3 = 1;
  TH1F *h2CeffHBnegativedirectionReconoise3 = new TH1F("h2CeffHBnegativedirectionReconoise3", "", nphi, 0., 72.);
  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionReconoise:
    if (jeta - 41 >= -16 && jeta - 41 <= -1) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=3
      for (int i = 2; i < 3; i++) {
        TH1F *HBnegativedirectionReconoise3 = (TH1F *)h2CeffHBnegativedirectionReconoise3->Clone("twod1");
        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = areconoiseHB[i][jeta][jphi];
          if (ccc1 != 0.) {
            HBnegativedirectionReconoise3->Fill(jphi, ccc1);
            ccctest = 1.;  //HBnegativedirectionReconoise3->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"666        kcountHBnegativedirectionReconoise3   =     "<<kcountHBnegativedirectionReconoise3  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHBnegativedirectionReconoise3);
          HBnegativedirectionReconoise3->SetMarkerStyle(20);
          HBnegativedirectionReconoise3->SetMarkerSize(0.4);
          HBnegativedirectionReconoise3->GetYaxis()->SetLabelSize(0.04);
          HBnegativedirectionReconoise3->SetXTitle("HBnegativedirectionReconoise3 \b");
          HBnegativedirectionReconoise3->SetMarkerColor(2);
          HBnegativedirectionReconoise3->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHBnegativedirectionReconoise3 == 1)
            HBnegativedirectionReconoise3->SetXTitle("R for HB- jeta = -16; depth = 3 \b");
          if (kcountHBnegativedirectionReconoise3 == 2)
            HBnegativedirectionReconoise3->SetXTitle("R for HB- jeta = -15; depth = 3 \b");
          if (kcountHBnegativedirectionReconoise3 == 3)
            HBnegativedirectionReconoise3->SetXTitle("R for HB- jeta = -14; depth = 3 \b");
          if (kcountHBnegativedirectionReconoise3 == 4)
            HBnegativedirectionReconoise3->SetXTitle("R for HB- jeta = -13; depth = 3 \b");
          if (kcountHBnegativedirectionReconoise3 == 5)
            HBnegativedirectionReconoise3->SetXTitle("R for HB- jeta = -12; depth = 3 \b");
          if (kcountHBnegativedirectionReconoise3 == 6)
            HBnegativedirectionReconoise3->SetXTitle("R for HB- jeta = -11; depth = 3 \b");
          if (kcountHBnegativedirectionReconoise3 == 7)
            HBnegativedirectionReconoise3->SetXTitle("R for HB- jeta = -10; depth = 3 \b");
          if (kcountHBnegativedirectionReconoise3 == 8)
            HBnegativedirectionReconoise3->SetXTitle("R for HB- jeta =  -9; depth = 3 \b");
          if (kcountHBnegativedirectionReconoise3 == 9)
            HBnegativedirectionReconoise3->SetXTitle("R for HB- jeta =  -8; depth = 3 \b");
          if (kcountHBnegativedirectionReconoise3 == 10)
            HBnegativedirectionReconoise3->SetXTitle("R for HB- jeta =  -7; depth = 3 \b");
          if (kcountHBnegativedirectionReconoise3 == 11)
            HBnegativedirectionReconoise3->SetXTitle("R for HB- jeta =  -6; depth = 3 \b");
          if (kcountHBnegativedirectionReconoise3 == 12)
            HBnegativedirectionReconoise3->SetXTitle("R for HB- jeta =  -5; depth = 3 \b");
          if (kcountHBnegativedirectionReconoise3 == 13)
            HBnegativedirectionReconoise3->SetXTitle("R for HB- jeta =  -4; depth = 3 \b");
          if (kcountHBnegativedirectionReconoise3 == 14)
            HBnegativedirectionReconoise3->SetXTitle("R for HB- jeta =  -3; depth = 3 \b");
          if (kcountHBnegativedirectionReconoise3 == 15)
            HBnegativedirectionReconoise3->SetXTitle("R for HB- jeta =  -2; depth = 3 \b");
          if (kcountHBnegativedirectionReconoise3 == 16)
            HBnegativedirectionReconoise3->SetXTitle("R for HB- jeta =  -1; depth = 3 \b");

          HBnegativedirectionReconoise3->Draw("Error");
          kcountHBnegativedirectionReconoise3++;
          if (kcountHBnegativedirectionReconoise3 > 16)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 < 0 )
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RreconoiseNegativeDirectionhistD1PhiSymmetryDepth3HB.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHBnegativedirectionReconoise3)
    delete h2CeffHBnegativedirectionReconoise3;
  //========================================================================================== 1117
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=4
  //cout<<"      1D plot: R vs phi , different eta,  depth=4 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(4, 4);
  c3x5->cd(1);
  int kcountHBnegativedirectionReconoise4 = 1;
  TH1F *h2CeffHBnegativedirectionReconoise4 = new TH1F("h2CeffHBnegativedirectionReconoise4", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionReconoise:
    if (jeta - 41 >= -16 && jeta - 41 <= -1) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=4
      for (int i = 3; i < 4; i++) {
        TH1F *HBnegativedirectionReconoise4 = (TH1F *)h2CeffHBnegativedirectionReconoise4->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = areconoiseHB[i][jeta][jphi];
          if (ccc1 != 0.) {
            HBnegativedirectionReconoise4->Fill(jphi, ccc1);
            ccctest = 1.;  //HBnegativedirectionReconoise4->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"777        kcountHBnegativedirectionReconoise4   =     "<<kcountHBnegativedirectionReconoise4  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHBnegativedirectionReconoise4);
          HBnegativedirectionReconoise4->SetMarkerStyle(20);
          HBnegativedirectionReconoise4->SetMarkerSize(0.4);
          HBnegativedirectionReconoise4->GetYaxis()->SetLabelSize(0.04);
          HBnegativedirectionReconoise4->SetXTitle("HBnegativedirectionReconoise4 \b");
          HBnegativedirectionReconoise4->SetMarkerColor(2);
          HBnegativedirectionReconoise4->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHBnegativedirectionReconoise4 == 1)
            HBnegativedirectionReconoise4->SetXTitle("R for HB- jeta = -16; depth = 4 \b");
          if (kcountHBnegativedirectionReconoise4 == 2)
            HBnegativedirectionReconoise4->SetXTitle("R for HB- jeta = -15; depth = 4 \b");
          if (kcountHBnegativedirectionReconoise4 == 3)
            HBnegativedirectionReconoise4->SetXTitle("R for HB- jeta = -14; depth = 4 \b");
          if (kcountHBnegativedirectionReconoise4 == 4)
            HBnegativedirectionReconoise4->SetXTitle("R for HB- jeta = -13; depth = 4 \b");
          if (kcountHBnegativedirectionReconoise4 == 5)
            HBnegativedirectionReconoise4->SetXTitle("R for HB- jeta = -12; depth = 4 \b");
          if (kcountHBnegativedirectionReconoise4 == 6)
            HBnegativedirectionReconoise4->SetXTitle("R for HB- jeta = -11; depth = 4 \b");
          if (kcountHBnegativedirectionReconoise4 == 7)
            HBnegativedirectionReconoise4->SetXTitle("R for HB- jeta = -10; depth = 4 \b");
          if (kcountHBnegativedirectionReconoise4 == 8)
            HBnegativedirectionReconoise4->SetXTitle("R for HB- jeta =  -9; depth = 4 \b");
          if (kcountHBnegativedirectionReconoise4 == 9)
            HBnegativedirectionReconoise4->SetXTitle("R for HB- jeta =  -8; depth = 4 \b");
          if (kcountHBnegativedirectionReconoise4 == 10)
            HBnegativedirectionReconoise4->SetXTitle("R for HB- jeta =  -7; depth = 4 \b");
          if (kcountHBnegativedirectionReconoise4 == 11)
            HBnegativedirectionReconoise4->SetXTitle("R for HB- jeta =  -6; depth = 4 \b");
          if (kcountHBnegativedirectionReconoise4 == 12)
            HBnegativedirectionReconoise4->SetXTitle("R for HB- jeta =  -5; depth = 4 \b");
          if (kcountHBnegativedirectionReconoise4 == 13)
            HBnegativedirectionReconoise4->SetXTitle("R for HB- jeta =  -4; depth = 4 \b");
          if (kcountHBnegativedirectionReconoise4 == 14)
            HBnegativedirectionReconoise4->SetXTitle("R for HB- jeta =  -3; depth = 4 \b");
          if (kcountHBnegativedirectionReconoise4 == 15)
            HBnegativedirectionReconoise4->SetXTitle("R for HB- jeta =  -2; depth = 4 \b");
          if (kcountHBnegativedirectionReconoise4 == 16)
            HBnegativedirectionReconoise4->SetXTitle("R for HB- jeta =  -1; depth = 4 \b");
          HBnegativedirectionReconoise4->Draw("Error");
          kcountHBnegativedirectionReconoise4++;
          if (kcountHBnegativedirectionReconoise4 > 16)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 < 0 )
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RreconoiseNegativeDirectionhistD1PhiSymmetryDepth4HB.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHBnegativedirectionReconoise4)
    delete h2CeffHBnegativedirectionReconoise4;

  //======================================================================================================================
  //                                   DIFDIFDIFDIFDIFDIFDIFDIFDIFDIFDIFDIFDIFDIFDIFDIFDIFDIFDIFDIF:   Reconoise HE
  //======================================================================================================================
  //======================================================================
  //cout<<"      R2D-eta/phi-plot: DIF, averaged over depthfs *****" <<endl;
  c2x1->Clear();
  /////////////////
  c2x1->Divide(2, 1);
  c2x1->cd(1);
  TH2F *GefzDIFreconoiseHB42D = new TH2F("GefzDIFreconoiseHB42D", "", neta, -41., 41., nphi, 0., 72.);
  TH2F *GefzDIFreconoiseHB42D0 = new TH2F("GefzDIFreconoiseHB42D0", "", neta, -41., 41., nphi, 0., 72.);
  TH2F *GefzDIFreconoiseHB42DF = (TH2F *)GefzDIFreconoiseHB42D0->Clone("GefzDIFreconoiseHB42DF");
  for (int i = 0; i < ndepth; i++) {
    for (int jeta = 0; jeta < neta; jeta++) {
      if ((jeta - 41 >= -16 && jeta - 41 <= -1) || (jeta - 41 >= 0 && jeta - 41 <= 15)) {
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = breconoiseHB[i][jeta][jphi];
          int k2plot = jeta - 41;
          int kkk = k2plot;  //if(k2plot >0 ) kkk=k2plot+1; //-41 +41 !=0
          if (ccc1 != 0.) {
            GefzDIFreconoiseHB42D->Fill(kkk, jphi, ccc1);
            GefzDIFreconoiseHB42D0->Fill(kkk, jphi, 1.);
          }
        }
      }
    }
  }
  GefzDIFreconoiseHB42DF->Divide(GefzDIFreconoiseHB42D, GefzDIFreconoiseHB42D0, 1, 1, "B");  // average A
  gPad->SetGridy();
  gPad->SetGridx();  //      gPad->SetLogz();
  GefzDIFreconoiseHB42DF->SetXTitle("<DIF>_depth       #eta  \b");
  GefzDIFreconoiseHB42DF->SetYTitle("      #phi \b");
  GefzDIFreconoiseHB42DF->Draw("COLZ");

  //  c2x1->cd(2);
  //  TH1F *energyhitNoise_HB= (TH1F*)dir->FindObjectAny("h_energyhitNoise_HB");
  //  energyhitNoise_HB ->SetMarkerStyle(20);energyhitNoise_HB ->SetMarkerSize(0.4);energyhitNoise_HB ->GetYaxis()->SetLabelSize(0.04);energyhitNoise_HB ->SetXTitle("energyhitNoise_HB \b");energyhitNoise_HB ->SetMarkerColor(2);energyhitNoise_HB ->SetLineColor(0);gPad->SetGridy();gPad->SetGridx();energyhitNoise_HB ->Draw("Error");

  /////////////////
  c2x1->Update();
  c2x1->Print("DIFreconoiseGeneralD2PhiSymmetryHB.png");
  c2x1->Clear();
  // clean-up
  if (GefzDIFreconoiseHB42D)
    delete GefzDIFreconoiseHB42D;
  if (GefzDIFreconoiseHB42D0)
    delete GefzDIFreconoiseHB42D0;
  if (GefzDIFreconoiseHB42DF)
    delete GefzDIFreconoiseHB42DF;
  //====================================================================== 1D plot: DIF vs phi , averaged over depthfs & eta
  //======================================================================
  //cout<<"      1D plot: DIF vs phi , averaged over depthfs & eta *****" <<endl;
  c1x1->Clear();
  /////////////////
  c1x1->Divide(1, 1);
  c1x1->cd(1);
  TH1F *GefzDIFreconoiseHB41D = new TH1F("GefzDIFreconoiseHB41D", "", nphi, 0., 72.);
  TH1F *GefzDIFreconoiseHB41D0 = new TH1F("GefzDIFreconoiseHB41D0", "", nphi, 0., 72.);
  TH1F *GefzDIFreconoiseHB41DF = (TH1F *)GefzDIFreconoiseHB41D0->Clone("GefzDIFreconoiseHB41DF");
  for (int jphi = 0; jphi < nphi; jphi++) {
    for (int jeta = 0; jeta < neta; jeta++) {
      if ((jeta - 41 >= -16 && jeta - 41 <= -1) || (jeta - 41 >= 0 && jeta - 41 <= 15)) {
        for (int i = 0; i < ndepth; i++) {
          double ccc1 = breconoiseHB[i][jeta][jphi];
          if (ccc1 != 0.) {
            GefzDIFreconoiseHB41D->Fill(jphi, ccc1);
            GefzDIFreconoiseHB41D0->Fill(jphi, 1.);
          }
        }
      }
    }
  }
  GefzDIFreconoiseHB41DF->Divide(
      GefzDIFreconoiseHB41D, GefzDIFreconoiseHB41D0, 1, 1, "B");  // DIF averaged over depthfs & eta
  GefzDIFreconoiseHB41D0->Sumw2();
  //    for (int jphi=1;jphi<73;jphi++) {GefzDIFreconoiseHB41DF->SetBinError(jphi,0.01);}
  gPad->SetGridy();
  gPad->SetGridx();  //      gPad->SetLogz();
  GefzDIFreconoiseHB41DF->SetMarkerStyle(20);
  GefzDIFreconoiseHB41DF->SetMarkerSize(1.4);
  GefzDIFreconoiseHB41DF->GetZaxis()->SetLabelSize(0.08);
  GefzDIFreconoiseHB41DF->SetXTitle("#phi  \b");
  GefzDIFreconoiseHB41DF->SetYTitle("  <DIF> \b");
  GefzDIFreconoiseHB41DF->SetZTitle("<DIF>_PHI  - AllDepthfs \b");
  GefzDIFreconoiseHB41DF->SetMarkerColor(4);
  GefzDIFreconoiseHB41DF->SetLineColor(
      4);  //GefzDIFreconoiseHB41DF->SetMinimum(0.8);     //      GefzDIFreconoiseHB41DF->SetMaximum(1.000);
  GefzDIFreconoiseHB41DF->Draw("Error");
  /////////////////
  c1x1->Update();
  c1x1->Print("DIFreconoiseGeneralD1PhiSymmetryHB.png");
  c1x1->Clear();
  // clean-up
  if (GefzDIFreconoiseHB41D)
    delete GefzDIFreconoiseHB41D;
  if (GefzDIFreconoiseHB41D0)
    delete GefzDIFreconoiseHB41D0;
  if (GefzDIFreconoiseHB41DF)
    delete GefzDIFreconoiseHB41DF;
  //========================================================================================== 4
  //======================================================================
  //======================================================================1D plot: DIF vs phi , different eta,  depth=1
  //cout<<"      1D plot: DIF vs phi , different eta,  depth=1 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(4, 4);
  c3x5->cd(1);
  int kcountHBpositivedirectionReconoiseDIF1 = 1;
  TH1F *h2CeffHBpositivedirectionReconoiseDIF1 = new TH1F("h2CeffHBpositivedirectionReconoiseDIF1", "", nphi, 0., 72.);
  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionReconoiseDIF:
    if (jeta - 41 >= 0 && jeta - 41 <= 15) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=1
      for (int i = 0; i < 1; i++) {
        TH1F *HBpositivedirectionReconoiseDIF1 = (TH1F *)h2CeffHBpositivedirectionReconoiseDIF1->Clone("twod1");
        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = breconoiseHB[i][jeta][jphi];
          if (ccc1 != 0.) {
            HBpositivedirectionReconoiseDIF1->Fill(jphi, ccc1);
            ccctest = 1.;  //HBpositivedirectionReconoiseDIF1->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //	  cout<<"444        kcountHBpositivedirectionReconoiseDIF1   =     "<<kcountHBpositivedirectionReconoiseDIF1  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHBpositivedirectionReconoiseDIF1);
          HBpositivedirectionReconoiseDIF1->SetMarkerStyle(20);
          HBpositivedirectionReconoiseDIF1->SetMarkerSize(0.4);
          HBpositivedirectionReconoiseDIF1->GetYaxis()->SetLabelSize(0.04);
          HBpositivedirectionReconoiseDIF1->SetXTitle("HBpositivedirectionReconoiseDIF1 \b");
          HBpositivedirectionReconoiseDIF1->SetMarkerColor(2);
          HBpositivedirectionReconoiseDIF1->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHBpositivedirectionReconoiseDIF1 == 1)
            HBpositivedirectionReconoiseDIF1->SetXTitle("DIF for HB+ jeta =  0; depth = 1 \b");
          if (kcountHBpositivedirectionReconoiseDIF1 == 2)
            HBpositivedirectionReconoiseDIF1->SetXTitle("DIF for HB+ jeta =  1; depth = 1 \b");
          if (kcountHBpositivedirectionReconoiseDIF1 == 3)
            HBpositivedirectionReconoiseDIF1->SetXTitle("DIF for HB+ jeta =  2; depth = 1 \b");
          if (kcountHBpositivedirectionReconoiseDIF1 == 4)
            HBpositivedirectionReconoiseDIF1->SetXTitle("DIF for HB+ jeta =  3; depth = 1 \b");
          if (kcountHBpositivedirectionReconoiseDIF1 == 5)
            HBpositivedirectionReconoiseDIF1->SetXTitle("DIF for HB+ jeta =  4; depth = 1 \b");
          if (kcountHBpositivedirectionReconoiseDIF1 == 6)
            HBpositivedirectionReconoiseDIF1->SetXTitle("DIF for HB+ jeta =  5; depth = 1 \b");
          if (kcountHBpositivedirectionReconoiseDIF1 == 7)
            HBpositivedirectionReconoiseDIF1->SetXTitle("DIF for HB+ jeta =  6; depth = 1 \b");
          if (kcountHBpositivedirectionReconoiseDIF1 == 8)
            HBpositivedirectionReconoiseDIF1->SetXTitle("DIF for HB+ jeta =  7; depth = 1 \b");
          if (kcountHBpositivedirectionReconoiseDIF1 == 9)
            HBpositivedirectionReconoiseDIF1->SetXTitle("DIF for HB+ jeta =  8; depth = 1 \b");
          if (kcountHBpositivedirectionReconoiseDIF1 == 10)
            HBpositivedirectionReconoiseDIF1->SetXTitle("DIF for HB+ jeta =  9; depth = 1 \b");
          if (kcountHBpositivedirectionReconoiseDIF1 == 11)
            HBpositivedirectionReconoiseDIF1->SetXTitle("DIF for HB+ jeta = 10; depth = 1 \b");
          if (kcountHBpositivedirectionReconoiseDIF1 == 12)
            HBpositivedirectionReconoiseDIF1->SetXTitle("DIF for HB+ jeta = 11; depth = 1 \b");
          if (kcountHBpositivedirectionReconoiseDIF1 == 13)
            HBpositivedirectionReconoiseDIF1->SetXTitle("DIF for HB+ jeta = 12; depth = 1 \b");
          if (kcountHBpositivedirectionReconoiseDIF1 == 14)
            HBpositivedirectionReconoiseDIF1->SetXTitle("DIF for HB+ jeta = 13; depth = 1 \b");
          if (kcountHBpositivedirectionReconoiseDIF1 == 15)
            HBpositivedirectionReconoiseDIF1->SetXTitle("DIF for HB+ jeta = 14; depth = 1 \b");
          if (kcountHBpositivedirectionReconoiseDIF1 == 16)
            HBpositivedirectionReconoiseDIF1->SetXTitle("DIF for HB+ jeta = 15; depth = 1 \b");
          HBpositivedirectionReconoiseDIF1->Draw("Error");
          kcountHBpositivedirectionReconoiseDIF1++;
          if (kcountHBpositivedirectionReconoiseDIF1 > 16)
            break;  //
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DIFreconoisePositiveDirectionhistD1PhiSymmetryDepth1HB.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHBpositivedirectionReconoiseDIF1)
    delete h2CeffHBpositivedirectionReconoiseDIF1;

  //========================================================================================== 5
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=2
  //  cout<<"      1D plot: R vs phi , different eta,  depth=2 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(4, 4);
  c3x5->cd(1);
  int kcountHBpositivedirectionReconoiseDIF2 = 1;
  TH1F *h2CeffHBpositivedirectionReconoiseDIF2 = new TH1F("h2CeffHBpositivedirectionReconoiseDIF2", "", nphi, 0., 72.);
  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionReconoiseDIF:
    if (jeta - 41 >= 0 && jeta - 41 <= 15) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=2
      for (int i = 1; i < 2; i++) {
        TH1F *HBpositivedirectionReconoiseDIF2 = (TH1F *)h2CeffHBpositivedirectionReconoiseDIF2->Clone("twod1");
        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = breconoiseHB[i][jeta][jphi];
          if (ccc1 != 0.) {
            HBpositivedirectionReconoiseDIF2->Fill(jphi, ccc1);
            ccctest = 1.;  //HBpositivedirectionReconoiseDIF2->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"555        kcountHBpositivedirectionReconoiseDIF2   =     "<<kcountHBpositivedirectionReconoiseDIF2  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHBpositivedirectionReconoiseDIF2);
          HBpositivedirectionReconoiseDIF2->SetMarkerStyle(20);
          HBpositivedirectionReconoiseDIF2->SetMarkerSize(0.4);
          HBpositivedirectionReconoiseDIF2->GetYaxis()->SetLabelSize(0.04);
          HBpositivedirectionReconoiseDIF2->SetXTitle("HBpositivedirectionReconoiseDIF2 \b");
          HBpositivedirectionReconoiseDIF2->SetMarkerColor(2);
          HBpositivedirectionReconoiseDIF2->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHBpositivedirectionReconoiseDIF2 == 1)
            HBpositivedirectionReconoiseDIF2->SetXTitle("DIF for HB+ jeta =  0; depth = 2 \b");
          if (kcountHBpositivedirectionReconoiseDIF2 == 2)
            HBpositivedirectionReconoiseDIF2->SetXTitle("DIF for HB+ jeta =  1; depth = 2 \b");
          if (kcountHBpositivedirectionReconoiseDIF2 == 3)
            HBpositivedirectionReconoiseDIF2->SetXTitle("DIF for HB+ jeta =  2; depth = 2 \b");
          if (kcountHBpositivedirectionReconoiseDIF2 == 4)
            HBpositivedirectionReconoiseDIF2->SetXTitle("DIF for HB+ jeta =  3; depth = 2 \b");
          if (kcountHBpositivedirectionReconoiseDIF2 == 5)
            HBpositivedirectionReconoiseDIF2->SetXTitle("DIF for HB+ jeta =  4; depth = 2 \b");
          if (kcountHBpositivedirectionReconoiseDIF2 == 6)
            HBpositivedirectionReconoiseDIF2->SetXTitle("DIF for HB+ jeta =  5; depth = 2 \b");
          if (kcountHBpositivedirectionReconoiseDIF2 == 7)
            HBpositivedirectionReconoiseDIF2->SetXTitle("DIF for HB+ jeta =  6; depth = 2 \b");
          if (kcountHBpositivedirectionReconoiseDIF2 == 8)
            HBpositivedirectionReconoiseDIF2->SetXTitle("DIF for HB+ jeta =  7; depth = 2 \b");
          if (kcountHBpositivedirectionReconoiseDIF2 == 9)
            HBpositivedirectionReconoiseDIF2->SetXTitle("DIF for HB+ jeta =  8; depth = 2 \b");
          if (kcountHBpositivedirectionReconoiseDIF2 == 10)
            HBpositivedirectionReconoiseDIF2->SetXTitle("DIF for HB+ jeta =  9; depth = 2 \b");
          if (kcountHBpositivedirectionReconoiseDIF2 == 11)
            HBpositivedirectionReconoiseDIF2->SetXTitle("DIF for HB+ jeta = 10; depth = 2 \b");
          if (kcountHBpositivedirectionReconoiseDIF2 == 12)
            HBpositivedirectionReconoiseDIF2->SetXTitle("DIF for HB+ jeta = 11; depth = 2 \b");
          if (kcountHBpositivedirectionReconoiseDIF2 == 13)
            HBpositivedirectionReconoiseDIF2->SetXTitle("DIF for HB+ jeta = 12; depth = 2 \b");
          if (kcountHBpositivedirectionReconoiseDIF2 == 14)
            HBpositivedirectionReconoiseDIF2->SetXTitle("DIF for HB+ jeta = 13; depth = 2 \b");
          if (kcountHBpositivedirectionReconoiseDIF2 == 15)
            HBpositivedirectionReconoiseDIF2->SetXTitle("DIF for HB+ jeta = 14; depth = 2 \b");
          if (kcountHBpositivedirectionReconoiseDIF2 == 16)
            HBpositivedirectionReconoiseDIF2->SetXTitle("DIF for HB+ jeta = 15; depth = 2 \b");
          HBpositivedirectionReconoiseDIF2->Draw("Error");
          kcountHBpositivedirectionReconoiseDIF2++;
          if (kcountHBpositivedirectionReconoiseDIF2 > 16)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DIFreconoisePositiveDirectionhistD1PhiSymmetryDepth2HB.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHBpositivedirectionReconoiseDIF2)
    delete h2CeffHBpositivedirectionReconoiseDIF2;
  //========================================================================================== 6
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=3
  //cout<<"      1D plot: R vs phi , different eta,  depth=3 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(4, 4);
  c3x5->cd(1);
  int kcountHBpositivedirectionReconoiseDIF3 = 1;
  TH1F *h2CeffHBpositivedirectionReconoiseDIF3 = new TH1F("h2CeffHBpositivedirectionReconoiseDIF3", "", nphi, 0., 72.);
  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionReconoiseDIF:
    if (jeta - 41 >= 0 && jeta - 41 <= 15) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=3
      for (int i = 2; i < 3; i++) {
        TH1F *HBpositivedirectionReconoiseDIF3 = (TH1F *)h2CeffHBpositivedirectionReconoiseDIF3->Clone("twod1");
        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = breconoiseHB[i][jeta][jphi];
          if (ccc1 != 0.) {
            HBpositivedirectionReconoiseDIF3->Fill(jphi, ccc1);
            ccctest = 1.;  //HBpositivedirectionReconoiseDIF3->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"666        kcountHBpositivedirectionReconoiseDIF3   =     "<<kcountHBpositivedirectionReconoiseDIF3  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHBpositivedirectionReconoiseDIF3);
          HBpositivedirectionReconoiseDIF3->SetMarkerStyle(20);
          HBpositivedirectionReconoiseDIF3->SetMarkerSize(0.4);
          HBpositivedirectionReconoiseDIF3->GetYaxis()->SetLabelSize(0.04);
          HBpositivedirectionReconoiseDIF3->SetXTitle("HBpositivedirectionReconoiseDIF3 \b");
          HBpositivedirectionReconoiseDIF3->SetMarkerColor(2);
          HBpositivedirectionReconoiseDIF3->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHBpositivedirectionReconoiseDIF3 == 1)
            HBpositivedirectionReconoiseDIF3->SetXTitle("DIF for HB+ jeta =  0; depth = 3 \b");
          if (kcountHBpositivedirectionReconoiseDIF3 == 2)
            HBpositivedirectionReconoiseDIF3->SetXTitle("DIF for HB+ jeta =  1; depth = 3 \b");
          if (kcountHBpositivedirectionReconoiseDIF3 == 3)
            HBpositivedirectionReconoiseDIF3->SetXTitle("DIF for HB+ jeta =  2; depth = 3 \b");
          if (kcountHBpositivedirectionReconoiseDIF3 == 4)
            HBpositivedirectionReconoiseDIF3->SetXTitle("DIF for HB+ jeta =  3; depth = 3 \b");
          if (kcountHBpositivedirectionReconoiseDIF3 == 5)
            HBpositivedirectionReconoiseDIF3->SetXTitle("DIF for HB+ jeta =  4; depth = 3 \b");
          if (kcountHBpositivedirectionReconoiseDIF3 == 6)
            HBpositivedirectionReconoiseDIF3->SetXTitle("DIF for HB+ jeta =  5; depth = 3 \b");
          if (kcountHBpositivedirectionReconoiseDIF3 == 7)
            HBpositivedirectionReconoiseDIF3->SetXTitle("DIF for HB+ jeta =  6; depth = 3 \b");
          if (kcountHBpositivedirectionReconoiseDIF3 == 8)
            HBpositivedirectionReconoiseDIF3->SetXTitle("DIF for HB+ jeta =  7; depth = 3 \b");
          if (kcountHBpositivedirectionReconoiseDIF3 == 9)
            HBpositivedirectionReconoiseDIF3->SetXTitle("DIF for HB+ jeta =  8; depth = 3 \b");
          if (kcountHBpositivedirectionReconoiseDIF3 == 10)
            HBpositivedirectionReconoiseDIF3->SetXTitle("DIF for HB+ jeta =  9; depth = 3 \b");
          if (kcountHBpositivedirectionReconoiseDIF3 == 11)
            HBpositivedirectionReconoiseDIF3->SetXTitle("DIF for HB+ jeta =  0; depth = 3 \b");
          if (kcountHBpositivedirectionReconoiseDIF3 == 12)
            HBpositivedirectionReconoiseDIF3->SetXTitle("DIF for HB+ jeta = 11; depth = 3 \b");
          if (kcountHBpositivedirectionReconoiseDIF3 == 13)
            HBpositivedirectionReconoiseDIF3->SetXTitle("DIF for HB+ jeta = 12; depth = 3 \b");
          if (kcountHBpositivedirectionReconoiseDIF3 == 14)
            HBpositivedirectionReconoiseDIF3->SetXTitle("DIF for HB+ jeta = 13; depth = 3 \b");
          if (kcountHBpositivedirectionReconoiseDIF3 == 15)
            HBpositivedirectionReconoiseDIF3->SetXTitle("DIF for HB+ jeta = 14; depth = 3 \b");
          if (kcountHBpositivedirectionReconoiseDIF3 == 16)
            HBpositivedirectionReconoiseDIF3->SetXTitle("DIF for HB+ jeta = 15; depth = 3 \b");
          HBpositivedirectionReconoiseDIF3->Draw("Error");
          kcountHBpositivedirectionReconoiseDIF3++;
          if (kcountHBpositivedirectionReconoiseDIF3 > 16)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DIFreconoisePositiveDirectionhistD1PhiSymmetryDepth3HB.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHBpositivedirectionReconoiseDIF3)
    delete h2CeffHBpositivedirectionReconoiseDIF3;
  //========================================================================================== 7
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=4
  //cout<<"      1D plot: R vs phi , different eta,  depth=4 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(4, 4);
  c3x5->cd(1);
  int kcountHBpositivedirectionReconoiseDIF4 = 1;
  TH1F *h2CeffHBpositivedirectionReconoiseDIF4 = new TH1F("h2CeffHBpositivedirectionReconoiseDIF4", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionReconoiseDIF:
    if (jeta - 41 >= 0 && jeta - 41 <= 15) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=4
      for (int i = 3; i < 4; i++) {
        TH1F *HBpositivedirectionReconoiseDIF4 = (TH1F *)h2CeffHBpositivedirectionReconoiseDIF4->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = breconoiseHB[i][jeta][jphi];
          if (ccc1 != 0.) {
            HBpositivedirectionReconoiseDIF4->Fill(jphi, ccc1);
            ccctest = 1.;  //HBpositivedirectionReconoiseDIF4->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"777        kcountHBpositivedirectionReconoiseDIF4   =     "<<kcountHBpositivedirectionReconoiseDIF4  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHBpositivedirectionReconoiseDIF4);
          HBpositivedirectionReconoiseDIF4->SetMarkerStyle(20);
          HBpositivedirectionReconoiseDIF4->SetMarkerSize(0.4);
          HBpositivedirectionReconoiseDIF4->GetYaxis()->SetLabelSize(0.04);
          HBpositivedirectionReconoiseDIF4->SetXTitle("HBpositivedirectionReconoiseDIF4 \b");
          HBpositivedirectionReconoiseDIF4->SetMarkerColor(2);
          HBpositivedirectionReconoiseDIF4->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHBpositivedirectionReconoiseDIF4 == 1)
            HBpositivedirectionReconoiseDIF4->SetXTitle("DIF for HB+ jeta =  0; depth = 4 \b");
          if (kcountHBpositivedirectionReconoiseDIF4 == 2)
            HBpositivedirectionReconoiseDIF4->SetXTitle("DIF for HB+ jeta =  1; depth = 4 \b");
          if (kcountHBpositivedirectionReconoiseDIF4 == 3)
            HBpositivedirectionReconoiseDIF4->SetXTitle("DIF for HB+ jeta =  2; depth = 4 \b");
          if (kcountHBpositivedirectionReconoiseDIF4 == 4)
            HBpositivedirectionReconoiseDIF4->SetXTitle("DIF for HB+ jeta =  3; depth = 4 \b");
          if (kcountHBpositivedirectionReconoiseDIF4 == 5)
            HBpositivedirectionReconoiseDIF4->SetXTitle("DIF for HB+ jeta =  4; depth = 4 \b");
          if (kcountHBpositivedirectionReconoiseDIF4 == 6)
            HBpositivedirectionReconoiseDIF4->SetXTitle("DIF for HB+ jeta =  5; depth = 4 \b");
          if (kcountHBpositivedirectionReconoiseDIF4 == 7)
            HBpositivedirectionReconoiseDIF4->SetXTitle("DIF for HB+ jeta =  6; depth = 4 \b");
          if (kcountHBpositivedirectionReconoiseDIF4 == 8)
            HBpositivedirectionReconoiseDIF4->SetXTitle("DIF for HB+ jeta =  7; depth = 4 \b");
          if (kcountHBpositivedirectionReconoiseDIF4 == 9)
            HBpositivedirectionReconoiseDIF4->SetXTitle("DIF for HB+ jeta =  8; depth = 4 \b");
          if (kcountHBpositivedirectionReconoiseDIF4 == 10)
            HBpositivedirectionReconoiseDIF4->SetXTitle("DIF for HB+ jeta =  9; depth = 4 \b");
          if (kcountHBpositivedirectionReconoiseDIF4 == 11)
            HBpositivedirectionReconoiseDIF4->SetXTitle("DIF for HB+ jeta = 10; depth = 4 \b");
          if (kcountHBpositivedirectionReconoiseDIF4 == 12)
            HBpositivedirectionReconoiseDIF4->SetXTitle("DIF for HB+ jeta = 11; depth = 4 \b");
          if (kcountHBpositivedirectionReconoiseDIF4 == 13)
            HBpositivedirectionReconoiseDIF4->SetXTitle("DIF for HB+ jeta = 12; depth = 4 \b");
          if (kcountHBpositivedirectionReconoiseDIF4 == 14)
            HBpositivedirectionReconoiseDIF4->SetXTitle("DIF for HB+ jeta = 13; depth = 4 \b");
          if (kcountHBpositivedirectionReconoiseDIF4 == 15)
            HBpositivedirectionReconoiseDIF4->SetXTitle("DIF for HB+ jeta = 14; depth = 4 \b");
          if (kcountHBpositivedirectionReconoiseDIF4 == 16)
            HBpositivedirectionReconoiseDIF4->SetXTitle("DIF for HB+ jeta = 15; depth = 4 \b");
          HBpositivedirectionReconoiseDIF4->Draw("Error");
          kcountHBpositivedirectionReconoiseDIF4++;
          if (kcountHBpositivedirectionReconoiseDIF4 > 16)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DIFreconoisePositiveDirectionhistD1PhiSymmetryDepth4HB.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHBpositivedirectionReconoiseDIF4)
    delete h2CeffHBpositivedirectionReconoiseDIF4;

  //========================================================================================== 1114
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=1
  //cout<<"      1D plot: R vs phi , different eta,  depth=1 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(4, 4);
  c3x5->cd(1);
  int kcountHBnegativedirectionReconoiseDIF1 = 1;
  TH1F *h2CeffHBnegativedirectionReconoiseDIF1 = new TH1F("h2CeffHBnegativedirectionReconoiseDIF1", "", nphi, 0., 72.);
  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionReconoiseDIF:
    if (jeta - 41 >= -16 && jeta - 41 <= -1) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=1
      for (int i = 0; i < 1; i++) {
        TH1F *HBnegativedirectionReconoiseDIF1 = (TH1F *)h2CeffHBnegativedirectionReconoiseDIF1->Clone("twod1");
        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = breconoiseHB[i][jeta][jphi];
          if (ccc1 != 0.) {
            HBnegativedirectionReconoiseDIF1->Fill(jphi, ccc1);
            ccctest = 1.;  //HBnegativedirectionReconoiseDIF1->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //	  cout<<"444        kcountHBnegativedirectionReconoiseDIF1   =     "<<kcountHBnegativedirectionReconoiseDIF1  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHBnegativedirectionReconoiseDIF1);
          HBnegativedirectionReconoiseDIF1->SetMarkerStyle(20);
          HBnegativedirectionReconoiseDIF1->SetMarkerSize(0.4);
          HBnegativedirectionReconoiseDIF1->GetYaxis()->SetLabelSize(0.04);
          HBnegativedirectionReconoiseDIF1->SetXTitle("HBnegativedirectionReconoiseDIF1 \b");
          HBnegativedirectionReconoiseDIF1->SetMarkerColor(2);
          HBnegativedirectionReconoiseDIF1->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHBnegativedirectionReconoiseDIF1 == 1)
            HBnegativedirectionReconoiseDIF1->SetXTitle("DIF for HB- jeta = -16; depth = 1 \b");
          if (kcountHBnegativedirectionReconoiseDIF1 == 2)
            HBnegativedirectionReconoiseDIF1->SetXTitle("DIF for HB- jeta = -15; depth = 1 \b");
          if (kcountHBnegativedirectionReconoiseDIF1 == 3)
            HBnegativedirectionReconoiseDIF1->SetXTitle("DIF for HB- jeta = -14; depth = 1 \b");
          if (kcountHBnegativedirectionReconoiseDIF1 == 4)
            HBnegativedirectionReconoiseDIF1->SetXTitle("DIF for HB- jeta = -13; depth = 1 \b");
          if (kcountHBnegativedirectionReconoiseDIF1 == 5)
            HBnegativedirectionReconoiseDIF1->SetXTitle("DIF for HB- jeta = -12; depth = 1 \b");
          if (kcountHBnegativedirectionReconoiseDIF1 == 6)
            HBnegativedirectionReconoiseDIF1->SetXTitle("DIF for HB- jeta = -11; depth = 1 \b");
          if (kcountHBnegativedirectionReconoiseDIF1 == 7)
            HBnegativedirectionReconoiseDIF1->SetXTitle("DIF for HB- jeta = -10; depth = 1 \b");
          if (kcountHBnegativedirectionReconoiseDIF1 == 8)
            HBnegativedirectionReconoiseDIF1->SetXTitle("DIF for HB- jeta =  -9; depth = 1 \b");
          if (kcountHBnegativedirectionReconoiseDIF1 == 9)
            HBnegativedirectionReconoiseDIF1->SetXTitle("DIF for HB- jeta =  -8; depth = 1 \b");
          if (kcountHBnegativedirectionReconoiseDIF1 == 10)
            HBnegativedirectionReconoiseDIF1->SetXTitle("DIF for HB- jeta =  -7; depth = 1 \b");
          if (kcountHBnegativedirectionReconoiseDIF1 == 11)
            HBnegativedirectionReconoiseDIF1->SetXTitle("DIF for HB- jeta =  -6; depth = 1 \b");
          if (kcountHBnegativedirectionReconoiseDIF1 == 12)
            HBnegativedirectionReconoiseDIF1->SetXTitle("DIF for HB- jeta =  -5; depth = 1 \b");
          if (kcountHBnegativedirectionReconoiseDIF1 == 13)
            HBnegativedirectionReconoiseDIF1->SetXTitle("DIF for HB- jeta =  -4; depth = 1 \b");
          if (kcountHBnegativedirectionReconoiseDIF1 == 14)
            HBnegativedirectionReconoiseDIF1->SetXTitle("DIF for HB- jeta =  -3; depth = 1 \b");
          if (kcountHBnegativedirectionReconoiseDIF1 == 15)
            HBnegativedirectionReconoiseDIF1->SetXTitle("DIF for HB- jeta =  -2; depth = 1 \b");
          if (kcountHBnegativedirectionReconoiseDIF1 == 16)
            HBnegativedirectionReconoiseDIF1->SetXTitle("DIF for HB- jeta =  -1; depth = 1 \b");
          HBnegativedirectionReconoiseDIF1->Draw("Error");
          kcountHBnegativedirectionReconoiseDIF1++;
          if (kcountHBnegativedirectionReconoiseDIF1 > 16)
            break;  //
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 < 0 )
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DIFreconoiseNegativeDirectionhistD1PhiSymmetryDepth1HB.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHBnegativedirectionReconoiseDIF1)
    delete h2CeffHBnegativedirectionReconoiseDIF1;

  //========================================================================================== 1115
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=2
  //  cout<<"      1D plot: R vs phi , different eta,  depth=2 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(4, 4);
  c3x5->cd(1);
  int kcountHBnegativedirectionReconoiseDIF2 = 1;
  TH1F *h2CeffHBnegativedirectionReconoiseDIF2 = new TH1F("h2CeffHBnegativedirectionReconoiseDIF2", "", nphi, 0., 72.);
  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionReconoiseDIF:
    if (jeta - 41 >= -16 && jeta - 41 <= -1) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=2
      for (int i = 1; i < 2; i++) {
        TH1F *HBnegativedirectionReconoiseDIF2 = (TH1F *)h2CeffHBnegativedirectionReconoiseDIF2->Clone("twod1");
        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = breconoiseHB[i][jeta][jphi];
          if (ccc1 != 0.) {
            HBnegativedirectionReconoiseDIF2->Fill(jphi, ccc1);
            ccctest = 1.;  //HBnegativedirectionReconoiseDIF2->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"555        kcountHBnegativedirectionReconoiseDIF2   =     "<<kcountHBnegativedirectionReconoiseDIF2  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHBnegativedirectionReconoiseDIF2);
          HBnegativedirectionReconoiseDIF2->SetMarkerStyle(20);
          HBnegativedirectionReconoiseDIF2->SetMarkerSize(0.4);
          HBnegativedirectionReconoiseDIF2->GetYaxis()->SetLabelSize(0.04);
          HBnegativedirectionReconoiseDIF2->SetXTitle("HBnegativedirectionReconoiseDIF2 \b");
          HBnegativedirectionReconoiseDIF2->SetMarkerColor(2);
          HBnegativedirectionReconoiseDIF2->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHBnegativedirectionReconoiseDIF2 == 1)
            HBnegativedirectionReconoiseDIF2->SetXTitle("DIF for HB- jeta = -16; depth = 2 \b");
          if (kcountHBnegativedirectionReconoiseDIF2 == 2)
            HBnegativedirectionReconoiseDIF2->SetXTitle("DIF for HB- jeta = -15; depth = 2 \b");
          if (kcountHBnegativedirectionReconoiseDIF2 == 3)
            HBnegativedirectionReconoiseDIF2->SetXTitle("DIF for HB- jeta = -14; depth = 2 \b");
          if (kcountHBnegativedirectionReconoiseDIF2 == 4)
            HBnegativedirectionReconoiseDIF2->SetXTitle("DIF for HB- jeta = -13; depth = 2 \b");
          if (kcountHBnegativedirectionReconoiseDIF2 == 5)
            HBnegativedirectionReconoiseDIF2->SetXTitle("DIF for HB- jeta = -12; depth = 2 \b");
          if (kcountHBnegativedirectionReconoiseDIF2 == 6)
            HBnegativedirectionReconoiseDIF2->SetXTitle("DIF for HB- jeta = -11; depth = 2 \b");
          if (kcountHBnegativedirectionReconoiseDIF2 == 7)
            HBnegativedirectionReconoiseDIF2->SetXTitle("DIF for HB- jeta = -10; depth = 2 \b");
          if (kcountHBnegativedirectionReconoiseDIF2 == 8)
            HBnegativedirectionReconoiseDIF2->SetXTitle("DIF for HB- jeta =  -9; depth = 2 \b");
          if (kcountHBnegativedirectionReconoiseDIF2 == 9)
            HBnegativedirectionReconoiseDIF2->SetXTitle("DIF for HB- jeta =  -8; depth = 2 \b");
          if (kcountHBnegativedirectionReconoiseDIF2 == 10)
            HBnegativedirectionReconoiseDIF2->SetXTitle("DIF for HB- jeta =  -7; depth = 2 \b");
          if (kcountHBnegativedirectionReconoiseDIF2 == 11)
            HBnegativedirectionReconoiseDIF2->SetXTitle("DIF for HB- jeta =  -6; depth = 2 \b");
          if (kcountHBnegativedirectionReconoiseDIF2 == 12)
            HBnegativedirectionReconoiseDIF2->SetXTitle("DIF for HB- jeta =  -5; depth = 2 \b");
          if (kcountHBnegativedirectionReconoiseDIF2 == 13)
            HBnegativedirectionReconoiseDIF2->SetXTitle("DIF for HB- jeta =  -4; depth = 2 \b");
          if (kcountHBnegativedirectionReconoiseDIF2 == 14)
            HBnegativedirectionReconoiseDIF2->SetXTitle("DIF for HB- jeta =  -3; depth = 2 \b");
          if (kcountHBnegativedirectionReconoiseDIF2 == 15)
            HBnegativedirectionReconoiseDIF2->SetXTitle("DIF for HB- jeta =  -2; depth = 2 \b");
          if (kcountHBnegativedirectionReconoiseDIF2 == 16)
            HBnegativedirectionReconoiseDIF2->SetXTitle("DIF for HB- jeta =  -1; depth = 2 \b");
          HBnegativedirectionReconoiseDIF2->Draw("Error");
          kcountHBnegativedirectionReconoiseDIF2++;
          if (kcountHBnegativedirectionReconoiseDIF2 > 16)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 < 0 )
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DIFreconoiseNegativeDirectionhistD1PhiSymmetryDepth2HB.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHBnegativedirectionReconoiseDIF2)
    delete h2CeffHBnegativedirectionReconoiseDIF2;
  //========================================================================================== 1116
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=3
  //cout<<"      1D plot: R vs phi , different eta,  depth=3 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(4, 4);
  c3x5->cd(1);
  int kcountHBnegativedirectionReconoiseDIF3 = 1;
  TH1F *h2CeffHBnegativedirectionReconoiseDIF3 = new TH1F("h2CeffHBnegativedirectionReconoiseDIF3", "", nphi, 0., 72.);
  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionReconoiseDIF:
    if (jeta - 41 >= -16 && jeta - 41 <= -1) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=3
      for (int i = 2; i < 3; i++) {
        TH1F *HBnegativedirectionReconoiseDIF3 = (TH1F *)h2CeffHBnegativedirectionReconoiseDIF3->Clone("twod1");
        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = breconoiseHB[i][jeta][jphi];
          if (ccc1 != 0.) {
            HBnegativedirectionReconoiseDIF3->Fill(jphi, ccc1);
            ccctest = 1.;  //HBnegativedirectionReconoiseDIF3->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"666        kcountHBnegativedirectionReconoiseDIF3   =     "<<kcountHBnegativedirectionReconoiseDIF3  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHBnegativedirectionReconoiseDIF3);
          HBnegativedirectionReconoiseDIF3->SetMarkerStyle(20);
          HBnegativedirectionReconoiseDIF3->SetMarkerSize(0.4);
          HBnegativedirectionReconoiseDIF3->GetYaxis()->SetLabelSize(0.04);
          HBnegativedirectionReconoiseDIF3->SetXTitle("HBnegativedirectionReconoiseDIF3 \b");
          HBnegativedirectionReconoiseDIF3->SetMarkerColor(2);
          HBnegativedirectionReconoiseDIF3->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHBnegativedirectionReconoiseDIF3 == 1)
            HBnegativedirectionReconoiseDIF3->SetXTitle("DIF for HB- jeta = -16; depth = 3 \b");
          if (kcountHBnegativedirectionReconoiseDIF3 == 2)
            HBnegativedirectionReconoiseDIF3->SetXTitle("DIF for HB- jeta = -15; depth = 3 \b");
          if (kcountHBnegativedirectionReconoiseDIF3 == 3)
            HBnegativedirectionReconoiseDIF3->SetXTitle("DIF for HB- jeta = -14; depth = 3 \b");
          if (kcountHBnegativedirectionReconoiseDIF3 == 4)
            HBnegativedirectionReconoiseDIF3->SetXTitle("DIF for HB- jeta = -13; depth = 3 \b");
          if (kcountHBnegativedirectionReconoiseDIF3 == 5)
            HBnegativedirectionReconoiseDIF3->SetXTitle("DIF for HB- jeta = -12; depth = 3 \b");
          if (kcountHBnegativedirectionReconoiseDIF3 == 6)
            HBnegativedirectionReconoiseDIF3->SetXTitle("DIF for HB- jeta = -11; depth = 3 \b");
          if (kcountHBnegativedirectionReconoiseDIF3 == 7)
            HBnegativedirectionReconoiseDIF3->SetXTitle("DIF for HB- jeta = -10; depth = 3 \b");
          if (kcountHBnegativedirectionReconoiseDIF3 == 8)
            HBnegativedirectionReconoiseDIF3->SetXTitle("DIF for HB- jeta =  -9; depth = 3 \b");
          if (kcountHBnegativedirectionReconoiseDIF3 == 9)
            HBnegativedirectionReconoiseDIF3->SetXTitle("DIF for HB- jeta =  -8; depth = 3 \b");
          if (kcountHBnegativedirectionReconoiseDIF3 == 10)
            HBnegativedirectionReconoiseDIF3->SetXTitle("DIF for HB- jeta =  -7; depth = 3 \b");
          if (kcountHBnegativedirectionReconoiseDIF3 == 11)
            HBnegativedirectionReconoiseDIF3->SetXTitle("DIF for HB- jeta =  -6; depth = 3 \b");
          if (kcountHBnegativedirectionReconoiseDIF3 == 12)
            HBnegativedirectionReconoiseDIF3->SetXTitle("DIF for HB- jeta =  -5; depth = 3 \b");
          if (kcountHBnegativedirectionReconoiseDIF3 == 13)
            HBnegativedirectionReconoiseDIF3->SetXTitle("DIF for HB- jeta =  -4; depth = 3 \b");
          if (kcountHBnegativedirectionReconoiseDIF3 == 14)
            HBnegativedirectionReconoiseDIF3->SetXTitle("DIF for HB- jeta =  -3; depth = 3 \b");
          if (kcountHBnegativedirectionReconoiseDIF3 == 15)
            HBnegativedirectionReconoiseDIF3->SetXTitle("DIF for HB- jeta =  -2; depth = 3 \b");
          if (kcountHBnegativedirectionReconoiseDIF3 == 16)
            HBnegativedirectionReconoiseDIF3->SetXTitle("DIF for HB- jeta =  -1; depth = 3 \b");

          HBnegativedirectionReconoiseDIF3->Draw("Error");
          kcountHBnegativedirectionReconoiseDIF3++;
          if (kcountHBnegativedirectionReconoiseDIF3 > 16)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 < 0 )
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DIFreconoiseNegativeDirectionhistD1PhiSymmetryDepth3HB.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHBnegativedirectionReconoiseDIF3)
    delete h2CeffHBnegativedirectionReconoiseDIF3;
  //========================================================================================== 1117
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=4
  //cout<<"      1D plot: R vs phi , different eta,  depth=4 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(4, 4);
  c3x5->cd(1);
  int kcountHBnegativedirectionReconoiseDIF4 = 1;
  TH1F *h2CeffHBnegativedirectionReconoiseDIF4 = new TH1F("h2CeffHBnegativedirectionReconoiseDIF4", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionReconoiseDIF:
    if (jeta - 41 >= -16 && jeta - 41 <= -1) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=4
      for (int i = 3; i < 4; i++) {
        TH1F *HBnegativedirectionReconoiseDIF4 = (TH1F *)h2CeffHBnegativedirectionReconoiseDIF4->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = breconoiseHB[i][jeta][jphi];
          if (ccc1 != 0.) {
            HBnegativedirectionReconoiseDIF4->Fill(jphi, ccc1);
            ccctest = 1.;  //HBnegativedirectionReconoiseDIF4->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"777        kcountHBnegativedirectionReconoiseDIF4   =     "<<kcountHBnegativedirectionReconoiseDIF4  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHBnegativedirectionReconoiseDIF4);
          HBnegativedirectionReconoiseDIF4->SetMarkerStyle(20);
          HBnegativedirectionReconoiseDIF4->SetMarkerSize(0.4);
          HBnegativedirectionReconoiseDIF4->GetYaxis()->SetLabelSize(0.04);
          HBnegativedirectionReconoiseDIF4->SetXTitle("HBnegativedirectionReconoiseDIF4 \b");
          HBnegativedirectionReconoiseDIF4->SetMarkerColor(2);
          HBnegativedirectionReconoiseDIF4->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHBnegativedirectionReconoiseDIF4 == 1)
            HBnegativedirectionReconoiseDIF4->SetXTitle("DIF for HB- jeta = -16; depth = 4 \b");
          if (kcountHBnegativedirectionReconoiseDIF4 == 2)
            HBnegativedirectionReconoiseDIF4->SetXTitle("DIF for HB- jeta = -15; depth = 4 \b");
          if (kcountHBnegativedirectionReconoiseDIF4 == 3)
            HBnegativedirectionReconoiseDIF4->SetXTitle("DIF for HB- jeta = -14; depth = 4 \b");
          if (kcountHBnegativedirectionReconoiseDIF4 == 4)
            HBnegativedirectionReconoiseDIF4->SetXTitle("DIF for HB- jeta = -13; depth = 4 \b");
          if (kcountHBnegativedirectionReconoiseDIF4 == 5)
            HBnegativedirectionReconoiseDIF4->SetXTitle("DIF for HB- jeta = -12; depth = 4 \b");
          if (kcountHBnegativedirectionReconoiseDIF4 == 6)
            HBnegativedirectionReconoiseDIF4->SetXTitle("DIF for HB- jeta = -11; depth = 4 \b");
          if (kcountHBnegativedirectionReconoiseDIF4 == 7)
            HBnegativedirectionReconoiseDIF4->SetXTitle("DIF for HB- jeta = -10; depth = 4 \b");
          if (kcountHBnegativedirectionReconoiseDIF4 == 8)
            HBnegativedirectionReconoiseDIF4->SetXTitle("DIF for HB- jeta =  -9; depth = 4 \b");
          if (kcountHBnegativedirectionReconoiseDIF4 == 9)
            HBnegativedirectionReconoiseDIF4->SetXTitle("DIF for HB- jeta =  -8; depth = 4 \b");
          if (kcountHBnegativedirectionReconoiseDIF4 == 10)
            HBnegativedirectionReconoiseDIF4->SetXTitle("DIF for HB- jeta =  -7; depth = 4 \b");
          if (kcountHBnegativedirectionReconoiseDIF4 == 11)
            HBnegativedirectionReconoiseDIF4->SetXTitle("DIF for HB- jeta =  -6; depth = 4 \b");
          if (kcountHBnegativedirectionReconoiseDIF4 == 12)
            HBnegativedirectionReconoiseDIF4->SetXTitle("DIF for HB- jeta =  -5; depth = 4 \b");
          if (kcountHBnegativedirectionReconoiseDIF4 == 13)
            HBnegativedirectionReconoiseDIF4->SetXTitle("DIF for HB- jeta =  -4; depth = 4 \b");
          if (kcountHBnegativedirectionReconoiseDIF4 == 14)
            HBnegativedirectionReconoiseDIF4->SetXTitle("DIF for HB- jeta =  -3; depth = 4 \b");
          if (kcountHBnegativedirectionReconoiseDIF4 == 15)
            HBnegativedirectionReconoiseDIF4->SetXTitle("DIF for HB- jeta =  -2; depth = 4 \b");
          if (kcountHBnegativedirectionReconoiseDIF4 == 16)
            HBnegativedirectionReconoiseDIF4->SetXTitle("DIF for HB- jeta =  -1; depth = 4 \b");
          HBnegativedirectionReconoiseDIF4->Draw("Error");
          kcountHBnegativedirectionReconoiseDIF4++;
          if (kcountHBnegativedirectionReconoiseDIF4 > 16)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 < 0 )
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DIFreconoiseNegativeDirectionhistD1PhiSymmetryDepth4HB.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHBnegativedirectionReconoiseDIF4)
    delete h2CeffHBnegativedirectionReconoiseDIF4;

  //======================================================================================================================
  //======================================================================================================================
  //======================================================================================================================
  //                            DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD:

  //cout<<"    Start Vaiance: preparation  *****" <<endl;
  TH2F *reconoiseVariance1HB1 = (TH2F *)dir->FindObjectAny("h_recNoiseEnergy2_HB1");
  TH2F *reconoiseVariance0HB1 = (TH2F *)dir->FindObjectAny("h_recNoiseEnergy0_HB1");
  TH2F *reconoiseVarianceHB1 = (TH2F *)reconoiseVariance1HB1->Clone("reconoiseVarianceHB1");
  reconoiseVarianceHB1->Divide(reconoiseVariance1HB1, reconoiseVariance0HB1, 1, 1, "B");
  TH2F *reconoiseVariance1HB2 = (TH2F *)dir->FindObjectAny("h_recNoiseEnergy2_HB2");
  TH2F *reconoiseVariance0HB2 = (TH2F *)dir->FindObjectAny("h_recNoiseEnergy0_HB2");
  TH2F *reconoiseVarianceHB2 = (TH2F *)reconoiseVariance1HB2->Clone("reconoiseVarianceHB2");
  reconoiseVarianceHB2->Divide(reconoiseVariance1HB2, reconoiseVariance0HB2, 1, 1, "B");
  TH2F *reconoiseVariance1HB3 = (TH2F *)dir->FindObjectAny("h_recNoiseEnergy2_HB3");
  TH2F *reconoiseVariance0HB3 = (TH2F *)dir->FindObjectAny("h_recNoiseEnergy0_HB3");
  TH2F *reconoiseVarianceHB3 = (TH2F *)reconoiseVariance1HB3->Clone("reconoiseVarianceHB3");
  reconoiseVarianceHB3->Divide(reconoiseVariance1HB3, reconoiseVariance0HB3, 1, 1, "B");
  TH2F *reconoiseVariance1HB4 = (TH2F *)dir->FindObjectAny("h_recNoiseEnergy2_HB4");
  TH2F *reconoiseVariance0HB4 = (TH2F *)dir->FindObjectAny("h_recNoiseEnergy0_HB4");
  TH2F *reconoiseVarianceHB4 = (TH2F *)reconoiseVariance1HB4->Clone("reconoiseVarianceHB4");
  reconoiseVarianceHB4->Divide(reconoiseVariance1HB4, reconoiseVariance0HB4, 1, 1, "B");
  //cout<<"      Vaiance: preparation DONE *****" <<endl;
  //====================================================================== put Vaiance=Dispersia = Sig**2=<R**2> - (<R>)**2 into massive reconoisevarianceHB
  //                                                                                           = sum(R*R)/N - (sum(R)/N)**2
  for (int jeta = 0; jeta < njeta; jeta++) {
    if ((jeta - 41 >= -16 && jeta - 41 <= -1) || (jeta - 41 >= 0 && jeta - 41 <= 15)) {
      //preparation for PHI normalization:
      double sumreconoiseHB0 = 0;
      int nsumreconoiseHB0 = 0;
      double sumreconoiseHB1 = 0;
      int nsumreconoiseHB1 = 0;
      double sumreconoiseHB2 = 0;
      int nsumreconoiseHB2 = 0;
      double sumreconoiseHB3 = 0;
      int nsumreconoiseHB3 = 0;
      for (int jphi = 0; jphi < njphi; jphi++) {
        reconoisevarianceHB[0][jeta][jphi] = reconoiseVarianceHB1->GetBinContent(jeta + 1, jphi + 1);
        reconoisevarianceHB[1][jeta][jphi] = reconoiseVarianceHB2->GetBinContent(jeta + 1, jphi + 1);
        reconoisevarianceHB[2][jeta][jphi] = reconoiseVarianceHB3->GetBinContent(jeta + 1, jphi + 1);
        reconoisevarianceHB[3][jeta][jphi] = reconoiseVarianceHB4->GetBinContent(jeta + 1, jphi + 1);
        if (reconoisevarianceHB[0][jeta][jphi] != 0.) {
          sumreconoiseHB0 += reconoisevarianceHB[0][jeta][jphi];
          ++nsumreconoiseHB0;
        }
        if (reconoisevarianceHB[1][jeta][jphi] != 0.) {
          sumreconoiseHB1 += reconoisevarianceHB[1][jeta][jphi];
          ++nsumreconoiseHB1;
        }
        if (reconoisevarianceHB[2][jeta][jphi] != 0.) {
          sumreconoiseHB2 += reconoisevarianceHB[2][jeta][jphi];
          ++nsumreconoiseHB2;
        }
        if (reconoisevarianceHB[3][jeta][jphi] != 0.) {
          sumreconoiseHB3 += reconoisevarianceHB[3][jeta][jphi];
          ++nsumreconoiseHB3;
        }
      }  // phi
      // PHI normalization :
      for (int jphi = 0; jphi < njphi; jphi++) {
        if (sumreconoiseHB0 != 0.)
          reconoisevarianceHB[0][jeta][jphi] /= (sumreconoiseHB0 / nsumreconoiseHB0);
        if (sumreconoiseHB1 != 0.)
          reconoisevarianceHB[1][jeta][jphi] /= (sumreconoiseHB1 / nsumreconoiseHB1);
        if (sumreconoiseHB2 != 0.)
          reconoisevarianceHB[2][jeta][jphi] /= (sumreconoiseHB2 / nsumreconoiseHB2);
        if (sumreconoiseHB3 != 0.)
          reconoisevarianceHB[3][jeta][jphi] /= (sumreconoiseHB3 / nsumreconoiseHB3);
      }  // phi
      //       reconoisevarianceHB (D)           = sum(R*R)/N - (sum(R)/N)**2
      for (int jphi = 0; jphi < njphi; jphi++) {
        //	   cout<<"12 12 12   jeta=     "<< jeta <<"   jphi   =     "<<jphi  <<endl;
        reconoisevarianceHB[0][jeta][jphi] -= areconoiseHB[0][jeta][jphi] * areconoiseHB[0][jeta][jphi];
        reconoisevarianceHB[0][jeta][jphi] = fabs(reconoisevarianceHB[0][jeta][jphi]);
        reconoisevarianceHB[1][jeta][jphi] -= areconoiseHB[1][jeta][jphi] * areconoiseHB[1][jeta][jphi];
        reconoisevarianceHB[1][jeta][jphi] = fabs(reconoisevarianceHB[1][jeta][jphi]);
        reconoisevarianceHB[2][jeta][jphi] -= areconoiseHB[2][jeta][jphi] * areconoiseHB[2][jeta][jphi];
        reconoisevarianceHB[2][jeta][jphi] = fabs(reconoisevarianceHB[2][jeta][jphi]);
        reconoisevarianceHB[3][jeta][jphi] -= areconoiseHB[3][jeta][jphi] * areconoiseHB[3][jeta][jphi];
        reconoisevarianceHB[3][jeta][jphi] = fabs(reconoisevarianceHB[3][jeta][jphi]);
      }
    }
  }
  //cout<<"      Vaiance: DONE*****" <<endl;
  //------------------------  2D-eta/phi-plot: D, averaged over depthfs
  //======================================================================
  //======================================================================
  //cout<<"      R2D-eta/phi-plot: D, averaged over depthfs *****" <<endl;
  c1x1->Clear();
  /////////////////
  c1x0->Divide(1, 1);
  c1x0->cd(1);
  TH2F *DefzDreconoiseHB42D = new TH2F("DefzDreconoiseHB42D", "", neta, -41., 41., nphi, 0., 72.);
  TH2F *DefzDreconoiseHB42D0 = new TH2F("DefzDreconoiseHB42D0", "", neta, -41., 41., nphi, 0., 72.);
  TH2F *DefzDreconoiseHB42DF = (TH2F *)DefzDreconoiseHB42D0->Clone("DefzDreconoiseHB42DF");
  for (int i = 0; i < ndepth; i++) {
    for (int jeta = 0; jeta < neta; jeta++) {
      if ((jeta - 41 >= -16 && jeta - 41 <= -1) || (jeta - 41 >= 0 && jeta - 41 <= 15)) {
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = reconoisevarianceHB[i][jeta][jphi];
          int k2plot = jeta - 41;
          int kkk = k2plot;  //if(k2plot >0   kkk=k2plot+1; //-41 +41 !=0
          if (areconoiseHB[i][jeta][jphi] > 0.) {
            DefzDreconoiseHB42D->Fill(kkk, jphi, ccc1);
            DefzDreconoiseHB42D0->Fill(kkk, jphi, 1.);
          }
        }
      }
    }
  }
  DefzDreconoiseHB42DF->Divide(DefzDreconoiseHB42D, DefzDreconoiseHB42D0, 1, 1, "B");  // average A
  //    DefzDreconoiseHB1->Sumw2();
  gPad->SetGridy();
  gPad->SetGridx();  //      gPad->SetLogz();
  DefzDreconoiseHB42DF->SetMarkerStyle(20);
  DefzDreconoiseHB42DF->SetMarkerSize(0.4);
  DefzDreconoiseHB42DF->GetZaxis()->SetLabelSize(0.08);
  DefzDreconoiseHB42DF->SetXTitle("<D>_depth       #eta  \b");
  DefzDreconoiseHB42DF->SetYTitle("      #phi \b");
  DefzDreconoiseHB42DF->SetZTitle("<D>_depth \b");
  DefzDreconoiseHB42DF->SetMarkerColor(2);
  DefzDreconoiseHB42DF->SetLineColor(
      0);  //      DefzDreconoiseHB42DF->SetMaximum(1.000);  //      DefzDreconoiseHB42DF->SetMinimum(1.0);
  DefzDreconoiseHB42DF->Draw("COLZ");
  /////////////////
  c1x0->Update();
  c1x0->Print("DreconoiseGeneralD2PhiSymmetryHB.png");
  c1x0->Clear();
  // clean-up
  if (DefzDreconoiseHB42D)
    delete DefzDreconoiseHB42D;
  if (DefzDreconoiseHB42D0)
    delete DefzDreconoiseHB42D0;
  if (DefzDreconoiseHB42DF)
    delete DefzDreconoiseHB42DF;
  //====================================================================== 1D plot: D vs phi , averaged over depthfs & eta
  //======================================================================
  //cout<<"      1D plot: D vs phi , averaged over depthfs & eta *****" <<endl;
  c1x1->Clear();
  /////////////////
  c1x1->Divide(1, 1);
  c1x1->cd(1);
  TH1F *DefzDreconoiseHB41D = new TH1F("DefzDreconoiseHB41D", "", nphi, 0., 72.);
  TH1F *DefzDreconoiseHB41D0 = new TH1F("DefzDreconoiseHB41D0", "", nphi, 0., 72.);
  TH1F *DefzDreconoiseHB41DF = (TH1F *)DefzDreconoiseHB41D0->Clone("DefzDreconoiseHB41DF");

  for (int jphi = 0; jphi < nphi; jphi++) {
    for (int jeta = 0; jeta < neta; jeta++) {
      if ((jeta - 41 >= -16 && jeta - 41 <= -1) || (jeta - 41 >= 0 && jeta - 41 <= 15)) {
        for (int i = 0; i < ndepth; i++) {
          double ccc1 = reconoisevarianceHB[i][jeta][jphi];
          if (areconoiseHB[i][jeta][jphi] > 0.) {
            DefzDreconoiseHB41D->Fill(jphi, ccc1);
            DefzDreconoiseHB41D0->Fill(jphi, 1.);
          }
        }
      }
    }
  }
  //     DefzDreconoiseHB41D->Sumw2();DefzDreconoiseHB41D0->Sumw2();

  DefzDreconoiseHB41DF->Divide(DefzDreconoiseHB41D, DefzDreconoiseHB41D0, 1, 1, "B");  // R averaged over depthfs & eta
  DefzDreconoiseHB41D0->Sumw2();
  //    for (int jphi=1;jphi<73;jphi++) {DefzDreconoiseHB41DF->SetBinError(jphi,0.01);}
  gPad->SetGridy();
  gPad->SetGridx();  //      gPad->SetLogz();
  DefzDreconoiseHB41DF->SetMarkerStyle(20);
  DefzDreconoiseHB41DF->SetMarkerSize(1.4);
  DefzDreconoiseHB41DF->GetZaxis()->SetLabelSize(0.08);
  DefzDreconoiseHB41DF->SetXTitle("#phi  \b");
  DefzDreconoiseHB41DF->SetYTitle("  <D> \b");
  DefzDreconoiseHB41DF->SetZTitle("<D>_PHI  - AllDepthfs \b");
  DefzDreconoiseHB41DF->SetMarkerColor(4);
  DefzDreconoiseHB41DF->SetLineColor(
      4);  //DefzDreconoiseHB41DF->SetMinimum(0.8);     DefzDreconoiseHB41DF->SetMinimum(-0.015);
  DefzDreconoiseHB41DF->Draw("Error");
  /////////////////
  c1x1->Update();
  c1x1->Print("DreconoiseGeneralD1PhiSymmetryHB.png");
  c1x1->Clear();
  // clean-up
  if (DefzDreconoiseHB41D)
    delete DefzDreconoiseHB41D;
  if (DefzDreconoiseHB41D0)
    delete DefzDreconoiseHB41D0;
  if (DefzDreconoiseHB41DF)
    delete DefzDreconoiseHB41DF;

  //========================================================================================== 14
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=1
  //cout<<"      1D plot: D vs phi , different eta,  depth=1 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(4, 4);
  c3x5->cd(1);
  int kcountHBpositivedirectionReconoiseD1 = 1;
  TH1F *h2CeffHBpositivedirectionReconoiseD1 = new TH1F("h2CeffHBpositivedirectionReconoiseD1", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionReconoiseD:
    if (jeta - 41 >= 0 && jeta - 41 <= 15) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=1
      for (int i = 0; i < 1; i++) {
        TH1F *HBpositivedirectionReconoiseD1 = (TH1F *)h2CeffHBpositivedirectionReconoiseD1->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = reconoisevarianceHB[i][jeta][jphi];
          if (areconoiseHB[i][jeta][jphi] > 0.) {
            HBpositivedirectionReconoiseD1->Fill(jphi, ccc1);
            ccctest = 1.;  //HBpositivedirectionReconoiseD1->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1414       kcountHBpositivedirectionReconoiseD1   =     "<<kcountHBpositivedirectionReconoiseD1  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHBpositivedirectionReconoiseD1);
          HBpositivedirectionReconoiseD1->SetMarkerStyle(20);
          HBpositivedirectionReconoiseD1->SetMarkerSize(0.4);
          HBpositivedirectionReconoiseD1->GetYaxis()->SetLabelSize(0.04);
          HBpositivedirectionReconoiseD1->SetXTitle("HBpositivedirectionReconoiseD1 \b");
          HBpositivedirectionReconoiseD1->SetMarkerColor(2);
          HBpositivedirectionReconoiseD1->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHBpositivedirectionReconoiseD1 == 1)
            HBpositivedirectionReconoiseD1->SetXTitle("D for HB+ jeta =  0; depth = 1 \b");
          if (kcountHBpositivedirectionReconoiseD1 == 2)
            HBpositivedirectionReconoiseD1->SetXTitle("D for HB+ jeta =  1; depth = 1 \b");
          if (kcountHBpositivedirectionReconoiseD1 == 3)
            HBpositivedirectionReconoiseD1->SetXTitle("D for HB+ jeta =  2; depth = 1 \b");
          if (kcountHBpositivedirectionReconoiseD1 == 4)
            HBpositivedirectionReconoiseD1->SetXTitle("D for HB+ jeta =  3; depth = 1 \b");
          if (kcountHBpositivedirectionReconoiseD1 == 5)
            HBpositivedirectionReconoiseD1->SetXTitle("D for HB+ jeta =  4; depth = 1 \b");
          if (kcountHBpositivedirectionReconoiseD1 == 6)
            HBpositivedirectionReconoiseD1->SetXTitle("D for HB+ jeta =  5; depth = 1 \b");
          if (kcountHBpositivedirectionReconoiseD1 == 7)
            HBpositivedirectionReconoiseD1->SetXTitle("D for HB+ jeta =  6; depth = 1 \b");
          if (kcountHBpositivedirectionReconoiseD1 == 8)
            HBpositivedirectionReconoiseD1->SetXTitle("D for HB+ jeta =  7; depth = 1 \b");
          if (kcountHBpositivedirectionReconoiseD1 == 9)
            HBpositivedirectionReconoiseD1->SetXTitle("D for HB+ jeta =  8; depth = 1 \b");
          if (kcountHBpositivedirectionReconoiseD1 == 10)
            HBpositivedirectionReconoiseD1->SetXTitle("D for HB+ jeta =  9; depth = 1 \b");
          if (kcountHBpositivedirectionReconoiseD1 == 11)
            HBpositivedirectionReconoiseD1->SetXTitle("D for HB+ jeta = 10; depth = 1 \b");
          if (kcountHBpositivedirectionReconoiseD1 == 12)
            HBpositivedirectionReconoiseD1->SetXTitle("D for HB+ jeta = 11; depth = 1 \b");
          if (kcountHBpositivedirectionReconoiseD1 == 13)
            HBpositivedirectionReconoiseD1->SetXTitle("D for HB+ jeta = 12; depth = 1 \b");
          if (kcountHBpositivedirectionReconoiseD1 == 14)
            HBpositivedirectionReconoiseD1->SetXTitle("D for HB+ jeta = 13; depth = 1 \b");
          if (kcountHBpositivedirectionReconoiseD1 == 15)
            HBpositivedirectionReconoiseD1->SetXTitle("D for HB+ jeta = 14; depth = 1 \b");
          if (kcountHBpositivedirectionReconoiseD1 == 16)
            HBpositivedirectionReconoiseD1->SetXTitle("D for HB+ jeta = 15; depth = 1 \b");
          HBpositivedirectionReconoiseD1->Draw("Error");
          kcountHBpositivedirectionReconoiseD1++;
          if (kcountHBpositivedirectionReconoiseD1 > 16)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DreconoisePositiveDirectionhistD1PhiSymmetryDepth1HB.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHBpositivedirectionReconoiseD1)
    delete h2CeffHBpositivedirectionReconoiseD1;
  //========================================================================================== 15
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=2
  //cout<<"      1D plot: D vs phi , different eta,  depth=2 *****" <<endl;
  c3x5->Clear();
  c3x5->Divide(4, 4);
  c3x5->cd(1);
  int kcountHBpositivedirectionReconoiseD2 = 1;
  TH1F *h2CeffHBpositivedirectionReconoiseD2 = new TH1F("h2CeffHBpositivedirectionReconoiseD2", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionReconoiseD:
    if (jeta - 41 >= 0 && jeta - 41 <= 15) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=2
      for (int i = 1; i < 2; i++) {
        TH1F *HBpositivedirectionReconoiseD2 = (TH1F *)h2CeffHBpositivedirectionReconoiseD2->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = reconoisevarianceHB[i][jeta][jphi];
          if (areconoiseHB[i][jeta][jphi] > 0.) {
            HBpositivedirectionReconoiseD2->Fill(jphi, ccc1);
            ccctest = 1.;  //HBpositivedirectionReconoiseD2->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1515       kcountHBpositivedirectionReconoiseD2   =     "<<kcountHBpositivedirectionReconoiseD2  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHBpositivedirectionReconoiseD2);
          HBpositivedirectionReconoiseD2->SetMarkerStyle(20);
          HBpositivedirectionReconoiseD2->SetMarkerSize(0.4);
          HBpositivedirectionReconoiseD2->GetYaxis()->SetLabelSize(0.04);
          HBpositivedirectionReconoiseD2->SetXTitle("HBpositivedirectionReconoiseD2 \b");
          HBpositivedirectionReconoiseD2->SetMarkerColor(2);
          HBpositivedirectionReconoiseD2->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHBpositivedirectionReconoiseD2 == 1)
            HBpositivedirectionReconoiseD2->SetXTitle("D for HB+ jeta =  0; depth = 2 \b");
          if (kcountHBpositivedirectionReconoiseD2 == 2)
            HBpositivedirectionReconoiseD2->SetXTitle("D for HB+ jeta =  1; depth = 2 \b");
          if (kcountHBpositivedirectionReconoiseD2 == 3)
            HBpositivedirectionReconoiseD2->SetXTitle("D for HB+ jeta =  2; depth = 2 \b");
          if (kcountHBpositivedirectionReconoiseD2 == 4)
            HBpositivedirectionReconoiseD2->SetXTitle("D for HB+ jeta =  3; depth = 2 \b");
          if (kcountHBpositivedirectionReconoiseD2 == 5)
            HBpositivedirectionReconoiseD2->SetXTitle("D for HB+ jeta =  4; depth = 2 \b");
          if (kcountHBpositivedirectionReconoiseD2 == 6)
            HBpositivedirectionReconoiseD2->SetXTitle("D for HB+ jeta =  5; depth = 2 \b");
          if (kcountHBpositivedirectionReconoiseD2 == 7)
            HBpositivedirectionReconoiseD2->SetXTitle("D for HB+ jeta =  6; depth = 2 \b");
          if (kcountHBpositivedirectionReconoiseD2 == 8)
            HBpositivedirectionReconoiseD2->SetXTitle("D for HB+ jeta =  7; depth = 2 \b");
          if (kcountHBpositivedirectionReconoiseD2 == 9)
            HBpositivedirectionReconoiseD2->SetXTitle("D for HB+ jeta =  8; depth = 2 \b");
          if (kcountHBpositivedirectionReconoiseD2 == 10)
            HBpositivedirectionReconoiseD2->SetXTitle("D for HB+ jeta =  9; depth = 2 \b");
          if (kcountHBpositivedirectionReconoiseD2 == 11)
            HBpositivedirectionReconoiseD2->SetXTitle("D for HB+ jeta = 10; depth = 2 \b");
          if (kcountHBpositivedirectionReconoiseD2 == 12)
            HBpositivedirectionReconoiseD2->SetXTitle("D for HB+ jeta = 11; depth = 2 \b");
          if (kcountHBpositivedirectionReconoiseD2 == 13)
            HBpositivedirectionReconoiseD2->SetXTitle("D for HB+ jeta = 12; depth = 2 \b");
          if (kcountHBpositivedirectionReconoiseD2 == 14)
            HBpositivedirectionReconoiseD2->SetXTitle("D for HB+ jeta = 13; depth = 2 \b");
          if (kcountHBpositivedirectionReconoiseD2 == 15)
            HBpositivedirectionReconoiseD2->SetXTitle("D for HB+ jeta = 14; depth = 2 \b");
          if (kcountHBpositivedirectionReconoiseD2 == 16)
            HBpositivedirectionReconoiseD2->SetXTitle("D for HB+ jeta = 15; depth = 2 \b");
          HBpositivedirectionReconoiseD2->Draw("Error");
          kcountHBpositivedirectionReconoiseD2++;
          if (kcountHBpositivedirectionReconoiseD2 > 16)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DreconoisePositiveDirectionhistD1PhiSymmetryDepth2HB.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHBpositivedirectionReconoiseD2)
    delete h2CeffHBpositivedirectionReconoiseD2;
  //========================================================================================== 16
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=3
  //cout<<"      1D plot: D vs phi , different eta,  depth=3 *****" <<endl;
  c3x5->Clear();
  c3x5->Divide(4, 4);
  c3x5->cd(1);
  int kcountHBpositivedirectionReconoiseD3 = 1;
  TH1F *h2CeffHBpositivedirectionReconoiseD3 = new TH1F("h2CeffHBpositivedirectionReconoiseD3", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionReconoiseD:
    if (jeta - 41 >= 0 && jeta - 41 <= 15) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=3
      for (int i = 2; i < 3; i++) {
        TH1F *HBpositivedirectionReconoiseD3 = (TH1F *)h2CeffHBpositivedirectionReconoiseD3->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = reconoisevarianceHB[i][jeta][jphi];
          if (areconoiseHB[i][jeta][jphi] > 0.) {
            HBpositivedirectionReconoiseD3->Fill(jphi, ccc1);
            ccctest = 1.;  //HBpositivedirectionReconoiseD3->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1616       kcountHBpositivedirectionReconoiseD3   =     "<<kcountHBpositivedirectionReconoiseD3  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHBpositivedirectionReconoiseD3);
          HBpositivedirectionReconoiseD3->SetMarkerStyle(20);
          HBpositivedirectionReconoiseD3->SetMarkerSize(0.4);
          HBpositivedirectionReconoiseD3->GetYaxis()->SetLabelSize(0.04);
          HBpositivedirectionReconoiseD3->SetXTitle("HBpositivedirectionReconoiseD3 \b");
          HBpositivedirectionReconoiseD3->SetMarkerColor(2);
          HBpositivedirectionReconoiseD3->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHBpositivedirectionReconoiseD3 == 1)
            HBpositivedirectionReconoiseD3->SetXTitle("D for HB+ jeta =  0; depth = 3 \b");
          if (kcountHBpositivedirectionReconoiseD3 == 2)
            HBpositivedirectionReconoiseD3->SetXTitle("D for HB+ jeta =  1; depth = 3 \b");
          if (kcountHBpositivedirectionReconoiseD3 == 3)
            HBpositivedirectionReconoiseD3->SetXTitle("D for HB+ jeta =  2; depth = 3 \b");
          if (kcountHBpositivedirectionReconoiseD3 == 4)
            HBpositivedirectionReconoiseD3->SetXTitle("D for HB+ jeta =  3; depth = 3 \b");
          if (kcountHBpositivedirectionReconoiseD3 == 5)
            HBpositivedirectionReconoiseD3->SetXTitle("D for HB+ jeta =  4; depth = 3 \b");
          if (kcountHBpositivedirectionReconoiseD3 == 6)
            HBpositivedirectionReconoiseD3->SetXTitle("D for HB+ jeta =  5; depth = 3 \b");
          if (kcountHBpositivedirectionReconoiseD3 == 7)
            HBpositivedirectionReconoiseD3->SetXTitle("D for HB+ jeta =  6; depth = 3 \b");
          if (kcountHBpositivedirectionReconoiseD3 == 8)
            HBpositivedirectionReconoiseD3->SetXTitle("D for HB+ jeta =  7; depth = 3 \b");
          if (kcountHBpositivedirectionReconoiseD3 == 9)
            HBpositivedirectionReconoiseD3->SetXTitle("D for HB+ jeta =  8; depth = 3 \b");
          if (kcountHBpositivedirectionReconoiseD3 == 10)
            HBpositivedirectionReconoiseD3->SetXTitle("D for HB+ jeta =  9; depth = 3 \b");
          if (kcountHBpositivedirectionReconoiseD3 == 11)
            HBpositivedirectionReconoiseD3->SetXTitle("D for HB+ jeta = 10; depth = 3 \b");
          if (kcountHBpositivedirectionReconoiseD3 == 12)
            HBpositivedirectionReconoiseD3->SetXTitle("D for HB+ jeta = 11; depth = 3 \b");
          if (kcountHBpositivedirectionReconoiseD3 == 13)
            HBpositivedirectionReconoiseD3->SetXTitle("D for HB+ jeta = 12; depth = 3 \b");
          if (kcountHBpositivedirectionReconoiseD3 == 14)
            HBpositivedirectionReconoiseD3->SetXTitle("D for HB+ jeta = 13; depth = 3 \b");
          if (kcountHBpositivedirectionReconoiseD3 == 15)
            HBpositivedirectionReconoiseD3->SetXTitle("D for HB+ jeta = 14; depth = 3 \b");
          if (kcountHBpositivedirectionReconoiseD3 == 16)
            HBpositivedirectionReconoiseD3->SetXTitle("D for HB+ jeta = 15; depth = 3 \b");
          HBpositivedirectionReconoiseD3->Draw("Error");
          kcountHBpositivedirectionReconoiseD3++;
          if (kcountHBpositivedirectionReconoiseD3 > 16)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DreconoisePositiveDirectionhistD1PhiSymmetryDepth3HB.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHBpositivedirectionReconoiseD3)
    delete h2CeffHBpositivedirectionReconoiseD3;
  //========================================================================================== 17
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=4
  //cout<<"      1D plot: D vs phi , different eta,  depth=4 *****" <<endl;
  c3x5->Clear();
  c3x5->Divide(4, 4);
  c3x5->cd(1);
  int kcountHBpositivedirectionReconoiseD4 = 1;
  TH1F *h2CeffHBpositivedirectionReconoiseD4 = new TH1F("h2CeffHBpositivedirectionReconoiseD4", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionReconoiseD:
    if (jeta - 41 >= 0 && jeta - 41 <= 15) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=4
      for (int i = 3; i < 4; i++) {
        TH1F *HBpositivedirectionReconoiseD4 = (TH1F *)h2CeffHBpositivedirectionReconoiseD4->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = reconoisevarianceHB[i][jeta][jphi];
          if (areconoiseHB[i][jeta][jphi] > 0.) {
            HBpositivedirectionReconoiseD4->Fill(jphi, ccc1);
            ccctest = 1.;  //HBpositivedirectionReconoiseD4->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1717       kcountHBpositivedirectionReconoiseD4   =     "<<kcountHBpositivedirectionReconoiseD4  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHBpositivedirectionReconoiseD4);
          HBpositivedirectionReconoiseD4->SetMarkerStyle(20);
          HBpositivedirectionReconoiseD4->SetMarkerSize(0.4);
          HBpositivedirectionReconoiseD4->GetYaxis()->SetLabelSize(0.04);
          HBpositivedirectionReconoiseD4->SetXTitle("HBpositivedirectionReconoiseD4 \b");
          HBpositivedirectionReconoiseD4->SetMarkerColor(2);
          HBpositivedirectionReconoiseD4->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHBpositivedirectionReconoiseD4 == 1)
            HBpositivedirectionReconoiseD4->SetXTitle("D for HB+ jeta =  0; depth = 4 \b");
          if (kcountHBpositivedirectionReconoiseD4 == 2)
            HBpositivedirectionReconoiseD4->SetXTitle("D for HB+ jeta =  1; depth = 4 \b");
          if (kcountHBpositivedirectionReconoiseD4 == 3)
            HBpositivedirectionReconoiseD4->SetXTitle("D for HB+ jeta =  2; depth = 4 \b");
          if (kcountHBpositivedirectionReconoiseD4 == 4)
            HBpositivedirectionReconoiseD4->SetXTitle("D for HB+ jeta =  3; depth = 4 \b");
          if (kcountHBpositivedirectionReconoiseD4 == 5)
            HBpositivedirectionReconoiseD4->SetXTitle("D for HB+ jeta =  4; depth = 4 \b");
          if (kcountHBpositivedirectionReconoiseD4 == 6)
            HBpositivedirectionReconoiseD4->SetXTitle("D for HB+ jeta =  5; depth = 4 \b");
          if (kcountHBpositivedirectionReconoiseD4 == 7)
            HBpositivedirectionReconoiseD4->SetXTitle("D for HB+ jeta =  6; depth = 4 \b");
          if (kcountHBpositivedirectionReconoiseD4 == 8)
            HBpositivedirectionReconoiseD4->SetXTitle("D for HB+ jeta =  7; depth = 4 \b");
          if (kcountHBpositivedirectionReconoiseD4 == 9)
            HBpositivedirectionReconoiseD4->SetXTitle("D for HB+ jeta =  8; depth = 4 \b");
          if (kcountHBpositivedirectionReconoiseD4 == 10)
            HBpositivedirectionReconoiseD4->SetXTitle("D for HB+ jeta =  9; depth = 4 \b");
          if (kcountHBpositivedirectionReconoiseD4 == 11)
            HBpositivedirectionReconoiseD4->SetXTitle("D for HB+ jeta = 10; depth = 4 \b");
          if (kcountHBpositivedirectionReconoiseD4 == 12)
            HBpositivedirectionReconoiseD4->SetXTitle("D for HB+ jeta = 11; depth = 4 \b");
          if (kcountHBpositivedirectionReconoiseD4 == 13)
            HBpositivedirectionReconoiseD4->SetXTitle("D for HB+ jeta = 12; depth = 4 \b");
          if (kcountHBpositivedirectionReconoiseD4 == 14)
            HBpositivedirectionReconoiseD4->SetXTitle("D for HB+ jeta = 13; depth = 4 \b");
          if (kcountHBpositivedirectionReconoiseD4 == 15)
            HBpositivedirectionReconoiseD4->SetXTitle("D for HB+ jeta = 14; depth = 4 \b");
          if (kcountHBpositivedirectionReconoiseD4 == 16)
            HBpositivedirectionReconoiseD4->SetXTitle("D for HB+ jeta = 15; depth = 4 \b");
          HBpositivedirectionReconoiseD4->Draw("Error");
          kcountHBpositivedirectionReconoiseD4++;
          if (kcountHBpositivedirectionReconoiseD4 > 16)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DreconoisePositiveDirectionhistD1PhiSymmetryDepth4HB.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHBpositivedirectionReconoiseD4)
    delete h2CeffHBpositivedirectionReconoiseD4;

  //========================================================================================== 22214
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=1
  //cout<<"      1D plot: D vs phi , different eta,  depth=1 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(4, 4);
  c3x5->cd(1);
  int kcountHBnegativedirectionReconoiseD1 = 1;
  TH1F *h2CeffHBnegativedirectionReconoiseD1 = new TH1F("h2CeffHBnegativedirectionReconoiseD1", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionReconoiseD:
    if (jeta - 41 >= -16 && jeta - 41 <= -1) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=1
      for (int i = 0; i < 1; i++) {
        TH1F *HBnegativedirectionReconoiseD1 = (TH1F *)h2CeffHBnegativedirectionReconoiseD1->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = reconoisevarianceHB[i][jeta][jphi];
          if (areconoiseHB[i][jeta][jphi] > 0.) {
            HBnegativedirectionReconoiseD1->Fill(jphi, ccc1);
            ccctest = 1.;  //HBnegativedirectionReconoiseD1->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1414       kcountHBnegativedirectionReconoiseD1   =     "<<kcountHBnegativedirectionReconoiseD1  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHBnegativedirectionReconoiseD1);
          HBnegativedirectionReconoiseD1->SetMarkerStyle(20);
          HBnegativedirectionReconoiseD1->SetMarkerSize(0.4);
          HBnegativedirectionReconoiseD1->GetYaxis()->SetLabelSize(0.04);
          HBnegativedirectionReconoiseD1->SetXTitle("HBnegativedirectionReconoiseD1 \b");
          HBnegativedirectionReconoiseD1->SetMarkerColor(2);
          HBnegativedirectionReconoiseD1->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHBnegativedirectionReconoiseD1 == 1)
            HBnegativedirectionReconoiseD1->SetXTitle("D for HB- jeta =-16; depth = 1 \b");
          if (kcountHBnegativedirectionReconoiseD1 == 2)
            HBnegativedirectionReconoiseD1->SetXTitle("D for HB- jeta =-15; depth = 1 \b");
          if (kcountHBnegativedirectionReconoiseD1 == 3)
            HBnegativedirectionReconoiseD1->SetXTitle("D for HB- jeta =-14; depth = 1 \b");
          if (kcountHBnegativedirectionReconoiseD1 == 4)
            HBnegativedirectionReconoiseD1->SetXTitle("D for HB- jeta =-13; depth = 1 \b");
          if (kcountHBnegativedirectionReconoiseD1 == 5)
            HBnegativedirectionReconoiseD1->SetXTitle("D for HB- jeta =-12; depth = 1 \b");
          if (kcountHBnegativedirectionReconoiseD1 == 6)
            HBnegativedirectionReconoiseD1->SetXTitle("D for HB- jeta =-11; depth = 1 \b");
          if (kcountHBnegativedirectionReconoiseD1 == 7)
            HBnegativedirectionReconoiseD1->SetXTitle("D for HB- jeta =-10; depth = 1 \b");
          if (kcountHBnegativedirectionReconoiseD1 == 8)
            HBnegativedirectionReconoiseD1->SetXTitle("D for HB- jeta =-9; depth = 1 \b");
          if (kcountHBnegativedirectionReconoiseD1 == 9)
            HBnegativedirectionReconoiseD1->SetXTitle("D for HB- jeta =-8; depth = 1 \b");
          if (kcountHBnegativedirectionReconoiseD1 == 10)
            HBnegativedirectionReconoiseD1->SetXTitle("D for HB- jeta =-7; depth = 1 \b");
          if (kcountHBnegativedirectionReconoiseD1 == 11)
            HBnegativedirectionReconoiseD1->SetXTitle("D for HB- jeta =-6; depth = 1 \b");
          if (kcountHBnegativedirectionReconoiseD1 == 12)
            HBnegativedirectionReconoiseD1->SetXTitle("D for HB- jeta =-5; depth = 1 \b");
          if (kcountHBnegativedirectionReconoiseD1 == 13)
            HBnegativedirectionReconoiseD1->SetXTitle("D for HB- jeta =-4; depth = 1 \b");
          if (kcountHBnegativedirectionReconoiseD1 == 14)
            HBnegativedirectionReconoiseD1->SetXTitle("D for HB- jeta =-3; depth = 1 \b");
          if (kcountHBnegativedirectionReconoiseD1 == 15)
            HBnegativedirectionReconoiseD1->SetXTitle("D for HB- jeta =-2; depth = 1 \b");
          if (kcountHBnegativedirectionReconoiseD1 == 16)
            HBnegativedirectionReconoiseD1->SetXTitle("D for HB- jeta =-1; depth = 1 \b");
          HBnegativedirectionReconoiseD1->Draw("Error");
          kcountHBnegativedirectionReconoiseD1++;
          if (kcountHBnegativedirectionReconoiseD1 > 16)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 < 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DreconoiseNegativeDirectionhistD1PhiSymmetryDepth1HB.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHBnegativedirectionReconoiseD1)
    delete h2CeffHBnegativedirectionReconoiseD1;
  //========================================================================================== 22215
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=2
  //cout<<"      1D plot: D vs phi , different eta,  depth=2 *****" <<endl;
  c3x5->Clear();
  c3x5->Divide(4, 4);
  c3x5->cd(1);
  int kcountHBnegativedirectionReconoiseD2 = 1;
  TH1F *h2CeffHBnegativedirectionReconoiseD2 = new TH1F("h2CeffHBnegativedirectionReconoiseD2", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionReconoiseD:
    if (jeta - 41 >= -16 && jeta - 41 <= -1) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=2
      for (int i = 1; i < 2; i++) {
        TH1F *HBnegativedirectionReconoiseD2 = (TH1F *)h2CeffHBnegativedirectionReconoiseD2->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = reconoisevarianceHB[i][jeta][jphi];
          if (areconoiseHB[i][jeta][jphi] > 0.) {
            HBnegativedirectionReconoiseD2->Fill(jphi, ccc1);
            ccctest = 1.;  //HBnegativedirectionReconoiseD2->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1515       kcountHBnegativedirectionReconoiseD2   =     "<<kcountHBnegativedirectionReconoiseD2  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHBnegativedirectionReconoiseD2);
          HBnegativedirectionReconoiseD2->SetMarkerStyle(20);
          HBnegativedirectionReconoiseD2->SetMarkerSize(0.4);
          HBnegativedirectionReconoiseD2->GetYaxis()->SetLabelSize(0.04);
          HBnegativedirectionReconoiseD2->SetXTitle("HBnegativedirectionReconoiseD2 \b");
          HBnegativedirectionReconoiseD2->SetMarkerColor(2);
          HBnegativedirectionReconoiseD2->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHBnegativedirectionReconoiseD2 == 1)
            HBnegativedirectionReconoiseD2->SetXTitle("D for HB- jeta =-16; depth = 2 \b");
          if (kcountHBnegativedirectionReconoiseD2 == 2)
            HBnegativedirectionReconoiseD2->SetXTitle("D for HB- jeta =-15; depth = 2 \b");
          if (kcountHBnegativedirectionReconoiseD2 == 3)
            HBnegativedirectionReconoiseD2->SetXTitle("D for HB- jeta =-14; depth = 2 \b");
          if (kcountHBnegativedirectionReconoiseD2 == 4)
            HBnegativedirectionReconoiseD2->SetXTitle("D for HB- jeta =-13; depth = 2 \b");
          if (kcountHBnegativedirectionReconoiseD2 == 5)
            HBnegativedirectionReconoiseD2->SetXTitle("D for HB- jeta =-12; depth = 2 \b");
          if (kcountHBnegativedirectionReconoiseD2 == 6)
            HBnegativedirectionReconoiseD2->SetXTitle("D for HB- jeta =-11; depth = 2 \b");
          if (kcountHBnegativedirectionReconoiseD2 == 7)
            HBnegativedirectionReconoiseD2->SetXTitle("D for HB- jeta =-10; depth = 2 \b");
          if (kcountHBnegativedirectionReconoiseD2 == 8)
            HBnegativedirectionReconoiseD2->SetXTitle("D for HB- jeta =-9; depth = 2 \b");
          if (kcountHBnegativedirectionReconoiseD2 == 9)
            HBnegativedirectionReconoiseD2->SetXTitle("D for HB- jeta =-8; depth = 2 \b");
          if (kcountHBnegativedirectionReconoiseD2 == 10)
            HBnegativedirectionReconoiseD2->SetXTitle("D for HB- jeta =-7; depth = 2 \b");
          if (kcountHBnegativedirectionReconoiseD2 == 11)
            HBnegativedirectionReconoiseD2->SetXTitle("D for HB- jeta =-6; depth = 2 \b");
          if (kcountHBnegativedirectionReconoiseD2 == 12)
            HBnegativedirectionReconoiseD2->SetXTitle("D for HB- jeta =-5; depth = 2 \b");
          if (kcountHBnegativedirectionReconoiseD2 == 13)
            HBnegativedirectionReconoiseD2->SetXTitle("D for HB- jeta =-4; depth = 2 \b");
          if (kcountHBnegativedirectionReconoiseD2 == 14)
            HBnegativedirectionReconoiseD2->SetXTitle("D for HB- jeta =-3; depth = 2 \b");
          if (kcountHBnegativedirectionReconoiseD2 == 15)
            HBnegativedirectionReconoiseD2->SetXTitle("D for HB- jeta =-2; depth = 2 \b");
          if (kcountHBnegativedirectionReconoiseD2 == 16)
            HBnegativedirectionReconoiseD2->SetXTitle("D for HB- jeta =-1; depth = 2 \b");
          HBnegativedirectionReconoiseD2->Draw("Error");
          kcountHBnegativedirectionReconoiseD2++;
          if (kcountHBnegativedirectionReconoiseD2 > 16)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 < 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DreconoiseNegativeDirectionhistD1PhiSymmetryDepth2HB.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHBnegativedirectionReconoiseD2)
    delete h2CeffHBnegativedirectionReconoiseD2;
  //========================================================================================== 22216
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=3
  //cout<<"      1D plot: D vs phi , different eta,  depth=3 *****" <<endl;
  c3x5->Clear();
  c3x5->Divide(4, 4);
  c3x5->cd(1);
  int kcountHBnegativedirectionReconoiseD3 = 1;
  TH1F *h2CeffHBnegativedirectionReconoiseD3 = new TH1F("h2CeffHBnegativedirectionReconoiseD3", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionReconoiseD:
    if (jeta - 41 >= -16 && jeta - 41 <= -1) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=3
      for (int i = 2; i < 3; i++) {
        TH1F *HBnegativedirectionReconoiseD3 = (TH1F *)h2CeffHBnegativedirectionReconoiseD3->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = reconoisevarianceHB[i][jeta][jphi];
          if (areconoiseHB[i][jeta][jphi] > 0.) {
            HBnegativedirectionReconoiseD3->Fill(jphi, ccc1);
            ccctest = 1.;  //HBnegativedirectionReconoiseD3->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1616       kcountHBnegativedirectionReconoiseD3   =     "<<kcountHBnegativedirectionReconoiseD3  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHBnegativedirectionReconoiseD3);
          HBnegativedirectionReconoiseD3->SetMarkerStyle(20);
          HBnegativedirectionReconoiseD3->SetMarkerSize(0.4);
          HBnegativedirectionReconoiseD3->GetYaxis()->SetLabelSize(0.04);
          HBnegativedirectionReconoiseD3->SetXTitle("HBnegativedirectionReconoiseD3 \b");
          HBnegativedirectionReconoiseD3->SetMarkerColor(2);
          HBnegativedirectionReconoiseD3->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHBnegativedirectionReconoiseD3 == 1)
            HBnegativedirectionReconoiseD3->SetXTitle("D for HB- jeta =-16; depth = 3 \b");
          if (kcountHBnegativedirectionReconoiseD3 == 2)
            HBnegativedirectionReconoiseD3->SetXTitle("D for HB- jeta =-15; depth = 3 \b");
          if (kcountHBnegativedirectionReconoiseD3 == 3)
            HBnegativedirectionReconoiseD3->SetXTitle("D for HB- jeta =-14; depth = 3 \b");
          if (kcountHBnegativedirectionReconoiseD3 == 4)
            HBnegativedirectionReconoiseD3->SetXTitle("D for HB- jeta =-13; depth = 3 \b");
          if (kcountHBnegativedirectionReconoiseD3 == 5)
            HBnegativedirectionReconoiseD3->SetXTitle("D for HB- jeta =-12; depth = 3 \b");
          if (kcountHBnegativedirectionReconoiseD3 == 6)
            HBnegativedirectionReconoiseD3->SetXTitle("D for HB- jeta =-11; depth = 3 \b");
          if (kcountHBnegativedirectionReconoiseD3 == 7)
            HBnegativedirectionReconoiseD3->SetXTitle("D for HB- jeta =-10; depth = 3 \b");
          if (kcountHBnegativedirectionReconoiseD3 == 8)
            HBnegativedirectionReconoiseD3->SetXTitle("D for HB- jeta =-9; depth = 3 \b");
          if (kcountHBnegativedirectionReconoiseD3 == 9)
            HBnegativedirectionReconoiseD3->SetXTitle("D for HB- jeta =-8; depth = 3 \b");
          if (kcountHBnegativedirectionReconoiseD3 == 10)
            HBnegativedirectionReconoiseD3->SetXTitle("D for HB- jeta =-7; depth = 3 \b");
          if (kcountHBnegativedirectionReconoiseD3 == 11)
            HBnegativedirectionReconoiseD3->SetXTitle("D for HB- jeta =-6; depth = 3 \b");
          if (kcountHBnegativedirectionReconoiseD3 == 12)
            HBnegativedirectionReconoiseD3->SetXTitle("D for HB- jeta =-5; depth = 3 \b");
          if (kcountHBnegativedirectionReconoiseD3 == 13)
            HBnegativedirectionReconoiseD3->SetXTitle("D for HB- jeta =-4; depth = 3 \b");
          if (kcountHBnegativedirectionReconoiseD3 == 14)
            HBnegativedirectionReconoiseD3->SetXTitle("D for HB- jeta =-3; depth = 3 \b");
          if (kcountHBnegativedirectionReconoiseD3 == 15)
            HBnegativedirectionReconoiseD3->SetXTitle("D for HB- jeta =-2; depth = 3 \b");
          if (kcountHBnegativedirectionReconoiseD3 == 16)
            HBnegativedirectionReconoiseD3->SetXTitle("D for HB- jeta =-1; depth = 3 \b");
          HBnegativedirectionReconoiseD3->Draw("Error");
          kcountHBnegativedirectionReconoiseD3++;
          if (kcountHBnegativedirectionReconoiseD3 > 16)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 < 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DreconoiseNegativeDirectionhistD1PhiSymmetryDepth3HB.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHBnegativedirectionReconoiseD3)
    delete h2CeffHBnegativedirectionReconoiseD3;
  //========================================================================================== 22217
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=4
  //cout<<"      1D plot: D vs phi , different eta,  depth=4 *****" <<endl;
  c3x5->Clear();
  c3x5->Divide(4, 4);
  c3x5->cd(1);
  int kcountHBnegativedirectionReconoiseD4 = 1;
  TH1F *h2CeffHBnegativedirectionReconoiseD4 = new TH1F("h2CeffHBnegativedirectionReconoiseD4", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionReconoiseD:
    if (jeta - 41 >= -16 && jeta - 41 <= -1) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=4
      for (int i = 3; i < 4; i++) {
        TH1F *HBnegativedirectionReconoiseD4 = (TH1F *)h2CeffHBnegativedirectionReconoiseD4->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = reconoisevarianceHB[i][jeta][jphi];
          if (areconoiseHB[i][jeta][jphi] > 0.) {
            HBnegativedirectionReconoiseD4->Fill(jphi, ccc1);
            ccctest = 1.;  //HBnegativedirectionReconoiseD4->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1717       kcountHBnegativedirectionReconoiseD4   =     "<<kcountHBnegativedirectionReconoiseD4  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHBnegativedirectionReconoiseD4);
          HBnegativedirectionReconoiseD4->SetMarkerStyle(20);
          HBnegativedirectionReconoiseD4->SetMarkerSize(0.4);
          HBnegativedirectionReconoiseD4->GetYaxis()->SetLabelSize(0.04);
          HBnegativedirectionReconoiseD4->SetXTitle("HBnegativedirectionReconoiseD4 \b");
          HBnegativedirectionReconoiseD4->SetMarkerColor(2);
          HBnegativedirectionReconoiseD4->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHBnegativedirectionReconoiseD4 == 1)
            HBnegativedirectionReconoiseD4->SetXTitle("D for HB- jeta =-16; depth = 4 \b");
          if (kcountHBnegativedirectionReconoiseD4 == 2)
            HBnegativedirectionReconoiseD4->SetXTitle("D for HB- jeta =-15; depth = 4 \b");
          if (kcountHBnegativedirectionReconoiseD4 == 3)
            HBnegativedirectionReconoiseD4->SetXTitle("D for HB- jeta =-14; depth = 4 \b");
          if (kcountHBnegativedirectionReconoiseD4 == 4)
            HBnegativedirectionReconoiseD4->SetXTitle("D for HB- jeta =-13; depth = 4 \b");
          if (kcountHBnegativedirectionReconoiseD4 == 5)
            HBnegativedirectionReconoiseD4->SetXTitle("D for HB- jeta =-12; depth = 4 \b");
          if (kcountHBnegativedirectionReconoiseD4 == 6)
            HBnegativedirectionReconoiseD4->SetXTitle("D for HB- jeta =-11; depth = 4 \b");
          if (kcountHBnegativedirectionReconoiseD4 == 7)
            HBnegativedirectionReconoiseD4->SetXTitle("D for HB- jeta =-10; depth = 4 \b");
          if (kcountHBnegativedirectionReconoiseD4 == 8)
            HBnegativedirectionReconoiseD4->SetXTitle("D for HB- jeta =-9; depth = 4 \b");
          if (kcountHBnegativedirectionReconoiseD4 == 9)
            HBnegativedirectionReconoiseD4->SetXTitle("D for HB- jeta =-8; depth = 4 \b");
          if (kcountHBnegativedirectionReconoiseD4 == 10)
            HBnegativedirectionReconoiseD4->SetXTitle("D for HB- jeta =-7; depth = 4 \b");
          if (kcountHBnegativedirectionReconoiseD4 == 11)
            HBnegativedirectionReconoiseD4->SetXTitle("D for HB- jeta =-6; depth = 4 \b");
          if (kcountHBnegativedirectionReconoiseD4 == 12)
            HBnegativedirectionReconoiseD4->SetXTitle("D for HB- jeta =-5; depth = 4 \b");
          if (kcountHBnegativedirectionReconoiseD4 == 13)
            HBnegativedirectionReconoiseD4->SetXTitle("D for HB- jeta =-4; depth = 4 \b");
          if (kcountHBnegativedirectionReconoiseD4 == 14)
            HBnegativedirectionReconoiseD4->SetXTitle("D for HB- jeta =-3; depth = 4 \b");
          if (kcountHBnegativedirectionReconoiseD4 == 15)
            HBnegativedirectionReconoiseD4->SetXTitle("D for HB- jeta =-2; depth = 4 \b");
          if (kcountHBnegativedirectionReconoiseD4 == 16)
            HBnegativedirectionReconoiseD4->SetXTitle("D for HB- jeta =-1; depth = 4 \b");
          HBnegativedirectionReconoiseD4->Draw("Error");
          kcountHBnegativedirectionReconoiseD4++;
          if (kcountHBnegativedirectionReconoiseD4 > 16)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 < 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DreconoiseNegativeDirectionhistD1PhiSymmetryDepth4HB.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHBnegativedirectionReconoiseD4)
    delete h2CeffHBnegativedirectionReconoiseD4;

  //=====================================================================       END of Reconoise HB for phi-symmetry
  //=====================================================================       END of Reconoise HB for phi-symmetry
  //=====================================================================       END of Reconoise HB for phi-symmetry

  ////////////////////////////////////////////////////////////////////////////////////////////////////         Phi-symmetry for Calibration Group:    Reconoise HE
  ////////////////////////////////////////////////////////////////////////////////////////////////////         Phi-symmetry for Calibration Group:    Reconoise HE
  ////////////////////////////////////////////////////////////////////////////////////////////////////         Phi-symmetry for Calibration Group:    Reconoise HE
  //  int k_max[5]={0,4,7,4,4}; // maximum depth for each subdet
  //ndepth = k_max[3];
  ndepth = 7;
  //  const int ndepth = 7;
  double areconoisehe[ndepth][njeta][njphi];
  double breconoisehe[ndepth][njeta][njphi];
  double reconoisevariancehe[ndepth][njeta][njphi];
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////
  TH2F *recNoiseEnergy1HE1 = (TH2F *)dir->FindObjectAny("h_recNoiseEnergy1_HE1");
  TH2F *recNoiseEnergy0HE1 = (TH2F *)dir->FindObjectAny("h_recNoiseEnergy0_HE1");
  TH2F *recNoiseEnergyHE1 = (TH2F *)recNoiseEnergy1HE1->Clone("recNoiseEnergyHE1");
  recNoiseEnergyHE1->Divide(recNoiseEnergy1HE1, recNoiseEnergy0HE1, 1, 1, "B");
  TH2F *recNoiseEnergy1HE2 = (TH2F *)dir->FindObjectAny("h_recNoiseEnergy1_HE2");
  TH2F *recNoiseEnergy0HE2 = (TH2F *)dir->FindObjectAny("h_recNoiseEnergy0_HE2");
  TH2F *recNoiseEnergyHE2 = (TH2F *)recNoiseEnergy1HE2->Clone("recNoiseEnergyHE2");
  recNoiseEnergyHE2->Divide(recNoiseEnergy1HE2, recNoiseEnergy0HE2, 1, 1, "B");
  TH2F *recNoiseEnergy1HE3 = (TH2F *)dir->FindObjectAny("h_recNoiseEnergy1_HE3");
  TH2F *recNoiseEnergy0HE3 = (TH2F *)dir->FindObjectAny("h_recNoiseEnergy0_HE3");
  TH2F *recNoiseEnergyHE3 = (TH2F *)recNoiseEnergy1HE3->Clone("recNoiseEnergyHE3");
  recNoiseEnergyHE3->Divide(recNoiseEnergy1HE3, recNoiseEnergy0HE3, 1, 1, "B");
  TH2F *recNoiseEnergy1HE4 = (TH2F *)dir->FindObjectAny("h_recNoiseEnergy1_HE4");
  TH2F *recNoiseEnergy0HE4 = (TH2F *)dir->FindObjectAny("h_recNoiseEnergy0_HE4");
  TH2F *recNoiseEnergyHE4 = (TH2F *)recNoiseEnergy1HE4->Clone("recNoiseEnergyHE4");
  recNoiseEnergyHE4->Divide(recNoiseEnergy1HE4, recNoiseEnergy0HE4, 1, 1, "B");
  TH2F *recNoiseEnergy1HE5 = (TH2F *)dir->FindObjectAny("h_recNoiseEnergy1_HE5");
  TH2F *recNoiseEnergy0HE5 = (TH2F *)dir->FindObjectAny("h_recNoiseEnergy0_HE5");
  TH2F *recNoiseEnergyHE5 = (TH2F *)recNoiseEnergy1HE5->Clone("recNoiseEnergyHE5");
  recNoiseEnergyHE5->Divide(recNoiseEnergy1HE5, recNoiseEnergy0HE5, 1, 1, "B");
  TH2F *recNoiseEnergy1HE6 = (TH2F *)dir->FindObjectAny("h_recNoiseEnergy1_HE6");
  TH2F *recNoiseEnergy0HE6 = (TH2F *)dir->FindObjectAny("h_recNoiseEnergy0_HE6");
  TH2F *recNoiseEnergyHE6 = (TH2F *)recNoiseEnergy1HE6->Clone("recNoiseEnergyHE6");
  recNoiseEnergyHE6->Divide(recNoiseEnergy1HE6, recNoiseEnergy0HE6, 1, 1, "B");
  TH2F *recNoiseEnergy1HE7 = (TH2F *)dir->FindObjectAny("h_recNoiseEnergy1_HE7");
  TH2F *recNoiseEnergy0HE7 = (TH2F *)dir->FindObjectAny("h_recNoiseEnergy0_HE7");
  TH2F *recNoiseEnergyHE7 = (TH2F *)recNoiseEnergy1HE7->Clone("recNoiseEnergyHE7");
  recNoiseEnergyHE7->Divide(recNoiseEnergy1HE7, recNoiseEnergy0HE7, 1, 1, "B");
  for (int jeta = 0; jeta < njeta; jeta++) {
    if ((jeta - 41 >= -29 && jeta - 41 <= -16) || (jeta - 41 >= 15 && jeta - 41 <= 28)) {
      //====================================================================== PHI normalization & put R into massive areconoisehe
      //preparation for PHI normalization:
      double sumreconoiseHE0 = 0;
      int nsumreconoiseHE0 = 0;
      double sumreconoiseHE1 = 0;
      int nsumreconoiseHE1 = 0;
      double sumreconoiseHE2 = 0;
      int nsumreconoiseHE2 = 0;
      double sumreconoiseHE3 = 0;
      int nsumreconoiseHE3 = 0;
      double sumreconoiseHE4 = 0;
      int nsumreconoiseHE4 = 0;
      double sumreconoiseHE5 = 0;
      int nsumreconoiseHE5 = 0;
      double sumreconoiseHE6 = 0;
      int nsumreconoiseHE6 = 0;
      for (int jphi = 0; jphi < njphi; jphi++) {
        areconoisehe[0][jeta][jphi] = recNoiseEnergyHE1->GetBinContent(jeta + 1, jphi + 1);
        areconoisehe[1][jeta][jphi] = recNoiseEnergyHE2->GetBinContent(jeta + 1, jphi + 1);
        areconoisehe[2][jeta][jphi] = recNoiseEnergyHE3->GetBinContent(jeta + 1, jphi + 1);
        areconoisehe[3][jeta][jphi] = recNoiseEnergyHE4->GetBinContent(jeta + 1, jphi + 1);
        areconoisehe[4][jeta][jphi] = recNoiseEnergyHE5->GetBinContent(jeta + 1, jphi + 1);
        areconoisehe[5][jeta][jphi] = recNoiseEnergyHE6->GetBinContent(jeta + 1, jphi + 1);
        areconoisehe[6][jeta][jphi] = recNoiseEnergyHE7->GetBinContent(jeta + 1, jphi + 1);

        breconoisehe[0][jeta][jphi] = recNoiseEnergyHE1->GetBinContent(jeta + 1, jphi + 1);
        breconoisehe[1][jeta][jphi] = recNoiseEnergyHE2->GetBinContent(jeta + 1, jphi + 1);
        breconoisehe[2][jeta][jphi] = recNoiseEnergyHE3->GetBinContent(jeta + 1, jphi + 1);
        breconoisehe[3][jeta][jphi] = recNoiseEnergyHE4->GetBinContent(jeta + 1, jphi + 1);
        breconoisehe[4][jeta][jphi] = recNoiseEnergyHE5->GetBinContent(jeta + 1, jphi + 1);
        breconoisehe[5][jeta][jphi] = recNoiseEnergyHE6->GetBinContent(jeta + 1, jphi + 1);
        breconoisehe[6][jeta][jphi] = recNoiseEnergyHE7->GetBinContent(jeta + 1, jphi + 1);

        if (areconoisehe[0][jeta][jphi] != 0.) {
          sumreconoiseHE0 += areconoisehe[0][jeta][jphi];
          ++nsumreconoiseHE0;
        }
        if (areconoisehe[1][jeta][jphi] != 0.) {
          sumreconoiseHE1 += areconoisehe[1][jeta][jphi];
          ++nsumreconoiseHE1;
        }
        if (areconoisehe[2][jeta][jphi] != 0.) {
          sumreconoiseHE2 += areconoisehe[2][jeta][jphi];
          ++nsumreconoiseHE2;
        }
        if (areconoisehe[3][jeta][jphi] != 0.) {
          sumreconoiseHE3 += areconoisehe[3][jeta][jphi];
          ++nsumreconoiseHE3;
        }
        if (areconoisehe[4][jeta][jphi] != 0.) {
          sumreconoiseHE4 += areconoisehe[4][jeta][jphi];
          ++nsumreconoiseHE4;
        }
        if (areconoisehe[5][jeta][jphi] != 0.) {
          sumreconoiseHE5 += areconoisehe[5][jeta][jphi];
          ++nsumreconoiseHE5;
        }
        if (areconoisehe[6][jeta][jphi] != 0.) {
          sumreconoiseHE6 += areconoisehe[6][jeta][jphi];
          ++nsumreconoiseHE6;
        }
      }  // phi

      // PHI normalization for DIF:
      for (int jphi = 0; jphi < njphi; jphi++) {
        if (sumreconoiseHE0 != 0.)
          breconoisehe[0][jeta][jphi] -= (sumreconoiseHE0 / nsumreconoiseHE0);
        if (sumreconoiseHE1 != 0.)
          breconoisehe[1][jeta][jphi] -= (sumreconoiseHE1 / nsumreconoiseHE1);
        if (sumreconoiseHE2 != 0.)
          breconoisehe[2][jeta][jphi] -= (sumreconoiseHE2 / nsumreconoiseHE2);
        if (sumreconoiseHE3 != 0.)
          breconoisehe[3][jeta][jphi] -= (sumreconoiseHE3 / nsumreconoiseHE3);
        if (sumreconoiseHE4 != 0.)
          breconoisehe[4][jeta][jphi] -= (sumreconoiseHE4 / nsumreconoiseHE4);
        if (sumreconoiseHE5 != 0.)
          breconoisehe[5][jeta][jphi] -= (sumreconoiseHE5 / nsumreconoiseHE5);
        if (sumreconoiseHE6 != 0.)
          breconoisehe[6][jeta][jphi] -= (sumreconoiseHE6 / nsumreconoiseHE6);
      }  // phi

      // PHI normalization for R:
      for (int jphi = 0; jphi < njphi; jphi++) {
        if (sumreconoiseHE0 != 0.)
          areconoisehe[0][jeta][jphi] /= (sumreconoiseHE0 / nsumreconoiseHE0);
        if (sumreconoiseHE1 != 0.)
          areconoisehe[1][jeta][jphi] /= (sumreconoiseHE1 / nsumreconoiseHE1);
        if (sumreconoiseHE2 != 0.)
          areconoisehe[2][jeta][jphi] /= (sumreconoiseHE2 / nsumreconoiseHE2);
        if (sumreconoiseHE3 != 0.)
          areconoisehe[3][jeta][jphi] /= (sumreconoiseHE3 / nsumreconoiseHE3);
        if (sumreconoiseHE4 != 0.)
          areconoisehe[4][jeta][jphi] /= (sumreconoiseHE4 / nsumreconoiseHE4);
        if (sumreconoiseHE5 != 0.)
          areconoisehe[5][jeta][jphi] /= (sumreconoiseHE5 / nsumreconoiseHE5);
        if (sumreconoiseHE6 != 0.)
          areconoisehe[6][jeta][jphi] /= (sumreconoiseHE6 / nsumreconoiseHE6);
      }  // phi
    }    //if( (jeta-41 >=
  }      //eta
  //------------------------  2D-eta/phi-plot: R, averaged over depthes
  //======================================================================
  //                                   RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR:   Reconoise HE
  //======================================================================
  c2x1->Clear();
  /////////////////
  c2x1->Divide(2, 1);
  c2x1->cd(1);
  TH2F *GefzRreconoiseHE42D = new TH2F("GefzRreconoiseHE42D", "", neta, -41., 41., nphi, 0., 72.);
  TH2F *GefzRreconoiseHE42D0 = new TH2F("GefzRreconoiseHE42D0", "", neta, -41., 41., nphi, 0., 72.);
  TH2F *GefzRreconoiseHE42DF = (TH2F *)GefzRreconoiseHE42D0->Clone("GefzRreconoiseHE42DF");
  for (int i = 0; i < ndepth; i++) {
    for (int jeta = 0; jeta < neta; jeta++) {
      if ((jeta - 41 >= -29 && jeta - 41 <= -16) || (jeta - 41 >= 15 && jeta - 41 <= 28)) {
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = areconoisehe[i][jeta][jphi];
          int k2plot = jeta - 41;
          int kkk = k2plot;  //if(k2plot >0 ) kkk=k2plot+1; //-41 +41 !=0
          if (ccc1 != 0.) {
            GefzRreconoiseHE42D->Fill(kkk, jphi, ccc1);
            GefzRreconoiseHE42D0->Fill(kkk, jphi, 1.);
          }
        }
      }
    }
  }
  GefzRreconoiseHE42DF->Divide(GefzRreconoiseHE42D, GefzRreconoiseHE42D0, 1, 1, "B");  // average A
  gPad->SetGridy();
  gPad->SetGridx();  //      gPad->SetLogz();
  GefzRreconoiseHE42DF->SetXTitle("<R>_depth       #eta  \b");
  GefzRreconoiseHE42DF->SetYTitle("      #phi \b");
  GefzRreconoiseHE42DF->Draw("COLZ");

  c2x1->cd(2);
  TH1F *energyhitNoise_HE = (TH1F *)dir->FindObjectAny("h_energyhitNoise_HE");
  energyhitNoise_HE->SetMarkerStyle(20);
  energyhitNoise_HE->SetMarkerSize(0.4);
  energyhitNoise_HE->GetYaxis()->SetLabelSize(0.04);
  energyhitNoise_HE->SetXTitle("energyhitNoise_HE \b");
  energyhitNoise_HE->SetMarkerColor(2);
  energyhitNoise_HE->SetLineColor(0);
  gPad->SetGridy();
  gPad->SetGridx();
  energyhitNoise_HE->Draw("Error");

  /////////////////
  c2x1->Update();
  c2x1->Print("RreconoiseGeneralD2PhiSymmetryHE.png");
  c2x1->Clear();
  // clean-up
  if (GefzRreconoiseHE42D)
    delete GefzRreconoiseHE42D;
  if (GefzRreconoiseHE42D0)
    delete GefzRreconoiseHE42D0;
  if (GefzRreconoiseHE42DF)
    delete GefzRreconoiseHE42DF;
  //====================================================================== 1D plot: R vs phi , averaged over depthes & eta
  //======================================================================
  //cout<<"      1D plot: R vs phi , averaged over depthes & eta *****" <<endl;
  c1x1->Clear();
  /////////////////
  c1x1->Divide(1, 1);
  c1x1->cd(1);
  TH1F *GefzRreconoiseHE41D = new TH1F("GefzRreconoiseHE41D", "", nphi, 0., 72.);
  TH1F *GefzRreconoiseHE41D0 = new TH1F("GefzRreconoiseHE41D0", "", nphi, 0., 72.);
  TH1F *GefzRreconoiseHE41DF = (TH1F *)GefzRreconoiseHE41D0->Clone("GefzRreconoiseHE41DF");
  for (int jphi = 0; jphi < nphi; jphi++) {
    for (int jeta = 0; jeta < neta; jeta++) {
      if ((jeta - 41 >= -29 && jeta - 41 <= -16) || (jeta - 41 >= 15 && jeta - 41 <= 28)) {
        for (int i = 0; i < ndepth; i++) {
          double ccc1 = areconoisehe[i][jeta][jphi];
          if (ccc1 != 0.) {
            GefzRreconoiseHE41D->Fill(jphi, ccc1);
            GefzRreconoiseHE41D0->Fill(jphi, 1.);
          }
        }
      }
    }
  }
  GefzRreconoiseHE41DF->Divide(GefzRreconoiseHE41D, GefzRreconoiseHE41D0, 1, 1, "B");  // R averaged over depthes & eta
  GefzRreconoiseHE41D0->Sumw2();
  //    for (int jphi=1;jphi<73;jphi++) {GefzRreconoiseHE41DF->SetBinError(jphi,0.01);}
  gPad->SetGridy();
  gPad->SetGridx();  //      gPad->SetLogz();
  GefzRreconoiseHE41DF->SetMarkerStyle(20);
  GefzRreconoiseHE41DF->SetMarkerSize(1.4);
  GefzRreconoiseHE41DF->GetZaxis()->SetLabelSize(0.08);
  GefzRreconoiseHE41DF->SetXTitle("#phi  \b");
  GefzRreconoiseHE41DF->SetYTitle("  <R> \b");
  GefzRreconoiseHE41DF->SetZTitle("<R>_PHI  - AllDepthes \b");
  GefzRreconoiseHE41DF->SetMarkerColor(4);
  GefzRreconoiseHE41DF->SetLineColor(
      4);  // GefzRreconoiseHE41DF->SetMinimum(0.8);     //      GefzRreconoiseHE41DF->SetMaximum(1.000);
  GefzRreconoiseHE41DF->Draw("Error");
  /////////////////
  c1x1->Update();
  c1x1->Print("RreconoiseGeneralD1PhiSymmetryHE.png");
  c1x1->Clear();
  // clean-up
  if (GefzRreconoiseHE41D)
    delete GefzRreconoiseHE41D;
  if (GefzRreconoiseHE41D0)
    delete GefzRreconoiseHE41D0;
  if (GefzRreconoiseHE41DF)
    delete GefzRreconoiseHE41DF;

  //========================================================================================== 4
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=1
  //cout<<"      1D plot: R vs phi , different eta,  depth=1 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEpositivedirectionReconoise1 = 1;
  TH1F *h2CeffHEpositivedirectionReconoise1 = new TH1F("h2CeffHEpositivedirectionReconoise1", "", nphi, 0., 72.);
  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionReconoise:
    if (jeta - 41 >= 15 && jeta - 41 <= 28) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=1
      for (int i = 0; i < 1; i++) {
        TH1F *HEpositivedirectionReconoise1 = (TH1F *)h2CeffHEpositivedirectionReconoise1->Clone("twod1");
        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = areconoisehe[i][jeta][jphi];
          if (ccc1 != 0.) {
            HEpositivedirectionReconoise1->Fill(jphi, ccc1);
            ccctest = 1.;  //HEpositivedirectionReconoise1->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //	  cout<<"444        kcountHEpositivedirectionReconoise1   =     "<<kcountHEpositivedirectionReconoise1  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEpositivedirectionReconoise1);
          HEpositivedirectionReconoise1->SetMarkerStyle(20);
          HEpositivedirectionReconoise1->SetMarkerSize(0.4);
          HEpositivedirectionReconoise1->GetYaxis()->SetLabelSize(0.04);
          HEpositivedirectionReconoise1->SetXTitle("HEpositivedirectionReconoise1 \b");
          HEpositivedirectionReconoise1->SetMarkerColor(2);
          HEpositivedirectionReconoise1->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEpositivedirectionReconoise1 == 1)
            HEpositivedirectionReconoise1->SetXTitle("R for HE+ jeta = 17; depth = 1 \b");
          if (kcountHEpositivedirectionReconoise1 == 2)
            HEpositivedirectionReconoise1->SetXTitle("R for HE+ jeta = 18; depth = 1 \b");
          if (kcountHEpositivedirectionReconoise1 == 3)
            HEpositivedirectionReconoise1->SetXTitle("R for HE+ jeta = 19; depth = 1 \b");
          if (kcountHEpositivedirectionReconoise1 == 4)
            HEpositivedirectionReconoise1->SetXTitle("R for HE+ jeta = 20; depth = 1 \b");
          if (kcountHEpositivedirectionReconoise1 == 5)
            HEpositivedirectionReconoise1->SetXTitle("R for HE+ jeta = 21; depth = 1 \b");
          if (kcountHEpositivedirectionReconoise1 == 6)
            HEpositivedirectionReconoise1->SetXTitle("R for HE+ jeta = 22; depth = 1 \b");
          if (kcountHEpositivedirectionReconoise1 == 7)
            HEpositivedirectionReconoise1->SetXTitle("R for HE+ jeta = 23; depth = 1 \b");
          if (kcountHEpositivedirectionReconoise1 == 8)
            HEpositivedirectionReconoise1->SetXTitle("R for HE+ jeta = 24; depth = 1 \b");
          if (kcountHEpositivedirectionReconoise1 == 9)
            HEpositivedirectionReconoise1->SetXTitle("R for HE+ jeta = 25; depth = 1 \b");
          if (kcountHEpositivedirectionReconoise1 == 10)
            HEpositivedirectionReconoise1->SetXTitle("R for HE+ jeta = 26; depth = 1 \b");
          if (kcountHEpositivedirectionReconoise1 == 11)
            HEpositivedirectionReconoise1->SetXTitle("R for HE+ jeta = 27; depth = 1 \b");
          if (kcountHEpositivedirectionReconoise1 == 12)
            HEpositivedirectionReconoise1->SetXTitle("R for HE+ jeta = 28; depth = 1 \b");
          HEpositivedirectionReconoise1->Draw("Error");
          kcountHEpositivedirectionReconoise1++;
          if (kcountHEpositivedirectionReconoise1 > 12)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 15 && jeta-41 <= 28
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RreconoisePositiveDirectionhistD1PhiSymmetryDepth1HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEpositivedirectionReconoise1)
    delete h2CeffHEpositivedirectionReconoise1;

  //========================================================================================== 5
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=2
  //  cout<<"      1D plot: R vs phi , different eta,  depth=2 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEpositivedirectionReconoise2 = 1;
  TH1F *h2CeffHEpositivedirectionReconoise2 = new TH1F("h2CeffHEpositivedirectionReconoise2", "", nphi, 0., 72.);
  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionReconoise:
    if (jeta - 41 >= 15 && jeta - 41 <= 28) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=2
      for (int i = 1; i < 2; i++) {
        TH1F *HEpositivedirectionReconoise2 = (TH1F *)h2CeffHEpositivedirectionReconoise2->Clone("twod1");
        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = areconoisehe[i][jeta][jphi];
          if (ccc1 != 0.) {
            HEpositivedirectionReconoise2->Fill(jphi, ccc1);
            ccctest = 1.;  //HEpositivedirectionReconoise2->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"555        kcountHEpositivedirectionReconoise2   =     "<<kcountHEpositivedirectionReconoise2  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEpositivedirectionReconoise2);
          HEpositivedirectionReconoise2->SetMarkerStyle(20);
          HEpositivedirectionReconoise2->SetMarkerSize(0.4);
          HEpositivedirectionReconoise2->GetYaxis()->SetLabelSize(0.04);
          HEpositivedirectionReconoise2->SetXTitle("HEpositivedirectionReconoise2 \b");
          HEpositivedirectionReconoise2->SetMarkerColor(2);
          HEpositivedirectionReconoise2->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEpositivedirectionReconoise2 == 1)
            HEpositivedirectionReconoise2->SetXTitle("R for HE+ jeta = 16; depth = 2 \b");
          if (kcountHEpositivedirectionReconoise2 == 2)
            HEpositivedirectionReconoise2->SetXTitle("R for HE+ jeta = 17; depth = 2 \b");
          if (kcountHEpositivedirectionReconoise2 == 3)
            HEpositivedirectionReconoise2->SetXTitle("R for HE+ jeta = 18; depth = 2 \b");
          if (kcountHEpositivedirectionReconoise2 == 4)
            HEpositivedirectionReconoise2->SetXTitle("R for HE+ jeta = 19; depth = 2 \b");
          if (kcountHEpositivedirectionReconoise2 == 5)
            HEpositivedirectionReconoise2->SetXTitle("R for HE+ jeta = 20; depth = 2 \b");
          if (kcountHEpositivedirectionReconoise2 == 6)
            HEpositivedirectionReconoise2->SetXTitle("R for HE+ jeta = 21; depth = 2 \b");
          if (kcountHEpositivedirectionReconoise2 == 7)
            HEpositivedirectionReconoise2->SetXTitle("R for HE+ jeta = 22; depth = 2 \b");
          if (kcountHEpositivedirectionReconoise2 == 8)
            HEpositivedirectionReconoise2->SetXTitle("R for HE+ jeta = 23; depth = 2 \b");
          if (kcountHEpositivedirectionReconoise2 == 9)
            HEpositivedirectionReconoise2->SetXTitle("R for HE+ jeta = 24; depth = 2 \b");
          if (kcountHEpositivedirectionReconoise2 == 10)
            HEpositivedirectionReconoise2->SetXTitle("R for HE+ jeta = 25; depth = 2 \b");
          if (kcountHEpositivedirectionReconoise2 == 11)
            HEpositivedirectionReconoise2->SetXTitle("R for HE+ jeta = 26; depth = 2 \b");
          if (kcountHEpositivedirectionReconoise2 == 12)
            HEpositivedirectionReconoise2->SetXTitle("R for HE+ jeta = 27; depth = 2 \b");
          if (kcountHEpositivedirectionReconoise2 == 13)
            HEpositivedirectionReconoise2->SetXTitle("R for HE+ jeta = 28; depth = 2 \b");
          HEpositivedirectionReconoise2->Draw("Error");
          kcountHEpositivedirectionReconoise2++;
          if (kcountHEpositivedirectionReconoise2 > 13)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RreconoisePositiveDirectionhistD1PhiSymmetryDepth2HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEpositivedirectionReconoise2)
    delete h2CeffHEpositivedirectionReconoise2;
  //========================================================================================== 6
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=3
  //cout<<"      1D plot: R vs phi , different eta,  depth=3 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEpositivedirectionReconoise3 = 1;
  TH1F *h2CeffHEpositivedirectionReconoise3 = new TH1F("h2CeffHEpositivedirectionReconoise3", "", nphi, 0., 72.);
  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionReconoise:
    if (jeta - 41 >= 15 && jeta - 41 <= 28) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=3
      for (int i = 2; i < 3; i++) {
        TH1F *HEpositivedirectionReconoise3 = (TH1F *)h2CeffHEpositivedirectionReconoise3->Clone("twod1");
        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = areconoisehe[i][jeta][jphi];
          if (ccc1 != 0.) {
            HEpositivedirectionReconoise3->Fill(jphi, ccc1);
            ccctest = 1.;  //HEpositivedirectionReconoise3->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"666        kcountHEpositivedirectionReconoise3   =     "<<kcountHEpositivedirectionReconoise3  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEpositivedirectionReconoise3);
          HEpositivedirectionReconoise3->SetMarkerStyle(20);
          HEpositivedirectionReconoise3->SetMarkerSize(0.4);
          HEpositivedirectionReconoise3->GetYaxis()->SetLabelSize(0.04);
          HEpositivedirectionReconoise3->SetXTitle("HEpositivedirectionReconoise3 \b");
          HEpositivedirectionReconoise3->SetMarkerColor(2);
          HEpositivedirectionReconoise3->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEpositivedirectionReconoise3 == 1)
            HEpositivedirectionReconoise3->SetXTitle("R for HE+ jeta = 16; depth = 3 \b");
          if (kcountHEpositivedirectionReconoise3 == 2)
            HEpositivedirectionReconoise3->SetXTitle("R for HE+ jeta = 17; depth = 3 \b");
          if (kcountHEpositivedirectionReconoise3 == 3)
            HEpositivedirectionReconoise3->SetXTitle("R for HE+ jeta = 18; depth = 3 \b");
          if (kcountHEpositivedirectionReconoise3 == 4)
            HEpositivedirectionReconoise3->SetXTitle("R for HE+ jeta = 19; depth = 3 \b");
          if (kcountHEpositivedirectionReconoise3 == 5)
            HEpositivedirectionReconoise3->SetXTitle("R for HE+ jeta = 20; depth = 3 \b");
          if (kcountHEpositivedirectionReconoise3 == 6)
            HEpositivedirectionReconoise3->SetXTitle("R for HE+ jeta = 21; depth = 3 \b");
          if (kcountHEpositivedirectionReconoise3 == 7)
            HEpositivedirectionReconoise3->SetXTitle("R for HE+ jeta = 22; depth = 3 \b");
          if (kcountHEpositivedirectionReconoise3 == 8)
            HEpositivedirectionReconoise3->SetXTitle("R for HE+ jeta = 23; depth = 3 \b");
          if (kcountHEpositivedirectionReconoise3 == 9)
            HEpositivedirectionReconoise3->SetXTitle("R for HE+ jeta = 24; depth = 3 \b");
          if (kcountHEpositivedirectionReconoise3 == 10)
            HEpositivedirectionReconoise3->SetXTitle("R for HE+ jeta = 25; depth = 3 \b");
          if (kcountHEpositivedirectionReconoise3 == 11)
            HEpositivedirectionReconoise3->SetXTitle("R for HE+ jeta = 26; depth = 3 \b");
          if (kcountHEpositivedirectionReconoise3 == 12)
            HEpositivedirectionReconoise3->SetXTitle("R for HE+ jeta = 27; depth = 3 \b");
          if (kcountHEpositivedirectionReconoise3 == 13)
            HEpositivedirectionReconoise3->SetXTitle("R for HE+ jeta = 28; depth = 3 \b");
          HEpositivedirectionReconoise3->Draw("Error");
          kcountHEpositivedirectionReconoise3++;
          if (kcountHEpositivedirectionReconoise3 > 13)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >=
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RreconoisePositiveDirectionhistD1PhiSymmetryDepth3HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEpositivedirectionReconoise3)
    delete h2CeffHEpositivedirectionReconoise3;
  //========================================================================================== 7
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=4
  //cout<<"      1D plot: R vs phi , different eta,  depth=4 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEpositivedirectionReconoise4 = 1;
  TH1F *h2CeffHEpositivedirectionReconoise4 = new TH1F("h2CeffHEpositivedirectionReconoise4", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionReconoise:
    if (jeta - 41 >= 15 && jeta - 41 <= 28) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=4
      for (int i = 3; i < 4; i++) {
        TH1F *HEpositivedirectionReconoise4 = (TH1F *)h2CeffHEpositivedirectionReconoise4->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = areconoisehe[i][jeta][jphi];
          if (ccc1 != 0.) {
            HEpositivedirectionReconoise4->Fill(jphi, ccc1);
            ccctest = 1.;  //HEpositivedirectionReconoise4->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"777        kcountHEpositivedirectionReconoise4   =     "<<kcountHEpositivedirectionReconoise4  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEpositivedirectionReconoise4);
          HEpositivedirectionReconoise4->SetMarkerStyle(20);
          HEpositivedirectionReconoise4->SetMarkerSize(0.4);
          HEpositivedirectionReconoise4->GetYaxis()->SetLabelSize(0.04);
          HEpositivedirectionReconoise4->SetXTitle("HEpositivedirectionReconoise4 \b");
          HEpositivedirectionReconoise4->SetMarkerColor(2);
          HEpositivedirectionReconoise4->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEpositivedirectionReconoise4 == 1)
            HEpositivedirectionReconoise4->SetXTitle("R for HE+ jeta = 15; depth = 4 \b");
          if (kcountHEpositivedirectionReconoise4 == 2)
            HEpositivedirectionReconoise4->SetXTitle("R for HE+ jeta = 17; depth = 4 \b");
          if (kcountHEpositivedirectionReconoise4 == 3)
            HEpositivedirectionReconoise4->SetXTitle("R for HE+ jeta = 18; depth = 4 \b");
          if (kcountHEpositivedirectionReconoise4 == 4)
            HEpositivedirectionReconoise4->SetXTitle("R for HE+ jeta = 19; depth = 4 \b");
          if (kcountHEpositivedirectionReconoise4 == 5)
            HEpositivedirectionReconoise4->SetXTitle("R for HE+ jeta = 20; depth = 4 \b");
          if (kcountHEpositivedirectionReconoise4 == 6)
            HEpositivedirectionReconoise4->SetXTitle("R for HE+ jeta = 21; depth = 4 \b");
          if (kcountHEpositivedirectionReconoise4 == 7)
            HEpositivedirectionReconoise4->SetXTitle("R for HE+ jeta = 22; depth = 4 \b");
          if (kcountHEpositivedirectionReconoise4 == 8)
            HEpositivedirectionReconoise4->SetXTitle("R for HE+ jeta = 23; depth = 4 \b");
          if (kcountHEpositivedirectionReconoise4 == 9)
            HEpositivedirectionReconoise4->SetXTitle("R for HE+ jeta = 24; depth = 4 \b");
          if (kcountHEpositivedirectionReconoise4 == 10)
            HEpositivedirectionReconoise4->SetXTitle("R for HE+ jeta = 25; depth = 4 \b");
          if (kcountHEpositivedirectionReconoise4 == 11)
            HEpositivedirectionReconoise4->SetXTitle("R for HE+ jeta = 26; depth = 4 \b");
          if (kcountHEpositivedirectionReconoise4 == 12)
            HEpositivedirectionReconoise4->SetXTitle("R for HE+ jeta = 27; depth = 4 \b");
          HEpositivedirectionReconoise4->Draw("Error");
          kcountHEpositivedirectionReconoise4++;
          if (kcountHEpositivedirectionReconoise4 > 12)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >=  -29 && jeta-41 <= -16)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RreconoisePositiveDirectionhistD1PhiSymmetryDepth4HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEpositivedirectionReconoise4)
    delete h2CeffHEpositivedirectionReconoise4;
  //========================================================================================== 8
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=5
  //cout<<"      1D plot: R vs phi , different eta,  depth=5 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEpositivedirectionReconoise5 = 1;
  TH1F *h2CeffHEpositivedirectionReconoise5 = new TH1F("h2CeffHEpositivedirectionReconoise5", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionReconoise:
    if (jeta - 41 >= 15 && jeta - 41 <= 28) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=5
      for (int i = 4; i < 5; i++) {
        TH1F *HEpositivedirectionReconoise5 = (TH1F *)h2CeffHEpositivedirectionReconoise5->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          //	       cout<<"888  initial      kcountHEpositivedirectionReconoise5   =     "<<kcountHEpositivedirectionReconoise5  <<"   jeta-41=     "<< jeta-41 <<"   jphi=     "<< jphi <<"   areconoisehe[i][jeta][jphi]=     "<< areconoisehe[i][jeta][jphi] <<"  depth=     "<< i <<endl;

          double ccc1 = areconoisehe[i][jeta][jphi];
          if (ccc1 != 0.) {
            HEpositivedirectionReconoise5->Fill(jphi, ccc1);
            ccctest = 1.;  //HEpositivedirectionReconoise5->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"888        kcountHEpositivedirectionReconoise5   =     "<<kcountHEpositivedirectionReconoise5  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEpositivedirectionReconoise5);
          HEpositivedirectionReconoise5->SetMarkerStyle(20);
          HEpositivedirectionReconoise5->SetMarkerSize(0.4);
          HEpositivedirectionReconoise5->GetYaxis()->SetLabelSize(0.04);
          HEpositivedirectionReconoise5->SetXTitle("HEpositivedirectionReconoise5 \b");
          HEpositivedirectionReconoise5->SetMarkerColor(2);
          HEpositivedirectionReconoise5->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEpositivedirectionReconoise5 == 1)
            HEpositivedirectionReconoise5->SetXTitle("R for HE+ jeta = 17; depth = 5 \b");
          if (kcountHEpositivedirectionReconoise5 == 2)
            HEpositivedirectionReconoise5->SetXTitle("R for HE+ jeta = 18; depth = 5 \b");
          if (kcountHEpositivedirectionReconoise5 == 3)
            HEpositivedirectionReconoise5->SetXTitle("R for HE+ jeta = 19; depth = 5 \b");
          if (kcountHEpositivedirectionReconoise5 == 4)
            HEpositivedirectionReconoise5->SetXTitle("R for HE+ jeta = 20; depth = 5 \b");
          if (kcountHEpositivedirectionReconoise5 == 5)
            HEpositivedirectionReconoise5->SetXTitle("R for HE+ jeta = 21; depth = 5 \b");
          if (kcountHEpositivedirectionReconoise5 == 6)
            HEpositivedirectionReconoise5->SetXTitle("R for HE+ jeta = 22; depth = 5 \b");
          if (kcountHEpositivedirectionReconoise5 == 7)
            HEpositivedirectionReconoise5->SetXTitle("R for HE+ jeta = 23; depth = 5 \b");
          if (kcountHEpositivedirectionReconoise5 == 8)
            HEpositivedirectionReconoise5->SetXTitle("R for HE+ jeta = 24; depth = 5 \b");
          if (kcountHEpositivedirectionReconoise5 == 9)
            HEpositivedirectionReconoise5->SetXTitle("R for HE+ jeta = 25; depth = 5 \b");
          if (kcountHEpositivedirectionReconoise5 == 10)
            HEpositivedirectionReconoise5->SetXTitle("R for HE+ jeta = 26; depth = 5 \b");
          if (kcountHEpositivedirectionReconoise5 == 11)
            HEpositivedirectionReconoise5->SetXTitle("R for HE+ jeta = 27; depth = 5 \b");
          HEpositivedirectionReconoise5->Draw("Error");
          kcountHEpositivedirectionReconoise5++;
          if (kcountHEpositivedirectionReconoise5 > 11)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >=  -29 && jeta-41 <= -16)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RreconoisePositiveDirectionhistD1PhiSymmetryDepth5HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEpositivedirectionReconoise5)
    delete h2CeffHEpositivedirectionReconoise5;
  //========================================================================================== 9
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=6
  //cout<<"      1D plot: R vs phi , different eta,  depth=6 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEpositivedirectionReconoise6 = 1;
  TH1F *h2CeffHEpositivedirectionReconoise6 = new TH1F("h2CeffHEpositivedirectionReconoise6", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionReconoise:
    if (jeta - 41 >= 15 && jeta - 41 <= 28) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=6
      for (int i = 5; i < 6; i++) {
        TH1F *HEpositivedirectionReconoise6 = (TH1F *)h2CeffHEpositivedirectionReconoise6->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = areconoisehe[i][jeta][jphi];
          if (ccc1 != 0.) {
            HEpositivedirectionReconoise6->Fill(jphi, ccc1);
            ccctest = 1.;  //HEpositivedirectionReconoise6->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"999        kcountHEpositivedirectionReconoise6   =     "<<kcountHEpositivedirectionReconoise6  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEpositivedirectionReconoise6);
          HEpositivedirectionReconoise6->SetMarkerStyle(20);
          HEpositivedirectionReconoise6->SetMarkerSize(0.4);
          HEpositivedirectionReconoise6->GetYaxis()->SetLabelSize(0.04);
          HEpositivedirectionReconoise6->SetXTitle("HEpositivedirectionReconoise6 \b");
          HEpositivedirectionReconoise6->SetMarkerColor(2);
          HEpositivedirectionReconoise6->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEpositivedirectionReconoise6 == 1)
            HEpositivedirectionReconoise6->SetXTitle("R for HE+ jeta = 18; depth = 6 \b");
          if (kcountHEpositivedirectionReconoise6 == 2)
            HEpositivedirectionReconoise6->SetXTitle("R for HE+ jeta = 19; depth = 6 \b");
          if (kcountHEpositivedirectionReconoise6 == 3)
            HEpositivedirectionReconoise6->SetXTitle("R for HE+ jeta = 20; depth = 6 \b");
          if (kcountHEpositivedirectionReconoise6 == 4)
            HEpositivedirectionReconoise6->SetXTitle("R for HE+ jeta = 21; depth = 6 \b");
          if (kcountHEpositivedirectionReconoise6 == 5)
            HEpositivedirectionReconoise6->SetXTitle("R for HE+ jeta = 22; depth = 6 \b");
          if (kcountHEpositivedirectionReconoise6 == 6)
            HEpositivedirectionReconoise6->SetXTitle("R for HE+ jeta = 23; depth = 6 \b");
          if (kcountHEpositivedirectionReconoise6 == 7)
            HEpositivedirectionReconoise6->SetXTitle("R for HE+ jeta = 24; depth = 6 \b");
          if (kcountHEpositivedirectionReconoise6 == 8)
            HEpositivedirectionReconoise6->SetXTitle("R for HE+ jeta = 25; depth = 6 \b");
          if (kcountHEpositivedirectionReconoise6 == 9)
            HEpositivedirectionReconoise6->SetXTitle("R for HE+ jeta = 26; depth = 6 \b");
          if (kcountHEpositivedirectionReconoise6 == 10)
            HEpositivedirectionReconoise6->SetXTitle("R for HE+ jeta = 27; depth = 6 \b");
          HEpositivedirectionReconoise6->Draw("Error");
          kcountHEpositivedirectionReconoise6++;
          if (kcountHEpositivedirectionReconoise6 > 10)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >=  -29 && jeta-41 <= -16)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RreconoisePositiveDirectionhistD1PhiSymmetryDepth6HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEpositivedirectionReconoise6)
    delete h2CeffHEpositivedirectionReconoise6;
  //========================================================================================== 10
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=7
  //cout<<"      1D plot: R vs phi , different eta,  depth=7 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEpositivedirectionReconoise7 = 1;
  TH1F *h2CeffHEpositivedirectionReconoise7 = new TH1F("h2CeffHEpositivedirectionReconoise7", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionReconoise:
    if (jeta - 41 >= 15 && jeta - 41 <= 28) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=7
      for (int i = 6; i < 7; i++) {
        TH1F *HEpositivedirectionReconoise7 = (TH1F *)h2CeffHEpositivedirectionReconoise7->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = areconoisehe[i][jeta][jphi];
          if (ccc1 != 0.) {
            HEpositivedirectionReconoise7->Fill(jphi, ccc1);
            ccctest = 1.;  //HEpositivedirectionReconoise7->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1010       kcountHEpositivedirectionReconoise7   =     "<<kcountHEpositivedirectionReconoise7  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEpositivedirectionReconoise7);
          HEpositivedirectionReconoise7->SetMarkerStyle(20);
          HEpositivedirectionReconoise7->SetMarkerSize(0.4);
          HEpositivedirectionReconoise7->GetYaxis()->SetLabelSize(0.04);
          HEpositivedirectionReconoise7->SetXTitle("HEpositivedirectionReconoise7 \b");
          HEpositivedirectionReconoise7->SetMarkerColor(2);
          HEpositivedirectionReconoise7->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEpositivedirectionReconoise7 == 1)
            HEpositivedirectionReconoise7->SetXTitle("R for HE+ jeta = 25; depth = 7 \b");
          if (kcountHEpositivedirectionReconoise7 == 2)
            HEpositivedirectionReconoise7->SetXTitle("R for HE+ jeta = 26; depth = 7 \b");
          if (kcountHEpositivedirectionReconoise7 == 3)
            HEpositivedirectionReconoise7->SetXTitle("R for HE+ jeta = 27; depth = 7 \b");
          HEpositivedirectionReconoise7->Draw("Error");
          kcountHEpositivedirectionReconoise7++;
          if (kcountHEpositivedirectionReconoise7 > 3)
            break;  //
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >=  -29 && jeta-41 <= -16)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RreconoisePositiveDirectionhistD1PhiSymmetryDepth7HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEpositivedirectionReconoise7)
    delete h2CeffHEpositivedirectionReconoise7;

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //========================================================================================== 1114
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=1
  //cout<<"      1D plot: R vs phi , different eta,  depth=1 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEnegativedirectionReconoise1 = 1;
  TH1F *h2CeffHEnegativedirectionReconoise1 = new TH1F("h2CeffHEnegativedirectionReconoise1", "", nphi, 0., 72.);
  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionReconoise:
    if (jeta - 41 >= -29 && jeta - 41 <= -16) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=1
      for (int i = 0; i < 1; i++) {
        TH1F *HEnegativedirectionReconoise1 = (TH1F *)h2CeffHEnegativedirectionReconoise1->Clone("twod1");
        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = areconoisehe[i][jeta][jphi];
          if (ccc1 != 0.) {
            HEnegativedirectionReconoise1->Fill(jphi, ccc1);
            ccctest = 1.;  //HEnegativedirectionReconoise1->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //	  cout<<"444        kcountHEnegativedirectionReconoise1   =     "<<kcountHEnegativedirectionReconoise1  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEnegativedirectionReconoise1);
          HEnegativedirectionReconoise1->SetMarkerStyle(20);
          HEnegativedirectionReconoise1->SetMarkerSize(0.4);
          HEnegativedirectionReconoise1->GetYaxis()->SetLabelSize(0.04);
          HEnegativedirectionReconoise1->SetXTitle("HEnegativedirectionReconoise1 \b");
          HEnegativedirectionReconoise1->SetMarkerColor(2);
          HEnegativedirectionReconoise1->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEnegativedirectionReconoise1 == 1)
            HEnegativedirectionReconoise1->SetXTitle("R for HE- jeta =-29; depth = 1 \b");
          if (kcountHEnegativedirectionReconoise1 == 2)
            HEnegativedirectionReconoise1->SetXTitle("R for HE- jeta =-28; depth = 1 \b");
          if (kcountHEnegativedirectionReconoise1 == 3)
            HEnegativedirectionReconoise1->SetXTitle("R for HE- jeta =-27; depth = 1 \b");
          if (kcountHEnegativedirectionReconoise1 == 4)
            HEnegativedirectionReconoise1->SetXTitle("R for HE- jeta =-26; depth = 1 \b");
          if (kcountHEnegativedirectionReconoise1 == 5)
            HEnegativedirectionReconoise1->SetXTitle("R for HE- jeta =-25; depth = 1 \b");
          if (kcountHEnegativedirectionReconoise1 == 6)
            HEnegativedirectionReconoise1->SetXTitle("R for HE- jeta =-24; depth = 1 \b");
          if (kcountHEnegativedirectionReconoise1 == 7)
            HEnegativedirectionReconoise1->SetXTitle("R for HE- jeta =-23; depth = 1 \b");
          if (kcountHEnegativedirectionReconoise1 == 8)
            HEnegativedirectionReconoise1->SetXTitle("R for HE- jeta =-22; depth = 1 \b");
          if (kcountHEnegativedirectionReconoise1 == 9)
            HEnegativedirectionReconoise1->SetXTitle("R for HE- jeta =-21; depth = 1 \b");
          if (kcountHEnegativedirectionReconoise1 == 10)
            HEnegativedirectionReconoise1->SetXTitle("R for HE- jeta =-20; depth = 1 \b");
          if (kcountHEnegativedirectionReconoise1 == 11)
            HEnegativedirectionReconoise1->SetXTitle("R for HE- jeta =-19; depth = 1 \b");
          if (kcountHEnegativedirectionReconoise1 == 12)
            HEnegativedirectionReconoise1->SetXTitle("R for HE- jeta =-18; depth = 1 \b");
          HEnegativedirectionReconoise1->Draw("Error");
          kcountHEnegativedirectionReconoise1++;
          if (kcountHEnegativedirectionReconoise1 > 12)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41  >= -29 && jeta-41 <= -16)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RreconoiseNegativeDirectionhistD1PhiSymmetryDepth1HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEnegativedirectionReconoise1)
    delete h2CeffHEnegativedirectionReconoise1;

  //========================================================================================== 1115
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=2
  //  cout<<"      1D plot: R vs phi , different eta,  depth=2 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEnegativedirectionReconoise2 = 1;
  TH1F *h2CeffHEnegativedirectionReconoise2 = new TH1F("h2CeffHEnegativedirectionReconoise2", "", nphi, 0., 72.);
  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionReconoise:
    if (jeta - 41 >= -29 && jeta - 41 <= -16) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=2
      for (int i = 1; i < 2; i++) {
        TH1F *HEnegativedirectionReconoise2 = (TH1F *)h2CeffHEnegativedirectionReconoise2->Clone("twod1");
        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = areconoisehe[i][jeta][jphi];
          if (ccc1 != 0.) {
            HEnegativedirectionReconoise2->Fill(jphi, ccc1);
            ccctest = 1.;  //HEnegativedirectionReconoise2->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"555        kcountHEnegativedirectionReconoise2   =     "<<kcountHEnegativedirectionReconoise2  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEnegativedirectionReconoise2);
          HEnegativedirectionReconoise2->SetMarkerStyle(20);
          HEnegativedirectionReconoise2->SetMarkerSize(0.4);
          HEnegativedirectionReconoise2->GetYaxis()->SetLabelSize(0.04);
          HEnegativedirectionReconoise2->SetXTitle("HEnegativedirectionReconoise2 \b");
          HEnegativedirectionReconoise2->SetMarkerColor(2);
          HEnegativedirectionReconoise2->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEnegativedirectionReconoise2 == 1)
            HEnegativedirectionReconoise2->SetXTitle("R for HE- jeta =-29; depth = 2 \b");
          if (kcountHEnegativedirectionReconoise2 == 2)
            HEnegativedirectionReconoise2->SetXTitle("R for HE- jeta =-28; depth = 2 \b");
          if (kcountHEnegativedirectionReconoise2 == 3)
            HEnegativedirectionReconoise2->SetXTitle("R for HE- jeta =-27; depth = 2 \b");
          if (kcountHEnegativedirectionReconoise2 == 4)
            HEnegativedirectionReconoise2->SetXTitle("R for HE- jeta =-26; depth = 2 \b");
          if (kcountHEnegativedirectionReconoise2 == 5)
            HEnegativedirectionReconoise2->SetXTitle("R for HE- jeta =-25; depth = 2 \b");
          if (kcountHEnegativedirectionReconoise2 == 6)
            HEnegativedirectionReconoise2->SetXTitle("R for HE- jeta =-24; depth = 2 \b");
          if (kcountHEnegativedirectionReconoise2 == 7)
            HEnegativedirectionReconoise2->SetXTitle("R for HE- jeta =-23; depth = 2 \b");
          if (kcountHEnegativedirectionReconoise2 == 8)
            HEnegativedirectionReconoise2->SetXTitle("R for HE- jeta =-22; depth = 2 \b");
          if (kcountHEnegativedirectionReconoise2 == 9)
            HEnegativedirectionReconoise2->SetXTitle("R for HE- jeta =-21; depth = 2 \b");
          if (kcountHEnegativedirectionReconoise2 == 10)
            HEnegativedirectionReconoise2->SetXTitle("R for HE- jeta =-20; depth = 2 \b");
          if (kcountHEnegativedirectionReconoise2 == 11)
            HEnegativedirectionReconoise2->SetXTitle("R for HE- jeta =-19; depth = 2 \b");
          if (kcountHEnegativedirectionReconoise2 == 12)
            HEnegativedirectionReconoise2->SetXTitle("R for HE- jeta =-18; depth = 2 \b");
          if (kcountHEnegativedirectionReconoise2 == 13)
            HEnegativedirectionReconoise2->SetXTitle("R for HE- jeta =-17; depth = 2 \b");
          HEnegativedirectionReconoise2->Draw("Error");
          kcountHEnegativedirectionReconoise2++;
          if (kcountHEnegativedirectionReconoise2 > 13)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41  >= -29 && jeta-41 <= -16)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RreconoiseNegativeDirectionhistD1PhiSymmetryDepth2HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEnegativedirectionReconoise2)
    delete h2CeffHEnegativedirectionReconoise2;
  //========================================================================================== 1116
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=3
  //cout<<"      1D plot: R vs phi , different eta,  depth=3 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEnegativedirectionReconoise3 = 1;
  TH1F *h2CeffHEnegativedirectionReconoise3 = new TH1F("h2CeffHEnegativedirectionReconoise3", "", nphi, 0., 72.);
  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionReconoise:
    if (jeta - 41 >= -29 && jeta - 41 <= -16) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=3
      for (int i = 2; i < 3; i++) {
        TH1F *HEnegativedirectionReconoise3 = (TH1F *)h2CeffHEnegativedirectionReconoise3->Clone("twod1");
        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = areconoisehe[i][jeta][jphi];
          if (ccc1 != 0.) {
            HEnegativedirectionReconoise3->Fill(jphi, ccc1);
            ccctest = 1.;  //HEnegativedirectionReconoise3->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"666        kcountHEnegativedirectionReconoise3   =     "<<kcountHEnegativedirectionReconoise3  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEnegativedirectionReconoise3);
          HEnegativedirectionReconoise3->SetMarkerStyle(20);
          HEnegativedirectionReconoise3->SetMarkerSize(0.4);
          HEnegativedirectionReconoise3->GetYaxis()->SetLabelSize(0.04);
          HEnegativedirectionReconoise3->SetXTitle("HEnegativedirectionReconoise3 \b");
          HEnegativedirectionReconoise3->SetMarkerColor(2);
          HEnegativedirectionReconoise3->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEnegativedirectionReconoise3 == 1)
            HEnegativedirectionReconoise3->SetXTitle("R for HE- jeta =-29; depth = 3 \b");
          if (kcountHEnegativedirectionReconoise3 == 2)
            HEnegativedirectionReconoise3->SetXTitle("R for HE- jeta =-28; depth = 3 \b");
          if (kcountHEnegativedirectionReconoise3 == 3)
            HEnegativedirectionReconoise3->SetXTitle("R for HE- jeta =-27; depth = 3 \b");
          if (kcountHEnegativedirectionReconoise3 == 4)
            HEnegativedirectionReconoise3->SetXTitle("R for HE- jeta =-26; depth = 3 \b");
          if (kcountHEnegativedirectionReconoise3 == 5)
            HEnegativedirectionReconoise3->SetXTitle("R for HE- jeta =-25; depth = 3 \b");
          if (kcountHEnegativedirectionReconoise3 == 6)
            HEnegativedirectionReconoise3->SetXTitle("R for HE- jeta =-24; depth = 3 \b");
          if (kcountHEnegativedirectionReconoise3 == 7)
            HEnegativedirectionReconoise3->SetXTitle("R for HE- jeta =-23; depth = 3 \b");
          if (kcountHEnegativedirectionReconoise3 == 8)
            HEnegativedirectionReconoise3->SetXTitle("R for HE- jeta =-22; depth = 3 \b");
          if (kcountHEnegativedirectionReconoise3 == 9)
            HEnegativedirectionReconoise3->SetXTitle("R for HE- jeta =-21; depth = 3 \b");
          if (kcountHEnegativedirectionReconoise3 == 10)
            HEnegativedirectionReconoise3->SetXTitle("R for HE- jeta =-20; depth = 3 \b");
          if (kcountHEnegativedirectionReconoise3 == 11)
            HEnegativedirectionReconoise3->SetXTitle("R for HE- jeta =-19; depth = 3 \b");
          if (kcountHEnegativedirectionReconoise3 == 12)
            HEnegativedirectionReconoise3->SetXTitle("R for HE- jeta =-18; depth = 3 \b");
          if (kcountHEnegativedirectionReconoise3 == 13)
            HEnegativedirectionReconoise3->SetXTitle("R for HE- jeta =-17; depth = 3 \b");
          HEnegativedirectionReconoise3->Draw("Error");
          kcountHEnegativedirectionReconoise3++;
          if (kcountHEnegativedirectionReconoise3 > 13)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41  >= -29 && jeta-41 <= -16)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RreconoiseNegativeDirectionhistD1PhiSymmetryDepth3HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEnegativedirectionReconoise3)
    delete h2CeffHEnegativedirectionReconoise3;
  //========================================================================================== 1117
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=4
  //cout<<"      1D plot: R vs phi , different eta,  depth=4 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEnegativedirectionReconoise4 = 1;
  TH1F *h2CeffHEnegativedirectionReconoise4 = new TH1F("h2CeffHEnegativedirectionReconoise4", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionReconoise:
    if (jeta - 41 >= -29 && jeta - 41 <= -16) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=4
      for (int i = 3; i < 4; i++) {
        TH1F *HEnegativedirectionReconoise4 = (TH1F *)h2CeffHEnegativedirectionReconoise4->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = areconoisehe[i][jeta][jphi];
          if (ccc1 != 0.) {
            HEnegativedirectionReconoise4->Fill(jphi, ccc1);
            ccctest = 1.;  //HEnegativedirectionReconoise4->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"777        kcountHEnegativedirectionReconoise4   =     "<<kcountHEnegativedirectionReconoise4  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEnegativedirectionReconoise4);
          HEnegativedirectionReconoise4->SetMarkerStyle(20);
          HEnegativedirectionReconoise4->SetMarkerSize(0.4);
          HEnegativedirectionReconoise4->GetYaxis()->SetLabelSize(0.04);
          HEnegativedirectionReconoise4->SetXTitle("HEnegativedirectionReconoise4 \b");
          HEnegativedirectionReconoise4->SetMarkerColor(2);
          HEnegativedirectionReconoise4->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEnegativedirectionReconoise4 == 1)
            HEnegativedirectionReconoise4->SetXTitle("R for HE- jeta =-28; depth = 4 \b");
          if (kcountHEnegativedirectionReconoise4 == 2)
            HEnegativedirectionReconoise4->SetXTitle("R for HE- jeta =-27; depth = 4 \b");
          if (kcountHEnegativedirectionReconoise4 == 3)
            HEnegativedirectionReconoise4->SetXTitle("R for HE- jeta =-26; depth = 4 \b");
          if (kcountHEnegativedirectionReconoise4 == 4)
            HEnegativedirectionReconoise4->SetXTitle("R for HE- jeta =-25; depth = 4 \b");
          if (kcountHEnegativedirectionReconoise4 == 5)
            HEnegativedirectionReconoise4->SetXTitle("R for HE- jeta =-24; depth = 4 \b");
          if (kcountHEnegativedirectionReconoise4 == 6)
            HEnegativedirectionReconoise4->SetXTitle("R for HE- jeta =-23; depth = 4 \b");
          if (kcountHEnegativedirectionReconoise4 == 7)
            HEnegativedirectionReconoise4->SetXTitle("R for HE- jeta =-22; depth = 4 \b");
          if (kcountHEnegativedirectionReconoise4 == 8)
            HEnegativedirectionReconoise4->SetXTitle("R for HE- jeta =-21; depth = 4 \b");
          if (kcountHEnegativedirectionReconoise4 == 9)
            HEnegativedirectionReconoise4->SetXTitle("R for HE- jeta =-20; depth = 4 \b");
          if (kcountHEnegativedirectionReconoise4 == 10)
            HEnegativedirectionReconoise4->SetXTitle("R for HE- jeta =-19; depth = 4 \b");
          if (kcountHEnegativedirectionReconoise4 == 11)
            HEnegativedirectionReconoise4->SetXTitle("R for HE- jeta =-18; depth = 4 \b");
          if (kcountHEnegativedirectionReconoise4 == 12)
            HEnegativedirectionReconoise4->SetXTitle("R for HE- jeta =-16; depth = 4 \b");
          HEnegativedirectionReconoise4->Draw("Error");
          kcountHEnegativedirectionReconoise4++;
          if (kcountHEnegativedirectionReconoise4 > 12)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41  >= -29 && jeta-41 <= -16)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RreconoiseNegativeDirectionhistD1PhiSymmetryDepth4HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEnegativedirectionReconoise4)
    delete h2CeffHEnegativedirectionReconoise4;
  //========================================================================================== 1118
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=5
  //cout<<"      1D plot: R vs phi , different eta,  depth=5 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEnegativedirectionReconoise5 = 1;
  TH1F *h2CeffHEnegativedirectionReconoise5 = new TH1F("h2CeffHEnegativedirectionReconoise5", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionReconoise:
    if (jeta - 41 >= -29 && jeta - 41 <= -16) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=5
      for (int i = 4; i < 5; i++) {
        TH1F *HEnegativedirectionReconoise5 = (TH1F *)h2CeffHEnegativedirectionReconoise5->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          //	       cout<<"888  initial      kcountHEnegativedirectionReconoise5   =     "<<kcountHEnegativedirectionReconoise5  <<"   jeta-41=     "<< jeta-41 <<"   jphi=     "<< jphi <<"   areconoisehe[i][jeta][jphi]=     "<< areconoisehe[i][jeta][jphi] <<"  depth=     "<< i <<endl;

          double ccc1 = areconoisehe[i][jeta][jphi];
          if (ccc1 != 0.) {
            HEnegativedirectionReconoise5->Fill(jphi, ccc1);
            ccctest = 1.;  //HEnegativedirectionReconoise5->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"888        kcountHEnegativedirectionReconoise5   =     "<<kcountHEnegativedirectionReconoise5  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEnegativedirectionReconoise5);
          HEnegativedirectionReconoise5->SetMarkerStyle(20);
          HEnegativedirectionReconoise5->SetMarkerSize(0.4);
          HEnegativedirectionReconoise5->GetYaxis()->SetLabelSize(0.04);
          HEnegativedirectionReconoise5->SetXTitle("HEnegativedirectionReconoise5 \b");
          HEnegativedirectionReconoise5->SetMarkerColor(2);
          HEnegativedirectionReconoise5->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEnegativedirectionReconoise5 == 1)
            HEnegativedirectionReconoise5->SetXTitle("R for HE- jeta =-28; depth = 5 \b");
          if (kcountHEnegativedirectionReconoise5 == 2)
            HEnegativedirectionReconoise5->SetXTitle("R for HE- jeta =-27; depth = 5 \b");
          if (kcountHEnegativedirectionReconoise5 == 3)
            HEnegativedirectionReconoise5->SetXTitle("R for HE- jeta =-26; depth = 5 \b");
          if (kcountHEnegativedirectionReconoise5 == 4)
            HEnegativedirectionReconoise5->SetXTitle("R for HE- jeta =-25; depth = 5 \b");
          if (kcountHEnegativedirectionReconoise5 == 5)
            HEnegativedirectionReconoise5->SetXTitle("R for HE- jeta =-24; depth = 5 \b");
          if (kcountHEnegativedirectionReconoise5 == 6)
            HEnegativedirectionReconoise5->SetXTitle("R for HE- jeta =-23; depth = 5 \b");
          if (kcountHEnegativedirectionReconoise5 == 7)
            HEnegativedirectionReconoise5->SetXTitle("R for HE- jeta =-22; depth = 5 \b");
          if (kcountHEnegativedirectionReconoise5 == 8)
            HEnegativedirectionReconoise5->SetXTitle("R for HE- jeta =-21; depth = 5 \b");
          if (kcountHEnegativedirectionReconoise5 == 9)
            HEnegativedirectionReconoise5->SetXTitle("R for HE- jeta =-20; depth = 5 \b");
          if (kcountHEnegativedirectionReconoise5 == 10)
            HEnegativedirectionReconoise5->SetXTitle("R for HE- jeta =-19; depth = 5 \b");
          if (kcountHEnegativedirectionReconoise5 == 11)
            HEnegativedirectionReconoise5->SetXTitle("R for HE- jeta =-18; depth = 5 \b");
          HEnegativedirectionReconoise5->Draw("Error");
          kcountHEnegativedirectionReconoise5++;
          if (kcountHEnegativedirectionReconoise5 > 11)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41  >= -29 && jeta-41 <= -16)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RreconoiseNegativeDirectionhistD1PhiSymmetryDepth5HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEnegativedirectionReconoise5)
    delete h2CeffHEnegativedirectionReconoise5;
  //========================================================================================== 1119
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=6
  //cout<<"      1D plot: R vs phi , different eta,  depth=6 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEnegativedirectionReconoise6 = 1;
  TH1F *h2CeffHEnegativedirectionReconoise6 = new TH1F("h2CeffHEnegativedirectionReconoise6", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionReconoise:
    if (jeta - 41 >= -29 && jeta - 41 <= -16) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=6
      for (int i = 5; i < 6; i++) {
        TH1F *HEnegativedirectionReconoise6 = (TH1F *)h2CeffHEnegativedirectionReconoise6->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = areconoisehe[i][jeta][jphi];
          if (ccc1 != 0.) {
            HEnegativedirectionReconoise6->Fill(jphi, ccc1);
            ccctest = 1.;  //HEnegativedirectionReconoise6->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"999        kcountHEnegativedirectionReconoise6   =     "<<kcountHEnegativedirectionReconoise6  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEnegativedirectionReconoise6);
          HEnegativedirectionReconoise6->SetMarkerStyle(20);
          HEnegativedirectionReconoise6->SetMarkerSize(0.4);
          HEnegativedirectionReconoise6->GetYaxis()->SetLabelSize(0.04);
          HEnegativedirectionReconoise6->SetXTitle("HEnegativedirectionReconoise6 \b");
          HEnegativedirectionReconoise6->SetMarkerColor(2);
          HEnegativedirectionReconoise6->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEnegativedirectionReconoise6 == 1)
            HEnegativedirectionReconoise6->SetXTitle("R for HE- jeta =-28; depth = 6 \b");
          if (kcountHEnegativedirectionReconoise6 == 2)
            HEnegativedirectionReconoise6->SetXTitle("R for HE- jeta =-27; depth = 6 \b");
          if (kcountHEnegativedirectionReconoise6 == 3)
            HEnegativedirectionReconoise6->SetXTitle("R for HE- jeta =-26; depth = 6 \b");
          if (kcountHEnegativedirectionReconoise6 == 4)
            HEnegativedirectionReconoise6->SetXTitle("R for HE- jeta =-25; depth = 6 \b");
          if (kcountHEnegativedirectionReconoise6 == 5)
            HEnegativedirectionReconoise6->SetXTitle("R for HE- jeta =-24; depth = 6 \b");
          if (kcountHEnegativedirectionReconoise6 == 6)
            HEnegativedirectionReconoise6->SetXTitle("R for HE- jeta =-23; depth = 6 \b");
          if (kcountHEnegativedirectionReconoise6 == 7)
            HEnegativedirectionReconoise6->SetXTitle("R for HE- jeta =-22; depth = 6 \b");
          if (kcountHEnegativedirectionReconoise6 == 8)
            HEnegativedirectionReconoise6->SetXTitle("R for HE- jeta =-21; depth = 6 \b");
          if (kcountHEnegativedirectionReconoise6 == 9)
            HEnegativedirectionReconoise6->SetXTitle("R for HE- jeta =-20; depth = 6 \b");
          if (kcountHEnegativedirectionReconoise6 == 10)
            HEnegativedirectionReconoise6->SetXTitle("R for HE- jeta =-19; depth = 6 \b");
          HEnegativedirectionReconoise6->Draw("Error");
          kcountHEnegativedirectionReconoise6++;
          if (kcountHEnegativedirectionReconoise6 > 10)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41  >= -29 && jeta-41 <= -16)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RreconoiseNegativeDirectionhistD1PhiSymmetryDepth6HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEnegativedirectionReconoise6)
    delete h2CeffHEnegativedirectionReconoise6;
  //========================================================================================== 11110
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=7
  //cout<<"      1D plot: R vs phi , different eta,  depth=7 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEnegativedirectionReconoise7 = 1;
  TH1F *h2CeffHEnegativedirectionReconoise7 = new TH1F("h2CeffHEnegativedirectionReconoise7", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionReconoise:
    if (jeta - 41 >= -29 && jeta - 41 <= -16) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=7
      for (int i = 6; i < 7; i++) {
        TH1F *HEnegativedirectionReconoise7 = (TH1F *)h2CeffHEnegativedirectionReconoise7->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = areconoisehe[i][jeta][jphi];
          if (ccc1 != 0.) {
            HEnegativedirectionReconoise7->Fill(jphi, ccc1);
            ccctest = 1.;  //HEnegativedirectionReconoise7->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1010       kcountHEnegativedirectionReconoise7   =     "<<kcountHEnegativedirectionReconoise7  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEnegativedirectionReconoise7);
          HEnegativedirectionReconoise7->SetMarkerStyle(20);
          HEnegativedirectionReconoise7->SetMarkerSize(0.4);
          HEnegativedirectionReconoise7->GetYaxis()->SetLabelSize(0.04);
          HEnegativedirectionReconoise7->SetXTitle("HEnegativedirectionReconoise7 \b");
          HEnegativedirectionReconoise7->SetMarkerColor(2);
          HEnegativedirectionReconoise7->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEnegativedirectionReconoise7 == 1)
            HEnegativedirectionReconoise7->SetXTitle("R for HE- jeta =-28; depth = 7 \b");
          if (kcountHEnegativedirectionReconoise7 == 2)
            HEnegativedirectionReconoise7->SetXTitle("R for HE- jeta =-27; depth = 7 \b");
          if (kcountHEnegativedirectionReconoise7 == 3)
            HEnegativedirectionReconoise7->SetXTitle("R for HE- jeta =-26; depth = 7 \b");
          HEnegativedirectionReconoise7->Draw("Error");
          kcountHEnegativedirectionReconoise7++;
          if (kcountHEnegativedirectionReconoise7 > 3)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41  >= -29 && jeta-41 <= -16)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RreconoiseNegativeDirectionhistD1PhiSymmetryDepth7HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEnegativedirectionReconoise7)
    delete h2CeffHEnegativedirectionReconoise7;

  //======================================================================================================================
  //======================================================================================================================
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //======================================================================================================================
  //                                   DIFDIFDIFDIFDIFDIFDIFDIFDIFDIFDIFDIFDIFDIFDIFDIFDIFDIFDIFDIF:   Reconoise HE
  //======================================================================================================================
  //======================================================================
  c2x1->Clear();
  /////////////////
  c2x1->Divide(2, 1);
  c2x1->cd(1);
  TH2F *GefzDIFreconoiseHE42D = new TH2F("GefzDIFreconoiseHE42D", "", neta, -41., 41., nphi, 0., 72.);
  TH2F *GefzDIFreconoiseHE42D0 = new TH2F("GefzDIFreconoiseHE42D0", "", neta, -41., 41., nphi, 0., 72.);
  TH2F *GefzDIFreconoiseHE42DF = (TH2F *)GefzDIFreconoiseHE42D0->Clone("GefzDIFreconoiseHE42DF");
  for (int i = 0; i < ndepth; i++) {
    for (int jeta = 0; jeta < neta; jeta++) {
      if ((jeta - 41 >= -29 && jeta - 41 <= -16) || (jeta - 41 >= 15 && jeta - 41 <= 28)) {
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = breconoisehe[i][jeta][jphi];
          int k2plot = jeta - 41;
          int kkk = k2plot;  //if(k2plot >0 ) kkk=k2plot+1; //-41 +41 !=0
          if (ccc1 != 0.) {
            GefzDIFreconoiseHE42D->Fill(kkk, jphi, ccc1);
            GefzDIFreconoiseHE42D0->Fill(kkk, jphi, 1.);
          }
        }
      }
    }
  }
  GefzDIFreconoiseHE42DF->Divide(GefzDIFreconoiseHE42D, GefzDIFreconoiseHE42D0, 1, 1, "B");  // average A
  gPad->SetGridy();
  gPad->SetGridx();  //      gPad->SetLogz();
  GefzDIFreconoiseHE42DF->SetXTitle("<DIF>_depth       #eta  \b");
  GefzDIFreconoiseHE42DF->SetYTitle("      #phi \b");
  GefzDIFreconoiseHE42DF->Draw("COLZ");

  //c2x1->cd(2);
  //TH1F *energyhitNoise_HE= (TH1F*)dir->FindObjectAny("h_energyhitNoise_HE");
  //energyhitNoise_HE ->SetMarkerStyle(20);energyhitNoise_HE ->SetMarkerSize(0.4);energyhitNoise_HE ->GetYaxis()->SetLabelSize(0.04);energyhitNoise_HE ->SetXTitle("energyhitNoise_HE \b");energyhitNoise_HE ->SetMarkerColor(2);energyhitNoise_HE ->SetLineColor(0);gPad->SetGridy();gPad->SetGridx();energyhitNoise_HE ->Draw("Error");

  /////////////////
  c2x1->Update();
  c2x1->Print("DIFreconoiseGeneralD2PhiSymmetryHE.png");
  c2x1->Clear();
  // clean-up
  if (GefzDIFreconoiseHE42D)
    delete GefzDIFreconoiseHE42D;
  if (GefzDIFreconoiseHE42D0)
    delete GefzDIFreconoiseHE42D0;
  if (GefzDIFreconoiseHE42DF)
    delete GefzDIFreconoiseHE42DF;
  //====================================================================== 1D plot: DIF vs phi , averaged over depthes & eta
  //======================================================================
  //cout<<"      1D plot: DIF vs phi , averaged over depthes & eta *****" <<endl;
  c1x1->Clear();
  /////////////////
  c1x1->Divide(1, 1);
  c1x1->cd(1);
  TH1F *GefzDIFreconoiseHE41D = new TH1F("GefzDIFreconoiseHE41D", "", nphi, 0., 72.);
  TH1F *GefzDIFreconoiseHE41D0 = new TH1F("GefzDIFreconoiseHE41D0", "", nphi, 0., 72.);
  TH1F *GefzDIFreconoiseHE41DF = (TH1F *)GefzDIFreconoiseHE41D0->Clone("GefzDIFreconoiseHE41DF");
  for (int jphi = 0; jphi < nphi; jphi++) {
    for (int jeta = 0; jeta < neta; jeta++) {
      if ((jeta - 41 >= -29 && jeta - 41 <= -16) || (jeta - 41 >= 15 && jeta - 41 <= 28)) {
        for (int i = 0; i < ndepth; i++) {
          double ccc1 = breconoisehe[i][jeta][jphi];
          if (ccc1 != 0.) {
            GefzDIFreconoiseHE41D->Fill(jphi, ccc1);
            GefzDIFreconoiseHE41D0->Fill(jphi, 1.);
          }
        }
      }
    }
  }
  GefzDIFreconoiseHE41DF->Divide(
      GefzDIFreconoiseHE41D, GefzDIFreconoiseHE41D0, 1, 1, "B");  // DIF averaged over depthes & eta
  GefzDIFreconoiseHE41D0->Sumw2();
  //    for (int jphi=1;jphi<73;jphi++) {GefzDIFreconoiseHE41DF->SetBinError(jphi,0.01);}
  gPad->SetGridy();
  gPad->SetGridx();  //      gPad->SetLogz();
  GefzDIFreconoiseHE41DF->SetMarkerStyle(20);
  GefzDIFreconoiseHE41DF->SetMarkerSize(1.4);
  GefzDIFreconoiseHE41DF->GetZaxis()->SetLabelSize(0.08);
  GefzDIFreconoiseHE41DF->SetXTitle("#phi  \b");
  GefzDIFreconoiseHE41DF->SetYTitle("  <DIF> \b");
  GefzDIFreconoiseHE41DF->SetZTitle("<DIF>_PHI  - AllDepthes \b");
  GefzDIFreconoiseHE41DF->SetMarkerColor(4);
  GefzDIFreconoiseHE41DF->SetLineColor(
      4);  // GefzDIFreconoiseHE41DF->SetMinimum(0.8);     //      GefzDIFreconoiseHE41DF->SetMaximum(1.000);
  GefzDIFreconoiseHE41DF->Draw("Error");
  /////////////////
  c1x1->Update();
  c1x1->Print("DIFreconoiseGeneralD1PhiSymmetryHE.png");
  c1x1->Clear();
  // clean-up
  if (GefzDIFreconoiseHE41D)
    delete GefzDIFreconoiseHE41D;
  if (GefzDIFreconoiseHE41D0)
    delete GefzDIFreconoiseHE41D0;
  if (GefzDIFreconoiseHE41DF)
    delete GefzDIFreconoiseHE41DF;

  //========================================================================================== 4
  //======================================================================
  //======================================================================1D plot: DIF vs phi , different eta,  depth=1
  //cout<<"      1D plot: DIF vs phi , different eta,  depth=1 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEpositivedirectionReconoiseDIF1 = 1;
  TH1F *h2CeffHEpositivedirectionReconoiseDIF1 = new TH1F("h2CeffHEpositivedirectionReconoiseDIF1", "", nphi, 0., 72.);
  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionReconoiseDIF:
    if (jeta - 41 >= 15 && jeta - 41 <= 28) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=1
      for (int i = 0; i < 1; i++) {
        TH1F *HEpositivedirectionReconoiseDIF1 = (TH1F *)h2CeffHEpositivedirectionReconoiseDIF1->Clone("twod1");
        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = breconoisehe[i][jeta][jphi];
          if (ccc1 != 0.) {
            HEpositivedirectionReconoiseDIF1->Fill(jphi, ccc1);
            ccctest = 1.;  //HEpositivedirectionReconoiseDIF1->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //	  cout<<"444        kcountHEpositivedirectionReconoiseDIF1   =     "<<kcountHEpositivedirectionReconoiseDIF1  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEpositivedirectionReconoiseDIF1);
          HEpositivedirectionReconoiseDIF1->SetMarkerStyle(20);
          HEpositivedirectionReconoiseDIF1->SetMarkerSize(0.4);
          HEpositivedirectionReconoiseDIF1->GetYaxis()->SetLabelSize(0.04);
          HEpositivedirectionReconoiseDIF1->SetXTitle("HEpositivedirectionReconoiseDIF1 \b");
          HEpositivedirectionReconoiseDIF1->SetMarkerColor(2);
          HEpositivedirectionReconoiseDIF1->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEpositivedirectionReconoiseDIF1 == 1)
            HEpositivedirectionReconoiseDIF1->SetXTitle("DIF for HE+ jeta = 17; depth = 1 \b");
          if (kcountHEpositivedirectionReconoiseDIF1 == 2)
            HEpositivedirectionReconoiseDIF1->SetXTitle("DIF for HE+ jeta = 18; depth = 1 \b");
          if (kcountHEpositivedirectionReconoiseDIF1 == 3)
            HEpositivedirectionReconoiseDIF1->SetXTitle("DIF for HE+ jeta = 19; depth = 1 \b");
          if (kcountHEpositivedirectionReconoiseDIF1 == 4)
            HEpositivedirectionReconoiseDIF1->SetXTitle("DIF for HE+ jeta = 20; depth = 1 \b");
          if (kcountHEpositivedirectionReconoiseDIF1 == 5)
            HEpositivedirectionReconoiseDIF1->SetXTitle("DIF for HE+ jeta = 21; depth = 1 \b");
          if (kcountHEpositivedirectionReconoiseDIF1 == 6)
            HEpositivedirectionReconoiseDIF1->SetXTitle("DIF for HE+ jeta = 22; depth = 1 \b");
          if (kcountHEpositivedirectionReconoiseDIF1 == 7)
            HEpositivedirectionReconoiseDIF1->SetXTitle("DIF for HE+ jeta = 23; depth = 1 \b");
          if (kcountHEpositivedirectionReconoiseDIF1 == 8)
            HEpositivedirectionReconoiseDIF1->SetXTitle("DIF for HE+ jeta = 24; depth = 1 \b");
          if (kcountHEpositivedirectionReconoiseDIF1 == 9)
            HEpositivedirectionReconoiseDIF1->SetXTitle("DIF for HE+ jeta = 25; depth = 1 \b");
          if (kcountHEpositivedirectionReconoiseDIF1 == 10)
            HEpositivedirectionReconoiseDIF1->SetXTitle("DIF for HE+ jeta = 26; depth = 1 \b");
          if (kcountHEpositivedirectionReconoiseDIF1 == 11)
            HEpositivedirectionReconoiseDIF1->SetXTitle("DIF for HE+ jeta = 27; depth = 1 \b");
          if (kcountHEpositivedirectionReconoiseDIF1 == 12)
            HEpositivedirectionReconoiseDIF1->SetXTitle("DIF for HE+ jeta = 28; depth = 1 \b");
          HEpositivedirectionReconoiseDIF1->Draw("Error");
          kcountHEpositivedirectionReconoiseDIF1++;
          if (kcountHEpositivedirectionReconoiseDIF1 > 12)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 15 && jeta-41 <= 28
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DIFreconoisePositiveDirectionhistD1PhiSymmetryDepth1HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEpositivedirectionReconoiseDIF1)
    delete h2CeffHEpositivedirectionReconoiseDIF1;

  //========================================================================================== 5
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=2
  //  cout<<"      1D plot: R vs phi , different eta,  depth=2 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEpositivedirectionReconoiseDIF2 = 1;
  TH1F *h2CeffHEpositivedirectionReconoiseDIF2 = new TH1F("h2CeffHEpositivedirectionReconoiseDIF2", "", nphi, 0., 72.);
  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionReconoiseDIF:
    if (jeta - 41 >= 15 && jeta - 41 <= 28) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=2
      for (int i = 1; i < 2; i++) {
        TH1F *HEpositivedirectionReconoiseDIF2 = (TH1F *)h2CeffHEpositivedirectionReconoiseDIF2->Clone("twod1");
        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = breconoisehe[i][jeta][jphi];
          if (ccc1 != 0.) {
            HEpositivedirectionReconoiseDIF2->Fill(jphi, ccc1);
            ccctest = 1.;  //HEpositivedirectionReconoiseDIF2->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"555        kcountHEpositivedirectionReconoiseDIF2   =     "<<kcountHEpositivedirectionReconoiseDIF2  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEpositivedirectionReconoiseDIF2);
          HEpositivedirectionReconoiseDIF2->SetMarkerStyle(20);
          HEpositivedirectionReconoiseDIF2->SetMarkerSize(0.4);
          HEpositivedirectionReconoiseDIF2->GetYaxis()->SetLabelSize(0.04);
          HEpositivedirectionReconoiseDIF2->SetXTitle("HEpositivedirectionReconoiseDIF2 \b");
          HEpositivedirectionReconoiseDIF2->SetMarkerColor(2);
          HEpositivedirectionReconoiseDIF2->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEpositivedirectionReconoiseDIF2 == 1)
            HEpositivedirectionReconoiseDIF2->SetXTitle("DIF for HE+ jeta = 16; depth = 2 \b");
          if (kcountHEpositivedirectionReconoiseDIF2 == 2)
            HEpositivedirectionReconoiseDIF2->SetXTitle("DIF for HE+ jeta = 17; depth = 2 \b");
          if (kcountHEpositivedirectionReconoiseDIF2 == 3)
            HEpositivedirectionReconoiseDIF2->SetXTitle("DIF for HE+ jeta = 18; depth = 2 \b");
          if (kcountHEpositivedirectionReconoiseDIF2 == 4)
            HEpositivedirectionReconoiseDIF2->SetXTitle("DIF for HE+ jeta = 19; depth = 2 \b");
          if (kcountHEpositivedirectionReconoiseDIF2 == 5)
            HEpositivedirectionReconoiseDIF2->SetXTitle("DIF for HE+ jeta = 20; depth = 2 \b");
          if (kcountHEpositivedirectionReconoiseDIF2 == 6)
            HEpositivedirectionReconoiseDIF2->SetXTitle("DIF for HE+ jeta = 21; depth = 2 \b");
          if (kcountHEpositivedirectionReconoiseDIF2 == 7)
            HEpositivedirectionReconoiseDIF2->SetXTitle("DIF for HE+ jeta = 22; depth = 2 \b");
          if (kcountHEpositivedirectionReconoiseDIF2 == 8)
            HEpositivedirectionReconoiseDIF2->SetXTitle("DIF for HE+ jeta = 23; depth = 2 \b");
          if (kcountHEpositivedirectionReconoiseDIF2 == 9)
            HEpositivedirectionReconoiseDIF2->SetXTitle("DIF for HE+ jeta = 24; depth = 2 \b");
          if (kcountHEpositivedirectionReconoiseDIF2 == 10)
            HEpositivedirectionReconoiseDIF2->SetXTitle("DIF for HE+ jeta = 25; depth = 2 \b");
          if (kcountHEpositivedirectionReconoiseDIF2 == 11)
            HEpositivedirectionReconoiseDIF2->SetXTitle("DIF for HE+ jeta = 26; depth = 2 \b");
          if (kcountHEpositivedirectionReconoiseDIF2 == 12)
            HEpositivedirectionReconoiseDIF2->SetXTitle("DIF for HE+ jeta = 27; depth = 2 \b");
          if (kcountHEpositivedirectionReconoiseDIF2 == 13)
            HEpositivedirectionReconoiseDIF2->SetXTitle("DIF for HE+ jeta = 28; depth = 2 \b");
          HEpositivedirectionReconoiseDIF2->Draw("Error");
          kcountHEpositivedirectionReconoiseDIF2++;
          if (kcountHEpositivedirectionReconoiseDIF2 > 13)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DIFreconoisePositiveDirectionhistD1PhiSymmetryDepth2HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEpositivedirectionReconoiseDIF2)
    delete h2CeffHEpositivedirectionReconoiseDIF2;
  //========================================================================================== 6
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=3
  //cout<<"      1D plot: R vs phi , different eta,  depth=3 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEpositivedirectionReconoiseDIF3 = 1;
  TH1F *h2CeffHEpositivedirectionReconoiseDIF3 = new TH1F("h2CeffHEpositivedirectionReconoiseDIF3", "", nphi, 0., 72.);
  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionReconoiseDIF:
    if (jeta - 41 >= 15 && jeta - 41 <= 28) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=3
      for (int i = 2; i < 3; i++) {
        TH1F *HEpositivedirectionReconoiseDIF3 = (TH1F *)h2CeffHEpositivedirectionReconoiseDIF3->Clone("twod1");
        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = breconoisehe[i][jeta][jphi];
          if (ccc1 != 0.) {
            HEpositivedirectionReconoiseDIF3->Fill(jphi, ccc1);
            ccctest = 1.;  //HEpositivedirectionReconoiseDIF3->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"666        kcountHEpositivedirectionReconoiseDIF3   =     "<<kcountHEpositivedirectionReconoiseDIF3  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEpositivedirectionReconoiseDIF3);
          HEpositivedirectionReconoiseDIF3->SetMarkerStyle(20);
          HEpositivedirectionReconoiseDIF3->SetMarkerSize(0.4);
          HEpositivedirectionReconoiseDIF3->GetYaxis()->SetLabelSize(0.04);
          HEpositivedirectionReconoiseDIF3->SetXTitle("HEpositivedirectionReconoiseDIF3 \b");
          HEpositivedirectionReconoiseDIF3->SetMarkerColor(2);
          HEpositivedirectionReconoiseDIF3->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEpositivedirectionReconoiseDIF3 == 1)
            HEpositivedirectionReconoiseDIF3->SetXTitle("DIF for HE+ jeta = 16; depth = 3 \b");
          if (kcountHEpositivedirectionReconoiseDIF3 == 2)
            HEpositivedirectionReconoiseDIF3->SetXTitle("DIF for HE+ jeta = 17; depth = 3 \b");
          if (kcountHEpositivedirectionReconoiseDIF3 == 3)
            HEpositivedirectionReconoiseDIF3->SetXTitle("DIF for HE+ jeta = 18; depth = 3 \b");
          if (kcountHEpositivedirectionReconoiseDIF3 == 4)
            HEpositivedirectionReconoiseDIF3->SetXTitle("DIF for HE+ jeta = 19; depth = 3 \b");
          if (kcountHEpositivedirectionReconoiseDIF3 == 5)
            HEpositivedirectionReconoiseDIF3->SetXTitle("DIF for HE+ jeta = 20; depth = 3 \b");
          if (kcountHEpositivedirectionReconoiseDIF3 == 6)
            HEpositivedirectionReconoiseDIF3->SetXTitle("DIF for HE+ jeta = 21; depth = 3 \b");
          if (kcountHEpositivedirectionReconoiseDIF3 == 7)
            HEpositivedirectionReconoiseDIF3->SetXTitle("DIF for HE+ jeta = 22; depth = 3 \b");
          if (kcountHEpositivedirectionReconoiseDIF3 == 8)
            HEpositivedirectionReconoiseDIF3->SetXTitle("DIF for HE+ jeta = 23; depth = 3 \b");
          if (kcountHEpositivedirectionReconoiseDIF3 == 9)
            HEpositivedirectionReconoiseDIF3->SetXTitle("DIF for HE+ jeta = 24; depth = 3 \b");
          if (kcountHEpositivedirectionReconoiseDIF3 == 10)
            HEpositivedirectionReconoiseDIF3->SetXTitle("DIF for HE+ jeta = 25; depth = 3 \b");
          if (kcountHEpositivedirectionReconoiseDIF3 == 11)
            HEpositivedirectionReconoiseDIF3->SetXTitle("DIF for HE+ jeta = 26; depth = 3 \b");
          if (kcountHEpositivedirectionReconoiseDIF3 == 12)
            HEpositivedirectionReconoiseDIF3->SetXTitle("DIF for HE+ jeta = 27; depth = 3 \b");
          if (kcountHEpositivedirectionReconoiseDIF3 == 13)
            HEpositivedirectionReconoiseDIF3->SetXTitle("DIF for HE+ jeta = 28; depth = 3 \b");
          HEpositivedirectionReconoiseDIF3->Draw("Error");
          kcountHEpositivedirectionReconoiseDIF3++;
          if (kcountHEpositivedirectionReconoiseDIF3 > 13)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >=
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DIFreconoisePositiveDirectionhistD1PhiSymmetryDepth3HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEpositivedirectionReconoiseDIF3)
    delete h2CeffHEpositivedirectionReconoiseDIF3;
  //========================================================================================== 7
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=4
  //cout<<"      1D plot: R vs phi , different eta,  depth=4 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEpositivedirectionReconoiseDIF4 = 1;
  TH1F *h2CeffHEpositivedirectionReconoiseDIF4 = new TH1F("h2CeffHEpositivedirectionReconoiseDIF4", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionReconoiseDIF:
    if (jeta - 41 >= 15 && jeta - 41 <= 28) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=4
      for (int i = 3; i < 4; i++) {
        TH1F *HEpositivedirectionReconoiseDIF4 = (TH1F *)h2CeffHEpositivedirectionReconoiseDIF4->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = breconoisehe[i][jeta][jphi];
          if (ccc1 != 0.) {
            HEpositivedirectionReconoiseDIF4->Fill(jphi, ccc1);
            ccctest = 1.;  //HEpositivedirectionReconoiseDIF4->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"777        kcountHEpositivedirectionReconoiseDIF4   =     "<<kcountHEpositivedirectionReconoiseDIF4  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEpositivedirectionReconoiseDIF4);
          HEpositivedirectionReconoiseDIF4->SetMarkerStyle(20);
          HEpositivedirectionReconoiseDIF4->SetMarkerSize(0.4);
          HEpositivedirectionReconoiseDIF4->GetYaxis()->SetLabelSize(0.04);
          HEpositivedirectionReconoiseDIF4->SetXTitle("HEpositivedirectionReconoiseDIF4 \b");
          HEpositivedirectionReconoiseDIF4->SetMarkerColor(2);
          HEpositivedirectionReconoiseDIF4->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEpositivedirectionReconoiseDIF4 == 1)
            HEpositivedirectionReconoiseDIF4->SetXTitle("DIF for HE+ jeta = 15; depth = 4 \b");
          if (kcountHEpositivedirectionReconoiseDIF4 == 2)
            HEpositivedirectionReconoiseDIF4->SetXTitle("DIF for HE+ jeta = 17; depth = 4 \b");
          if (kcountHEpositivedirectionReconoiseDIF4 == 3)
            HEpositivedirectionReconoiseDIF4->SetXTitle("DIF for HE+ jeta = 18; depth = 4 \b");
          if (kcountHEpositivedirectionReconoiseDIF4 == 4)
            HEpositivedirectionReconoiseDIF4->SetXTitle("DIF for HE+ jeta = 19; depth = 4 \b");
          if (kcountHEpositivedirectionReconoiseDIF4 == 5)
            HEpositivedirectionReconoiseDIF4->SetXTitle("DIF for HE+ jeta = 20; depth = 4 \b");
          if (kcountHEpositivedirectionReconoiseDIF4 == 6)
            HEpositivedirectionReconoiseDIF4->SetXTitle("DIF for HE+ jeta = 21; depth = 4 \b");
          if (kcountHEpositivedirectionReconoiseDIF4 == 7)
            HEpositivedirectionReconoiseDIF4->SetXTitle("DIF for HE+ jeta = 22; depth = 4 \b");
          if (kcountHEpositivedirectionReconoiseDIF4 == 8)
            HEpositivedirectionReconoiseDIF4->SetXTitle("DIF for HE+ jeta = 23; depth = 4 \b");
          if (kcountHEpositivedirectionReconoiseDIF4 == 9)
            HEpositivedirectionReconoiseDIF4->SetXTitle("DIF for HE+ jeta = 24; depth = 4 \b");
          if (kcountHEpositivedirectionReconoiseDIF4 == 10)
            HEpositivedirectionReconoiseDIF4->SetXTitle("DIF for HE+ jeta = 25; depth = 4 \b");
          if (kcountHEpositivedirectionReconoiseDIF4 == 11)
            HEpositivedirectionReconoiseDIF4->SetXTitle("DIF for HE+ jeta = 26; depth = 4 \b");
          if (kcountHEpositivedirectionReconoiseDIF4 == 12)
            HEpositivedirectionReconoiseDIF4->SetXTitle("DIF for HE+ jeta = 27; depth = 4 \b");
          HEpositivedirectionReconoiseDIF4->Draw("Error");
          kcountHEpositivedirectionReconoiseDIF4++;
          if (kcountHEpositivedirectionReconoiseDIF4 > 12)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >=  -29 && jeta-41 <= -16)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DIFreconoisePositiveDirectionhistD1PhiSymmetryDepth4HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEpositivedirectionReconoiseDIF4)
    delete h2CeffHEpositivedirectionReconoiseDIF4;
  //========================================================================================== 8
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=5
  //cout<<"      1D plot: R vs phi , different eta,  depth=5 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEpositivedirectionReconoiseDIF5 = 1;
  TH1F *h2CeffHEpositivedirectionReconoiseDIF5 = new TH1F("h2CeffHEpositivedirectionReconoiseDIF5", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionReconoiseDIF:
    if (jeta - 41 >= 15 && jeta - 41 <= 28) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=5
      for (int i = 4; i < 5; i++) {
        TH1F *HEpositivedirectionReconoiseDIF5 = (TH1F *)h2CeffHEpositivedirectionReconoiseDIF5->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          //	       cout<<"888  initial      kcountHEpositivedirectionReconoiseDIF5   =     "<<kcountHEpositivedirectionReconoiseDIF5  <<"   jeta-41=     "<< jeta-41 <<"   jphi=     "<< jphi <<"   breconoisehe[i][jeta][jphi]=     "<< breconoisehe[i][jeta][jphi] <<"  depth=     "<< i <<endl;

          double ccc1 = breconoisehe[i][jeta][jphi];
          if (ccc1 != 0.) {
            HEpositivedirectionReconoiseDIF5->Fill(jphi, ccc1);
            ccctest = 1.;  //HEpositivedirectionReconoiseDIF5->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"888        kcountHEpositivedirectionReconoiseDIF5   =     "<<kcountHEpositivedirectionReconoiseDIF5  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEpositivedirectionReconoiseDIF5);
          HEpositivedirectionReconoiseDIF5->SetMarkerStyle(20);
          HEpositivedirectionReconoiseDIF5->SetMarkerSize(0.4);
          HEpositivedirectionReconoiseDIF5->GetYaxis()->SetLabelSize(0.04);
          HEpositivedirectionReconoiseDIF5->SetXTitle("HEpositivedirectionReconoiseDIF5 \b");
          HEpositivedirectionReconoiseDIF5->SetMarkerColor(2);
          HEpositivedirectionReconoiseDIF5->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEpositivedirectionReconoiseDIF5 == 1)
            HEpositivedirectionReconoiseDIF5->SetXTitle("DIF for HE+ jeta = 17; depth = 5 \b");
          if (kcountHEpositivedirectionReconoiseDIF5 == 2)
            HEpositivedirectionReconoiseDIF5->SetXTitle("DIF for HE+ jeta = 18; depth = 5 \b");
          if (kcountHEpositivedirectionReconoiseDIF5 == 3)
            HEpositivedirectionReconoiseDIF5->SetXTitle("DIF for HE+ jeta = 19; depth = 5 \b");
          if (kcountHEpositivedirectionReconoiseDIF5 == 4)
            HEpositivedirectionReconoiseDIF5->SetXTitle("DIF for HE+ jeta = 20; depth = 5 \b");
          if (kcountHEpositivedirectionReconoiseDIF5 == 5)
            HEpositivedirectionReconoiseDIF5->SetXTitle("DIF for HE+ jeta = 21; depth = 5 \b");
          if (kcountHEpositivedirectionReconoiseDIF5 == 6)
            HEpositivedirectionReconoiseDIF5->SetXTitle("DIF for HE+ jeta = 22; depth = 5 \b");
          if (kcountHEpositivedirectionReconoiseDIF5 == 7)
            HEpositivedirectionReconoiseDIF5->SetXTitle("DIF for HE+ jeta = 23; depth = 5 \b");
          if (kcountHEpositivedirectionReconoiseDIF5 == 8)
            HEpositivedirectionReconoiseDIF5->SetXTitle("DIF for HE+ jeta = 24; depth = 5 \b");
          if (kcountHEpositivedirectionReconoiseDIF5 == 9)
            HEpositivedirectionReconoiseDIF5->SetXTitle("DIF for HE+ jeta = 25; depth = 5 \b");
          if (kcountHEpositivedirectionReconoiseDIF5 == 10)
            HEpositivedirectionReconoiseDIF5->SetXTitle("DIF for HE+ jeta = 26; depth = 5 \b");
          if (kcountHEpositivedirectionReconoiseDIF5 == 11)
            HEpositivedirectionReconoiseDIF5->SetXTitle("DIF for HE+ jeta = 27; depth = 5 \b");
          HEpositivedirectionReconoiseDIF5->Draw("Error");
          kcountHEpositivedirectionReconoiseDIF5++;
          if (kcountHEpositivedirectionReconoiseDIF5 > 11)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >=  -29 && jeta-41 <= -16)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DIFreconoisePositiveDirectionhistD1PhiSymmetryDepth5HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEpositivedirectionReconoiseDIF5)
    delete h2CeffHEpositivedirectionReconoiseDIF5;
  //========================================================================================== 9
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=6
  //cout<<"      1D plot: R vs phi , different eta,  depth=6 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEpositivedirectionReconoiseDIF6 = 1;
  TH1F *h2CeffHEpositivedirectionReconoiseDIF6 = new TH1F("h2CeffHEpositivedirectionReconoiseDIF6", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionReconoiseDIF:
    if (jeta - 41 >= 15 && jeta - 41 <= 28) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=6
      for (int i = 5; i < 6; i++) {
        TH1F *HEpositivedirectionReconoiseDIF6 = (TH1F *)h2CeffHEpositivedirectionReconoiseDIF6->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = breconoisehe[i][jeta][jphi];
          if (ccc1 != 0.) {
            HEpositivedirectionReconoiseDIF6->Fill(jphi, ccc1);
            ccctest = 1.;  //HEpositivedirectionReconoiseDIF6->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"999        kcountHEpositivedirectionReconoiseDIF6   =     "<<kcountHEpositivedirectionReconoiseDIF6  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEpositivedirectionReconoiseDIF6);
          HEpositivedirectionReconoiseDIF6->SetMarkerStyle(20);
          HEpositivedirectionReconoiseDIF6->SetMarkerSize(0.4);
          HEpositivedirectionReconoiseDIF6->GetYaxis()->SetLabelSize(0.04);
          HEpositivedirectionReconoiseDIF6->SetXTitle("HEpositivedirectionReconoiseDIF6 \b");
          HEpositivedirectionReconoiseDIF6->SetMarkerColor(2);
          HEpositivedirectionReconoiseDIF6->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEpositivedirectionReconoiseDIF6 == 1)
            HEpositivedirectionReconoiseDIF6->SetXTitle("DIF for HE+ jeta = 18; depth = 6 \b");
          if (kcountHEpositivedirectionReconoiseDIF6 == 2)
            HEpositivedirectionReconoiseDIF6->SetXTitle("DIF for HE+ jeta = 19; depth = 6 \b");
          if (kcountHEpositivedirectionReconoiseDIF6 == 3)
            HEpositivedirectionReconoiseDIF6->SetXTitle("DIF for HE+ jeta = 20; depth = 6 \b");
          if (kcountHEpositivedirectionReconoiseDIF6 == 4)
            HEpositivedirectionReconoiseDIF6->SetXTitle("DIF for HE+ jeta = 21; depth = 6 \b");
          if (kcountHEpositivedirectionReconoiseDIF6 == 5)
            HEpositivedirectionReconoiseDIF6->SetXTitle("DIF for HE+ jeta = 22; depth = 6 \b");
          if (kcountHEpositivedirectionReconoiseDIF6 == 6)
            HEpositivedirectionReconoiseDIF6->SetXTitle("DIF for HE+ jeta = 23; depth = 6 \b");
          if (kcountHEpositivedirectionReconoiseDIF6 == 7)
            HEpositivedirectionReconoiseDIF6->SetXTitle("DIF for HE+ jeta = 24; depth = 6 \b");
          if (kcountHEpositivedirectionReconoiseDIF6 == 8)
            HEpositivedirectionReconoiseDIF6->SetXTitle("DIF for HE+ jeta = 25; depth = 6 \b");
          if (kcountHEpositivedirectionReconoiseDIF6 == 9)
            HEpositivedirectionReconoiseDIF6->SetXTitle("DIF for HE+ jeta = 26; depth = 6 \b");
          if (kcountHEpositivedirectionReconoiseDIF6 == 10)
            HEpositivedirectionReconoiseDIF6->SetXTitle("DIF for HE+ jeta = 27; depth = 6 \b");
          HEpositivedirectionReconoiseDIF6->Draw("Error");
          kcountHEpositivedirectionReconoiseDIF6++;
          if (kcountHEpositivedirectionReconoiseDIF6 > 10)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >=  -29 && jeta-41 <= -16)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DIFreconoisePositiveDirectionhistD1PhiSymmetryDepth6HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEpositivedirectionReconoiseDIF6)
    delete h2CeffHEpositivedirectionReconoiseDIF6;
  //========================================================================================== 10
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=7
  //cout<<"      1D plot: R vs phi , different eta,  depth=7 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEpositivedirectionReconoiseDIF7 = 1;
  TH1F *h2CeffHEpositivedirectionReconoiseDIF7 = new TH1F("h2CeffHEpositivedirectionReconoiseDIF7", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionReconoiseDIF:
    if (jeta - 41 >= 15 && jeta - 41 <= 28) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=7
      for (int i = 6; i < 7; i++) {
        TH1F *HEpositivedirectionReconoiseDIF7 = (TH1F *)h2CeffHEpositivedirectionReconoiseDIF7->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = breconoisehe[i][jeta][jphi];
          if (ccc1 != 0.) {
            HEpositivedirectionReconoiseDIF7->Fill(jphi, ccc1);
            ccctest = 1.;  //HEpositivedirectionReconoiseDIF7->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1010       kcountHEpositivedirectionReconoiseDIF7   =     "<<kcountHEpositivedirectionReconoiseDIF7  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEpositivedirectionReconoiseDIF7);
          HEpositivedirectionReconoiseDIF7->SetMarkerStyle(20);
          HEpositivedirectionReconoiseDIF7->SetMarkerSize(0.4);
          HEpositivedirectionReconoiseDIF7->GetYaxis()->SetLabelSize(0.04);
          HEpositivedirectionReconoiseDIF7->SetXTitle("HEpositivedirectionReconoiseDIF7 \b");
          HEpositivedirectionReconoiseDIF7->SetMarkerColor(2);
          HEpositivedirectionReconoiseDIF7->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEpositivedirectionReconoiseDIF7 == 1)
            HEpositivedirectionReconoiseDIF7->SetXTitle("DIF for HE+ jeta = 25; depth = 7 \b");
          if (kcountHEpositivedirectionReconoiseDIF7 == 2)
            HEpositivedirectionReconoiseDIF7->SetXTitle("DIF for HE+ jeta = 26; depth = 7 \b");
          if (kcountHEpositivedirectionReconoiseDIF7 == 3)
            HEpositivedirectionReconoiseDIF7->SetXTitle("DIF for HE+ jeta = 27; depth = 7 \b");
          HEpositivedirectionReconoiseDIF7->Draw("Error");
          kcountHEpositivedirectionReconoiseDIF7++;
          if (kcountHEpositivedirectionReconoiseDIF7 > 3)
            break;  //
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >=  -29 && jeta-41 <= -16)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DIFreconoisePositiveDirectionhistD1PhiSymmetryDepth7HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEpositivedirectionReconoiseDIF7)
    delete h2CeffHEpositivedirectionReconoiseDIF7;

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //========================================================================================== 1114
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=1
  //cout<<"      1D plot: R vs phi , different eta,  depth=1 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEnegativedirectionReconoiseDIF1 = 1;
  TH1F *h2CeffHEnegativedirectionReconoiseDIF1 = new TH1F("h2CeffHEnegativedirectionReconoiseDIF1", "", nphi, 0., 72.);
  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionReconoiseDIF:
    if (jeta - 41 >= -29 && jeta - 41 <= -16) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=1
      for (int i = 0; i < 1; i++) {
        TH1F *HEnegativedirectionReconoiseDIF1 = (TH1F *)h2CeffHEnegativedirectionReconoiseDIF1->Clone("twod1");
        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = breconoisehe[i][jeta][jphi];
          if (ccc1 != 0.) {
            HEnegativedirectionReconoiseDIF1->Fill(jphi, ccc1);
            ccctest = 1.;  //HEnegativedirectionReconoiseDIF1->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //	  cout<<"444        kcountHEnegativedirectionReconoiseDIF1   =     "<<kcountHEnegativedirectionReconoiseDIF1  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEnegativedirectionReconoiseDIF1);
          HEnegativedirectionReconoiseDIF1->SetMarkerStyle(20);
          HEnegativedirectionReconoiseDIF1->SetMarkerSize(0.4);
          HEnegativedirectionReconoiseDIF1->GetYaxis()->SetLabelSize(0.04);
          HEnegativedirectionReconoiseDIF1->SetXTitle("HEnegativedirectionReconoiseDIF1 \b");
          HEnegativedirectionReconoiseDIF1->SetMarkerColor(2);
          HEnegativedirectionReconoiseDIF1->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEnegativedirectionReconoiseDIF1 == 1)
            HEnegativedirectionReconoiseDIF1->SetXTitle("DIF for HE- jeta =-29; depth = 1 \b");
          if (kcountHEnegativedirectionReconoiseDIF1 == 2)
            HEnegativedirectionReconoiseDIF1->SetXTitle("DIF for HE- jeta =-28; depth = 1 \b");
          if (kcountHEnegativedirectionReconoiseDIF1 == 3)
            HEnegativedirectionReconoiseDIF1->SetXTitle("DIF for HE- jeta =-27; depth = 1 \b");
          if (kcountHEnegativedirectionReconoiseDIF1 == 4)
            HEnegativedirectionReconoiseDIF1->SetXTitle("DIF for HE- jeta =-26; depth = 1 \b");
          if (kcountHEnegativedirectionReconoiseDIF1 == 5)
            HEnegativedirectionReconoiseDIF1->SetXTitle("DIF for HE- jeta =-25; depth = 1 \b");
          if (kcountHEnegativedirectionReconoiseDIF1 == 6)
            HEnegativedirectionReconoiseDIF1->SetXTitle("DIF for HE- jeta =-24; depth = 1 \b");
          if (kcountHEnegativedirectionReconoiseDIF1 == 7)
            HEnegativedirectionReconoiseDIF1->SetXTitle("DIF for HE- jeta =-23; depth = 1 \b");
          if (kcountHEnegativedirectionReconoiseDIF1 == 8)
            HEnegativedirectionReconoiseDIF1->SetXTitle("DIF for HE- jeta =-22; depth = 1 \b");
          if (kcountHEnegativedirectionReconoiseDIF1 == 9)
            HEnegativedirectionReconoiseDIF1->SetXTitle("DIF for HE- jeta =-21; depth = 1 \b");
          if (kcountHEnegativedirectionReconoiseDIF1 == 10)
            HEnegativedirectionReconoiseDIF1->SetXTitle("DIF for HE- jeta =-20; depth = 1 \b");
          if (kcountHEnegativedirectionReconoiseDIF1 == 11)
            HEnegativedirectionReconoiseDIF1->SetXTitle("DIF for HE- jeta =-19; depth = 1 \b");
          if (kcountHEnegativedirectionReconoiseDIF1 == 12)
            HEnegativedirectionReconoiseDIF1->SetXTitle("DIF for HE- jeta =-18; depth = 1 \b");
          HEnegativedirectionReconoiseDIF1->Draw("Error");
          kcountHEnegativedirectionReconoiseDIF1++;
          if (kcountHEnegativedirectionReconoiseDIF1 > 12)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41  >= -29 && jeta-41 <= -16)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DIFreconoiseNegativeDirectionhistD1PhiSymmetryDepth1HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEnegativedirectionReconoiseDIF1)
    delete h2CeffHEnegativedirectionReconoiseDIF1;

  //========================================================================================== 1115
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=2
  //  cout<<"      1D plot: R vs phi , different eta,  depth=2 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEnegativedirectionReconoiseDIF2 = 1;
  TH1F *h2CeffHEnegativedirectionReconoiseDIF2 = new TH1F("h2CeffHEnegativedirectionReconoiseDIF2", "", nphi, 0., 72.);
  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionReconoiseDIF:
    if (jeta - 41 >= -29 && jeta - 41 <= -16) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=2
      for (int i = 1; i < 2; i++) {
        TH1F *HEnegativedirectionReconoiseDIF2 = (TH1F *)h2CeffHEnegativedirectionReconoiseDIF2->Clone("twod1");
        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = breconoisehe[i][jeta][jphi];
          if (ccc1 != 0.) {
            HEnegativedirectionReconoiseDIF2->Fill(jphi, ccc1);
            ccctest = 1.;  //HEnegativedirectionReconoiseDIF2->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"555        kcountHEnegativedirectionReconoiseDIF2   =     "<<kcountHEnegativedirectionReconoiseDIF2  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEnegativedirectionReconoiseDIF2);
          HEnegativedirectionReconoiseDIF2->SetMarkerStyle(20);
          HEnegativedirectionReconoiseDIF2->SetMarkerSize(0.4);
          HEnegativedirectionReconoiseDIF2->GetYaxis()->SetLabelSize(0.04);
          HEnegativedirectionReconoiseDIF2->SetXTitle("HEnegativedirectionReconoiseDIF2 \b");
          HEnegativedirectionReconoiseDIF2->SetMarkerColor(2);
          HEnegativedirectionReconoiseDIF2->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEnegativedirectionReconoiseDIF2 == 1)
            HEnegativedirectionReconoiseDIF2->SetXTitle("DIF for HE- jeta =-29; depth = 2 \b");
          if (kcountHEnegativedirectionReconoiseDIF2 == 2)
            HEnegativedirectionReconoiseDIF2->SetXTitle("DIF for HE- jeta =-28; depth = 2 \b");
          if (kcountHEnegativedirectionReconoiseDIF2 == 3)
            HEnegativedirectionReconoiseDIF2->SetXTitle("DIF for HE- jeta =-27; depth = 2 \b");
          if (kcountHEnegativedirectionReconoiseDIF2 == 4)
            HEnegativedirectionReconoiseDIF2->SetXTitle("DIF for HE- jeta =-26; depth = 2 \b");
          if (kcountHEnegativedirectionReconoiseDIF2 == 5)
            HEnegativedirectionReconoiseDIF2->SetXTitle("DIF for HE- jeta =-25; depth = 2 \b");
          if (kcountHEnegativedirectionReconoiseDIF2 == 6)
            HEnegativedirectionReconoiseDIF2->SetXTitle("DIF for HE- jeta =-24; depth = 2 \b");
          if (kcountHEnegativedirectionReconoiseDIF2 == 7)
            HEnegativedirectionReconoiseDIF2->SetXTitle("DIF for HE- jeta =-23; depth = 2 \b");
          if (kcountHEnegativedirectionReconoiseDIF2 == 8)
            HEnegativedirectionReconoiseDIF2->SetXTitle("DIF for HE- jeta =-22; depth = 2 \b");
          if (kcountHEnegativedirectionReconoiseDIF2 == 9)
            HEnegativedirectionReconoiseDIF2->SetXTitle("DIF for HE- jeta =-21; depth = 2 \b");
          if (kcountHEnegativedirectionReconoiseDIF2 == 10)
            HEnegativedirectionReconoiseDIF2->SetXTitle("DIF for HE- jeta =-20; depth = 2 \b");
          if (kcountHEnegativedirectionReconoiseDIF2 == 11)
            HEnegativedirectionReconoiseDIF2->SetXTitle("DIF for HE- jeta =-19; depth = 2 \b");
          if (kcountHEnegativedirectionReconoiseDIF2 == 12)
            HEnegativedirectionReconoiseDIF2->SetXTitle("DIF for HE- jeta =-18; depth = 2 \b");
          if (kcountHEnegativedirectionReconoiseDIF2 == 13)
            HEnegativedirectionReconoiseDIF2->SetXTitle("DIF for HE- jeta =-17; depth = 2 \b");
          HEnegativedirectionReconoiseDIF2->Draw("Error");
          kcountHEnegativedirectionReconoiseDIF2++;
          if (kcountHEnegativedirectionReconoiseDIF2 > 13)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41  >= -29 && jeta-41 <= -16)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DIFreconoiseNegativeDirectionhistD1PhiSymmetryDepth2HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEnegativedirectionReconoiseDIF2)
    delete h2CeffHEnegativedirectionReconoiseDIF2;
  //========================================================================================== 1116
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=3
  //cout<<"      1D plot: R vs phi , different eta,  depth=3 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEnegativedirectionReconoiseDIF3 = 1;
  TH1F *h2CeffHEnegativedirectionReconoiseDIF3 = new TH1F("h2CeffHEnegativedirectionReconoiseDIF3", "", nphi, 0., 72.);
  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionReconoiseDIF:
    if (jeta - 41 >= -29 && jeta - 41 <= -16) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=3
      for (int i = 2; i < 3; i++) {
        TH1F *HEnegativedirectionReconoiseDIF3 = (TH1F *)h2CeffHEnegativedirectionReconoiseDIF3->Clone("twod1");
        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = breconoisehe[i][jeta][jphi];
          if (ccc1 != 0.) {
            HEnegativedirectionReconoiseDIF3->Fill(jphi, ccc1);
            ccctest = 1.;  //HEnegativedirectionReconoiseDIF3->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"666        kcountHEnegativedirectionReconoiseDIF3   =     "<<kcountHEnegativedirectionReconoiseDIF3  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEnegativedirectionReconoiseDIF3);
          HEnegativedirectionReconoiseDIF3->SetMarkerStyle(20);
          HEnegativedirectionReconoiseDIF3->SetMarkerSize(0.4);
          HEnegativedirectionReconoiseDIF3->GetYaxis()->SetLabelSize(0.04);
          HEnegativedirectionReconoiseDIF3->SetXTitle("HEnegativedirectionReconoiseDIF3 \b");
          HEnegativedirectionReconoiseDIF3->SetMarkerColor(2);
          HEnegativedirectionReconoiseDIF3->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEnegativedirectionReconoiseDIF3 == 1)
            HEnegativedirectionReconoiseDIF3->SetXTitle("DIF for HE- jeta =-29; depth = 3 \b");
          if (kcountHEnegativedirectionReconoiseDIF3 == 2)
            HEnegativedirectionReconoiseDIF3->SetXTitle("DIF for HE- jeta =-28; depth = 3 \b");
          if (kcountHEnegativedirectionReconoiseDIF3 == 3)
            HEnegativedirectionReconoiseDIF3->SetXTitle("DIF for HE- jeta =-27; depth = 3 \b");
          if (kcountHEnegativedirectionReconoiseDIF3 == 4)
            HEnegativedirectionReconoiseDIF3->SetXTitle("DIF for HE- jeta =-26; depth = 3 \b");
          if (kcountHEnegativedirectionReconoiseDIF3 == 5)
            HEnegativedirectionReconoiseDIF3->SetXTitle("DIF for HE- jeta =-25; depth = 3 \b");
          if (kcountHEnegativedirectionReconoiseDIF3 == 6)
            HEnegativedirectionReconoiseDIF3->SetXTitle("DIF for HE- jeta =-24; depth = 3 \b");
          if (kcountHEnegativedirectionReconoiseDIF3 == 7)
            HEnegativedirectionReconoiseDIF3->SetXTitle("DIF for HE- jeta =-23; depth = 3 \b");
          if (kcountHEnegativedirectionReconoiseDIF3 == 8)
            HEnegativedirectionReconoiseDIF3->SetXTitle("DIF for HE- jeta =-22; depth = 3 \b");
          if (kcountHEnegativedirectionReconoiseDIF3 == 9)
            HEnegativedirectionReconoiseDIF3->SetXTitle("DIF for HE- jeta =-21; depth = 3 \b");
          if (kcountHEnegativedirectionReconoiseDIF3 == 10)
            HEnegativedirectionReconoiseDIF3->SetXTitle("DIF for HE- jeta =-20; depth = 3 \b");
          if (kcountHEnegativedirectionReconoiseDIF3 == 11)
            HEnegativedirectionReconoiseDIF3->SetXTitle("DIF for HE- jeta =-19; depth = 3 \b");
          if (kcountHEnegativedirectionReconoiseDIF3 == 12)
            HEnegativedirectionReconoiseDIF3->SetXTitle("DIF for HE- jeta =-18; depth = 3 \b");
          if (kcountHEnegativedirectionReconoiseDIF3 == 13)
            HEnegativedirectionReconoiseDIF3->SetXTitle("DIF for HE- jeta =-17; depth = 3 \b");
          HEnegativedirectionReconoiseDIF3->Draw("Error");
          kcountHEnegativedirectionReconoiseDIF3++;
          if (kcountHEnegativedirectionReconoiseDIF3 > 13)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41  >= -29 && jeta-41 <= -16)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DIFreconoiseNegativeDirectionhistD1PhiSymmetryDepth3HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEnegativedirectionReconoiseDIF3)
    delete h2CeffHEnegativedirectionReconoiseDIF3;
  //========================================================================================== 1117
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=4
  //cout<<"      1D plot: R vs phi , different eta,  depth=4 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEnegativedirectionReconoiseDIF4 = 1;
  TH1F *h2CeffHEnegativedirectionReconoiseDIF4 = new TH1F("h2CeffHEnegativedirectionReconoiseDIF4", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionReconoiseDIF:
    if (jeta - 41 >= -29 && jeta - 41 <= -16) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=4
      for (int i = 3; i < 4; i++) {
        TH1F *HEnegativedirectionReconoiseDIF4 = (TH1F *)h2CeffHEnegativedirectionReconoiseDIF4->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = breconoisehe[i][jeta][jphi];
          if (ccc1 != 0.) {
            HEnegativedirectionReconoiseDIF4->Fill(jphi, ccc1);
            ccctest = 1.;  //HEnegativedirectionReconoiseDIF4->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"777        kcountHEnegativedirectionReconoiseDIF4   =     "<<kcountHEnegativedirectionReconoiseDIF4  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEnegativedirectionReconoiseDIF4);
          HEnegativedirectionReconoiseDIF4->SetMarkerStyle(20);
          HEnegativedirectionReconoiseDIF4->SetMarkerSize(0.4);
          HEnegativedirectionReconoiseDIF4->GetYaxis()->SetLabelSize(0.04);
          HEnegativedirectionReconoiseDIF4->SetXTitle("HEnegativedirectionReconoiseDIF4 \b");
          HEnegativedirectionReconoiseDIF4->SetMarkerColor(2);
          HEnegativedirectionReconoiseDIF4->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEnegativedirectionReconoiseDIF4 == 1)
            HEnegativedirectionReconoiseDIF4->SetXTitle("DIF for HE- jeta =-28; depth = 4 \b");
          if (kcountHEnegativedirectionReconoiseDIF4 == 2)
            HEnegativedirectionReconoiseDIF4->SetXTitle("DIF for HE- jeta =-27; depth = 4 \b");
          if (kcountHEnegativedirectionReconoiseDIF4 == 3)
            HEnegativedirectionReconoiseDIF4->SetXTitle("DIF for HE- jeta =-26; depth = 4 \b");
          if (kcountHEnegativedirectionReconoiseDIF4 == 4)
            HEnegativedirectionReconoiseDIF4->SetXTitle("DIF for HE- jeta =-25; depth = 4 \b");
          if (kcountHEnegativedirectionReconoiseDIF4 == 5)
            HEnegativedirectionReconoiseDIF4->SetXTitle("DIF for HE- jeta =-24; depth = 4 \b");
          if (kcountHEnegativedirectionReconoiseDIF4 == 6)
            HEnegativedirectionReconoiseDIF4->SetXTitle("DIF for HE- jeta =-23; depth = 4 \b");
          if (kcountHEnegativedirectionReconoiseDIF4 == 7)
            HEnegativedirectionReconoiseDIF4->SetXTitle("DIF for HE- jeta =-22; depth = 4 \b");
          if (kcountHEnegativedirectionReconoiseDIF4 == 8)
            HEnegativedirectionReconoiseDIF4->SetXTitle("DIF for HE- jeta =-21; depth = 4 \b");
          if (kcountHEnegativedirectionReconoiseDIF4 == 9)
            HEnegativedirectionReconoiseDIF4->SetXTitle("DIF for HE- jeta =-20; depth = 4 \b");
          if (kcountHEnegativedirectionReconoiseDIF4 == 10)
            HEnegativedirectionReconoiseDIF4->SetXTitle("DIF for HE- jeta =-19; depth = 4 \b");
          if (kcountHEnegativedirectionReconoiseDIF4 == 11)
            HEnegativedirectionReconoiseDIF4->SetXTitle("DIF for HE- jeta =-18; depth = 4 \b");
          if (kcountHEnegativedirectionReconoiseDIF4 == 12)
            HEnegativedirectionReconoiseDIF4->SetXTitle("DIF for HE- jeta =-16; depth = 4 \b");
          HEnegativedirectionReconoiseDIF4->Draw("Error");
          kcountHEnegativedirectionReconoiseDIF4++;
          if (kcountHEnegativedirectionReconoiseDIF4 > 12)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41  >= -29 && jeta-41 <= -16)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DIFreconoiseNegativeDirectionhistD1PhiSymmetryDepth4HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEnegativedirectionReconoiseDIF4)
    delete h2CeffHEnegativedirectionReconoiseDIF4;
  //========================================================================================== 1118
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=5
  //cout<<"      1D plot: R vs phi , different eta,  depth=5 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEnegativedirectionReconoiseDIF5 = 1;
  TH1F *h2CeffHEnegativedirectionReconoiseDIF5 = new TH1F("h2CeffHEnegativedirectionReconoiseDIF5", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionReconoiseDIF:
    if (jeta - 41 >= -29 && jeta - 41 <= -16) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=5
      for (int i = 4; i < 5; i++) {
        TH1F *HEnegativedirectionReconoiseDIF5 = (TH1F *)h2CeffHEnegativedirectionReconoiseDIF5->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          //	       cout<<"888  initial      kcountHEnegativedirectionReconoiseDIF5   =     "<<kcountHEnegativedirectionReconoiseDIF5  <<"   jeta-41=     "<< jeta-41 <<"   jphi=     "<< jphi <<"   breconoisehe[i][jeta][jphi]=     "<< breconoisehe[i][jeta][jphi] <<"  depth=     "<< i <<endl;

          double ccc1 = breconoisehe[i][jeta][jphi];
          if (ccc1 != 0.) {
            HEnegativedirectionReconoiseDIF5->Fill(jphi, ccc1);
            ccctest = 1.;  //HEnegativedirectionReconoiseDIF5->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"888        kcountHEnegativedirectionReconoiseDIF5   =     "<<kcountHEnegativedirectionReconoiseDIF5  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEnegativedirectionReconoiseDIF5);
          HEnegativedirectionReconoiseDIF5->SetMarkerStyle(20);
          HEnegativedirectionReconoiseDIF5->SetMarkerSize(0.4);
          HEnegativedirectionReconoiseDIF5->GetYaxis()->SetLabelSize(0.04);
          HEnegativedirectionReconoiseDIF5->SetXTitle("HEnegativedirectionReconoiseDIF5 \b");
          HEnegativedirectionReconoiseDIF5->SetMarkerColor(2);
          HEnegativedirectionReconoiseDIF5->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEnegativedirectionReconoiseDIF5 == 1)
            HEnegativedirectionReconoiseDIF5->SetXTitle("DIF for HE- jeta =-28; depth = 5 \b");
          if (kcountHEnegativedirectionReconoiseDIF5 == 2)
            HEnegativedirectionReconoiseDIF5->SetXTitle("DIF for HE- jeta =-27; depth = 5 \b");
          if (kcountHEnegativedirectionReconoiseDIF5 == 3)
            HEnegativedirectionReconoiseDIF5->SetXTitle("DIF for HE- jeta =-26; depth = 5 \b");
          if (kcountHEnegativedirectionReconoiseDIF5 == 4)
            HEnegativedirectionReconoiseDIF5->SetXTitle("DIF for HE- jeta =-25; depth = 5 \b");
          if (kcountHEnegativedirectionReconoiseDIF5 == 5)
            HEnegativedirectionReconoiseDIF5->SetXTitle("DIF for HE- jeta =-24; depth = 5 \b");
          if (kcountHEnegativedirectionReconoiseDIF5 == 6)
            HEnegativedirectionReconoiseDIF5->SetXTitle("DIF for HE- jeta =-23; depth = 5 \b");
          if (kcountHEnegativedirectionReconoiseDIF5 == 7)
            HEnegativedirectionReconoiseDIF5->SetXTitle("DIF for HE- jeta =-22; depth = 5 \b");
          if (kcountHEnegativedirectionReconoiseDIF5 == 8)
            HEnegativedirectionReconoiseDIF5->SetXTitle("DIF for HE- jeta =-21; depth = 5 \b");
          if (kcountHEnegativedirectionReconoiseDIF5 == 9)
            HEnegativedirectionReconoiseDIF5->SetXTitle("DIF for HE- jeta =-20; depth = 5 \b");
          if (kcountHEnegativedirectionReconoiseDIF5 == 10)
            HEnegativedirectionReconoiseDIF5->SetXTitle("DIF for HE- jeta =-19; depth = 5 \b");
          if (kcountHEnegativedirectionReconoiseDIF5 == 11)
            HEnegativedirectionReconoiseDIF5->SetXTitle("DIF for HE- jeta =-18; depth = 5 \b");
          HEnegativedirectionReconoiseDIF5->Draw("Error");
          kcountHEnegativedirectionReconoiseDIF5++;
          if (kcountHEnegativedirectionReconoiseDIF5 > 11)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41  >= -29 && jeta-41 <= -16)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DIFreconoiseNegativeDirectionhistD1PhiSymmetryDepth5HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEnegativedirectionReconoiseDIF5)
    delete h2CeffHEnegativedirectionReconoiseDIF5;
  //========================================================================================== 1119
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=6
  //cout<<"      1D plot: R vs phi , different eta,  depth=6 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEnegativedirectionReconoiseDIF6 = 1;
  TH1F *h2CeffHEnegativedirectionReconoiseDIF6 = new TH1F("h2CeffHEnegativedirectionReconoiseDIF6", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionReconoiseDIF:
    if (jeta - 41 >= -29 && jeta - 41 <= -16) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=6
      for (int i = 5; i < 6; i++) {
        TH1F *HEnegativedirectionReconoiseDIF6 = (TH1F *)h2CeffHEnegativedirectionReconoiseDIF6->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = breconoisehe[i][jeta][jphi];
          if (ccc1 != 0.) {
            HEnegativedirectionReconoiseDIF6->Fill(jphi, ccc1);
            ccctest = 1.;  //HEnegativedirectionReconoiseDIF6->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"999        kcountHEnegativedirectionReconoiseDIF6   =     "<<kcountHEnegativedirectionReconoiseDIF6  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEnegativedirectionReconoiseDIF6);
          HEnegativedirectionReconoiseDIF6->SetMarkerStyle(20);
          HEnegativedirectionReconoiseDIF6->SetMarkerSize(0.4);
          HEnegativedirectionReconoiseDIF6->GetYaxis()->SetLabelSize(0.04);
          HEnegativedirectionReconoiseDIF6->SetXTitle("HEnegativedirectionReconoiseDIF6 \b");
          HEnegativedirectionReconoiseDIF6->SetMarkerColor(2);
          HEnegativedirectionReconoiseDIF6->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEnegativedirectionReconoiseDIF6 == 1)
            HEnegativedirectionReconoiseDIF6->SetXTitle("DIF for HE- jeta =-28; depth = 6 \b");
          if (kcountHEnegativedirectionReconoiseDIF6 == 2)
            HEnegativedirectionReconoiseDIF6->SetXTitle("DIF for HE- jeta =-27; depth = 6 \b");
          if (kcountHEnegativedirectionReconoiseDIF6 == 3)
            HEnegativedirectionReconoiseDIF6->SetXTitle("DIF for HE- jeta =-26; depth = 6 \b");
          if (kcountHEnegativedirectionReconoiseDIF6 == 4)
            HEnegativedirectionReconoiseDIF6->SetXTitle("DIF for HE- jeta =-25; depth = 6 \b");
          if (kcountHEnegativedirectionReconoiseDIF6 == 5)
            HEnegativedirectionReconoiseDIF6->SetXTitle("DIF for HE- jeta =-24; depth = 6 \b");
          if (kcountHEnegativedirectionReconoiseDIF6 == 6)
            HEnegativedirectionReconoiseDIF6->SetXTitle("DIF for HE- jeta =-23; depth = 6 \b");
          if (kcountHEnegativedirectionReconoiseDIF6 == 7)
            HEnegativedirectionReconoiseDIF6->SetXTitle("DIF for HE- jeta =-22; depth = 6 \b");
          if (kcountHEnegativedirectionReconoiseDIF6 == 8)
            HEnegativedirectionReconoiseDIF6->SetXTitle("DIF for HE- jeta =-21; depth = 6 \b");
          if (kcountHEnegativedirectionReconoiseDIF6 == 9)
            HEnegativedirectionReconoiseDIF6->SetXTitle("DIF for HE- jeta =-20; depth = 6 \b");
          if (kcountHEnegativedirectionReconoiseDIF6 == 10)
            HEnegativedirectionReconoiseDIF6->SetXTitle("DIF for HE- jeta =-19; depth = 6 \b");
          HEnegativedirectionReconoiseDIF6->Draw("Error");
          kcountHEnegativedirectionReconoiseDIF6++;
          if (kcountHEnegativedirectionReconoiseDIF6 > 10)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41  >= -29 && jeta-41 <= -16)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DIFreconoiseNegativeDirectionhistD1PhiSymmetryDepth6HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEnegativedirectionReconoiseDIF6)
    delete h2CeffHEnegativedirectionReconoiseDIF6;
  //========================================================================================== 11110
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=7
  //cout<<"      1D plot: R vs phi , different eta,  depth=7 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEnegativedirectionReconoiseDIF7 = 1;
  TH1F *h2CeffHEnegativedirectionReconoiseDIF7 = new TH1F("h2CeffHEnegativedirectionReconoiseDIF7", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionReconoiseDIF:
    if (jeta - 41 >= -29 && jeta - 41 <= -16) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=7
      for (int i = 6; i < 7; i++) {
        TH1F *HEnegativedirectionReconoiseDIF7 = (TH1F *)h2CeffHEnegativedirectionReconoiseDIF7->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = breconoisehe[i][jeta][jphi];
          if (ccc1 != 0.) {
            HEnegativedirectionReconoiseDIF7->Fill(jphi, ccc1);
            ccctest = 1.;  //HEnegativedirectionReconoiseDIF7->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1010       kcountHEnegativedirectionReconoiseDIF7   =     "<<kcountHEnegativedirectionReconoiseDIF7  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEnegativedirectionReconoiseDIF7);
          HEnegativedirectionReconoiseDIF7->SetMarkerStyle(20);
          HEnegativedirectionReconoiseDIF7->SetMarkerSize(0.4);
          HEnegativedirectionReconoiseDIF7->GetYaxis()->SetLabelSize(0.04);
          HEnegativedirectionReconoiseDIF7->SetXTitle("HEnegativedirectionReconoiseDIF7 \b");
          HEnegativedirectionReconoiseDIF7->SetMarkerColor(2);
          HEnegativedirectionReconoiseDIF7->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEnegativedirectionReconoiseDIF7 == 1)
            HEnegativedirectionReconoiseDIF7->SetXTitle("DIF for HE- jeta =-28; depth = 7 \b");
          if (kcountHEnegativedirectionReconoiseDIF7 == 2)
            HEnegativedirectionReconoiseDIF7->SetXTitle("DIF for HE- jeta =-27; depth = 7 \b");
          if (kcountHEnegativedirectionReconoiseDIF7 == 3)
            HEnegativedirectionReconoiseDIF7->SetXTitle("DIF for HE- jeta =-26; depth = 7 \b");
          HEnegativedirectionReconoiseDIF7->Draw("Error");
          kcountHEnegativedirectionReconoiseDIF7++;
          if (kcountHEnegativedirectionReconoiseDIF7 > 3)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41  >= -29 && jeta-41 <= -16)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DIFreconoiseNegativeDirectionhistD1PhiSymmetryDepth7HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEnegativedirectionReconoiseDIF7)
    delete h2CeffHEnegativedirectionReconoiseDIF7;

  //======================================================================================================================
  //======================================================================================================================
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //======================================================================================================================
  //======================================================================================================================
  //======================================================================================================================

  //                            DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD:

  //cout<<"    Start Vaiance: preparation  *****" <<endl;
  TH2F *reconoiseVariance1HE1 = (TH2F *)dir->FindObjectAny("h_recNoiseEnergy2_HE1");
  TH2F *reconoiseVariance0HE1 = (TH2F *)dir->FindObjectAny("h_recNoiseEnergy0_HE1");
  TH2F *reconoiseVarianceHE1 = (TH2F *)reconoiseVariance1HE1->Clone("reconoiseVarianceHE1");
  reconoiseVarianceHE1->Divide(reconoiseVariance1HE1, reconoiseVariance0HE1, 1, 1, "B");
  TH2F *reconoiseVariance1HE2 = (TH2F *)dir->FindObjectAny("h_recNoiseEnergy2_HE2");
  TH2F *reconoiseVariance0HE2 = (TH2F *)dir->FindObjectAny("h_recNoiseEnergy0_HE2");
  TH2F *reconoiseVarianceHE2 = (TH2F *)reconoiseVariance1HE2->Clone("reconoiseVarianceHE2");
  reconoiseVarianceHE2->Divide(reconoiseVariance1HE2, reconoiseVariance0HE2, 1, 1, "B");
  TH2F *reconoiseVariance1HE3 = (TH2F *)dir->FindObjectAny("h_recNoiseEnergy2_HE3");
  TH2F *reconoiseVariance0HE3 = (TH2F *)dir->FindObjectAny("h_recNoiseEnergy0_HE3");
  TH2F *reconoiseVarianceHE3 = (TH2F *)reconoiseVariance1HE3->Clone("reconoiseVarianceHE3");
  reconoiseVarianceHE3->Divide(reconoiseVariance1HE3, reconoiseVariance0HE3, 1, 1, "B");
  TH2F *reconoiseVariance1HE4 = (TH2F *)dir->FindObjectAny("h_recNoiseEnergy2_HE4");
  TH2F *reconoiseVariance0HE4 = (TH2F *)dir->FindObjectAny("h_recNoiseEnergy0_HE4");
  TH2F *reconoiseVarianceHE4 = (TH2F *)reconoiseVariance1HE4->Clone("reconoiseVarianceHE4");
  reconoiseVarianceHE4->Divide(reconoiseVariance1HE4, reconoiseVariance0HE4, 1, 1, "B");
  TH2F *reconoiseVariance1HE5 = (TH2F *)dir->FindObjectAny("h_recNoiseEnergy2_HE5");
  TH2F *reconoiseVariance0HE5 = (TH2F *)dir->FindObjectAny("h_recNoiseEnergy0_HE5");
  TH2F *reconoiseVarianceHE5 = (TH2F *)reconoiseVariance1HE5->Clone("reconoiseVarianceHE5");
  reconoiseVarianceHE5->Divide(reconoiseVariance1HE5, reconoiseVariance0HE5, 1, 1, "B");
  TH2F *reconoiseVariance1HE6 = (TH2F *)dir->FindObjectAny("h_recNoiseEnergy2_HE6");
  TH2F *reconoiseVariance0HE6 = (TH2F *)dir->FindObjectAny("h_recNoiseEnergy0_HE6");
  TH2F *reconoiseVarianceHE6 = (TH2F *)reconoiseVariance1HE6->Clone("reconoiseVarianceHE6");
  reconoiseVarianceHE6->Divide(reconoiseVariance1HE6, reconoiseVariance0HE6, 1, 1, "B");
  TH2F *reconoiseVariance1HE7 = (TH2F *)dir->FindObjectAny("h_recNoiseEnergy2_HE7");
  TH2F *reconoiseVariance0HE7 = (TH2F *)dir->FindObjectAny("h_recNoiseEnergy0_HE7");
  TH2F *reconoiseVarianceHE7 = (TH2F *)reconoiseVariance1HE7->Clone("reconoiseVarianceHE7");
  reconoiseVarianceHE7->Divide(reconoiseVariance1HE7, reconoiseVariance0HE7, 1, 1, "B");
  //cout<<"      Vaiance: preparation DONE *****" <<endl;
  //====================================================================== put Vaiance=Dispersia = Sig**2=<R**2> - (<R>)**2 into massive reconoisevariancehe
  //                                                                                           = sum(R*R)/N - (sum(R)/N)**2
  for (int jeta = 0; jeta < njeta; jeta++) {
    if ((jeta - 41 >= -29 && jeta - 41 <= -16) || (jeta - 41 >= 15 && jeta - 41 <= 28)) {
      //preparation for PHI normalization:
      double sumreconoiseHE0 = 0;
      int nsumreconoiseHE0 = 0;
      double sumreconoiseHE1 = 0;
      int nsumreconoiseHE1 = 0;
      double sumreconoiseHE2 = 0;
      int nsumreconoiseHE2 = 0;
      double sumreconoiseHE3 = 0;
      int nsumreconoiseHE3 = 0;
      double sumreconoiseHE4 = 0;
      int nsumreconoiseHE4 = 0;
      double sumreconoiseHE5 = 0;
      int nsumreconoiseHE5 = 0;
      double sumreconoiseHE6 = 0;
      int nsumreconoiseHE6 = 0;
      for (int jphi = 0; jphi < njphi; jphi++) {
        reconoisevariancehe[0][jeta][jphi] = reconoiseVarianceHE1->GetBinContent(jeta + 1, jphi + 1);
        reconoisevariancehe[1][jeta][jphi] = reconoiseVarianceHE2->GetBinContent(jeta + 1, jphi + 1);
        reconoisevariancehe[2][jeta][jphi] = reconoiseVarianceHE3->GetBinContent(jeta + 1, jphi + 1);
        reconoisevariancehe[3][jeta][jphi] = reconoiseVarianceHE4->GetBinContent(jeta + 1, jphi + 1);
        reconoisevariancehe[4][jeta][jphi] = reconoiseVarianceHE5->GetBinContent(jeta + 1, jphi + 1);
        reconoisevariancehe[5][jeta][jphi] = reconoiseVarianceHE6->GetBinContent(jeta + 1, jphi + 1);
        reconoisevariancehe[6][jeta][jphi] = reconoiseVarianceHE7->GetBinContent(jeta + 1, jphi + 1);
        if (reconoisevariancehe[0][jeta][jphi] != 0.) {
          sumreconoiseHE0 += reconoisevariancehe[0][jeta][jphi];
          ++nsumreconoiseHE0;
        }
        if (reconoisevariancehe[1][jeta][jphi] != 0.) {
          sumreconoiseHE1 += reconoisevariancehe[1][jeta][jphi];
          ++nsumreconoiseHE1;
        }
        if (reconoisevariancehe[2][jeta][jphi] != 0.) {
          sumreconoiseHE2 += reconoisevariancehe[2][jeta][jphi];
          ++nsumreconoiseHE2;
        }
        if (reconoisevariancehe[3][jeta][jphi] != 0.) {
          sumreconoiseHE3 += reconoisevariancehe[3][jeta][jphi];
          ++nsumreconoiseHE3;
        }
        if (reconoisevariancehe[4][jeta][jphi] != 0.) {
          sumreconoiseHE4 += reconoisevariancehe[4][jeta][jphi];
          ++nsumreconoiseHE4;
        }
        if (reconoisevariancehe[5][jeta][jphi] != 0.) {
          sumreconoiseHE5 += reconoisevariancehe[5][jeta][jphi];
          ++nsumreconoiseHE5;
        }
        if (reconoisevariancehe[6][jeta][jphi] != 0.) {
          sumreconoiseHE6 += reconoisevariancehe[6][jeta][jphi];
          ++nsumreconoiseHE6;
        }
      }  // phi
      // PHI normalization :
      for (int jphi = 0; jphi < njphi; jphi++) {
        if (sumreconoiseHE0 != 0.)
          reconoisevariancehe[0][jeta][jphi] /= (sumreconoiseHE0 / nsumreconoiseHE0);
        if (sumreconoiseHE1 != 0.)
          reconoisevariancehe[1][jeta][jphi] /= (sumreconoiseHE1 / nsumreconoiseHE1);
        if (sumreconoiseHE2 != 0.)
          reconoisevariancehe[2][jeta][jphi] /= (sumreconoiseHE2 / nsumreconoiseHE2);
        if (sumreconoiseHE3 != 0.)
          reconoisevariancehe[3][jeta][jphi] /= (sumreconoiseHE3 / nsumreconoiseHE3);
        if (sumreconoiseHE4 != 0.)
          reconoisevariancehe[4][jeta][jphi] /= (sumreconoiseHE4 / nsumreconoiseHE4);
        if (sumreconoiseHE5 != 0.)
          reconoisevariancehe[5][jeta][jphi] /= (sumreconoiseHE5 / nsumreconoiseHE5);
        if (sumreconoiseHE6 != 0.)
          reconoisevariancehe[6][jeta][jphi] /= (sumreconoiseHE6 / nsumreconoiseHE6);
      }  // phi
      //       reconoisevariancehe (D)           = sum(R*R)/N - (sum(R)/N)**2
      for (int jphi = 0; jphi < njphi; jphi++) {
        //	   cout<<"12 12 12   jeta=     "<< jeta <<"   jphi   =     "<<jphi  <<endl;
        reconoisevariancehe[0][jeta][jphi] -= areconoisehe[0][jeta][jphi] * areconoisehe[0][jeta][jphi];
        reconoisevariancehe[0][jeta][jphi] = fabs(reconoisevariancehe[0][jeta][jphi]);
        reconoisevariancehe[1][jeta][jphi] -= areconoisehe[1][jeta][jphi] * areconoisehe[1][jeta][jphi];
        reconoisevariancehe[1][jeta][jphi] = fabs(reconoisevariancehe[1][jeta][jphi]);
        reconoisevariancehe[2][jeta][jphi] -= areconoisehe[2][jeta][jphi] * areconoisehe[2][jeta][jphi];
        reconoisevariancehe[2][jeta][jphi] = fabs(reconoisevariancehe[2][jeta][jphi]);
        reconoisevariancehe[3][jeta][jphi] -= areconoisehe[3][jeta][jphi] * areconoisehe[3][jeta][jphi];
        reconoisevariancehe[3][jeta][jphi] = fabs(reconoisevariancehe[3][jeta][jphi]);
        reconoisevariancehe[4][jeta][jphi] -= areconoisehe[4][jeta][jphi] * areconoisehe[4][jeta][jphi];
        reconoisevariancehe[4][jeta][jphi] = fabs(reconoisevariancehe[4][jeta][jphi]);
        reconoisevariancehe[5][jeta][jphi] -= areconoisehe[5][jeta][jphi] * areconoisehe[5][jeta][jphi];
        reconoisevariancehe[5][jeta][jphi] = fabs(reconoisevariancehe[5][jeta][jphi]);
        reconoisevariancehe[6][jeta][jphi] -= areconoisehe[6][jeta][jphi] * areconoisehe[6][jeta][jphi];
        reconoisevariancehe[6][jeta][jphi] = fabs(reconoisevariancehe[6][jeta][jphi]);
      }
    }
  }
  //cout<<"      Vaiance: DONE*****" <<endl;
  //------------------------  2D-eta/phi-plot: D, averaged over depthes
  //======================================================================
  //======================================================================
  //cout<<"      R2D-eta/phi-plot: D, averaged over depthes *****" <<endl;
  c1x1->Clear();
  /////////////////
  c1x0->Divide(1, 1);
  c1x0->cd(1);
  TH2F *DefzDreconoiseHE42D = new TH2F("DefzDreconoiseHE42D", "", neta, -41., 41., nphi, 0., 72.);
  TH2F *DefzDreconoiseHE42D0 = new TH2F("DefzDreconoiseHE42D0", "", neta, -41., 41., nphi, 0., 72.);
  TH2F *DefzDreconoiseHE42DF = (TH2F *)DefzDreconoiseHE42D0->Clone("DefzDreconoiseHE42DF");
  for (int i = 0; i < ndepth; i++) {
    for (int jeta = 0; jeta < neta; jeta++) {
      if ((jeta - 41 >= -29 && jeta - 41 <= -16) || (jeta - 41 >= 15 && jeta - 41 <= 28)) {
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = reconoisevariancehe[i][jeta][jphi];
          int k2plot = jeta - 41;
          int kkk = k2plot;  //if(k2plot >0   kkk=k2plot+1; //-41 +41 !=0
          if (areconoisehe[i][jeta][jphi] > 0.) {
            DefzDreconoiseHE42D->Fill(kkk, jphi, ccc1);
            DefzDreconoiseHE42D0->Fill(kkk, jphi, 1.);
          }
        }
      }
    }
  }
  DefzDreconoiseHE42DF->Divide(DefzDreconoiseHE42D, DefzDreconoiseHE42D0, 1, 1, "B");  // average A
  //    DefzDreconoiseHE1->Sumw2();
  gPad->SetGridy();
  gPad->SetGridx();  //      gPad->SetLogz();
  DefzDreconoiseHE42DF->SetMarkerStyle(20);
  DefzDreconoiseHE42DF->SetMarkerSize(0.4);
  DefzDreconoiseHE42DF->GetZaxis()->SetLabelSize(0.08);
  DefzDreconoiseHE42DF->SetXTitle("<D>_depth       #eta  \b");
  DefzDreconoiseHE42DF->SetYTitle("      #phi \b");
  DefzDreconoiseHE42DF->SetZTitle("<D>_depth \b");
  DefzDreconoiseHE42DF->SetMarkerColor(2);
  DefzDreconoiseHE42DF->SetLineColor(
      0);  //      DefzDreconoiseHE42DF->SetMaximum(1.000);  //      DefzDreconoiseHE42DF->SetMinimum(1.0);
  DefzDreconoiseHE42DF->Draw("COLZ");
  /////////////////
  c1x0->Update();
  c1x0->Print("DreconoiseGeneralD2PhiSymmetryHE.png");
  c1x0->Clear();
  // clean-up
  if (DefzDreconoiseHE42D)
    delete DefzDreconoiseHE42D;
  if (DefzDreconoiseHE42D0)
    delete DefzDreconoiseHE42D0;
  if (DefzDreconoiseHE42DF)
    delete DefzDreconoiseHE42DF;
  //====================================================================== 1D plot: D vs phi , averaged over depthes & eta
  //======================================================================
  //cout<<"      1D plot: D vs phi , averaged over depthes & eta *****" <<endl;
  c1x1->Clear();
  /////////////////
  c1x1->Divide(1, 1);
  c1x1->cd(1);
  TH1F *DefzDreconoiseHE41D = new TH1F("DefzDreconoiseHE41D", "", nphi, 0., 72.);
  TH1F *DefzDreconoiseHE41D0 = new TH1F("DefzDreconoiseHE41D0", "", nphi, 0., 72.);
  TH1F *DefzDreconoiseHE41DF = (TH1F *)DefzDreconoiseHE41D0->Clone("DefzDreconoiseHE41DF");

  for (int jphi = 0; jphi < nphi; jphi++) {
    for (int jeta = 0; jeta < neta; jeta++) {
      if ((jeta - 41 >= -29 && jeta - 41 <= -16) || (jeta - 41 >= 15 && jeta - 41 <= 28)) {
        for (int i = 0; i < ndepth; i++) {
          double ccc1 = reconoisevariancehe[i][jeta][jphi];
          if (areconoisehe[i][jeta][jphi] > 0.) {
            DefzDreconoiseHE41D->Fill(jphi, ccc1);
            DefzDreconoiseHE41D0->Fill(jphi, 1.);
          }
        }
      }
    }
  }
  //     DefzDreconoiseHE41D->Sumw2();DefzDreconoiseHE41D0->Sumw2();

  DefzDreconoiseHE41DF->Divide(DefzDreconoiseHE41D, DefzDreconoiseHE41D0, 1, 1, "B");  // R averaged over depthes & eta
  DefzDreconoiseHE41D0->Sumw2();
  //    for (int jphi=1;jphi<73;jphi++) {DefzDreconoiseHE41DF->SetBinError(jphi,0.01);}
  gPad->SetGridy();
  gPad->SetGridx();  //      gPad->SetLogz();
  DefzDreconoiseHE41DF->SetMarkerStyle(20);
  DefzDreconoiseHE41DF->SetMarkerSize(1.4);
  DefzDreconoiseHE41DF->GetZaxis()->SetLabelSize(0.08);
  DefzDreconoiseHE41DF->SetXTitle("#phi  \b");
  DefzDreconoiseHE41DF->SetYTitle("  <D> \b");
  DefzDreconoiseHE41DF->SetZTitle("<D>_PHI  - AllDepthes \b");
  DefzDreconoiseHE41DF->SetMarkerColor(4);
  DefzDreconoiseHE41DF->SetLineColor(
      4);  // DefzDreconoiseHE41DF->SetMinimum(0.8);     DefzDreconoiseHE41DF->SetMinimum(-0.015);
  DefzDreconoiseHE41DF->Draw("Error");
  /////////////////
  c1x1->Update();
  c1x1->Print("DreconoiseGeneralD1PhiSymmetryHE.png");
  c1x1->Clear();
  // clean-up
  if (DefzDreconoiseHE41D)
    delete DefzDreconoiseHE41D;
  if (DefzDreconoiseHE41D0)
    delete DefzDreconoiseHE41D0;
  if (DefzDreconoiseHE41DF)
    delete DefzDreconoiseHE41DF;
  //========================================================================================== 14
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=1
  //cout<<"      1D plot: D vs phi , different eta,  depth=1 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEpositivedirectionReconoiseD1 = 1;
  TH1F *h2CeffHEpositivedirectionReconoiseD1 = new TH1F("h2CeffHEpositivedirectionReconoiseD1", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionReconoiseD:
    if (jeta - 41 >= 15 && jeta - 41 <= 28) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=1
      for (int i = 0; i < 1; i++) {
        TH1F *HEpositivedirectionReconoiseD1 = (TH1F *)h2CeffHEpositivedirectionReconoiseD1->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = reconoisevariancehe[i][jeta][jphi];
          if (areconoisehe[i][jeta][jphi] > 0.) {
            HEpositivedirectionReconoiseD1->Fill(jphi, ccc1);
            ccctest = 1.;  //HEpositivedirectionReconoiseD1->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1414       kcountHEpositivedirectionReconoiseD1   =     "<<kcountHEpositivedirectionReconoiseD1  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEpositivedirectionReconoiseD1);
          HEpositivedirectionReconoiseD1->SetMarkerStyle(20);
          HEpositivedirectionReconoiseD1->SetMarkerSize(0.4);
          HEpositivedirectionReconoiseD1->GetYaxis()->SetLabelSize(0.04);
          HEpositivedirectionReconoiseD1->SetXTitle("HEpositivedirectionReconoiseD1 \b");
          HEpositivedirectionReconoiseD1->SetMarkerColor(2);
          HEpositivedirectionReconoiseD1->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEpositivedirectionReconoiseD1 == 1)
            HEpositivedirectionReconoiseD1->SetXTitle("D for HE+ jeta = 17; depth = 1 \b");
          if (kcountHEpositivedirectionReconoiseD1 == 2)
            HEpositivedirectionReconoiseD1->SetXTitle("D for HE+ jeta = 18; depth = 1 \b");
          if (kcountHEpositivedirectionReconoiseD1 == 3)
            HEpositivedirectionReconoiseD1->SetXTitle("D for HE+ jeta = 19; depth = 1 \b");
          if (kcountHEpositivedirectionReconoiseD1 == 4)
            HEpositivedirectionReconoiseD1->SetXTitle("D for HE+ jeta = 20; depth = 1 \b");
          if (kcountHEpositivedirectionReconoiseD1 == 5)
            HEpositivedirectionReconoiseD1->SetXTitle("D for HE+ jeta = 21; depth = 1 \b");
          if (kcountHEpositivedirectionReconoiseD1 == 6)
            HEpositivedirectionReconoiseD1->SetXTitle("D for HE+ jeta = 22; depth = 1 \b");
          if (kcountHEpositivedirectionReconoiseD1 == 7)
            HEpositivedirectionReconoiseD1->SetXTitle("D for HE+ jeta = 23; depth = 1 \b");
          if (kcountHEpositivedirectionReconoiseD1 == 8)
            HEpositivedirectionReconoiseD1->SetXTitle("D for HE+ jeta = 24; depth = 1 \b");
          if (kcountHEpositivedirectionReconoiseD1 == 9)
            HEpositivedirectionReconoiseD1->SetXTitle("D for HE+ jeta = 25; depth = 1 \b");
          if (kcountHEpositivedirectionReconoiseD1 == 10)
            HEpositivedirectionReconoiseD1->SetXTitle("D for HE+ jeta = 26; depth = 1 \b");
          if (kcountHEpositivedirectionReconoiseD1 == 11)
            HEpositivedirectionReconoiseD1->SetXTitle("D for HE+ jeta = 27; depth = 1 \b");
          if (kcountHEpositivedirectionReconoiseD1 == 12)
            HEpositivedirectionReconoiseD1->SetXTitle("D for HE+ jeta = 28; depth = 1 \b");
          HEpositivedirectionReconoiseD1->Draw("Error");
          kcountHEpositivedirectionReconoiseD1++;
          if (kcountHEpositivedirectionReconoiseD1 > 12)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DreconoisePositiveDirectionhistD1PhiSymmetryDepth1HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEpositivedirectionReconoiseD1)
    delete h2CeffHEpositivedirectionReconoiseD1;
  //========================================================================================== 15
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=2
  //cout<<"      1D plot: D vs phi , different eta,  depth=2 *****" <<endl;
  c3x5->Clear();
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEpositivedirectionReconoiseD2 = 1;
  TH1F *h2CeffHEpositivedirectionReconoiseD2 = new TH1F("h2CeffHEpositivedirectionReconoiseD2", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionReconoiseD:
    if (jeta - 41 >= 15 && jeta - 41 <= 28) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=2
      for (int i = 1; i < 2; i++) {
        TH1F *HEpositivedirectionReconoiseD2 = (TH1F *)h2CeffHEpositivedirectionReconoiseD2->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = reconoisevariancehe[i][jeta][jphi];
          if (areconoisehe[i][jeta][jphi] > 0.) {
            HEpositivedirectionReconoiseD2->Fill(jphi, ccc1);
            ccctest = 1.;  //HEpositivedirectionReconoiseD2->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1515       kcountHEpositivedirectionReconoiseD2   =     "<<kcountHEpositivedirectionReconoiseD2  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEpositivedirectionReconoiseD2);
          HEpositivedirectionReconoiseD2->SetMarkerStyle(20);
          HEpositivedirectionReconoiseD2->SetMarkerSize(0.4);
          HEpositivedirectionReconoiseD2->GetYaxis()->SetLabelSize(0.04);
          HEpositivedirectionReconoiseD2->SetXTitle("HEpositivedirectionReconoiseD2 \b");
          HEpositivedirectionReconoiseD2->SetMarkerColor(2);
          HEpositivedirectionReconoiseD2->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEpositivedirectionReconoiseD2 == 1)
            HEpositivedirectionReconoiseD2->SetXTitle("D for HE+ jeta = 16; depth = 2 \b");
          if (kcountHEpositivedirectionReconoiseD2 == 2)
            HEpositivedirectionReconoiseD2->SetXTitle("D for HE+ jeta = 17; depth = 2 \b");
          if (kcountHEpositivedirectionReconoiseD2 == 3)
            HEpositivedirectionReconoiseD2->SetXTitle("D for HE+ jeta = 18; depth = 2 \b");
          if (kcountHEpositivedirectionReconoiseD2 == 4)
            HEpositivedirectionReconoiseD2->SetXTitle("D for HE+ jeta = 19; depth = 2 \b");
          if (kcountHEpositivedirectionReconoiseD2 == 5)
            HEpositivedirectionReconoiseD2->SetXTitle("D for HE+ jeta = 20; depth = 2 \b");
          if (kcountHEpositivedirectionReconoiseD2 == 6)
            HEpositivedirectionReconoiseD2->SetXTitle("D for HE+ jeta = 21; depth = 2 \b");
          if (kcountHEpositivedirectionReconoiseD2 == 7)
            HEpositivedirectionReconoiseD2->SetXTitle("D for HE+ jeta = 22; depth = 2 \b");
          if (kcountHEpositivedirectionReconoiseD2 == 8)
            HEpositivedirectionReconoiseD2->SetXTitle("D for HE+ jeta = 23; depth = 2 \b");
          if (kcountHEpositivedirectionReconoiseD2 == 9)
            HEpositivedirectionReconoiseD2->SetXTitle("D for HE+ jeta = 24; depth = 2 \b");
          if (kcountHEpositivedirectionReconoiseD2 == 10)
            HEpositivedirectionReconoiseD2->SetXTitle("D for HE+ jeta = 25; depth = 2 \b");
          if (kcountHEpositivedirectionReconoiseD2 == 11)
            HEpositivedirectionReconoiseD2->SetXTitle("D for HE+ jeta = 26; depth = 2 \b");
          if (kcountHEpositivedirectionReconoiseD2 == 12)
            HEpositivedirectionReconoiseD2->SetXTitle("D for HE+ jeta = 27; depth = 2 \b");
          if (kcountHEpositivedirectionReconoiseD2 == 13)
            HEpositivedirectionReconoiseD2->SetXTitle("D for HE+ jeta = 28; depth = 2 \b");
          HEpositivedirectionReconoiseD2->Draw("Error");
          kcountHEpositivedirectionReconoiseD2++;
          if (kcountHEpositivedirectionReconoiseD2 > 13)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DreconoisePositiveDirectionhistD1PhiSymmetryDepth2HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEpositivedirectionReconoiseD2)
    delete h2CeffHEpositivedirectionReconoiseD2;
  //========================================================================================== 16
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=3
  //cout<<"      1D plot: D vs phi , different eta,  depth=3 *****" <<endl;
  c3x5->Clear();
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEpositivedirectionReconoiseD3 = 1;
  TH1F *h2CeffHEpositivedirectionReconoiseD3 = new TH1F("h2CeffHEpositivedirectionReconoiseD3", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionReconoiseD:
    if (jeta - 41 >= 15 && jeta - 41 <= 28) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=3
      for (int i = 2; i < 3; i++) {
        TH1F *HEpositivedirectionReconoiseD3 = (TH1F *)h2CeffHEpositivedirectionReconoiseD3->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = reconoisevariancehe[i][jeta][jphi];
          if (areconoisehe[i][jeta][jphi] > 0.) {
            HEpositivedirectionReconoiseD3->Fill(jphi, ccc1);
            ccctest = 1.;  //HEpositivedirectionReconoiseD3->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1616       kcountHEpositivedirectionReconoiseD3   =     "<<kcountHEpositivedirectionReconoiseD3  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEpositivedirectionReconoiseD3);
          HEpositivedirectionReconoiseD3->SetMarkerStyle(20);
          HEpositivedirectionReconoiseD3->SetMarkerSize(0.4);
          HEpositivedirectionReconoiseD3->GetYaxis()->SetLabelSize(0.04);
          HEpositivedirectionReconoiseD3->SetXTitle("HEpositivedirectionReconoiseD3 \b");
          HEpositivedirectionReconoiseD3->SetMarkerColor(2);
          HEpositivedirectionReconoiseD3->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEpositivedirectionReconoiseD3 == 1)
            HEpositivedirectionReconoiseD3->SetXTitle("D for HE+ jeta = 16; depth = 3 \b");
          if (kcountHEpositivedirectionReconoiseD3 == 2)
            HEpositivedirectionReconoiseD3->SetXTitle("D for HE+ jeta = 17; depth = 3 \b");
          if (kcountHEpositivedirectionReconoiseD3 == 3)
            HEpositivedirectionReconoiseD3->SetXTitle("D for HE+ jeta = 18; depth = 3 \b");
          if (kcountHEpositivedirectionReconoiseD3 == 4)
            HEpositivedirectionReconoiseD3->SetXTitle("D for HE+ jeta = 19; depth = 3 \b");
          if (kcountHEpositivedirectionReconoiseD3 == 5)
            HEpositivedirectionReconoiseD3->SetXTitle("D for HE+ jeta = 20; depth = 3 \b");
          if (kcountHEpositivedirectionReconoiseD3 == 6)
            HEpositivedirectionReconoiseD3->SetXTitle("D for HE+ jeta = 21; depth = 3 \b");
          if (kcountHEpositivedirectionReconoiseD3 == 7)
            HEpositivedirectionReconoiseD3->SetXTitle("D for HE+ jeta = 22; depth = 3 \b");
          if (kcountHEpositivedirectionReconoiseD3 == 8)
            HEpositivedirectionReconoiseD3->SetXTitle("D for HE+ jeta = 23; depth = 3 \b");
          if (kcountHEpositivedirectionReconoiseD3 == 9)
            HEpositivedirectionReconoiseD3->SetXTitle("D for HE+ jeta = 24; depth = 3 \b");
          if (kcountHEpositivedirectionReconoiseD3 == 10)
            HEpositivedirectionReconoiseD3->SetXTitle("D for HE+ jeta = 25; depth = 3 \b");
          if (kcountHEpositivedirectionReconoiseD3 == 11)
            HEpositivedirectionReconoiseD3->SetXTitle("D for HE+ jeta = 26; depth = 3 \b");
          if (kcountHEpositivedirectionReconoiseD3 == 12)
            HEpositivedirectionReconoiseD3->SetXTitle("D for HE+ jeta = 27; depth = 3 \b");
          if (kcountHEpositivedirectionReconoiseD3 == 13)
            HEpositivedirectionReconoiseD3->SetXTitle("D for HE+ jeta = 28; depth = 3 \b");
          HEpositivedirectionReconoiseD3->Draw("Error");
          kcountHEpositivedirectionReconoiseD3++;
          if (kcountHEpositivedirectionReconoiseD3 > 13)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DreconoisePositiveDirectionhistD1PhiSymmetryDepth3HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEpositivedirectionReconoiseD3)
    delete h2CeffHEpositivedirectionReconoiseD3;
  //========================================================================================== 17
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=4
  //cout<<"      1D plot: D vs phi , different eta,  depth=4 *****" <<endl;
  c3x5->Clear();
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEpositivedirectionReconoiseD4 = 1;
  TH1F *h2CeffHEpositivedirectionReconoiseD4 = new TH1F("h2CeffHEpositivedirectionReconoiseD4", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionReconoiseD:
    if (jeta - 41 >= 15 && jeta - 41 <= 28) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=4
      for (int i = 3; i < 4; i++) {
        TH1F *HEpositivedirectionReconoiseD4 = (TH1F *)h2CeffHEpositivedirectionReconoiseD4->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = reconoisevariancehe[i][jeta][jphi];
          if (areconoisehe[i][jeta][jphi] > 0.) {
            HEpositivedirectionReconoiseD4->Fill(jphi, ccc1);
            ccctest = 1.;  //HEpositivedirectionReconoiseD4->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1717       kcountHEpositivedirectionReconoiseD4   =     "<<kcountHEpositivedirectionReconoiseD4  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEpositivedirectionReconoiseD4);
          HEpositivedirectionReconoiseD4->SetMarkerStyle(20);
          HEpositivedirectionReconoiseD4->SetMarkerSize(0.4);
          HEpositivedirectionReconoiseD4->GetYaxis()->SetLabelSize(0.04);
          HEpositivedirectionReconoiseD4->SetXTitle("HEpositivedirectionReconoiseD4 \b");
          HEpositivedirectionReconoiseD4->SetMarkerColor(2);
          HEpositivedirectionReconoiseD4->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEpositivedirectionReconoiseD4 == 1)
            HEpositivedirectionReconoiseD4->SetXTitle("D for HE+ jeta = 15; depth = 4 \b");
          if (kcountHEpositivedirectionReconoiseD4 == 2)
            HEpositivedirectionReconoiseD4->SetXTitle("D for HE+ jeta = 17; depth = 4 \b");
          if (kcountHEpositivedirectionReconoiseD4 == 3)
            HEpositivedirectionReconoiseD4->SetXTitle("D for HE+ jeta = 18; depth = 4 \b");
          if (kcountHEpositivedirectionReconoiseD4 == 4)
            HEpositivedirectionReconoiseD4->SetXTitle("D for HE+ jeta = 19; depth = 4 \b");
          if (kcountHEpositivedirectionReconoiseD4 == 5)
            HEpositivedirectionReconoiseD4->SetXTitle("D for HE+ jeta = 20; depth = 4 \b");
          if (kcountHEpositivedirectionReconoiseD4 == 6)
            HEpositivedirectionReconoiseD4->SetXTitle("D for HE+ jeta = 21; depth = 4 \b");
          if (kcountHEpositivedirectionReconoiseD4 == 7)
            HEpositivedirectionReconoiseD4->SetXTitle("D for HE+ jeta = 22; depth = 4 \b");
          if (kcountHEpositivedirectionReconoiseD4 == 8)
            HEpositivedirectionReconoiseD4->SetXTitle("D for HE+ jeta = 23; depth = 4 \b");
          if (kcountHEpositivedirectionReconoiseD4 == 9)
            HEpositivedirectionReconoiseD4->SetXTitle("D for HE+ jeta = 24; depth = 4 \b");
          if (kcountHEpositivedirectionReconoiseD4 == 10)
            HEpositivedirectionReconoiseD4->SetXTitle("D for HE+ jeta = 25; depth = 4 \b");
          if (kcountHEpositivedirectionReconoiseD4 == 11)
            HEpositivedirectionReconoiseD4->SetXTitle("D for HE+ jeta = 26; depth = 4 \b");
          if (kcountHEpositivedirectionReconoiseD4 == 12)
            HEpositivedirectionReconoiseD4->SetXTitle("D for HE+ jeta = 27; depth = 4 \b");
          HEpositivedirectionReconoiseD4->Draw("Error");
          kcountHEpositivedirectionReconoiseD4++;
          if (kcountHEpositivedirectionReconoiseD4 > 12)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DreconoisePositiveDirectionhistD1PhiSymmetryDepth4HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEpositivedirectionReconoiseD4)
    delete h2CeffHEpositivedirectionReconoiseD4;
  //========================================================================================== 18
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=5
  //cout<<"      1D plot: D vs phi , different eta,  depth=5 *****" <<endl;
  c3x5->Clear();
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEpositivedirectionReconoiseD5 = 1;
  TH1F *h2CeffHEpositivedirectionReconoiseD5 = new TH1F("h2CeffHEpositivedirectionReconoiseD5", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionReconoiseD:
    if (jeta - 41 >= 15 && jeta - 41 <= 28) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=5
      for (int i = 4; i < 5; i++) {
        TH1F *HEpositivedirectionReconoiseD5 = (TH1F *)h2CeffHEpositivedirectionReconoiseD5->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = reconoisevariancehe[i][jeta][jphi];
          if (areconoisehe[i][jeta][jphi] > 0.) {
            HEpositivedirectionReconoiseD5->Fill(jphi, ccc1);
            ccctest = 1.;  //HEpositivedirectionReconoiseD5->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1818       kcountHEpositivedirectionReconoiseD5   =     "<<kcountHEpositivedirectionReconoiseD5  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEpositivedirectionReconoiseD5);
          HEpositivedirectionReconoiseD5->SetMarkerStyle(20);
          HEpositivedirectionReconoiseD5->SetMarkerSize(0.4);
          HEpositivedirectionReconoiseD5->GetYaxis()->SetLabelSize(0.04);
          HEpositivedirectionReconoiseD5->SetXTitle("HEpositivedirectionReconoiseD5 \b");
          HEpositivedirectionReconoiseD5->SetMarkerColor(2);
          HEpositivedirectionReconoiseD5->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEpositivedirectionReconoiseD5 == 1)
            HEpositivedirectionReconoiseD5->SetXTitle("D for HE+ jeta = 17; depth = 5 \b");
          if (kcountHEpositivedirectionReconoiseD5 == 2)
            HEpositivedirectionReconoiseD5->SetXTitle("D for HE+ jeta = 18; depth = 5 \b");
          if (kcountHEpositivedirectionReconoiseD5 == 3)
            HEpositivedirectionReconoiseD5->SetXTitle("D for HE+ jeta = 19; depth = 5 \b");
          if (kcountHEpositivedirectionReconoiseD5 == 4)
            HEpositivedirectionReconoiseD5->SetXTitle("D for HE+ jeta = 20; depth = 5 \b");
          if (kcountHEpositivedirectionReconoiseD5 == 5)
            HEpositivedirectionReconoiseD5->SetXTitle("D for HE+ jeta = 21; depth = 5 \b");
          if (kcountHEpositivedirectionReconoiseD5 == 6)
            HEpositivedirectionReconoiseD5->SetXTitle("D for HE+ jeta = 22; depth = 5 \b");
          if (kcountHEpositivedirectionReconoiseD5 == 7)
            HEpositivedirectionReconoiseD5->SetXTitle("D for HE+ jeta = 23; depth = 5 \b");
          if (kcountHEpositivedirectionReconoiseD5 == 8)
            HEpositivedirectionReconoiseD5->SetXTitle("D for HE+ jeta = 24; depth = 5 \b");
          if (kcountHEpositivedirectionReconoiseD5 == 9)
            HEpositivedirectionReconoiseD5->SetXTitle("D for HE+ jeta = 25; depth = 5 \b");
          if (kcountHEpositivedirectionReconoiseD5 == 10)
            HEpositivedirectionReconoiseD5->SetXTitle("D for HE+ jeta = 26; depth = 5 \b");
          if (kcountHEpositivedirectionReconoiseD5 == 11)
            HEpositivedirectionReconoiseD5->SetXTitle("D for HE+ jeta = 27; depth = 5 \b");
          HEpositivedirectionReconoiseD5->Draw("Error");
          kcountHEpositivedirectionReconoiseD5++;
          if (kcountHEpositivedirectionReconoiseD5 > 11)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DreconoisePositiveDirectionhistD1PhiSymmetryDepth5HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEpositivedirectionReconoiseD5)
    delete h2CeffHEpositivedirectionReconoiseD5;
  //========================================================================================== 19
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=6
  //cout<<"      1D plot: D vs phi , different eta,  depth=6 *****" <<endl;
  c3x5->Clear();
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEpositivedirectionReconoiseD6 = 1;
  TH1F *h2CeffHEpositivedirectionReconoiseD6 = new TH1F("h2CeffHEpositivedirectionReconoiseD6", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionReconoiseD:
    if (jeta - 41 >= 15 && jeta - 41 <= 28) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=6
      for (int i = 5; i < 6; i++) {
        TH1F *HEpositivedirectionReconoiseD6 = (TH1F *)h2CeffHEpositivedirectionReconoiseD6->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = reconoisevariancehe[i][jeta][jphi];
          if (areconoisehe[i][jeta][jphi] > 0.) {
            HEpositivedirectionReconoiseD6->Fill(jphi, ccc1);
            ccctest = 1.;  //HEpositivedirectionReconoiseD6->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1919       kcountHEpositivedirectionReconoiseD6   =     "<<kcountHEpositivedirectionReconoiseD6  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEpositivedirectionReconoiseD6);
          HEpositivedirectionReconoiseD6->SetMarkerStyle(20);
          HEpositivedirectionReconoiseD6->SetMarkerSize(0.4);
          HEpositivedirectionReconoiseD6->GetYaxis()->SetLabelSize(0.04);
          HEpositivedirectionReconoiseD6->SetXTitle("HEpositivedirectionReconoiseD6 \b");
          HEpositivedirectionReconoiseD6->SetMarkerColor(2);
          HEpositivedirectionReconoiseD6->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEpositivedirectionReconoiseD6 == 1)
            HEpositivedirectionReconoiseD6->SetXTitle("D for HE+ jeta = 18; depth = 6 \b");
          if (kcountHEpositivedirectionReconoiseD6 == 2)
            HEpositivedirectionReconoiseD6->SetXTitle("D for HE+ jeta = 19; depth = 6 \b");
          if (kcountHEpositivedirectionReconoiseD6 == 3)
            HEpositivedirectionReconoiseD6->SetXTitle("D for HE+ jeta = 20; depth = 6 \b");
          if (kcountHEpositivedirectionReconoiseD6 == 4)
            HEpositivedirectionReconoiseD6->SetXTitle("D for HE+ jeta = 21; depth = 6 \b");
          if (kcountHEpositivedirectionReconoiseD6 == 5)
            HEpositivedirectionReconoiseD6->SetXTitle("D for HE+ jeta = 22; depth = 6 \b");
          if (kcountHEpositivedirectionReconoiseD6 == 6)
            HEpositivedirectionReconoiseD6->SetXTitle("D for HE+ jeta = 23; depth = 6 \b");
          if (kcountHEpositivedirectionReconoiseD6 == 7)
            HEpositivedirectionReconoiseD6->SetXTitle("D for HE+ jeta = 24; depth = 6 \b");
          if (kcountHEpositivedirectionReconoiseD6 == 8)
            HEpositivedirectionReconoiseD6->SetXTitle("D for HE+ jeta = 25; depth = 6 \b");
          if (kcountHEpositivedirectionReconoiseD6 == 9)
            HEpositivedirectionReconoiseD6->SetXTitle("D for HE+ jeta = 26; depth = 6 \b");
          if (kcountHEpositivedirectionReconoiseD6 == 10)
            HEpositivedirectionReconoiseD6->SetXTitle("D for HE+ jeta = 27; depth = 6 \b");
          HEpositivedirectionReconoiseD6->Draw("Error");
          kcountHEpositivedirectionReconoiseD6++;
          if (kcountHEpositivedirectionReconoiseD6 > 10)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DreconoisePositiveDirectionhistD1PhiSymmetryDepth6HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEpositivedirectionReconoiseD6)
    delete h2CeffHEpositivedirectionReconoiseD6;
  //========================================================================================== 20
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=7
  //cout<<"      1D plot: D vs phi , different eta,  depth=7 *****" <<endl;
  c3x5->Clear();
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEpositivedirectionReconoiseD7 = 1;
  TH1F *h2CeffHEpositivedirectionReconoiseD7 = new TH1F("h2CeffHEpositivedirectionReconoiseD7", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionReconoiseD:
    if (jeta - 41 >= 15 && jeta - 41 <= 28) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=7
      for (int i = 6; i < 7; i++) {
        TH1F *HEpositivedirectionReconoiseD7 = (TH1F *)h2CeffHEpositivedirectionReconoiseD7->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = reconoisevariancehe[i][jeta][jphi];
          if (areconoisehe[i][jeta][jphi] > 0.) {
            HEpositivedirectionReconoiseD7->Fill(jphi, ccc1);
            ccctest = 1.;  //HEpositivedirectionReconoiseD7->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest != 0.) {
          //cout<<"2020       kcountHEpositivedirectionReconoiseD7   =     "<<kcountHEpositivedirectionReconoiseD7  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEpositivedirectionReconoiseD7);
          HEpositivedirectionReconoiseD7->SetMarkerStyle(20);
          HEpositivedirectionReconoiseD7->SetMarkerSize(0.4);
          HEpositivedirectionReconoiseD7->GetYaxis()->SetLabelSize(0.04);
          HEpositivedirectionReconoiseD7->SetXTitle("HEpositivedirectionReconoiseD7 \b");
          HEpositivedirectionReconoiseD7->SetMarkerColor(2);
          HEpositivedirectionReconoiseD7->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEpositivedirectionReconoiseD7 == 1)
            HEpositivedirectionReconoiseD7->SetXTitle("D for HE+ jeta = 25; depth = 7 \b");
          if (kcountHEpositivedirectionReconoiseD7 == 2)
            HEpositivedirectionReconoiseD7->SetXTitle("D for HE+ jeta = 26; depth = 7 \b");
          if (kcountHEpositivedirectionReconoiseD7 == 3)
            HEpositivedirectionReconoiseD7->SetXTitle("D for HE+ jeta = 27; depth = 7 \b");
          HEpositivedirectionReconoiseD7->Draw("Error");
          kcountHEpositivedirectionReconoiseD7++;
          if (kcountHEpositivedirectionReconoiseD7 > 3)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DreconoisePositiveDirectionhistD1PhiSymmetryDepth7HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEpositivedirectionReconoiseD7)
    delete h2CeffHEpositivedirectionReconoiseD7;

  //========================================================================================== 22222214
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=1
  //cout<<"      1D plot: D vs phi , different eta,  depth=1 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEnegativedirectionReconoiseD1 = 1;
  TH1F *h2CeffHEnegativedirectionReconoiseD1 = new TH1F("h2CeffHEnegativedirectionReconoiseD1", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionReconoiseD:
    if (jeta - 41 >= -29 && jeta - 41 <= -16) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=1
      for (int i = 0; i < 1; i++) {
        TH1F *HEnegativedirectionReconoiseD1 = (TH1F *)h2CeffHEnegativedirectionReconoiseD1->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = reconoisevariancehe[i][jeta][jphi];
          if (areconoisehe[i][jeta][jphi] > 0.) {
            HEnegativedirectionReconoiseD1->Fill(jphi, ccc1);
            ccctest = 1.;  //HEnegativedirectionReconoiseD1->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1414       kcountHEnegativedirectionReconoiseD1   =     "<<kcountHEnegativedirectionReconoiseD1  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEnegativedirectionReconoiseD1);
          HEnegativedirectionReconoiseD1->SetMarkerStyle(20);
          HEnegativedirectionReconoiseD1->SetMarkerSize(0.4);
          HEnegativedirectionReconoiseD1->GetYaxis()->SetLabelSize(0.04);
          HEnegativedirectionReconoiseD1->SetXTitle("HEnegativedirectionReconoiseD1 \b");
          HEnegativedirectionReconoiseD1->SetMarkerColor(2);
          HEnegativedirectionReconoiseD1->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEnegativedirectionReconoiseD1 == 1)
            HEnegativedirectionReconoiseD1->SetXTitle("D for HE- jeta =-29; depth = 1 \b");
          if (kcountHEnegativedirectionReconoiseD1 == 2)
            HEnegativedirectionReconoiseD1->SetXTitle("D for HE- jeta =-28; depth = 1 \b");
          if (kcountHEnegativedirectionReconoiseD1 == 3)
            HEnegativedirectionReconoiseD1->SetXTitle("D for HE- jeta =-27; depth = 1 \b");
          if (kcountHEnegativedirectionReconoiseD1 == 4)
            HEnegativedirectionReconoiseD1->SetXTitle("D for HE- jeta =-26; depth = 1 \b");
          if (kcountHEnegativedirectionReconoiseD1 == 5)
            HEnegativedirectionReconoiseD1->SetXTitle("D for HE- jeta =-25; depth = 1 \b");
          if (kcountHEnegativedirectionReconoiseD1 == 6)
            HEnegativedirectionReconoiseD1->SetXTitle("D for HE- jeta =-24; depth = 1 \b");
          if (kcountHEnegativedirectionReconoiseD1 == 7)
            HEnegativedirectionReconoiseD1->SetXTitle("D for HE- jeta =-23; depth = 1 \b");
          if (kcountHEnegativedirectionReconoiseD1 == 8)
            HEnegativedirectionReconoiseD1->SetXTitle("D for HE- jeta =-22; depth = 1 \b");
          if (kcountHEnegativedirectionReconoiseD1 == 9)
            HEnegativedirectionReconoiseD1->SetXTitle("D for HE- jeta =-21; depth = 1 \b");
          if (kcountHEnegativedirectionReconoiseD1 == 10)
            HEnegativedirectionReconoiseD1->SetXTitle("D for HE- jeta =-20; depth = 1 \b");
          if (kcountHEnegativedirectionReconoiseD1 == 11)
            HEnegativedirectionReconoiseD1->SetXTitle("D for HE- jeta =-19; depth = 1 \b");
          if (kcountHEnegativedirectionReconoiseD1 == 12)
            HEnegativedirectionReconoiseD1->SetXTitle("D for HE- jeta =-18; depth = 1 \b");
          HEnegativedirectionReconoiseD1->Draw("Error");
          kcountHEnegativedirectionReconoiseD1++;
          if (kcountHEnegativedirectionReconoiseD1 > 12)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 < 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DreconoiseNegativeDirectionhistD1PhiSymmetryDepth1HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEnegativedirectionReconoiseD1)
    delete h2CeffHEnegativedirectionReconoiseD1;
  //========================================================================================== 22222215
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=2
  //cout<<"      1D plot: D vs phi , different eta,  depth=2 *****" <<endl;
  c3x5->Clear();
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEnegativedirectionReconoiseD2 = 1;
  TH1F *h2CeffHEnegativedirectionReconoiseD2 = new TH1F("h2CeffHEnegativedirectionReconoiseD2", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionReconoiseD:
    if (jeta - 41 >= -29 && jeta - 41 <= -16) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=2
      for (int i = 1; i < 2; i++) {
        TH1F *HEnegativedirectionReconoiseD2 = (TH1F *)h2CeffHEnegativedirectionReconoiseD2->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = reconoisevariancehe[i][jeta][jphi];
          if (areconoisehe[i][jeta][jphi] > 0.) {
            HEnegativedirectionReconoiseD2->Fill(jphi, ccc1);
            ccctest = 1.;  //HEnegativedirectionReconoiseD2->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1515       kcountHEnegativedirectionReconoiseD2   =     "<<kcountHEnegativedirectionReconoiseD2  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEnegativedirectionReconoiseD2);
          HEnegativedirectionReconoiseD2->SetMarkerStyle(20);
          HEnegativedirectionReconoiseD2->SetMarkerSize(0.4);
          HEnegativedirectionReconoiseD2->GetYaxis()->SetLabelSize(0.04);
          HEnegativedirectionReconoiseD2->SetXTitle("HEnegativedirectionReconoiseD2 \b");
          HEnegativedirectionReconoiseD2->SetMarkerColor(2);
          HEnegativedirectionReconoiseD2->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEnegativedirectionReconoiseD2 == 1)
            HEnegativedirectionReconoiseD2->SetXTitle("D for HE- jeta =-29; depth = 2 \b");
          if (kcountHEnegativedirectionReconoiseD2 == 2)
            HEnegativedirectionReconoiseD2->SetXTitle("D for HE- jeta =-28; depth = 2 \b");
          if (kcountHEnegativedirectionReconoiseD2 == 3)
            HEnegativedirectionReconoiseD2->SetXTitle("D for HE- jeta =-27; depth = 2 \b");
          if (kcountHEnegativedirectionReconoiseD2 == 4)
            HEnegativedirectionReconoiseD2->SetXTitle("D for HE- jeta =-26; depth = 2 \b");
          if (kcountHEnegativedirectionReconoiseD2 == 5)
            HEnegativedirectionReconoiseD2->SetXTitle("D for HE- jeta =-25; depth = 2 \b");
          if (kcountHEnegativedirectionReconoiseD2 == 6)
            HEnegativedirectionReconoiseD2->SetXTitle("D for HE- jeta =-24; depth = 2 \b");
          if (kcountHEnegativedirectionReconoiseD2 == 7)
            HEnegativedirectionReconoiseD2->SetXTitle("D for HE- jeta =-23; depth = 2 \b");
          if (kcountHEnegativedirectionReconoiseD2 == 8)
            HEnegativedirectionReconoiseD2->SetXTitle("D for HE- jeta =-22; depth = 2 \b");
          if (kcountHEnegativedirectionReconoiseD2 == 9)
            HEnegativedirectionReconoiseD2->SetXTitle("D for HE- jeta =-21; depth = 2 \b");
          if (kcountHEnegativedirectionReconoiseD2 == 10)
            HEnegativedirectionReconoiseD2->SetXTitle("D for HE- jeta =-20; depth = 2 \b");
          if (kcountHEnegativedirectionReconoiseD2 == 11)
            HEnegativedirectionReconoiseD2->SetXTitle("D for HE- jeta =-19; depth = 2 \b");
          if (kcountHEnegativedirectionReconoiseD2 == 12)
            HEnegativedirectionReconoiseD2->SetXTitle("D for HE- jeta =-18; depth = 2 \b");
          if (kcountHEnegativedirectionReconoiseD2 == 13)
            HEnegativedirectionReconoiseD2->SetXTitle("D for HE- jeta =-17; depth = 2 \b");
          HEnegativedirectionReconoiseD2->Draw("Error");
          kcountHEnegativedirectionReconoiseD2++;
          if (kcountHEnegativedirectionReconoiseD2 > 13)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 < 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DreconoiseNegativeDirectionhistD1PhiSymmetryDepth2HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEnegativedirectionReconoiseD2)
    delete h2CeffHEnegativedirectionReconoiseD2;
  //========================================================================================== 22222216
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=3
  //cout<<"      1D plot: D vs phi , different eta,  depth=3 *****" <<endl;
  c3x5->Clear();
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEnegativedirectionReconoiseD3 = 1;
  TH1F *h2CeffHEnegativedirectionReconoiseD3 = new TH1F("h2CeffHEnegativedirectionReconoiseD3", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionReconoiseD:
    if (jeta - 41 >= -29 && jeta - 41 <= -16) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=3
      for (int i = 2; i < 3; i++) {
        TH1F *HEnegativedirectionReconoiseD3 = (TH1F *)h2CeffHEnegativedirectionReconoiseD3->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = reconoisevariancehe[i][jeta][jphi];
          if (areconoisehe[i][jeta][jphi] > 0.) {
            HEnegativedirectionReconoiseD3->Fill(jphi, ccc1);
            ccctest = 1.;  //HEnegativedirectionReconoiseD3->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1616       kcountHEnegativedirectionReconoiseD3   =     "<<kcountHEnegativedirectionReconoiseD3  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEnegativedirectionReconoiseD3);
          HEnegativedirectionReconoiseD3->SetMarkerStyle(20);
          HEnegativedirectionReconoiseD3->SetMarkerSize(0.4);
          HEnegativedirectionReconoiseD3->GetYaxis()->SetLabelSize(0.04);
          HEnegativedirectionReconoiseD3->SetXTitle("HEnegativedirectionReconoiseD3 \b");
          HEnegativedirectionReconoiseD3->SetMarkerColor(2);
          HEnegativedirectionReconoiseD3->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEnegativedirectionReconoiseD3 == 1)
            HEnegativedirectionReconoiseD3->SetXTitle("D for HE- jeta =-29; depth = 3 \b");
          if (kcountHEnegativedirectionReconoiseD3 == 2)
            HEnegativedirectionReconoiseD3->SetXTitle("D for HE- jeta =-28; depth = 3 \b");
          if (kcountHEnegativedirectionReconoiseD3 == 3)
            HEnegativedirectionReconoiseD3->SetXTitle("D for HE- jeta =-27; depth = 3 \b");
          if (kcountHEnegativedirectionReconoiseD3 == 4)
            HEnegativedirectionReconoiseD3->SetXTitle("D for HE- jeta =-26; depth = 3 \b");
          if (kcountHEnegativedirectionReconoiseD3 == 5)
            HEnegativedirectionReconoiseD3->SetXTitle("D for HE- jeta =-25; depth = 3 \b");
          if (kcountHEnegativedirectionReconoiseD3 == 6)
            HEnegativedirectionReconoiseD3->SetXTitle("D for HE- jeta =-24; depth = 3 \b");
          if (kcountHEnegativedirectionReconoiseD3 == 7)
            HEnegativedirectionReconoiseD3->SetXTitle("D for HE- jeta =-23; depth = 3 \b");
          if (kcountHEnegativedirectionReconoiseD3 == 8)
            HEnegativedirectionReconoiseD3->SetXTitle("D for HE- jeta =-22; depth = 3 \b");
          if (kcountHEnegativedirectionReconoiseD3 == 9)
            HEnegativedirectionReconoiseD3->SetXTitle("D for HE- jeta =-21; depth = 3 \b");
          if (kcountHEnegativedirectionReconoiseD3 == 10)
            HEnegativedirectionReconoiseD3->SetXTitle("D for HE- jeta =-20; depth = 3 \b");
          if (kcountHEnegativedirectionReconoiseD3 == 11)
            HEnegativedirectionReconoiseD3->SetXTitle("D for HE- jeta =-19; depth = 3 \b");
          if (kcountHEnegativedirectionReconoiseD3 == 12)
            HEnegativedirectionReconoiseD3->SetXTitle("D for HE- jeta =-18; depth = 3 \b");
          if (kcountHEnegativedirectionReconoiseD3 == 13)
            HEnegativedirectionReconoiseD3->SetXTitle("D for HE- jeta =-17; depth = 3 \b");
          HEnegativedirectionReconoiseD3->Draw("Error");
          kcountHEnegativedirectionReconoiseD3++;
          if (kcountHEnegativedirectionReconoiseD3 > 13)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 < 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DreconoiseNegativeDirectionhistD1PhiSymmetryDepth3HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEnegativedirectionReconoiseD3)
    delete h2CeffHEnegativedirectionReconoiseD3;
  //========================================================================================== 22222217
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=4
  //cout<<"      1D plot: D vs phi , different eta,  depth=4 *****" <<endl;
  c3x5->Clear();
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEnegativedirectionReconoiseD4 = 1;
  TH1F *h2CeffHEnegativedirectionReconoiseD4 = new TH1F("h2CeffHEnegativedirectionReconoiseD4", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionReconoiseD:
    if (jeta - 41 >= -29 && jeta - 41 <= -16) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=4
      for (int i = 3; i < 4; i++) {
        TH1F *HEnegativedirectionReconoiseD4 = (TH1F *)h2CeffHEnegativedirectionReconoiseD4->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = reconoisevariancehe[i][jeta][jphi];
          if (areconoisehe[i][jeta][jphi] > 0.) {
            HEnegativedirectionReconoiseD4->Fill(jphi, ccc1);
            ccctest = 1.;  //HEnegativedirectionReconoiseD4->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1717       kcountHEnegativedirectionReconoiseD4   =     "<<kcountHEnegativedirectionReconoiseD4  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEnegativedirectionReconoiseD4);
          HEnegativedirectionReconoiseD4->SetMarkerStyle(20);
          HEnegativedirectionReconoiseD4->SetMarkerSize(0.4);
          HEnegativedirectionReconoiseD4->GetYaxis()->SetLabelSize(0.04);
          HEnegativedirectionReconoiseD4->SetXTitle("HEnegativedirectionReconoiseD4 \b");
          HEnegativedirectionReconoiseD4->SetMarkerColor(2);
          HEnegativedirectionReconoiseD4->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEnegativedirectionReconoiseD4 == 1)
            HEnegativedirectionReconoiseD4->SetXTitle("D for HE- jeta =-28; depth = 4 \b");
          if (kcountHEnegativedirectionReconoiseD4 == 2)
            HEnegativedirectionReconoiseD4->SetXTitle("D for HE- jeta =-27; depth = 4 \b");
          if (kcountHEnegativedirectionReconoiseD4 == 3)
            HEnegativedirectionReconoiseD4->SetXTitle("D for HE- jeta =-26; depth = 4 \b");
          if (kcountHEnegativedirectionReconoiseD4 == 4)
            HEnegativedirectionReconoiseD4->SetXTitle("D for HE- jeta =-25; depth = 4 \b");
          if (kcountHEnegativedirectionReconoiseD4 == 5)
            HEnegativedirectionReconoiseD4->SetXTitle("D for HE- jeta =-24; depth = 4 \b");
          if (kcountHEnegativedirectionReconoiseD4 == 6)
            HEnegativedirectionReconoiseD4->SetXTitle("D for HE- jeta =-23; depth = 4 \b");
          if (kcountHEnegativedirectionReconoiseD4 == 7)
            HEnegativedirectionReconoiseD4->SetXTitle("D for HE- jeta =-22; depth = 4 \b");
          if (kcountHEnegativedirectionReconoiseD4 == 8)
            HEnegativedirectionReconoiseD4->SetXTitle("D for HE- jeta =-21; depth = 4 \b");
          if (kcountHEnegativedirectionReconoiseD4 == 9)
            HEnegativedirectionReconoiseD4->SetXTitle("D for HE- jeta =-20; depth = 4 \b");
          if (kcountHEnegativedirectionReconoiseD4 == 10)
            HEnegativedirectionReconoiseD4->SetXTitle("D for HE- jeta =-19; depth = 4 \b");
          if (kcountHEnegativedirectionReconoiseD4 == 11)
            HEnegativedirectionReconoiseD4->SetXTitle("D for HE- jeta =-18; depth = 4 \b");
          if (kcountHEnegativedirectionReconoiseD4 == 12)
            HEnegativedirectionReconoiseD4->SetXTitle("D for HE- jeta =-16; depth = 4 \b");
          HEnegativedirectionReconoiseD4->Draw("Error");
          kcountHEnegativedirectionReconoiseD4++;
          if (kcountHEnegativedirectionReconoiseD4 > 12)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 < 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DreconoiseNegativeDirectionhistD1PhiSymmetryDepth4HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEnegativedirectionReconoiseD4)
    delete h2CeffHEnegativedirectionReconoiseD4;
  //========================================================================================== 22222218
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=5
  //cout<<"      1D plot: D vs phi , different eta,  depth=5 *****" <<endl;
  c3x5->Clear();
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEnegativedirectionReconoiseD5 = 1;
  TH1F *h2CeffHEnegativedirectionReconoiseD5 = new TH1F("h2CeffHEnegativedirectionReconoiseD5", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionReconoiseD:
    if (jeta - 41 >= -29 && jeta - 41 <= -16) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=5
      for (int i = 4; i < 5; i++) {
        TH1F *HEnegativedirectionReconoiseD5 = (TH1F *)h2CeffHEnegativedirectionReconoiseD5->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = reconoisevariancehe[i][jeta][jphi];
          if (areconoisehe[i][jeta][jphi] > 0.) {
            HEnegativedirectionReconoiseD5->Fill(jphi, ccc1);
            ccctest = 1.;  //HEnegativedirectionReconoiseD5->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1818       kcountHEnegativedirectionReconoiseD5   =     "<<kcountHEnegativedirectionReconoiseD5  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEnegativedirectionReconoiseD5);
          HEnegativedirectionReconoiseD5->SetMarkerStyle(20);
          HEnegativedirectionReconoiseD5->SetMarkerSize(0.4);
          HEnegativedirectionReconoiseD5->GetYaxis()->SetLabelSize(0.04);
          HEnegativedirectionReconoiseD5->SetXTitle("HEnegativedirectionReconoiseD5 \b");
          HEnegativedirectionReconoiseD5->SetMarkerColor(2);
          HEnegativedirectionReconoiseD5->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEnegativedirectionReconoiseD5 == 1)
            HEnegativedirectionReconoiseD5->SetXTitle("D for HE- jeta =-28; depth = 5 \b");
          if (kcountHEnegativedirectionReconoiseD5 == 2)
            HEnegativedirectionReconoiseD5->SetXTitle("D for HE- jeta =-27; depth = 5 \b");
          if (kcountHEnegativedirectionReconoiseD5 == 3)
            HEnegativedirectionReconoiseD5->SetXTitle("D for HE- jeta =-26; depth = 5 \b");
          if (kcountHEnegativedirectionReconoiseD5 == 4)
            HEnegativedirectionReconoiseD5->SetXTitle("D for HE- jeta =-25; depth = 5 \b");
          if (kcountHEnegativedirectionReconoiseD5 == 5)
            HEnegativedirectionReconoiseD5->SetXTitle("D for HE- jeta =-24; depth = 5 \b");
          if (kcountHEnegativedirectionReconoiseD5 == 6)
            HEnegativedirectionReconoiseD5->SetXTitle("D for HE- jeta =-23; depth = 5 \b");
          if (kcountHEnegativedirectionReconoiseD5 == 7)
            HEnegativedirectionReconoiseD5->SetXTitle("D for HE- jeta =-22; depth = 5 \b");
          if (kcountHEnegativedirectionReconoiseD5 == 8)
            HEnegativedirectionReconoiseD5->SetXTitle("D for HE- jeta =-21; depth = 5 \b");
          if (kcountHEnegativedirectionReconoiseD5 == 9)
            HEnegativedirectionReconoiseD5->SetXTitle("D for HE- jeta =-20; depth = 5 \b");
          if (kcountHEnegativedirectionReconoiseD5 == 10)
            HEnegativedirectionReconoiseD5->SetXTitle("D for HE- jeta =-19; depth = 5 \b");
          if (kcountHEnegativedirectionReconoiseD5 == 11)
            HEnegativedirectionReconoiseD5->SetXTitle("D for HE- jeta =-18; depth = 5 \b");
          HEnegativedirectionReconoiseD5->Draw("Error");
          kcountHEnegativedirectionReconoiseD5++;
          if (kcountHEnegativedirectionReconoiseD5 > 11)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 < 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DreconoiseNegativeDirectionhistD1PhiSymmetryDepth5HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEnegativedirectionReconoiseD5)
    delete h2CeffHEnegativedirectionReconoiseD5;
  //========================================================================================== 22222219
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=6
  //cout<<"      1D plot: D vs phi , different eta,  depth=6 *****" <<endl;
  c3x5->Clear();
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEnegativedirectionReconoiseD6 = 1;
  TH1F *h2CeffHEnegativedirectionReconoiseD6 = new TH1F("h2CeffHEnegativedirectionReconoiseD6", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionReconoiseD:
    if (jeta - 41 >= -29 && jeta - 41 <= -16) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=6
      for (int i = 5; i < 6; i++) {
        TH1F *HEnegativedirectionReconoiseD6 = (TH1F *)h2CeffHEnegativedirectionReconoiseD6->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = reconoisevariancehe[i][jeta][jphi];
          if (areconoisehe[i][jeta][jphi] > 0.) {
            HEnegativedirectionReconoiseD6->Fill(jphi, ccc1);
            ccctest = 1.;  //HEnegativedirectionReconoiseD6->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1919       kcountHEnegativedirectionReconoiseD6   =     "<<kcountHEnegativedirectionReconoiseD6  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEnegativedirectionReconoiseD6);
          HEnegativedirectionReconoiseD6->SetMarkerStyle(20);
          HEnegativedirectionReconoiseD6->SetMarkerSize(0.4);
          HEnegativedirectionReconoiseD6->GetYaxis()->SetLabelSize(0.04);
          HEnegativedirectionReconoiseD6->SetXTitle("HEnegativedirectionReconoiseD6 \b");
          HEnegativedirectionReconoiseD6->SetMarkerColor(2);
          HEnegativedirectionReconoiseD6->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEnegativedirectionReconoiseD6 == 1)
            HEnegativedirectionReconoiseD6->SetXTitle("D for HE- jeta =-28; depth = 6 \b");
          if (kcountHEnegativedirectionReconoiseD6 == 2)
            HEnegativedirectionReconoiseD6->SetXTitle("D for HE- jeta =-27; depth = 6 \b");
          if (kcountHEnegativedirectionReconoiseD6 == 3)
            HEnegativedirectionReconoiseD6->SetXTitle("D for HE- jeta =-26; depth = 6 \b");
          if (kcountHEnegativedirectionReconoiseD6 == 4)
            HEnegativedirectionReconoiseD6->SetXTitle("D for HE- jeta =-25; depth = 6 \b");
          if (kcountHEnegativedirectionReconoiseD6 == 5)
            HEnegativedirectionReconoiseD6->SetXTitle("D for HE- jeta =-24; depth = 6 \b");
          if (kcountHEnegativedirectionReconoiseD6 == 6)
            HEnegativedirectionReconoiseD6->SetXTitle("D for HE- jeta =-23; depth = 6 \b");
          if (kcountHEnegativedirectionReconoiseD6 == 7)
            HEnegativedirectionReconoiseD6->SetXTitle("D for HE- jeta =-22; depth = 6 \b");
          if (kcountHEnegativedirectionReconoiseD6 == 8)
            HEnegativedirectionReconoiseD6->SetXTitle("D for HE- jeta =-21; depth = 6 \b");
          if (kcountHEnegativedirectionReconoiseD6 == 9)
            HEnegativedirectionReconoiseD6->SetXTitle("D for HE- jeta =-20; depth = 6 \b");
          if (kcountHEnegativedirectionReconoiseD6 == 10)
            HEnegativedirectionReconoiseD6->SetXTitle("D for HE- jeta =-19; depth = 6 \b");
          HEnegativedirectionReconoiseD6->Draw("Error");
          kcountHEnegativedirectionReconoiseD6++;
          if (kcountHEnegativedirectionReconoiseD6 > 10)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 < 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DreconoiseNegativeDirectionhistD1PhiSymmetryDepth6HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEnegativedirectionReconoiseD6)
    delete h2CeffHEnegativedirectionReconoiseD6;
  //========================================================================================== 22222220
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=7
  //cout<<"      1D plot: D vs phi , different eta,  depth=7 *****" <<endl;
  c3x5->Clear();
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHEnegativedirectionReconoiseD7 = 1;
  TH1F *h2CeffHEnegativedirectionReconoiseD7 = new TH1F("h2CeffHEnegativedirectionReconoiseD7", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionReconoiseD:
    if (jeta - 41 >= -29 && jeta - 41 <= -16) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=7
      for (int i = 6; i < 7; i++) {
        TH1F *HEnegativedirectionReconoiseD7 = (TH1F *)h2CeffHEnegativedirectionReconoiseD7->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = reconoisevariancehe[i][jeta][jphi];
          if (areconoisehe[i][jeta][jphi] > 0.) {
            HEnegativedirectionReconoiseD7->Fill(jphi, ccc1);
            ccctest = 1.;  //HEnegativedirectionReconoiseD7->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest != 0.) {
          //cout<<"2020       kcountHEnegativedirectionReconoiseD7   =     "<<kcountHEnegativedirectionReconoiseD7  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHEnegativedirectionReconoiseD7);
          HEnegativedirectionReconoiseD7->SetMarkerStyle(20);
          HEnegativedirectionReconoiseD7->SetMarkerSize(0.4);
          HEnegativedirectionReconoiseD7->GetYaxis()->SetLabelSize(0.04);
          HEnegativedirectionReconoiseD7->SetXTitle("HEnegativedirectionReconoiseD7 \b");
          HEnegativedirectionReconoiseD7->SetMarkerColor(2);
          HEnegativedirectionReconoiseD7->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHEnegativedirectionReconoiseD7 == 1)
            HEnegativedirectionReconoiseD7->SetXTitle("D for HE- jeta =-28; depth = 7 \b");
          if (kcountHEnegativedirectionReconoiseD7 == 2)
            HEnegativedirectionReconoiseD7->SetXTitle("D for HE- jeta =-27; depth = 7 \b");
          if (kcountHEnegativedirectionReconoiseD7 == 3)
            HEnegativedirectionReconoiseD7->SetXTitle("D for HE- jeta =-26; depth = 7 \b");
          HEnegativedirectionReconoiseD7->Draw("Error");
          kcountHEnegativedirectionReconoiseD7++;
          if (kcountHEnegativedirectionReconoiseD7 > 3)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 < 0)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DreconoiseNegativeDirectionhistD1PhiSymmetryDepth7HE.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHEnegativedirectionReconoiseD7)
    delete h2CeffHEnegativedirectionReconoiseD7;
  //=====================================================================       END of Reconoise HE for phi-symmetry
  //=====================================================================       END of Reconoise HE for phi-symmetry
  //=====================================================================       END of Reconoise HE for phi-symmetry
  ////////////////////////////////////////////////////////////////////////////////////////////////////         Phi-symmetry for Calibration Group:    Reconoise HF
  ////////////////////////////////////////////////////////////////////////////////////////////////////         Phi-symmetry for Calibration Group:    Reconoise HF
  ////////////////////////////////////////////////////////////////////////////////////////////////////         Phi-symmetry for Calibration Group:    Reconoise HF
  //  int k_max[5]={0,4,7,4,4}; // maximum depth for each subdet
  //ndepth = k_max[5];
  ndepth = 2;
  double areconoiseHF[ndepth][njeta][njphi];
  double breconoiseHF[ndepth][njeta][njphi];
  double reconoisevarianceHF[ndepth][njeta][njphi];

  TH2F *recNoiseEnergy1HF1 = (TH2F *)dir->FindObjectAny("h_recNoiseEnergy1_HF1");
  TH2F *recNoiseEnergy0HF1 = (TH2F *)dir->FindObjectAny("h_recNoiseEnergy0_HF1");
  TH2F *recNoiseEnergyHF1 = (TH2F *)recNoiseEnergy1HF1->Clone("recNoiseEnergyHF1");
  recNoiseEnergyHF1->Divide(recNoiseEnergy1HF1, recNoiseEnergy0HF1, 1, 1, "B");
  TH2F *recNoiseEnergy1HF2 = (TH2F *)dir->FindObjectAny("h_recNoiseEnergy1_HF2");
  TH2F *recNoiseEnergy0HF2 = (TH2F *)dir->FindObjectAny("h_recNoiseEnergy0_HF2");
  TH2F *recNoiseEnergyHF2 = (TH2F *)recNoiseEnergy1HF2->Clone("recNoiseEnergyHF2");
  recNoiseEnergyHF2->Divide(recNoiseEnergy1HF2, recNoiseEnergy0HF2, 1, 1, "B");
  //====================================================================== PHI normalization & put R into massive areconoiseHF
  for (int jeta = 0; jeta < njeta; jeta++) {
    if ((jeta - 41 >= -41 && jeta - 41 <= -29) || (jeta - 41 >= 28 && jeta - 41 <= 40)) {
      //preparation for PHI normalization:
      double sumreconoiseHF0 = 0;
      int nsumreconoiseHF0 = 0;
      double sumreconoiseHF1 = 0;
      int nsumreconoiseHF1 = 0;
      for (int jphi = 0; jphi < njphi; jphi++) {
        areconoiseHF[0][jeta][jphi] = recNoiseEnergyHF1->GetBinContent(jeta + 1, jphi + 1);
        areconoiseHF[1][jeta][jphi] = recNoiseEnergyHF2->GetBinContent(jeta + 1, jphi + 1);
        breconoiseHF[0][jeta][jphi] = recNoiseEnergyHF1->GetBinContent(jeta + 1, jphi + 1);
        breconoiseHF[1][jeta][jphi] = recNoiseEnergyHF2->GetBinContent(jeta + 1, jphi + 1);
        sumreconoiseHF0 += areconoiseHF[0][jeta][jphi];
        ++nsumreconoiseHF0;
        sumreconoiseHF1 += areconoiseHF[1][jeta][jphi];
        ++nsumreconoiseHF1;
      }  // phi

      // PHI normalization for DIF:
      for (int jphi = 0; jphi < njphi; jphi++) {
        if (sumreconoiseHF0 != 0.)
          breconoiseHF[0][jeta][jphi] -= (sumreconoiseHF0 / nsumreconoiseHF0);
        if (sumreconoiseHF1 != 0.)
          breconoiseHF[1][jeta][jphi] -= (sumreconoiseHF1 / nsumreconoiseHF1);
      }  // phi

      // PHI normalization for R:
      for (int jphi = 0; jphi < njphi; jphi++) {
        if (sumreconoiseHF0 != 0.)
          areconoiseHF[0][jeta][jphi] /= (sumreconoiseHF0 / nsumreconoiseHF0);
        if (sumreconoiseHF1 != 0.)
          areconoiseHF[1][jeta][jphi] /= (sumreconoiseHF1 / nsumreconoiseHF1);
      }  // phi

    }  // jeta-41
  }    //eta
  /////////////////////////////////////////

  //                                   RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR:   Reconoise HF
  //------------------------  2D-eta/phi-plot: R, averaged over depthfs
  //======================================================================
  //======================================================================
  // cout<<"      R2D-eta/phi-plot: R, averaged over depthfs *****" <<endl;
  c2x1->Clear();
  /////////////////
  c2x1->Divide(2, 1);
  c2x1->cd(1);
  TH2F *GefzRreconoiseHF42D = new TH2F("GefzRreconoiseHF42D", "", neta, -41., 41., nphi, 0., 72.);
  TH2F *GefzRreconoiseHF42D0 = new TH2F("GefzRreconoiseHF42D0", "", neta, -41., 41., nphi, 0., 72.);
  TH2F *GefzRreconoiseHF42DF = (TH2F *)GefzRreconoiseHF42D0->Clone("GefzRreconoiseHF42DF");
  for (int i = 0; i < ndepth; i++) {
    for (int jeta = 0; jeta < neta; jeta++) {
      if ((jeta - 41 >= -41 && jeta - 41 <= -29) || (jeta - 41 >= 28 && jeta - 41 <= 40)) {
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = areconoiseHF[i][jeta][jphi];
          int k2plot = jeta - 41;
          int kkk = k2plot;  //if(k2plot >0 ) kkk=k2plot+1; //-41 +41 !=0
          if (ccc1 != 0.) {
            GefzRreconoiseHF42D->Fill(kkk, jphi, ccc1);
            GefzRreconoiseHF42D0->Fill(kkk, jphi, 1.);
          }
        }
      }
    }
  }
  GefzRreconoiseHF42DF->Divide(GefzRreconoiseHF42D, GefzRreconoiseHF42D0, 1, 1, "B");  // average A
  gPad->SetGridy();
  gPad->SetGridx();  //      gPad->SetLogz();
  GefzRreconoiseHF42DF->SetXTitle("<R>_depth       #eta  \b");
  GefzRreconoiseHF42DF->SetYTitle("      #phi \b");
  GefzRreconoiseHF42DF->Draw("COLZ");

  c2x1->cd(2);
  TH1F *energyhitNoise_HF = (TH1F *)dir->FindObjectAny("h_energyhitNoise_HF");
  energyhitNoise_HF->SetMarkerStyle(20);
  energyhitNoise_HF->SetMarkerSize(0.4);
  energyhitNoise_HF->GetYaxis()->SetLabelSize(0.04);
  energyhitNoise_HF->SetXTitle("energyhitNoise_HF \b");
  energyhitNoise_HF->SetMarkerColor(2);
  energyhitNoise_HF->SetLineColor(0);
  gPad->SetGridy();
  gPad->SetGridx();
  energyhitNoise_HF->Draw("Error");

  /////////////////
  c2x1->Update();
  c2x1->Print("RreconoiseGeneralD2PhiSymmetryHF.png");
  c2x1->Clear();
  // clean-up
  if (GefzRreconoiseHF42D)
    delete GefzRreconoiseHF42D;
  if (GefzRreconoiseHF42D0)
    delete GefzRreconoiseHF42D0;
  if (GefzRreconoiseHF42DF)
    delete GefzRreconoiseHF42DF;
  //====================================================================== 1D plot: R vs phi , averaged over depthfs & eta
  //======================================================================
  //cout<<"      1D plot: R vs phi , averaged over depthfs & eta *****" <<endl;
  c1x1->Clear();
  /////////////////
  c1x1->Divide(1, 1);
  c1x1->cd(1);
  TH1F *GefzRreconoiseHF41D = new TH1F("GefzRreconoiseHF41D", "", nphi, 0., 72.);
  TH1F *GefzRreconoiseHF41D0 = new TH1F("GefzRreconoiseHF41D0", "", nphi, 0., 72.);
  TH1F *GefzRreconoiseHF41DF = (TH1F *)GefzRreconoiseHF41D0->Clone("GefzRreconoiseHF41DF");
  for (int jphi = 0; jphi < nphi; jphi++) {
    for (int jeta = 0; jeta < neta; jeta++) {
      if ((jeta - 41 >= -41 && jeta - 41 <= -29) || (jeta - 41 >= 28 && jeta - 41 <= 40)) {
        for (int i = 0; i < ndepth; i++) {
          double ccc1 = areconoiseHF[i][jeta][jphi];
          if (ccc1 != 0.) {
            GefzRreconoiseHF41D->Fill(jphi, ccc1);
            GefzRreconoiseHF41D0->Fill(jphi, 1.);
          }
        }
      }
    }
  }
  GefzRreconoiseHF41DF->Divide(GefzRreconoiseHF41D, GefzRreconoiseHF41D0, 1, 1, "B");  // R averaged over depthfs & eta
  GefzRreconoiseHF41D0->Sumw2();
  //    for (int jphi=1;jphi<73;jphi++) {GefzRreconoiseHF41DF->SetBinError(jphi,0.01);}
  gPad->SetGridy();
  gPad->SetGridx();  //      gPad->SetLogz();
  GefzRreconoiseHF41DF->SetMarkerStyle(20);
  GefzRreconoiseHF41DF->SetMarkerSize(1.4);
  GefzRreconoiseHF41DF->GetZaxis()->SetLabelSize(0.08);
  GefzRreconoiseHF41DF->SetXTitle("#phi  \b");
  GefzRreconoiseHF41DF->SetYTitle("  <R> \b");
  GefzRreconoiseHF41DF->SetZTitle("<R>_PHI  - AllDepthfs \b");
  GefzRreconoiseHF41DF->SetMarkerColor(4);
  GefzRreconoiseHF41DF->SetLineColor(
      4);  //  GefzRreconoiseHF41DF->SetMinimum(0.8);     //      GefzRreconoiseHF41DF->SetMaximum(1.000);
  GefzRreconoiseHF41DF->Draw("Error");
  /////////////////
  c1x1->Update();
  c1x1->Print("RreconoiseGeneralD1PhiSymmetryHF.png");
  c1x1->Clear();
  // clean-up
  if (GefzRreconoiseHF41D)
    delete GefzRreconoiseHF41D;
  if (GefzRreconoiseHF41D0)
    delete GefzRreconoiseHF41D0;
  if (GefzRreconoiseHF41DF)
    delete GefzRreconoiseHF41DF;
  //========================================================================================== 4
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=1
  //cout<<"      1D plot: R vs phi , different eta,  depth=1 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHFpositivedirectionReconoise1 = 1;
  TH1F *h2CeffHFpositivedirectionReconoise1 = new TH1F("h2CeffHFpositivedirectionReconoise1", "", nphi, 0., 72.);
  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionReconoise:
    if (jeta - 41 >= 28 && jeta - 41 <= 40) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=1
      for (int i = 0; i < 1; i++) {
        TH1F *HFpositivedirectionReconoise1 = (TH1F *)h2CeffHFpositivedirectionReconoise1->Clone("twod1");
        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = areconoiseHF[i][jeta][jphi];
          if (ccc1 != 0.) {
            HFpositivedirectionReconoise1->Fill(jphi, ccc1);
            ccctest = 1.;  //HFpositivedirectionReconoise1->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //	  cout<<"444        kcountHFpositivedirectionReconoise1   =     "<<kcountHFpositivedirectionReconoise1  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHFpositivedirectionReconoise1);
          HFpositivedirectionReconoise1->SetMarkerStyle(20);
          HFpositivedirectionReconoise1->SetMarkerSize(0.4);
          HFpositivedirectionReconoise1->GetYaxis()->SetLabelSize(0.04);
          HFpositivedirectionReconoise1->SetXTitle("HFpositivedirectionReconoise1 \b");
          HFpositivedirectionReconoise1->SetMarkerColor(2);
          HFpositivedirectionReconoise1->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHFpositivedirectionReconoise1 == 1)
            HFpositivedirectionReconoise1->SetXTitle("R for HF+ jeta = 28; depth = 1 \b");
          if (kcountHFpositivedirectionReconoise1 == 2)
            HFpositivedirectionReconoise1->SetXTitle("R for HF+ jeta = 29; depth = 1 \b");
          if (kcountHFpositivedirectionReconoise1 == 3)
            HFpositivedirectionReconoise1->SetXTitle("R for HF+ jeta = 30; depth = 1 \b");
          if (kcountHFpositivedirectionReconoise1 == 4)
            HFpositivedirectionReconoise1->SetXTitle("R for HF+ jeta = 31; depth = 1 \b");
          if (kcountHFpositivedirectionReconoise1 == 5)
            HFpositivedirectionReconoise1->SetXTitle("R for HF+ jeta = 32; depth = 1 \b");
          if (kcountHFpositivedirectionReconoise1 == 6)
            HFpositivedirectionReconoise1->SetXTitle("R for HF+ jeta = 33; depth = 1 \b");
          if (kcountHFpositivedirectionReconoise1 == 7)
            HFpositivedirectionReconoise1->SetXTitle("R for HF+ jeta = 34; depth = 1 \b");
          if (kcountHFpositivedirectionReconoise1 == 8)
            HFpositivedirectionReconoise1->SetXTitle("R for HF+ jeta = 35; depth = 1 \b");
          if (kcountHFpositivedirectionReconoise1 == 9)
            HFpositivedirectionReconoise1->SetXTitle("R for HF+ jeta = 36; depth = 1 \b");
          if (kcountHFpositivedirectionReconoise1 == 10)
            HFpositivedirectionReconoise1->SetXTitle("R for HF+ jeta = 37; depth = 1 \b");
          if (kcountHFpositivedirectionReconoise1 == 11)
            HFpositivedirectionReconoise1->SetXTitle("R for HF+ jeta = 38; depth = 1 \b");
          if (kcountHFpositivedirectionReconoise1 == 12)
            HFpositivedirectionReconoise1->SetXTitle("R for HF+ jeta = 39; depth = 1 \b");
          if (kcountHFpositivedirectionReconoise1 == 13)
            HFpositivedirectionReconoise1->SetXTitle("R for HF+ jeta = 40; depth = 1 \b");
          HFpositivedirectionReconoise1->Draw("Error");
          kcountHFpositivedirectionReconoise1++;
          if (kcountHFpositivedirectionReconoise1 > 13)
            break;  //
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 28 && jeta-41 <= 40
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RreconoisePositiveDirectionhistD1PhiSymmetryDepth1HF.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHFpositivedirectionReconoise1)
    delete h2CeffHFpositivedirectionReconoise1;

  //========================================================================================== 5
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=2
  //  cout<<"      1D plot: R vs phi , different eta,  depth=2 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHFpositivedirectionReconoise2 = 1;
  TH1F *h2CeffHFpositivedirectionReconoise2 = new TH1F("h2CeffHFpositivedirectionReconoise2", "", nphi, 0., 72.);
  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionReconoise:
    if (jeta - 41 >= 28 && jeta - 41 <= 40) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=2
      for (int i = 1; i < 2; i++) {
        TH1F *HFpositivedirectionReconoise2 = (TH1F *)h2CeffHFpositivedirectionReconoise2->Clone("twod1");
        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = areconoiseHF[i][jeta][jphi];
          if (ccc1 != 0.) {
            HFpositivedirectionReconoise2->Fill(jphi, ccc1);
            ccctest = 1.;  //HFpositivedirectionReconoise2->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"555        kcountHFpositivedirectionReconoise2   =     "<<kcountHFpositivedirectionReconoise2  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHFpositivedirectionReconoise2);
          HFpositivedirectionReconoise2->SetMarkerStyle(20);
          HFpositivedirectionReconoise2->SetMarkerSize(0.4);
          HFpositivedirectionReconoise2->GetYaxis()->SetLabelSize(0.04);
          HFpositivedirectionReconoise2->SetXTitle("HFpositivedirectionReconoise2 \b");
          HFpositivedirectionReconoise2->SetMarkerColor(2);
          HFpositivedirectionReconoise2->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHFpositivedirectionReconoise2 == 1)
            HFpositivedirectionReconoise2->SetXTitle("R for HF+ jeta = 28; depth = 2 \b");
          if (kcountHFpositivedirectionReconoise2 == 2)
            HFpositivedirectionReconoise2->SetXTitle("R for HF+ jeta = 29; depth = 2 \b");
          if (kcountHFpositivedirectionReconoise2 == 3)
            HFpositivedirectionReconoise2->SetXTitle("R for HF+ jeta = 30; depth = 2 \b");
          if (kcountHFpositivedirectionReconoise2 == 4)
            HFpositivedirectionReconoise2->SetXTitle("R for HF+ jeta = 31; depth = 2 \b");
          if (kcountHFpositivedirectionReconoise2 == 5)
            HFpositivedirectionReconoise2->SetXTitle("R for HF+ jeta = 32; depth = 2 \b");
          if (kcountHFpositivedirectionReconoise2 == 6)
            HFpositivedirectionReconoise2->SetXTitle("R for HF+ jeta = 33; depth = 2 \b");
          if (kcountHFpositivedirectionReconoise2 == 7)
            HFpositivedirectionReconoise2->SetXTitle("R for HF+ jeta = 34; depth = 2 \b");
          if (kcountHFpositivedirectionReconoise2 == 8)
            HFpositivedirectionReconoise2->SetXTitle("R for HF+ jeta = 35; depth = 2 \b");
          if (kcountHFpositivedirectionReconoise2 == 9)
            HFpositivedirectionReconoise2->SetXTitle("R for HF+ jeta = 36; depth = 2 \b");
          if (kcountHFpositivedirectionReconoise2 == 10)
            HFpositivedirectionReconoise2->SetXTitle("R for HF+ jeta = 37; depth = 2 \b");
          if (kcountHFpositivedirectionReconoise2 == 11)
            HFpositivedirectionReconoise2->SetXTitle("R for HF+ jeta = 38; depth = 2 \b");
          if (kcountHFpositivedirectionReconoise2 == 12)
            HFpositivedirectionReconoise2->SetXTitle("R for HF+ jeta = 39; depth = 2 \b");
          if (kcountHFpositivedirectionReconoise2 == 13)
            HFpositivedirectionReconoise2->SetXTitle("R for HF+ jeta = 40; depth = 2 \b");
          HFpositivedirectionReconoise2->Draw("Error");
          kcountHFpositivedirectionReconoise2++;
          if (kcountHFpositivedirectionReconoise2 > 13)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 28 && jeta-41 <= 40)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RreconoisePositiveDirectionhistD1PhiSymmetryDepth2HF.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHFpositivedirectionReconoise2)
    delete h2CeffHFpositivedirectionReconoise2;

  //========================================================================================== 1111114
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=1
  //cout<<"      1D plot: R vs phi , different eta,  depth=1 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHFnegativedirectionReconoise1 = 1;
  TH1F *h2CeffHFnegativedirectionReconoise1 = new TH1F("h2CeffHFnegativedirectionReconoise1", "", nphi, 0., 72.);
  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionReconoise:
    if (jeta - 41 >= -41 && jeta - 41 <= -29) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=1
      for (int i = 0; i < 1; i++) {
        TH1F *HFnegativedirectionReconoise1 = (TH1F *)h2CeffHFnegativedirectionReconoise1->Clone("twod1");
        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = areconoiseHF[i][jeta][jphi];
          if (ccc1 != 0.) {
            HFnegativedirectionReconoise1->Fill(jphi, ccc1);
            ccctest = 1.;  //HFnegativedirectionReconoise1->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //	  cout<<"444        kcountHFnegativedirectionReconoise1   =     "<<kcountHFnegativedirectionReconoise1  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHFnegativedirectionReconoise1);
          HFnegativedirectionReconoise1->SetMarkerStyle(20);
          HFnegativedirectionReconoise1->SetMarkerSize(0.4);
          HFnegativedirectionReconoise1->GetYaxis()->SetLabelSize(0.04);
          HFnegativedirectionReconoise1->SetXTitle("HFnegativedirectionReconoise1 \b");
          HFnegativedirectionReconoise1->SetMarkerColor(2);
          HFnegativedirectionReconoise1->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHFnegativedirectionReconoise1 == 1)
            HFnegativedirectionReconoise1->SetXTitle("R for HF- jeta =-41; depth = 1 \b");
          if (kcountHFnegativedirectionReconoise1 == 2)
            HFnegativedirectionReconoise1->SetXTitle("R for HF- jeta =-40; depth = 1 \b");
          if (kcountHFnegativedirectionReconoise1 == 3)
            HFnegativedirectionReconoise1->SetXTitle("R for HF- jeta =-39; depth = 1 \b");
          if (kcountHFnegativedirectionReconoise1 == 4)
            HFnegativedirectionReconoise1->SetXTitle("R for HF- jeta =-38; depth = 1 \b");
          if (kcountHFnegativedirectionReconoise1 == 5)
            HFnegativedirectionReconoise1->SetXTitle("R for HF- jeta =-37; depth = 1 \b");
          if (kcountHFnegativedirectionReconoise1 == 6)
            HFnegativedirectionReconoise1->SetXTitle("R for HF- jeta =-36; depth = 1 \b");
          if (kcountHFnegativedirectionReconoise1 == 7)
            HFnegativedirectionReconoise1->SetXTitle("R for HF- jeta =-35; depth = 1 \b");
          if (kcountHFnegativedirectionReconoise1 == 8)
            HFnegativedirectionReconoise1->SetXTitle("R for HF- jeta =-34; depth = 1 \b");
          if (kcountHFnegativedirectionReconoise1 == 9)
            HFnegativedirectionReconoise1->SetXTitle("R for HF- jeta =-33; depth = 1 \b");
          if (kcountHFnegativedirectionReconoise1 == 10)
            HFnegativedirectionReconoise1->SetXTitle("R for HF- jeta =-32; depth = 1 \b");
          if (kcountHFnegativedirectionReconoise1 == 11)
            HFnegativedirectionReconoise1->SetXTitle("R for HF- jeta =-31; depth = 1 \b");
          if (kcountHFnegativedirectionReconoise1 == 12)
            HFnegativedirectionReconoise1->SetXTitle("R for HF- jeta =-30; depth = 1 \b");
          if (kcountHFnegativedirectionReconoise1 == 13)
            HFnegativedirectionReconoise1->SetXTitle("R for HF- jeta =-29; depth = 1 \b");
          HFnegativedirectionReconoise1->Draw("Error");
          kcountHFnegativedirectionReconoise1++;
          if (kcountHFnegativedirectionReconoise1 > 13)
            break;  //
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= -41 && jeta-41 <= -29)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RreconoiseNegativeDirectionhistD1PhiSymmetryDepth1HF.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHFnegativedirectionReconoise1)
    delete h2CeffHFnegativedirectionReconoise1;

  //========================================================================================== 1111115
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=2
  //  cout<<"      1D plot: R vs phi , different eta,  depth=2 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHFnegativedirectionReconoise2 = 1;
  TH1F *h2CeffHFnegativedirectionReconoise2 = new TH1F("h2CeffHFnegativedirectionReconoise2", "", nphi, 0., 72.);
  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionReconoise:
    if (jeta - 41 >= -41 && jeta - 41 <= -29) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=2
      for (int i = 1; i < 2; i++) {
        TH1F *HFnegativedirectionReconoise2 = (TH1F *)h2CeffHFnegativedirectionReconoise2->Clone("twod1");
        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = areconoiseHF[i][jeta][jphi];
          if (ccc1 != 0.) {
            HFnegativedirectionReconoise2->Fill(jphi, ccc1);
            ccctest = 1.;  //HFnegativedirectionReconoise2->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"555        kcountHFnegativedirectionReconoise2   =     "<<kcountHFnegativedirectionReconoise2  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHFnegativedirectionReconoise2);
          HFnegativedirectionReconoise2->SetMarkerStyle(20);
          HFnegativedirectionReconoise2->SetMarkerSize(0.4);
          HFnegativedirectionReconoise2->GetYaxis()->SetLabelSize(0.04);
          HFnegativedirectionReconoise2->SetXTitle("HFnegativedirectionReconoise2 \b");
          HFnegativedirectionReconoise2->SetMarkerColor(2);
          HFnegativedirectionReconoise2->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHFnegativedirectionReconoise2 == 1)
            HFnegativedirectionReconoise2->SetXTitle("R for HF- jeta =-41; depth = 2 \b");
          if (kcountHFnegativedirectionReconoise2 == 2)
            HFnegativedirectionReconoise2->SetXTitle("R for HF- jeta =-40; depth = 2 \b");
          if (kcountHFnegativedirectionReconoise2 == 3)
            HFnegativedirectionReconoise2->SetXTitle("R for HF- jeta =-39; depth = 2 \b");
          if (kcountHFnegativedirectionReconoise2 == 4)
            HFnegativedirectionReconoise2->SetXTitle("R for HF- jeta =-38; depth = 2 \b");
          if (kcountHFnegativedirectionReconoise2 == 5)
            HFnegativedirectionReconoise2->SetXTitle("R for HF- jeta =-37; depth = 2 \b");
          if (kcountHFnegativedirectionReconoise2 == 6)
            HFnegativedirectionReconoise2->SetXTitle("R for HF- jeta =-36; depth = 2 \b");
          if (kcountHFnegativedirectionReconoise2 == 7)
            HFnegativedirectionReconoise2->SetXTitle("R for HF- jeta =-35; depth = 2 \b");
          if (kcountHFnegativedirectionReconoise2 == 8)
            HFnegativedirectionReconoise2->SetXTitle("R for HF- jeta =-34; depth = 2 \b");
          if (kcountHFnegativedirectionReconoise2 == 9)
            HFnegativedirectionReconoise2->SetXTitle("R for HF- jeta =-33; depth = 2 \b");
          if (kcountHFnegativedirectionReconoise2 == 10)
            HFnegativedirectionReconoise2->SetXTitle("R for HF- jeta =-32; depth = 2 \b");
          if (kcountHFnegativedirectionReconoise2 == 11)
            HFnegativedirectionReconoise2->SetXTitle("R for HF- jeta =-31; depth = 2 \b");
          if (kcountHFnegativedirectionReconoise2 == 12)
            HFnegativedirectionReconoise2->SetXTitle("R for HF- jeta =-30; depth = 2 \b");
          if (kcountHFnegativedirectionReconoise2 == 13)
            HFnegativedirectionReconoise2->SetXTitle("R for HF- jeta =-20; depth = 2 \b");
          HFnegativedirectionReconoise2->Draw("Error");
          kcountHFnegativedirectionReconoise2++;
          if (kcountHFnegativedirectionReconoise2 > 13)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= -41 && jeta-41 <= -29)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("RreconoiseNegativeDirectionhistD1PhiSymmetryDepth2HF.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHFnegativedirectionReconoise2)
    delete h2CeffHFnegativedirectionReconoise2;

  //======================================================================================================================
  //                                   DIFDIFDIFDIFDIFDIFDIFDIFDIFDIFDIFDIFDIFDIFDIFDIFDIFDIFDIFDIF:   Reconoise HF
  //------------------------  2D-eta/phi-plot: DIF, averaged over depthfs
  //======================================================================
  //======================================================================
  // cout<<"      DIF2D-eta/phi-plot: DIF, averaged over depthfs *****" <<endl;
  c2x1->Clear();
  /////////////////
  c2x1->Divide(2, 1);
  c2x1->cd(1);
  TH2F *GefzDIFreconoiseHF42D = new TH2F("GefzDIFreconoiseHF42D", "", neta, -41., 41., nphi, 0., 72.);
  TH2F *GefzDIFreconoiseHF42D0 = new TH2F("GefzDIFreconoiseHF42D0", "", neta, -41., 41., nphi, 0., 72.);
  TH2F *GefzDIFreconoiseHF42DF = (TH2F *)GefzDIFreconoiseHF42D0->Clone("GefzDIFreconoiseHF42DF");
  for (int i = 0; i < ndepth; i++) {
    for (int jeta = 0; jeta < neta; jeta++) {
      if ((jeta - 41 >= -41 && jeta - 41 <= -29) || (jeta - 41 >= 28 && jeta - 41 <= 40)) {
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = breconoiseHF[i][jeta][jphi];
          int k2plot = jeta - 41;
          int kkk = k2plot;  //if(k2plot >0 ) kkk=k2plot+1; //-41 +41 !=0
          if (ccc1 != 0.) {
            GefzDIFreconoiseHF42D->Fill(kkk, jphi, ccc1);
            GefzDIFreconoiseHF42D0->Fill(kkk, jphi, 1.);
          }
        }
      }
    }
  }
  GefzDIFreconoiseHF42DF->Divide(GefzDIFreconoiseHF42D, GefzDIFreconoiseHF42D0, 1, 1, "B");  // average A
  gPad->SetGridy();
  gPad->SetGridx();  //      gPad->SetLogz();
  GefzDIFreconoiseHF42DF->SetXTitle("<DIF>_depth       #eta  \b");
  GefzDIFreconoiseHF42DF->SetYTitle("      #phi \b");
  GefzDIFreconoiseHF42DF->Draw("COLZ");

  c2x1->cd(2);
  //  TH1F *energyhitNoiseCut_HF= (TH1F*)dir->FindObjectAny("h_energyhitNoiseCut_HF");
  //  energyhitNoiseCut_HF ->SetMarkerStyle(20);energyhitNoiseCut_HF ->SetMarkerSize(0.4);energyhitNoiseCut_HF ->GetYaxis()->SetLabelSize(0.04);energyhitNoiseCut_HF ->SetXTitle("energyhitNoiseCut_HF \b");energyhitNoiseCut_HF ->SetMarkerColor(2);energyhitNoiseCut_HF ->SetLineColor(0);gPad->SetGridy();gPad->SetGridx();energyhitNoiseCut_HF ->Draw("Error");

  /////////////////
  c2x1->Update();
  c2x1->Print("DIFreconoiseGeneralD2PhiSymmetryHF.png");
  c2x1->Clear();
  // clean-up
  if (GefzDIFreconoiseHF42D)
    delete GefzDIFreconoiseHF42D;
  if (GefzDIFreconoiseHF42D0)
    delete GefzDIFreconoiseHF42D0;
  if (GefzDIFreconoiseHF42DF)
    delete GefzDIFreconoiseHF42DF;
  //====================================================================== 1D plot: DIF vs phi , averaged over depthfs & eta
  //======================================================================
  //cout<<"      1D plot: DIF vs phi , averaged over depthfs & eta *****" <<endl;
  c1x1->Clear();
  /////////////////
  c1x1->Divide(1, 1);
  c1x1->cd(1);
  TH1F *GefzDIFreconoiseHF41D = new TH1F("GefzDIFreconoiseHF41D", "", nphi, 0., 72.);
  TH1F *GefzDIFreconoiseHF41D0 = new TH1F("GefzDIFreconoiseHF41D0", "", nphi, 0., 72.);
  TH1F *GefzDIFreconoiseHF41DF = (TH1F *)GefzDIFreconoiseHF41D0->Clone("GefzDIFreconoiseHF41DF");
  for (int jphi = 0; jphi < nphi; jphi++) {
    for (int jeta = 0; jeta < neta; jeta++) {
      if ((jeta - 41 >= -41 && jeta - 41 <= -29) || (jeta - 41 >= 28 && jeta - 41 <= 40)) {
        for (int i = 0; i < ndepth; i++) {
          double ccc1 = breconoiseHF[i][jeta][jphi];
          if (ccc1 != 0.) {
            GefzDIFreconoiseHF41D->Fill(jphi, ccc1);
            GefzDIFreconoiseHF41D0->Fill(jphi, 1.);
          }
        }
      }
    }
  }
  GefzDIFreconoiseHF41DF->Divide(
      GefzDIFreconoiseHF41D, GefzDIFreconoiseHF41D0, 1, 1, "B");  // DIF averaged over depthfs & eta
  GefzDIFreconoiseHF41D0->Sumw2();
  //    for (int jphi=1;jphi<73;jphi++) {GefzDIFreconoiseHF41DF->SetBinError(jphi,0.01);}
  gPad->SetGridy();
  gPad->SetGridx();  //      gPad->SetLogz();
  GefzDIFreconoiseHF41DF->SetMarkerStyle(20);
  GefzDIFreconoiseHF41DF->SetMarkerSize(1.4);
  GefzDIFreconoiseHF41DF->GetZaxis()->SetLabelSize(0.08);
  GefzDIFreconoiseHF41DF->SetXTitle("#phi  \b");
  GefzDIFreconoiseHF41DF->SetYTitle("  <DIF> \b");
  GefzDIFreconoiseHF41DF->SetZTitle("<DIF>_PHI  - AllDepthfs \b");
  GefzDIFreconoiseHF41DF->SetMarkerColor(4);
  GefzDIFreconoiseHF41DF->SetLineColor(
      4);  //  GefzDIFreconoiseHF41DF->SetMinimum(0.8);     //      GefzDIFreconoiseHF41DF->SetMaximum(1.000);
  GefzDIFreconoiseHF41DF->Draw("Error");
  /////////////////
  c1x1->Update();
  c1x1->Print("DIFreconoiseGeneralD1PhiSymmetryHF.png");
  c1x1->Clear();
  // clean-up
  if (GefzDIFreconoiseHF41D)
    delete GefzDIFreconoiseHF41D;
  if (GefzDIFreconoiseHF41D0)
    delete GefzDIFreconoiseHF41D0;
  if (GefzDIFreconoiseHF41DF)
    delete GefzDIFreconoiseHF41DF;
  //========================================================================================== 4
  //======================================================================
  //======================================================================1D plot: DIF vs phi , different eta,  depth=1
  //cout<<"      1D plot: DIF vs phi , different eta,  depth=1 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHFpositivedirectionReconoiseDIF1 = 1;
  TH1F *h2CeffHFpositivedirectionReconoiseDIF1 = new TH1F("h2CeffHFpositivedirectionReconoiseDIF1", "", nphi, 0., 72.);
  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionReconoiseDIF:
    if (jeta - 41 >= 28 && jeta - 41 <= 40) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=1
      for (int i = 0; i < 1; i++) {
        TH1F *HFpositivedirectionReconoiseDIF1 = (TH1F *)h2CeffHFpositivedirectionReconoiseDIF1->Clone("twod1");
        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = breconoiseHF[i][jeta][jphi];
          if (ccc1 != 0.) {
            HFpositivedirectionReconoiseDIF1->Fill(jphi, ccc1);
            ccctest = 1.;  //HFpositivedirectionReconoiseDIF1->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //	  cout<<"444        kcountHFpositivedirectionReconoiseDIF1   =     "<<kcountHFpositivedirectionReconoiseDIF1  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHFpositivedirectionReconoiseDIF1);
          HFpositivedirectionReconoiseDIF1->SetMarkerStyle(20);
          HFpositivedirectionReconoiseDIF1->SetMarkerSize(0.4);
          HFpositivedirectionReconoiseDIF1->GetYaxis()->SetLabelSize(0.04);
          HFpositivedirectionReconoiseDIF1->SetXTitle("HFpositivedirectionReconoiseDIF1 \b");
          HFpositivedirectionReconoiseDIF1->SetMarkerColor(2);
          HFpositivedirectionReconoiseDIF1->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHFpositivedirectionReconoiseDIF1 == 1)
            HFpositivedirectionReconoiseDIF1->SetXTitle("DIF for HF+ jeta = 28; depth = 1 \b");
          if (kcountHFpositivedirectionReconoiseDIF1 == 2)
            HFpositivedirectionReconoiseDIF1->SetXTitle("DIF for HF+ jeta = 29; depth = 1 \b");
          if (kcountHFpositivedirectionReconoiseDIF1 == 3)
            HFpositivedirectionReconoiseDIF1->SetXTitle("DIF for HF+ jeta = 30; depth = 1 \b");
          if (kcountHFpositivedirectionReconoiseDIF1 == 4)
            HFpositivedirectionReconoiseDIF1->SetXTitle("DIF for HF+ jeta = 31; depth = 1 \b");
          if (kcountHFpositivedirectionReconoiseDIF1 == 5)
            HFpositivedirectionReconoiseDIF1->SetXTitle("DIF for HF+ jeta = 32; depth = 1 \b");
          if (kcountHFpositivedirectionReconoiseDIF1 == 6)
            HFpositivedirectionReconoiseDIF1->SetXTitle("DIF for HF+ jeta = 33; depth = 1 \b");
          if (kcountHFpositivedirectionReconoiseDIF1 == 7)
            HFpositivedirectionReconoiseDIF1->SetXTitle("DIF for HF+ jeta = 34; depth = 1 \b");
          if (kcountHFpositivedirectionReconoiseDIF1 == 8)
            HFpositivedirectionReconoiseDIF1->SetXTitle("DIF for HF+ jeta = 35; depth = 1 \b");
          if (kcountHFpositivedirectionReconoiseDIF1 == 9)
            HFpositivedirectionReconoiseDIF1->SetXTitle("DIF for HF+ jeta = 36; depth = 1 \b");
          if (kcountHFpositivedirectionReconoiseDIF1 == 10)
            HFpositivedirectionReconoiseDIF1->SetXTitle("DIF for HF+ jeta = 37; depth = 1 \b");
          if (kcountHFpositivedirectionReconoiseDIF1 == 11)
            HFpositivedirectionReconoiseDIF1->SetXTitle("DIF for HF+ jeta = 38; depth = 1 \b");
          if (kcountHFpositivedirectionReconoiseDIF1 == 12)
            HFpositivedirectionReconoiseDIF1->SetXTitle("DIF for HF+ jeta = 39; depth = 1 \b");
          if (kcountHFpositivedirectionReconoiseDIF1 == 13)
            HFpositivedirectionReconoiseDIF1->SetXTitle("DIF for HF+ jeta = 40; depth = 1 \b");
          HFpositivedirectionReconoiseDIF1->Draw("Error");
          kcountHFpositivedirectionReconoiseDIF1++;
          if (kcountHFpositivedirectionReconoiseDIF1 > 13)
            break;  //
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 28 && jeta-41 <= 40
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DIFreconoisePositiveDirectionhistD1PhiSymmetryDepth1HF.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHFpositivedirectionReconoiseDIF1)
    delete h2CeffHFpositivedirectionReconoiseDIF1;

  //========================================================================================== 5
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=2
  //  cout<<"      1D plot: R vs phi , different eta,  depth=2 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHFpositivedirectionReconoiseDIF2 = 1;
  TH1F *h2CeffHFpositivedirectionReconoiseDIF2 = new TH1F("h2CeffHFpositivedirectionReconoiseDIF2", "", nphi, 0., 72.);
  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionReconoiseDIF:
    if (jeta - 41 >= 28 && jeta - 41 <= 40) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=2
      for (int i = 1; i < 2; i++) {
        TH1F *HFpositivedirectionReconoiseDIF2 = (TH1F *)h2CeffHFpositivedirectionReconoiseDIF2->Clone("twod1");
        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = breconoiseHF[i][jeta][jphi];
          if (ccc1 != 0.) {
            HFpositivedirectionReconoiseDIF2->Fill(jphi, ccc1);
            ccctest = 1.;  //HFpositivedirectionReconoiseDIF2->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"555        kcountHFpositivedirectionReconoiseDIF2   =     "<<kcountHFpositivedirectionReconoiseDIF2  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHFpositivedirectionReconoiseDIF2);
          HFpositivedirectionReconoiseDIF2->SetMarkerStyle(20);
          HFpositivedirectionReconoiseDIF2->SetMarkerSize(0.4);
          HFpositivedirectionReconoiseDIF2->GetYaxis()->SetLabelSize(0.04);
          HFpositivedirectionReconoiseDIF2->SetXTitle("HFpositivedirectionReconoiseDIF2 \b");
          HFpositivedirectionReconoiseDIF2->SetMarkerColor(2);
          HFpositivedirectionReconoiseDIF2->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHFpositivedirectionReconoiseDIF2 == 1)
            HFpositivedirectionReconoiseDIF2->SetXTitle("DIF for HF+ jeta = 28; depth = 2 \b");
          if (kcountHFpositivedirectionReconoiseDIF2 == 2)
            HFpositivedirectionReconoiseDIF2->SetXTitle("DIF for HF+ jeta = 29; depth = 2 \b");
          if (kcountHFpositivedirectionReconoiseDIF2 == 3)
            HFpositivedirectionReconoiseDIF2->SetXTitle("DIF for HF+ jeta = 30; depth = 2 \b");
          if (kcountHFpositivedirectionReconoiseDIF2 == 4)
            HFpositivedirectionReconoiseDIF2->SetXTitle("DIF for HF+ jeta = 31; depth = 2 \b");
          if (kcountHFpositivedirectionReconoiseDIF2 == 5)
            HFpositivedirectionReconoiseDIF2->SetXTitle("DIF for HF+ jeta = 32; depth = 2 \b");
          if (kcountHFpositivedirectionReconoiseDIF2 == 6)
            HFpositivedirectionReconoiseDIF2->SetXTitle("DIF for HF+ jeta = 33; depth = 2 \b");
          if (kcountHFpositivedirectionReconoiseDIF2 == 7)
            HFpositivedirectionReconoiseDIF2->SetXTitle("DIF for HF+ jeta = 34; depth = 2 \b");
          if (kcountHFpositivedirectionReconoiseDIF2 == 8)
            HFpositivedirectionReconoiseDIF2->SetXTitle("DIF for HF+ jeta = 35; depth = 2 \b");
          if (kcountHFpositivedirectionReconoiseDIF2 == 9)
            HFpositivedirectionReconoiseDIF2->SetXTitle("DIF for HF+ jeta = 36; depth = 2 \b");
          if (kcountHFpositivedirectionReconoiseDIF2 == 10)
            HFpositivedirectionReconoiseDIF2->SetXTitle("DIF for HF+ jeta = 37; depth = 2 \b");
          if (kcountHFpositivedirectionReconoiseDIF2 == 11)
            HFpositivedirectionReconoiseDIF2->SetXTitle("DIF for HF+ jeta = 38; depth = 2 \b");
          if (kcountHFpositivedirectionReconoiseDIF2 == 12)
            HFpositivedirectionReconoiseDIF2->SetXTitle("DIF for HF+ jeta = 39; depth = 2 \b");
          if (kcountHFpositivedirectionReconoiseDIF2 == 13)
            HFpositivedirectionReconoiseDIF2->SetXTitle("DIF for HF+ jeta = 40; depth = 2 \b");
          HFpositivedirectionReconoiseDIF2->Draw("Error");
          kcountHFpositivedirectionReconoiseDIF2++;
          if (kcountHFpositivedirectionReconoiseDIF2 > 13)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 28 && jeta-41 <= 40)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DIFreconoisePositiveDirectionhistD1PhiSymmetryDepth2HF.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHFpositivedirectionReconoiseDIF2)
    delete h2CeffHFpositivedirectionReconoiseDIF2;

  //========================================================================================== 1111114
  //======================================================================
  //======================================================================1D plot: DIF vs phi , different eta,  depth=1
  //cout<<"      1D plot: DIF vs phi , different eta,  depth=1 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHFnegativedirectionReconoiseDIF1 = 1;
  TH1F *h2CeffHFnegativedirectionReconoiseDIF1 = new TH1F("h2CeffHFnegativedirectionReconoiseDIF1", "", nphi, 0., 72.);
  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionReconoiseDIF:
    if (jeta - 41 >= -41 && jeta - 41 <= -29) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=1
      for (int i = 0; i < 1; i++) {
        TH1F *HFnegativedirectionReconoiseDIF1 = (TH1F *)h2CeffHFnegativedirectionReconoiseDIF1->Clone("twod1");
        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = breconoiseHF[i][jeta][jphi];
          if (ccc1 != 0.) {
            HFnegativedirectionReconoiseDIF1->Fill(jphi, ccc1);
            ccctest = 1.;  //HFnegativedirectionReconoiseDIF1->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //	  cout<<"444        kcountHFnegativedirectionReconoiseDIF1   =     "<<kcountHFnegativedirectionReconoiseDIF1  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHFnegativedirectionReconoiseDIF1);
          HFnegativedirectionReconoiseDIF1->SetMarkerStyle(20);
          HFnegativedirectionReconoiseDIF1->SetMarkerSize(0.4);
          HFnegativedirectionReconoiseDIF1->GetYaxis()->SetLabelSize(0.04);
          HFnegativedirectionReconoiseDIF1->SetXTitle("HFnegativedirectionReconoiseDIF1 \b");
          HFnegativedirectionReconoiseDIF1->SetMarkerColor(2);
          HFnegativedirectionReconoiseDIF1->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHFnegativedirectionReconoiseDIF1 == 1)
            HFnegativedirectionReconoiseDIF1->SetXTitle("DIF for HF- jeta =-41; depth = 1 \b");
          if (kcountHFnegativedirectionReconoiseDIF1 == 2)
            HFnegativedirectionReconoiseDIF1->SetXTitle("DIF for HF- jeta =-40; depth = 1 \b");
          if (kcountHFnegativedirectionReconoiseDIF1 == 3)
            HFnegativedirectionReconoiseDIF1->SetXTitle("DIF for HF- jeta =-39; depth = 1 \b");
          if (kcountHFnegativedirectionReconoiseDIF1 == 4)
            HFnegativedirectionReconoiseDIF1->SetXTitle("DIF for HF- jeta =-38; depth = 1 \b");
          if (kcountHFnegativedirectionReconoiseDIF1 == 5)
            HFnegativedirectionReconoiseDIF1->SetXTitle("DIF for HF- jeta =-37; depth = 1 \b");
          if (kcountHFnegativedirectionReconoiseDIF1 == 6)
            HFnegativedirectionReconoiseDIF1->SetXTitle("DIF for HF- jeta =-36; depth = 1 \b");
          if (kcountHFnegativedirectionReconoiseDIF1 == 7)
            HFnegativedirectionReconoiseDIF1->SetXTitle("DIF for HF- jeta =-35; depth = 1 \b");
          if (kcountHFnegativedirectionReconoiseDIF1 == 8)
            HFnegativedirectionReconoiseDIF1->SetXTitle("DIF for HF- jeta =-34; depth = 1 \b");
          if (kcountHFnegativedirectionReconoiseDIF1 == 9)
            HFnegativedirectionReconoiseDIF1->SetXTitle("DIF for HF- jeta =-33; depth = 1 \b");
          if (kcountHFnegativedirectionReconoiseDIF1 == 10)
            HFnegativedirectionReconoiseDIF1->SetXTitle("DIF for HF- jeta =-32; depth = 1 \b");
          if (kcountHFnegativedirectionReconoiseDIF1 == 11)
            HFnegativedirectionReconoiseDIF1->SetXTitle("DIF for HF- jeta =-31; depth = 1 \b");
          if (kcountHFnegativedirectionReconoiseDIF1 == 12)
            HFnegativedirectionReconoiseDIF1->SetXTitle("DIF for HF- jeta =-30; depth = 1 \b");
          if (kcountHFnegativedirectionReconoiseDIF1 == 13)
            HFnegativedirectionReconoiseDIF1->SetXTitle("DIF for HF- jeta =-29; depth = 1 \b");
          HFnegativedirectionReconoiseDIF1->Draw("Error");
          kcountHFnegativedirectionReconoiseDIF1++;
          if (kcountHFnegativedirectionReconoiseDIF1 > 13)
            break;  //
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= -41 && jeta-41 <= -29)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DIFreconoiseNegativeDirectionhistD1PhiSymmetryDepth1HF.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHFnegativedirectionReconoiseDIF1)
    delete h2CeffHFnegativedirectionReconoiseDIF1;

  //========================================================================================== 1111115
  //======================================================================
  //======================================================================1D plot: R vs phi , different eta,  depth=2
  //  cout<<"      1D plot: R vs phi , different eta,  depth=2 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHFnegativedirectionReconoiseDIF2 = 1;
  TH1F *h2CeffHFnegativedirectionReconoiseDIF2 = new TH1F("h2CeffHFnegativedirectionReconoiseDIF2", "", nphi, 0., 72.);
  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionReconoiseDIF:
    if (jeta - 41 >= -41 && jeta - 41 <= -29) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=2
      for (int i = 1; i < 2; i++) {
        TH1F *HFnegativedirectionReconoiseDIF2 = (TH1F *)h2CeffHFnegativedirectionReconoiseDIF2->Clone("twod1");
        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = breconoiseHF[i][jeta][jphi];
          if (ccc1 != 0.) {
            HFnegativedirectionReconoiseDIF2->Fill(jphi, ccc1);
            ccctest = 1.;  //HFnegativedirectionReconoiseDIF2->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"555        kcountHFnegativedirectionReconoiseDIF2   =     "<<kcountHFnegativedirectionReconoiseDIF2  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHFnegativedirectionReconoiseDIF2);
          HFnegativedirectionReconoiseDIF2->SetMarkerStyle(20);
          HFnegativedirectionReconoiseDIF2->SetMarkerSize(0.4);
          HFnegativedirectionReconoiseDIF2->GetYaxis()->SetLabelSize(0.04);
          HFnegativedirectionReconoiseDIF2->SetXTitle("HFnegativedirectionReconoiseDIF2 \b");
          HFnegativedirectionReconoiseDIF2->SetMarkerColor(2);
          HFnegativedirectionReconoiseDIF2->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHFnegativedirectionReconoiseDIF2 == 1)
            HFnegativedirectionReconoiseDIF2->SetXTitle("DIF for HF- jeta =-41; depth = 2 \b");
          if (kcountHFnegativedirectionReconoiseDIF2 == 2)
            HFnegativedirectionReconoiseDIF2->SetXTitle("DIF for HF- jeta =-40; depth = 2 \b");
          if (kcountHFnegativedirectionReconoiseDIF2 == 3)
            HFnegativedirectionReconoiseDIF2->SetXTitle("DIF for HF- jeta =-39; depth = 2 \b");
          if (kcountHFnegativedirectionReconoiseDIF2 == 4)
            HFnegativedirectionReconoiseDIF2->SetXTitle("DIF for HF- jeta =-38; depth = 2 \b");
          if (kcountHFnegativedirectionReconoiseDIF2 == 5)
            HFnegativedirectionReconoiseDIF2->SetXTitle("DIF for HF- jeta =-37; depth = 2 \b");
          if (kcountHFnegativedirectionReconoiseDIF2 == 6)
            HFnegativedirectionReconoiseDIF2->SetXTitle("DIF for HF- jeta =-36; depth = 2 \b");
          if (kcountHFnegativedirectionReconoiseDIF2 == 7)
            HFnegativedirectionReconoiseDIF2->SetXTitle("DIF for HF- jeta =-35; depth = 2 \b");
          if (kcountHFnegativedirectionReconoiseDIF2 == 8)
            HFnegativedirectionReconoiseDIF2->SetXTitle("DIF for HF- jeta =-34; depth = 2 \b");
          if (kcountHFnegativedirectionReconoiseDIF2 == 9)
            HFnegativedirectionReconoiseDIF2->SetXTitle("DIF for HF- jeta =-33; depth = 2 \b");
          if (kcountHFnegativedirectionReconoiseDIF2 == 10)
            HFnegativedirectionReconoiseDIF2->SetXTitle("DIF for HF- jeta =-32; depth = 2 \b");
          if (kcountHFnegativedirectionReconoiseDIF2 == 11)
            HFnegativedirectionReconoiseDIF2->SetXTitle("DIF for HF- jeta =-31; depth = 2 \b");
          if (kcountHFnegativedirectionReconoiseDIF2 == 12)
            HFnegativedirectionReconoiseDIF2->SetXTitle("DIF for HF- jeta =-30; depth = 2 \b");
          if (kcountHFnegativedirectionReconoiseDIF2 == 13)
            HFnegativedirectionReconoiseDIF2->SetXTitle("DIF for HF- jeta =-20; depth = 2 \b");
          HFnegativedirectionReconoiseDIF2->Draw("Error");
          kcountHFnegativedirectionReconoiseDIF2++;
          if (kcountHFnegativedirectionReconoiseDIF2 > 13)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= -41 && jeta-41 <= -29)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DIFreconoiseNegativeDirectionhistD1PhiSymmetryDepth2HF.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHFnegativedirectionReconoiseDIF2)
    delete h2CeffHFnegativedirectionReconoiseDIF2;

  //======================================================================================================================
  //======================================================================================================================
  //======================================================================================================================
  //======================================================================================================================
  //======================================================================================================================
  //======================================================================================================================
  //======================================================================================================================
  //                            DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD:

  //cout<<"    Start Vaiance: preparation  *****" <<endl;
  TH2F *reconoiseVariance1HF1 = (TH2F *)dir->FindObjectAny("h_recNoiseEnergy2_HF1");
  TH2F *reconoiseVariance0HF1 = (TH2F *)dir->FindObjectAny("h_recNoiseEnergy0_HF1");
  TH2F *reconoiseVarianceHF1 = (TH2F *)reconoiseVariance1HF1->Clone("reconoiseVarianceHF1");
  reconoiseVarianceHF1->Divide(reconoiseVariance1HF1, reconoiseVariance0HF1, 1, 1, "B");
  TH2F *reconoiseVariance1HF2 = (TH2F *)dir->FindObjectAny("h_recNoiseEnergy2_HF2");
  TH2F *reconoiseVariance0HF2 = (TH2F *)dir->FindObjectAny("h_recNoiseEnergy0_HF2");
  TH2F *reconoiseVarianceHF2 = (TH2F *)reconoiseVariance1HF2->Clone("reconoiseVarianceHF2");
  reconoiseVarianceHF2->Divide(reconoiseVariance1HF2, reconoiseVariance0HF2, 1, 1, "B");
  //cout<<"      Vaiance: preparation DONE *****" <<endl;
  //====================================================================== put Vaiance=Dispersia = Sig**2=<R**2> - (<R>)**2 into massive reconoisevarianceHF
  //                                                                                           = sum(R*R)/N - (sum(R)/N)**2
  for (int jeta = 0; jeta < njeta; jeta++) {
    if ((jeta - 41 >= -41 && jeta - 41 <= -29) || (jeta - 41 >= 28 && jeta - 41 <= 40)) {
      //preparation for PHI normalization:
      double sumreconoiseHF0 = 0;
      int nsumreconoiseHF0 = 0;
      double sumreconoiseHF1 = 0;
      int nsumreconoiseHF1 = 0;
      for (int jphi = 0; jphi < njphi; jphi++) {
        reconoisevarianceHF[0][jeta][jphi] = reconoiseVarianceHF1->GetBinContent(jeta + 1, jphi + 1);
        reconoisevarianceHF[1][jeta][jphi] = reconoiseVarianceHF2->GetBinContent(jeta + 1, jphi + 1);
        sumreconoiseHF0 += reconoisevarianceHF[0][jeta][jphi];
        ++nsumreconoiseHF0;
        sumreconoiseHF1 += reconoisevarianceHF[1][jeta][jphi];
        ++nsumreconoiseHF1;
      }  // phi
      // PHI normalization :
      for (int jphi = 0; jphi < njphi; jphi++) {
        if (reconoisevarianceHF[0][jeta][jphi] != 0.)
          reconoisevarianceHF[0][jeta][jphi] /= (sumreconoiseHF0 / nsumreconoiseHF0);
        if (reconoisevarianceHF[1][jeta][jphi] != 0.)
          reconoisevarianceHF[1][jeta][jphi] /= (sumreconoiseHF1 / nsumreconoiseHF1);
      }  // phi
      //       reconoisevarianceHF (D)           = sum(R*R)/N - (sum(R)/N)**2
      for (int jphi = 0; jphi < njphi; jphi++) {
        //	   cout<<"12 12 12   jeta=     "<< jeta <<"   jphi   =     "<<jphi  <<endl;
        reconoisevarianceHF[0][jeta][jphi] -= areconoiseHF[0][jeta][jphi] * areconoiseHF[0][jeta][jphi];
        reconoisevarianceHF[0][jeta][jphi] = fabs(reconoisevarianceHF[0][jeta][jphi]);
        reconoisevarianceHF[1][jeta][jphi] -= areconoiseHF[1][jeta][jphi] * areconoiseHF[1][jeta][jphi];
        reconoisevarianceHF[1][jeta][jphi] = fabs(reconoisevarianceHF[1][jeta][jphi]);
      }
    }
  }
  //cout<<"      Vaiance: DONE*****" <<endl;
  //------------------------  2D-eta/phi-plot: D, averaged over depthfs
  //======================================================================
  //======================================================================
  //cout<<"      R2D-eta/phi-plot: D, averaged over depthfs *****" <<endl;
  c1x1->Clear();
  /////////////////
  c1x0->Divide(1, 1);
  c1x0->cd(1);
  TH2F *DefzDreconoiseHF42D = new TH2F("DefzDreconoiseHF42D", "", neta, -41., 41., nphi, 0., 72.);
  TH2F *DefzDreconoiseHF42D0 = new TH2F("DefzDreconoiseHF42D0", "", neta, -41., 41., nphi, 0., 72.);
  TH2F *DefzDreconoiseHF42DF = (TH2F *)DefzDreconoiseHF42D0->Clone("DefzDreconoiseHF42DF");
  for (int i = 0; i < ndepth; i++) {
    for (int jeta = 0; jeta < neta; jeta++) {
      if ((jeta - 41 >= -41 && jeta - 41 <= -29) || (jeta - 41 >= 28 && jeta - 41 <= 40)) {
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = reconoisevarianceHF[i][jeta][jphi];
          int k2plot = jeta - 41;
          int kkk = k2plot;  //if(k2plot >0   kkk=k2plot+1; //-41 +41 !=0
          if (areconoiseHF[i][jeta][jphi] > 0.) {
            DefzDreconoiseHF42D->Fill(kkk, jphi, ccc1);
            DefzDreconoiseHF42D0->Fill(kkk, jphi, 1.);
          }
        }
      }
    }
  }
  DefzDreconoiseHF42DF->Divide(DefzDreconoiseHF42D, DefzDreconoiseHF42D0, 1, 1, "B");  // average A
  //    DefzDreconoiseHF1->Sumw2();
  gPad->SetGridy();
  gPad->SetGridx();  //      gPad->SetLogz();
  DefzDreconoiseHF42DF->SetMarkerStyle(20);
  DefzDreconoiseHF42DF->SetMarkerSize(0.4);
  DefzDreconoiseHF42DF->GetZaxis()->SetLabelSize(0.08);
  DefzDreconoiseHF42DF->SetXTitle("<D>_depth       #eta  \b");
  DefzDreconoiseHF42DF->SetYTitle("      #phi \b");
  DefzDreconoiseHF42DF->SetZTitle("<D>_depth \b");
  DefzDreconoiseHF42DF->SetMarkerColor(2);
  DefzDreconoiseHF42DF->SetLineColor(
      0);  //      DefzDreconoiseHF42DF->SetMaximum(1.000);  //      DefzDreconoiseHF42DF->SetMinimum(1.0);
  DefzDreconoiseHF42DF->Draw("COLZ");
  /////////////////
  c1x0->Update();
  c1x0->Print("DreconoiseGeneralD2PhiSymmetryHF.png");
  c1x0->Clear();
  // clean-up
  if (DefzDreconoiseHF42D)
    delete DefzDreconoiseHF42D;
  if (DefzDreconoiseHF42D0)
    delete DefzDreconoiseHF42D0;
  if (DefzDreconoiseHF42DF)
    delete DefzDreconoiseHF42DF;
  //====================================================================== 1D plot: D vs phi , averaged over depthfs & eta
  //======================================================================
  //cout<<"      1D plot: D vs phi , averaged over depthfs & eta *****" <<endl;
  c1x1->Clear();
  /////////////////
  c1x1->Divide(1, 1);
  c1x1->cd(1);
  TH1F *DefzDreconoiseHF41D = new TH1F("DefzDreconoiseHF41D", "", nphi, 0., 72.);
  TH1F *DefzDreconoiseHF41D0 = new TH1F("DefzDreconoiseHF41D0", "", nphi, 0., 72.);
  TH1F *DefzDreconoiseHF41DF = (TH1F *)DefzDreconoiseHF41D0->Clone("DefzDreconoiseHF41DF");

  for (int jphi = 0; jphi < nphi; jphi++) {
    for (int jeta = 0; jeta < neta; jeta++) {
      if ((jeta - 41 >= -41 && jeta - 41 <= -29) || (jeta - 41 >= 28 && jeta - 41 <= 40)) {
        for (int i = 0; i < ndepth; i++) {
          double ccc1 = reconoisevarianceHF[i][jeta][jphi];
          if (areconoiseHF[i][jeta][jphi] > 0.) {
            DefzDreconoiseHF41D->Fill(jphi, ccc1);
            DefzDreconoiseHF41D0->Fill(jphi, 1.);
          }
        }
      }
    }
  }
  //     DefzDreconoiseHF41D->Sumw2();DefzDreconoiseHF41D0->Sumw2();

  DefzDreconoiseHF41DF->Divide(DefzDreconoiseHF41D, DefzDreconoiseHF41D0, 1, 1, "B");  // R averaged over depthfs & eta
  DefzDreconoiseHF41D0->Sumw2();
  //    for (int jphi=1;jphi<73;jphi++) {DefzDreconoiseHF41DF->SetBinError(jphi,0.01);}
  gPad->SetGridy();
  gPad->SetGridx();  //      gPad->SetLogz();
  DefzDreconoiseHF41DF->SetMarkerStyle(20);
  DefzDreconoiseHF41DF->SetMarkerSize(1.4);
  DefzDreconoiseHF41DF->GetZaxis()->SetLabelSize(0.08);
  DefzDreconoiseHF41DF->SetXTitle("#phi  \b");
  DefzDreconoiseHF41DF->SetYTitle("  <D> \b");
  DefzDreconoiseHF41DF->SetZTitle("<D>_PHI  - AllDepthfs \b");
  DefzDreconoiseHF41DF->SetMarkerColor(4);
  DefzDreconoiseHF41DF->SetLineColor(
      4);  //  DefzDreconoiseHF41DF->SetMinimum(0.8);     DefzDreconoiseHF41DF->SetMinimum(-0.015);
  DefzDreconoiseHF41DF->Draw("Error");
  /////////////////
  c1x1->Update();
  c1x1->Print("DreconoiseGeneralD1PhiSymmetryHF.png");
  c1x1->Clear();
  // clean-up
  if (DefzDreconoiseHF41D)
    delete DefzDreconoiseHF41D;
  if (DefzDreconoiseHF41D0)
    delete DefzDreconoiseHF41D0;
  if (DefzDreconoiseHF41DF)
    delete DefzDreconoiseHF41DF;
  //========================================================================================== 14
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=1
  //cout<<"      1D plot: D vs phi , different eta,  depth=1 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHFpositivedirectionReconoiseD1 = 1;
  TH1F *h2CeffHFpositivedirectionReconoiseD1 = new TH1F("h2CeffHFpositivedirectionReconoiseD1", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionReconoiseD:
    if (jeta - 41 >= 28 && jeta - 41 <= 40) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=1
      for (int i = 0; i < 1; i++) {
        TH1F *HFpositivedirectionReconoiseD1 = (TH1F *)h2CeffHFpositivedirectionReconoiseD1->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = reconoisevarianceHF[i][jeta][jphi];
          if (areconoiseHF[i][jeta][jphi] > 0.) {
            HFpositivedirectionReconoiseD1->Fill(jphi, ccc1);
            ccctest = 1.;  //HFpositivedirectionReconoiseD1->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1414       kcountHFpositivedirectionReconoiseD1   =     "<<kcountHFpositivedirectionReconoiseD1  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHFpositivedirectionReconoiseD1);
          HFpositivedirectionReconoiseD1->SetMarkerStyle(20);
          HFpositivedirectionReconoiseD1->SetMarkerSize(0.4);
          HFpositivedirectionReconoiseD1->GetYaxis()->SetLabelSize(0.04);
          HFpositivedirectionReconoiseD1->SetXTitle("HFpositivedirectionReconoiseD1 \b");
          HFpositivedirectionReconoiseD1->SetMarkerColor(2);
          HFpositivedirectionReconoiseD1->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHFpositivedirectionReconoiseD1 == 1)
            HFpositivedirectionReconoiseD1->SetXTitle("D for HF+ jeta = 28; depth = 1 \b");
          if (kcountHFpositivedirectionReconoiseD1 == 2)
            HFpositivedirectionReconoiseD1->SetXTitle("D for HF+ jeta = 29; depth = 1 \b");
          if (kcountHFpositivedirectionReconoiseD1 == 3)
            HFpositivedirectionReconoiseD1->SetXTitle("D for HF+ jeta = 30; depth = 1 \b");
          if (kcountHFpositivedirectionReconoiseD1 == 4)
            HFpositivedirectionReconoiseD1->SetXTitle("D for HF+ jeta = 31; depth = 1 \b");
          if (kcountHFpositivedirectionReconoiseD1 == 5)
            HFpositivedirectionReconoiseD1->SetXTitle("D for HF+ jeta = 32; depth = 1 \b");
          if (kcountHFpositivedirectionReconoiseD1 == 6)
            HFpositivedirectionReconoiseD1->SetXTitle("D for HF+ jeta = 33; depth = 1 \b");
          if (kcountHFpositivedirectionReconoiseD1 == 7)
            HFpositivedirectionReconoiseD1->SetXTitle("D for HF+ jeta = 34; depth = 1 \b");
          if (kcountHFpositivedirectionReconoiseD1 == 8)
            HFpositivedirectionReconoiseD1->SetXTitle("D for HF+ jeta = 35; depth = 1 \b");
          if (kcountHFpositivedirectionReconoiseD1 == 9)
            HFpositivedirectionReconoiseD1->SetXTitle("D for HF+ jeta = 36; depth = 1 \b");
          if (kcountHFpositivedirectionReconoiseD1 == 10)
            HFpositivedirectionReconoiseD1->SetXTitle("D for HF+ jeta = 37; depth = 1 \b");
          if (kcountHFpositivedirectionReconoiseD1 == 11)
            HFpositivedirectionReconoiseD1->SetXTitle("D for HF+ jeta = 38; depth = 1 \b");
          if (kcountHFpositivedirectionReconoiseD1 == 12)
            HFpositivedirectionReconoiseD1->SetXTitle("D for HF+ jeta = 39; depth = 1 \b");
          if (kcountHFpositivedirectionReconoiseD1 == 13)
            HFpositivedirectionReconoiseD1->SetXTitle("D for HF+ jeta = 40; depth = 1 \b");
          HFpositivedirectionReconoiseD1->Draw("Error");
          kcountHFpositivedirectionReconoiseD1++;
          if (kcountHFpositivedirectionReconoiseD1 > 13)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 28 && jeta-41 <= 40)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DreconoisePositiveDirectionhistD1PhiSymmetryDepth1HF.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHFpositivedirectionReconoiseD1)
    delete h2CeffHFpositivedirectionReconoiseD1;
  //========================================================================================== 15
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=2
  //cout<<"      1D plot: D vs phi , different eta,  depth=2 *****" <<endl;
  c3x5->Clear();
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHFpositivedirectionReconoiseD2 = 1;
  TH1F *h2CeffHFpositivedirectionReconoiseD2 = new TH1F("h2CeffHFpositivedirectionReconoiseD2", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // positivedirectionReconoiseD:
    if (jeta - 41 >= 28 && jeta - 41 <= 40) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=2
      for (int i = 1; i < 2; i++) {
        TH1F *HFpositivedirectionReconoiseD2 = (TH1F *)h2CeffHFpositivedirectionReconoiseD2->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = reconoisevarianceHF[i][jeta][jphi];
          if (areconoiseHF[i][jeta][jphi] > 0.) {
            HFpositivedirectionReconoiseD2->Fill(jphi, ccc1);
            ccctest = 1.;  //HFpositivedirectionReconoiseD2->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1515       kcountHFpositivedirectionReconoiseD2   =     "<<kcountHFpositivedirectionReconoiseD2  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHFpositivedirectionReconoiseD2);
          HFpositivedirectionReconoiseD2->SetMarkerStyle(20);
          HFpositivedirectionReconoiseD2->SetMarkerSize(0.4);
          HFpositivedirectionReconoiseD2->GetYaxis()->SetLabelSize(0.04);
          HFpositivedirectionReconoiseD2->SetXTitle("HFpositivedirectionReconoiseD2 \b");
          HFpositivedirectionReconoiseD2->SetMarkerColor(2);
          HFpositivedirectionReconoiseD2->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHFpositivedirectionReconoiseD2 == 1)
            HFpositivedirectionReconoiseD2->SetXTitle("D for HF+ jeta = 28; depth = 2 \b");
          if (kcountHFpositivedirectionReconoiseD2 == 2)
            HFpositivedirectionReconoiseD2->SetXTitle("D for HF+ jeta = 29; depth = 2 \b");
          if (kcountHFpositivedirectionReconoiseD2 == 3)
            HFpositivedirectionReconoiseD2->SetXTitle("D for HF+ jeta = 30; depth = 2 \b");
          if (kcountHFpositivedirectionReconoiseD2 == 4)
            HFpositivedirectionReconoiseD2->SetXTitle("D for HF+ jeta = 31; depth = 2 \b");
          if (kcountHFpositivedirectionReconoiseD2 == 5)
            HFpositivedirectionReconoiseD2->SetXTitle("D for HF+ jeta = 32; depth = 2 \b");
          if (kcountHFpositivedirectionReconoiseD2 == 6)
            HFpositivedirectionReconoiseD2->SetXTitle("D for HF+ jeta = 33; depth = 2 \b");
          if (kcountHFpositivedirectionReconoiseD2 == 7)
            HFpositivedirectionReconoiseD2->SetXTitle("D for HF+ jeta = 34; depth = 2 \b");
          if (kcountHFpositivedirectionReconoiseD2 == 8)
            HFpositivedirectionReconoiseD2->SetXTitle("D for HF+ jeta = 35; depth = 2 \b");
          if (kcountHFpositivedirectionReconoiseD2 == 9)
            HFpositivedirectionReconoiseD2->SetXTitle("D for HF+ jeta = 36; depth = 2 \b");
          if (kcountHFpositivedirectionReconoiseD2 == 10)
            HFpositivedirectionReconoiseD2->SetXTitle("D for HF+ jeta = 37; depth = 2 \b");
          if (kcountHFpositivedirectionReconoiseD2 == 11)
            HFpositivedirectionReconoiseD2->SetXTitle("D for HF+ jeta = 38; depth = 2 \b");
          if (kcountHFpositivedirectionReconoiseD2 == 12)
            HFpositivedirectionReconoiseD2->SetXTitle("D for HF+ jeta = 39; depth = 2 \b");
          if (kcountHFpositivedirectionReconoiseD2 == 13)
            HFpositivedirectionReconoiseD2->SetXTitle("D for HF+ jeta = 40; depth = 2 \b");
          HFpositivedirectionReconoiseD2->Draw("Error");
          kcountHFpositivedirectionReconoiseD2++;
          if (kcountHFpositivedirectionReconoiseD2 > 13)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= 28 && jeta-41 <= 40)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DreconoisePositiveDirectionhistD1PhiSymmetryDepth2HF.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHFpositivedirectionReconoiseD2)
    delete h2CeffHFpositivedirectionReconoiseD2;
  //========================================================================================== 22222214
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=1
  //cout<<"      1D plot: D vs phi , different eta,  depth=1 *****" <<endl;
  c3x5->Clear();
  /////////////////
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHFnegativedirectionReconoiseD1 = 1;
  TH1F *h2CeffHFnegativedirectionReconoiseD1 = new TH1F("h2CeffHFnegativedirectionReconoiseD1", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionReconoiseD:
    if (jeta - 41 >= -41 && jeta - 41 <= -29) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=1
      for (int i = 0; i < 1; i++) {
        TH1F *HFnegativedirectionReconoiseD1 = (TH1F *)h2CeffHFnegativedirectionReconoiseD1->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = reconoisevarianceHF[i][jeta][jphi];
          if (areconoiseHF[i][jeta][jphi] > 0.) {
            HFnegativedirectionReconoiseD1->Fill(jphi, ccc1);
            ccctest = 1.;  //HFnegativedirectionReconoiseD1->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1414       kcountHFnegativedirectionReconoiseD1   =     "<<kcountHFnegativedirectionReconoiseD1  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHFnegativedirectionReconoiseD1);
          HFnegativedirectionReconoiseD1->SetMarkerStyle(20);
          HFnegativedirectionReconoiseD1->SetMarkerSize(0.4);
          HFnegativedirectionReconoiseD1->GetYaxis()->SetLabelSize(0.04);
          HFnegativedirectionReconoiseD1->SetXTitle("HFnegativedirectionReconoiseD1 \b");
          HFnegativedirectionReconoiseD1->SetMarkerColor(2);
          HFnegativedirectionReconoiseD1->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHFnegativedirectionReconoiseD1 == 1)
            HFnegativedirectionReconoiseD1->SetXTitle("D for HF- jeta =-41; depth = 1 \b");
          if (kcountHFnegativedirectionReconoiseD1 == 2)
            HFnegativedirectionReconoiseD1->SetXTitle("D for HF- jeta =-40; depth = 1 \b");
          if (kcountHFnegativedirectionReconoiseD1 == 3)
            HFnegativedirectionReconoiseD1->SetXTitle("D for HF- jeta =-39; depth = 1 \b");
          if (kcountHFnegativedirectionReconoiseD1 == 4)
            HFnegativedirectionReconoiseD1->SetXTitle("D for HF- jeta =-38; depth = 1 \b");
          if (kcountHFnegativedirectionReconoiseD1 == 5)
            HFnegativedirectionReconoiseD1->SetXTitle("D for HF- jeta =-37; depth = 1 \b");
          if (kcountHFnegativedirectionReconoiseD1 == 6)
            HFnegativedirectionReconoiseD1->SetXTitle("D for HF- jeta =-36; depth = 1 \b");
          if (kcountHFnegativedirectionReconoiseD1 == 7)
            HFnegativedirectionReconoiseD1->SetXTitle("D for HF- jeta =-35; depth = 1 \b");
          if (kcountHFnegativedirectionReconoiseD1 == 8)
            HFnegativedirectionReconoiseD1->SetXTitle("D for HF- jeta =-34; depth = 1 \b");
          if (kcountHFnegativedirectionReconoiseD1 == 9)
            HFnegativedirectionReconoiseD1->SetXTitle("D for HF- jeta =-33; depth = 1 \b");
          if (kcountHFnegativedirectionReconoiseD1 == 10)
            HFnegativedirectionReconoiseD1->SetXTitle("D for HF- jeta =-32; depth = 1 \b");
          if (kcountHFnegativedirectionReconoiseD1 == 11)
            HFnegativedirectionReconoiseD1->SetXTitle("D for HF- jeta =-31; depth = 1 \b");
          if (kcountHFnegativedirectionReconoiseD1 == 12)
            HFnegativedirectionReconoiseD1->SetXTitle("D for HF- jeta =-30; depth = 1 \b");
          if (kcountHFnegativedirectionReconoiseD1 == 13)
            HFnegativedirectionReconoiseD1->SetXTitle("D for HF- jeta =-29; depth = 1 \b");
          HFnegativedirectionReconoiseD1->Draw("Error");
          kcountHFnegativedirectionReconoiseD1++;
          if (kcountHFnegativedirectionReconoiseD1 > 13)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= -41 && jeta-41 <= -29)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DreconoiseNegativeDirectionhistD1PhiSymmetryDepth1HF.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHFnegativedirectionReconoiseD1)
    delete h2CeffHFnegativedirectionReconoiseD1;
  //========================================================================================== 22222215
  //======================================================================
  //======================================================================1D plot: D vs phi , different eta,  depth=2
  //cout<<"      1D plot: D vs phi , different eta,  depth=2 *****" <<endl;
  c3x5->Clear();
  c3x5->Divide(3, 5);
  c3x5->cd(1);
  int kcountHFnegativedirectionReconoiseD2 = 1;
  TH1F *h2CeffHFnegativedirectionReconoiseD2 = new TH1F("h2CeffHFnegativedirectionReconoiseD2", "", nphi, 0., 72.);

  for (int jeta = 0; jeta < njeta; jeta++) {
    // negativedirectionReconoiseD:
    if (jeta - 41 >= -41 && jeta - 41 <= -29) {
      //	     for (int i=0;i<ndepth;i++) {
      // depth=2
      for (int i = 1; i < 2; i++) {
        TH1F *HFnegativedirectionReconoiseD2 = (TH1F *)h2CeffHFnegativedirectionReconoiseD2->Clone("twod1");

        float ccctest = 0;  // to avoid empty massive elements
        for (int jphi = 0; jphi < nphi; jphi++) {
          double ccc1 = reconoisevarianceHF[i][jeta][jphi];
          if (areconoiseHF[i][jeta][jphi] > 0.) {
            HFnegativedirectionReconoiseD2->Fill(jphi, ccc1);
            ccctest = 1.;  //HFnegativedirectionReconoiseD2->SetBinError(i,0.01);
          }
        }  // for jphi
        if (ccctest > 0.) {
          //cout<<"1515       kcountHFnegativedirectionReconoiseD2   =     "<<kcountHFnegativedirectionReconoiseD2  <<"   jeta-41=     "<< jeta-41 <<endl;
          c3x5->cd(kcountHFnegativedirectionReconoiseD2);
          HFnegativedirectionReconoiseD2->SetMarkerStyle(20);
          HFnegativedirectionReconoiseD2->SetMarkerSize(0.4);
          HFnegativedirectionReconoiseD2->GetYaxis()->SetLabelSize(0.04);
          HFnegativedirectionReconoiseD2->SetXTitle("HFnegativedirectionReconoiseD2 \b");
          HFnegativedirectionReconoiseD2->SetMarkerColor(2);
          HFnegativedirectionReconoiseD2->SetLineColor(0);
          gPad->SetGridy();
          gPad->SetGridx();
          //	   gPad->SetLogy();
          if (kcountHFnegativedirectionReconoiseD2 == 1)
            HFnegativedirectionReconoiseD2->SetXTitle("D for HF- jeta =-41; depth = 2 \b");
          if (kcountHFnegativedirectionReconoiseD2 == 2)
            HFnegativedirectionReconoiseD2->SetXTitle("D for HF- jeta =-40; depth = 2 \b");
          if (kcountHFnegativedirectionReconoiseD2 == 3)
            HFnegativedirectionReconoiseD2->SetXTitle("D for HF- jeta =-39; depth = 2 \b");
          if (kcountHFnegativedirectionReconoiseD2 == 4)
            HFnegativedirectionReconoiseD2->SetXTitle("D for HF- jeta =-38; depth = 2 \b");
          if (kcountHFnegativedirectionReconoiseD2 == 5)
            HFnegativedirectionReconoiseD2->SetXTitle("D for HF- jeta =-37; depth = 2 \b");
          if (kcountHFnegativedirectionReconoiseD2 == 6)
            HFnegativedirectionReconoiseD2->SetXTitle("D for HF- jeta =-36; depth = 2 \b");
          if (kcountHFnegativedirectionReconoiseD2 == 7)
            HFnegativedirectionReconoiseD2->SetXTitle("D for HF- jeta =-35; depth = 2 \b");
          if (kcountHFnegativedirectionReconoiseD2 == 8)
            HFnegativedirectionReconoiseD2->SetXTitle("D for HF- jeta =-34; depth = 2 \b");
          if (kcountHFnegativedirectionReconoiseD2 == 9)
            HFnegativedirectionReconoiseD2->SetXTitle("D for HF- jeta =-33; depth = 2 \b");
          if (kcountHFnegativedirectionReconoiseD2 == 10)
            HFnegativedirectionReconoiseD2->SetXTitle("D for HF- jeta =-32; depth = 2 \b");
          if (kcountHFnegativedirectionReconoiseD2 == 11)
            HFnegativedirectionReconoiseD2->SetXTitle("D for HF- jeta =-31; depth = 2 \b");
          if (kcountHFnegativedirectionReconoiseD2 == 12)
            HFnegativedirectionReconoiseD2->SetXTitle("D for HF- jeta =-30; depth = 2 \b");
          if (kcountHFnegativedirectionReconoiseD2 == 13)
            HFnegativedirectionReconoiseD2->SetXTitle("D for HF- jeta =-29; depth = 2 \b");
          HFnegativedirectionReconoiseD2->Draw("Error");
          kcountHFnegativedirectionReconoiseD2++;
          if (kcountHFnegativedirectionReconoiseD2 > 13)
            break;  // 4x6 = 24
        }           //ccctest>0

      }  // for i
    }    //if(jeta-41 >= -41 && jeta-41 <= -29)
  }      //for jeta
  /////////////////
  c3x5->Update();
  c3x5->Print("DreconoiseNegativeDirectionhistD1PhiSymmetryDepth2HF.png");
  c3x5->Clear();
  // clean-up
  if (h2CeffHFnegativedirectionReconoiseD2)
    delete h2CeffHFnegativedirectionReconoiseD2;

  //=====================================================================       END of Reconoise HF for phi-symmetry
  //=====================================================================       END of Reconoise HF for phi-symmetry
  //=====================================================================       END of Reconoise HF for phi-symmetry
  //============================================================================================================       END of Reconoise for phi-symmetry
  //============================================================================================================       END of Reconoise for phi-symmetry
  //============================================================================================================       END of Reconoise for phi-symmetry

  //====================================================================================================================================================       END for phi-symmetry
  //====================================================================================================================================================       END for phi-symmetry
  //====================================================================================================================================================       END for phi-symmetry
  //====================================================================================================================================================

  std::cout << " We are here to print 2017 MAPs " << std::endl;
  //======================================================================

  //======================================================================
  /// Prepare maps of good/bad channels:

  TH2F *Map_ALL = new TH2F("Map_All", "Map_all", 82, -41, 40, 72, 0, 71);
  int nx = Map_ALL->GetXaxis()->GetNbins();
  int ny = Map_ALL->GetYaxis()->GetNbins();
  int NBad = 0;
  int NWarn = 0;
  int NCalib = 0;
  int NPed = 0;
  //    int Eta[3][10000]={0};
  int Eta[4][10000] = {0};
  int Phi[4][10000] = {0};
  int Sub[4][10000] = {0};
  int Depth[4][10000] = {0};
  string Comment[4][10000] = {""};
  string Text[33] = {"", "Cm", "Am", "Wm", "Rm", "TNm", "TXm", "", "", "", "", "Cc", "Ac", "Wc", "Rc", "TNc", "TXc",
                     "", "",   "",   "",   "GS", "",    "",    "", "", "", "", "",   "",   "",   "Pm", "pWm"};
  int flag_W = 0;
  int flag_B = 0;
  int flag_P = 0;

  for (int i = 1; i <= nx; i++) {           //Eta
    for (int j = 1; j <= ny; j++) {         // Phi
      for (int sub = 1; sub <= 4; sub++) {  //Subdetector: 1-HB, 2-HE, 3-HO, 4-HF
                                            //	     int k_min[5]={0,1,1,4,1}; // minimum depth for each subdet
        //	     int k_max[5]={0,2,3,4,2}; // maximum depth for each subdet
        //	     int k_max[5]={0,2,7,4,4}; // maximum depth for each subdet
        for (int k = k_min[sub]; k <= k_max[sub]; k++) {  //Depth
          if (Map_SUB[sub][k]->GetBinContent(i, j) != 0) {
            Map_SUB[sub][k]->SetBinContent(i, j, 0.5);
            Map_ALL->SetBinContent(i, j, 0.5);
          }
        }
      }
    }
  }

  for (int i = 1; i <= nx; i++) {           //Eta
    for (int j = 1; j <= ny; j++) {         // Phi
      for (int sub = 1; sub <= 4; sub++) {  //Subdetector: 1-HB, 2-HE, 3-HF, 4-HO
                                            //	     int k_min[5]={0,1,1,4,1}; // minimum depth for each subdet
        //	     int k_max[5]={0,2,3,4,2}; // maximum depth for each subdet
        //	     int k_max[5]={0,2,7,4,4}; // maximum depth for each subdet
        for (int k = k_min[sub]; k <= k_max[sub]; k++) {  //Depth
          flag_W = 0;
          flag_B = 0;
          flag_P = 0;
          for (int test = 1; test <= 6; test++) {  //Test: 1-Wm, 2-Rm, etc
                                                   //Bad
            if (Map_Ampl[test][sub][k]->GetBinContent(i, j) >
                0.1) {  //Rate 0.1 for displaying  on whole detector map and subdetector map
              Map_ALL->SetBinContent(i, j, 1.);
              Map_SUB[sub][k]->SetBinContent(i, j, 1.);
              if (flag_B == 0) {
                NBad += 1;
                Eta[2][NBad] = i - 41;
                Phi[2][NBad] = j - 1;
                Sub[2][NBad] = sub;
                Depth[2][NBad] = k;
                Comment[2][NBad] = Text[test];
              } else
                Comment[2][NBad] += ", " + Text[test];
              flag_B = 1;
              //		      cout<<"Map_Ampl["<<test<<"]["<<sub<<"]["<<k<<"]->GetBinContent("<<i<<","<<j<<")= "<<Map_Ampl[test][sub][k]->GetBinContent(i,j)<<endl;
            }
            //Warning
            /* 
                   if ((Map_Ampl[test][sub][k]->GetBinContent(i,j) != 0.)&&(Map_Ampl[test][sub][k]->GetBinContent(i,j) < 0.001) )  {
	              if (Map_SUB[sub][k]->GetBinContent(i,j)!=1.) Map_SUB[sub][k]->SetBinContent(i,j,0.75);
		      if (Map_ALL->GetBinContent(i,j)!=1.) Map_ALL->SetBinContent(i,j,0.75);
		      if (flag_W == 0) {
		         NWarn +=1; 
		         Eta[1][NWarn]=i-41;
		         Phi[1][NWarn]=j-1;
			 Sub[1][NWarn]=sub;
		         Depth[1][NWarn]=k;
		         Comment[1][NWarn]=Text[test]; 
		      } 
		      else Comment[1][NWarn]+=", "+Text[test];
		      flag_W = 1;		      		 
//		      cout<<"Map_Ampl["<<test<<"]["<<sub<<"]["<<k<<"]->GetBinContent("<<i<<","<<j<<")= "<<Map_Ampl[test][sub][k]->GetBinContent(i,j)<<endl;
                   }		   
*/

          }  //end test

          //Calib
          /*
		 for (int test=11;test<=16;test++) { //Test: 1-2.E, 2-2.F, etc
                   if (Map_Ampl[test][sub][k]->GetBinContent(i,j) != 0.)  {
//	              if (Map_SUB[sub][k]->GetBinContent(i,j)!=1.0) Map_SUB[sub][k]->SetBinContent(i,j,0.3);
//		      if (Map_ALL->GetBinContent(i,j)!=1.) Map_ALL->SetBinContent(i,j,0.3);
		      if (flag_W == 0) {
		         NWarn +=1; 
		         Eta[1][NWarn]=i-41;
		         Phi[1][NWarn]=j-1;
			 Sub[1][NWarn]=sub;
		         Depth[1][NWarn]=k;
		         Comment[1][NWarn]=Text[test]; 
		      } 
		      else Comment[1][NWarn]+=", "+Text[test];
		      flag_W = 1;		      		 
//		      cout<<"Map_Ampl["<<test<<"]["<<sub<<"]["<<k<<"]->GetBinContent("<<i<<","<<j<<")= "<<Map_Ampl[test][sub][k]->GetBinContent(i,j)<<endl;
                  } 
		} //end test
*/
          //Gain stabil
          for (int test = 21; test <= 21; test++) {
            if (abs(Map_Ampl[test][sub][k]->GetBinContent(i, j)) > porog[sub]) {
              if (Map_SUB[sub][k]->GetBinContent(i, j) != 1.0)
                Map_SUB[sub][k]->SetBinContent(i, j, 0.75);
              if (Map_ALL->GetBinContent(i, j) != 1.) {
                Map_ALL->SetBinContent(i, j, 0.75);
                if (flag_W == 0) {
                  NWarn += 1;
                  Eta[1][NWarn] = i - 41;
                  Phi[1][NWarn] = j - 1;
                  Sub[1][NWarn] = sub;
                  Depth[1][NWarn] = k;
                  Comment[1][NWarn] = Text[test];
                } else
                  Comment[1][NWarn] += ", " + Text[test];
                flag_W = 1;

                cout << "Map_Ampl[" << test << "][" << sub << "][" << k << "]->GetBinContent(" << i << "," << j
                     << ")= " << Map_Ampl[test][sub][k]->GetBinContent(i, j) << endl;
              }
            }
          }  //end test

          //Pedestals
          for (int test = 31; test <= 32; test++) {
            if (Map_Ampl[test][sub][k]->GetBinContent(i, j) > 0.1) {
              //	              if (Map_SUB[sub][k]->GetBinContent(i,j)!=1.0) Map_SUB[sub][k]->SetBinContent(i,j,0.75);
              //		      if (Map_ALL->GetBinContent(i,j)!=1.)  Map_ALL->SetBinContent(i,j,0.75);
              if (flag_P == 0) {
                NPed += 1;
                Eta[3][NPed] = i - 41;
                Phi[3][NPed] = j - 1;
                Sub[3][NPed] = sub;
                Depth[3][NPed] = k;
                Comment[3][NPed] = Text[test];
              } else
                Comment[3][NPed] += ", " + Text[test];
              flag_P = 1;

              //		      cout<<"Map_Ampl["<<test<<"]["<<sub<<"]["<<k<<"]->GetBinContent("<<i<<","<<j<<")= "<<Map_Ampl[test][sub][k]->GetBinContent(i,j)<<endl;
            }
          }  //end test

        }                               //end Depth
      }                                 //end Sub
    }                                   //end Phi
  }                                     //end Eta
                                        // subdet maps
  for (int sub = 1; sub <= 4; sub++) {  //Subdetector: 1-HB, 2-HE, 3-HF, 4-HO

    std::cout << " 2017 MAPS_SUB " << sub << std::endl;
    //     if (sub==1) cHB->Divide(2,1);
    if (sub == 1)
      cHB->Divide(2, 2);
    //     if (sub==2) cHE->Divide(3,1);
    if (sub == 2)
      cHE->Divide(3, 3);
    if (sub == 3)
      cONE->Divide(1, 1);
    //     if (sub==4) cHB->Divide(2,1);
    if (sub == 4)
      cHF->Divide(2, 2);
    //       int k_min[5]={0,1,1,4,1}; // minimum depth for each subdet
    //     int k_max[5]={0,2,3,4,2}; // maximum depth for each subdet
    //       int k_max[5]={0,2,7,4,4}; // maximum depth for each subdet
    for (int k = k_min[sub]; k <= k_max[sub]; k++) {  //Depth
      if (sub == 1)
        cHB->cd(k);
      if (sub == 2)
        cHE->cd(k);
      if (sub == 3)
        cONE->cd(k - 3);
      if (sub == 4)
        cHF->cd(k);
      gPad->SetGridy();
      gPad->SetGridx();
      //          gPad->SetLogz();
      //          gStyle->SetTitleOffset(0.5, "Y");
      if (sub == 1)
        sprintf(str, "HB, Depth%d \b", k);
      if (sub == 2)
        sprintf(str, "HE, Depth%d \b", k);
      if (sub == 3)
        sprintf(str, "HO, Depth%d \b", k);
      if (sub == 4)
        sprintf(str, "HF, Depth%d \b", k);
      Map_SUB[sub][k]->SetTitle(str);
      Map_SUB[sub][k]->SetXTitle("#eta \b");
      Map_SUB[sub][k]->SetYTitle("#phi \b");
      Map_SUB[sub][k]->Draw("COL");
      Map_SUB[sub][k]->GetYaxis()->SetRangeUser(0, 72.);
      Map_SUB[sub][k]->GetZaxis()->SetRangeUser(0., 1.);
      if (sub == 1) {
        cHB->Modified();
        cHB->Update();
      }
      if (sub == 2) {
        cHE->Modified();
        cHE->Update();
      }
      if (sub == 3) {
        cONE->Modified();
        cONE->Update();
      }
      if (sub == 4) {
        cHF->Modified();
        cHF->Update();
      }
    }  //end depth
    if (sub == 1) {
      cHB->Print("MAPHB.png");
      cHB->Clear();
    }
    if (sub == 2) {
      cHE->Print("MAPHE.png");
      cHE->Clear();
    }
    if (sub == 3) {
      cONE->Print("MAPHO.png");
      cONE->Clear();
    }
    if (sub == 4) {
      cHF->Print("MAPHF.png");
      cHF->Clear();
    }
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //  TCanvas *cmain1 = new TCanvas("cmain1","MAP",200,10,1400,1800);
  TCanvas *cmain1 = new TCanvas("cmain1", "MAP", 250, 10, 1450, 1410);
  cmain1->Divide(2, 2);

  cmain1->cd(1);
  TH1F *JDBEYESJ0 = (TH1F *)dir->FindObjectAny("h_totalAmplitudeHBperEvent");
  JDBEYESJ0->SetStats(0);
  JDBEYESJ0->SetMarkerStyle(20);
  JDBEYESJ0->SetMarkerSize(0.8);
  JDBEYESJ0->GetYaxis()->SetLabelSize(0.04);
  JDBEYESJ0->SetXTitle("iEvent \b");
  JDBEYESJ0->SetYTitle("totalAmplitude perEvent \b");
  JDBEYESJ0->SetTitle("HB \b");
  JDBEYESJ0->SetMarkerColor(2);
  JDBEYESJ0->SetLineColor(1);
  JDBEYESJ0->SetMinimum(0.8);
  JDBEYESJ0->Draw("HIST same P0");

  cmain1->cd(2);
  TH1F *JDBEYESJ1 = (TH1F *)dir->FindObjectAny("h_totalAmplitudeHEperEvent");
  JDBEYESJ1->SetStats(0);
  JDBEYESJ1->SetMarkerStyle(20);
  JDBEYESJ1->SetMarkerSize(0.8);
  JDBEYESJ1->GetYaxis()->SetLabelSize(0.04);
  JDBEYESJ1->SetXTitle("iEvent \b");
  JDBEYESJ1->SetYTitle("totalAmplitude perEvent \b");
  JDBEYESJ1->SetTitle("HE \b");
  JDBEYESJ1->SetMarkerColor(2);
  JDBEYESJ1->SetLineColor(1);
  JDBEYESJ1->SetMinimum(0.8);
  JDBEYESJ1->Draw("HIST same P0");

  cmain1->cd(3);
  TH1F *JDBEYESJ2 = (TH1F *)dir->FindObjectAny("h_totalAmplitudeHFperEvent");
  JDBEYESJ2->SetStats(0);
  JDBEYESJ2->SetMarkerStyle(20);
  JDBEYESJ2->SetMarkerSize(0.8);
  JDBEYESJ2->GetYaxis()->SetLabelSize(0.04);
  JDBEYESJ2->SetXTitle("iEvent \b");
  JDBEYESJ2->SetYTitle("totalAmplitude perEvent \b");
  JDBEYESJ2->SetTitle("HF \b");
  JDBEYESJ2->SetMarkerColor(2);
  JDBEYESJ2->SetLineColor(1);
  JDBEYESJ2->SetMinimum(0.8);
  JDBEYESJ2->Draw("HIST same P0");

  cmain1->cd(4);
  TH1F *JDBEYESJ3 = (TH1F *)dir->FindObjectAny("h_totalAmplitudeHOperEvent");
  JDBEYESJ3->SetStats(0);
  JDBEYESJ3->SetMarkerStyle(20);
  JDBEYESJ3->SetMarkerSize(0.8);
  JDBEYESJ3->GetYaxis()->SetLabelSize(0.04);
  JDBEYESJ3->SetXTitle("iEvent \b");
  JDBEYESJ3->SetYTitle("totalAmplitude perEvent \b");
  JDBEYESJ3->SetTitle("HO \b");
  JDBEYESJ3->SetMarkerColor(2);
  JDBEYESJ3->SetLineColor(1);
  JDBEYESJ3->SetMinimum(0.8);
  JDBEYESJ3->Draw("HIST same P0");

  cmain1->Modified();
  cmain1->Update();
  cmain1->Print("EVENTDEPENDENCE.png");

  std::cout << " EVENTDEPENDENCE " << std::endl;

  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // ALL SubDet
  gStyle->SetOptTitle(0);
  TCanvas *cmain = new TCanvas("cmain", "MAP", 1000, 1000);
  //cmain->cd(1);
  gPad->SetGridy();
  gPad->SetGridx();
  //   gPad->SetLogz();
  Map_ALL->SetTitleOffset(1.3, "Y");
  Map_ALL->SetXTitle("#eta \b");
  Map_ALL->SetYTitle("#phi \b");
  Map_ALL->Draw("COL");
  Map_ALL->GetYaxis()->SetRangeUser(0, 72.);
  Map_ALL->GetZaxis()->SetRangeUser(0, 1.);
  cmain->Modified();
  cmain->Update();
  cmain->Print("MAP.png");

  std::cout << "********      MAP_ALL  done" << std::endl;
  std::cout << "********" << std::endl;

  std::cout << "********" << std::endl;
  std::cout << "************    Start creating each test kind for each subdet html pages:" << std::endl;

  //======================================================================

  //======================================================================
  // Creating each test kind for each subdet html pages:
  std::string raw_class, raw_class1, raw_class2, raw_class3;
  int ind = 0;

  for (int sub = 1; sub <= 4; sub++) {  //Subdetector: 1-HB, 2-HE, 3-HF, 4-HO
    ofstream htmlFileT, htmlFileC, htmlFileD, htmlFileP, htmlFileS, htmlFileM, htmlFileR, htmlFileN;
    if (sub == 1) {
      htmlFileT.open("HB_Tile.html");
      htmlFileC.open("HB_Calib.html");
      htmlFileD.open("HB_Drift.html");
      htmlFileP.open("HB_Pedestals.html");
      htmlFileS.open("HB_Shapes.html");
      htmlFileM.open("HB_PhiSymmetryDigi.html");
      htmlFileR.open("HB_PhiSymmetryRecoSignal.html");
      htmlFileN.open("HB_PhiSymmetryRecoNoise.html");
    }
    if (sub == 2) {
      htmlFileT.open("HE_Tile.html");
      htmlFileC.open("HE_Calib.html");
      htmlFileD.open("HE_Drift.html");
      htmlFileP.open("HE_Pedestals.html");
      htmlFileS.open("HE_Shapes.html");
      htmlFileM.open("HE_PhiSymmetryDigi.html");
      htmlFileR.open("HE_PhiSymmetryRecoSignal.html");
      htmlFileN.open("HE_PhiSymmetryRecoNoise.html");
    }
    if (sub == 3) {
      htmlFileT.open("HO_Tile.html");
      htmlFileC.open("HO_Calib.html");
      htmlFileD.open("HO_Drift.html");
      htmlFileP.open("HO_Pedestals.html");
      htmlFileS.open("HO_Shapes.html");
    }
    if (sub == 4) {
      htmlFileT.open("HF_Tile.html");
      htmlFileC.open("HF_Calib.html");
      htmlFileD.open("HF_Drift.html");
      htmlFileP.open("HF_Pedestals.html");
      htmlFileS.open("HF_Shapes.html");
      htmlFileM.open("HF_PhiSymmetryDigi.html");
      htmlFileR.open("HF_PhiSymmetryRecoSignal.html");
      htmlFileN.open("HF_PhiSymmetryRecoNoise.html");
    }

    // Megatile channels
    htmlFileT << "</html><html xmlns=\"http://www.w3.org/1999/xhtml\">" << std::endl;
    htmlFileT << "<head>" << std::endl;
    htmlFileT << "<meta http-equiv=\"Content-Type\" content=\"text/html\"/>" << std::endl;
    htmlFileT << "<title> Remote Monitoring Tool </title>" << std::endl;
    htmlFileT << "<style type=\"text/css\">" << std::endl;
    htmlFileT << " body,td{ background-color: #FFFFCC; font-family: arial, arial ce, helvetica; font-size: 12px; }"
              << std::endl;
    htmlFileT << "   td.s0 { font-family: arial, arial ce, helvetica; }" << std::endl;
    htmlFileT << "   td.s1 { font-family: arial, arial ce, helvetica; font-weight: bold; background-color: #FFC169; "
                 "text-align: center;}"
              << std::endl;
    htmlFileT << "   td.s2 { font-family: arial, arial ce, helvetica; background-color: #eeeeee; }" << std::endl;
    htmlFileT << "   td.s3 { font-family: arial, arial ce, helvetica; background-color: #d0d0d0; }" << std::endl;
    htmlFileT << "   td.s4 { font-family: arial, arial ce, helvetica; background-color: #FFC169; }" << std::endl;
    htmlFileT << "</style>" << std::endl;
    htmlFileT << "<body>" << std::endl;

    if (sub == 1)
      htmlFileT << "<h1> Criteria for megatile channels for HB, RUN = " << runnumber << " </h1>" << std::endl;
    if (sub == 2)
      htmlFileT << "<h1> Criteria for megatile channels for HE, RUN = " << runnumber << " </h1>" << std::endl;
    if (sub == 3)
      htmlFileT << "<h1> Criteria for megatile channels for HO, RUN = " << runnumber << " </h1>" << std::endl;
    if (sub == 4)
      htmlFileT << "<h1> Criteria for megatile channels for HF, RUN = " << runnumber << " </h1>" << std::endl;
    htmlFileT << "<br>" << std::endl;

    // Test Entries

    htmlFileT << "<h2> 0. Entries for each channel.</h3>" << std::endl;
    htmlFileT << "<h3> 0.A. Entries in each channel for each depth.</h3>" << std::endl;
    htmlFileT << "<h4> Channel legend: color is rate of entries </h4>" << std::endl;
    if (sub == 1)
      htmlFileT << " <img src=\"MapRateEntryHB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileT << " <img src=\"MapRateEntryHE.png\" />" << std::endl;
    if (sub == 3)
      htmlFileT << " <img src=\"MapRateEntryHO.png\" />" << std::endl;
    if (sub == 4)
      htmlFileT << " <img src=\"MapRateEntryHF.png\" />" << std::endl;
    htmlFileT << "<br>" << std::endl;

    // Test Cm
    htmlFileT << "<h2> 1. Cm criterion: CapID errors for each channel.</h3>" << std::endl;
    htmlFileT << "<h3> 1.A. Rate of CapId failures in each channel for each depth.</h3>" << std::endl;
    htmlFileT << "<h4> Channel legend: white - good, other colour - bad. </h4>" << std::endl;
    if (sub == 1)
      htmlFileT << " <img src=\"MapRateCapIDHB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileT << " <img src=\"MapRateCapIDHE.png\" />" << std::endl;
    if (sub == 3)
      htmlFileT << " <img src=\"MapRateCapIDHO.png\" />" << std::endl;
    if (sub == 4)
      htmlFileT << " <img src=\"MapRateCapIDHF.png\" />" << std::endl;
    htmlFileT << "<br>" << std::endl;

    // Am
    htmlFileT << "<h2> 2. Am criterion: ADC amplitude collected over all TSs(Full Amplitude) for each channel. </h3>"
              << std::endl;
    htmlFileT << "<h3> 2.A. Full ADC amplitude distribution over all events, channels and depths.</h3>" << std::endl;
    htmlFileT << "<h4> Legend: Bins less " << MIN_M[2][sub] << " correpond to bad ADC amplitude </h4>" << std::endl;
    if (sub == 1)
      htmlFileT << " <img src=\"HistAmplHB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileT << " <img src=\"HistAmplHE.png\" />" << std::endl;
    if (sub == 3)
      htmlFileT << " <img src=\"HistAmplHO.png\" />" << std::endl;
    if (sub == 4)
      htmlFileT << " <img src=\"HistAmplHF.png\" />" << std::endl;
    htmlFileT << "<br>" << std::endl;
    htmlFileT << "<h3> 2.B. Rate of bad ADC amplitude (<" << MIN_M[2][sub] << ") in each channel for each depth. </h3>"
              << std::endl;
    htmlFileT << "<h4> Channel legend: white - good, other colours - bad. </h4>" << std::endl;
    if (sub == 1)
      htmlFileT << " <img src=\"MapRateAmplHB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileT << " <img src=\"MapRateAmplHE.png\" />" << std::endl;
    if (sub == 3)
      htmlFileT << " <img src=\"MapRateAmplHO.png\" />" << std::endl;
    if (sub == 4)
      htmlFileT << " <img src=\"MapRateAmplHF.png\" />" << std::endl;
    htmlFileT << "<br>" << std::endl;

    // Test Wm
    htmlFileT << "<h2> 3. Wm criterion: RMS (width) of ADC amplutude for each channel.</h3>" << std::endl;
    htmlFileT << "<h3> 3.A. RMS distribution over all events, channel and depth.</h3>" << std::endl;
    htmlFileT << "<h4> Legend: Bins less " << MIN_M[3][sub] << " and more " << MAX_M[3][sub]
              << " correpond to bad RMS </h4>" << std::endl;
    if (sub == 1)
      htmlFileT << " <img src=\"HistRMSHB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileT << " <img src=\"HistRMSHE.png\" />" << std::endl;
    if (sub == 3)
      htmlFileT << " <img src=\"HistRMSHO.png\" />" << std::endl;
    if (sub == 4)
      htmlFileT << " <img src=\"HistRMSHF.png\" />" << std::endl;
    htmlFileT << "<br>" << std::endl;
    htmlFileT << "<h3> 3.B. Rate of bad RMS (<" << MIN_M[3][sub] << ",>" << MAX_M[3][sub]
              << ") in each channel for each depth.</h3>" << std::endl;
    htmlFileT << "<h4> Channel legend: white - good, other colour - bad. </h4>" << std::endl;
    if (sub == 1)
      htmlFileT << " <img src=\"MapRateRMSHB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileT << " <img src=\"MapRateRMSHE.png\" />" << std::endl;
    if (sub == 3)
      htmlFileT << " <img src=\"MapRateRMSHO.png\" />" << std::endl;
    if (sub == 4)
      htmlFileT << " <img src=\"MapRateRMSHF.png\" />" << std::endl;
    htmlFileT << "<br>" << std::endl;

    // Rm
    htmlFileT << "<h2> 4. Rm criterion: Ratio ADC value sum over four near maximum (-2, -1, max, +1) TS to ADC value "
                 "sum over all TS for each channel. </h3>"
              << std::endl;
    htmlFileT << "<h3> 4.A. Ratio distribution over all events, channels and depths.</h3>" << std::endl;
    htmlFileT << "<h4> Legend: Bins less " << MIN_M[4][sub] << " and more " << MAX_M[4][sub]
              << " correpond to bad ratio </h4>" << std::endl;
    if (sub == 1)
      htmlFileT << " <img src=\"Hist43TStoAllTSHB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileT << " <img src=\"Hist43TStoAllTSHE.png\" />" << std::endl;
    if (sub == 3)
      htmlFileT << " <img src=\"Hist43TStoAllTSHO.png\" />" << std::endl;
    if (sub == 4)
      htmlFileT << " <img src=\"Hist43TStoAllTSHF.png\" />" << std::endl;
    htmlFileT << "<br>" << std::endl;
    htmlFileT << "<h3> 4.B. Rate of bad ratio (<" << MIN_M[4][sub] << ", >" << MAX_M[4][sub]
              << ") in each channel for each depth.</h3>" << std::endl;
    htmlFileT << "<h4> Channel legend: white - good, other colour - bad. </h4>" << std::endl;
    if (sub == 1)
      htmlFileT << " <img src=\"MapRate43TStoAllTSHB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileT << " <img src=\"MapRate43TStoAllTSHE.png\" />" << std::endl;
    if (sub == 3)
      htmlFileT << " <img src=\"MapRate43TStoAllTSHO.png\" />" << std::endl;
    if (sub == 4)
      htmlFileT << " <img src=\"MapRate43TStoAllTSHF.png\" />" << std::endl;
    htmlFileT << "<br>" << std::endl;

    // TNm
    htmlFileT << "<h2> 5. TNm criterion: Mean TS position for each channel.</h3>" << std::endl;
    htmlFileT << "<h3> 5.A. TN position distribution over all events, channels and depths.</h3>" << std::endl;
    htmlFileT << "<h4> Legend: Bins less " << MIN_M[5][sub] << " and more " << MAX_M[5][sub]
              << " correpond to bad mean position </h4>" << std::endl;
    if (sub == 1)
      htmlFileT << " <img src=\"HistMeanPosHB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileT << " <img src=\"HistMeanPosHE.png\" />" << std::endl;
    if (sub == 3)
      htmlFileT << " <img src=\"HistMeanPosHO.png\" />" << std::endl;
    if (sub == 4)
      htmlFileT << " <img src=\"HistMeanPosHF.png\" />" << std::endl;
    htmlFileT << "<br>" << std::endl;
    htmlFileT << "<h3> 5.B. Rate of bad TN position  (<" << MIN_M[5][sub] << ", >" << MAX_M[5][sub]
              << ") in each channel for each depth. </h3>" << std::endl;
    htmlFileT << "<h4> Channel legend: white - good, other colour - bad. </h4>" << std::endl;
    if (sub == 1)
      htmlFileT << " <img src=\"MapRateMeanPosHB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileT << " <img src=\"MapRateMeanPosHE.png\" />" << std::endl;
    if (sub == 3)
      htmlFileT << " <img src=\"MapRateMeanPosHO.png\" />" << std::endl;
    if (sub == 4)
      htmlFileT << " <img src=\"MapRateMeanPosHF.png\" />" << std::endl;
    htmlFileT << "<br>" << std::endl;

    // TXm
    htmlFileT << "<h2> 6.TXm criterion: Maximum TS position for each channel.</h3>" << std::endl;
    htmlFileT << "<h3> 6.A. TX position distribution over all events, channel and depth.</h3>" << std::endl;
    htmlFileT << "<h4> Legend: Bins less " << MIN_M[6][sub] << " and more " << MAX_M[6][sub]
              << " correpond to bad position </h4>" << std::endl;
    if (sub == 1)
      htmlFileT << " <img src=\"HistMaxPosHB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileT << " <img src=\"HistMaxPosHE.png\" />" << std::endl;
    if (sub == 3)
      htmlFileT << " <img src=\"HistMaxPosHO.png\" />" << std::endl;
    if (sub == 4)
      htmlFileT << " <img src=\"HistMaxPosHF.png\" />" << std::endl;
    htmlFileT << "<br>" << std::endl;
    htmlFileT << "<h3> 6.B. Rate of bad TX position  (<" << MIN_M[6][sub] << ", >" << MAX_M[6][sub]
              << ") in each channel for each depth. </h3>" << std::endl;
    htmlFileT << "<h4> Channel legend: white - good, other colour - bad. </h4>" << std::endl;
    if (sub == 1)
      htmlFileT << " <img src=\"MapRateMaxPosHB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileT << " <img src=\"MapRateMaxPosHE.png\" />" << std::endl;
    if (sub == 3)
      htmlFileT << " <img src=\"MapRateMaxPosHO.png\" />" << std::endl;
    if (sub == 4)
      htmlFileT << " <img src=\"MapRateMaxPosHF.png\" />" << std::endl;
    htmlFileT << "<br>" << std::endl;

    htmlFileT << "</body> " << std::endl;
    htmlFileT << "</html> " << std::endl;
    htmlFileT.close();

    //Calibration channels
    htmlFileC << "</html><html xmlns=\"http://www.w3.org/1999/xhtml\">" << std::endl;
    htmlFileC << "<head>" << std::endl;
    htmlFileC << "<meta http-equiv=\"Content-Type\" content=\"text/html\"/>" << std::endl;
    htmlFileC << "<title> Raw Data Analyser </title>" << std::endl;
    htmlFileC << "<style type=\"text/css\">" << std::endl;
    htmlFileC << " body,td{ background-color: #FFFFCC; font-family: arial, arial ce, helvetica; font-size: 12px; }"
              << std::endl;
    htmlFileC << "   td.s0 { font-family: arial, arial ce, helvetica; }" << std::endl;
    htmlFileC << "   td.s1 { font-family: arial, arial ce, helvetica; font-weight: bold; background-color: #FFC169; "
                 "text-align: center;}"
              << std::endl;
    htmlFileC << "   td.s2 { font-family: arial, arial ce, helvetica; background-color: #eeeeee; }" << std::endl;
    htmlFileC << "   td.s3 { font-family: arial, arial ce, helvetica; background-color: #d0d0d0; }" << std::endl;
    htmlFileC << "   td.s4 { font-family: arial, arial ce, helvetica; background-color: #FFC169; }" << std::endl;
    htmlFileC << "</style>" << std::endl;
    htmlFileC << "<body>" << std::endl;

    if (sub == 1)
      htmlFileC << "<h1> Criteria for calibration channels for HB, RUN = " << runnumber << " </h1>" << std::endl;
    if (sub == 2)
      htmlFileC << "<h1> Criteria for calibration channels for HE, RUN = " << runnumber << " </h1>" << std::endl;
    if (sub == 3)
      htmlFileC << "<h1> Criteria for calibration channels for HO, RUN = " << runnumber << " </h1>" << std::endl;
    if (sub == 4)
      htmlFileC << "<h1> Criteria for calibration channels for HF, RUN = " << runnumber << " </h1>" << std::endl;
    htmlFileC << "<br>" << std::endl;

    // Test Entries

    htmlFileC << "<h2> 0. Entries for each channel.</h3>" << std::endl;
    htmlFileC << "<h3> 0.A. Entries in each channel for each depth.</h3>" << std::endl;
    htmlFileC << "<h4> Channel legend: color is rate of entries </h4>" << std::endl;
    if (sub == 1)
      htmlFileC << " <img src=\"MapRateCalibEntryHB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileC << " <img src=\"MapRateCalibEntryHE.png\" />" << std::endl;
    if (sub == 3)
      htmlFileC << " <img src=\"MapRateCalibEntryHO.png\" />" << std::endl;
    if (sub == 4)
      htmlFileC << " <img src=\"MapRateCalibEntryHF.png\" />" << std::endl;
    htmlFileC << "<br>" << std::endl;

    // Test Cc
    htmlFileC << "<h2> 1. Cc criterion: CapID errors for each channel.</h3>" << std::endl;
    htmlFileC << "<h3> 1.A. Rate of CapId failures in each channel for each depth.</h3>" << std::endl;
    htmlFileC << "<h4> Channel legend: white - good, other colour - bad. </h4>" << std::endl;
    if (sub == 1)
      htmlFileC << " <img src=\"MapRateCapCalibHB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileC << " <img src=\"MapRateCapCalibHE.png\" />" << std::endl;
    if (sub == 3)
      htmlFileC << " <img src=\"MapRateCapCalibHO.png\" />" << std::endl;
    if (sub == 4)
      htmlFileC << " <img src=\"MapRateCapCalibHF.png\" />" << std::endl;
    htmlFileC << "<br>" << std::endl;

    // Ac
    htmlFileC << "<h2> 2. Ac criterion: ADC amplitude collected over all TSs(Full Amplitude) for each channel. </h3>"
              << std::endl;
    htmlFileC << "<h3> 2.A. Full ADC amplitude distribution over all events, channels and depths.</h3>" << std::endl;
    htmlFileC << "<h4> Legend: Bins less " << MIN_C[2][sub] << " correpond to bad ADC amplitude </h4>" << std::endl;
    if (sub == 1)
      htmlFileC << " <img src=\"HistAmplCalibHB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileC << " <img src=\"HistAmplCalibHE.png\" />" << std::endl;
    if (sub == 3)
      htmlFileC << " <img src=\"HistAmplCalibHO.png\" />" << std::endl;
    if (sub == 4)
      htmlFileC << " <img src=\"HistAmplCalibHF.png\" />" << std::endl;
    htmlFileC << "<br>" << std::endl;
    htmlFileC << "<h3> 2.B. Rate of bad ADC amplitude (<" << MIN_C[2][sub] << ") in each channel for each depth. </h3>"
              << std::endl;
    htmlFileC << "<h4> Channel legend: white - good, other colours - bad. </h4>" << std::endl;
    if (sub == 1)
      htmlFileC << " <img src=\"MapRateAmplCalibHB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileC << " <img src=\"MapRateAmplCalibHE.png\" />" << std::endl;
    if (sub == 3)
      htmlFileC << " <img src=\"MapRateAmplCalibHO.png\" />" << std::endl;
    if (sub == 4)
      htmlFileC << " <img src=\"MapRateAmplCalibHF.png\" />" << std::endl;
    htmlFileC << "<br>" << std::endl;

    // Test Wc
    htmlFileC << "<h2> 3. Wc criterion: RMS (width) of ADC amplutude for each channel.</h3>" << std::endl;
    htmlFileC << "<h3> 3.A. W distribution over all events, channel and depth.</h3>" << std::endl;
    htmlFileC << "<h4> Legend: Bins less " << MIN_C[3][sub] << " and more " << MAX_C[3][sub]
              << " correpond to bad RMS </h4>" << std::endl;
    if (sub == 1)
      htmlFileC << " <img src=\"HistRMSCalibHB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileC << " <img src=\"HistRMSCalibHE.png\" />" << std::endl;
    if (sub == 3)
      htmlFileC << " <img src=\"HistRMSCalibHO.png\" />" << std::endl;
    if (sub == 4)
      htmlFileC << " <img src=\"HistRMSCalibHF.png\" />" << std::endl;
    htmlFileC << "<br>" << std::endl;
    htmlFileC << "<h3> 3.B. Rate of bad W (<" << MIN_C[3][sub] << ",>" << MAX_C[3][sub]
              << ") in each channel for each depth.</h3>" << std::endl;
    htmlFileC << "<h4> Channel legend: white - good, other colour - bad. </h4>" << std::endl;
    if (sub == 1)
      htmlFileC << " <img src=\"MapRateRMSCalibHB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileC << " <img src=\"MapRateRMSCalibHE.png\" />" << std::endl;
    if (sub == 3)
      htmlFileC << " <img src=\"MapRateRMSCalibHO.png\" />" << std::endl;
    if (sub == 4)
      htmlFileC << " <img src=\"MapRateRMSCalibHF.png\" />" << std::endl;
    htmlFileC << "<br>" << std::endl;

    // Rc
    htmlFileC << "<h2> 4. Rc criterion: Ratio ADC value sum over five near maximum (-2, -1, max, +1, +2) TS to ADC "
                 "value sum over all TS for each channel. </h3>"
              << std::endl;
    htmlFileC << "<h3> 4.A. Ratio distribution over all events, channels and depths.</h3>" << std::endl;
    htmlFileC << "<h4> Legend: Bins less " << MIN_C[4][sub] << " and more " << MAX_C[4][sub]
              << " correpond to bad ratio </h4>" << std::endl;
    if (sub == 1)
      htmlFileC << " <img src=\"Hist43TStoAllTSCalibHB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileC << " <img src=\"Hist43TStoAllTSCalibHE.png\" />" << std::endl;
    if (sub == 3)
      htmlFileC << " <img src=\"Hist43TStoAllTSCalibHO.png\" />" << std::endl;
    if (sub == 4)
      htmlFileC << " <img src=\"Hist43TStoAllTSCalibHF.png\" />" << std::endl;
    htmlFileC << "<br>" << std::endl;
    htmlFileC << "<h3> 4.B. Rate of bad Ratio (<" << MIN_C[4][sub] << ", >" << MAX_C[4][sub]
              << ") in each channel for each depth.</h3>" << std::endl;
    htmlFileC << "<h4> Channel legend: white - good, other colour - bad. </h4>" << std::endl;
    if (sub == 1)
      htmlFileC << " <img src=\"MapRate43TStoAllTSCalibHB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileC << " <img src=\"MapRate43TStoAllTSCalibHE.png\" />" << std::endl;
    if (sub == 3)
      htmlFileC << " <img src=\"MapRate43TStoAllTSCalibHO.png\" />" << std::endl;
    if (sub == 4)
      htmlFileC << " <img src=\"MapRate43TStoAllTSCalibHF.png\" />" << std::endl;
    htmlFileC << "<br>" << std::endl;

    // TNc
    htmlFileC << "<h2> 5. TNc criterion: Mean TS position for each channel.</h3>" << std::endl;
    htmlFileC << "<h3> 5.A. TN position distribution over all events, channels and depths.</h3>" << std::endl;
    htmlFileC << "<h4> Legend: Bins less " << MIN_C[5][sub] << " and more " << MAX_C[5][sub]
              << " correpond to bad position </h4>" << std::endl;
    if (sub == 1)
      htmlFileC << " <img src=\"HistMeanPosCalibHB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileC << " <img src=\"HistMeanPosCalibHE.png\" />" << std::endl;
    if (sub == 3)
      htmlFileC << " <img src=\"HistMeanPosCalibHO.png\" />" << std::endl;
    if (sub == 4)
      htmlFileC << " <img src=\"HistMeanPosCalibHF.png\" />" << std::endl;
    htmlFileC << "<br>" << std::endl;
    htmlFileC << "<h3> 5.B. Rate of bad TN position  (<" << MIN_C[5][sub] << ", >" << MAX_C[5][sub]
              << ") in each channel for each depth. </h3>" << std::endl;
    htmlFileC << "<h4> Channel legend: white - good, other colour - bad. </h4>" << std::endl;
    if (sub == 1)
      htmlFileC << " <img src=\"MapRateMeanPosCalibHB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileC << " <img src=\"MapRateMeanPosCalibHE.png\" />" << std::endl;
    if (sub == 3)
      htmlFileC << " <img src=\"MapRateMeanPosCalibHO.png\" />" << std::endl;
    if (sub == 4)
      htmlFileC << " <img src=\"MapRateMeanPosCalibHF.png\" />" << std::endl;
    htmlFileC << "<br>" << std::endl;

    // TXm
    htmlFileC << "<h2> 6.TXc criterion: Maximum TS position for each channel.</h3>" << std::endl;
    htmlFileC << "<h3> 6.A. TX position distribution over all events, channel and depth.</h3>" << std::endl;
    htmlFileC << "<h4> Legend: Bins less " << MIN_C[6][sub] << " and more " << MAX_C[6][sub]
              << " correpond to bad position </h4>" << std::endl;
    if (sub == 1)
      htmlFileC << " <img src=\"HistMaxPosCalibHB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileC << " <img src=\"HistMaxPosCalibHE.png\" />" << std::endl;
    if (sub == 3)
      htmlFileC << " <img src=\"HistMaxPosCalibHO.png\" />" << std::endl;
    if (sub == 4)
      htmlFileC << " <img src=\"HistMaxPosCalibHF.png\" />" << std::endl;
    htmlFileC << "<br>" << std::endl;
    htmlFileC << "<h3> 6.B. Rate of bad TX position  (<" << MIN_C[6][sub] << ", >" << MAX_C[6][sub]
              << ") in each channel for each depth. </h3>" << std::endl;
    htmlFileC << "<h4> Channel legend: white - good, other colour - bad. </h4>" << std::endl;
    if (sub == 1)
      htmlFileC << " <img src=\"MapRateMaxPosCalibHB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileC << " <img src=\"MapRateMaxPosCalibHE.png\" />" << std::endl;
    if (sub == 3)
      htmlFileC << " <img src=\"MapRateMaxPosCalibHO.png\" />" << std::endl;
    if (sub == 4)
      htmlFileC << " <img src=\"MapRateMaxPosCalibHF.png\" />" << std::endl;
    htmlFileC << "<br>" << std::endl;

    htmlFileC << "</body> " << std::endl;
    htmlFileC << "</html> " << std::endl;
    htmlFileC.close();

    //Response drift
    htmlFileD << "</html><html xmlns=\"http://www.w3.org/1999/xhtml\">" << std::endl;
    htmlFileD << "<head>" << std::endl;
    htmlFileD << "<meta http-equiv=\"Content-Type\" content=\"text/html\"/>" << std::endl;
    htmlFileD << "<title> Remore Monitoring Tool </title>" << std::endl;
    htmlFileD << "<style type=\"text/css\">" << std::endl;
    htmlFileD << " body,td{ background-color: #FFFFCC; font-family: arial, arial ce, helvetica; font-size: 12px; }"
              << std::endl;
    htmlFileD << "   td.s0 { font-family: arial, arial ce, helvetica; }" << std::endl;
    htmlFileD << "   td.s1 { font-family: arial, arial ce, helvetica; font-weight: bold; background-color: #FFC169; "
                 "text-align: center;}"
              << std::endl;
    htmlFileD << "   td.s2 { font-family: arial, arial ce, helvetica; background-color: #eeeeee; }" << std::endl;
    htmlFileD << "   td.s3 { font-family: arial, arial ce, helvetica; background-color: #d0d0d0; }" << std::endl;
    htmlFileD << "   td.s4 { font-family: arial, arial ce, helvetica; background-color: #FFC169; }" << std::endl;
    htmlFileD << "</style>" << std::endl;
    htmlFileD << "<body>" << std::endl;

    if (sub == 1)
      htmlFileD << "<h1> Response drift for HB: Current RUN = " << runnumber << ", Reference RUN = " << refrunnumber
                << " </h1>" << std::endl;
    if (sub == 2)
      htmlFileD << "<h1> Response drift for HE: Current RUN = " << runnumber << ", Reference RUN = " << refrunnumber
                << " </h1>" << std::endl;
    if (sub == 3)
      htmlFileD << "<h1> Response drift for HO: Current RUN = " << runnumber << ", Reference RUN = " << refrunnumber
                << " </h1>" << std::endl;
    if (sub == 4)
      htmlFileD << "<h1> Response drift for HF: Current RUN = " << runnumber << ", Reference RUN = " << refrunnumber
                << " </h1>" << std::endl;
    htmlFileD << "<br>" << std::endl;

    // test GS
    htmlFileD << "<h2> 1. Gain Stability (GS) </h3>" << std::endl;
    htmlFileD << "<h3> 1.A. Averaged channel response, collected over all TS, for Current run in each channel for each "
                 "depth.</h3>"
              << std::endl;
    htmlFileD << "<h4> Channel legend: colour means cooresponding value of mean response. </h4>" << std::endl;
    if (sub == 1)
      htmlFileD << " <img src=\"MapRateAmpl1HB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileD << " <img src=\"MapRateAmpl1HE.png\" />" << std::endl;
    if (sub == 3)
      htmlFileD << " <img src=\"MapRateAmpl1HO.png\" />" << std::endl;
    if (sub == 4)
      htmlFileD << " <img src=\"MapRateAmpl1HF.png\" />" << std::endl;
    htmlFileD << "<br>" << std::endl;
    htmlFileD << "<h3> 1.B. Averaged channel response, collected over all TS, for Reference run in each channel for "
                 "each depth.</h3>"
              << std::endl;
    htmlFileD << "<h4> Channel legend: colour means cooresponding value of mean response. </h4>" << std::endl;
    if (sub == 1)
      htmlFileD << " <img src=\"MapRateAmpl2HB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileD << " <img src=\"MapRateAmpl2HE.png\" />" << std::endl;
    if (sub == 3)
      htmlFileD << " <img src=\"MapRateAmpl2HO.png\" />" << std::endl;
    if (sub == 4)
      htmlFileD << " <img src=\"MapRateAmpl2HF.png\" />" << std::endl;
    htmlFileD << "<br>" << std::endl;
    htmlFileD << "<h3> 1.C. Relative difference between Current and Reference run distribution over all events, "
                 "channels for each depth.</h3>"
              << std::endl;
    htmlFileD << "<h4>  Legend: Bins less -" << porog[sub] << "% and more +" << porog[sub]
              << "% correpond to bad relative difference position </h4>" << std::endl;
    if (sub == 1)
      htmlFileD << " <img src=\"HistAmplDriftDepthHB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileD << " <img src=\"HistAmplDriftDepthHE.png\" />" << std::endl;
    if (sub == 3)
      htmlFileD << " <img src=\"HistAmplDriftDepthHO.png\" />" << std::endl;
    if (sub == 4)
      htmlFileD << " <img src=\"HistAmplDriftDepthHF.png\" />" << std::endl;
    htmlFileD << "<br>" << std::endl;
    htmlFileD << "<h3> 1.D. Rate of bad relative difference  (<-" << porog[sub] << ", >+" << porog[sub]
              << ") in each channel for each depth.</h3>" << std::endl;
    htmlFileD << "<h4> Channel legend: white - good, other colour - bad. </h4>" << std::endl;
    if (sub == 1)
      htmlFileD << " <img src=\"MapRateAmplDriftHB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileD << " <img src=\"MapRateAmplDriftHE.png\" />" << std::endl;
    if (sub == 3)
      htmlFileD << " <img src=\"MapRateAmplDriftHO.png\" />" << std::endl;
    if (sub == 4)
      htmlFileD << " <img src=\"MapRateAmplDriftHF.png\" />" << std::endl;
    htmlFileD << "<br>" << std::endl;

    htmlFileD << "</body> " << std::endl;
    htmlFileD << "</html> " << std::endl;
    htmlFileD.close();

    // Pedestals
    htmlFileP << "</html><html xmlns=\"http://www.w3.org/1999/xhtml\">" << std::endl;
    htmlFileP << "<head>" << std::endl;
    htmlFileP << "<meta http-equiv=\"Content-Type\" content=\"text/html\"/>" << std::endl;
    htmlFileP << "<title> Remote Monitoring Tool </title>" << std::endl;
    htmlFileP << "<style type=\"text/css\">" << std::endl;
    htmlFileP << " body,td{ background-color: #FFFFCC; font-family: arial, arial ce, helvetica; font-size: 12px; }"
              << std::endl;
    htmlFileP << "   td.s0 { font-family: arial, arial ce, helvetica; }" << std::endl;
    htmlFileP << "   td.s1 { font-family: arial, arial ce, helvetica; font-weight: bold; background-color: #FFC169; "
                 "text-align: center;}"
              << std::endl;
    htmlFileP << "   td.s2 { font-family: arial, arial ce, helvetica; background-color: #eeeeee; }" << std::endl;
    htmlFileP << "   td.s3 { font-family: arial, arial ce, helvetica; background-color: #d0d0d0; }" << std::endl;
    htmlFileP << "   td.s4 { font-family: arial, arial ce, helvetica; background-color: #FFC169; }" << std::endl;
    htmlFileP << "</style>" << std::endl;
    htmlFileP << "<body>" << std::endl;

    if (sub == 1)
      htmlFileP << "<h1> Pedestals for HB, RUN = " << runnumber << " </h1>" << std::endl;
    if (sub == 2)
      htmlFileP << "<h1> Pedestals for HE, RUN = " << runnumber << " </h1>" << std::endl;
    if (sub == 3)
      htmlFileP << "<h1> Pedestals for HO, RUN = " << runnumber << " </h1>" << std::endl;
    if (sub == 4)
      htmlFileP << "<h1> Pedestals for HF, RUN = " << runnumber << " </h1>" << std::endl;
    htmlFileP << "<br>" << std::endl;

    // Pedestal:
    htmlFileP << "<h2> 1.Pm criterion: Pedestals for each CapID .</h3>" << std::endl;
    htmlFileP << "<h3> 1.A. Pedestal distribution over all events, channels for each CapID and all depths.</h3>"
              << std::endl;
    htmlFileP << "<h4> Legend: Bins less " << Pedest[0][sub] << " correpond to bad Pedestals </h4>" << std::endl;
    if (sub == 1)
      htmlFileP << " <img src=\"HistPedestalsHB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileP << " <img src=\"HistPedestalsHE.png\" />" << std::endl;
    if (sub == 3)
      htmlFileP << " <img src=\"HistPedestalsHO.png\" />" << std::endl;
    if (sub == 4)
      htmlFileP << " <img src=\"HistPedestalsHF.png\" />" << std::endl;
    htmlFileP << "<br>" << std::endl;
    htmlFileP << "<h3> 1.B. Rate of channels at very low Pedestals at least in one CapID for each depth.</h3>"
              << std::endl;
    htmlFileP << "<h4> Channel legend: white - good, other colour - bad. </h4>" << std::endl;
    if (sub == 1)
      htmlFileP << " <img src=\"MapRatePedHB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileP << " <img src=\"MapRatePedHE.png\" />" << std::endl;
    if (sub == 3)
      htmlFileP << " <img src=\"MapRatePedHO.png\" />" << std::endl;
    if (sub == 4)
      htmlFileP << " <img src=\"MapRatePedHF.png\" />" << std::endl;

    // PedestalWidth:
    htmlFileP << "<h2> 2.pWm criterion: Pedestal Widths for each CapID .</h3>" << std::endl;
    htmlFileP << "<h3> 2.A. Pedestal Widths distribution over all events, channels for each CapID and all depths.</h3>"
              << std::endl;
    htmlFileP << "<h4> Legend: Bins less " << Pedest[1][sub] << " correpond to bad Pedestal Widths </h4>" << std::endl;
    if (sub == 1)
      htmlFileP << " <img src=\"HistPedestalWidthsHB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileP << " <img src=\"HistPedestalWidthsHE.png\" />" << std::endl;
    if (sub == 3)
      htmlFileP << " <img src=\"HistPedestalWidthsHO.png\" />" << std::endl;
    if (sub == 4)
      htmlFileP << " <img src=\"HistPedestalWidthsHF.png\" />" << std::endl;
    htmlFileP << "<br>" << std::endl;
    htmlFileP << "<h3> 2.B. Rate of channels at very low Pedestal Widths at least in one CapID for each depth.</h3>"
              << std::endl;
    htmlFileP << "<h4> Channel legend: white - good, other colour - bad. </h4>" << std::endl;
    if (sub == 1)
      htmlFileP << " <img src=\"MapRatePedWidthsHB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileP << " <img src=\"MapRatePedWidthsHE.png\" />" << std::endl;
    if (sub == 3)
      htmlFileP << " <img src=\"MapRatePedWidthsHO.png\" />" << std::endl;
    if (sub == 4)
      htmlFileP << " <img src=\"MapRatePedWidthsHF.png\" />" << std::endl;

    // Correlations of Pedestal(Width) and fullAmplitude:
    htmlFileP << "<h2> 3.Pedestal and pedestalWidths vs Amplitude .</h3>" << std::endl;
    htmlFileP << "<h3> 3.A. Correlation of Pedestal(pedestalWidths) and Amplitude over all channels and events .</h3>"
              << std::endl;
    htmlFileP << "<h4> Legend: colour - entries </h4>" << std::endl;
    if (sub == 1)
      htmlFileP << "<img src=\"CorrelationsMapPedestalVsfullAmplitudeHB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileP << "<img src=\"CorrelationsMapPedestalVsfullAmplitudeHE.png\" />" << std::endl;
    if (sub == 3)
      htmlFileP << "<img src=\"CorrelationsMapPedestalVsfullAmplitudeHO.png\" />" << std::endl;
    if (sub == 4)
      htmlFileP << "<img src=\"CorrelationsMapPedestalVsfullAmplitudeHF.png\" />" << std::endl;
    htmlFileP << "<br>" << std::endl;
    htmlFileP.close();

    // TSs Shapes:

    htmlFileS << "</html><html xmlns=\"http://www.w3.org/1999/xhtml\">" << std::endl;
    htmlFileS << "<head>" << std::endl;
    htmlFileS << "<meta http-equiv=\"Content-Type\" content=\"text/html\"/>" << std::endl;
    htmlFileS << "<title> Remote Monitoring Tool </title>" << std::endl;
    htmlFileS << "<style type=\"text/css\">" << std::endl;
    htmlFileS << " body,td{ background-color: #FFFFCC; font-family: arial, arial ce, helvetica; font-size: 12px; }"
              << std::endl;
    htmlFileS << "   td.s0 { font-family: arial, arial ce, helvetica; }" << std::endl;
    htmlFileS << "   td.s1 { font-family: arial, arial ce, helvetica; font-weight: bold; background-color: #FFC169; "
                 "text-align: center;}"
              << std::endl;
    htmlFileS << "   td.s2 { font-family: arial, arial ce, helvetica; background-color: #eeeeee; }" << std::endl;
    htmlFileS << "   td.s3 { font-family: arial, arial ce, helvetica; background-color: #d0d0d0; }" << std::endl;
    htmlFileS << "   td.s4 { font-family: arial, arial ce, helvetica; background-color: #FFC169; }" << std::endl;
    htmlFileS << "</style>" << std::endl;
    htmlFileS << "<body>" << std::endl;

    if (sub == 1)
      htmlFileS << "<h1> ADC Shape for HB, RUN = " << runnumber << " </h1>" << std::endl;
    if (sub == 2)
      htmlFileS << "<h1> ADC Shape for HE, RUN = " << runnumber << " </h1>" << std::endl;
    if (sub == 3)
      htmlFileS << "<h1> ADC Shape for HO, RUN = " << runnumber << " </h1>" << std::endl;
    if (sub == 4)
      htmlFileS << "<h1> ADC Shape for HF, RUN = " << runnumber << " </h1>" << std::endl;
    htmlFileS << "<br>" << std::endl;

    htmlFileS << "<h2> 1.Mean ADC Shape.</h3>" << std::endl;
    htmlFileS << "<h3> 1.A. ADC shape averaged over all good channels, depth and events.</h3>" << std::endl;
    //     htmlFileS << "<h4> Legend: Bins less "<<Pedest[0][sub]<<" correpond to bad Pedestals </h4>"<< std::endl;
    if (sub == 1)
      htmlFileS << " <img src=\"HistGoodTSshapesHB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileS << " <img src=\"HistGoodTSshapesHE.png\" />" << std::endl;
    if (sub == 3)
      htmlFileS << " <img src=\"HistGoodTSshapesHO.png\" />" << std::endl;
    if (sub == 4)
      htmlFileS << " <img src=\"HistGoodTSshapesHF.png\" />" << std::endl;
    htmlFileS << "<br>" << std::endl;
    htmlFileS << "<h3> 1.B. ADC shape averaged over all bad channels, depth and events. Bad channels are selected by 5 "
                 "criteria: CapId, A, W, P, Pw </h3>"
              << std::endl;
    //     htmlFileS << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 1)
      htmlFileS << " <img src=\"HistBadTSshapesHB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileS << " <img src=\"HistBadTSshapesHE.png\" />" << std::endl;
    if (sub == 3)
      htmlFileS << " <img src=\"HistBadTSshapesHO.png\" />" << std::endl;
    if (sub == 4)
      htmlFileS << " <img src=\"HistBadTSshapesHF.png\" />" << std::endl;

    htmlFileS << "<h2> 2. Occupancy and rates of non-zero amplitudes for separate TSs in Sub-Detector over "
                 "depth,eta.phi </h3>"
              << std::endl;
    htmlFileS << "<h3> 2.A. reminder:.......................... for HBHE, TS=2;...................................... "
                 "for HF, TS=1;..................................... for HO, TS=0,1,2  </h3>"
              << std::endl;
    if (sub == 1)
      htmlFileS << " <img src=\"Hist_mapDepthAllTS2_HB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileS << " <img src=\"Hist_mapDepthAllTS2_HE.png\" />" << std::endl;
    if (sub == 3)
      htmlFileS << " <img src=\"Hist_mapDepthAllTS012_HO.png\" />" << std::endl;
    if (sub == 4)
      htmlFileS << " <img src=\"Hist_mapDepthAllTS1_HF.png\" />" << std::endl;
    htmlFileS << "<br>" << std::endl;

    /*
   htmlFileS << "<h2> 2. ADC in Time Slice </h3>"<< std::endl;
     htmlFileS << "<h3> 2.A. ADC counts  histogrammed over all channels, depth and events.</h3>"<< std::endl; 
//     htmlFileS << "<h4> Legend: Bins less "<<Pedest[0][sub]<<" correpond to bad Pedestals </h4>"<< std::endl; 
     if (sub==1) htmlFileS << " <img src=\"Hist_ADC_HB_All.png\" />" << std::endl;
     if (sub==2) htmlFileS << " <img src=\"Hist_ADC_HE_All.png\" />" << std::endl;    
     if (sub==3) htmlFileS << " <img src=\"Hist_ADC_HO_All.png\" />" << std::endl;
     if (sub==4) htmlFileS << " <img src=\"Hist_ADC_HF_All.png\" />" << std::endl;
     htmlFileS << "<br>"<< std::endl;
     htmlFileS << "<h3> 2.B. ADC counts  histogrammed over all channels and events for each depth separately. </h3>"<< std::endl; 
//     htmlFileS << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
     if (sub==1) htmlFileS << " <img src=\"Hist_ADC_HB_DS.png\" />" << std::endl;
     if (sub==2) htmlFileS << " <img src=\"Hist_ADC_HE_DS.png\" />" << std::endl;
     if (sub==3) htmlFileS << " <img src=\"Hist_ADC_HO_DS.png\" />" << std::endl;
     if (sub==4) htmlFileS << " <img src=\"Hist_ADC_HF_DS.png\" />" << std::endl;

     htmlFileS << "<h2> 3. ADC Sum in Time Slice </h3>"<< std::endl;
     htmlFileS << "<h3> 3.A. ADC Sum over all channels histogrammed over all events for each depth separately. </h3>"<< std::endl; 
//     htmlFileS << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
     if (sub==1) htmlFileS << " <img src=\"Hist_SumADC_HB.png\" />" << std::endl;
     if (sub==2) htmlFileS << " <img src=\"Hist_SumADC_HE.png\" />" << std::endl;
     if (sub==3) htmlFileS << " <img src=\"Hist_SumADC_HO.png\" />" << std::endl;
     if (sub==4) htmlFileS << " <img src=\"Hist_SumADC_HF.png\" />" << std::endl;

     htmlFileS << "<h3> 3.B. ADC Sum over all channels histogrammed over all events for each depth separately. </h3>"<< std::endl; 
//     htmlFileS << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
     if (sub==1) htmlFileS << " <img src=\"Hist_SumADC_HB0.png\" />" << std::endl;
     if (sub==2) htmlFileS << " <img src=\"Hist_SumADC_HE0.png\" />" << std::endl;
     if (sub==3) htmlFileS << " <img src=\"Hist_SumADC_HO0.png\" />" << std::endl;
     if (sub==4) htmlFileS << " <img src=\"Hist_SumADC_HF0.png\" />" << std::endl;

     htmlFileS << "<h3> 3.C. ADC Sum over all channels histogrammed over all events for each depth separately. </h3>"<< std::endl; 
//     htmlFileS << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
     if (sub==1) htmlFileS << " <img src=\"Hist_SumADC_HB1.png\" />" << std::endl;
     if (sub==2) htmlFileS << " <img src=\"Hist_SumADC_HE1.png\" />" << std::endl;
     if (sub==3) htmlFileS << " <img src=\"Hist_SumADC_HO1.png\" />" << std::endl;
     if (sub==4) htmlFileS << " <img src=\"Hist_SumADC_HF1.png\" />" << std::endl;
*/
    htmlFileS.close();

    ///////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////////////////////////////// Phi-symmetry for Calibration Group:

    ///////////////////////////////////////////////////////////////////////////////////////////////////////// Digis

    htmlFileM << "</html><html xmlns=\"http://www.w3.org/1999/xhtml\">" << std::endl;
    htmlFileM << "<head>" << std::endl;
    htmlFileM << "<meta http-equiv=\"Content-Type\" content=\"text/html\"/>" << std::endl;
    htmlFileM << "<title> Remote Monitoring Tool </title>" << std::endl;
    htmlFileM << "<style type=\"text/css\">" << std::endl;
    htmlFileM << " body,td{ background-color: #FFFFCC; font-family: arial, arial ce, helvetica; font-size: 12px; }"
              << std::endl;
    htmlFileM << "   td.s0 { font-family: arial, arial ce, helvetica; }" << std::endl;
    htmlFileM << "   td.s1 { font-family: arial, arial ce, helvetica; font-weight: bold; background-color: #FFC169; "
                 "text-align: center;}"
              << std::endl;
    htmlFileM << "   td.s2 { font-family: arial, arial ce, helvetica; background-color: #eeeeee; }" << std::endl;
    htmlFileM << "   td.s3 { font-family: arial, arial ce, helvetica; background-color: #d0d0d0; }" << std::endl;
    htmlFileM << "   td.s4 { font-family: arial, arial ce, helvetica; background-color: #FFC169; }" << std::endl;
    htmlFileM << "</style>" << std::endl;
    htmlFileM << "<body>" << std::endl;

    /////////////////////////////////////////////// RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR

    if (sub == 1)
      htmlFileM << "<h1> Digis Phi-symmetry for Calibration Group, HB, RUN = " << runnumber << " </h1>" << std::endl;
    if (sub == 2)
      htmlFileM << "<h1> Digis Phi-symmetry for Calibration Group, HE, RUN = " << runnumber << " </h1>" << std::endl;
    if (sub == 4)
      htmlFileM << "<h1> Digis Phi-symmetry for Calibration Group, HF, RUN = " << runnumber << " </h1>" << std::endl;
    htmlFileM << "<br>" << std::endl;

    htmlFileM << "<h2> 1: R = R_depth_ieta_iphi = E_depth_ieta_iphi/E_depth_ieta </h3>" << std::endl;
    htmlFileM << "<h3> 1A: eta/phi-plot: R, averaged over depthes </h3>" << std::endl;
    //     htmlFileM << "<h4> Legend: Bins less "<<Pedest[0][sub]<<" correpond to bad Pedestals </h4>"<< std::endl;
    if (sub == 1)
      htmlFileM << " <img src=\"RdigiGeneralD2PhiSymmetryHB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileM << " <img src=\"RdigiGeneralD2PhiSymmetryHE.png\" />" << std::endl;
    if (sub == 4)
      htmlFileM << " <img src=\"RdigiGeneralD2PhiSymmetryHF.png\" />" << std::endl;
    htmlFileM << "<br>" << std::endl;

    htmlFileM << "<h3> 1B: R vs phi , averaged over depthes & eta </h3>" << std::endl;
    //     htmlFileM << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 1)
      htmlFileM << " <img src=\"RdigiGeneralD1PhiSymmetryHB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileM << " <img src=\"RdigiGeneralD1PhiSymmetryHE.png\" />" << std::endl;
    if (sub == 4)
      htmlFileM << " <img src=\"RdigiGeneralD1PhiSymmetryHF.png\" />" << std::endl;
    htmlFileM << "<br>" << std::endl;

    ///////////////////////////////////////////   PositiveDirection:

    /////////////////////////////////////////////// R different Depthes:
    htmlFileM << "<h2>  Positive direction, R = R_depth_ieta_iphi = E_depth_ieta_iphi/E_depth_ieta </h3>" << std::endl;
    htmlFileM << "<h3> 1C: R vs phi , different eta, Depth1 </h3>" << std::endl;
    //     htmlFileM << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 1)
      htmlFileM << " <img src=\"RdigiPositiveDirectionhistD1PhiSymmetryDepth1HB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileM << " <img src=\"RdigiPositiveDirectionhistD1PhiSymmetryDepth1HE.png\" />" << std::endl;
    if (sub == 4)
      htmlFileM << " <img src=\"RdigiPositiveDirectionhistD1PhiSymmetryDepth1HF.png\" />" << std::endl;
    htmlFileM << "<br>" << std::endl;

    htmlFileM << "<h3> 1D: R vs phi , different eta, Depth2 </h3>" << std::endl;
    //     htmlFileM << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 1)
      htmlFileM << " <img src=\"RdigiPositiveDirectionhistD1PhiSymmetryDepth2HB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileM << " <img src=\"RdigiPositiveDirectionhistD1PhiSymmetryDepth2HE.png\" />" << std::endl;
    if (sub == 4)
      htmlFileM << " <img src=\"RdigiPositiveDirectionhistD1PhiSymmetryDepth2HF.png\" />" << std::endl;
    htmlFileM << "<br>" << std::endl;

    htmlFileM << "<h3> 1E: R vs phi , different eta, Depth3 </h3>" << std::endl;
    //     htmlFileM << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 1)
      htmlFileM << " <img src=\"RdigiPositiveDirectionhistD1PhiSymmetryDepth3HB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileM << " <img src=\"RdigiPositiveDirectionhistD1PhiSymmetryDepth3HE.png\" />" << std::endl;
    if (sub == 4)
      htmlFileM << " <img src=\"RdigiPositiveDirectionhistD1PhiSymmetryDepth3HF.png\" />" << std::endl;
    htmlFileM << "<br>" << std::endl;

    htmlFileM << "<h3> 1F: R vs phi , different eta, Depth4 </h3>" << std::endl;
    //     htmlFileM << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 1)
      htmlFileM << " <img src=\"RdigiPositiveDirectionhistD1PhiSymmetryDepth4HB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileM << " <img src=\"RdigiPositiveDirectionhistD1PhiSymmetryDepth4HE.png\" />" << std::endl;
    if (sub == 4)
      htmlFileM << " <img src=\"RdigiPositiveDirectionhistD1PhiSymmetryDepth4HF.png\" />" << std::endl;
    htmlFileM << "<br>" << std::endl;

    if (sub == 2)
      htmlFileM << "<h3> 1G: R vs phi , different eta, Depth5 </h3>" << std::endl;
    //     htmlFileM << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 2)
      htmlFileM << " <img src=\"RdigiPositiveDirectionhistD1PhiSymmetryDepth5HE.png\" />" << std::endl;
    htmlFileM << "<br>" << std::endl;

    if (sub == 2)
      htmlFileM << "<h3> 1H: R vs phi , different eta, Depth6 </h3>" << std::endl;
    //     htmlFileM << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 2)
      htmlFileM << " <img src=\"RdigiPositiveDirectionhistD1PhiSymmetryDepth6HE.png\" />" << std::endl;
    htmlFileM << "<br>" << std::endl;

    if (sub == 2)
      htmlFileM << "<h3> 1I: R vs phi , different eta, Depth7 </h3>" << std::endl;
    //     htmlFileM << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 2)
      htmlFileM << " <img src=\"RdigiPositiveDirectionhistD1PhiSymmetryDepth7HE.png\" />" << std::endl;
    htmlFileM << "<br>" << std::endl;

    /////////////////////////////////////////////// DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
    htmlFileM << "<h2> 2: D(digivarianceSignalhe)   </h3>" << std::endl;
    htmlFileM << "<h3> 2A: eta/phi-plot: D(digivarianceSignalhe), averaged over depthes </h3>" << std::endl;
    //     htmlFileM << "<h4> Legend: Bins less "<<Pedest[0][sub]<<" correpond to bad Pedestals </h4>"<< std::endl;
    if (sub == 1)
      htmlFileM << " <img src=\"DdigiGeneralD2PhiSymmetryHB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileM << " <img src=\"DdigiGeneralD2PhiSymmetryHE.png\" />" << std::endl;
    if (sub == 4)
      htmlFileM << " <img src=\"DdigiGeneralD2PhiSymmetryHF.png\" />" << std::endl;
    htmlFileM << "<br>" << std::endl;

    htmlFileM << "<h3> 2B: D(digivarianceSignalhe) vs phi , averaged over depthes & eta </h3>" << std::endl;
    //     htmlFileM << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 1)
      htmlFileM << " <img src=\"DdigiGeneralD1PhiSymmetryHB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileM << " <img src=\"DdigiGeneralD1PhiSymmetryHE.png\" />" << std::endl;
    if (sub == 4)
      htmlFileM << " <img src=\"DdigiGeneralD1PhiSymmetryHF.png\" />" << std::endl;
    htmlFileM << "<br>" << std::endl;

    ///////////////////////////////////////////   PositiveDirection:
    ///////////////////////////////////////////////D  different Depthes:
    htmlFileM << "<h2>  Positive direction, D(digivarianceSignalhe) </h3>" << std::endl;
    htmlFileM << "<h3> 2C: D(digivarianceSignalhe) vs phi , different eta, Depth1 </h3>" << std::endl;
    //     htmlFileM << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 1)
      htmlFileM << " <img src=\"DdigiPositiveDirectionhistD1PhiSymmetryDepth1HB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileM << " <img src=\"DdigiPositiveDirectionhistD1PhiSymmetryDepth1HE.png\" />" << std::endl;
    if (sub == 4)
      htmlFileM << " <img src=\"DdigiPositiveDirectionhistD1PhiSymmetryDepth1HF.png\" />" << std::endl;
    htmlFileM << "<br>" << std::endl;

    htmlFileM << "<h3> 2.D. D(digivarianceSignalhe) vs phi , different eta, Depth2 </h3>" << std::endl;
    //     htmlFileM << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 1)
      htmlFileM << " <img src=\"DdigiPositiveDirectionhistD1PhiSymmetryDepth2HB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileM << " <img src=\"DdigiPositiveDirectionhistD1PhiSymmetryDepth2HE.png\" />" << std::endl;
    if (sub == 4)
      htmlFileM << " <img src=\"DdigiPositiveDirectionhistD1PhiSymmetryDepth2HF.png\" />" << std::endl;
    htmlFileM << "<br>" << std::endl;

    htmlFileM << "<h3> 2E: D(digivarianceSignalhe) vs phi , different eta, Depth3 </h3>" << std::endl;
    //     htmlFileM << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 1)
      htmlFileM << " <img src=\"DdigiPositiveDirectionhistD1PhiSymmetryDepth3HB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileM << " <img src=\"DdigiPositiveDirectionhistD1PhiSymmetryDepth3HE.png\" />" << std::endl;
    if (sub == 4)
      htmlFileM << " <img src=\"DdigiPositiveDirectionhistD1PhiSymmetryDepth3HF.png\" />" << std::endl;
    htmlFileM << "<br>" << std::endl;

    htmlFileM << "<h3> 2F: D(digivarianceSignalhe) vs phi , different eta, Depth4 </h3>" << std::endl;
    //     htmlFileM << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 1)
      htmlFileM << " <img src=\"DdigiPositiveDirectionhistD1PhiSymmetryDepth4HB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileM << " <img src=\"DdigiPositiveDirectionhistD1PhiSymmetryDepth4HE.png\" />" << std::endl;
    if (sub == 4)
      htmlFileM << " <img src=\"DdigiPositiveDirectionhistD1PhiSymmetryDepth4HF.png\" />" << std::endl;
    htmlFileM << "<br>" << std::endl;

    if (sub == 2)
      htmlFileM << "<h3> 2G: D(digivarianceSignalhe) vs phi , different eta, Depth5 </h3>" << std::endl;
    //     htmlFileM << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 2)
      htmlFileM << " <img src=\"DdigiPositiveDirectionhistD1PhiSymmetryDepth5HE.png\" />" << std::endl;
    htmlFileM << "<br>" << std::endl;

    if (sub == 2)
      htmlFileM << "<h3> 2H: D(digivarianceSignalhe) vs phi , different eta, Depth6 </h3>" << std::endl;
    //     htmlFileM << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 2)
      htmlFileM << " <img src=\"DdigiPositiveDirectionhistD1PhiSymmetryDepth6HE.png\" />" << std::endl;
    htmlFileM << "<br>" << std::endl;

    if (sub == 2)
      htmlFileM << "<h3> 2I: D(digivarianceSignalhe) vs phi , different eta, Depth7 </h3>" << std::endl;
    //     htmlFileM << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 2)
      htmlFileM << " <img src=\"DdigiPositiveDirectionhistD1PhiSymmetryDepth7HE.png\" />" << std::endl;
    htmlFileM << "<br>" << std::endl;

    ///////////////////////////////////////////   NegativeDirection:
    /////////////////////////////////////////////// RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR
    htmlFileM << "<h2> 3:  Negative direction, R = R_depth_ieta_iphi = E_depth_ieta_iphi/E_depth_ieta </h3>"
              << std::endl;

    /////////////////////////////////////////////// different Depthes:
    htmlFileM << "<h3> 3C: R vs phi , different eta, Depth1 </h3>" << std::endl;
    //     htmlFileM << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 1)
      htmlFileM << " <img src=\"RdigiNegativeDirectionhistD1PhiSymmetryDepth1HB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileM << " <img src=\"RdigiNegativeDirectionhistD1PhiSymmetryDepth1HE.png\" />" << std::endl;
    if (sub == 4)
      htmlFileM << " <img src=\"RdigiNegativeDirectionhistD1PhiSymmetryDepth1HF.png\" />" << std::endl;
    htmlFileM << "<br>" << std::endl;

    htmlFileM << "<h3> 3D: R vs phi , different eta, Depth2 </h3>" << std::endl;
    //     htmlFileM << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 1)
      htmlFileM << " <img src=\"RdigiNegativeDirectionhistD1PhiSymmetryDepth2HB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileM << " <img src=\"RdigiNegativeDirectionhistD1PhiSymmetryDepth2HE.png\" />" << std::endl;
    if (sub == 4)
      htmlFileM << " <img src=\"RdigiNegativeDirectionhistD1PhiSymmetryDepth2HF.png\" />" << std::endl;
    htmlFileM << "<br>" << std::endl;

    htmlFileM << "<h3> 3E: R vs phi , different eta, Depth3 </h3>" << std::endl;
    //     htmlFileM << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 1)
      htmlFileM << " <img src=\"RdigiNegativeDirectionhistD1PhiSymmetryDepth3HB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileM << " <img src=\"RdigiNegativeDirectionhistD1PhiSymmetryDepth3HE.png\" />" << std::endl;
    if (sub == 4)
      htmlFileM << " <img src=\"RdigiNegativeDirectionhistD1PhiSymmetryDepth3HF.png\" />" << std::endl;
    htmlFileM << "<br>" << std::endl;

    htmlFileM << "<h3> 3F: R vs phi , different eta, Depth4 </h3>" << std::endl;
    //     htmlFileM << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 1)
      htmlFileM << " <img src=\"RdigiNegativeDirectionhistD1PhiSymmetryDepth4HB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileM << " <img src=\"RdigiNegativeDirectionhistD1PhiSymmetryDepth4HE.png\" />" << std::endl;
    if (sub == 4)
      htmlFileM << " <img src=\"RdigiNegativeDirectionhistD1PhiSymmetryDepth4HF.png\" />" << std::endl;
    htmlFileM << "<br>" << std::endl;

    if (sub == 2)
      htmlFileM << "<h3> 3G: R vs phi , different eta, Depth5 </h3>" << std::endl;
    //     htmlFileM << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 2)
      htmlFileM << " <img src=\"RdigiNegativeDirectionhistD1PhiSymmetryDepth5HE.png\" />" << std::endl;
    htmlFileM << "<br>" << std::endl;

    if (sub == 2)
      htmlFileM << "<h3> 3H: R vs phi , different eta, Depth6 </h3>" << std::endl;
    //     htmlFileM << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 2)
      htmlFileM << " <img src=\"RdigiNegativeDirectionhistD1PhiSymmetryDepth6HE.png\" />" << std::endl;
    htmlFileM << "<br>" << std::endl;

    if (sub == 2)
      htmlFileM << "<h3> 3I: R vs phi , different eta, Depth7 </h3>" << std::endl;
    //     htmlFileM << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 2)
      htmlFileM << " <img src=\"RdigiNegativeDirectionhistD1PhiSymmetryDepth7HE.png\" />" << std::endl;
    htmlFileM << "<br>" << std::endl;

    /////////////////////////////////////////////// DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
    htmlFileM << "<h2> 4: Negative direction,   D(digivarianceSignalhe)   </h3>" << std::endl;
    /////////////////////////////////////////////// different Depthes:
    htmlFileM << "<h3> 4C: D(digivarianceSignalhe) vs phi , different eta, Depth1 </h3>" << std::endl;
    //     htmlFileM << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 1)
      htmlFileM << " <img src=\"DdigiNegativeDirectionhistD1PhiSymmetryDepth1HB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileM << " <img src=\"DdigiNegativeDirectionhistD1PhiSymmetryDepth1HE.png\" />" << std::endl;
    if (sub == 4)
      htmlFileM << " <img src=\"DdigiNegativeDirectionhistD1PhiSymmetryDepth1HF.png\" />" << std::endl;
    htmlFileM << "<br>" << std::endl;

    htmlFileM << "<h3> 4.D. D(digivarianceSignalhe) vs phi , different eta, Depth2 </h3>" << std::endl;
    //     htmlFileM << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 1)
      htmlFileM << " <img src=\"DdigiNegativeDirectionhistD1PhiSymmetryDepth2HB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileM << " <img src=\"DdigiNegativeDirectionhistD1PhiSymmetryDepth2HE.png\" />" << std::endl;
    if (sub == 4)
      htmlFileM << " <img src=\"DdigiNegativeDirectionhistD1PhiSymmetryDepth2HF.png\" />" << std::endl;
    htmlFileM << "<br>" << std::endl;

    htmlFileM << "<h3> 4E: D(digivarianceSignalhe) vs phi , different eta, Depth3 </h3>" << std::endl;
    //     htmlFileM << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 1)
      htmlFileM << " <img src=\"DdigiNegativeDirectionhistD1PhiSymmetryDepth3HB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileM << " <img src=\"DdigiNegativeDirectionhistD1PhiSymmetryDepth3HE.png\" />" << std::endl;
    if (sub == 4)
      htmlFileM << " <img src=\"DdigiNegativeDirectionhistD1PhiSymmetryDepth3HF.png\" />" << std::endl;
    htmlFileM << "<br>" << std::endl;

    htmlFileM << "<h3> 4F: D(digivarianceSignalhe) vs phi , different eta, Depth4 </h3>" << std::endl;
    //     htmlFileM << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 1)
      htmlFileM << " <img src=\"DdigiNegativeDirectionhistD1PhiSymmetryDepth4HB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileM << " <img src=\"DdigiNegativeDirectionhistD1PhiSymmetryDepth4HE.png\" />" << std::endl;
    if (sub == 4)
      htmlFileM << " <img src=\"DdigiNegativeDirectionhistD1PhiSymmetryDepth4HF.png\" />" << std::endl;
    htmlFileM << "<br>" << std::endl;

    if (sub == 2)
      htmlFileM << "<h3> 4G: D(digivarianceSignalhe) vs phi , different eta, Depth5 </h3>" << std::endl;
    //     htmlFileM << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 2)
      htmlFileM << " <img src=\"DdigiNegativeDirectionhistD1PhiSymmetryDepth5HE.png\" />" << std::endl;
    htmlFileM << "<br>" << std::endl;

    if (sub == 2)
      htmlFileM << "<h3> 4H: D(digivarianceSignalhe) vs phi , different eta, Depth6 </h3>" << std::endl;
    //     htmlFileM << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 2)
      htmlFileM << " <img src=\"DdigiNegativeDirectionhistD1PhiSymmetryDepth6HE.png\" />" << std::endl;
    htmlFileM << "<br>" << std::endl;

    if (sub == 2)
      htmlFileM << "<h3> 4I: D(digivarianceSignalhe) vs phi , different eta, Depth7 </h3>" << std::endl;
    //     htmlFileM << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 2)
      htmlFileM << " <img src=\"DdigiNegativeDirectionhistD1PhiSymmetryDepth7HE.png\" />" << std::endl;
    htmlFileM << "<br>" << std::endl;
    ///////////////////////////////////////////
    htmlFileM.close();
    /////////////////////////////////////////// end of Digi
    //
    ////////////////////////////////////////////////////////////////////////////////////////////// RecoSignal:
    ////////////////////////////////////////////////////////////////////////////////////////////// RecoSignal:
    ////////////////////////////////////////////////////////////////////////////////////////////// RecoSignal:

    htmlFileR << "</html><html xmlns=\"http://www.w3.org/1999/xhtml\">" << std::endl;
    htmlFileR << "<head>" << std::endl;
    htmlFileR << "<meta http-equiv=\"Content-Type\" content=\"text/html\"/>" << std::endl;
    htmlFileR << "<title> Remote Monitoring Tool </title>" << std::endl;
    htmlFileR << "<style type=\"text/css\">" << std::endl;
    htmlFileR << " body,td{ background-color: #FFFFCC; font-family: arial, arial ce, helvetica; font-size: 12px; }"
              << std::endl;
    htmlFileR << "   td.s0 { font-family: arial, arial ce, helvetica; }" << std::endl;
    htmlFileR << "   td.s1 { font-family: arial, arial ce, helvetica; font-weight: bold; background-color: #FFC169; "
                 "text-align: center;}"
              << std::endl;
    htmlFileR << "   td.s2 { font-family: arial, arial ce, helvetica; background-color: #eeeeee; }" << std::endl;
    htmlFileR << "   td.s3 { font-family: arial, arial ce, helvetica; background-color: #d0d0d0; }" << std::endl;
    htmlFileR << "   td.s4 { font-family: arial, arial ce, helvetica; background-color: #FFC169; }" << std::endl;
    htmlFileR << "</style>" << std::endl;
    htmlFileR << "<body>" << std::endl;

    /////////////////////////////////////////////// RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR

    if (sub == 1)
      htmlFileR << "<h1> RecoSignal Phi-symmetry for Calibration Group, HB, RUN = " << runnumber << " </h1>"
                << std::endl;
    if (sub == 2)
      htmlFileR << "<h1> RecoSignal Phi-symmetry for Calibration Group, HE, RUN = " << runnumber << " </h1>"
                << std::endl;
    if (sub == 4)
      htmlFileR << "<h1> RecoSignal Phi-symmetry for Calibration Group, HF, RUN = " << runnumber << " </h1>"
                << std::endl;
    htmlFileR << "<br>" << std::endl;

    htmlFileR << "<h2> 1: R = R_depth_ieta_iphi = E_depth_ieta_iphi/E_depth_ieta </h3>" << std::endl;
    htmlFileR << "<h3> 1A: eta/phi-plot: R, averaged over depthes </h3>" << std::endl;
    //     htmlFileR << "<h4> Legend: Bins less "<<Pedest[0][sub]<<" correpond to bad Pedestals </h4>"<< std::endl;
    if (sub == 1)
      htmlFileR << " <img src=\"RrecosignalGeneralD2PhiSymmetryHB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileR << " <img src=\"RrecosignalGeneralD2PhiSymmetryHE.png\" />" << std::endl;
    if (sub == 4)
      htmlFileR << " <img src=\"RrecosignalGeneralD2PhiSymmetryHF.png\" />" << std::endl;
    htmlFileR << "<br>" << std::endl;

    htmlFileR << "<h3> 1B: R vs phi , averaged over depthes & eta </h3>" << std::endl;
    //     htmlFileR << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 1)
      htmlFileR << " <img src=\"RrecosignalGeneralD1PhiSymmetryHB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileR << " <img src=\"RrecosignalGeneralD1PhiSymmetryHE.png\" />" << std::endl;
    if (sub == 4)
      htmlFileR << " <img src=\"RrecosignalGeneralD1PhiSymmetryHF.png\" />" << std::endl;
    htmlFileR << "<br>" << std::endl;

    ///////////////////////////////////////////   PositiveDirection:

    /////////////////////////////////////////////// R different Depthes:
    htmlFileR << "<h2>  Positive direction, R = R_depth_ieta_iphi = E_depth_ieta_iphi/E_depth_ieta </h3>" << std::endl;
    htmlFileR << "<h3> 1C: R vs phi , different eta, Depth1 </h3>" << std::endl;
    //     htmlFileR << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 1)
      htmlFileR << " <img src=\"RrecosignalPositiveDirectionhistD1PhiSymmetryDepth1HB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileR << " <img src=\"RrecosignalPositiveDirectionhistD1PhiSymmetryDepth1HE.png\" />" << std::endl;
    if (sub == 4)
      htmlFileR << " <img src=\"RrecosignalPositiveDirectionhistD1PhiSymmetryDepth1HF.png\" />" << std::endl;
    htmlFileR << "<br>" << std::endl;

    htmlFileR << "<h3> 1D: R vs phi , different eta, Depth2 </h3>" << std::endl;
    //     htmlFileR << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 1)
      htmlFileR << " <img src=\"RrecosignalPositiveDirectionhistD1PhiSymmetryDepth2HB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileR << " <img src=\"RrecosignalPositiveDirectionhistD1PhiSymmetryDepth2HE.png\" />" << std::endl;
    if (sub == 4)
      htmlFileR << " <img src=\"RrecosignalPositiveDirectionhistD1PhiSymmetryDepth2HF.png\" />" << std::endl;
    htmlFileR << "<br>" << std::endl;

    if (sub == 1 || sub == 2)
      htmlFileR << "<h3> 1E: R vs phi , different eta, Depth3 </h3>" << std::endl;
    //     htmlFileR << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 1)
      htmlFileR << " <img src=\"RrecosignalPositiveDirectionhistD1PhiSymmetryDepth3HB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileR << " <img src=\"RrecosignalPositiveDirectionhistD1PhiSymmetryDepth3HE.png\" />" << std::endl;
    htmlFileR << "<br>" << std::endl;

    if (sub == 1 || sub == 2)
      htmlFileR << "<h3> 1F: R vs phi , different eta, Depth4 </h3>" << std::endl;
    //     htmlFileR << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 1)
      htmlFileR << " <img src=\"RrecosignalPositiveDirectionhistD1PhiSymmetryDepth4HB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileR << " <img src=\"RrecosignalPositiveDirectionhistD1PhiSymmetryDepth4HE.png\" />" << std::endl;
    htmlFileR << "<br>" << std::endl;

    if (sub == 2)
      htmlFileR << "<h3> 1G: R vs phi , different eta, Depth5 </h3>" << std::endl;
    //     htmlFileR << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 2)
      htmlFileR << " <img src=\"RrecosignalPositiveDirectionhistD1PhiSymmetryDepth5HE.png\" />" << std::endl;
    htmlFileR << "<br>" << std::endl;

    if (sub == 2)
      htmlFileR << "<h3> 1H: R vs phi , different eta, Depth6 </h3>" << std::endl;
    //     htmlFileR << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 2)
      htmlFileR << " <img src=\"RrecosignalPositiveDirectionhistD1PhiSymmetryDepth6HE.png\" />" << std::endl;
    htmlFileR << "<br>" << std::endl;

    if (sub == 2)
      htmlFileR << "<h3> 1I: R vs phi , different eta, Depth7 </h3>" << std::endl;
    //     htmlFileR << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 2)
      htmlFileR << " <img src=\"RrecosignalPositiveDirectionhistD1PhiSymmetryDepth7HE.png\" />" << std::endl;
    htmlFileR << "<br>" << std::endl;

    /////////////////////////////////////////////// DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
    htmlFileR << "<h2> 2: D(recosignalvarianceSignalhe)   </h3>" << std::endl;
    htmlFileR << "<h3> 2A: eta/phi-plot: D(recosignalvarianceSignalhe), averaged over depthes </h3>" << std::endl;
    //     htmlFileR << "<h4> Legend: Bins less "<<Pedest[0][sub]<<" correpond to bad Pedestals </h4>"<< std::endl;
    if (sub == 1)
      htmlFileR << " <img src=\"DrecosignalGeneralD2PhiSymmetryHB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileR << " <img src=\"DrecosignalGeneralD2PhiSymmetryHE.png\" />" << std::endl;
    if (sub == 4)
      htmlFileR << " <img src=\"DrecosignalGeneralD2PhiSymmetryHF.png\" />" << std::endl;
    htmlFileR << "<br>" << std::endl;

    htmlFileR << "<h3> 2B: D(recosignalvarianceSignalhe) vs phi , averaged over depthes & eta </h3>" << std::endl;
    //     htmlFileR << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 1)
      htmlFileR << " <img src=\"DrecosignalGeneralD1PhiSymmetryHB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileR << " <img src=\"DrecosignalGeneralD1PhiSymmetryHE.png\" />" << std::endl;
    if (sub == 4)
      htmlFileR << " <img src=\"DrecosignalGeneralD1PhiSymmetryHF.png\" />" << std::endl;
    htmlFileR << "<br>" << std::endl;

    ///////////////////////////////////////////   PositiveDirection:
    ///////////////////////////////////////////////D  different Depthes:
    htmlFileR << "<h2>  Positive direction, D(recosignalvarianceSignalhe) </h3>" << std::endl;
    htmlFileR << "<h3> 2C: D(recosignalvarianceSignalhe) vs phi , different eta, Depth1 </h3>" << std::endl;
    //     htmlFileR << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 1)
      htmlFileR << " <img src=\"DrecosignalPositiveDirectionhistD1PhiSymmetryDepth1HB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileR << " <img src=\"DrecosignalPositiveDirectionhistD1PhiSymmetryDepth1HE.png\" />" << std::endl;
    if (sub == 4)
      htmlFileR << " <img src=\"DrecosignalPositiveDirectionhistD1PhiSymmetryDepth1HF.png\" />" << std::endl;
    htmlFileR << "<br>" << std::endl;

    htmlFileR << "<h3> 2.D. D(recosignalvarianceSignalhe) vs phi , different eta, Depth2 </h3>" << std::endl;
    //     htmlFileR << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 1)
      htmlFileR << " <img src=\"DrecosignalPositiveDirectionhistD1PhiSymmetryDepth2HB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileR << " <img src=\"DrecosignalPositiveDirectionhistD1PhiSymmetryDepth2HE.png\" />" << std::endl;
    if (sub == 4)
      htmlFileR << " <img src=\"DrecosignalPositiveDirectionhistD1PhiSymmetryDepth2HF.png\" />" << std::endl;
    htmlFileR << "<br>" << std::endl;

    if (sub == 1 || sub == 2)
      htmlFileR << "<h3> 2E: D(recosignalvarianceSignalhe) vs phi , different eta, Depth3 </h3>" << std::endl;
    //     htmlFileR << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 1)
      htmlFileR << " <img src=\"DrecosignalPositiveDirectionhistD1PhiSymmetryDepth3HB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileR << " <img src=\"DrecosignalPositiveDirectionhistD1PhiSymmetryDepth3HE.png\" />" << std::endl;
    htmlFileR << "<br>" << std::endl;

    if (sub == 1 || sub == 2)
      htmlFileR << "<h3> 2F: D(recosignalvarianceSignalhe) vs phi , different eta, Depth4 </h3>" << std::endl;
    //     htmlFileR << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 1)
      htmlFileR << " <img src=\"DrecosignalPositiveDirectionhistD1PhiSymmetryDepth4HB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileR << " <img src=\"DrecosignalPositiveDirectionhistD1PhiSymmetryDepth4HE.png\" />" << std::endl;
    htmlFileR << "<br>" << std::endl;

    if (sub == 2)
      htmlFileR << "<h3> 2G: D(recosignalvarianceSignalhe) vs phi , different eta, Depth5 </h3>" << std::endl;
    //     htmlFileR << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 2)
      htmlFileR << " <img src=\"DrecosignalPositiveDirectionhistD1PhiSymmetryDepth5HE.png\" />" << std::endl;
    htmlFileR << "<br>" << std::endl;

    if (sub == 2)
      htmlFileR << "<h3> 2H: D(recosignalvarianceSignalhe) vs phi , different eta, Depth6 </h3>" << std::endl;
    //     htmlFileR << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 2)
      htmlFileR << " <img src=\"DrecosignalPositiveDirectionhistD1PhiSymmetryDepth6HE.png\" />" << std::endl;
    htmlFileR << "<br>" << std::endl;

    if (sub == 2)
      htmlFileR << "<h3> 2I: D(recosignalvarianceSignalhe) vs phi , different eta, Depth7 </h3>" << std::endl;
    //     htmlFileR << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 2)
      htmlFileR << " <img src=\"DrecosignalPositiveDirectionhistD1PhiSymmetryDepth7HE.png\" />" << std::endl;
    htmlFileR << "<br>" << std::endl;

    ///////////////////////////////////////////   NegativeDirection:
    /////////////////////////////////////////////// RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR
    htmlFileR << "<h2> 3:  Negative direction, R = R_depth_ieta_iphi = E_depth_ieta_iphi/E_depth_ieta </h3>"
              << std::endl;

    /////////////////////////////////////////////// different Depthes:
    htmlFileR << "<h3> 3C: R vs phi , different eta, Depth1 </h3>" << std::endl;
    //     htmlFileR << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 1)
      htmlFileR << " <img src=\"RrecosignalNegativeDirectionhistD1PhiSymmetryDepth1HB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileR << " <img src=\"RrecosignalNegativeDirectionhistD1PhiSymmetryDepth1HE.png\" />" << std::endl;
    if (sub == 4)
      htmlFileR << " <img src=\"RrecosignalNegativeDirectionhistD1PhiSymmetryDepth1HF.png\" />" << std::endl;
    htmlFileR << "<br>" << std::endl;

    htmlFileR << "<h3> 3D: R vs phi , different eta, Depth2 </h3>" << std::endl;
    //     htmlFileR << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 1)
      htmlFileR << " <img src=\"RrecosignalNegativeDirectionhistD1PhiSymmetryDepth2HB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileR << " <img src=\"RrecosignalNegativeDirectionhistD1PhiSymmetryDepth2HE.png\" />" << std::endl;
    if (sub == 4)
      htmlFileR << " <img src=\"RrecosignalNegativeDirectionhistD1PhiSymmetryDepth2HF.png\" />" << std::endl;
    htmlFileR << "<br>" << std::endl;

    if (sub == 1 || sub == 2)
      htmlFileR << "<h3> 3E: R vs phi , different eta, Depth3 </h3>" << std::endl;
    //     htmlFileR << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 1)
      htmlFileR << " <img src=\"RrecosignalNegativeDirectionhistD1PhiSymmetryDepth3HB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileR << " <img src=\"RrecosignalNegativeDirectionhistD1PhiSymmetryDepth3HE.png\" />" << std::endl;
    htmlFileR << "<br>" << std::endl;

    if (sub == 1 || sub == 2)
      htmlFileR << "<h3> 3F: R vs phi , different eta, Depth4 </h3>" << std::endl;
    //     htmlFileR << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 1)
      htmlFileR << " <img src=\"RrecosignalNegativeDirectionhistD1PhiSymmetryDepth4HB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileR << " <img src=\"RrecosignalNegativeDirectionhistD1PhiSymmetryDepth4HE.png\" />" << std::endl;
    htmlFileR << "<br>" << std::endl;

    if (sub == 2)
      htmlFileR << "<h3> 3G: R vs phi , different eta, Depth5 </h3>" << std::endl;
    //     htmlFileR << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 2)
      htmlFileR << " <img src=\"RrecosignalNegativeDirectionhistD1PhiSymmetryDepth5HE.png\" />" << std::endl;
    htmlFileR << "<br>" << std::endl;

    if (sub == 2)
      htmlFileR << "<h3> 3H: R vs phi , different eta, Depth6 </h3>" << std::endl;
    //     htmlFileR << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 2)
      htmlFileR << " <img src=\"RrecosignalNegativeDirectionhistD1PhiSymmetryDepth6HE.png\" />" << std::endl;
    htmlFileR << "<br>" << std::endl;

    if (sub == 2)
      htmlFileR << "<h3> 3I: R vs phi , different eta, Depth7 </h3>" << std::endl;
    //     htmlFileR << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 2)
      htmlFileR << " <img src=\"RrecosignalNegativeDirectionhistD1PhiSymmetryDepth7HE.png\" />" << std::endl;
    htmlFileR << "<br>" << std::endl;

    /////////////////////////////////////////////// DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
    htmlFileR << "<h2> 4: Negative direction,   D(recosignalvarianceSignalhe)   </h3>" << std::endl;
    /////////////////////////////////////////////// different Depthes:
    htmlFileR << "<h3> 4C: D(recosignalvarianceSignalhe) vs phi , different eta, Depth1 </h3>" << std::endl;
    //     htmlFileR << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 1)
      htmlFileR << " <img src=\"DrecosignalNegativeDirectionhistD1PhiSymmetryDepth1HB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileR << " <img src=\"DrecosignalNegativeDirectionhistD1PhiSymmetryDepth1HE.png\" />" << std::endl;
    if (sub == 4)
      htmlFileR << " <img src=\"DrecosignalNegativeDirectionhistD1PhiSymmetryDepth1HF.png\" />" << std::endl;
    htmlFileR << "<br>" << std::endl;

    htmlFileR << "<h3> 4.D. D(recosignalvarianceSignalhe) vs phi , different eta, Depth2 </h3>" << std::endl;
    //     htmlFileR << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 1)
      htmlFileR << " <img src=\"DrecosignalNegativeDirectionhistD1PhiSymmetryDepth2HB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileR << " <img src=\"DrecosignalNegativeDirectionhistD1PhiSymmetryDepth2HE.png\" />" << std::endl;
    if (sub == 4)
      htmlFileR << " <img src=\"DrecosignalNegativeDirectionhistD1PhiSymmetryDepth2HF.png\" />" << std::endl;
    htmlFileR << "<br>" << std::endl;

    if (sub == 1 || sub == 2)
      htmlFileR << "<h3> 4E: D(recosignalvarianceSignalhe) vs phi , different eta, Depth3 </h3>" << std::endl;
    //     htmlFileR << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 1)
      htmlFileR << " <img src=\"DrecosignalNegativeDirectionhistD1PhiSymmetryDepth3HB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileR << " <img src=\"DrecosignalNegativeDirectionhistD1PhiSymmetryDepth3HE.png\" />" << std::endl;
    htmlFileR << "<br>" << std::endl;

    if (sub == 1 || sub == 2)
      htmlFileR << "<h3> 4F: D(recosignalvarianceSignalhe) vs phi , different eta, Depth4 </h3>" << std::endl;
    //     htmlFileR << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 1)
      htmlFileR << " <img src=\"DrecosignalNegativeDirectionhistD1PhiSymmetryDepth4HB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileR << " <img src=\"DrecosignalNegativeDirectionhistD1PhiSymmetryDepth4HE.png\" />" << std::endl;
    htmlFileR << "<br>" << std::endl;

    if (sub == 2)
      htmlFileR << "<h3> 4G: D(recosignalvarianceSignalhe) vs phi , different eta, Depth5 </h3>" << std::endl;
    //     htmlFileR << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 2)
      htmlFileR << " <img src=\"DrecosignalNegativeDirectionhistD1PhiSymmetryDepth5HE.png\" />" << std::endl;
    htmlFileR << "<br>" << std::endl;

    if (sub == 2)
      htmlFileR << "<h3> 4H: D(recosignalvarianceSignalhe) vs phi , different eta, Depth6 </h3>" << std::endl;
    //     htmlFileR << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 2)
      htmlFileR << " <img src=\"DrecosignalNegativeDirectionhistD1PhiSymmetryDepth6HE.png\" />" << std::endl;
    htmlFileR << "<br>" << std::endl;

    if (sub == 2)
      htmlFileR << "<h3> 4I: D(recosignalvarianceSignalhe) vs phi , different eta, Depth7 </h3>" << std::endl;
    //     htmlFileR << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 2)
      htmlFileR << " <img src=\"DrecosignalNegativeDirectionhistD1PhiSymmetryDepth7HE.png\" />" << std::endl;
    htmlFileR << "<br>" << std::endl;
    ///////////////////////////////////////////
    htmlFileR.close();
    /////////////////////////////////////////// end of Recosignal
    //
    ////////////////////////////////////////////////////////////////////////////////////////////// RecoNoise:
    ////////////////////////////////////////////////////////////////////////////////////////////// RecoNoise:
    ////////////////////////////////////////////////////////////////////////////////////////////// RecoNoise:

    htmlFileN << "</html><html xmlns=\"http://www.w3.org/1999/xhtml\">" << std::endl;
    htmlFileN << "<head>" << std::endl;
    htmlFileN << "<meta http-equiv=\"Content-Type\" content=\"text/html\"/>" << std::endl;
    htmlFileN << "<title> Remote Monitoring Tool </title>" << std::endl;
    htmlFileN << "<style type=\"text/css\">" << std::endl;
    htmlFileN << " body,td{ background-color: #FFFFCC; font-family: arial, arial ce, helvetica; font-size: 12px; }"
              << std::endl;
    htmlFileN << "   td.s0 { font-family: arial, arial ce, helvetica; }" << std::endl;
    htmlFileN << "   td.s1 { font-family: arial, arial ce, helvetica; font-weight: bold; background-color: #FFC169; "
                 "text-align: center;}"
              << std::endl;
    htmlFileN << "   td.s2 { font-family: arial, arial ce, helvetica; background-color: #eeeeee; }" << std::endl;
    htmlFileN << "   td.s3 { font-family: arial, arial ce, helvetica; background-color: #d0d0d0; }" << std::endl;
    htmlFileN << "   td.s4 { font-family: arial, arial ce, helvetica; background-color: #FFC169; }" << std::endl;
    htmlFileN << "</style>" << std::endl;
    htmlFileN << "<body>" << std::endl;

    /////////////////////////////////////////////// RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR

    if (sub == 1)
      htmlFileN << "<h1> RecoNoise Phi-symmetry for Calibration Group, HB, RUN = " << runnumber << " </h1>"
                << std::endl;
    if (sub == 2)
      htmlFileN << "<h1> RecoNoise Phi-symmetry for Calibration Group, HE, RUN = " << runnumber << " </h1>"
                << std::endl;
    if (sub == 4)
      htmlFileN << "<h1> RecoNoise Phi-symmetry for Calibration Group, HF, RUN = " << runnumber << " </h1>"
                << std::endl;
    htmlFileN << "<br>" << std::endl;

    htmlFileN << "<h2> 1: R = R_depth_ieta_iphi = E_depth_ieta_iphi/E_depth_ieta </h3>" << std::endl;
    htmlFileN << "<h3> 1A: eta/phi-plot: R, averaged over depthes </h3>" << std::endl;
    //     htmlFileN << "<h4> Legend: Bins less "<<Pedest[0][sub]<<" correpond to bad Pedestals </h4>"<< std::endl;
    if (sub == 1)
      htmlFileN << " <img src=\"RreconoiseGeneralD2PhiSymmetryHB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileN << " <img src=\"RreconoiseGeneralD2PhiSymmetryHE.png\" />" << std::endl;
    if (sub == 4)
      htmlFileN << " <img src=\"RreconoiseGeneralD2PhiSymmetryHF.png\" />" << std::endl;
    htmlFileN << "<br>" << std::endl;

    htmlFileN << "<h3> 1B: R vs phi , averaged over depthes & eta </h3>" << std::endl;
    //     htmlFileN << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 1)
      htmlFileN << " <img src=\"RreconoiseGeneralD1PhiSymmetryHB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileN << " <img src=\"RreconoiseGeneralD1PhiSymmetryHE.png\" />" << std::endl;
    if (sub == 4)
      htmlFileN << " <img src=\"RreconoiseGeneralD1PhiSymmetryHF.png\" />" << std::endl;
    htmlFileN << "<br>" << std::endl;

    ///////////////////////////////////////////   PositiveDirection:

    /////////////////////////////////////////////// R different Depthes:
    htmlFileN << "<h2>  Positive direction, R = R_depth_ieta_iphi = E_depth_ieta_iphi/E_depth_ieta </h3>" << std::endl;
    htmlFileN << "<h3> 1C: R vs phi , different eta, Depth1 </h3>" << std::endl;
    //     htmlFileN << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 1)
      htmlFileN << " <img src=\"RreconoisePositiveDirectionhistD1PhiSymmetryDepth1HB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileN << " <img src=\"RreconoisePositiveDirectionhistD1PhiSymmetryDepth1HE.png\" />" << std::endl;
    if (sub == 4)
      htmlFileN << " <img src=\"RreconoisePositiveDirectionhistD1PhiSymmetryDepth1HF.png\" />" << std::endl;
    htmlFileN << "<br>" << std::endl;

    htmlFileN << "<h3> 1D: R vs phi , different eta, Depth2 </h3>" << std::endl;
    //     htmlFileN << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 1)
      htmlFileN << " <img src=\"RreconoisePositiveDirectionhistD1PhiSymmetryDepth2HB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileN << " <img src=\"RreconoisePositiveDirectionhistD1PhiSymmetryDepth2HE.png\" />" << std::endl;
    if (sub == 4)
      htmlFileN << " <img src=\"RreconoisePositiveDirectionhistD1PhiSymmetryDepth2HF.png\" />" << std::endl;
    htmlFileN << "<br>" << std::endl;

    if (sub == 1 || sub == 2)
      htmlFileN << "<h3> 1E: R vs phi , different eta, Depth3 </h3>" << std::endl;
    //     htmlFileN << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 1)
      htmlFileN << " <img src=\"RreconoisePositiveDirectionhistD1PhiSymmetryDepth3HB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileN << " <img src=\"RreconoisePositiveDirectionhistD1PhiSymmetryDepth3HE.png\" />" << std::endl;
    htmlFileN << "<br>" << std::endl;

    if (sub == 1 || sub == 2)
      htmlFileN << "<h3> 1F: R vs phi , different eta, Depth4 </h3>" << std::endl;
    //     htmlFileN << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 1)
      htmlFileN << " <img src=\"RreconoisePositiveDirectionhistD1PhiSymmetryDepth4HB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileN << " <img src=\"RreconoisePositiveDirectionhistD1PhiSymmetryDepth4HE.png\" />" << std::endl;
    htmlFileN << "<br>" << std::endl;

    if (sub == 2)
      htmlFileN << "<h3> 1G: R vs phi , different eta, Depth5 </h3>" << std::endl;
    //     htmlFileN << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 2)
      htmlFileN << " <img src=\"RreconoisePositiveDirectionhistD1PhiSymmetryDepth5HE.png\" />" << std::endl;
    htmlFileN << "<br>" << std::endl;

    if (sub == 2)
      htmlFileN << "<h3> 1H: R vs phi , different eta, Depth6 </h3>" << std::endl;
    //     htmlFileN << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 2)
      htmlFileN << " <img src=\"RreconoisePositiveDirectionhistD1PhiSymmetryDepth6HE.png\" />" << std::endl;
    htmlFileN << "<br>" << std::endl;

    if (sub == 2)
      htmlFileN << "<h3> 1I: R vs phi , different eta, Depth7 </h3>" << std::endl;
    //     htmlFileN << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 2)
      htmlFileN << " <img src=\"RreconoisePositiveDirectionhistD1PhiSymmetryDepth7HE.png\" />" << std::endl;
    htmlFileN << "<br>" << std::endl;

    /////////////////////////////////////////////// DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
    htmlFileN << "<h2> 2: D(reconoisevarianceNoisehe)   </h3>" << std::endl;
    htmlFileN << "<h3> 2A: eta/phi-plot: D(reconoisevarianceNoisehe), averaged over depthes </h3>" << std::endl;
    //     htmlFileN << "<h4> Legend: Bins less "<<Pedest[0][sub]<<" correpond to bad Pedestals </h4>"<< std::endl;
    if (sub == 1)
      htmlFileN << " <img src=\"DreconoiseGeneralD2PhiSymmetryHB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileN << " <img src=\"DreconoiseGeneralD2PhiSymmetryHE.png\" />" << std::endl;
    if (sub == 4)
      htmlFileN << " <img src=\"DreconoiseGeneralD2PhiSymmetryHF.png\" />" << std::endl;
    htmlFileN << "<br>" << std::endl;

    htmlFileN << "<h3> 2B: D(reconoisevarianceNoisehe) vs phi , averaged over depthes & eta </h3>" << std::endl;
    //     htmlFileN << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 1)
      htmlFileN << " <img src=\"DreconoiseGeneralD1PhiSymmetryHB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileN << " <img src=\"DreconoiseGeneralD1PhiSymmetryHE.png\" />" << std::endl;
    if (sub == 4)
      htmlFileN << " <img src=\"DreconoiseGeneralD1PhiSymmetryHF.png\" />" << std::endl;
    htmlFileN << "<br>" << std::endl;

    ///////////////////////////////////////////   PositiveDirection:
    ///////////////////////////////////////////////D  different Depthes:
    htmlFileN << "<h2>  Positive direction, D(reconoisevarianceNoisehe) </h3>" << std::endl;
    htmlFileN << "<h3> 2C: D(reconoisevarianceNoisehe) vs phi , different eta, Depth1 </h3>" << std::endl;
    //     htmlFileN << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 1)
      htmlFileN << " <img src=\"DreconoisePositiveDirectionhistD1PhiSymmetryDepth1HB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileN << " <img src=\"DreconoisePositiveDirectionhistD1PhiSymmetryDepth1HE.png\" />" << std::endl;
    if (sub == 4)
      htmlFileN << " <img src=\"DreconoisePositiveDirectionhistD1PhiSymmetryDepth1HF.png\" />" << std::endl;
    htmlFileN << "<br>" << std::endl;

    htmlFileN << "<h3> 2.D. D(reconoisevarianceNoisehe) vs phi , different eta, Depth2 </h3>" << std::endl;
    //     htmlFileN << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 1)
      htmlFileN << " <img src=\"DreconoisePositiveDirectionhistD1PhiSymmetryDepth2HB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileN << " <img src=\"DreconoisePositiveDirectionhistD1PhiSymmetryDepth2HE.png\" />" << std::endl;
    if (sub == 4)
      htmlFileN << " <img src=\"DreconoisePositiveDirectionhistD1PhiSymmetryDepth2HF.png\" />" << std::endl;
    htmlFileN << "<br>" << std::endl;

    if (sub == 1 || sub == 2)
      htmlFileN << "<h3> 2E: D(reconoisevarianceNoisehe) vs phi , different eta, Depth3 </h3>" << std::endl;
    //     htmlFileN << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 1)
      htmlFileN << " <img src=\"DreconoisePositiveDirectionhistD1PhiSymmetryDepth3HB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileN << " <img src=\"DreconoisePositiveDirectionhistD1PhiSymmetryDepth3HE.png\" />" << std::endl;
    htmlFileN << "<br>" << std::endl;

    if (sub == 1 || sub == 2)
      htmlFileN << "<h3> 2F: D(reconoisevarianceNoisehe) vs phi , different eta, Depth4 </h3>" << std::endl;
    //     htmlFileN << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 1)
      htmlFileN << " <img src=\"DreconoisePositiveDirectionhistD1PhiSymmetryDepth4HB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileN << " <img src=\"DreconoisePositiveDirectionhistD1PhiSymmetryDepth4HE.png\" />" << std::endl;
    htmlFileN << "<br>" << std::endl;

    if (sub == 2)
      htmlFileN << "<h3> 2G: D(reconoisevarianceNoisehe) vs phi , different eta, Depth5 </h3>" << std::endl;
    //     htmlFileN << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 2)
      htmlFileN << " <img src=\"DreconoisePositiveDirectionhistD1PhiSymmetryDepth5HE.png\" />" << std::endl;
    htmlFileN << "<br>" << std::endl;

    if (sub == 2)
      htmlFileN << "<h3> 2H: D(reconoisevarianceNoisehe) vs phi , different eta, Depth6 </h3>" << std::endl;
    //     htmlFileN << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 2)
      htmlFileN << " <img src=\"DreconoisePositiveDirectionhistD1PhiSymmetryDepth6HE.png\" />" << std::endl;
    htmlFileN << "<br>" << std::endl;

    if (sub == 2)
      htmlFileN << "<h3> 2I: D(reconoisevarianceNoisehe) vs phi , different eta, Depth7 </h3>" << std::endl;
    //     htmlFileN << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 2)
      htmlFileN << " <img src=\"DreconoisePositiveDirectionhistD1PhiSymmetryDepth7HE.png\" />" << std::endl;
    htmlFileN << "<br>" << std::endl;

    ///////////////////////////////////////////   NegativeDirection:
    /////////////////////////////////////////////// RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR
    htmlFileN << "<h2> 3:  Negative direction, R = R_depth_ieta_iphi = E_depth_ieta_iphi/E_depth_ieta </h3>"
              << std::endl;

    /////////////////////////////////////////////// different Depthes:
    htmlFileN << "<h3> 3C: R vs phi , different eta, Depth1 </h3>" << std::endl;
    //     htmlFileN << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 1)
      htmlFileN << " <img src=\"RreconoiseNegativeDirectionhistD1PhiSymmetryDepth1HB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileN << " <img src=\"RreconoiseNegativeDirectionhistD1PhiSymmetryDepth1HE.png\" />" << std::endl;
    if (sub == 4)
      htmlFileN << " <img src=\"RreconoiseNegativeDirectionhistD1PhiSymmetryDepth1HF.png\" />" << std::endl;
    htmlFileN << "<br>" << std::endl;

    htmlFileN << "<h3> 3D: R vs phi , different eta, Depth2 </h3>" << std::endl;
    //     htmlFileN << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 1)
      htmlFileN << " <img src=\"RreconoiseNegativeDirectionhistD1PhiSymmetryDepth2HB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileN << " <img src=\"RreconoiseNegativeDirectionhistD1PhiSymmetryDepth2HE.png\" />" << std::endl;
    if (sub == 4)
      htmlFileN << " <img src=\"RreconoiseNegativeDirectionhistD1PhiSymmetryDepth2HF.png\" />" << std::endl;
    htmlFileN << "<br>" << std::endl;

    if (sub == 1 || sub == 2)
      htmlFileN << "<h3> 3E: R vs phi , different eta, Depth3 </h3>" << std::endl;
    //     htmlFileN << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 1)
      htmlFileN << " <img src=\"RreconoiseNegativeDirectionhistD1PhiSymmetryDepth3HB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileN << " <img src=\"RreconoiseNegativeDirectionhistD1PhiSymmetryDepth3HE.png\" />" << std::endl;
    htmlFileN << "<br>" << std::endl;

    if (sub == 1 || sub == 2)
      htmlFileN << "<h3> 3F: R vs phi , different eta, Depth4 </h3>" << std::endl;
    //     htmlFileN << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 1)
      htmlFileN << " <img src=\"RreconoiseNegativeDirectionhistD1PhiSymmetryDepth4HB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileN << " <img src=\"RreconoiseNegativeDirectionhistD1PhiSymmetryDepth4HE.png\" />" << std::endl;
    htmlFileN << "<br>" << std::endl;

    if (sub == 2)
      htmlFileN << "<h3> 3G: R vs phi , different eta, Depth5 </h3>" << std::endl;
    //     htmlFileN << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 2)
      htmlFileN << " <img src=\"RreconoiseNegativeDirectionhistD1PhiSymmetryDepth5HE.png\" />" << std::endl;
    htmlFileN << "<br>" << std::endl;

    if (sub == 2)
      htmlFileN << "<h3> 3H: R vs phi , different eta, Depth6 </h3>" << std::endl;
    //     htmlFileN << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 2)
      htmlFileN << " <img src=\"RreconoiseNegativeDirectionhistD1PhiSymmetryDepth6HE.png\" />" << std::endl;
    htmlFileN << "<br>" << std::endl;

    if (sub == 2)
      htmlFileN << "<h3> 3I: R vs phi , different eta, Depth7 </h3>" << std::endl;
    //     htmlFileN << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 2)
      htmlFileN << " <img src=\"RreconoiseNegativeDirectionhistD1PhiSymmetryDepth7HE.png\" />" << std::endl;
    htmlFileN << "<br>" << std::endl;

    /////////////////////////////////////////////// DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
    htmlFileN << "<h2> 4: Negative direction,   D(reconoisevarianceNoisehe)   </h3>" << std::endl;
    /////////////////////////////////////////////// different Depthes:
    htmlFileN << "<h3> 4C: D(reconoisevarianceNoisehe) vs phi , different eta, Depth1 </h3>" << std::endl;
    //     htmlFileN << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 1)
      htmlFileN << " <img src=\"DreconoiseNegativeDirectionhistD1PhiSymmetryDepth1HB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileN << " <img src=\"DreconoiseNegativeDirectionhistD1PhiSymmetryDepth1HE.png\" />" << std::endl;
    if (sub == 4)
      htmlFileN << " <img src=\"DreconoiseNegativeDirectionhistD1PhiSymmetryDepth1HF.png\" />" << std::endl;
    htmlFileN << "<br>" << std::endl;

    htmlFileN << "<h3> 4.D. D(reconoisevarianceNoisehe) vs phi , different eta, Depth2 </h3>" << std::endl;
    //     htmlFileN << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 1)
      htmlFileN << " <img src=\"DreconoiseNegativeDirectionhistD1PhiSymmetryDepth2HB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileN << " <img src=\"DreconoiseNegativeDirectionhistD1PhiSymmetryDepth2HE.png\" />" << std::endl;
    if (sub == 4)
      htmlFileN << " <img src=\"DreconoiseNegativeDirectionhistD1PhiSymmetryDepth2HF.png\" />" << std::endl;
    htmlFileN << "<br>" << std::endl;

    if (sub == 1 || sub == 2)
      htmlFileN << "<h3> 4E: D(reconoisevarianceNoisehe) vs phi , different eta, Depth3 </h3>" << std::endl;
    //     htmlFileN << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 1)
      htmlFileN << " <img src=\"DreconoiseNegativeDirectionhistD1PhiSymmetryDepth3HB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileN << " <img src=\"DreconoiseNegativeDirectionhistD1PhiSymmetryDepth3HE.png\" />" << std::endl;
    htmlFileN << "<br>" << std::endl;

    if (sub == 1 || sub == 2)
      htmlFileN << "<h3> 4F: D(reconoisevarianceNoisehe) vs phi , different eta, Depth4 </h3>" << std::endl;
    //     htmlFileN << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 1)
      htmlFileN << " <img src=\"DreconoiseNegativeDirectionhistD1PhiSymmetryDepth4HB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileN << " <img src=\"DreconoiseNegativeDirectionhistD1PhiSymmetryDepth4HE.png\" />" << std::endl;
    htmlFileN << "<br>" << std::endl;

    if (sub == 2)
      htmlFileN << "<h3> 4G: D(reconoisevarianceNoisehe) vs phi , different eta, Depth5 </h3>" << std::endl;
    //     htmlFileN << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 2)
      htmlFileN << " <img src=\"DreconoiseNegativeDirectionhistD1PhiSymmetryDepth5HE.png\" />" << std::endl;
    htmlFileN << "<br>" << std::endl;

    if (sub == 2)
      htmlFileN << "<h3> 4H: D(reconoisevarianceNoisehe) vs phi , different eta, Depth6 </h3>" << std::endl;
    //     htmlFileN << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 2)
      htmlFileN << " <img src=\"DreconoiseNegativeDirectionhistD1PhiSymmetryDepth6HE.png\" />" << std::endl;
    htmlFileN << "<br>" << std::endl;

    if (sub == 2)
      htmlFileN << "<h3> 4I: D(reconoisevarianceNoisehe) vs phi , different eta, Depth7 </h3>" << std::endl;
    //     htmlFileN << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 2)
      htmlFileN << " <img src=\"DreconoiseNegativeDirectionhistD1PhiSymmetryDepth7HE.png\" />" << std::endl;
    htmlFileN << "<br>" << std::endl;
    ///////////////////////////////////////////

    /////////////////////////////////////////////// DIFDIFDIFDIFDIFDIFDIFDIFDIFDIFDIFDIF

    if (sub == 1)
      htmlFileN << "<h1> Only for Noise RecHits these lines below, HB, RUN = " << runnumber << " </h1>" << std::endl;
    if (sub == 2)
      htmlFileN << "<h1> Only for Noise RecHits these lines below, HE, RUN = " << runnumber << " </h1>" << std::endl;
    if (sub == 4)
      htmlFileN << "<h1> Only for Noise RecHits these lines below, HF, RUN = " << runnumber << " </h1>" << std::endl;
    htmlFileN << "<br>" << std::endl;

    htmlFileN << "<h2> 5: DIF = DIF_depth_ieta_iphi = E_depth_ieta_iphi - E_depth_ieta </h3>" << std::endl;
    htmlFileN << "<h3> 5A: eta/phi-plot: DIF, averaged over depthes </h3>" << std::endl;
    //     htmlFileN << "<h4> Legend: Bins less "<<Pedest[0][sub]<<" correpond to bad Pedestals </h4>"<< std::endl;
    if (sub == 1)
      htmlFileN << " <img src=\"DIFreconoiseGeneralD2PhiSymmetryHB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileN << " <img src=\"DIFreconoiseGeneralD2PhiSymmetryHE.png\" />" << std::endl;
    if (sub == 4)
      htmlFileN << " <img src=\"DIFreconoiseGeneralD2PhiSymmetryHF.png\" />" << std::endl;
    htmlFileN << "<br>" << std::endl;

    htmlFileN << "<h3> 5B: DIF vs phi , averaged over depthes & eta </h3>" << std::endl;
    //     htmlFileN << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 1)
      htmlFileN << " <img src=\"DIFreconoiseGeneralD1PhiSymmetryHB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileN << " <img src=\"DIFreconoiseGeneralD1PhiSymmetryHE.png\" />" << std::endl;
    if (sub == 4)
      htmlFileN << " <img src=\"DIFreconoiseGeneralD1PhiSymmetryHF.png\" />" << std::endl;
    htmlFileN << "<br>" << std::endl;

    /////////////////////////////////////////// DIF  PositiveDirection:

    /////////////////////////////////////////////// DIF different Depthes:
    htmlFileN << "<h2>  Positive direction, DIF = DIF_depth_ieta_iphi = E_depth_ieta_iphi - E_depth_ieta </h3>"
              << std::endl;
    htmlFileN << "<h3> 5C: DIF vs phi , different eta, Depth1 </h3>" << std::endl;
    //     htmlFileN << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 1)
      htmlFileN << " <img src=\"DIFreconoisePositiveDirectionhistD1PhiSymmetryDepth1HB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileN << " <img src=\"DIFreconoisePositiveDirectionhistD1PhiSymmetryDepth1HE.png\" />" << std::endl;
    if (sub == 4)
      htmlFileN << " <img src=\"DIFreconoisePositiveDirectionhistD1PhiSymmetryDepth1HF.png\" />" << std::endl;
    htmlFileN << "<br>" << std::endl;

    htmlFileN << "<h3> 5D: DIF vs phi , different eta, Depth2 </h3>" << std::endl;
    //     htmlFileN << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 1)
      htmlFileN << " <img src=\"DIFreconoisePositiveDirectionhistD1PhiSymmetryDepth2HB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileN << " <img src=\"DIFreconoisePositiveDirectionhistD1PhiSymmetryDepth2HE.png\" />" << std::endl;
    if (sub == 4)
      htmlFileN << " <img src=\"DIFreconoisePositiveDirectionhistD1PhiSymmetryDepth2HF.png\" />" << std::endl;
    htmlFileN << "<br>" << std::endl;

    if (sub == 1 || sub == 2)
      htmlFileN << "<h3> 1E: DIF vs phi , different eta, Depth3 </h3>" << std::endl;
    //     htmlFileN << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 1)
      htmlFileN << " <img src=\"DIFreconoisePositiveDirectionhistD1PhiSymmetryDepth3HB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileN << " <img src=\"DIFreconoisePositiveDirectionhistD1PhiSymmetryDepth3HE.png\" />" << std::endl;
    htmlFileN << "<br>" << std::endl;

    if (sub == 1 || sub == 2)
      htmlFileN << "<h3> 5F: DIF vs phi , different eta, Depth4 </h3>" << std::endl;
    //     htmlFileN << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 1)
      htmlFileN << " <img src=\"DIFreconoisePositiveDirectionhistD1PhiSymmetryDepth4HB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileN << " <img src=\"DIFreconoisePositiveDirectionhistD1PhiSymmetryDepth4HE.png\" />" << std::endl;
    htmlFileN << "<br>" << std::endl;

    if (sub == 2)
      htmlFileN << "<h3> 5G: DIF vs phi , different eta, Depth5 </h3>" << std::endl;
    //     htmlFileN << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 2)
      htmlFileN << " <img src=\"DIFreconoisePositiveDirectionhistD1PhiSymmetryDepth5HE.png\" />" << std::endl;
    htmlFileN << "<br>" << std::endl;

    if (sub == 2)
      htmlFileN << "<h3> 5H: DIF vs phi , different eta, Depth6 </h3>" << std::endl;
    //     htmlFileN << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 2)
      htmlFileN << " <img src=\"DIFreconoisePositiveDirectionhistD1PhiSymmetryDepth6HE.png\" />" << std::endl;
    htmlFileN << "<br>" << std::endl;

    if (sub == 2)
      htmlFileN << "<h3> 5I: DIF vs phi , different eta, Depth7 </h3>" << std::endl;
    //     htmlFileN << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 2)
      htmlFileN << " <img src=\"DIFreconoisePositiveDirectionhistD1PhiSymmetryDepth7HE.png\" />" << std::endl;
    htmlFileN << "<br>" << std::endl;

    /////////////////////////////////////////// DIF  NegativeDirection:

    /////////////////////////////////////////////// DIF different Depthes:
    htmlFileN << "<h2>  Negative direction, DIF = DIF_depth_ieta_iphi = E_depth_ieta_iphi - E_depth_ieta </h3>"
              << std::endl;
    htmlFileN << "<h3> 5C: DIF vs phi , different eta, Depth1 </h3>" << std::endl;
    //     htmlFileN << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 1)
      htmlFileN << " <img src=\"DIFreconoiseNegativeDirectionhistD1PhiSymmetryDepth1HB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileN << " <img src=\"DIFreconoiseNegativeDirectionhistD1PhiSymmetryDepth1HE.png\" />" << std::endl;
    if (sub == 4)
      htmlFileN << " <img src=\"DIFreconoiseNegativeDirectionhistD1PhiSymmetryDepth1HF.png\" />" << std::endl;
    htmlFileN << "<br>" << std::endl;

    htmlFileN << "<h3> 5D: DIF vs phi , different eta, Depth2 </h3>" << std::endl;
    //     htmlFileN << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 1)
      htmlFileN << " <img src=\"DIFreconoiseNegativeDirectionhistD1PhiSymmetryDepth2HB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileN << " <img src=\"DIFreconoiseNegativeDirectionhistD1PhiSymmetryDepth2HE.png\" />" << std::endl;
    if (sub == 4)
      htmlFileN << " <img src=\"DIFreconoiseNegativeDirectionhistD1PhiSymmetryDepth2HF.png\" />" << std::endl;
    htmlFileN << "<br>" << std::endl;

    if (sub == 1 || sub == 2)
      htmlFileN << "<h3> 5E: DIF vs phi , different eta, Depth3 </h3>" << std::endl;
    //     htmlFileN << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 1)
      htmlFileN << " <img src=\"DIFreconoiseNegativeDirectionhistD1PhiSymmetryDepth3HB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileN << " <img src=\"DIFreconoiseNegativeDirectionhistD1PhiSymmetryDepth3HE.png\" />" << std::endl;
    htmlFileN << "<br>" << std::endl;

    if (sub == 1 || sub == 2)
      htmlFileN << "<h3> 5F: DIF vs phi , different eta, Depth4 </h3>" << std::endl;
    //     htmlFileN << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 1)
      htmlFileN << " <img src=\"DIFreconoiseNegativeDirectionhistD1PhiSymmetryDepth4HB.png\" />" << std::endl;
    if (sub == 2)
      htmlFileN << " <img src=\"DIFreconoiseNegativeDirectionhistD1PhiSymmetryDepth4HE.png\" />" << std::endl;
    htmlFileN << "<br>" << std::endl;

    if (sub == 2)
      htmlFileN << "<h3> 5G: DIF vs phi , different eta, Depth5 </h3>" << std::endl;
    //     htmlFileN << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 2)
      htmlFileN << " <img src=\"DIFreconoiseNegativeDirectionhistD1PhiSymmetryDepth5HE.png\" />" << std::endl;
    htmlFileN << "<br>" << std::endl;

    if (sub == 2)
      htmlFileN << "<h3> 5H: DIF vs phi , different eta, Depth6 </h3>" << std::endl;
    //     htmlFileN << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 2)
      htmlFileN << " <img src=\"DIFreconoiseNegativeDirectionhistD1PhiSymmetryDepth6HE.png\" />" << std::endl;
    htmlFileN << "<br>" << std::endl;

    if (sub == 2)
      htmlFileN << "<h3> 5I: DIF vs phi , different eta, Depth7 </h3>" << std::endl;
    //     htmlFileN << "<h4> Channel legend: white - good, other colour - bad. </h4>"<< std::endl;
    if (sub == 2)
      htmlFileN << " <img src=\"DIFreconoiseNegativeDirectionhistD1PhiSymmetryDepth7HE.png\" />" << std::endl;
    htmlFileN << "<br>" << std::endl;

    /////////////////////////////////////////// end of Reconoise

    //
    //
    htmlFileN.close();

    /////////////////////////////////////////// end of Reconoise
    /////////////////////////////////////////// end of Reconoise

    //
    //
  }  // end sub  //for (int sub=1;sub<=4;sub++) {  //Subdetector: 1-HB, 2-HE, 3-HF, 4-HO

  //======================================================================

  std::cout << "********" << std::endl;
  std::cout << "************    Start creating subdet  html pages: - rather long time needed, waiting please"
            << std::endl;
  //======================================================================
  // Creating subdet  html pages:

  for (int sub = 1; sub <= 4; sub++) {  //Subdetector: 1-HB, 2-HE, 3-HF, 4-HO
    ofstream htmlFile;
    if (sub == 1)
      htmlFile.open("HB.html");
    if (sub == 2)
      htmlFile.open("HE.html");
    if (sub == 3)
      htmlFile.open("HO.html");
    if (sub == 4)
      htmlFile.open("HF.html");

    htmlFile << "</html><html xmlns=\"http://www.w3.org/1999/xhtml\">" << std::endl;
    htmlFile << "<head>" << std::endl;
    htmlFile << "<meta http-equiv=\"Content-Type\" content=\"text/html\"/>" << std::endl;
    htmlFile << "<title> Remote Monitoring Tool </title>" << std::endl;
    htmlFile << "<style type=\"text/css\">" << std::endl;
    htmlFile << " body,td{ background-color: #FFFFCC; font-family: arial, arial ce, helvetica; font-size: 12px; }"
             << std::endl;
    htmlFile << "   td.s0 { font-family: arial, arial ce, helvetica; }" << std::endl;
    htmlFile << "   td.s1 { font-family: arial, arial ce, helvetica; font-weight: bold; background-color: #FFC169; "
                "text-align: center;}"
             << std::endl;
    htmlFile << "   td.s2 { font-family: arial, arial ce, helvetica; background-color: #eeeeee; }" << std::endl;
    htmlFile << "   td.s3 { font-family: arial, arial ce, helvetica; background-color: #d0d0d0; }" << std::endl;
    htmlFile << "   td.s4 { font-family: arial, arial ce, helvetica; background-color: #FFC169; }" << std::endl;
    htmlFile << "   td.s5 { font-family: arial, arial ce, helvetica; background-color: #FF00FF; }" << std::endl;
    htmlFile << "   td.s6 { font-family: arial, arial ce, helvetica; background-color: #9ACD32; }" << std::endl;
    htmlFile << "   td.s7 { font-family: arial, arial ce, helvetica; background-color: #32CD32; }" << std::endl;
    htmlFile << "   td.s8 { font-family: arial, arial ce, helvetica; background-color: #00FFFF; }" << std::endl;
    htmlFile << "   td.s9 { font-family: arial, arial ce, helvetica; background-color: #FFE4E1; }" << std::endl;
    htmlFile << "   td.s10 { font-family: arial, arial ce, helvetica; background-color: #A0522D; }" << std::endl;
    htmlFile << "   td.s11 { font-family: arial, arial ce, helvetica; background-color: #1E90FF; }" << std::endl;
    htmlFile << "   td.s12 { font-family: arial, arial ce, helvetica; background-color: #00BFFF; }" << std::endl;
    htmlFile << "   td.s13 { font-family: arial, arial ce, helvetica; background-color: #FFFF00; }" << std::endl;
    htmlFile << "   td.s14 { font-family: arial, arial ce, helvetica; background-color: #B8860B; }" << std::endl;
    htmlFile << "</style>" << std::endl;
    htmlFile << "<body>" << std::endl;
    if (sub == 1)
      htmlFile << "<h1> HCAL BARREL, RUN = " << runnumber << " </h1>" << std::endl;
    if (sub == 2)
      htmlFile << "<h1> HCAL ENDCAP, RUN = " << runnumber << " </h1>" << std::endl;
    if (sub == 3)
      htmlFile << "<h1> HCAL OUTER, RUN = " << runnumber << " </h1>" << std::endl;
    if (sub == 4)
      htmlFile << "<h1> HCAL FORWARD, RUN = " << runnumber << " </h1>" << std::endl;
    htmlFile << "<br>" << std::endl;
    if (sub == 1)
      htmlFile << "<h2> 1. Analysis results for HB</h2>" << std::endl;
    if (sub == 2)
      htmlFile << "<h2> 1. Analysis results for HE</h2>" << std::endl;
    if (sub == 3)
      htmlFile << "<h2> 1. Analysis results for HO</h2>" << std::endl;
    if (sub == 4)
      htmlFile << "<h2> 1. Analysis results for HF</h2>" << std::endl;
    htmlFile << "<table width=\"600\">" << std::endl;
    htmlFile << "<tr>" << std::endl;

    if (sub == 1) {
      /*
       htmlFile << "  <td><a href=\"HB_Tile.html\">Megatile Channels</a></td>"<< std::endl;
       htmlFile << "  <td><a href=\"HB_Calib.html\">Calibration Channels</a></td>"<< std::endl;
       htmlFile << "  <td><a href=\"HB_Drift.html\">Gain Stability</a></td>"<< std::endl;
       htmlFile << "  <td><a href=\"HB_Pedestals.html\">Pedestals</a></td>"<< std::endl;
       htmlFile << "  <td><a href=\"HB_Shapes.html\">ADC Shapes</a></td>"<< std::endl;
       htmlFile << "  <td><a href=\"HB_PhiSymmetryDigi.html\">Phi-symmetryDigi</a></td>"<< std::endl;
       htmlFile << "  <td><a href=\"HB_PhiSymmetryRecoSignal.html\">Phi-symmetryRecoSignal</a></td>"<< std::endl;
       htmlFile << "  <td><a href=\"HB_PhiSymmetryRecoNoise.html\">Phi-symmetryRecoNoise</a></td>"<< std::endl;
*/

      htmlFile << "  <td><a href=\"https://cms-conddb.cern.ch/eosweb/hcal/HcalRemoteMonitoring/RMT/LED_" << runnumber
               << "/HB_Tile.html\">Megatile Channels</a></td>" << std::endl;
      htmlFile << "  <td><a href=\"https://cms-conddb.cern.ch/eosweb/hcal/HcalRemoteMonitoring/RMT/LED_" << runnumber
               << "/HB_Calib.html\">Calibration Channels</a></td>" << std::endl;
      htmlFile << "  <td><a href=\"https://cms-conddb.cern.ch/eosweb/hcal/HcalRemoteMonitoring/RMT/LED_" << runnumber
               << "/HB_Drift.html\">Gain Stability</a></td>" << std::endl;
      htmlFile << "  <td><a href=\"https://cms-conddb.cern.ch/eosweb/hcal/HcalRemoteMonitoring/RMT/LED_" << runnumber
               << "/HB_Pedestals.html\">Pedestals</a></td>" << std::endl;
      htmlFile << "  <td><a href=\"https://cms-conddb.cern.ch/eosweb/hcal/HcalRemoteMonitoring/RMT/LED_" << runnumber
               << "/HB_Shapes.html\">ADC Shapes</a></td>" << std::endl;
      htmlFile << "  <td><a href=\"https://cms-conddb.cern.ch/eosweb/hcal/HcalRemoteMonitoring/RMT/LED_" << runnumber
               << "/HB_PhiSymmetryDigi.html\">Phi-SymmetryDigi</a></td>" << std::endl;
      htmlFile << "  <td><a href=\"https://cms-conddb.cern.ch/eosweb/hcal/HcalRemoteMonitoring/RMT/LED_" << runnumber
               << "/HB_PhiSymmetryRecoSignal.html\">Phi-SymmetryRecoSignal</a></td>" << std::endl;
      htmlFile << "  <td><a href=\"https://cms-conddb.cern.ch/eosweb/hcal/HcalRemoteMonitoring/RMT/LED_" << runnumber
               << "/HB_PhiSymmetryRecoNoise.html\">Phi-SymmetryRecoNoise</a></td>" << std::endl;
    }
    if (sub == 2) {
      /*
       htmlFile << "  <td><a href=\"HE_Tile.html\">Megatile Channels</a></td>"<< std::endl;
       htmlFile << "  <td><a href=\"HE_Calib.html\">Calibration Channels</a></td>"<< std::endl;
       htmlFile << "  <td><a href=\"HE_Drift.html\">Gain Stability</a></td>"<< std::endl;
       htmlFile << "  <td><a href=\"HE_Pedestals.html\">Pedestals</a></td>"<< std::endl;
       htmlFile << "  <td><a href=\"HE_Shapes.html\">ADC Shapes</a></td>"<< std::endl;
       htmlFile << "  <td><a href=\"HE_PhiSymmetryDigi.html\">Phi-symmetryDigi</a></td>"<< std::endl;
       htmlFile << "  <td><a href=\"HE_PhiSymmetryRecoSignal.html\">Phi-symmetryRecoSignal</a></td>"<< std::endl;
       htmlFile << "  <td><a href=\"HE_PhiSymmetryRecoNoise.html\">Phi-symmetryRecoNoise</a></td>"<< std::endl;
*/

      htmlFile << "  <td><a href=\"https://cms-conddb.cern.ch/eosweb/hcal/HcalRemoteMonitoring/RMT/LED_" << runnumber
               << "/HE_Tile.html\">Megatile Channels</a></td>" << std::endl;
      htmlFile << "  <td><a href=\"https://cms-conddb.cern.ch/eosweb/hcal/HcalRemoteMonitoring/RMT/LED_" << runnumber
               << "/HE_Calib.html\">Calibration Channels</a></td>" << std::endl;
      htmlFile << "  <td><a href=\"https://cms-conddb.cern.ch/eosweb/hcal/HcalRemoteMonitoring/RMT/LED_" << runnumber
               << "/HE_Drift.html\">Gain Stability</a></td>" << std::endl;
      htmlFile << "  <td><a href=\"https://cms-conddb.cern.ch/eosweb/hcal/HcalRemoteMonitoring/RMT/LED_" << runnumber
               << "/HE_Pedestals.html\">Pedestals</a></td>" << std::endl;
      htmlFile << "  <td><a href=\"https://cms-conddb.cern.ch/eosweb/hcal/HcalRemoteMonitoring/RMT/LED_" << runnumber
               << "/HE_Shapes.html\">ADC Shapes</a></td>" << std::endl;
      htmlFile << "  <td><a href=\"https://cms-conddb.cern.ch/eosweb/hcal/HcalRemoteMonitoring/RMT/LED_" << runnumber
               << "/HE_PhiSymmetryDigi.html\">Phi-symmetryDigi</a></td>" << std::endl;
      htmlFile << "  <td><a href=\"https://cms-conddb.cern.ch/eosweb/hcal/HcalRemoteMonitoring/RMT/LED_" << runnumber
               << "/HE_PhiSymmetryRecoSignal.html\">Phi-symmetryRecoSignal</a></td>" << std::endl;
      htmlFile << "  <td><a href=\"https://cms-conddb.cern.ch/eosweb/hcal/HcalRemoteMonitoring/RMT/LED_" << runnumber
               << "/HE_PhiSymmetryRecoNoise.html\">Phi-symmetryRecoNoise</a></td>" << std::endl;
    }
    if (sub == 3) {
      /*
       htmlFile << "  <td><a href=\"HO_Tile.html\">Megatile Channels</a></td>"<< std::endl;
       htmlFile << "  <td><a href=\"HO_Calib.html\">Calibration Channels</a></td>"<< std::endl;
       htmlFile << "  <td><a href=\"HO_Drift.html\">Gain Stability</a></td>"<< std::endl;
       htmlFile << "  <td><a href=\"HO_Pedestals.html\">Pedestals</a></td>"<< std::endl;
       htmlFile << "  <td><a href=\"HO_Shapes.html\">ADC Shapes</a></td>"<< std::endl;
       */
      htmlFile << "  <td><a href=\"https://cms-conddb.cern.ch/eosweb/hcal/HcalRemoteMonitoring/RMT/LED_" << runnumber
               << "/HO_Tile.html\">Megatile Channels</a></td>" << std::endl;
      htmlFile << "  <td><a href=\"https://cms-conddb.cern.ch/eosweb/hcal/HcalRemoteMonitoring/RMT/LED_" << runnumber
               << "/HO_Calib.html\">Calibration Channels</a></td>" << std::endl;
      htmlFile << "  <td><a href=\"https://cms-conddb.cern.ch/eosweb/hcal/HcalRemoteMonitoring/RMT/LED_" << runnumber
               << "/HO_Drift.html\">Gain Stability</a></td>" << std::endl;
      htmlFile << "  <td><a href=\"https://cms-conddb.cern.ch/eosweb/hcal/HcalRemoteMonitoring/RMT/LED_" << runnumber
               << "/HO_Pedestals.html\">Pedestals</a></td>" << std::endl;
      htmlFile << "  <td><a href=\"https://cms-conddb.cern.ch/eosweb/hcal/HcalRemoteMonitoring/RMT/LED_" << runnumber
               << "/HO_Shapes.html\">ADC Shapes</a></td>" << std::endl;
    }

    if (sub == 4) {
      /*
       htmlFile << "  <td><a href=\"HF_Tile.html\">Megatile Channels</a></td>"<< std::endl;
       htmlFile << "  <td><a href=\"HF_Calib.html\">Calibration Channels</a></td>"<< std::endl;
       htmlFile << "  <td><a href=\"HF_Drift.html\">Gain Stability</a></td>"<< std::endl;
       htmlFile << "  <td><a href=\"HF_Pedestals.html\">Pedestals</a></td>"<< std::endl;
       htmlFile << "  <td><a href=\"HF_Shapes.html\">ADC Shapes</a></td>"<< std::endl;
       htmlFile << "  <td><a href=\"HF_PhiSymmetryDigi.html\">Phi-symmetryDigi</a></td>"<< std::endl;
       htmlFile << "  <td><a href=\"HF_PhiSymmetryRecoSignal.html\">Phi-symmetryRecoSignal</a></td>"<< std::endl;
       htmlFile << "  <td><a href=\"HF_PhiSymmetryRecoNoise.html\">Phi-symmetryRecoNoise</a></td>"<< std::endl;
       */

      htmlFile << "  <td><a href=\"https://cms-conddb.cern.ch/eosweb/hcal/HcalRemoteMonitoring/RMT/LED_" << runnumber
               << "/HF_Tile.html\">Megatile Channels</a></td>" << std::endl;
      htmlFile << "  <td><a href=\"https://cms-conddb.cern.ch/eosweb/hcal/HcalRemoteMonitoring/RMT/LED_" << runnumber
               << "/HF_Calib.html\">Calibration Channels</a></td>" << std::endl;
      htmlFile << "  <td><a href=\"https://cms-conddb.cern.ch/eosweb/hcal/HcalRemoteMonitoring/RMT/LED_" << runnumber
               << "/HF_Drift.html\">Gain Stability</a></td>" << std::endl;
      htmlFile << "  <td><a href=\"https://cms-conddb.cern.ch/eosweb/hcal/HcalRemoteMonitoring/RMT/LED_" << runnumber
               << "/HF_Pedestals.html\">Pedestals</a></td>" << std::endl;
      htmlFile << "  <td><a href=\"https://cms-conddb.cern.ch/eosweb/hcal/HcalRemoteMonitoring/RMT/LED_" << runnumber
               << "/HF_Shapes.html\">ADC Shapes</a></td>" << std::endl;
      htmlFile << "  <td><a href=\"https://cms-conddb.cern.ch/eosweb/hcal/HcalRemoteMonitoring/RMT/LED_" << runnumber
               << "/HF_PhiSymmetryDigi.html\">Phi-symmetryDigi</a></td>" << std::endl;
      htmlFile << "  <td><a href=\"https://cms-conddb.cern.ch/eosweb/hcal/HcalRemoteMonitoring/RMT/LED_" << runnumber
               << "/HF_PhiSymmetryRecoSignal.html\">Phi-symmetryRecoSignal</a></td>" << std::endl;
      htmlFile << "  <td><a href=\"https://cms-conddb.cern.ch/eosweb/hcal/HcalRemoteMonitoring/RMT/LED_" << runnumber
               << "/HF_PhiSymmetryRecoNoise.html\">Phi-symmetryRecoNoise</a></td>" << std::endl;
    }

    htmlFile << "</tr>" << std::endl;
    htmlFile << "</table>" << std::endl;
    htmlFile << "<br>" << std::endl;
    if (sub == 1)
      htmlFile << "<h2> 2.Status HB over all criteria </h2>" << std::endl;
    if (sub == 2)
      htmlFile << "<h2> 2.Status HE over all criteria </h2>" << std::endl;
    if (sub == 3)
      htmlFile << "<h2> 2.Status HO over all criteria </h2>" << std::endl;
    if (sub == 4)
      htmlFile << "<h2> 2.Status HF over all criteria </h2>" << std::endl;
    htmlFile << "<h3> 2.A.Channel map for each Depth </h3>" << std::endl;
    htmlFile << "<h4> Channel legend: green - good, red - bad (rate of failures at least 0.1), yellow - at least 2% "
                "gain drift, white - not applicable or out of range </h4>"
             << std::endl;
    if (sub == 1)
      htmlFile << " <img src=\"MAPHB.png\" />" << std::endl;
    if (sub == 2)
      htmlFile << " <img src=\"MAPHE.png\" />" << std::endl;
    if (sub == 3)
      htmlFile << " <img src=\"MAPHO.png\" />" << std::endl;
    if (sub == 4)
      htmlFile << " <img src=\"MAPHF.png\" />" << std::endl;
    htmlFile << "<br>" << std::endl;

    htmlFile << "<h3> 2.B.List of Bad channels (rate > 0.1) and its rates for each RMT criteria (for GS - %) </h3>"
             << std::endl;

    //   htmlFile << "  <td><a href=\"HELP.html\"> Description of criteria for bad channel selection</a></td>"<< std::endl;
    htmlFile << "  <td><a href=\"https://cms-conddb.cern.ch/eosweb/hcal/HcalRemoteMonitoring/RMT/LED_" << runnumber
             << "/HELP.html\"> Description of criteria for bad channel selection</a></td>" << std::endl;

    htmlFile << "<table>" << std::endl;
    htmlFile << "<tr>";
    htmlFile << "<td class=\"s4\" align=\"center\">#</td>" << std::endl;
    htmlFile << "<td class=\"s1\" align=\"center\">ETA</td>" << std::endl;
    htmlFile << "<td class=\"s1\" align=\"center\">PHI</td>" << std::endl;
    htmlFile << "<td class=\"s1\" align=\"center\">DEPTH</td>" << std::endl;
    htmlFile << "<td class=\"s1\" align=\"center\">RBX</td>" << std::endl;
    htmlFile << "<td class=\"s1\" align=\"center\">RM</td>" << std::endl;
    htmlFile << "<td class=\"s1\" align=\"center\">PIXEL</td>" << std::endl;
    htmlFile << "<td class=\"s1\" align=\"center\">RM_FIBER</td>" << std::endl;
    htmlFile << "<td class=\"s1\" align=\"center\">FIBER_CH</td>" << std::endl;
    htmlFile << "<td class=\"s1\" align=\"center\">QIE</td>" << std::endl;
    htmlFile << "<td class=\"s1\" align=\"center\">ADC</td>" << std::endl;
    htmlFile << "<td class=\"s1\" align=\"center\">CRATE</td>" << std::endl;
    htmlFile << "<td class=\"s1\" align=\"center\">DCC</td>" << std::endl;
    htmlFile << "<td class=\"s1\" align=\"center\">SPIGOT</td>" << std::endl;
    htmlFile << "<td class=\"s1\" align=\"center\">HTR_FIBER</td>" << std::endl;
    htmlFile << "<td class=\"s1\" align=\"center\">HTR_SLOT</td>" << std::endl;
    htmlFile << "<td class=\"s1\" align=\"center\">HTR_FPGA</td>" << std::endl;
    htmlFile << "<td class=\"s5\" align=\"center\">Cm</td>" << std::endl;
    htmlFile << "<td class=\"s5\" align=\"center\">Am</td>" << std::endl;
    htmlFile << "<td class=\"s5\" align=\"center\">Wm</td>" << std::endl;
    htmlFile << "<td class=\"s5\" align=\"center\">Rm</td>" << std::endl;
    htmlFile << "<td class=\"s5\" align=\"center\">TNm</td>" << std::endl;
    htmlFile << "<td class=\"s5\" align=\"center\">TXm</td>" << std::endl;
    htmlFile << "<td class=\"s9\" align=\"center\">GS (%)</td>" << std::endl;
    htmlFile << "<td class=\"s4\" align=\"center\">Pm</td>" << std::endl;
    htmlFile << "<td class=\"s4\" align=\"center\">pWm</td>" << std::endl;
    htmlFile << "<td class=\"s8\" align=\"center\">Cc</td>" << std::endl;
    htmlFile << "<td class=\"s8\" align=\"center\">Ac</td>" << std::endl;
    htmlFile << "<td class=\"s8\" align=\"center\">Wc</td>" << std::endl;
    htmlFile << "<td class=\"s8\" align=\"center\">Rc</td>" << std::endl;
    htmlFile << "<td class=\"s8\" align=\"center\">TNc</td>" << std::endl;
    htmlFile << "<td class=\"s8\" align=\"center\">TXc</td>" << std::endl;

    htmlFile << "</tr>" << std::endl;

    for (int i = 1; i <= NBad; i++) {
      if ((ind % 2) == 1) {
        raw_class = "<td class=\"s2\" align=\"center\">";
        raw_class1 = "<td class=\"s6\" align=\"center\">";
        raw_class2 = "<td class=\"s11\" align=\"center\">";
        raw_class3 = "<td class=\"s13\" align=\"center\">";

      } else {
        raw_class = "<td class=\"s3\" align=\"center\">";
        raw_class1 = "<td class=\"s7\" align=\"center\">";
        raw_class2 = "<td class=\"s12\" align=\"center\">";
        raw_class3 = "<td class=\"s14\" align=\"center\">";
      }
      const CellDB db;
      CellDB ce;
      if ((ce.size() >= 1) && (Sub[2][i] == sub)) {
        if (Sub[2][i] == 1) {
          ce = db.find("subdet", "HB").find("Eta", Eta[2][i]).find("Phi", Phi[2][i]).find("Depth", Depth[2][i]);
          if (ce.size() == 0) {
            //		cout<<"Error: No such HB, Eta="<< Eta[2][i] <<", Phi="<< Phi[2][i] <<", Depth="<< Depth[2][i] <<" in database"<<endl;
            continue;
          } else if (ce.size() > 1) {
            cout << "Warning: More than one line correspond to such HB, Eta=" << Eta[2][i] << ", Phi=" << Phi[2][i]
                 << ", Depth=" << Depth[2][i] << " in database" << endl;
          }
        }
        if (Sub[2][i] == 2) {
          ce = db.find("subdet", "HE").find("Eta", Eta[2][i]).find("Phi", Phi[2][i]).find("Depth", Depth[2][i]);
          if (ce.size() == 0) {
            //		cout<<"Error: No such HE, Eta="<< Eta[2][i] <<", Phi="<< Phi[2][i] <<", Depth="<< Depth[2][i] <<" in database"<<endl;
            continue;
          } else if (ce.size() > 1) {
            cout << "Warning: More than one line correspond to such HE, Eta=" << Eta[2][i] << ", Phi=" << Phi[2][i]
                 << ", Depth=" << Depth[2][i] << " in database" << endl;
          }
        }
        if (Sub[2][i] == 3) {
          ce = db.find("subdet", "HO").find("Eta", Eta[2][i]).find("Phi", Phi[2][i]).find("Depth", Depth[2][i]);
          if (ce.size() == 0) {
            //		cout<<"Error: No such HO, Eta="<< Eta[2][i] <<", Phi="<< Phi[2][i] <<", Depth="<< Depth[2][i] <<" in database"<<endl;
            continue;
          } else if (ce.size() > 1) {
            cout << "Warning: More than one line correspond to such HO, Eta=" << Eta[2][i] << ", Phi=" << Phi[2][i]
                 << ", Depth=" << Depth[2][i] << " in database" << endl;
          }
        }
        if (Sub[2][i] == 4) {
          ce = db.find("subdet", "HF").find("Eta", Eta[2][i]).find("Phi", Phi[2][i]).find("Depth", Depth[2][i]);
          if (ce.size() == 0) {
            //		cout<<"Error: No such HF, Eta="<< Eta[2][i] <<", Phi="<< Phi[2][i] <<", Depth="<< Depth[2][i] <<" in database"<<endl;
            continue;
          } else if (ce.size() > 1) {
            cout << "Warning: More than one line correspond to such HF, Eta=" << Eta[2][i] << ", Phi=" << Phi[2][i]
                 << ", Depth=" << Depth[2][i] << " in database" << endl;
          }
        }
        htmlFile << "<tr>" << std::endl;
        htmlFile << "<td class=\"s4\" align=\"center\">" << ind + 1 << "</td>" << std::endl;
        htmlFile << raw_class << Eta[2][i] << "</td>" << std::endl;
        htmlFile << raw_class << Phi[2][i] << "</td>" << std::endl;
        htmlFile << raw_class << Depth[2][i] << "</td>" << std::endl;
        htmlFile << raw_class << ce[0].RBX << "</td>" << std::endl;
        htmlFile << raw_class << ce[0].RM << "</td>" << std::endl;
        htmlFile << raw_class << ce[0].Pixel << "</td>" << std::endl;
        htmlFile << raw_class << ce[0].RMfiber << "</td>" << std::endl;
        htmlFile << raw_class << ce[0].FiberCh << "</td>" << std::endl;
        htmlFile << raw_class << ce[0].QIE << "</td>" << std::endl;
        htmlFile << raw_class << ce[0].ADC << "</td>" << std::endl;
        htmlFile << raw_class << ce[0].VMECardID << "</td>" << std::endl;
        htmlFile << raw_class << ce[0].dccID << "</td>" << std::endl;
        htmlFile << raw_class << ce[0].Spigot << "</td>" << std::endl;
        htmlFile << raw_class << ce[0].FiberIndex << "</td>" << std::endl;
        htmlFile << raw_class << ce[0].HtrSlot << "</td>" << std::endl;
        htmlFile << raw_class << ce[0].HtrTB << "</td>" << std::endl;
        htmlFile << raw_class1 << Map_Ampl[1][Sub[2][i]][Depth[2][i]]->GetBinContent(Eta[2][i] + 41, Phi[2][i] + 1)
                 << "</td>" << std::endl;
        htmlFile << raw_class1 << Map_Ampl[2][Sub[2][i]][Depth[2][i]]->GetBinContent(Eta[2][i] + 41, Phi[2][i] + 1)
                 << "</td>" << std::endl;
        htmlFile << raw_class1 << Map_Ampl[3][Sub[2][i]][Depth[2][i]]->GetBinContent(Eta[2][i] + 41, Phi[2][i] + 1)
                 << "</td>" << std::endl;
        htmlFile << raw_class1 << Map_Ampl[4][Sub[2][i]][Depth[2][i]]->GetBinContent(Eta[2][i] + 41, Phi[2][i] + 1)
                 << "</td>" << std::endl;
        htmlFile << raw_class1 << Map_Ampl[5][Sub[2][i]][Depth[2][i]]->GetBinContent(Eta[2][i] + 41, Phi[2][i] + 1)
                 << "</td>" << std::endl;
        htmlFile << raw_class1 << Map_Ampl[6][Sub[2][i]][Depth[2][i]]->GetBinContent(Eta[2][i] + 41, Phi[2][i] + 1)
                 << "</td>" << std::endl;
        htmlFile << raw_class3 << Map_Ampl[21][Sub[2][i]][Depth[2][i]]->GetBinContent(Eta[2][i] + 41, Phi[2][i] + 1)
                 << "</td>" << std::endl;
        htmlFile << raw_class << Map_Ampl[31][Sub[2][i]][Depth[2][i]]->GetBinContent(Eta[2][i] + 41, Phi[2][i] + 1)
                 << "</td>" << std::endl;
        htmlFile << raw_class << Map_Ampl[32][Sub[2][i]][Depth[2][i]]->GetBinContent(Eta[2][i] + 41, Phi[2][i] + 1)
                 << "</td>" << std::endl;
        htmlFile << raw_class2 << Map_Ampl[11][Sub[2][i]][Depth[2][i]]->GetBinContent(Eta[2][i] + 41, Phi[2][i] + 1)
                 << "</td>" << std::endl;
        htmlFile << raw_class2 << Map_Ampl[12][Sub[2][i]][Depth[2][i]]->GetBinContent(Eta[2][i] + 41, Phi[2][i] + 1)
                 << "</td>" << std::endl;
        htmlFile << raw_class2 << Map_Ampl[13][Sub[2][i]][Depth[2][i]]->GetBinContent(Eta[2][i] + 41, Phi[2][i] + 1)
                 << "</td>" << std::endl;
        htmlFile << raw_class2 << Map_Ampl[14][Sub[2][i]][Depth[2][i]]->GetBinContent(Eta[2][i] + 41, Phi[2][i] + 1)
                 << "</td>" << std::endl;
        htmlFile << raw_class2 << Map_Ampl[15][Sub[2][i]][Depth[2][i]]->GetBinContent(Eta[2][i] + 41, Phi[2][i] + 1)
                 << "</td>" << std::endl;
        htmlFile << raw_class2 << Map_Ampl[16][Sub[2][i]][Depth[2][i]]->GetBinContent(Eta[2][i] + 41, Phi[2][i] + 1)
                 << "</td>" << std::endl;
        htmlFile << "</tr>" << std::endl;

        ind += 1;
      }
    }
    htmlFile << "</table>" << std::endl;
    htmlFile << "<br>" << std::endl;

    htmlFile << "<h3> 2.C.List of Gain unstable channels and its value in % (for other criterias - rate)</h3>"
             << std::endl;
    htmlFile << "<table>" << std::endl;
    htmlFile << "<tr>";
    htmlFile << "<td class=\"s4\" align=\"center\">#</td>" << std::endl;
    htmlFile << "<td class=\"s1\" align=\"center\">ETA</td>" << std::endl;
    htmlFile << "<td class=\"s1\" align=\"center\">PHI</td>" << std::endl;
    htmlFile << "<td class=\"s1\" align=\"center\">DEPTH</td>" << std::endl;
    htmlFile << "<td class=\"s1\" align=\"center\">RBX</td>" << std::endl;
    htmlFile << "<td class=\"s1\" align=\"center\">RM</td>" << std::endl;
    htmlFile << "<td class=\"s1\" align=\"center\">PIXEL</td>" << std::endl;
    htmlFile << "<td class=\"s1\" align=\"center\">RM_FIBER</td>" << std::endl;
    htmlFile << "<td class=\"s1\" align=\"center\">FIBER_CH</td>" << std::endl;
    htmlFile << "<td class=\"s1\" align=\"center\">QIE</td>" << std::endl;
    htmlFile << "<td class=\"s1\" align=\"center\">ADC</td>" << std::endl;
    htmlFile << "<td class=\"s1\" align=\"center\">CRATE</td>" << std::endl;
    htmlFile << "<td class=\"s1\" align=\"center\">DCC</td>" << std::endl;
    htmlFile << "<td class=\"s1\" align=\"center\">SPIGOT</td>" << std::endl;
    htmlFile << "<td class=\"s1\" align=\"center\">HTR_FIBER</td>" << std::endl;
    htmlFile << "<td class=\"s1\" align=\"center\">HTR_SLOT</td>" << std::endl;
    htmlFile << "<td class=\"s1\" align=\"center\">HTR_FPGA</td>" << std::endl;
    htmlFile << "<td class=\"s5\" align=\"center\">Cm</td>" << std::endl;
    htmlFile << "<td class=\"s5\" align=\"center\">Am</td>" << std::endl;
    htmlFile << "<td class=\"s5\" align=\"center\">Wm</td>" << std::endl;
    htmlFile << "<td class=\"s5\" align=\"center\">Rm</td>" << std::endl;
    htmlFile << "<td class=\"s5\" align=\"center\">TNm</td>" << std::endl;
    htmlFile << "<td class=\"s5\" align=\"center\">TXm</td>" << std::endl;
    htmlFile << "<td class=\"s9\" align=\"center\">GS(%)</td>" << std::endl;
    htmlFile << "<td class=\"s4\" align=\"center\">Pm</td>" << std::endl;
    htmlFile << "<td class=\"s4\" align=\"center\">pWm</td>" << std::endl;
    htmlFile << "<td class=\"s8\" align=\"center\">Cc</td>" << std::endl;
    htmlFile << "<td class=\"s8\" align=\"center\">Ac</td>" << std::endl;
    htmlFile << "<td class=\"s8\" align=\"center\">Wc</td>" << std::endl;
    htmlFile << "<td class=\"s8\" align=\"center\">Rc</td>" << std::endl;
    htmlFile << "<td class=\"s8\" align=\"center\">TNc</td>" << std::endl;
    htmlFile << "<td class=\"s8\" align=\"center\">TXc</td>" << std::endl;
    htmlFile << "</tr>" << std::endl;

    for (int i = 1; i <= NWarn; i++) {
      if ((ind % 2) == 1) {
        raw_class = "<td class=\"s2\" align=\"center\">";
        raw_class1 = "<td class=\"s6\" align=\"center\">";
        raw_class2 = "<td class=\"s11\" align=\"center\">";
        raw_class3 = "<td class=\"s13\" align=\"center\">";

      } else {
        raw_class = "<td class=\"s3\" align=\"center\">";
        raw_class1 = "<td class=\"s7\" align=\"center\">";
        raw_class2 = "<td class=\"s12\" align=\"center\">";
        raw_class3 = "<td class=\"s14\" align=\"center\">";
      }
      const CellDB db;
      CellDB ce;
      if ((ce.size() >= 1) && (Sub[1][i] == sub)) {
        if (Sub[1][i] == 1) {
          ce = db.find("subdet", "HB").find("Eta", Eta[1][i]).find("Phi", Phi[1][i]).find("Depth", Depth[1][i]);
          if (ce.size() == 0) {
            //		cout<<"Error: No such HB, Eta="<< Eta[1][i] <<", Phi="<< Phi[1][i] <<", Depth="<< Depth[1][i] <<" in database"<<endl;
            continue;
          } else if (ce.size() > 1) {
            cout << "Warning: More than one line correspond to such HB, Eta=" << Eta[1][i] << ", Phi=" << Phi[1][i]
                 << ", Depth=" << Depth[1][i] << " in database" << endl;
          }
        }
        if (Sub[1][i] == 2) {
          ce = db.find("subdet", "HE").find("Eta", Eta[1][i]).find("Phi", Phi[1][i]).find("Depth", Depth[1][i]);
          if (ce.size() == 0) {
            //		cout<<"Error: No such HE, Eta="<< Eta[1][i] <<", Phi="<< Phi[1][i] <<", Depth="<< Depth[1][i] <<" in database"<<endl;
            continue;
          } else if (ce.size() > 1) {
            cout << "Warning: More than one line correspond to such HE, Eta=" << Eta[1][i] << ", Phi=" << Phi[1][i]
                 << ", Depth=" << Depth[1][i] << " in database" << endl;
          }
        }
        if (Sub[1][i] == 3) {
          ce = db.find("subdet", "HO").find("Eta", Eta[1][i]).find("Phi", Phi[1][i]).find("Depth", Depth[1][i]);
          if (ce.size() == 0) {
            //		cout<<"Error: No such HO, Eta="<< Eta[1][i] <<", Phi="<< Phi[1][i] <<", Depth="<< Depth[1][i] <<" in database"<<endl;
            continue;
          } else if (ce.size() > 1) {
            cout << "Warning: More than one line correspond to such HO, Eta=" << Eta[1][i] << ", Phi=" << Phi[1][i]
                 << ", Depth=" << Depth[1][i] << " in database" << endl;
          }
        }
        if (Sub[1][i] == 4) {
          ce = db.find("subdet", "HF").find("Eta", Eta[1][i]).find("Phi", Phi[1][i]).find("Depth", Depth[1][i]);
          if (ce.size() == 0) {
            //		cout<<"Error: No such HF, Eta="<< Eta[1][i] <<", Phi="<< Phi[1][i] <<", Depth="<< Depth[1][i] <<" in database"<<endl;
            continue;
          } else if (ce.size() > 1) {
            cout << "Warning: More than one line correspond to such HF, Eta=" << Eta[1][i] << ", Phi=" << Phi[1][i]
                 << ", Depth=" << Depth[1][i] << " in database" << endl;
          }
        }
        htmlFile << "<td class=\"s4\" align=\"center\">" << ind + 1 << "</td>" << std::endl;
        htmlFile << raw_class << Eta[1][i] << "</td>" << std::endl;
        htmlFile << raw_class << Phi[1][i] << "</td>" << std::endl;
        htmlFile << raw_class << Depth[1][i] << "</td>" << std::endl;
        htmlFile << raw_class << ce[0].RBX << "</td>" << std::endl;
        htmlFile << raw_class << ce[0].RM << "</td>" << std::endl;
        htmlFile << raw_class << ce[0].Pixel << "</td>" << std::endl;
        htmlFile << raw_class << ce[0].RMfiber << "</td>" << std::endl;
        htmlFile << raw_class << ce[0].FiberCh << "</td>" << std::endl;
        htmlFile << raw_class << ce[0].QIE << "</td>" << std::endl;
        htmlFile << raw_class << ce[0].ADC << "</td>" << std::endl;
        htmlFile << raw_class << ce[0].VMECardID << "</td>" << std::endl;
        htmlFile << raw_class << ce[0].dccID << "</td>" << std::endl;
        htmlFile << raw_class << ce[0].Spigot << "</td>" << std::endl;
        htmlFile << raw_class << ce[0].FiberIndex << "</td>" << std::endl;
        htmlFile << raw_class << ce[0].HtrSlot << "</td>" << std::endl;
        htmlFile << raw_class << ce[0].HtrTB << "</td>" << std::endl;
        htmlFile << raw_class1 << Map_Ampl[1][Sub[1][i]][Depth[1][i]]->GetBinContent(Eta[1][i] + 41, Phi[1][i] + 1)
                 << "</td>" << std::endl;
        htmlFile << raw_class1 << Map_Ampl[2][Sub[1][i]][Depth[1][i]]->GetBinContent(Eta[1][i] + 41, Phi[1][i] + 1)
                 << "</td>" << std::endl;
        htmlFile << raw_class1 << Map_Ampl[3][Sub[1][i]][Depth[1][i]]->GetBinContent(Eta[1][i] + 41, Phi[1][i] + 1)
                 << "</td>" << std::endl;
        htmlFile << raw_class1 << Map_Ampl[4][Sub[1][i]][Depth[1][i]]->GetBinContent(Eta[1][i] + 41, Phi[1][i] + 1)
                 << "</td>" << std::endl;
        htmlFile << raw_class1 << Map_Ampl[5][Sub[1][i]][Depth[1][i]]->GetBinContent(Eta[1][i] + 41, Phi[1][i] + 1)
                 << "</td>" << std::endl;
        htmlFile << raw_class1 << Map_Ampl[6][Sub[1][i]][Depth[1][i]]->GetBinContent(Eta[1][i] + 41, Phi[1][i] + 1)
                 << "</td>" << std::endl;
        htmlFile << raw_class3 << Map_Ampl[21][Sub[1][i]][Depth[1][i]]->GetBinContent(Eta[1][i] + 41, Phi[1][i] + 1)
                 << "</td>" << std::endl;
        htmlFile << raw_class << Map_Ampl[31][Sub[1][i]][Depth[1][i]]->GetBinContent(Eta[1][i] + 41, Phi[1][i] + 1)
                 << "</td>" << std::endl;
        htmlFile << raw_class << Map_Ampl[32][Sub[1][i]][Depth[1][i]]->GetBinContent(Eta[1][i] + 41, Phi[1][i] + 1)
                 << "</td>" << std::endl;
        htmlFile << raw_class2 << Map_Ampl[11][Sub[1][i]][Depth[1][i]]->GetBinContent(Eta[1][i] + 41, Phi[1][i] + 1)
                 << "</td>" << std::endl;
        htmlFile << raw_class2 << Map_Ampl[12][Sub[1][i]][Depth[1][i]]->GetBinContent(Eta[1][i] + 41, Phi[1][i] + 1)
                 << "</td>" << std::endl;
        htmlFile << raw_class2 << Map_Ampl[13][Sub[1][i]][Depth[1][i]]->GetBinContent(Eta[1][i] + 41, Phi[1][i] + 1)
                 << "</td>" << std::endl;
        htmlFile << raw_class2 << Map_Ampl[14][Sub[1][i]][Depth[1][i]]->GetBinContent(Eta[1][i] + 41, Phi[1][i] + 1)
                 << "</td>" << std::endl;
        htmlFile << raw_class2 << Map_Ampl[15][Sub[1][i]][Depth[1][i]]->GetBinContent(Eta[1][i] + 41, Phi[1][i] + 1)
                 << "</td>" << std::endl;
        htmlFile << raw_class2 << Map_Ampl[16][Sub[1][i]][Depth[1][i]]->GetBinContent(Eta[1][i] + 41, Phi[1][i] + 1)
                 << "</td>" << std::endl;
        htmlFile << "</tr>" << std::endl;
        htmlFile << "</tr>" << std::endl;
        ind += 1;
      }
    }
    htmlFile << "</table>" << std::endl;
    htmlFile << "<br>" << std::endl;

    htmlFile << "<h3> 2.D.List of channels with Bad Pedestals (rate > 0.1) and its rates (for GS - %)</h3>"
             << std::endl;
    htmlFile << "<table>" << std::endl;
    htmlFile << "<tr>";
    htmlFile << "<td class=\"s4\" align=\"center\">#</td>" << std::endl;
    htmlFile << "<td class=\"s1\" align=\"center\">ETA</td>" << std::endl;
    htmlFile << "<td class=\"s1\" align=\"center\">PHI</td>" << std::endl;
    htmlFile << "<td class=\"s1\" align=\"center\">DEPTH</td>" << std::endl;
    htmlFile << "<td class=\"s1\" align=\"center\">RBX</td>" << std::endl;
    htmlFile << "<td class=\"s1\" align=\"center\">RM</td>" << std::endl;
    htmlFile << "<td class=\"s1\" align=\"center\">PIXEL</td>" << std::endl;
    htmlFile << "<td class=\"s1\" align=\"center\">RM_FIBER</td>" << std::endl;
    htmlFile << "<td class=\"s1\" align=\"center\">FIBER_CH</td>" << std::endl;
    htmlFile << "<td class=\"s1\" align=\"center\">QIE</td>" << std::endl;
    htmlFile << "<td class=\"s1\" align=\"center\">ADC</td>" << std::endl;
    htmlFile << "<td class=\"s1\" align=\"center\">CRATE</td>" << std::endl;
    htmlFile << "<td class=\"s1\" align=\"center\">DCC</td>" << std::endl;
    htmlFile << "<td class=\"s1\" align=\"center\">SPIGOT</td>" << std::endl;
    htmlFile << "<td class=\"s1\" align=\"center\">HTR_FIBER</td>" << std::endl;
    htmlFile << "<td class=\"s1\" align=\"center\">HTR_SLOT</td>" << std::endl;
    htmlFile << "<td class=\"s1\" align=\"center\">HTR_FPGA</td>" << std::endl;
    htmlFile << "<td class=\"s5\" align=\"center\">Cm</td>" << std::endl;
    htmlFile << "<td class=\"s5\" align=\"center\">Am</td>" << std::endl;
    htmlFile << "<td class=\"s5\" align=\"center\">Wm</td>" << std::endl;
    htmlFile << "<td class=\"s5\" align=\"center\">Rm</td>" << std::endl;
    htmlFile << "<td class=\"s5\" align=\"center\">TNm</td>" << std::endl;
    htmlFile << "<td class=\"s5\" align=\"center\">TXm</td>" << std::endl;
    htmlFile << "<td class=\"s9\" align=\"center\">GS(%)</td>" << std::endl;
    htmlFile << "<td class=\"s4\" align=\"center\">Pm</td>" << std::endl;
    htmlFile << "<td class=\"s4\" align=\"center\">pWm</td>" << std::endl;
    htmlFile << "<td class=\"s8\" align=\"center\">Cc</td>" << std::endl;
    htmlFile << "<td class=\"s8\" align=\"center\">Ac</td>" << std::endl;
    htmlFile << "<td class=\"s8\" align=\"center\">Wc</td>" << std::endl;
    htmlFile << "<td class=\"s8\" align=\"center\">Rc</td>" << std::endl;
    htmlFile << "<td class=\"s8\" align=\"center\">TNc</td>" << std::endl;
    htmlFile << "<td class=\"s8\" align=\"center\">TXc</td>" << std::endl;
    htmlFile << "</tr>" << std::endl;

    for (int i = 1; i <= NPed; i++) {
      if ((ind % 2) == 1) {
        raw_class = "<td class=\"s2\" align=\"center\">";
        raw_class1 = "<td class=\"s6\" align=\"center\">";
        raw_class2 = "<td class=\"s11\" align=\"center\">";
        raw_class3 = "<td class=\"s13\" align=\"center\">";

      } else {
        raw_class = "<td class=\"s3\" align=\"center\">";
        raw_class1 = "<td class=\"s7\" align=\"center\">";
        raw_class2 = "<td class=\"s12\" align=\"center\">";
        raw_class3 = "<td class=\"s14\" align=\"center\">";
      }
      const CellDB db;
      CellDB ce;
      if ((ce.size() >= 1) && (Sub[3][i] == sub)) {
        if (Sub[3][i] == 1) {
          ce = db.find("subdet", "HB").find("Eta", Eta[3][i]).find("Phi", Phi[3][i]).find("Depth", Depth[3][i]);
          if (ce.size() == 0) {
            //		cout<<"Error: No such HB, Eta="<< Eta[3][i] <<", Phi="<< Phi[3][i] <<", Depth="<< Depth[3][i] <<" in database"<<endl;
            continue;
          } else if (ce.size() > 1) {
            cout << "Warning: More than one line correspond to such HB, Eta=" << Eta[3][i] << ", Phi=" << Phi[3][i]
                 << ", Depth=" << Depth[3][i] << " in database" << endl;
          }
        }
        if (Sub[3][i] == 2) {
          ce = db.find("subdet", "HE").find("Eta", Eta[3][i]).find("Phi", Phi[3][i]).find("Depth", Depth[3][i]);
          if (ce.size() == 0) {
            //		cout<<"Error: No such HE, Eta="<< Eta[3][i]  <<", Phi="<< Phi[3][i] <<", Depth="<< Depth[3][i] <<" in database"<<endl;
            continue;
          } else if (ce.size() > 1) {
            cout << "Warning: More than one line correspond to such HE, Eta=" << Eta[3][i] << ", Phi=" << Phi[3][i]
                 << ", Depth=" << Depth[3][i] << " in database" << endl;
          }
        }
        if (Sub[3][i] == 3) {
          ce = db.find("subdet", "HO").find("Eta", Eta[3][i]).find("Phi", Phi[3][i]).find("Depth", Depth[3][i]);
          if (ce.size() == 0) {
            //		cout<<"Error: No such HO, Eta="<< Eta[3][i] <<", Phi="<<  Phi[3][i] <<", Depth="<< Depth[3][i] <<" in database"<<endl;
            continue;
          } else if (ce.size() > 1) {
            cout << "Warning: More than one line correspond to such HO, Eta=" << Eta[3][i] << ", Phi=" << Phi[3][i]
                 << ", Depth=" << Depth[3][i] << " in database" << endl;
          }
        }
        if (Sub[3][i] == 4) {
          ce = db.find("subdet", "HF").find("Eta", Eta[3][i]).find("Phi", Phi[3][i]).find("Depth", Depth[3][i]);
          if (ce.size() == 0) {
            //		cout<<"Error: No such HF, Eta="<< Eta[3][i] <<", Phi="<< Phi[3][i] <<", Depth="<< Depth[3][i] <<" in database"<<endl;
            continue;
          } else if (ce.size() > 1) {
            cout << "Warning: More than one line correspond to such HF, Eta=" << Eta[3][i] << ", Phi=" << Phi[3][i]
                 << ", Depth=" << Depth[3][i] << " in database" << endl;
          }
        }
        htmlFile << "<td class=\"s4\" align=\"center\">" << ind + 1 << "</td>" << std::endl;
        htmlFile << raw_class << Eta[3][i] << "</td>" << std::endl;
        htmlFile << raw_class << Phi[3][i] << "</td>" << std::endl;
        htmlFile << raw_class << Depth[3][i] << "</td>" << std::endl;
        htmlFile << raw_class << ce[0].RBX << "</td>" << std::endl;
        htmlFile << raw_class << ce[0].RM << "</td>" << std::endl;
        htmlFile << raw_class << ce[0].Pixel << "</td>" << std::endl;
        htmlFile << raw_class << ce[0].RMfiber << "</td>" << std::endl;
        htmlFile << raw_class << ce[0].FiberCh << "</td>" << std::endl;
        htmlFile << raw_class << ce[0].QIE << "</td>" << std::endl;
        htmlFile << raw_class << ce[0].ADC << "</td>" << std::endl;
        htmlFile << raw_class << ce[0].VMECardID << "</td>" << std::endl;
        htmlFile << raw_class << ce[0].dccID << "</td>" << std::endl;
        htmlFile << raw_class << ce[0].Spigot << "</td>" << std::endl;
        htmlFile << raw_class << ce[0].FiberIndex << "</td>" << std::endl;
        htmlFile << raw_class << ce[0].HtrSlot << "</td>" << std::endl;
        htmlFile << raw_class << ce[0].HtrTB << "</td>" << std::endl;
        htmlFile << raw_class1 << Map_Ampl[1][Sub[3][i]][Depth[3][i]]->GetBinContent(Eta[3][i] + 41, Phi[3][i] + 1)
                 << "</td>" << std::endl;
        htmlFile << raw_class1 << Map_Ampl[2][Sub[3][i]][Depth[3][i]]->GetBinContent(Eta[3][i] + 41, Phi[3][i] + 1)
                 << "</td>" << std::endl;
        htmlFile << raw_class1 << Map_Ampl[3][Sub[3][i]][Depth[3][i]]->GetBinContent(Eta[3][i] + 41, Phi[3][i] + 1)
                 << "</td>" << std::endl;
        htmlFile << raw_class1 << Map_Ampl[4][Sub[3][i]][Depth[3][i]]->GetBinContent(Eta[3][i] + 41, Phi[3][i] + 1)
                 << "</td>" << std::endl;
        htmlFile << raw_class1 << Map_Ampl[5][Sub[3][i]][Depth[3][i]]->GetBinContent(Eta[3][i] + 41, Phi[3][i] + 1)
                 << "</td>" << std::endl;
        htmlFile << raw_class1 << Map_Ampl[6][Sub[3][i]][Depth[3][i]]->GetBinContent(Eta[3][i] + 41, Phi[3][i] + 1)
                 << "</td>" << std::endl;
        htmlFile << raw_class3 << Map_Ampl[21][Sub[3][i]][Depth[3][i]]->GetBinContent(Eta[3][i] + 41, Phi[3][i] + 1)
                 << "</td>" << std::endl;
        htmlFile << raw_class << Map_Ampl[31][Sub[3][i]][Depth[3][i]]->GetBinContent(Eta[3][i] + 41, Phi[3][i] + 1)
                 << "</td>" << std::endl;
        htmlFile << raw_class << Map_Ampl[32][Sub[3][i]][Depth[3][i]]->GetBinContent(Eta[3][i] + 41, Phi[3][i] + 1)
                 << "</td>" << std::endl;
        htmlFile << raw_class2 << Map_Ampl[11][Sub[3][i]][Depth[3][i]]->GetBinContent(Eta[3][i] + 41, Phi[3][i] + 1)
                 << "</td>" << std::endl;
        htmlFile << raw_class2 << Map_Ampl[12][Sub[3][i]][Depth[3][i]]->GetBinContent(Eta[3][i] + 41, Phi[3][i] + 1)
                 << "</td>" << std::endl;
        htmlFile << raw_class2 << Map_Ampl[13][Sub[3][i]][Depth[3][i]]->GetBinContent(Eta[3][i] + 41, Phi[3][i] + 1)
                 << "</td>" << std::endl;
        htmlFile << raw_class2 << Map_Ampl[14][Sub[3][i]][Depth[3][i]]->GetBinContent(Eta[3][i] + 41, Phi[3][i] + 1)
                 << "</td>" << std::endl;
        htmlFile << raw_class2 << Map_Ampl[15][Sub[3][i]][Depth[3][i]]->GetBinContent(Eta[3][i] + 41, Phi[3][i] + 1)
                 << "</td>" << std::endl;
        htmlFile << raw_class2 << Map_Ampl[16][Sub[3][i]][Depth[3][i]]->GetBinContent(Eta[3][i] + 41, Phi[3][i] + 1)
                 << "</td>" << std::endl;
        htmlFile << "</tr>" << std::endl;
        htmlFile << "</tr>" << std::endl;
        ind += 1;
      }
    }
    htmlFile << "</table>" << std::endl;

    htmlFile << "</body> " << std::endl;
    htmlFile << "</html> " << std::endl;
    htmlFile.close();
  }

  //======================================================================

  std::cout << "********" << std::endl;
  std::cout << "************    Start creating description HELP html file:" << std::endl;
  //======================================================================
  // Creating description html file:
  ofstream htmlFile;
  htmlFile.open("HELP.html");
  htmlFile << "</html><html xmlns=\"http://www.w3.org/1999/xhtml\">" << std::endl;
  htmlFile << "<head>" << std::endl;
  htmlFile << "<meta http-equiv=\"Content-Type\" content=\"text/html\"/>" << std::endl;
  htmlFile << "<title> Remote Monitoring Tool </title>" << std::endl;
  htmlFile << "<style type=\"text/css\">" << std::endl;
  htmlFile << " body,td{ background-color: #FFFFCC; font-family: arial, arial ce, helvetica; font-size: 12px; }"
           << std::endl;
  htmlFile << "   td.s0 { font-family: arial, arial ce, helvetica; }" << std::endl;
  htmlFile << "   td.s1 { font-family: arial, arial ce, helvetica; font-weight: bold; background-color: #FFC169; "
              "text-align: center;}"
           << std::endl;
  htmlFile << "   td.s2 { font-family: arial, arial ce, helvetica; background-color: #eeeeee; }" << std::endl;
  htmlFile << "   td.s3 { font-family: arial, arial ce, helvetica; background-color: #d0d0d0; }" << std::endl;
  htmlFile << "   td.s4 { font-family: arial, arial ce, helvetica; background-color: #FFC169; }" << std::endl;
  htmlFile << "</style>" << std::endl;
  htmlFile << "<body>" << std::endl;
  htmlFile << "<h1>  Description of Remote Monitoring Tool criteria for bad channel selection</h1>" << std::endl;
  htmlFile << "<br>" << std::endl;
  htmlFile << "<h3> - C means CAPID Errors assuming we inspect CAPID non-rotation,error & validation bits, and for "
              "this criterion - no need to apply any cuts to select bcs.</h3> "
           << std::endl;
  htmlFile << "<br>" << std::endl;
  htmlFile << "<h3> - A means full amplitude, collected over all time slices </h3> " << std::endl;
  htmlFile << "<h3> - R means ratio criterion where we define as a bad, the channels, for which the signal portion in "
              "4 middle TSs(plus one, minus two around TS with maximal amplitude) is out of some range of reasonable "
              "values </h3> "
           << std::endl;
  htmlFile << "<br>" << std::endl;
  htmlFile << "<h3> - W means width of shape distribution. Width is defined as square root from dispersion. </h3> "
           << std::endl;
  htmlFile << "<br>" << std::endl;
  htmlFile << "<h3> - TN means mean time position of adc signal. </h3> " << std::endl;
  htmlFile << "<br>" << std::endl;
  htmlFile << "<h3> - TX means TS number of maximum signal </h3> " << std::endl;
  htmlFile << "<br>" << std::endl;
  htmlFile << "<h3> - m means megatile channels. For example Am means Amplitude criteria for megatile channels </h3> "
           << std::endl;
  htmlFile << "<br>" << std::endl;
  htmlFile
      << "<h3> - c means calibration channels. For example Ac means Amplitude criteria for calibration channels </h3> "
      << std::endl;
  htmlFile << "<br>" << std::endl;
  htmlFile << "<h3> - Pm means Pedestals. </h3> " << std::endl;
  htmlFile << "<br>" << std::endl;
  htmlFile << "<h3> - pWm  means pedestal Width. </h3> " << std::endl;
  htmlFile << "<br>" << std::endl;
  htmlFile << "</body> " << std::endl;
  htmlFile << "</html> " << std::endl;
  htmlFile.close();

  //======================================================================

  std::cout << "********" << std::endl;
  std::cout << "************    Start creating MAP html file: - rather long time needed, waiting please" << std::endl;
  //======================================================================
  // Creating main html file:
  htmlFile.open("MAP.html");
  htmlFile << "</html><html xmlns=\"http://www.w3.org/1999/xhtml\">" << std::endl;
  htmlFile << "<head>" << std::endl;
  htmlFile << "<meta http-equiv=\"Content-Type\" content=\"text/html\"/>" << std::endl;
  htmlFile << "<title> Remote Monitoring Tool </title>" << std::endl;
  htmlFile << "<style type=\"text/css\">" << std::endl;
  htmlFile << " body,td{ background-color: #FFFFCC; font-family: arial, arial ce, helvetica; font-size: 12px; }"
           << std::endl;
  htmlFile << "   td.s0 { font-family: arial, arial ce, helvetica; }" << std::endl;
  htmlFile << "   td.s1 { font-family: arial, arial ce, helvetica; font-weight: bold; background-color: #FFC169; "
              "text-align: center;}"
           << std::endl;
  htmlFile << "   td.s2 { font-family: arial, arial ce, helvetica; background-color: #eeeeee; }" << std::endl;
  htmlFile << "   td.s3 { font-family: arial, arial ce, helvetica; background-color: #d0d0d0; }" << std::endl;
  htmlFile << "   td.s4 { font-family: arial, arial ce, helvetica; background-color: #FFC169; }" << std::endl;
  htmlFile << "   td.s5 { font-family: arial, arial ce, helvetica; background-color: #FF00FF; }" << std::endl;
  htmlFile << "   td.s6 { font-family: arial, arial ce, helvetica; background-color: #9ACD32; }" << std::endl;
  htmlFile << "   td.s7 { font-family: arial, arial ce, helvetica; background-color: #32CD32; }" << std::endl;
  htmlFile << "</style>" << std::endl;
  htmlFile << "<body>" << std::endl;

  htmlFile << "<h1> Remote Monitoring Tool, LED RUN = " << runnumber << ". </h1>" << std::endl;
  htmlFile << "<br>" << std::endl;

  htmlFile << "<h2> 1. Analysis results for subdetectors </h2>" << std::endl;
  htmlFile << "<table width=\"400\">" << std::endl;
  htmlFile << "<tr>" << std::endl;

  /*
     htmlFile << "  <td><a href=\"HB.html\">HB</a></td>"<< std::endl;
     htmlFile << "  <td><a href=\"HE.html\">HE</a></td>"<< std::endl;
     htmlFile << "  <td><a href=\"HO.html\">HO</a></td>"<< std::endl;
     htmlFile << "  <td><a href=\"HF.html\">HF</a></td>"<< std::endl;    
*/

  htmlFile << "  <td><a href=\"https://cms-conddb.cern.ch/eosweb/hcal/HcalRemoteMonitoring/RMT/LED_" << runnumber
           << "/HB.html\">HB</a></td>" << std::endl;
  htmlFile << "  <td><a href=\"https://cms-conddb.cern.ch/eosweb/hcal/HcalRemoteMonitoring/RMT/LED_" << runnumber
           << "/HE.html\">HE</a></td>" << std::endl;
  htmlFile << "  <td><a href=\"https://cms-conddb.cern.ch/eosweb/hcal/HcalRemoteMonitoring/RMT/LED_" << runnumber
           << "/HO.html\">HO</a></td>" << std::endl;
  htmlFile << "  <td><a href=\"https://cms-conddb.cern.ch/eosweb/hcal/HcalRemoteMonitoring/RMT/LED_" << runnumber
           << "/HF.html\">HF</a></td>" << std::endl;

  htmlFile << "</tr>" << std::endl;
  htmlFile << "</table>" << std::endl;
  htmlFile << "<br>" << std::endl;

  htmlFile << "<h2> 2. Amplitude summed over all sub-detector channels vs first 1000 events of this Run </h2>"
           << std::endl;
  htmlFile << "<h3> 2.A. Total subdetector Amplitude vs iEvent </h3>" << std::endl;
  htmlFile << " <img src=\"EVENTDEPENDENCE.png\" />" << std::endl;
  htmlFile << "<br>" << std::endl;
  htmlFile << "<br>" << std::endl;
  htmlFile << "<br>" << std::endl;

  htmlFile << "<h2> 3. HCAL status over all criteria and subdetectors </h2>" << std::endl;
  htmlFile << "<h3> 3.A. Channels in detector space </h3>" << std::endl;
  htmlFile << "<h4> Legend for channel status: green - good, red - bad, yellow - at least 2% gain drift, white - not "
              "applicable or out of range </h4>"
           << std::endl;
  htmlFile << " <img src=\"MAP.png\" />" << std::endl;
  htmlFile << "<br>" << std::endl;
  htmlFile << "<br>" << std::endl;

  htmlFile << "<h3> 3.B. List of Bad channels </h3>" << std::endl;

  //   htmlFile << "  <td><a href=\"HELP.html\"> Description of criteria for bad channel selection</a></td>"<< std::endl;
  htmlFile << "  <td><a href=\"https://cms-conddb.cern.ch/eosweb/hcal/HcalRemoteMonitoring/RMT/LED_" << runnumber
           << "/HELP.html\"> Description of criteria for bad channel selection</a></td>" << std::endl;
  htmlFile << "<table>" << std::endl;
  htmlFile << "<tr>";
  htmlFile << "<td class=\"s4\" align=\"center\">#</td>" << std::endl;
  htmlFile << "<td class=\"s1\" align=\"center\">ETA</td>" << std::endl;
  htmlFile << "<td class=\"s1\" align=\"center\">PHI</td>" << std::endl;
  htmlFile << "<td class=\"s1\" align=\"center\">DEPTH</td>" << std::endl;
  htmlFile << "<td class=\"s1\" align=\"center\">RBX</td>" << std::endl;
  htmlFile << "<td class=\"s1\" align=\"center\">RM</td>" << std::endl;
  htmlFile << "<td class=\"s1\" align=\"center\">PIXEL</td>" << std::endl;
  htmlFile << "<td class=\"s1\" align=\"center\">RM_FIBER</td>" << std::endl;
  htmlFile << "<td class=\"s1\" align=\"center\">FIBER_CH</td>" << std::endl;
  htmlFile << "<td class=\"s1\" align=\"center\">QIE</td>" << std::endl;
  htmlFile << "<td class=\"s1\" align=\"center\">ADC</td>" << std::endl;
  htmlFile << "<td class=\"s1\" align=\"center\">CRATE</td>" << std::endl;
  htmlFile << "<td class=\"s1\" align=\"center\">DCC</td>" << std::endl;
  htmlFile << "<td class=\"s1\" align=\"center\">SPIGOT</td>" << std::endl;
  htmlFile << "<td class=\"s1\" align=\"center\">HTR_FIBER</td>" << std::endl;
  htmlFile << "<td class=\"s1\" align=\"center\">HTR_SLOT</td>" << std::endl;
  htmlFile << "<td class=\"s1\" align=\"center\">HTR_FPGA</td>" << std::endl;
  htmlFile << "<td class=\"s5\" align=\"center\">RMT-criteria</td>" << std::endl;
  htmlFile << "</tr>" << std::endl;

  ind = 0;

  for (int i = 1; i <= NBad; i++) {
    if ((ind % 2) == 1) {
      raw_class = "<td class=\"s2\" align=\"center\">";
      raw_class1 = "<td class=\"s6\" align=\"center\">";
    } else {
      raw_class = "<td class=\"s3\" align=\"center\">";
      raw_class1 = "<td class=\"s7\" align=\"center\">";
    }
    const CellDB db;
    const CellDB ce = db.find("Eta", Eta[2][i]).find("Phi", Phi[2][i]).find("Depth", Depth[2][i]);
    if (ce.size() == 0) {
      //	       cout<<"Error: No such Eta="<< Eta[2][i] <<", Phi="<< Phi[2][i] <<", Depth="<< Depth[2][i] <<" in database"<<endl;
      continue;
    }
    //	else if (ce.size()>1) { cout<<"Warning: More than one line correspond to such Eta="<< Eta[2][i] <<", Phi="<< Phi[2][i] <<", Depth="<< Depth[2][i] <<" in database"<<endl;}

    if (ce.size() >= 1) {
      htmlFile << "<tr>" << std::endl;
      htmlFile << "<td class=\"s1\" align=\"center\">" << ind + 1 << "</td>" << std::endl;
      htmlFile << raw_class << Eta[2][i] << "</td>" << std::endl;
      htmlFile << raw_class << Phi[2][i] << "</td>" << std::endl;
      htmlFile << raw_class << Depth[2][i] << "</td>" << std::endl;
      htmlFile << raw_class << ce[0].RBX << "</td>" << std::endl;
      htmlFile << raw_class << ce[0].RM << "</td>" << std::endl;
      htmlFile << raw_class << ce[0].Pixel << "</td>" << std::endl;
      htmlFile << raw_class << ce[0].RMfiber << "</td>" << std::endl;
      htmlFile << raw_class << ce[0].FiberCh << "</td>" << std::endl;
      htmlFile << raw_class << ce[0].QIE << "</td>" << std::endl;
      htmlFile << raw_class << ce[0].ADC << "</td>" << std::endl;
      htmlFile << raw_class << ce[0].VMECardID << "</td>" << std::endl;
      htmlFile << raw_class << ce[0].dccID << "</td>" << std::endl;
      htmlFile << raw_class << ce[0].Spigot << "</td>" << std::endl;
      htmlFile << raw_class << ce[0].FiberIndex << "</td>" << std::endl;
      htmlFile << raw_class << ce[0].HtrSlot << "</td>" << std::endl;
      htmlFile << raw_class << ce[0].HtrTB << "</td>" << std::endl;
      htmlFile << raw_class1 << Comment[2][i] << "</td>" << std::endl;
      htmlFile << "</tr>" << std::endl;

      ind += 1;
    }
  }
  htmlFile << "</table>" << std::endl;
  htmlFile << "<br>" << std::endl;

  htmlFile << "<h3> 2.C.List of Gain unstable channels </h3>" << std::endl;
  //   htmlFile << "  <td><a href=\"HELP.html\"> Description of criteria for bad channel selection</a></td>"<< std::endl;
  htmlFile << "  <td><a href=\"https://cms-conddb.cern.ch/eosweb/hcal/HcalRemoteMonitoring/RMT/LED_" << runnumber
           << "/HELP.html\"> Description of criteria for bad channel selection</a></td>" << std::endl;

  htmlFile << "<table>" << std::endl;
  htmlFile << "<tr>";
  htmlFile << "<td class=\"s4\" align=\"center\">#</td>" << std::endl;
  htmlFile << "<td class=\"s1\" align=\"center\">ETA</td>" << std::endl;
  htmlFile << "<td class=\"s1\" align=\"center\">PHI</td>" << std::endl;
  htmlFile << "<td class=\"s1\" align=\"center\">DEPTH</td>" << std::endl;
  htmlFile << "<td class=\"s1\" align=\"center\">RBX</td>" << std::endl;
  htmlFile << "<td class=\"s1\" align=\"center\">RM</td>" << std::endl;
  htmlFile << "<td class=\"s1\" align=\"center\">PIXEL</td>" << std::endl;
  htmlFile << "<td class=\"s1\" align=\"center\">RM_FIBER</td>" << std::endl;
  htmlFile << "<td class=\"s1\" align=\"center\">FIBER_CH</td>" << std::endl;
  htmlFile << "<td class=\"s1\" align=\"center\">QIE</td>" << std::endl;
  htmlFile << "<td class=\"s1\" align=\"center\">ADC</td>" << std::endl;
  htmlFile << "<td class=\"s1\" align=\"center\">CRATE</td>" << std::endl;
  htmlFile << "<td class=\"s1\" align=\"center\">DCC</td>" << std::endl;
  htmlFile << "<td class=\"s1\" align=\"center\">SPIGOT</td>" << std::endl;
  htmlFile << "<td class=\"s1\" align=\"center\">HTR_FIBER</td>" << std::endl;
  htmlFile << "<td class=\"s1\" align=\"center\">HTR_SLOT</td>" << std::endl;
  htmlFile << "<td class=\"s1\" align=\"center\">HTR_FPGA</td>" << std::endl;
  htmlFile << "<td class=\"s5\" align=\"center\">Failed criteria</td>" << std::endl;
  htmlFile << "</tr>" << std::endl;

  for (int i = 1; i <= NWarn; i++) {
    if ((ind % 2) == 1) {
      raw_class = "<td class=\"s2\" align=\"center\">";
      raw_class1 = "<td class=\"s6\" align=\"center\">";
    } else {
      raw_class = "<td class=\"s3\" align=\"center\">";
      raw_class1 = "<td class=\"s7\" align=\"center\">";
    }
    const CellDB db;
    const CellDB ce = db.find("Eta", Eta[1][i]).find("Phi", Phi[1][i]).find("Depth", Depth[1][i]);
    if (ce.size() == 0) {
      //	      cout<<"Error: No such Eta="<< Eta[1][i] <<", Phi="<< Phi[1][i] <<", Depth="<< Depth[1][i] <<" in database"<<endl;
      continue;
    }
    //	else if (ce.size()>1) { cout<<"Warning: More than one line correspond to such Eta="<< Eta[1][i] <<", Phi="<< Phi[1][i] <<", Depth="<< Depth[1][i] <<" in database"<<endl;}

    if (ce.size() >= 1) {
      htmlFile << "<tr>" << std::endl;
      htmlFile << "<td class=\"s1\" align=\"center\">" << ind + 1 << "</td>" << std::endl;
      htmlFile << raw_class << Eta[1][i] << "</td>" << std::endl;
      htmlFile << raw_class << Phi[1][i] << "</td>" << std::endl;
      htmlFile << raw_class << Depth[1][i] << "</td>" << std::endl;
      htmlFile << raw_class << ce[0].RBX << "</td>" << std::endl;
      htmlFile << raw_class << ce[0].RM << "</td>" << std::endl;
      htmlFile << raw_class << ce[0].Pixel << "</td>" << std::endl;
      htmlFile << raw_class << ce[0].RMfiber << "</td>" << std::endl;
      htmlFile << raw_class << ce[0].FiberCh << "</td>" << std::endl;
      htmlFile << raw_class << ce[0].QIE << "</td>" << std::endl;
      htmlFile << raw_class << ce[0].ADC << "</td>" << std::endl;
      htmlFile << raw_class << ce[0].VMECardID << "</td>" << std::endl;
      htmlFile << raw_class << ce[0].dccID << "</td>" << std::endl;
      htmlFile << raw_class << ce[0].Spigot << "</td>" << std::endl;
      htmlFile << raw_class << ce[0].FiberIndex << "</td>" << std::endl;
      htmlFile << raw_class << ce[0].HtrSlot << "</td>" << std::endl;
      htmlFile << raw_class << ce[0].HtrTB << "</td>" << std::endl;
      htmlFile << raw_class1 << Comment[1][i] << "</td>" << std::endl;
      htmlFile << "</tr>" << std::endl;

      ind += 1;
    }
  }

  htmlFile << "</table>" << std::endl;
  htmlFile << "<br>" << std::endl;

  htmlFile << "<h3> 2.D.List of channels with bad Pedestals </h3>" << std::endl;
  //    htmlFile << "  <td><a href=\"HELP.html\"> Description of criteria for bad channel selection</a></td>"<< std::endl;
  htmlFile << "  <td><a href=\"https://cms-conddb.cern.ch/eosweb/hcal/HcalRemoteMonitoring/RMT/LED_" << runnumber
           << "/HELP.html\"> Description of criteria for bad channel selection</a></td>" << std::endl;

  htmlFile << "<table>" << std::endl;
  htmlFile << "<tr>";
  htmlFile << "<td class=\"s4\" align=\"center\">#</td>" << std::endl;
  htmlFile << "<td class=\"s1\" align=\"center\">ETA</td>" << std::endl;
  htmlFile << "<td class=\"s1\" align=\"center\">PHI</td>" << std::endl;
  htmlFile << "<td class=\"s1\" align=\"center\">DEPTH</td>" << std::endl;
  htmlFile << "<td class=\"s1\" align=\"center\">RBX</td>" << std::endl;
  htmlFile << "<td class=\"s1\" align=\"center\">RM</td>" << std::endl;
  htmlFile << "<td class=\"s1\" align=\"center\">PIXEL</td>" << std::endl;
  htmlFile << "<td class=\"s1\" align=\"center\">RM_FIBER</td>" << std::endl;
  htmlFile << "<td class=\"s1\" align=\"center\">FIBER_CH</td>" << std::endl;
  htmlFile << "<td class=\"s1\" align=\"center\">QIE</td>" << std::endl;
  htmlFile << "<td class=\"s1\" align=\"center\">ADC</td>" << std::endl;
  htmlFile << "<td class=\"s1\" align=\"center\">CRATE</td>" << std::endl;
  htmlFile << "<td class=\"s1\" align=\"center\">DCC</td>" << std::endl;
  htmlFile << "<td class=\"s1\" align=\"center\">SPIGOT</td>" << std::endl;
  htmlFile << "<td class=\"s1\" align=\"center\">HTR_FIBER</td>" << std::endl;
  htmlFile << "<td class=\"s1\" align=\"center\">HTR_SLOT</td>" << std::endl;
  htmlFile << "<td class=\"s1\" align=\"center\">HTR_FPGA</td>" << std::endl;
  htmlFile << "<td class=\"s5\" align=\"center\">Failed criteria</td>" << std::endl;
  htmlFile << "</tr>" << std::endl;

  for (int i = 1; i <= NPed; i++) {
    if ((ind % 2) == 1) {
      raw_class = "<td class=\"s2\" align=\"center\">";
      raw_class1 = "<td class=\"s6\" align=\"center\">";
    } else {
      raw_class = "<td class=\"s3\" align=\"center\">";
      raw_class1 = "<td class=\"s7\" align=\"center\">";
    }
    const CellDB db;
    const CellDB ce = db.find("Eta", Eta[3][i]).find("Phi", Phi[3][i]).find("Depth", Depth[3][i]);
    if (ce.size() == 0) {
      //	      cout<<"Error: No such Eta="<< Eta[3][i] << ", Phi="<< Phi[3][i] <<", Depth="<< Depth[3][i] <<" in database"<<endl;
      continue;
    }
    //	else if (ce.size()>1) { cout<<"Warning: More than one line correspond to such Eta="<< Eta[1][i] <<", Phi="<< Phi[1][i] <<", Depth="<< Depth[1][i] <<" in database"<<endl;}

    if (ce.size() >= 1) {
      htmlFile << "<tr>" << std::endl;
      htmlFile << "<td class=\"s1\" align=\"center\">" << ind + 1 << "</td>" << std::endl;
      htmlFile << raw_class << Eta[3][i] << "</td>" << std::endl;
      htmlFile << raw_class << Phi[3][i] << "</td>" << std::endl;
      htmlFile << raw_class << Depth[3][i] << "</td>" << std::endl;
      htmlFile << raw_class << ce[0].RBX << "</td>" << std::endl;
      htmlFile << raw_class << ce[0].RM << "</td>" << std::endl;
      htmlFile << raw_class << ce[0].Pixel << "</td>" << std::endl;
      htmlFile << raw_class << ce[0].RMfiber << "</td>" << std::endl;
      htmlFile << raw_class << ce[0].FiberCh << "</td>" << std::endl;
      htmlFile << raw_class << ce[0].QIE << "</td>" << std::endl;
      htmlFile << raw_class << ce[0].ADC << "</td>" << std::endl;
      htmlFile << raw_class << ce[0].VMECardID << "</td>" << std::endl;
      htmlFile << raw_class << ce[0].dccID << "</td>" << std::endl;
      htmlFile << raw_class << ce[0].Spigot << "</td>" << std::endl;
      htmlFile << raw_class << ce[0].FiberIndex << "</td>" << std::endl;
      htmlFile << raw_class << ce[0].HtrSlot << "</td>" << std::endl;
      htmlFile << raw_class << ce[0].HtrTB << "</td>" << std::endl;
      htmlFile << raw_class1 << Comment[3][i] << "</td>" << std::endl;
      htmlFile << "</tr>" << std::endl;

      ind += 1;
    }
  }

  htmlFile << "</table>" << std::endl;

  htmlFile << "</body> " << std::endl;
  htmlFile << "</html> " << std::endl;
  htmlFile.close();
  //======================================================================

  //======================================================================
  // Close and delete all possible things:
  hfile->Close();
  //  hfile->Delete();
  //  Exit Root
  gSystem->Exit(0);
  //======================================================================
}
