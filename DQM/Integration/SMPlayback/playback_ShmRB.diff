? EventFilter/ResourceBroker/src/backup-FUResourceTable.cc.1.41
? EventFilter/ResourceBroker/src/rt2.diff
Index: EventFilter/ResourceBroker/src/FUResourceBroker.cc
===================================================================
RCS file: /cvs_server/repositories/CMSSW/CMSSW/EventFilter/ResourceBroker/src/FUResourceBroker.cc,v
retrieving revision 1.53
diff -r1.53 FUResourceBroker.cc
236c236
<     resourceTable_->startDiscardWorkLoop();
---
>     if(bu_ !=0) resourceTable_->startDiscardWorkLoop();
239c239
<     resourceTable_->sendAllocate();
---
>     if(bu_ !=0)resourceTable_->sendAllocate();
409,410c409
<     string msg=sourceId_+" failed to locate input BU!";
<     XCEPT_RAISE(evf::Exception,msg);
---
>     LOG4CPLUS_WARN(log_,sourceId_<<" failed to locate input BU!");
Index: EventFilter/ResourceBroker/src/FUResourceTable.cc
===================================================================
RCS file: /cvs_server/repositories/CMSSW/CMSSW/EventFilter/ResourceBroker/src/FUResourceTable.cc,v
retrieving revision 1.43
diff -r1.43 FUResourceTable.cc
104c104
< 					  rawCellSize,recoCellSize,dqmCellSize);
---
> 					  rawCellSize,recoCellSize,dqmCellSize,(bu_!=0));
131a132
>     if (!bu_) isActive_=true;
136a138
>   if (!bu_) isReadyToShutDown_=false;
146c148,149
<   
---
> 
>   if (0==cell) return false; 
255d257
<   
256a259
>   if (0==cell) return false;
642,643c645,652
<   if (nbClientsToShutDown_==0) {
<     shmBuffer_->scheduleRawEmptyCellForDiscard();
---
>   if (bu_) {//discard workloop will handle halting
>     if (nbClientsToShutDown_==0) {
>       shmBuffer_->scheduleRawEmptyCellForDiscard();
>     }
>     else {
>       UInt_t n=nbClientsToShutDown_;
>       for (UInt_t i=0;i<n;++i) shmBuffer_->writeRawEmptyEvent();
>     }
646,647c655,675
<     UInt_t n=nbClientsToShutDown_;
<     for (UInt_t i=0;i<n;++i) shmBuffer_->writeRawEmptyEvent();
---
>     UInt_t count=0;
>     while (count<100) {
>       if (shmBuffer_->nClients()==0&&
> 	  FUShmBuffer::shm_nattch(shmBuffer_->shmid())==1) {
> 	isReadyToShutDown_ = true;
> 	break;
>       }
>       else {
> 	count++;
> 	LOG4CPLUS_DEBUG(log_,"FUResourceTable: Wait for all clients to detach,"
> 	    <<" nClients="<<shmBuffer_->nClients()
> 	    <<" nattch="<<FUShmBuffer::shm_nattch(shmBuffer_->shmid())
> 	    <<" ("<<count<<")");
> 	::usleep(shutdownTimeout_);
> 	if(count*shutdownTimeout_ > 10000000)
> 	  LOG4CPLUS_WARN(log_,"FUResourceTable:LONG Wait (>10s) for all clients to detach,"
> 	      <<" nClients="<<shmBuffer_->nClients()
> 	      <<" nattch="<<FUShmBuffer::shm_nattch(shmBuffer_->shmid())
> 	      <<" ("<<count<<")");
>       }
>     }
? EventFilter/ShmBuffer/interface/FUShmBuffer.h.srecko
? EventFilter/ShmBuffer/src/FUShmBuffer.cc.srecko
Index: EventFilter/ShmBuffer/interface/FUShmBuffer.h
===================================================================
RCS file: /cvs_server/repositories/CMSSW/CMSSW/EventFilter/ShmBuffer/interface/FUShmBuffer.h,v
retrieving revision 1.14
diff -r1.14 FUShmBuffer.h
51c51,52
< 		unsigned int dqmCellSize);
---
> 		unsigned int dqmCellSize,
> 		unsigned int hasBU);
143c144
<     static FUShmBuffer* createShmBuffer(bool         semgmentationMode,
---
>     static FUShmBuffer* createShmBuffer(bool         segmentationMode,
149c150,151
< 					unsigned int dqmCellSize =0x400000); //4MB
---
> 					unsigned int dqmCellSize =0x400000,  //4MB
>     					unsigned int hasBU = 1);
161c163,164
< 			     unsigned int dqmCellSize);
---
> 			     unsigned int dqmCellSize,
> 			     unsigned int hasBU);
235c238
<     void           sem_wait(int isem);
---
>     int           sem_wait(int isem);
239c242
<     void           lock()             { sem_wait(0); }
---
>     int           lock()             { return sem_wait(0); }
242c245
<     void           waitRawWrite()     { sem_wait(1); }
---
>     int           waitRawWrite()     { return sem_wait(1); }
244c247
<     void           waitRawRead()      { sem_wait(2); }
---
>     int           waitRawRead()      { return sem_wait(2); }
246c249
<     void           waitRawDiscard()   { sem_wait(3); }
---
>     int           waitRawDiscard()   { return sem_wait(3); }
248c251
<     void           waitRawDiscarded() { sem_wait(4); }
---
>     int           waitRawDiscarded() { return sem_wait(4); }
250c253
<     void           waitRecoWrite()    { sem_wait(5); }
---
>     int           waitRecoWrite()    { return sem_wait(5); }
252c255
<     void           waitRecoRead()     { sem_wait(6); }
---
>     int           waitRecoRead()     { return sem_wait(6); }
254c257
<     void           waitDqmWrite()     { sem_wait(7); }
---
>     int           waitDqmWrite()     { return sem_wait(7); }
256c259
<     void           waitDqmRead()      { sem_wait(8); }
---
>     int           waitDqmRead()      { return sem_wait(8); }
266a270
>     unsigned int hasBU_;
322d325
<     
Index: EventFilter/ShmBuffer/src/FUShmBuffer.cc
===================================================================
RCS file: /cvs_server/repositories/CMSSW/CMSSW/EventFilter/ShmBuffer/src/FUShmBuffer.cc,v
retrieving revision 1.32
diff -r1.32 FUShmBuffer.cc
57c57,58
< 			 unsigned int dqmCellSize)
---
> 			 unsigned int dqmCellSize,
> 			 unsigned int hasBU)
58a60
>   , hasBU_(hasBU)
290c292
<   waitRawWrite();
---
>   if (waitRawWrite()<0) return 0;
304c306
<   waitRawRead();
---
>   if (waitRawRead()<0) return 0;
320c322
<   waitRecoRead();
---
>   if (waitRecoRead()<0) return 0;
336c338
<   waitDqmRead();
---
>   if (waitDqmRead()<0) return 0;
349c351
<   waitRawDiscarded();
---
>   if (waitRawDiscarded()<0) return 0;
434,438c436,442
<   unsigned int iRawCell=cell->rawCellIndex();
<   if (iRawCell<nRawCells_) {
<     //evt::State_t state=evtState(iRawCell);
<     //assert(state==evt::SENT);
<     scheduleRawCellForDiscard(iRawCell);
---
>   if (hasBU_) {
>     unsigned int iRawCell=cell->rawCellIndex();
>     if (iRawCell<nRawCells_) {
>       //evt::State_t state=evtState(iRawCell);
>       //assert(state==evt::SENT);
>       scheduleRawCellForDiscard(iRawCell);
>     }
602,607c606,617
<   unsigned int rawCellIndex=indexForEvtNumber(evtNumber);
<   //evt::State_t state=evtState(rawCellIndex);
<   //assert(state==evt::PROCESSING||state==evt::RECOWRITING||state==evt::SENT);
<   setEvtState(rawCellIndex,evt::RECOWRITING);
<   incEvtDiscard(rawCellIndex);
<   cell->writeEventData(rawCellIndex,runNumber,evtNumber,outModId,
---
>   if (hasBU_) {
>     unsigned int rawCellIndex=indexForEvtNumber(evtNumber);
>     //evt::State_t state=evtState(rawCellIndex);
>     //assert(state==evt::PROCESSING||state==evt::RECOWRITING||state==evt::SENT);
>     setEvtState(rawCellIndex,evt::RECOWRITING);
>     incEvtDiscard(rawCellIndex);
>     cell->writeEventData(rawCellIndex,runNumber,evtNumber,outModId,
>                          fuProcessId,fuGuid,data,dataSize);
>     setEvtState(rawCellIndex,evt::RECOWRITTEN);
>   }
>   else 
>     cell->writeEventData(0,runNumber,evtNumber,outModId,
609d618
<   setEvtState(rawCellIndex,evt::RECOWRITTEN);
776c785,786
< 					  unsigned int dqmCellSize)
---
> 					  unsigned int dqmCellSize,
> 					  unsigned int hasBU)
783c793
<   
---
> 
785c795
<   int  size =sizeof(unsigned int)*7;
---
>   int  size =sizeof(unsigned int)*8;
802a813
>   *p++=hasBU;
808c819
< 			      rawCellSize,recoCellSize,dqmCellSize);
---
> 			      rawCellSize,recoCellSize,dqmCellSize,hasBU);
820c831
< 					       rawCellSize,recoCellSize,dqmCellSize);
---
> 					       rawCellSize,recoCellSize,dqmCellSize,hasBU);
826c837
<   
---
> 
835c846
<   int   size   =sizeof(unsigned int)*7;
---
>   int   size   =sizeof(unsigned int)*8;
846a858
>   bool          hasBU           =*p++;
856a869
>       <<" hasBU="<<hasBU
862c875
< 			      rawCellSize,recoCellSize,dqmCellSize);
---
> 			      rawCellSize,recoCellSize,dqmCellSize,hasBU);
866c879
<   
---
> 
871c884
<   
---
> 
874c887
< 					       rawCellSize,recoCellSize,dqmCellSize);
---
> 					       rawCellSize,recoCellSize,dqmCellSize,hasBU);
889c902
<   int   size   =sizeof(unsigned int)*7;
---
>   int   size   =sizeof(unsigned int)*8;
900a914
>   unsigned int hasBU           =*p++;
907c921
< 			      rawCellSize,recoCellSize,dqmCellSize);
---
> 			      rawCellSize,recoCellSize,dqmCellSize,hasBU);
930c944
< 				rawCellSize,recoCellSize,dqmCellSize);
---
> 				rawCellSize,recoCellSize,dqmCellSize,hasBU);
961c975,976
< 			       unsigned int dqmCellSize)
---
> 			       unsigned int dqmCellSize,
> 			       unsigned int hasBU)
1593c1608
< void FUShmBuffer::sem_wait(int isem)
---
> int FUShmBuffer::sem_wait(int isem)
1600c1615,1616
<     cout<<"FUShmBuffer: ERROR in semaphore operation sem_wait."<<endl;
---
>     cout<<"FUShmBuffer: ERROR in semaphore operation sem_wait. isem:"<< isem <<endl;
>     return -1;
1601a1618
>   return 0;
