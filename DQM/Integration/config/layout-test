#!/usr/bin/env python
import os, re, sys
import GuiDefs, GuiDQM

# use: ./layout-test server_config_file MonitorElementsList
# example:
# ./layout-test server-conf-offline.py /afs/cern.ch/user/c/cmsdqm/scratch/KnownObjects | less

# command line parameteers
CFGFILE = sys.argv[1]
MEOBJEFILE = sys.argv[2]

# load server configuration file
CFGFILE = sys.argv[1]
x = { 'server': GuiDefs.ServerDef(),
      '__file__': CFGFILE,
      'modules': () }
execfile(CFGFILE, globals(), x)
cfg = x['server']
err = cfg.validate()
if err != None:
  print >> sys.stderr, err
  sys.exit(1)

LAYOUTS = {}
RE2LDIRECTORY = re.compile(r"([0-9a-zA-Z ]+)/([0-9a-zA-Z ]+)/.*")
LAYOUTCLASS = ('shift','overview','regular','relval')
locls = {} 

#---------------------------------------------------------------------
def printTree2L(tree):
  space = "  "
  for r, leafs in tree.items():
    print "%s%s" % (space,r)
    for l in leafs:
      print "%s%s/%s" % (space,space,l)
      
def logme(msg, *args):
  procid = "[%s/%d]" % (__file__.rsplit("/", 1)[-1], os.getpid())
  print datetime.now(), procid, msg % args
#---------------------------------------------------------------------

#Load layouts and separate store them by procedence file. 
for s in cfg.sources:
  if s[0] == 'DQMLayout':
    for l in s[2]:
      locls["dqmitems"]={}
      if not os.path.exists(l): 
        continue
          
      execfile(l,GuiDQM.__dict__,locls)
      LAYOUTS.setdefault(l,locls["dqmitems"])

print "First 2 levels created by layouts:"
for f in sorted(LAYOUTS):
  # Check provided subsystems tree
  print f
  layout = LAYOUTS[f]
  tree={}
  for h in layout:
    direx = RE2LDIRECTORY.match(h)
    if not direx:
      logme("ERROR: Unrecognized 2L directories: %s",h)
      continue
    
    tree.setdefault(direx.group(1),{}).setdefault(direx.group(2),"")
    
  printTree2L(tree)

# Load KnownMEs
knownMEs = {}
kMEfh = open(MEOBJEFILE, "r")
line = kMEfh.readline().strip()
while line:
  splitLine = line.split("/")
  newKME = knownMEs.setdefault(splitLine[0],{})
  for sf in splitLine[1:]:
    newKME = newKME.setdefault(sf,{})

  line = kMEfh.readline().strip()

# Test layouts for correct locations
for f, layout in LAYOUTS.items():
  print "Testing layouts in file: %s" % f
  for h, hItem in sorted(layout.items()):
    for col in hItem.layout:
      for row in col:
        if not row:
          continue
        
        if type(row) == type(dict()):         
          hLocation = row["path"].split("/")
        else:
          hLocation = row.split("/")
          
        try:
          pT = knownMEs[hLocation[0]]
          for sf in hLocation[1:]:
            pT = pT[sf]
        
        except KeyError, e:
          print "Path not found %s, for histogram: %s, failed in: %s" % ("/".join(hLocation),h,e)
          continue
    
    
