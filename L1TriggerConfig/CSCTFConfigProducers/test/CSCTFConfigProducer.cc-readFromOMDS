#include <L1TriggerConfig/CSCTFConfigProducers/interface/CSCTFConfigProducer.h>
#include <FWCore/MessageLogger/interface/MessageLogger.h>

#include <stdio.h>
#include <errno.h>
#include <iostream>
#include <fstream>

#include "CondTools/L1Trigger/interface/L1ConfigOnlineProdBase.h"

CSCTFConfigProducer::CSCTFConfigProducer(const edm::ParameterSet& pset) {

  alignment  = pset.getParameter< std::vector<double> >("alignment");
  setWhatProduced(this, &CSCTFConfigProducer::produceL1MuCSCTFConfigurationRcd);
  setWhatProduced(this, &CSCTFConfigProducer::produceL1MuCSCTFAlignmentRcd);
  setWhatProduced(this, &CSCTFConfigProducer::produceL1MuCSCPtLutRcd);

}

std::unique_ptr<L1MuCSCTFConfiguration> CSCTFConfigProducer::produceL1MuCSCTFConfigurationRcd(const L1MuCSCTFConfigurationRcd& iRecord){

  std::string objectKey("170210");
  l1t::OMDSReader m_omdsReader("oracle://CMS_OMDS_LB/CMS_TRG_R",".");

   edm::LogInfo( "L1-O2O: CSCTFConfigProducer" ) << "Producing "
						 << " L1MuCSCTFConfiguration"
						 << "with key CSCTF_KEY="
						 << objectKey;

  // Execute SQL querie`s to get data from OMDS (using key) and make C++ object
  // Example: SELECT A_PARAMETER FROM CMS_XXX.XXX_CONF WHERE XXX_CONF.XXX_KEY = objectKey
  for (int iSP=1;iSP<13; iSP++) {

    char spName[2];
    if (iSP<10) sprintf(spName,"0%d",iSP);
    else        sprintf(spName, "%d",iSP);

    std::string spkey = objectKey + "00" + spName;
    
    edm::LogInfo("L1 O2O: CSCTFConfigProducer") << "spkey: " << spkey;
    
    //  SELECT Multiple columns  FROM TABLE with correct key: 
    std::vector< std::string > columns ;
    columns.push_back( "STATIC_CONFIG" ) ;
    columns.push_back( "ETA_CONFIG" ) ;
    l1t::OMDSReader::QueryResults results = m_omdsReader.basicQuery(
								    columns,
								    "CMS_CSC_TF",
								    "CSCTF_SP_CONF",
								    "CSCTF_SP_CONF.SP_KEY",
								    m_omdsReader.singleAttribute( spkey )
								    ) ;
    
    if( results.queryFailed() ) // check if query was successful
      {
	edm::LogError( "L1-O2O" ) << "Problem with L1CSCTFParameters key." ;
	return std::unique_ptr<L1MuCSCTFConfiguration>( new L1MuCSCTFConfiguration() );
      }
  
    //    double datum ;
    std::string conf_stat, conf_eta;
    results.fillVariable( "STATIC_CONFIG", conf_stat);
    results.fillVariable( "ETA_CONFIG",    conf_eta );
    //   std::cout<<conf_stat<<std::endl;
    edm::LogInfo( "conf_stat queried" ) << conf_stat ;
    edm::LogInfo( "conf_eta queried" )  << conf_eta ;
    
    for(size_t pos=conf_stat.find("\\n"); pos!=std::string::npos; pos=conf_stat.find("\\n",pos)) 
      { 
	conf_stat[pos]=' '; 
	conf_stat[pos+1]='\n'; 
      }
    
    for(size_t pos=conf_eta.find("\\n"); pos!=std::string::npos; pos=conf_eta.find("\\n",pos)) 
      { 
	conf_eta[pos]=' '; 
	conf_eta[pos+1]='\n'; 
      }
  
    std::string conf_fixed= "CSR_LQE F1 M1 0xFFFF \nCSR_LQE F1 M2 0xFFFF \nCSR_LQE F1 M3 0xFFFF \nCSR_LQE F2 M1 0xFFFF \nCSR_LQE F2 M2 0xFFFF \nCSR_LQE F2 M3 0xFFFF \nCSR_LQE F3 M1 0xFFFF \nCSR_LQE F3 M2 0xFFFF \nCSR_LQE F3 M3 0xFFFF \nCSR_LQE F4 M1 0xFFFF \nCSR_LQE F4 M2 0xFFFF \nCSR_LQE F4 M3 0xFFFF \nCSR_LQE F5 M1 0xFFFF \nCSR_LQE F5 M2 0xFFFF \nCSR_LQE F5 M3 0xFFFF \nCSR_KFL SP MA 0x0000 \nDAT_FTR SP MA 0xFF   \nCSR_SFC SP MA 0x1000 \n";
  
    
    std::string conf_read=conf_fixed+conf_eta+conf_stat;
  
    registers[iSP-1]=conf_read;
    
  }  
  
  std::unique_ptr<L1MuCSCTFConfiguration> config = std::unique_ptr<L1MuCSCTFConfiguration>( new L1MuCSCTFConfiguration(registers) );
  return config;

}

std::unique_ptr<L1MuCSCTFAlignment> CSCTFConfigProducer::produceL1MuCSCTFAlignmentRcd(const L1MuCSCTFAlignmentRcd& iRecord){
	std::unique_ptr<L1MuCSCTFAlignment> al = std::unique_ptr<L1MuCSCTFAlignment>( new L1MuCSCTFAlignment(alignment) );
	return al;
}

std::unique_ptr<L1MuCSCPtLut> CSCTFConfigProducer::produceL1MuCSCPtLutRcd(const L1MuCSCPtLutRcd& iRecord){
  
  std::string objectKey("1");
  l1t::OMDSReader m_omdsReader("oracle://CMS_OMDS_LB/CMS_TRG_R",".");
  
   edm::LogInfo( "L1-O2O: L1MuCSCPtLutConfigOnlineProd" ) << "Producing "
							 << "L1MuCSCPtLut "
							 << "with key PTLUT_VERSION="
							 << objectKey;
  
  // read the Pt_LUT: it is CLOB with 2^21 different values 
  l1t::OMDSReader::QueryResults results = m_omdsReader.basicQuery(
								  "PT_LUT",
								  "CMS_CSC_TF",
								  "CSCTF_PTLUTS",
								  "CSCTF_PTLUTS.PTLUT_VERSION",
								  m_omdsReader.singleAttribute(objectKey)
								  ) ;
 
  if( results.queryFailed() ) // check if query was successful
    {
      edm::LogError( "L1-O2O" ) << "Problem with L1MuCSCPtLutParameters key." ;
      return std::unique_ptr<L1MuCSCPtLut>( new L1MuCSCPtLut() );
    }
  
  std::string ptlut;
  results.fillVariable( ptlut ) ;
 
  // if uncommented it will generate a huge output...
  //edm::LogInfo( "L1-O2O: CSCTFConfigProducer" ) << "PtLUT is "
  //                                              << "ptlut";
  
  edm::LogInfo( "L1-O2O: L1MuCSCPtLutConfigOnlineProd" ) << "Returning L1MuCSCPtLut";
  
  L1MuCSCPtLut* CSCTFPtLut = new L1MuCSCPtLut();
  CSCTFPtLut->readFromDBS(ptlut);

  std::unique_ptr<L1MuCSCPtLut> pt_lut = std::unique_ptr<L1MuCSCPtLut>( CSCTFPtLut );
 
  return pt_lut;
}
