// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef L1TRIGGER_MENU_HXX
#define L1TRIGGER_MENU_HXX

// Begin prologue.
//
//
// End prologue.

#include <L1Trigger/L1TGlobal/src/L1TMenuEditor/xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <L1Trigger/L1TGlobal/src/L1TMenuEditor/xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <L1Trigger/L1TGlobal/src/L1TMenuEditor/xsd/cxx/xml/char-utf8.hxx>

#include <L1Trigger/L1TGlobal/src/L1TMenuEditor/xsd/cxx/tree/exceptions.hxx>
#include <L1Trigger/L1TGlobal/src/L1TMenuEditor/xsd/cxx/tree/elements.hxx>
#include <L1Trigger/L1TGlobal/src/L1TMenuEditor/xsd/cxx/tree/types.hxx>

#include <L1Trigger/L1TGlobal/src/L1TMenuEditor/xsd/cxx/xml/error-handler.hxx>

#include <L1Trigger/L1TGlobal/src/L1TMenuEditor/xsd/cxx/xml/dom/auto-ptr.hxx>

#include <L1Trigger/L1TGlobal/src/L1TMenuEditor/xsd/cxx/tree/parsing.hxx>
#include <L1Trigger/L1TGlobal/src/L1TMenuEditor/xsd/cxx/tree/parsing/byte.hxx>
#include <L1Trigger/L1TGlobal/src/L1TMenuEditor/xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <L1Trigger/L1TGlobal/src/L1TMenuEditor/xsd/cxx/tree/parsing/short.hxx>
#include <L1Trigger/L1TGlobal/src/L1TMenuEditor/xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <L1Trigger/L1TGlobal/src/L1TMenuEditor/xsd/cxx/tree/parsing/int.hxx>
#include <L1Trigger/L1TGlobal/src/L1TMenuEditor/xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <L1Trigger/L1TGlobal/src/L1TMenuEditor/xsd/cxx/tree/parsing/long.hxx>
#include <L1Trigger/L1TGlobal/src/L1TMenuEditor/xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <L1Trigger/L1TGlobal/src/L1TMenuEditor/xsd/cxx/tree/parsing/boolean.hxx>
#include <L1Trigger/L1TGlobal/src/L1TMenuEditor/xsd/cxx/tree/parsing/float.hxx>
#include <L1Trigger/L1TGlobal/src/L1TMenuEditor/xsd/cxx/tree/parsing/double.hxx>
#include <L1Trigger/L1TGlobal/src/L1TMenuEditor/xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace l1t
{
  class UUID;
  class DateTime;
  class Label;
  class Description;
  class MenuName;
  class ScalesKey;
  class FirmwareVersion;
  class History;
  class Revision;
  class EtComparison;
  class RelativeBx;
  class ConditionName;
  class ConditionType;
  class CalorimeterObjectType;
  class EtThreshold;
  class AlgorithmName;
  class AlgorithmIndex;
  class AlgorithmEquation;
  class AlgorithmMappedModule;
  class AlgorithmMappedIndex;
  class Meta;
  class ConditionList;
  class Condition;
  class Window;
  class DeltaRequirement;
  class CalorimeterObjectRequirement;
  class CalorimeterObjectRequirements;
  class CalorimeterCondition;
  class MuonCondition;
  class EnergySumsCondition;
  class CorrelationCondition;
  class InvariantMassCondition;
  class DeltaRCondition;
  class Algorithm;
  class AlgorithmMapping;
  class AlgorithmList;
  class L1TriggerMenu;
}


#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <L1Trigger/L1TGlobal/src/L1TMenuEditor/xsd/cxx/xml/char-utf8.hxx>

#include <L1Trigger/L1TGlobal/src/L1TMenuEditor/xsd/cxx/tree/exceptions.hxx>
#include <L1Trigger/L1TGlobal/src/L1TMenuEditor/xsd/cxx/tree/elements.hxx>
#include <L1Trigger/L1TGlobal/src/L1TMenuEditor/xsd/cxx/tree/containers.hxx>
#include <L1Trigger/L1TGlobal/src/L1TMenuEditor/xsd/cxx/tree/list.hxx>

#include <L1Trigger/L1TGlobal/src/L1TMenuEditor/xsd/cxx/xml/dom/parsing-header.hxx>

namespace l1t
{
  class UUID: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    UUID ();

    UUID (const char*);

    UUID (const ::std::string&);

    UUID (const ::xml_schema::string&);

    UUID (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    UUID (const ::xercesc::DOMAttr& a,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    UUID (const ::std::string& s,
          const ::xercesc::DOMElement* e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    UUID (const UUID& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    virtual UUID*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~UUID ();
  };

  class DateTime: public ::xml_schema::date_time
  {
    public:
    // Constructors.
    //
    DateTime (const ::xml_schema::date_time&);

    DateTime (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    DateTime (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    DateTime (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    DateTime (const DateTime& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual DateTime*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~DateTime ();
  };

  class Label: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    Label ();

    Label (const char*);

    Label (const ::std::string&);

    Label (const ::xml_schema::string&);

    Label (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    Label (const ::xercesc::DOMAttr& a,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    Label (const ::std::string& s,
           const ::xercesc::DOMElement* e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    Label (const Label& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual Label*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~Label ();
  };

  class Description: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    Description ();

    Description (const char*);

    Description (const ::std::string&);

    Description (const ::xml_schema::string&);

    Description (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    Description (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    Description (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    Description (const Description& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual Description*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~Description ();
  };

  class MenuName: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    MenuName ();

    MenuName (const char*);

    MenuName (const ::std::string&);

    MenuName (const ::xml_schema::string&);

    MenuName (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    MenuName (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    MenuName (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    MenuName (const MenuName& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual MenuName*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~MenuName ();
  };

  class ScalesKey: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    ScalesKey ();

    ScalesKey (const char*);

    ScalesKey (const ::std::string&);

    ScalesKey (const ::xml_schema::string&);

    ScalesKey (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    ScalesKey (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    ScalesKey (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    ScalesKey (const ScalesKey& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual ScalesKey*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~ScalesKey ();
  };

  class FirmwareVersion: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_int, char, ::xml_schema::simple_type >
  {
    public:
    // Constructors.
    //
    FirmwareVersion (const ::xml_schema::unsigned_int&);

    FirmwareVersion (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    FirmwareVersion (const ::xercesc::DOMAttr& a,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    FirmwareVersion (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    FirmwareVersion (const FirmwareVersion& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    virtual FirmwareVersion*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~FirmwareVersion ();
  };

  class History: public ::xml_schema::type
  {
    public:
    // revision
    // 
    typedef ::l1t::Revision revision_type;
    typedef ::xsd::cxx::tree::sequence< revision_type > revision_sequence;
    typedef revision_sequence::iterator revision_iterator;
    typedef revision_sequence::const_iterator revision_const_iterator;
    typedef ::xsd::cxx::tree::traits< revision_type, char > revision_traits;

    const revision_sequence&
    revision () const;

    revision_sequence&
    revision ();

    void
    revision (const revision_sequence& s);

    // Constructors.
    //
    History ();

    History (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    History (const History& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual History*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~History ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    revision_sequence revision_;
  };

  class Revision: public ::xml_schema::type
  {
    public:
    // author
    // 
    typedef ::l1t::Label author_type;
    typedef ::xsd::cxx::tree::traits< author_type, char > author_traits;

    const author_type&
    author () const;

    author_type&
    author ();

    void
    author (const author_type& x);

    void
    author (::std::auto_ptr< author_type > p);

    // datetime
    // 
    typedef ::l1t::DateTime datetime_type;
    typedef ::xsd::cxx::tree::traits< datetime_type, char > datetime_traits;

    const datetime_type&
    datetime () const;

    datetime_type&
    datetime ();

    void
    datetime (const datetime_type& x);

    void
    datetime (::std::auto_ptr< datetime_type > p);

    // username
    // 
    typedef ::l1t::Label username_type;
    typedef ::xsd::cxx::tree::optional< username_type > username_optional;
    typedef ::xsd::cxx::tree::traits< username_type, char > username_traits;

    const username_optional&
    username () const;

    username_optional&
    username ();

    void
    username (const username_type& x);

    void
    username (const username_optional& x);

    void
    username (::std::auto_ptr< username_type > p);

    // hostname
    // 
    typedef ::l1t::Label hostname_type;
    typedef ::xsd::cxx::tree::optional< hostname_type > hostname_optional;
    typedef ::xsd::cxx::tree::traits< hostname_type, char > hostname_traits;

    const hostname_optional&
    hostname () const;

    hostname_optional&
    hostname ();

    void
    hostname (const hostname_type& x);

    void
    hostname (const hostname_optional& x);

    void
    hostname (::std::auto_ptr< hostname_type > p);

    // Constructors.
    //
    Revision (const author_type&,
              const datetime_type&);

    Revision (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    Revision (const Revision& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual Revision*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~Revision ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< author_type > author_;
    ::xsd::cxx::tree::one< datetime_type > datetime_;
    username_optional username_;
    hostname_optional hostname_;
  };

  class EtComparison: public ::xml_schema::string
  {
    public:
    enum value
    {
      eq,
      ge
    };

    EtComparison (value v);

    EtComparison (const char* v);

    EtComparison (const ::std::string& v);

    EtComparison (const ::xml_schema::string& v);

    EtComparison (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    EtComparison (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    EtComparison (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    EtComparison (const EtComparison& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual EtComparison*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    EtComparison&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_EtComparison_convert ();
    }

    protected:
    value
    _xsd_EtComparison_convert () const;

    public:
    static const char* const _xsd_EtComparison_literals_[2];
    static const value _xsd_EtComparison_indexes_[2];
  };

  class RelativeBx: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >
  {
    public:
    // Constructors.
    //
    RelativeBx (const ::xml_schema::integer&);

    RelativeBx (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    RelativeBx (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    RelativeBx (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    RelativeBx (const RelativeBx& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual RelativeBx*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~RelativeBx ();
  };

  class ConditionName: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    ConditionName ();

    ConditionName (const char*);

    ConditionName (const ::std::string&);

    ConditionName (const ::xml_schema::string&);

    ConditionName (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    ConditionName (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    ConditionName (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    ConditionName (const ConditionName& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual ConditionName*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~ConditionName ();
  };

  class ConditionType: public ::xml_schema::string
  {
    public:
    enum value
    {
      single,
      double_,
      triple,
      quad,
      double_wsc
    };

    ConditionType (value v);

    ConditionType (const char* v);

    ConditionType (const ::std::string& v);

    ConditionType (const ::xml_schema::string& v);

    ConditionType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    ConditionType (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    ConditionType (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    ConditionType (const ConditionType& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual ConditionType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    ConditionType&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_ConditionType_convert ();
    }

    protected:
    value
    _xsd_ConditionType_convert () const;

    public:
    static const char* const _xsd_ConditionType_literals_[5];
    static const value _xsd_ConditionType_indexes_[5];
  };

  class CalorimeterObjectType: public ::xml_schema::string
  {
    public:
    enum value
    {
      eg,
      jet,
      tau
    };

    CalorimeterObjectType (value v);

    CalorimeterObjectType (const char* v);

    CalorimeterObjectType (const ::std::string& v);

    CalorimeterObjectType (const ::xml_schema::string& v);

    CalorimeterObjectType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    CalorimeterObjectType (const ::xercesc::DOMAttr& a,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    CalorimeterObjectType (const ::std::string& s,
                           const ::xercesc::DOMElement* e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    CalorimeterObjectType (const CalorimeterObjectType& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    virtual CalorimeterObjectType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    CalorimeterObjectType&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_CalorimeterObjectType_convert ();
    }

    protected:
    value
    _xsd_CalorimeterObjectType_convert () const;

    public:
    static const char* const _xsd_CalorimeterObjectType_literals_[3];
    static const value _xsd_CalorimeterObjectType_indexes_[3];
  };

  class EtThreshold: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_int, char, ::xml_schema::simple_type >
  {
    public:
    // Constructors.
    //
    EtThreshold (const ::xml_schema::unsigned_int&);

    EtThreshold (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    EtThreshold (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    EtThreshold (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    EtThreshold (const EtThreshold& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual EtThreshold*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~EtThreshold ();
  };

  class AlgorithmName: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    AlgorithmName ();

    AlgorithmName (const char*);

    AlgorithmName (const ::std::string&);

    AlgorithmName (const ::xml_schema::string&);

    AlgorithmName (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    AlgorithmName (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    AlgorithmName (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    AlgorithmName (const AlgorithmName& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual AlgorithmName*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~AlgorithmName ();
  };

  class AlgorithmIndex: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_int, char, ::xml_schema::simple_type >
  {
    public:
    // Constructors.
    //
    AlgorithmIndex (const ::xml_schema::unsigned_int&);

    AlgorithmIndex (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    AlgorithmIndex (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    AlgorithmIndex (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    AlgorithmIndex (const AlgorithmIndex& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual AlgorithmIndex*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~AlgorithmIndex ();
  };

  class AlgorithmEquation: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    AlgorithmEquation ();

    AlgorithmEquation (const char*);

    AlgorithmEquation (const ::std::string&);

    AlgorithmEquation (const ::xml_schema::string&);

    AlgorithmEquation (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    AlgorithmEquation (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    AlgorithmEquation (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    AlgorithmEquation (const AlgorithmEquation& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    virtual AlgorithmEquation*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~AlgorithmEquation ();
  };

  class AlgorithmMappedModule: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_int, char, ::xml_schema::simple_type >
  {
    public:
    // Constructors.
    //
    AlgorithmMappedModule (const ::xml_schema::unsigned_int&);

    AlgorithmMappedModule (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    AlgorithmMappedModule (const ::xercesc::DOMAttr& a,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    AlgorithmMappedModule (const ::std::string& s,
                           const ::xercesc::DOMElement* e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    AlgorithmMappedModule (const AlgorithmMappedModule& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    virtual AlgorithmMappedModule*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~AlgorithmMappedModule ();
  };

  class AlgorithmMappedIndex: public ::l1t::AlgorithmIndex
  {
    public:
    // Constructors.
    //
    AlgorithmMappedIndex (const ::xml_schema::unsigned_int&);

    AlgorithmMappedIndex (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    AlgorithmMappedIndex (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    AlgorithmMappedIndex (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    AlgorithmMappedIndex (const AlgorithmMappedIndex& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    virtual AlgorithmMappedIndex*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~AlgorithmMappedIndex ();
  };

  class Meta: public ::xml_schema::type
  {
    public:
    // uid
    // 
    typedef ::l1t::UUID uid_type;
    typedef ::xsd::cxx::tree::traits< uid_type, char > uid_traits;

    const uid_type&
    uid () const;

    uid_type&
    uid ();

    void
    uid (const uid_type& x);

    void
    uid (::std::auto_ptr< uid_type > p);

    // name
    // 
    typedef ::l1t::MenuName name_type;
    typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

    const name_type&
    name () const;

    name_type&
    name ();

    void
    name (const name_type& x);

    void
    name (::std::auto_ptr< name_type > p);

    // scalesKey
    // 
    typedef ::l1t::ScalesKey scalesKey_type;
    typedef ::xsd::cxx::tree::traits< scalesKey_type, char > scalesKey_traits;

    const scalesKey_type&
    scalesKey () const;

    scalesKey_type&
    scalesKey ();

    void
    scalesKey (const scalesKey_type& x);

    void
    scalesKey (::std::auto_ptr< scalesKey_type > p);

    // description
    // 
    typedef ::l1t::Description description_type;
    typedef ::xsd::cxx::tree::traits< description_type, char > description_traits;

    const description_type&
    description () const;

    description_type&
    description ();

    void
    description (const description_type& x);

    void
    description (::std::auto_ptr< description_type > p);

    // history
    // 
    typedef ::l1t::History history_type;
    typedef ::xsd::cxx::tree::traits< history_type, char > history_traits;

    const history_type&
    history () const;

    history_type&
    history ();

    void
    history (const history_type& x);

    void
    history (::std::auto_ptr< history_type > p);

    // Constructors.
    //
    Meta (const uid_type&,
          const name_type&,
          const scalesKey_type&,
          const description_type&,
          const history_type&);

    Meta (const uid_type&,
          const name_type&,
          const scalesKey_type&,
          const description_type&,
          ::std::auto_ptr< history_type >&);

    Meta (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    Meta (const Meta& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    virtual Meta*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~Meta ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< uid_type > uid_;
    ::xsd::cxx::tree::one< name_type > name_;
    ::xsd::cxx::tree::one< scalesKey_type > scalesKey_;
    ::xsd::cxx::tree::one< description_type > description_;
    ::xsd::cxx::tree::one< history_type > history_;
  };

  class ConditionList: public ::xml_schema::type
  {
    public:
    // condCalorimeter
    // 
    typedef ::l1t::CalorimeterCondition condCalorimeter_type;
    typedef ::xsd::cxx::tree::sequence< condCalorimeter_type > condCalorimeter_sequence;
    typedef condCalorimeter_sequence::iterator condCalorimeter_iterator;
    typedef condCalorimeter_sequence::const_iterator condCalorimeter_const_iterator;
    typedef ::xsd::cxx::tree::traits< condCalorimeter_type, char > condCalorimeter_traits;

    const condCalorimeter_sequence&
    condCalorimeter () const;

    condCalorimeter_sequence&
    condCalorimeter ();

    void
    condCalorimeter (const condCalorimeter_sequence& s);

    // condMuon
    // 
    typedef ::l1t::MuonCondition condMuon_type;
    typedef ::xsd::cxx::tree::sequence< condMuon_type > condMuon_sequence;
    typedef condMuon_sequence::iterator condMuon_iterator;
    typedef condMuon_sequence::const_iterator condMuon_const_iterator;
    typedef ::xsd::cxx::tree::traits< condMuon_type, char > condMuon_traits;

    const condMuon_sequence&
    condMuon () const;

    condMuon_sequence&
    condMuon ();

    void
    condMuon (const condMuon_sequence& s);

    // condEnergySums
    // 
    typedef ::l1t::EnergySumsCondition condEnergySums_type;
    typedef ::xsd::cxx::tree::sequence< condEnergySums_type > condEnergySums_sequence;
    typedef condEnergySums_sequence::iterator condEnergySums_iterator;
    typedef condEnergySums_sequence::const_iterator condEnergySums_const_iterator;
    typedef ::xsd::cxx::tree::traits< condEnergySums_type, char > condEnergySums_traits;

    const condEnergySums_sequence&
    condEnergySums () const;

    condEnergySums_sequence&
    condEnergySums ();

    void
    condEnergySums (const condEnergySums_sequence& s);

    // condCorrelation
    // 
    typedef ::l1t::CorrelationCondition condCorrelation_type;
    typedef ::xsd::cxx::tree::sequence< condCorrelation_type > condCorrelation_sequence;
    typedef condCorrelation_sequence::iterator condCorrelation_iterator;
    typedef condCorrelation_sequence::const_iterator condCorrelation_const_iterator;
    typedef ::xsd::cxx::tree::traits< condCorrelation_type, char > condCorrelation_traits;

    const condCorrelation_sequence&
    condCorrelation () const;

    condCorrelation_sequence&
    condCorrelation ();

    void
    condCorrelation (const condCorrelation_sequence& s);

    // condInvariantMass
    // 
    typedef ::l1t::InvariantMassCondition condInvariantMass_type;
    typedef ::xsd::cxx::tree::sequence< condInvariantMass_type > condInvariantMass_sequence;
    typedef condInvariantMass_sequence::iterator condInvariantMass_iterator;
    typedef condInvariantMass_sequence::const_iterator condInvariantMass_const_iterator;
    typedef ::xsd::cxx::tree::traits< condInvariantMass_type, char > condInvariantMass_traits;

    const condInvariantMass_sequence&
    condInvariantMass () const;

    condInvariantMass_sequence&
    condInvariantMass ();

    void
    condInvariantMass (const condInvariantMass_sequence& s);

    // condDeltaR
    // 
    typedef ::l1t::DeltaRCondition condDeltaR_type;
    typedef ::xsd::cxx::tree::sequence< condDeltaR_type > condDeltaR_sequence;
    typedef condDeltaR_sequence::iterator condDeltaR_iterator;
    typedef condDeltaR_sequence::const_iterator condDeltaR_const_iterator;
    typedef ::xsd::cxx::tree::traits< condDeltaR_type, char > condDeltaR_traits;

    const condDeltaR_sequence&
    condDeltaR () const;

    condDeltaR_sequence&
    condDeltaR ();

    void
    condDeltaR (const condDeltaR_sequence& s);

    // Constructors.
    //
    ConditionList ();

    ConditionList (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    ConditionList (const ConditionList& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual ConditionList*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~ConditionList ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    condCalorimeter_sequence condCalorimeter_;
    condMuon_sequence condMuon_;
    condEnergySums_sequence condEnergySums_;
    condCorrelation_sequence condCorrelation_;
    condInvariantMass_sequence condInvariantMass_;
    condDeltaR_sequence condDeltaR_;
  };

  class Condition: public ::xml_schema::type
  {
    public:
    // uid
    // 
    typedef ::l1t::UUID uid_type;
    typedef ::xsd::cxx::tree::traits< uid_type, char > uid_traits;

    const uid_type&
    uid () const;

    uid_type&
    uid ();

    void
    uid (const uid_type& x);

    void
    uid (::std::auto_ptr< uid_type > p);

    // name
    // 
    typedef ::l1t::ConditionName name_type;
    typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

    const name_type&
    name () const;

    name_type&
    name ();

    void
    name (const name_type& x);

    void
    name (::std::auto_ptr< name_type > p);

    // description
    // 
    typedef ::l1t::Description description_type;
    typedef ::xsd::cxx::tree::traits< description_type, char > description_traits;

    const description_type&
    description () const;

    description_type&
    description ();

    void
    description (const description_type& x);

    void
    description (::std::auto_ptr< description_type > p);

    // locked
    // 
    typedef ::xml_schema::boolean locked_type;
    typedef ::xsd::cxx::tree::traits< locked_type, char > locked_traits;

    const locked_type&
    locked () const;

    locked_type&
    locked ();

    void
    locked (const locked_type& x);

    // Constructors.
    //
    Condition (const uid_type&,
               const name_type&,
               const description_type&,
               const locked_type&);

    Condition (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    Condition (const Condition& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual Condition*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~Condition ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< uid_type > uid_;
    ::xsd::cxx::tree::one< name_type > name_;
    ::xsd::cxx::tree::one< description_type > description_;
    ::xsd::cxx::tree::one< locked_type > locked_;
  };

  class Window: public ::xml_schema::type
  {
    public:
    // lower
    // 
    typedef ::xml_schema::unsigned_int lower_type;
    typedef ::xsd::cxx::tree::traits< lower_type, char > lower_traits;

    const lower_type&
    lower () const;

    lower_type&
    lower ();

    void
    lower (const lower_type& x);

    // upper
    // 
    typedef ::xml_schema::unsigned_int upper_type;
    typedef ::xsd::cxx::tree::traits< upper_type, char > upper_traits;

    const upper_type&
    upper () const;

    upper_type&
    upper ();

    void
    upper (const upper_type& x);

    // Constructors.
    //
    Window (const lower_type&,
            const upper_type&);

    Window (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    Window (const Window& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual Window*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~Window ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< lower_type > lower_;
    ::xsd::cxx::tree::one< upper_type > upper_;
  };

  class DeltaRequirement: public ::xml_schema::type
  {
    public:
    // deltaPhiRange
    // 
    typedef ::l1t::Window deltaPhiRange_type;
    typedef ::xsd::cxx::tree::traits< deltaPhiRange_type, char > deltaPhiRange_traits;

    const deltaPhiRange_type&
    deltaPhiRange () const;

    deltaPhiRange_type&
    deltaPhiRange ();

    void
    deltaPhiRange (const deltaPhiRange_type& x);

    void
    deltaPhiRange (::std::auto_ptr< deltaPhiRange_type > p);

    // deltaEtaRange
    // 
    typedef ::l1t::Window deltaEtaRange_type;
    typedef ::xsd::cxx::tree::traits< deltaEtaRange_type, char > deltaEtaRange_traits;

    const deltaEtaRange_type&
    deltaEtaRange () const;

    deltaEtaRange_type&
    deltaEtaRange ();

    void
    deltaEtaRange (const deltaEtaRange_type& x);

    void
    deltaEtaRange (::std::auto_ptr< deltaEtaRange_type > p);

    // Constructors.
    //
    DeltaRequirement (const deltaPhiRange_type&,
                      const deltaEtaRange_type&);

    DeltaRequirement (::std::auto_ptr< deltaPhiRange_type >&,
                      ::std::auto_ptr< deltaEtaRange_type >&);

    DeltaRequirement (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    DeltaRequirement (const DeltaRequirement& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual DeltaRequirement*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~DeltaRequirement ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< deltaPhiRange_type > deltaPhiRange_;
    ::xsd::cxx::tree::one< deltaEtaRange_type > deltaEtaRange_;
  };

  class CalorimeterObjectRequirement: public ::xml_schema::type
  {
    public:
    // etThreshold
    // 
    typedef ::l1t::EtThreshold etThreshold_type;
    typedef ::xsd::cxx::tree::traits< etThreshold_type, char > etThreshold_traits;

    const etThreshold_type&
    etThreshold () const;

    etThreshold_type&
    etThreshold ();

    void
    etThreshold (const etThreshold_type& x);

    void
    etThreshold (::std::auto_ptr< etThreshold_type > p);

    // phiWindow
    // 
    typedef ::l1t::Window phiWindow_type;
    typedef ::xsd::cxx::tree::sequence< phiWindow_type > phiWindow_sequence;
    typedef phiWindow_sequence::iterator phiWindow_iterator;
    typedef phiWindow_sequence::const_iterator phiWindow_const_iterator;
    typedef ::xsd::cxx::tree::traits< phiWindow_type, char > phiWindow_traits;

    const phiWindow_sequence&
    phiWindow () const;

    phiWindow_sequence&
    phiWindow ();

    void
    phiWindow (const phiWindow_sequence& s);

    // etaWindow
    // 
    typedef ::l1t::Window etaWindow_type;
    typedef ::xsd::cxx::tree::sequence< etaWindow_type > etaWindow_sequence;
    typedef etaWindow_sequence::iterator etaWindow_iterator;
    typedef etaWindow_sequence::const_iterator etaWindow_const_iterator;
    typedef ::xsd::cxx::tree::traits< etaWindow_type, char > etaWindow_traits;

    const etaWindow_sequence&
    etaWindow () const;

    etaWindow_sequence&
    etaWindow ();

    void
    etaWindow (const etaWindow_sequence& s);

    // Constructors.
    //
    CalorimeterObjectRequirement (const etThreshold_type&);

    CalorimeterObjectRequirement (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

    CalorimeterObjectRequirement (const CalorimeterObjectRequirement& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

    virtual CalorimeterObjectRequirement*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~CalorimeterObjectRequirement ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< etThreshold_type > etThreshold_;
    phiWindow_sequence phiWindow_;
    etaWindow_sequence etaWindow_;
  };

  class CalorimeterObjectRequirements: public ::xml_schema::type
  {
    public:
    // objectRequirement
    // 
    typedef ::l1t::CalorimeterObjectRequirement objectRequirement_type;
    typedef ::xsd::cxx::tree::sequence< objectRequirement_type > objectRequirement_sequence;
    typedef objectRequirement_sequence::iterator objectRequirement_iterator;
    typedef objectRequirement_sequence::const_iterator objectRequirement_const_iterator;
    typedef ::xsd::cxx::tree::traits< objectRequirement_type, char > objectRequirement_traits;

    const objectRequirement_sequence&
    objectRequirement () const;

    objectRequirement_sequence&
    objectRequirement ();

    void
    objectRequirement (const objectRequirement_sequence& s);

    // Constructors.
    //
    CalorimeterObjectRequirements ();

    CalorimeterObjectRequirements (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

    CalorimeterObjectRequirements (const CalorimeterObjectRequirements& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

    virtual CalorimeterObjectRequirements*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~CalorimeterObjectRequirements ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    objectRequirement_sequence objectRequirement_;
  };

  class CalorimeterCondition: public ::l1t::Condition
  {
    public:
    // type
    // 
    typedef ::l1t::ConditionType type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    void
    type (::std::auto_ptr< type_type > p);

    // etComparison
    // 
    typedef ::l1t::EtComparison etComparison_type;
    typedef ::xsd::cxx::tree::traits< etComparison_type, char > etComparison_traits;

    const etComparison_type&
    etComparison () const;

    etComparison_type&
    etComparison ();

    void
    etComparison (const etComparison_type& x);

    void
    etComparison (::std::auto_ptr< etComparison_type > p);

    // objectType
    // 
    typedef ::l1t::CalorimeterObjectType objectType_type;
    typedef ::xsd::cxx::tree::traits< objectType_type, char > objectType_traits;

    const objectType_type&
    objectType () const;

    objectType_type&
    objectType ();

    void
    objectType (const objectType_type& x);

    void
    objectType (::std::auto_ptr< objectType_type > p);

    // objectRequirements
    // 
    typedef ::l1t::CalorimeterObjectRequirements objectRequirements_type;
    typedef ::xsd::cxx::tree::traits< objectRequirements_type, char > objectRequirements_traits;

    const objectRequirements_type&
    objectRequirements () const;

    objectRequirements_type&
    objectRequirements ();

    void
    objectRequirements (const objectRequirements_type& x);

    void
    objectRequirements (::std::auto_ptr< objectRequirements_type > p);

    // deltaRequirement
    // 
    typedef ::l1t::DeltaRequirement deltaRequirement_type;
    typedef ::xsd::cxx::tree::optional< deltaRequirement_type > deltaRequirement_optional;
    typedef ::xsd::cxx::tree::traits< deltaRequirement_type, char > deltaRequirement_traits;

    const deltaRequirement_optional&
    deltaRequirement () const;

    deltaRequirement_optional&
    deltaRequirement ();

    void
    deltaRequirement (const deltaRequirement_type& x);

    void
    deltaRequirement (const deltaRequirement_optional& x);

    void
    deltaRequirement (::std::auto_ptr< deltaRequirement_type > p);

    // relativeBx
    // 
    typedef ::l1t::RelativeBx relativeBx_type;
    typedef ::xsd::cxx::tree::traits< relativeBx_type, char > relativeBx_traits;

    const relativeBx_type&
    relativeBx () const;

    relativeBx_type&
    relativeBx ();

    void
    relativeBx (const relativeBx_type& x);

    void
    relativeBx (::std::auto_ptr< relativeBx_type > p);

    // Constructors.
    //
    CalorimeterCondition (const uid_type&,
                          const name_type&,
                          const description_type&,
                          const locked_type&,
                          const type_type&,
                          const etComparison_type&,
                          const objectType_type&,
                          const objectRequirements_type&,
                          const relativeBx_type&);

    CalorimeterCondition (const uid_type&,
                          const name_type&,
                          const description_type&,
                          const locked_type&,
                          const type_type&,
                          const etComparison_type&,
                          const objectType_type&,
                          ::std::auto_ptr< objectRequirements_type >&,
                          const relativeBx_type&);

    CalorimeterCondition (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    CalorimeterCondition (const CalorimeterCondition& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    virtual CalorimeterCondition*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~CalorimeterCondition ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< type_type > type_;
    ::xsd::cxx::tree::one< etComparison_type > etComparison_;
    ::xsd::cxx::tree::one< objectType_type > objectType_;
    ::xsd::cxx::tree::one< objectRequirements_type > objectRequirements_;
    deltaRequirement_optional deltaRequirement_;
    ::xsd::cxx::tree::one< relativeBx_type > relativeBx_;
  };

  class MuonCondition: public ::l1t::Condition
  {
    public:
    // type
    // 
    typedef ::l1t::ConditionType type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    void
    type (::std::auto_ptr< type_type > p);

    // etComparison
    // 
    typedef ::l1t::EtComparison etComparison_type;
    typedef ::xsd::cxx::tree::traits< etComparison_type, char > etComparison_traits;

    const etComparison_type&
    etComparison () const;

    etComparison_type&
    etComparison ();

    void
    etComparison (const etComparison_type& x);

    void
    etComparison (::std::auto_ptr< etComparison_type > p);

    // relativeBx
    // 
    typedef ::l1t::RelativeBx relativeBx_type;
    typedef ::xsd::cxx::tree::traits< relativeBx_type, char > relativeBx_traits;

    const relativeBx_type&
    relativeBx () const;

    relativeBx_type&
    relativeBx ();

    void
    relativeBx (const relativeBx_type& x);

    void
    relativeBx (::std::auto_ptr< relativeBx_type > p);

    // Constructors.
    //
    MuonCondition (const uid_type&,
                   const name_type&,
                   const description_type&,
                   const locked_type&,
                   const type_type&,
                   const etComparison_type&,
                   const relativeBx_type&);

    MuonCondition (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    MuonCondition (const MuonCondition& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual MuonCondition*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~MuonCondition ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< type_type > type_;
    ::xsd::cxx::tree::one< etComparison_type > etComparison_;
    ::xsd::cxx::tree::one< relativeBx_type > relativeBx_;
  };

  class EnergySumsCondition: public ::l1t::Condition
  {
    public:
    // Constructors.
    //
    EnergySumsCondition (const uid_type&,
                         const name_type&,
                         const description_type&,
                         const locked_type&);

    EnergySumsCondition (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    EnergySumsCondition (const EnergySumsCondition& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual EnergySumsCondition*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~EnergySumsCondition ();
  };

  class CorrelationCondition: public ::l1t::Condition
  {
    public:
    // Constructors.
    //
    CorrelationCondition (const uid_type&,
                          const name_type&,
                          const description_type&,
                          const locked_type&);

    CorrelationCondition (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    CorrelationCondition (const CorrelationCondition& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    virtual CorrelationCondition*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~CorrelationCondition ();
  };

  class InvariantMassCondition: public ::l1t::Condition
  {
    public:
    // Constructors.
    //
    InvariantMassCondition (const uid_type&,
                            const name_type&,
                            const description_type&,
                            const locked_type&);

    InvariantMassCondition (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    InvariantMassCondition (const InvariantMassCondition& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    virtual InvariantMassCondition*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~InvariantMassCondition ();
  };

  class DeltaRCondition: public ::l1t::Condition
  {
    public:
    // Constructors.
    //
    DeltaRCondition (const uid_type&,
                     const name_type&,
                     const description_type&,
                     const locked_type&);

    DeltaRCondition (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    DeltaRCondition (const DeltaRCondition& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    virtual DeltaRCondition*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~DeltaRCondition ();
  };

  class Algorithm: public ::xml_schema::type
  {
    public:
    // uid
    // 
    typedef ::l1t::UUID uid_type;
    typedef ::xsd::cxx::tree::traits< uid_type, char > uid_traits;

    const uid_type&
    uid () const;

    uid_type&
    uid ();

    void
    uid (const uid_type& x);

    void
    uid (::std::auto_ptr< uid_type > p);

    // name
    // 
    typedef ::l1t::AlgorithmName name_type;
    typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

    const name_type&
    name () const;

    name_type&
    name ();

    void
    name (const name_type& x);

    void
    name (::std::auto_ptr< name_type > p);

    // index
    // 
    typedef ::l1t::AlgorithmIndex index_type;
    typedef ::xsd::cxx::tree::traits< index_type, char > index_traits;

    const index_type&
    index () const;

    index_type&
    index ();

    void
    index (const index_type& x);

    void
    index (::std::auto_ptr< index_type > p);

    // equation
    // 
    typedef ::l1t::AlgorithmEquation equation_type;
    typedef ::xsd::cxx::tree::traits< equation_type, char > equation_traits;

    const equation_type&
    equation () const;

    equation_type&
    equation ();

    void
    equation (const equation_type& x);

    void
    equation (::std::auto_ptr< equation_type > p);

    // description
    // 
    typedef ::l1t::Description description_type;
    typedef ::xsd::cxx::tree::traits< description_type, char > description_traits;

    const description_type&
    description () const;

    description_type&
    description ();

    void
    description (const description_type& x);

    void
    description (::std::auto_ptr< description_type > p);

    // locked
    // 
    typedef ::xml_schema::boolean locked_type;
    typedef ::xsd::cxx::tree::traits< locked_type, char > locked_traits;

    const locked_type&
    locked () const;

    locked_type&
    locked ();

    void
    locked (const locked_type& x);

    // mapping
    // 
    typedef ::l1t::AlgorithmMapping mapping_type;
    typedef ::xsd::cxx::tree::traits< mapping_type, char > mapping_traits;

    const mapping_type&
    mapping () const;

    mapping_type&
    mapping ();

    void
    mapping (const mapping_type& x);

    void
    mapping (::std::auto_ptr< mapping_type > p);

    // Constructors.
    //
    Algorithm (const uid_type&,
               const name_type&,
               const index_type&,
               const equation_type&,
               const description_type&,
               const locked_type&,
               const mapping_type&);

    Algorithm (const uid_type&,
               const name_type&,
               const index_type&,
               const equation_type&,
               const description_type&,
               const locked_type&,
               ::std::auto_ptr< mapping_type >&);

    Algorithm (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    Algorithm (const Algorithm& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual Algorithm*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~Algorithm ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< uid_type > uid_;
    ::xsd::cxx::tree::one< name_type > name_;
    ::xsd::cxx::tree::one< index_type > index_;
    ::xsd::cxx::tree::one< equation_type > equation_;
    ::xsd::cxx::tree::one< description_type > description_;
    ::xsd::cxx::tree::one< locked_type > locked_;
    ::xsd::cxx::tree::one< mapping_type > mapping_;
  };

  class AlgorithmMapping: public ::xml_schema::type
  {
    public:
    // module
    // 
    typedef ::l1t::AlgorithmMappedModule module_type;
    typedef ::xsd::cxx::tree::traits< module_type, char > module_traits;

    const module_type&
    module () const;

    module_type&
    module ();

    void
    module (const module_type& x);

    void
    module (::std::auto_ptr< module_type > p);

    // index
    // 
    typedef ::l1t::AlgorithmMappedIndex index_type;
    typedef ::xsd::cxx::tree::traits< index_type, char > index_traits;

    const index_type&
    index () const;

    index_type&
    index ();

    void
    index (const index_type& x);

    void
    index (::std::auto_ptr< index_type > p);

    // Constructors.
    //
    AlgorithmMapping (const module_type&,
                      const index_type&);

    AlgorithmMapping (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    AlgorithmMapping (const AlgorithmMapping& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual AlgorithmMapping*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~AlgorithmMapping ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< module_type > module_;
    ::xsd::cxx::tree::one< index_type > index_;
  };

  class AlgorithmList: public ::xml_schema::type
  {
    public:
    // algorithm
    // 
    typedef ::l1t::Algorithm algorithm_type;
    typedef ::xsd::cxx::tree::sequence< algorithm_type > algorithm_sequence;
    typedef algorithm_sequence::iterator algorithm_iterator;
    typedef algorithm_sequence::const_iterator algorithm_const_iterator;
    typedef ::xsd::cxx::tree::traits< algorithm_type, char > algorithm_traits;

    const algorithm_sequence&
    algorithm () const;

    algorithm_sequence&
    algorithm ();

    void
    algorithm (const algorithm_sequence& s);

    // Constructors.
    //
    AlgorithmList ();

    AlgorithmList (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    AlgorithmList (const AlgorithmList& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual AlgorithmList*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~AlgorithmList ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    algorithm_sequence algorithm_;
  };

  class L1TriggerMenu: public ::xml_schema::type
  {
    public:
    // meta
    // 
    typedef ::l1t::Meta meta_type;
    typedef ::xsd::cxx::tree::traits< meta_type, char > meta_traits;

    const meta_type&
    meta () const;

    meta_type&
    meta ();

    void
    meta (const meta_type& x);

    void
    meta (::std::auto_ptr< meta_type > p);

    // conditions
    // 
    typedef ::l1t::ConditionList conditions_type;
    typedef ::xsd::cxx::tree::traits< conditions_type, char > conditions_traits;

    const conditions_type&
    conditions () const;

    conditions_type&
    conditions ();

    void
    conditions (const conditions_type& x);

    void
    conditions (::std::auto_ptr< conditions_type > p);

    // algorithms
    // 
    typedef ::l1t::AlgorithmList algorithms_type;
    typedef ::xsd::cxx::tree::traits< algorithms_type, char > algorithms_traits;

    const algorithms_type&
    algorithms () const;

    algorithms_type&
    algorithms ();

    void
    algorithms (const algorithms_type& x);

    void
    algorithms (::std::auto_ptr< algorithms_type > p);

    // Constructors.
    //
    L1TriggerMenu (const meta_type&,
                   const conditions_type&,
                   const algorithms_type&);

    L1TriggerMenu (::std::auto_ptr< meta_type >&,
                   ::std::auto_ptr< conditions_type >&,
                   ::std::auto_ptr< algorithms_type >&);

    L1TriggerMenu (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    L1TriggerMenu (const L1TriggerMenu& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual L1TriggerMenu*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~L1TriggerMenu ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< meta_type > meta_;
    ::xsd::cxx::tree::one< conditions_type > conditions_;
    ::xsd::cxx::tree::one< algorithms_type > algorithms_;
  };
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace l1t
{
  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::l1t::L1TriggerMenu >
  l1TriggerMenu (const ::std::string& uri,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::l1t::L1TriggerMenu >
  l1TriggerMenu (const ::std::string& uri,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::l1t::L1TriggerMenu >
  l1TriggerMenu (const ::std::string& uri,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::l1t::L1TriggerMenu >
  l1TriggerMenu (::std::istream& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::l1t::L1TriggerMenu >
  l1TriggerMenu (::std::istream& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::l1t::L1TriggerMenu >
  l1TriggerMenu (::std::istream& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::l1t::L1TriggerMenu >
  l1TriggerMenu (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::l1t::L1TriggerMenu >
  l1TriggerMenu (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::l1t::L1TriggerMenu >
  l1TriggerMenu (::std::istream& is,
                 const ::std::string& id,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::l1t::L1TriggerMenu >
  l1TriggerMenu (::xercesc::InputSource& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::l1t::L1TriggerMenu >
  l1TriggerMenu (::xercesc::InputSource& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::l1t::L1TriggerMenu >
  l1TriggerMenu (::xercesc::InputSource& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::l1t::L1TriggerMenu >
  l1TriggerMenu (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::l1t::L1TriggerMenu >
  l1TriggerMenu (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());
}

#include <L1Trigger/L1TGlobal/src/L1TMenuEditor/xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // L1TRIGGER_MENU_HXX
