template <typename T>
l1ct::tdr_regionizer::PipeObject<T>::PipeObject(const T& obj,
                                                unsigned int phiindex,
                                                unsigned int etaindex,
                                                bool phioverlap,
                                                bool etaoverlap,
                                                int glbphi,
                                                int glbeta,
                                                unsigned int clk)
    : obj_(obj),
      phiindex_(phiindex),
      etaindex_(etaindex),
      phioverlap_(phioverlap),
      etaoverlap_(etaoverlap),
      glbphi_(glbphi),
      glbeta_(glbeta),
      linkobjclk_(clk) {
  objcount_ = 0;
}

template <typename T>
void l1ct::tdr_regionizer::Pipe<T>::addObj(
    T obj, unsigned int phiindex, unsigned int etaindex, bool phioverlap, bool etaoverlap, int glbphi, int glbeta) {
  data_.emplace_back(PipeObject<T>(obj, phiindex, etaindex, phioverlap, etaoverlap, glbphi, glbeta, clkindex_++));
}
//explicit for tracker to handle clocking
template <>
inline void l1ct::tdr_regionizer::Pipe<l1ct::TkObjEmu>::addObj(l1ct::TkObjEmu obj,
                                                               unsigned int phiindex,
                                                               unsigned int etaindex,
                                                               bool phioverlap,
                                                               bool etaoverlap,
                                                               int glbphi,
                                                               int glbeta) {
  data_.emplace_back(
      PipeObject<l1ct::TkObjEmu>(obj, phiindex, etaindex, phioverlap, etaoverlap, glbphi, glbeta, clkindex_++));
  if (clkindex_ % 3 == 2)
    clkindex_++;  //this is for tracker, could I get this generically maybe?
}

template <typename T>
int l1ct::tdr_regionizer::Pipe<T>::getClosedIndexForObject(unsigned int index) {
  switch (getCount(index)) {
    case 0:
      return getPhi(index) * 2 + getEta(index);
    case 1:
      if (getPhiOverlap(index) && !getEtaOverlap(index))
        return ((getPhi(index) + 1) % nphi_) * 2 + getEta(index);
      else  //eta overlap, or 4-small-region overlap
        return getPhi(index) * 2 + getEta(index) + 1;
    case 2:
      return ((getPhi(index) + 1) % nphi_) * 2 + getEta(index);
    case 3:
      return ((getPhi(index) + 1) % nphi_) * 2 + getEta(index) + 1;
    default:
      dbgCout() << "Impossible object count!" << std::endl;
      exit(0);
  }
}

template <typename T>
int l1ct::tdr_regionizer::Pipe<T>::getPipeIndexForObject(unsigned int index) {
  switch (getCount(index)) {
    case 0:
      return getPhi(index);
    case 1:
      if (getPhiOverlap(index) && !getEtaOverlap(index))
        return (getPhi(index) + 1) % nphi_;
      else
        return getPhi(index);
    case 2:
    case 3:
      return (getPhi(index) + 1) % nphi_;
    default:
      dbgCout() << "Impossible object count!" << std::endl;
      exit(0);
  }
}

template <typename T>
l1ct::tdr_regionizer::Regionizer<T>::Regionizer(
    unsigned int neta, unsigned int nregions, unsigned int maxobjects, int etaoffset, int etawidth, int nclocks)
    : neta_(neta),
      nregions_(nregions),
      maxobjects_(maxobjects),
      nsectors_(0),
      etaoffset_(etaoffset),
      etawidth_(etawidth),
      nclocks_(nclocks) {
  smallRegionObjects_.resize(nregions);
}

template <typename T>
void l1ct::tdr_regionizer::Regionizer<T>::initSectors(const std::vector<DetectorSector<T>>& sectors) {
  assert(nsectors_ == 0);
  nsectors_ = sectors.size();
  sectors_.resize(nsectors_);
  pipes_.resize(nsectors_);
  for (unsigned int i = 0; i < nsectors_; ++i) {
    sectors_[i] = sectors[i].region;
  }
}

template <typename T>
void l1ct::tdr_regionizer::Regionizer<T>::initSectors(const DetectorSector<T>& sector) {
  assert(nsectors_ == 0);
  nsectors_ = 1;
  sectors_.resize(1, sector.region);
  pipes_.resize(nsectors_);
}

template <typename T>
void l1ct::tdr_regionizer::Regionizer<T>::initRegions(const std::vector<PFInputRegion>& regions) {
  regions_.resize(regions.size());
  regionmap_.clear();
  for (unsigned int i = 0; i < regions.size(); ++i) {
    regions_[i] = regions[i].region;
    if (etaoffset_ - etawidth_ <= regions_[i].intEtaCenter() && regions_[i].intEtaCenter() < etaoffset_ + etawidth_) {
      regionmap_.emplace_back(i, regions_[i].intPhiCenter(), regions_[i].intEtaCenter());
    }
  }
  assert(regionmap_.size() == nregions_);
  std::sort(regionmap_.begin(), regionmap_.end(), sortRegionInfo);
}

template <typename T>
bool l1ct::tdr_regionizer::Regionizer<T>::setIndicesOverlaps(const T& obj,
                                                             unsigned int& phiindex,
                                                             unsigned int& etaindex,
                                                             bool& phioverlap,
                                                             bool& etaoverlap,
                                                             int& glbphi,
                                                             int& glbeta,
                                                             unsigned int index) {
  glbphi = sectors_[index].hwGlbPhiOf(obj).to_int();
  glbeta = sectors_[index].hwGlbEtaOf(obj).to_int();
  phiindex = nregions_;
  etaindex = nregions_;
  phioverlap = false;
  etaoverlap = false;
  bool isset = false;
  for (unsigned int i = 0; i < nregions_; i++) {
    int regphi = dphi_wrap(glbphi - regionmap_[i].phi);
    int regeta = glbeta - regionmap_[i].eta;

    if (regions_[regionmap_[i].index].isInside(regeta, regphi)) {
      if (isset) {
        if (i / neta_ != phiindex)
          phioverlap = true;
        if (i % neta_ != etaindex)
          etaoverlap = true;
      }
      if (i / neta_ < phiindex || (i > (nregions_ - neta_) && phiindex == 0)) {
        phiindex = i / neta_;
      }
      if (i % neta_ < etaindex) {
        etaindex = i % neta_;
        isset = true;  //only need to check eta to set since there is full coverage in each board in phi
      }
    }
  }
  if (isset && etaindex == 1 && etaoverlap) {
    etaoverlap = false;
  }
  return isset;
}

template <typename T>
void l1ct::tdr_regionizer::Regionizer<T>::addToPipe(const T& obj, unsigned int index) {
  assert(index < getSize());
  unsigned int phiindex, etaindex;
  bool phioverlap, etaoverlap;
  int glbphi, glbeta;
  bool isset = setIndicesOverlaps(obj, phiindex, etaindex, phioverlap, etaoverlap, glbphi, glbeta, index);
  if (isset) {
    pipes_[index].addObj(obj, phiindex, etaindex, phioverlap, etaoverlap, glbphi, glbeta);
  }
}

template <typename T>
void l1ct::tdr_regionizer::Regionizer<T>::setPipe(const std::vector<T>& objvec, unsigned int index) {
  assert(index < getSize());
  pipes_[index].reset();
  for (unsigned int i = 0; i < objvec.size(); i++) {
    addToPipe(objvec[i], index);
  }
}

template <typename T>
void l1ct::tdr_regionizer::Regionizer<T>::setPipes(const std::vector<std::vector<T>>& objvecvec) {
  assert(getSize() == objvecvec.size());
  for (unsigned int i = 0; i < getSize(); i++) {
    setPipe(objvecvec[i], i);
  }
}

template <typename T>
int l1ct::tdr_regionizer::Regionizer<T>::getPipeTime(int linkIndex,
                                                     int linkTimeOfObject,
                                                     int linkAlgoClockRunningTime) {
  const int LINK_TO_ALGO_CLK_OFFSET = 2;  //13; // in units of algo clock
  int linkObjectArrival = (nsectors_ - 1 - linkIndex) + LINK_TO_ALGO_CLK_OFFSET + linkTimeOfObject;

  return (linkAlgoClockRunningTime < 0 || linkObjectArrival > linkAlgoClockRunningTime + 4)
             ? linkObjectArrival
             : (linkAlgoClockRunningTime + 4);
}

template <typename T>
int l1ct::tdr_regionizer::Regionizer<T>::popLinkObject(int linkIndex, int currentTimeOfObject) {
  pipes_[linkIndex].incCount();

  //determine which object is next and at what time
  unsigned int countToBeDone = 1;
  if (pipes_[linkIndex].getPhiOverlap() && pipes_[linkIndex].getEtaOverlap())
    countToBeDone = 4;
  else if (pipes_[linkIndex].getPhiOverlap() || pipes_[linkIndex].getEtaOverlap())
    countToBeDone = 2;

  if (countToBeDone == pipes_[linkIndex].getCount()) {
    //pop off leading object, done with it
    pipes_[linkIndex].erase();

    //get time of next object
    if (pipes_[linkIndex].getSize())
      return getPipeTime(linkIndex, pipes_[linkIndex].getClock(), currentTimeOfObject);
    else  //no more objects on link
      return -1;
  } else {
    //increment time for next overlapped object on this link
    return currentTimeOfObject + 1;
  }
}

template <typename T>
void l1ct::tdr_regionizer::Regionizer<T>::initTimes() {
  for (unsigned int l = 0; l < getSize(); ++l) {
    if (getPipeSize(l)) {
      timeOfNextObject_.push_back(timeNextFromIndex(l, -1));
    } else {
      timeOfNextObject_.push_back(-1);
    }
  }
}

template <typename T>
void l1ct::tdr_regionizer::Regionizer<T>::addToSmallRegion(unsigned int linkNum, unsigned int index) {
  T theobj = pipes_[linkNum].getRawObj(index);
  unsigned int regind = getClosedIndexForObject(linkNum);
  theobj.hwPhi = dphi_wrap(pipes_[linkNum].getGlbPhi(index) - regionmap_[regind].phi);
  theobj.hwEta = pipes_[linkNum].getGlbEta(index) - regionmap_[regind].eta;
  smallRegionObjects_[regind].push_back(theobj);
}

template <typename T>
void l1ct::tdr_regionizer::Regionizer<T>::run(bool debug) {
  unsigned int loopCount = 0;
  if (debug)
    printDebug(loopCount);
  while (loopCount < 972) {  //this is the max allowable if nothing ever blocks
    //init min time, pipe, and link index
    //      to find the target pipe currently with action
    int minp = -1;
    int minl = -1;
    int minTime = 0;

    //do pipe-full handling
    for (unsigned int l = 0; l < getSize(); ++l) {
      if (timeOfNextObject_[l] >= 0 && smallRegionObjects_[getClosedIndexForObject(l)].size() == maxobjects_) {
        //pipe is full so proceed to next object
        //'remove' the selected object from its link
        timeOfNextObject_[l] = popLinkObject(l, timeOfNextObject_[l]);
      }  //end pipe-full handling loop
    }

    //do find object handling
    for (unsigned int l = 0; l < getSize(); ++l) {
      if (timeOfNextObject_[l] >= 0 && (minl == -1 || timeOfNextObject_[l] < minTime)) {
        //found new 'selected' link object and pipe
        minp = getPipeIndexForObject(l);
        minTime = timeOfNextObject_[l];
        minl = l;
      } else if (getPipeSize(l) && minl >= 0 && minp == getPipeIndexForObject(l) && timeOfNextObject_[l] == minTime) {
        //have pipe conflict, so need to wait a clock
        ++timeOfNextObject_[l];
      }
    }

    if (minl < 0)
      break;  //exit case

    //'put' object in small region
    addToSmallRegion(minl);

    //'remove' the selected object from its link
    int nextTime = popLinkObject(minl, timeOfNextObject_[minl]);
    if (nextTime > nclocks_)
      break;
    timeOfNextObject_[minl] = nextTime;
    ++loopCount;
  }  //end main loop

  if (debug)
    printDebug(loopCount);
}

template <typename T>
void l1ct::tdr_regionizer::Regionizer<T>::reset() {
  for (unsigned int i = 0; i < getSize(); i++) {
    pipes_[i].reset();
  }
  timeOfNextObject_.clear();
  for (unsigned int i = 0; i < nregions_; i++) {
    smallRegionObjects_[i].clear();
  }
}

template <typename T>
std::vector<T> l1ct::tdr_regionizer::Regionizer<T>::getSmallRegion(unsigned int index) {
  for (unsigned int i = 0; i < nregions_; i++) {
    if (regionmap_[i].index == index)
      return smallRegionObjects_[i];
  }
  return {};
}
