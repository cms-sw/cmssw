#!/usr/bin/env python

import os
import re
import argparse
from HLTrigger.Configuration.extend_argparse import *

import HLTrigger.Configuration.Tools.pipe    as pipe
import HLTrigger.Configuration.Tools.confdb  as confdb
import HLTrigger.Configuration.Tools.options as options


# adapted from HLTrigger/Configuration/python/Tools/confdb.py
def _build_query(menu):
  if menu.run:
    return '--runNumber %s' % menu.run
  else:
    return '--%s --configName %s' % (menu.database, menu.name)

def getPathList(menu, selection):
  cmdline = 'hltConfigFromDB --cff %s --noedsources --noes --noservices --nosequences --nomodules' % _build_query(menu)
  data = pipe.pipe(cmdline)
  if 'Exhausted Resultset' in data or 'CONFIG_NOT_FOUND' in data:
    raise ImportError('%s is not a valid HLT menu' % menu.value)

  if selection == 'paths':
    filter = re.compile(r' *= *cms.Path.*')
  elif selection == 'endpaths':
    filter = re.compile(r' *= *cms.EndPath.*')
  else: # 'all'
    filter = re.compile(r' *= *cms.(End)?Path.*')

  paths  = [ filter.sub('', line) for line in data.splitlines() if filter.search(line) ]
  return paths


# define an argparse parser to parse our options
textwidth = int( 80 )
try:
  textwidth = int( os.popen("stty size", "r").read().split()[1] )
except:
  pass
formatter = FixedWidthFormatter( HelpFormatterRespectNewlines, width = textwidth )

parser = argparse.ArgumentParser(
  description       = 'List all the Paths and EndPaths from an HLT configuration in the ConfDB database.''',
  argument_default  = argparse.SUPPRESS,
  formatter_class   = formatter,
  add_help          = False )

# required argument
parser.add_argument('menu',
                    action  = 'store', 
                    type    = options.ConnectionHLTMenu,
                    metavar = 'MENU', 
                    help    = 'HLT menu to dump from the database. Supported formats are:\n  - /path/to/configuration[/Vn]\n  - [[{v1|v2}/]{offline|online|adg}:]/path/to/configuration[/Vn]\n  - run:runnumber\nThe possible database schemas are "v1" and "v2" (default).\nThe possible databases are "offline" (default, used for offline development), "online" (used to extract online menus within Point 5) and "adg" (used to extract the online menus outside Point 5).\nIf no menu version is specified, the latest one is automatically used.\nIf "run:" is used instead, the HLT menu used for the given run number is looked up and used.' )

# options
group = parser.add_mutually_exclusive_group()
group.add_argument('-p', '--only-paths', 
                    dest    = 'selection',
                    action  = 'store_const',
                    const   = 'paths',
                    help    = 'List only Paths' )
group.add_argument('-e', '--only-endpaths', 
                    dest    = 'selection',
                    action  = 'store_const',
                    const   = 'endpaths',
                    help    = 'List only EndPaths' )
group.add_argument('-a', '--all', 
                    dest    = 'selection',
                    action  = 'store_const',
                    const   = 'all',
                    default = 'all',
                    help    = 'List both Paths and EndPaths (default)' )

# redefine "--help" to be the last option, and use a customized message 
parser.add_argument('-h', '--help', 
                    action  = 'help', 
                    help    = 'Show this help message and exit' )

# parse command line arguments and options
config = parser.parse_args()
paths  = getPathList(config.menu, config.selection)
for path in paths:
  print path

