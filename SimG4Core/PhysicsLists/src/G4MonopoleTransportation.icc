//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
// $Id: G4MonopoleTransportation.icc,v 1.1 2010/06/04 19:03:36 vnivanch Exp $
// GEANT4 tag $Name:  $
//
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

//
//        Inline function implementation.
//
// =======================================================================
// Created:  3 May 2010, J. Apostolakis, B. Bozsogi
// =======================================================================
//

inline void
G4MonopoleTransportation::SetPropagatorInField( G4PropagatorInField* pFieldPropagator)
{
   fFieldPropagator= pFieldPropagator;
}

inline G4PropagatorInField* G4MonopoleTransportation::GetPropagatorInField()
{
   return fFieldPropagator;
}

inline G4bool G4MonopoleTransportation::DoesGlobalFieldExist()
{
  G4TransportationManager* transportMgr;
  transportMgr= G4TransportationManager::GetTransportationManager();

  // fFieldExists= transportMgr->GetFieldManager()->DoesFieldExist();
  // return fFieldExists;
  return transportMgr->GetFieldManager()->DoesFieldExist();
}

inline void G4MonopoleTransportation::SetVerboseLevel( G4int verboseLev )
{
  fVerboseLevel= verboseLev;
}

inline G4int G4MonopoleTransportation::GetVerboseLevel( ) const
{
  return fVerboseLevel;
}

inline G4double G4MonopoleTransportation::GetThresholdWarningEnergy() const
{
  return fThreshold_Warning_Energy;
}
 
inline G4double G4MonopoleTransportation::GetThresholdImportantEnergy() const
{ 
  return fThreshold_Important_Energy;
} 

inline G4int G4MonopoleTransportation::GetThresholdTrials() const
{
  return fThresholdTrials;
}

inline void G4MonopoleTransportation::SetThresholdWarningEnergy( G4double newEnWarn )
{
  fThreshold_Warning_Energy= newEnWarn;
}

inline void G4MonopoleTransportation::SetThresholdImportantEnergy( G4double newEnImp )
{
  fThreshold_Important_Energy = newEnImp; 
}

inline void G4MonopoleTransportation::SetThresholdTrials(G4int newMaxTrials )
{
  fThresholdTrials = newMaxTrials; 
}

     // Get/Set parameters for killing loopers: 
     //   Above 'important' energy a 'looping' particle in field will 
     //   *NOT* be abandoned, except after fThresholdTrials attempts.
     // Below Warning energy, no verbosity for looping particles is issued

inline G4double G4MonopoleTransportation::GetMaxEnergyKilled() const
{
  return fMaxEnergyKilled; 
}

inline G4double G4MonopoleTransportation::GetSumEnergyKilled() const
{
  return fSumEnergyKilled;
}

inline void G4MonopoleTransportation::ResetKilledStatistics(G4int report)
{
  if( report ) { 
    G4cout << " G4MonopoleTransportation: Statistics for looping particles " << G4endl;
    G4cout << "   Sum of energy of loopers killed: " <<  fSumEnergyKilled << G4endl;
    G4cout << "   Max energy of loopers killed: " <<  fMaxEnergyKilled << G4endl;
  } 

  fSumEnergyKilled= 0;
  fMaxEnergyKilled= -1.0*GeV;
}
     // Statistics for tracks killed (currently due to looping in field)

inline void G4MonopoleTransportation::EnableShortStepOptimisation(G4bool optimiseShortStep)
{ 
  fShortStepOptimisation=optimiseShortStep;
}
