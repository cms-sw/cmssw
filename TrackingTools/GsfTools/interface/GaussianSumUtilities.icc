#include "TrackingTools/GsfTools/interface/GaussianSumUtilities.h"

#include "TrackingTools/GsfTools/interface/SingleGaussianState1D.h"
#include "TrackingTools/GsfTools/interface/MultiGaussianState1D.h"
#include "TrackingTools/GsfTools/interface/GaussianSumUtilities1D.h"
#include "FWCore/MessageLogger/interface/MessageLogger.h"

// #include "Utilities/Timing/interface/TimingReport.h"
// #include "Utilities/Timing/interface/TimerStack.h"

#include "TROOT.h"
#include "TMath.h"
#include "TVectorD.h"
#include "TMatrixDSym.h"
#include "TMatrixDSymEigen.h"

#include <iostream>
#include <cmath>

#include <map>
#include <functional>


template <unsigned int N>
bool
GaussianSumUtilities<N>::modeIsValid () const
{
  if ( theModeStatus==NotComputed )  computeMode();
  return theModeStatus==Valid;
}

template <unsigned int N>
const SingleGaussianState<N>&
GaussianSumUtilities<N>::mode () const
{
  if ( theModeStatus==NotComputed )  computeMode();
  return theMode;
}

template <unsigned int N>
void
GaussianSumUtilities<N>::computeMode () const
{
//   TimerStack tstack;
//   tstack.benchmark("GSUND::benchmark",1000000);
//   FastTimerStackPush(tstack,"GaussianSumUtilities::computeMode");
  //
  // initialize status
  //
  theModeStatus = NotValid;
  //
  // diagonalize / normalize (better convergence)
  // based on component with highest pdf at mean
  //
  unsigned int icMax(0);
  double yMax(-1.);
  for ( unsigned int ic=0; ic<size(); ++ic ) {
    double w = weight(ic);
    double det;
    covariance(ic).Det2(det);
    double y = w*w/det;
    if ( y>yMax ) {
      icMax = ic;
      yMax = y;
    }
  }
  // need to copy the matrix since diagonalization is not
  // available for SMatrix but there must be a better way 
  // to copy the matrix ...
  TMatrixDSym diag(N);
  for ( unsigned int i=0; i<N; ++i ) {
    for ( unsigned int j=0; j<N; ++j ) {
      diag(i,j) = covariance(icMax)(i,j);
    }
  }
  TMatrixDSymEigen eigen(diag);
  TVectorD eigenValues = eigen.GetEigenValues();
  TMatrixD eigenVectors = eigen.GetEigenVectors();
//   diag.SimilarityT(eigenVectors);
  //
  // rotation matrices (to / from transformed system)
  //
  GenMatrix rotT;
  GenMatrix rot;
  for ( unsigned int i=0; i<N; ++i ) {
    for ( unsigned int j=0; j<N; ++j ) {
      rotT(i,j) = rot(j,i) = eigenVectors(j,i);
    }
  }
  //
  // scaling (to / from transformed system)
  //
  Matrix scaleT;
  Matrix scale;
  for ( unsigned int i=0; i<N; ++i ) {
    scale(i,i) = sqrt(eigenValues(i));
    scaleT(i,i) = 1./scale(i,i);
  }
  rotT = scaleT*rotT;
  rot = rot*scale;
  //
  // shift
  //
  Vector trans(mean(icMax));
  //
  // calculate transformed state
  //
  SingleStateContainer newStates;
  newStates.reserve(size());
  for ( auto i=components().begin();
 	i!=components().end(); i++ ) {
    Vector newMean = rotT*((**i).mean()-trans);
    Matrix newCov = ROOT::Math::Similarity(rotT,(**i).covariance());
    auto sgs = make_shared<SingleState>(newMean,newCov,(**i).weight());
    newStates.push_back(sgs);
  }
  MultiState newState(newStates);
  GaussianSumUtilities<N> newGSU(newState);
  //
  // get mode in transformed system
  //
  Vector newMode = newGSU.computeModeWithoutTransform();
  //
  // transform back
  //
  if ( newGSU.modeIsValid() ) {
//     Vector mode((ROOT::Math::Transpose(rotT)*newMode)+trans);
    Vector mode(rot*newMode+trans);
    setMode(mode);
  }
  else {
    edm::LogWarning("GaussianSumUtilities") << "multi-dimensional mode calculation failed";
    setInvalidMode();
  }
    
}

template <unsigned int N>
typename GaussianSumUtilities<N>::Vector
GaussianSumUtilities<N>::computeModeWithoutTransform () const
{
  //
  // initialize status
  //
  theModeStatus = NotValid;
  //
  // Use means of individual components as start values.
  // Sort by value of pdf.
  //
  typedef std::multimap<double, int, std::greater<double> > StartMap;
  StartMap xStart;
  for ( UInt_t i=0; i<size(); i++ ) {
    xStart.insert(std::make_pair(pdf(mean(i)),i));
  }
  //
  // Now try with each start value
  //
  std::pair<double,Vector> result(-1.,mean((*xStart.begin()).second));
  Vector xRes;
  double yRes(0.);
  for ( StartMap::const_iterator i=xStart.begin();
	i!=xStart.end(); i++ ) {
    //
    // If a solution exists: drop as soon as the pdf at
    // start value drops to < 75% of maximum (try to avoid
    // unnecessary searches for the mode)
    //
    if ( theModeStatus==Valid &&
 	 (*i).first/(*xStart.begin()).first<0.75 )  break;
    //
    // try to find mode from this start value
    //
    bool valid = findMode(xRes,yRes,mean((*i).second));

    //
    // store result if findMode was successful and if
    // the new value is significantly higher
    //
    if ( valid && (result.first<0. || 
		   (yRes-result.first)/(yRes+result.first)>1.e-5) ) {
      theModeStatus = Valid;
      result = std::make_pair(yRes,xRes);
    }
  }
  //
  // check (existance of) solution
  //
  if ( theModeStatus==Valid ) {
    setMode(result.second);
  }
  else
    setInvalidMode();


  return theMode.mean();
}

template <unsigned int N>
bool
GaussianSumUtilities<N>::findMode (Vector& xMode, double& yMode,
				   const Vector& xStart) const
{
  static const int signHesse = (N%2) ? -1 : 1;
  //
  // use Newton or follow gradient
  //
  bool result(false);
  Vector x1;
  double y1(0.);
  Vector x2(xStart);
  std::vector<double> pdfs;
  pdfs.reserve(size());
  double y2(0.);
  Vector yd2;
  Vector ydh2;
  double detHesse2(0.);
  bool usedHesse(false);
  //
  // iterate until convergence
  //
  int nLoop(0);
  while ( nLoop++<50 ) {
    pdfs = pdfComponents(x2);
    y2 = pdf(x2,pdfs);
    ydh2 = yd2 = d1LnPdf(x2,pdfs);
    // cuts tuned on N=5, might need revision for other dimension
    // even if distribution is approx. normalized
    if ( nLoop>1 && usedHesse && detHesse2>0. &&
	 fabs(y2-y1)/(y2+y1)<1.e-10 || ROOT::Math::Mag2(yd2)<1.e-20 ) {
      result = true;
      break;
    }
    //
    // Hessian (Sign(Det(hesse)) should be (-1)**N around maximum)
    //
//     Matrix hesse2 = d2LnPdf(x2,pdfs);
//     usedHesse = false;
//     hesse2.Det2(detHesse2);
//     detHesse2 *= signHesse;
//     int ifail;
// //     GenMatrix invHesse2(hesse2.inverse(ifail));
//     Matrix invHesse2 = hesse2.Inverse(ifail);
    Matrix hesse2(d2LnPdf(x2,pdfs));
    usedHesse = false;
    hesse2.Det2(detHesse2);
    detHesse2 *= signHesse;
    bool success = hesse2.Invert();
    if ( success ) {
      ydh2 = -hesse2*yd2;
      usedHesse = true;
    }
    double s = ROOT::Math::Mag(ydh2);
    if ( fabs(s)>FLT_MIN )  ydh2 *= 1./s;
    //
    // restrict to direction of gradient
    //
    if ( !usedHesse || detHesse2<0. ) {
      MultiGaussianState1D oneDimState(constrainedState(ydh2,x2));
      GaussianSumUtilities1D gsUtils(oneDimState);
      if ( !usedHesse || gsUtils.d2Pdf(0.)>=0. ) {
	s = gsUtils.mode().mean();
	if ( !gsUtils.modeIsValid() )  s = 0.1;
      }
    }
    //
    // protect against too large steps (to be revised??)
    //
    if ( s<-3. )  s = -3.;
    else if ( s>3. )  s = 3.;
    //
    // save old values
    //
    x1 = x2;
    y1 = y2;
    //
    // set new values
    //
    x2 += s*ydh2;
  }
  xMode = x2;
  yMode = y2;
  return result;
}

template <unsigned int N>
MultiGaussianState1D
GaussianSumUtilities<N>::constrainedState (const Vector& d,
					   const Vector& x0) const
{
  static const double fNorm(1./pow(2*TMath::Pi(),N-1));
  std::vector<SingleGaussianState1D> states;
  states.reserve(size());
  for ( typename SingleStateContainer::const_iterator i=components().begin();
	i!=components().end(); i++ ) {
    double det;
    (**i).weightMatrix().Det2(det);
    if ( det<0 )  continue;

    Vector dx((**i).mean()-x0);
//     double dGd = (**i).weightMatrix().similarity(d);
    double dGd = ROOT::Math::Similarity(d,(**i).weightMatrix());
    if ( dGd<-FLT_MIN ) continue;
    Vector gDx = (**i).weightMatrix()*dx;
//     double dxGdx = dot(dx,gDx);
//     double dGdx = dot(d,gDx);
    double dxGdx = ROOT::Math::Dot(dx,gDx);
    double dGdx = ROOT::Math::Dot(d,gDx);
    double weight((**i).weight());
//     weight *= sqrt(determinant((**i).weightMatrix())*
// 		   pow(fNorm,N-1)/dGd);
//     weight *= sqrt(det*pow(fNorm,N-1)/dGd);
    weight *= sqrt(det*fNorm/dGd);
    double exponent = dxGdx - dGdx*dGdx/dGd;
    if ( exponent>-400. )  weight *= exp(-0.5*exponent);
    else  weight = 0.;
    states.push_back(SingleGaussianState1D(dGdx/dGd,1./dGd,weight));
  }
  return MultiGaussianState1D(states);
}

template <unsigned int N>
double
GaussianSumUtilities<N>::pdf(const Vector& x) const
{
return pdf(x,pdfComponents(x));
}

template <unsigned int N>
typename GaussianSumUtilities<N>::Vector
GaussianSumUtilities<N>::d1Pdf(const Vector& x) const
{
return d1Pdf(x,pdfComponents(x));
}

template <unsigned int N>
typename GaussianSumUtilities<N>::Matrix
GaussianSumUtilities<N>::d2Pdf(const Vector& x) const
{
return d2Pdf(x,pdfComponents(x));
}

template <unsigned int N>
double
GaussianSumUtilities<N>::lnPdf(const Vector& x) const
{
return lnPdf(x,pdfComponents(x));
}

template <unsigned int N>
typename GaussianSumUtilities<N>::Vector
GaussianSumUtilities<N>::d1LnPdf(const Vector& x) const
{
return d1LnPdf(x,pdfComponents(x));
}

template <unsigned int N>
typename GaussianSumUtilities<N>::Matrix
GaussianSumUtilities<N>::d2LnPdf (const Vector& x) const
{
return d2LnPdf(x,pdfComponents(x));
}

template <unsigned int N>
std::vector<double>
GaussianSumUtilities<N>::pdfComponents (const Vector& x) const
{
  std::vector<double> result;
  result.reserve(size());
  for ( typename SingleStateContainer::const_iterator i=components().begin();
	i!=components().end(); i++ ) {
    result.push_back((**i).weight()*gauss(x,(**i).mean(),(**i).weightMatrix()));
  }
  return result;
}

template <unsigned int N>
double
GaussianSumUtilities<N>::pdf (const Vector& x, const std::vector<double>& pdfs) const
{
  double result(0.);
  for ( std::vector<double>::const_iterator i=pdfs.begin();
	i!=pdfs.end(); ++i )  result += *i;
  return result;
}

template <unsigned int N>
typename GaussianSumUtilities<N>::Vector
GaussianSumUtilities<N>::d1Pdf (const Vector& x, const std::vector<double>& pdfs) const
{
  Vector result; // rely on root doc that vector is initialised to 0
  typename SingleStateContainer::const_iterator ic = components().begin();
  std::vector<double>::const_iterator ip = pdfs.begin();
  for ( ; ic!=components().end(); ++ic,++ip ) {
    Vector gx((**ic).weightMatrix()*(x-(**ic).mean()));
    gx *= -(*ip);
    result += gx;
  }
  return result;
}

template <unsigned int N>
typename GaussianSumUtilities<N>::Matrix
GaussianSumUtilities<N>::d2Pdf (const Vector& x, const std::vector<double>& pdfs) const
{
  Matrix result; // (N,0);
  typename SingleStateContainer::const_iterator ic = components().begin();
  std::vector<double>::const_iterator ip = pdfs.begin();
  for ( ; ic!=components().end(); ++ic,++ip ) {
    Vector gx((**ic).weightMatrix()*(x-(**ic).mean()));
//     Matrix c(vT_times_v(gx));
    Matrix c(tensorProduct(gx));
    c -= (**ic).weightMatrix();
    c *= (*ip);
    result += c;
  }
  return result;
}

template <unsigned int N>
double
GaussianSumUtilities<N>::lnPdf (const Vector& x, const std::vector<double>& pdfs) const
{
  double result = pdf(x,pdfs);
  if ( result>DBL_MIN )  result = log(result);
  else  result = -FLT_MAX;
  return result;
}

template <unsigned int N>
typename GaussianSumUtilities<N>::Vector
GaussianSumUtilities<N>::d1LnPdf (const Vector& x, const std::vector<double>& pdfs) const
{
  double f = pdf(x,pdfs);
  Vector result(d1Pdf(x,pdfs));
  if ( f>DBL_MIN )  result /= f;
  else  result *= 0.;
  return result;
}

template <unsigned int N>
typename GaussianSumUtilities<N>::Matrix
GaussianSumUtilities<N>::d2LnPdf (const Vector& x, const std::vector<double>& pdfs) const
{
  double f(pdf(x,pdfs));
  Vector df(d1LnPdf(x,pdfs));
//   Matrix result(-vT_times_v(df));
  Matrix result(-tensorProduct(df));
  if ( f>DBL_MIN )  result += d2Pdf(x,pdfs)/f;
  return result;
}

template <unsigned int N>
double 
GaussianSumUtilities<N>::gauss (const double& x, const double& mean,
				const double& sigma) const 
{
  const double fNorm(1./sqrt(2*TMath::Pi()));
  double result(0.);

  double d((x-mean)/sigma);
  if ( fabs(d)<20. )  result = exp(-d*d/2.);
  result *= fNorm/sigma;
  return result;
}

template <unsigned int N>
double 
GaussianSumUtilities<N>::gauss (const Vector& x, 
				const Vector& means,
				const Matrix& weightMatrix) const 
{
  static const double fNorm(1./pow(2*TMath::Pi(),N));
  double result(0.);

  double det;
  weightMatrix.Det2(det);
  if ( det<0. )  return 0.;

  Vector dx(x-means);
//   double d = weightMatrix.similarity(dx);
  double d = ROOT::Math::Similarity(dx,weightMatrix);
  // protection against numerical problems
  if ( d<-FLT_MIN )  return 0.;
  if ( d<400. )  result = exp(-d/2.);
//   result *= sqrt(pow(fNorm,N)*determinant(weightMatrix));
//   result *= sqrt(pow(fNorm,N)*det);
  result *= sqrt(fNorm*det);
  return result;
}

template <unsigned int N>
typename GaussianSumUtilities<N>::Matrix
GaussianSumUtilities<N>::localCovariance (const Vector& x) const
{
  Matrix result(d2Pdf(x));
  result *= -1./pdf(x);

  double det;
  result.Det2(det);
//   int ifail;
// //   Matrix covariance(weightMatrix.inverse(ifail));
//   Matrix covariance = weightMatrix.Inverse(ifail);
//   if ( ifail!=0 || det<=DBL_MIN ) {
  bool success = result.Invert();
  if ( !success || det<=DBL_MIN ) {
    edm::LogWarning("GaussianSumUtilities")
      << "localCovariance: weight matrix is not pos. def.";
  }
//   return covariance;
  return result;
}

template <unsigned int N>
void
GaussianSumUtilities<N>::setMode (const Vector& mode) const
{
  //
  // Valid mode: construct single Gaussian state with 
  //  mean = mode
  //  covariance = local covariance at mode
  //  weight such that the pdf's of the mixture and the
  //    single state are equal at the mode
  //
  theModeStatus = Valid;
  Matrix covMode(localCovariance(mode));
  static const double fNorm(pow(2*TMath::Pi(),N));
  double det;
  covMode.Det2(det);
  double wgtMode = pdf(mode)*sqrt(fNorm*det);
  theMode = SingleGaussianState<N>(mode,covMode,wgtMode);
}

template <unsigned int N>
void
GaussianSumUtilities<N>::setInvalidMode () const
{
  //
  // Mode finding failed: set solution to highest component
  //  (alternative would be global mean / covariance ..?)
  //
//     theMode = SingleGaussianState<N>(mean(),covariance(),weight());
  //
  // look for component with highest value at mean
  //
  unsigned int icMax(0);
  double ySqMax(0.);
  for ( unsigned int ic=0; ic<size(); ++ic ) {
    double w = weight(ic);
    double det;
    covariance(ic).Det2(det);
    double ySq = w*w/det;
    if ( ic==0 || ySqMax ) {
      icMax = ic;
      ySqMax = ySq;
    }
  }
  theMode = SingleGaussianState<N>(*components()[icMax]);
}

template <unsigned int N>
typename GaussianSumUtilities<N>::Matrix
GaussianSumUtilities<N>::tensorProduct (const Vector& v) const
{
  Matrix result;
  for ( unsigned int i=0; i<N; ++i ) {
    for ( unsigned int j=0; j<N; ++j ) {
      result(i,j) = v(i)*v(j);
    }
  }
  return result;
}


