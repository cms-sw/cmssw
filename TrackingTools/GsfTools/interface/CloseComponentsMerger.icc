#include "TrackingTools/GsfTools/interface/MultiGaussianStateCombiner.h"
#include "TrackingTools/GsfTools/interface/MultiGaussianStateAssembler.h"
#include "FWCore/MessageLogger/interface/MessageLogger.h"

#include <algorithm>
#include <cfloat>
#include "CommonTools/Utils/interface/DynArray.h"



template <unsigned int N>
CloseComponentsMerger<N>::CloseComponentsMerger (int maxNumberOfComponents,
						 const DistanceBetweenComponents<N>* distance) :
  theMaxNumberOfComponents(maxNumberOfComponents),
  theDistance(distance->clone()) {}

template <unsigned int N> MultiGaussianState<N>
CloseComponentsMerger<N>::merge (const MultiState& mgs) const
{
  typedef std::vector<SingleStatePtr>  SingleStateVector;
  SingleStateVector unmergedComponents(mgs.components());
  SingleStateVector finalComponents;
  int nComp = unmergedComponents.size();
    
  if (unmergedComponents.empty()) {
    edm::LogError("CloseComponentsMerger") 
      << "Trying to merge trajectory state with zero components!";
    return mgs; // ThS: TSOS();
  }

// ThS: Don't you want to throw an exception at construction of the class?
  if (theMaxNumberOfComponents <= 0) {
    edm::LogError("CloseComponentsMerger") 
      << "Trying to merge state into zero (or less!) components, returning invalid state!";
    return mgs; // ThS: TSOS();
  }
    
// ThS: Of course, here the TSOS will not be invalid. But it will have 0 components
  if (mgs.weight() == 0) {
    edm::LogError("CloseComponentsMerger") 
      << "Trying to merge mixture with sum of weights equal to zero!";
//     return mgs.createNewState(finalComponents);
    return MultiState();
  }
    
  if (nComp < theMaxNumberOfComponents + 1) return mgs;
// ThS: Why not the initial object, as above?
//      return TSOS(new BasicMultiTrajectoryState(unmergedComponents));
    
  SingleStateMap mapUnmergedComp;
  SingleStateMap mapMergedComp;

  for ( typename SingleStateVector::const_iterator it = unmergedComponents.begin();
       it != unmergedComponents.end(); it++) {
    mapUnmergedComp.insert(std::make_pair((**it).weight(), *it));
  }

  while (nComp > theMaxNumberOfComponents) {
    mapMergedComp.clear();
    while (nComp > theMaxNumberOfComponents && !mapUnmergedComp.empty()) {
      if (mapUnmergedComp.size() > 1) {
	MinDistResult pairMinDist = 
	  compWithMinDistToLargestWeight(mapUnmergedComp);
	SingleStateVector comp;
	comp.push_back(mapUnmergedComp.begin()->second);
	comp.push_back(pairMinDist.first);
	mapUnmergedComp.erase(pairMinDist.second);
	mapUnmergedComp.erase(mapUnmergedComp.begin());
 	SingleStatePtr mergedComp = MultiGaussianStateCombiner<N>().combine(comp);
	mapMergedComp.insert(std::make_pair(mergedComp->weight(), mergedComp));
	nComp--;
      }
      else {
	mapMergedComp.insert(std::make_pair(mapUnmergedComp.begin()->first, 
					    mapUnmergedComp.begin()->second));
	mapUnmergedComp.erase(mapUnmergedComp.begin());
      }
    }
    if (mapUnmergedComp.empty() && nComp > theMaxNumberOfComponents) {
      mapUnmergedComp = mapMergedComp;
    }
  }

  MultiGaussianStateAssembler<N> result(mgs);

  for ( typename SingleStateMap::const_iterator it = mapUnmergedComp.begin();
       it != mapUnmergedComp.end(); it++) {
    result.addState(it->second);
  }

  for ( typename SingleStateMap::const_iterator it = mapMergedComp.begin();
       it != mapMergedComp.end(); it++) {
    result.addState(it->second);
  }

  return result.combinedState();
}

template <unsigned int N>
typename CloseComponentsMerger<N>::MinDistResult
CloseComponentsMerger<N>::compWithMinDistToLargestWeight(SingleStateMap& unmergedComp) const {
// template <unsigned int N>
// std::pair<SingleGaussianState<N>, 
// 	  typename std::multimap<double, std::shared_ptr< MultiGaussianState<N> > >::iterator>
// CloseComponentsMerger<N>::compWithMinDistToLargestWeight(SingleStateMap& unmergedComp) const {
  double large = DBL_MAX;
  double minDist = large;
  typename SingleStateMap::iterator iterMinDist(0);
  for (typename SingleStateMap::iterator it = unmergedComp.begin();
       it != unmergedComp.end(); it++) {
    if (it != unmergedComp.begin()) {
      double dist = (*theDistance)(*unmergedComp.begin()->second, *it->second);
      if (dist < minDist) {
	iterMinDist = it;
	minDist = dist;
      }
    }
  }
//   SingleStatePtr minDistComp(iterMinDist->second);
//   return std::make_pair(minDistComp, iterMinDist);
  return std::make_pair(iterMinDist->second, iterMinDist);
}

