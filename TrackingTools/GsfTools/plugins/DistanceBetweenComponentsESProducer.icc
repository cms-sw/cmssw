#include "TrackingTools/GsfTools/plugins/DistanceBetweenComponentsESProducer.h"

#include "TrackingTools/GsfTools/interface/KullbackLeiblerDistance.h"
// #include "TrackingTools/GsfTools/interface/MahalanobisDistance.h"

#include "FWCore/Framework/interface/EventSetup.h"
#include "FWCore/Framework/interface/ESHandle.h"
#include "FWCore/Framework/interface/ModuleFactory.h"
#include "FWCore/Framework/interface/ESProducer.h"

#include <string>
#include <memory>

template <unsigned int N>
DistanceBetweenComponentsESProducer<N>::DistanceBetweenComponentsESProducer(const edm::ParameterSet& p) {
  std::string myname = p.getParameter<std::string>("ComponentName");
  pset_ = p;
  setWhatProduced(this, myname);
}

template <unsigned int N>
DistanceBetweenComponentsESProducer<N>::~DistanceBetweenComponentsESProducer() {}

template <unsigned int N>
typename std::unique_ptr<DistanceBetweenComponents<N> > DistanceBetweenComponentsESProducer<N>::produce(
    const TrackingComponentsRecord& iRecord) {
  std::string distName = pset_.getParameter<std::string>("DistanceMeasure");

  std::unique_ptr<DistanceBetweenComponents<N> > distance;
  if (distName == "KullbackLeibler")
    distance = std::unique_ptr<DistanceBetweenComponents<N> >(new KullbackLeiblerDistance<N>());
  // //   else if ( distName == "Mahalanobis" )
  // //     distance = std::unique_ptr<DistanceBetweenComponents>(new MahalanobisDistance());

  return distance;
}
