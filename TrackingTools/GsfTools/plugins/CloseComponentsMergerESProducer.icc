#include "TrackingTools/GsfTools/interface/CloseComponentsMerger.h"
#include "TrackingTools/GsfTools/interface/DistanceBetweenComponents.h"

#include "FWCore/Framework/interface/EventSetup.h"
#include "FWCore/Framework/interface/ESHandle.h"
#include "FWCore/Framework/interface/ModuleFactory.h"
#include "FWCore/Framework/interface/ESProducer.h"

#include <string>
#include <memory>

#include <iostream>

// #include "TrackingTools/GsfTools/interface/MultiGaussianState.h"
// #include "TrackingTools/GsfTools/interface/SingleGaussianState.h"
// #include "TrackingTools/GsfTools/interface/SingleGaussianState.h"

template <unsigned int N>
CloseComponentsMergerESProducer<N>::CloseComponentsMergerESProducer(const edm::ParameterSet& p) {
  std::string myname = p.getParameter<std::string>("ComponentName");
  pset_ = p;
  //   std::cout << "CloseComponentsMergerESProducer (" << N << ") "
  // 	    << myname << std::endl;
  setWhatProduced(this, myname);
}

template <unsigned int N>
CloseComponentsMergerESProducer<N>::~CloseComponentsMergerESProducer() {
  //   std::cout << "MultiGaussianState: "
  // 	    << MultiGaussianState<5>::instances_ << " "
  // 	    << MultiGaussianState<5>::maxInstances_ << " "
  // 	    << MultiGaussianState<5>::constructsCombinedState_ << std::endl;
  //   std::cout << "SingleGaussianState: "
  // 	    << SingleGaussianState<5>::instances_ << " "
  // 	    << SingleGaussianState<5>::maxInstances_ << " "
  // 	    << SingleGaussianState<5>::constructsWeightMatrix_ << std::endl;
  //   std::cout << "SingleGaussianState: "
  // 	    << SingleGaussianState<5>::instances_ << " "
  // 	    << SingleGaussianState<5>::maxInstances_ << " "
  // 	    << SingleGaussianState<5>::constructsWeightMatrix_ << std::endl;
  //   std::cout << "CloseComponentsMergerESProducer deleted" << std::endl;
}

template <unsigned int N>
typename std::unique_ptr<MultiGaussianStateMerger<N> > CloseComponentsMergerESProducer<N>::produce(
    const TrackingComponentsRecord& iRecord) {
  int maxComp = pset_.getParameter<int>("MaxComponents");
  std::string distName = pset_.getParameter<std::string>("DistanceMeasure");

  edm::ESHandle<DistanceBetweenComponents<N> > distProducer;
  iRecord.get(distName, distProducer);

  return std::unique_ptr<MultiGaussianStateMerger<N> >(new CloseComponentsMerger<N>(maxComp, distProducer.product()));
}
