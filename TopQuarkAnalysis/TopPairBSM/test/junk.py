import FWCore.ParameterSet.Config as cms

process = cms.Process("PAT")

process.source = cms.Source("PoolSource",
    fileNames = cms.untracked.vstring('/store/mc/Summer12_DR53X/BprimeBprimeToBHBHinc_M-1000_TuneZ2star_8TeV-madgraph/AODSIM/PU_S10_START53_V7C-v1/10000/024BEF94-E93D-E211-BB47-0030487F16F7.root'),
    inputCommands = cms.untracked.vstring('keep *', 
        'drop *_MEtoEDMConverter_*_*')
)
process.CATopTagInfosGen = cms.EDProducer("CATopJetTagger",
    src = cms.InputTag("caTopTagGen"),
    verbose = cms.bool(False),
    TopMassMin = cms.double(0.0),
    WMassMax = cms.double(200.0),
    WMassMin = cms.double(0.0),
    MinMassMin = cms.double(0.0),
    TopMass = cms.double(171),
    MinMassMax = cms.double(200.0),
    WMass = cms.double(80.4),
    TopMassMax = cms.double(250.0)
)


process.CATopTagInfosHEPTopTagPFlow = cms.EDProducer("CATopJetTagger",
    src = cms.InputTag("caHEPTopTagPFlow"),
    verbose = cms.bool(False),
    TopMassMin = cms.double(0.0),
    WMassMax = cms.double(200.0),
    WMassMin = cms.double(0.0),
    MinMassMin = cms.double(0.0),
    TopMass = cms.double(171),
    MinMassMax = cms.double(200.0),
    WMass = cms.double(80.4),
    TopMassMax = cms.double(250.0)
)


process.CATopTagInfosPFlow = cms.EDProducer("CATopJetTagger",
    src = cms.InputTag("caTopTagPFlow"),
    verbose = cms.bool(False),
    TopMassMin = cms.double(0.0),
    WMassMax = cms.double(200.0),
    WMassMin = cms.double(0.0),
    MinMassMin = cms.double(0.0),
    TopMass = cms.double(171),
    MinMassMax = cms.double(200.0),
    WMass = cms.double(80.4),
    TopMassMax = cms.double(250.0)
)


process.PFCandAssoMap = cms.EDProducer("PFCand_AssoMap",
    ConversionsCollection = cms.InputTag("allConversions"),
    nTrackWeight = cms.double(0.001),
    BeamSpot = cms.InputTag("offlineBeamSpot"),
    GetCleanedCollections = cms.bool(False),
    V0KshortCollection = cms.InputTag("generalV0Candidates","Kshort"),
    V0LambdaCollection = cms.InputTag("generalV0Candidates","Lambda"),
    MaxNumberOfAssociations = cms.int32(1),
    FinalAssociation = cms.untracked.int32(1),
    VertexCollection = cms.InputTag("offlinePrimaryVertices"),
    NIVertexCollection = cms.InputTag("particleFlowDisplacedVertex"),
    AssociationType = cms.InputTag("Both"),
    PFCandidateCollection = cms.InputTag("particleFlow"),
    ignoreMissingCollection = cms.bool(True),
    doReassociation = cms.bool(True)
)


process.TauDecayModeCutMutliplexerPrototype = cms.EDProducer("RecoTauDecayModeCutMultiplexer",
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("shrinkingConePFTauDiscriminationByLeadingTrackFinding")
        )
    ),
    decayModes = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        nCharged = cms.uint32(1)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(2),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            nCharged = cms.uint32(3)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            nCharged = cms.uint32(3)
        )),
    toMultiplex = cms.InputTag("shrinkingConePFTauDiscriminationByTaNC"),
    PFTauProducer = cms.InputTag("shrinkingConePFTauProducer")
)


process.Tracks2Vertex = cms.EDProducer("PF_PU_AssoMap",
    ConversionsCollection = cms.InputTag("allConversions"),
    nTrackWeight = cms.double(0.001),
    BeamSpot = cms.InputTag("offlineBeamSpot"),
    GetCleanedCollections = cms.bool(False),
    V0KshortCollection = cms.InputTag("generalV0Candidates","Kshort"),
    V0LambdaCollection = cms.InputTag("generalV0Candidates","Lambda"),
    VertexCollection = cms.InputTag("offlinePrimaryVertices"),
    ignoreMissingCollection = cms.bool(True),
    TrackCollection = cms.InputTag("generalTracks"),
    NIVertexCollection = cms.InputTag("particleFlowDisplacedVertex"),
    AssociationType = cms.InputTag("TracksToVertex"),
    FinalAssociation = cms.untracked.int32(1),
    doReassociation = cms.bool(True),
    MaxNumberOfAssociations = cms.int32(1)
)


process.ak2HiGenJets = cms.EDProducer("SubEventGenJetProducer",
    Active_Area_Repeats = cms.int32(5),
    doAreaFastjet = cms.bool(True),
    Ghost_EtaMax = cms.double(6.0),
    maxBadHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('GenJet'),
    minSeed = cms.uint32(14327),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('AntiKt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.5),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.2),
    maxProblematicHcalCells = cms.uint32(9999999),
    src = cms.InputTag("hiGenParticlesForJets"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.ak3HiGenJets = cms.EDProducer("SubEventGenJetProducer",
    Active_Area_Repeats = cms.int32(5),
    doAreaFastjet = cms.bool(True),
    Ghost_EtaMax = cms.double(6.0),
    maxBadHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('GenJet'),
    minSeed = cms.uint32(14327),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('AntiKt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.5),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.3),
    maxProblematicHcalCells = cms.uint32(9999999),
    src = cms.InputTag("hiGenParticlesForJets"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.ak4HiGenJets = cms.EDProducer("SubEventGenJetProducer",
    Active_Area_Repeats = cms.int32(5),
    doAreaFastjet = cms.bool(True),
    Ghost_EtaMax = cms.double(6.0),
    maxBadHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('GenJet'),
    minSeed = cms.uint32(14327),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('AntiKt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.5),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.4),
    maxProblematicHcalCells = cms.uint32(9999999),
    src = cms.InputTag("hiGenParticlesForJets"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.ak5FilteredPFlow = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(True),
    Ghost_EtaMax = cms.double(5.0),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    useExplicitGhosts = cms.bool(True),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('PFJet'),
    minSeed = cms.uint32(14327),
    voronoiRfact = cms.double(-0.9),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('AntiKt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    jetCollInstanceName = cms.string('SubJets'),
    useFiltering = cms.bool(True),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    rFilt = cms.double(0.3),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.5),
    nFilt = cms.int32(3),
    maxProblematicHcalCells = cms.uint32(9999999),
    writeCompound = cms.bool(True),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("pfNoElectronPFlow"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.ak5GenJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(5),
    src = cms.InputTag("genParticlesForJets"),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(6.0),
    doRhoFastjet = cms.bool(False),
    srcPVs = cms.InputTag(""),
    inputEtMin = cms.double(0.0),
    doAreaFastjet = cms.bool(False),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.5),
    jetPtMin = cms.double(3.0),
    inputEMin = cms.double(0.0),
    jetType = cms.string('GenJet'),
    doPUOffsetCorr = cms.bool(False),
    radiusPU = cms.double(0.5),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    jetAlgorithm = cms.string('AntiKt'),
    rParam = cms.double(0.5)
)


process.ak5GenJetsNoMuNoNu = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(5),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(6.0),
    maxBadHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('GenJet'),
    minSeed = cms.uint32(14327),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('AntiKt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.5),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.5),
    maxProblematicHcalCells = cms.uint32(9999999),
    src = cms.InputTag("genParticlesForJetsNoMuNoNu"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.ak5GenJetsNoNu = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(5),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(6.0),
    maxBadHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('GenJet'),
    minSeed = cms.uint32(14327),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('AntiKt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.5),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.5),
    maxProblematicHcalCells = cms.uint32(9999999),
    src = cms.InputTag("genParticlesForJetsNoNu"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag("goodOfflinePrimaryVertices"),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.ak5HiGenJets = cms.EDProducer("SubEventGenJetProducer",
    Active_Area_Repeats = cms.int32(5),
    src = cms.InputTag("hiGenParticlesForJets"),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(6.0),
    doRhoFastjet = cms.bool(False),
    srcPVs = cms.InputTag(""),
    inputEtMin = cms.double(0.0),
    doAreaFastjet = cms.bool(True),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.5),
    jetPtMin = cms.double(3.0),
    inputEMin = cms.double(0.0),
    jetType = cms.string('GenJet'),
    doPUOffsetCorr = cms.bool(False),
    radiusPU = cms.double(0.5),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    jetAlgorithm = cms.string('AntiKt'),
    rParam = cms.double(0.5)
)


process.ak5PFJetTracksAssociatorAtVertex = cms.EDProducer("JetTracksAssociatorAtVertex",
    jets = cms.InputTag("ak5PFJets"),
    tracks = cms.InputTag("generalTracks"),
    useAssigned = cms.bool(False),
    coneSize = cms.double(0.5),
    pvSrc = cms.InputTag("offlinePrimaryVertices")
)


process.ak5PFJetsLegacyHPSPiZeros = cms.EDProducer("RecoTauPiZeroProducer",
    massHypothesis = cms.double(0.136),
    ranking = cms.VPSet(cms.PSet(
        selectionPassFunction = cms.string('abs(mass() - 0.13579)'),
        selection = cms.string('algoIs("kStrips")'),
        name = cms.string('InStrip'),
        plugin = cms.string('RecoTauPiZeroStringQuality'),
        selectionFailValue = cms.double(1000)
    )),
    jetRegionSrc = cms.InputTag("recoTauAK5PFJets08Region"),
    outputSelection = cms.string('pt > 0'),
    jetSrc = cms.InputTag("ak5PFJets"),
    builders = cms.VPSet(cms.PSet(
        name = cms.string('s'),
        stripPhiAssociationDistance = cms.double(0.2),
        plugin = cms.string('RecoTauPiZeroStripPlugin2'),
        minGammaEtStripAdd = cms.double(0.0),
        minGammaEtStripSeed = cms.double(0.5),
        qualityCuts = cms.PSet(
            isolationQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(8),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(1.0),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(1.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            ),
            pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
            primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
            signalQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(3),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(0.5),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(0.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            )
        ),
        maxStripBuildIterations = cms.int32(-1),
        updateStripAfterEachDaughter = cms.bool(False),
        makeCombinatoricStrips = cms.bool(False),
        applyElecTrackQcuts = cms.bool(False),
        stripCandidatesParticleIds = cms.vint32(2, 4),
        minStripEt = cms.double(1.0),
        stripEtaAssociationDistance = cms.double(0.05)
    ))
)


process.ak5PFJetsLegacyTaNCPiZeros = cms.EDProducer("RecoTauPiZeroProducer",
    massHypothesis = cms.double(0.136),
    ranking = cms.VPSet(cms.PSet(
        selectionPassFunction = cms.string('abs(mass() - 0.13579)'),
        selection = cms.string('mass() < 0.2'),
        name = cms.string('PFTDM'),
        plugin = cms.string('RecoTauPiZeroStringQuality'),
        selectionFailValue = cms.double(1000)
    )),
    jetRegionSrc = cms.InputTag("recoTauAK5PFJets08Region"),
    outputSelection = cms.string('pt > 1.5'),
    jetSrc = cms.InputTag("ak5PFJets"),
    builders = cms.VPSet(cms.PSet(
        plugin = cms.string('RecoTauPiZeroTrivialPlugin'),
        name = cms.string('1'),
        qualityCuts = cms.PSet(
            isolationQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(8),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(1.0),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(1.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            ),
            pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
            primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
            signalQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(3),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(0.5),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(0.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            )
        )
    ), 
        cms.PSet(
            maxMass = cms.double(-1.0),
            plugin = cms.string('RecoTauPiZeroCombinatoricPlugin'),
            minMass = cms.double(0.0),
            qualityCuts = cms.PSet(
                isolationQualityCuts = cms.PSet(
                    minTrackHits = cms.uint32(8),
                    minTrackVertexWeight = cms.double(-1),
                    minTrackPt = cms.double(1.0),
                    maxTrackChi2 = cms.double(100.0),
                    minTrackPixelHits = cms.uint32(0),
                    minGammaEt = cms.double(1.5),
                    maxDeltaZ = cms.double(0.2),
                    maxTransverseImpactParameter = cms.double(0.03)
                ),
                pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
                primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
                signalQualityCuts = cms.PSet(
                    minTrackHits = cms.uint32(3),
                    minTrackVertexWeight = cms.double(-1),
                    minTrackPt = cms.double(0.5),
                    maxTrackChi2 = cms.double(100.0),
                    minTrackPixelHits = cms.uint32(0),
                    minGammaEt = cms.double(0.5),
                    maxDeltaZ = cms.double(0.2),
                    maxTransverseImpactParameter = cms.double(0.03)
                )
            ),
            choose = cms.uint32(2),
            maxInputGammas = cms.uint32(10),
            name = cms.string('2')
        ))
)


process.ak5PFJetsRecoTauPiZeros = cms.EDProducer("RecoTauPiZeroProducer",
    massHypothesis = cms.double(0.136),
    ranking = cms.VPSet(cms.PSet(
        selectionPassFunction = cms.string('abs(mass() - 0.13579)'),
        selection = cms.string('abs(eta()) < 1.5 & abs(mass() - 0.13579) < 0.05'),
        name = cms.string('nearPiZeroMass'),
        plugin = cms.string('RecoTauPiZeroStringQuality'),
        selectionFailValue = cms.double(1000)
    ), 
        cms.PSet(
            selectionPassFunction = cms.string('abs(mass() - 0.13579)'),
            selection = cms.string('abs(eta()) > 1.5 & mass() < 0.2'),
            name = cms.string('nearPiZeroMass'),
            plugin = cms.string('RecoTauPiZeroStringQuality'),
            selectionFailValue = cms.double(1000)
        ), 
        cms.PSet(
            selectionPassFunction = cms.string('abs(mass() - 0.13579)'),
            selection = cms.string('algoIs("kStrips")'),
            name = cms.string('InStrip'),
            plugin = cms.string('RecoTauPiZeroStringQuality'),
            selectionFailValue = cms.double(1000)
        )),
    jetRegionSrc = cms.InputTag("recoTauAK5PFJets08Region"),
    outputSelection = cms.string('pt > 1.5'),
    jetSrc = cms.InputTag("ak5PFJets"),
    builders = cms.VPSet(cms.PSet(
        maxMass = cms.double(-1.0),
        plugin = cms.string('RecoTauPiZeroCombinatoricPlugin'),
        minMass = cms.double(0.0),
        qualityCuts = cms.PSet(
            isolationQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(8),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(1.0),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(1.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            ),
            pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
            primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
            signalQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(3),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(0.5),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(0.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            )
        ),
        choose = cms.uint32(2),
        maxInputGammas = cms.uint32(10),
        name = cms.string('2')
    ), 
        cms.PSet(
            name = cms.string('s'),
            stripPhiAssociationDistance = cms.double(0.2),
            plugin = cms.string('RecoTauPiZeroStripPlugin2'),
            minGammaEtStripAdd = cms.double(0.0),
            minGammaEtStripSeed = cms.double(0.5),
            qualityCuts = cms.PSet(
                isolationQualityCuts = cms.PSet(
                    minTrackHits = cms.uint32(8),
                    minTrackVertexWeight = cms.double(-1),
                    minTrackPt = cms.double(1.0),
                    maxTrackChi2 = cms.double(100.0),
                    minTrackPixelHits = cms.uint32(0),
                    minGammaEt = cms.double(1.5),
                    maxDeltaZ = cms.double(0.2),
                    maxTransverseImpactParameter = cms.double(0.03)
                ),
                pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
                primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
                signalQualityCuts = cms.PSet(
                    minTrackHits = cms.uint32(3),
                    minTrackVertexWeight = cms.double(-1),
                    minTrackPt = cms.double(0.5),
                    maxTrackChi2 = cms.double(100.0),
                    minTrackPixelHits = cms.uint32(0),
                    minGammaEt = cms.double(0.5),
                    maxDeltaZ = cms.double(0.2),
                    maxTransverseImpactParameter = cms.double(0.03)
                )
            ),
            maxStripBuildIterations = cms.int32(-1),
            updateStripAfterEachDaughter = cms.bool(False),
            makeCombinatoricStrips = cms.bool(False),
            applyElecTrackQcuts = cms.bool(False),
            stripCandidatesParticleIds = cms.vint32(2, 4),
            minStripEt = cms.double(1.0),
            stripEtaAssociationDistance = cms.double(0.05)
        ))
)


process.ak5PrunedPFlow = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(True),
    voronoiRfact = cms.double(-0.9),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    useExplicitGhosts = cms.bool(True),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('PFJet'),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('AntiKt'),
    writeCompound = cms.bool(True),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    jetCollInstanceName = cms.string('SubJets'),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    zcut = cms.double(0.1),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.5),
    nFilt = cms.int32(2),
    usePruning = cms.bool(True),
    maxProblematicHcalCells = cms.uint32(9999999),
    rcut_factor = cms.double(0.5),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("pfNoElectronPFlow"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.ak5TrimmedPFlow = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(True),
    Ghost_EtaMax = cms.double(5.0),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    useExplicitGhosts = cms.bool(True),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('PFJet'),
    useTrimming = cms.bool(True),
    minSeed = cms.uint32(14327),
    voronoiRfact = cms.double(-0.9),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('AntiKt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    rFilt = cms.double(0.2),
    trimPtFracMin = cms.double(0.03),
    rParam = cms.double(0.5),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("pfNoElectronPFlow"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.ak6HiGenJets = cms.EDProducer("SubEventGenJetProducer",
    Active_Area_Repeats = cms.int32(5),
    doAreaFastjet = cms.bool(True),
    Ghost_EtaMax = cms.double(6.0),
    maxBadHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('GenJet'),
    minSeed = cms.uint32(14327),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('AntiKt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.5),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.6),
    maxProblematicHcalCells = cms.uint32(9999999),
    src = cms.InputTag("hiGenParticlesForJets"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.ak7FilteredGenJetsNoNu = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(5),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(6.0),
    maxBadHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('GenJet'),
    jetPtMin = cms.double(3.0),
    minSeed = cms.uint32(14327),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('AntiKt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.5),
    maxBadEcalCells = cms.uint32(9999999),
    jetCollInstanceName = cms.string('SubJets'),
    useFiltering = cms.bool(True),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    rFilt = cms.double(0.3),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.7),
    nFilt = cms.int32(3),
    maxProblematicHcalCells = cms.uint32(9999999),
    src = cms.InputTag("genParticlesForJetsNoNu"),
    writeCompound = cms.bool(True),
    srcPVs = cms.InputTag(""),
    inputEtMin = cms.double(0.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.ak7FilteredPFlow = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(True),
    voronoiRfact = cms.double(-0.9),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    inputEtMin = cms.double(0.0),
    useExplicitGhosts = cms.bool(True),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('PFJet'),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('AntiKt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    jetCollInstanceName = cms.string('SubJets'),
    useFiltering = cms.bool(True),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    rFilt = cms.double(0.3),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.7),
    nFilt = cms.int32(3),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("pfNoElectronPFlow"),
    jetPtMin = cms.double(3.0),
    srcPVs = cms.InputTag(""),
    writeCompound = cms.bool(True),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.ak7GenJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(5),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(6.0),
    maxBadHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('GenJet'),
    minSeed = cms.uint32(14327),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('AntiKt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.5),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.7),
    maxProblematicHcalCells = cms.uint32(9999999),
    src = cms.InputTag("genParticlesForJets"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.ak7GenJetsNoMuNoNu = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(5),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(6.0),
    maxBadHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('GenJet'),
    minSeed = cms.uint32(14327),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('AntiKt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.5),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.7),
    maxProblematicHcalCells = cms.uint32(9999999),
    src = cms.InputTag("genParticlesForJetsNoMuNoNu"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.ak7GenJetsNoNu = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(5),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(6.0),
    maxBadHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('GenJet'),
    minSeed = cms.uint32(14327),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('AntiKt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.5),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.7),
    maxProblematicHcalCells = cms.uint32(9999999),
    src = cms.InputTag("genParticlesForJetsNoNu"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag("goodOfflinePrimaryVertices"),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.ak7HiGenJets = cms.EDProducer("SubEventGenJetProducer",
    Active_Area_Repeats = cms.int32(5),
    doAreaFastjet = cms.bool(True),
    Ghost_EtaMax = cms.double(6.0),
    maxBadHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('GenJet'),
    minSeed = cms.uint32(14327),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('AntiKt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.5),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.7),
    maxProblematicHcalCells = cms.uint32(9999999),
    src = cms.InputTag("hiGenParticlesForJets"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.ak7PFlow = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(True),
    Ghost_EtaMax = cms.double(5.0),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('PFJet'),
    minSeed = cms.uint32(14327),
    voronoiRfact = cms.double(-0.9),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('AntiKt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.7),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("pfNoElectronPFlow"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag("goodOfflinePrimaryVertices"),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.ak7PrunedGenJetsNoNu = cms.EDProducer("FastjetJetProducer",
    nFilt = cms.int32(2),
    zcut = cms.double(0.1),
    rcut_factor = cms.double(0.5),
    Active_Area_Repeats = cms.int32(5),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(6.0),
    maxBadHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('GenJet'),
    jetPtMin = cms.double(3.0),
    minSeed = cms.uint32(14327),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('AntiKt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.5),
    maxBadEcalCells = cms.uint32(9999999),
    jetCollInstanceName = cms.string('SubJets'),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.7),
    usePruning = cms.bool(True),
    maxProblematicHcalCells = cms.uint32(9999999),
    src = cms.InputTag("genParticlesForJetsNoNu"),
    writeCompound = cms.bool(True),
    srcPVs = cms.InputTag(""),
    inputEtMin = cms.double(0.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.ak7PrunedPFlow = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(True),
    Ghost_EtaMax = cms.double(5.0),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    inputEtMin = cms.double(0.0),
    useExplicitGhosts = cms.bool(True),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('PFJet'),
    minSeed = cms.uint32(14327),
    voronoiRfact = cms.double(-0.9),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('AntiKt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    jetCollInstanceName = cms.string('SubJets'),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    zcut = cms.double(0.1),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.7),
    nFilt = cms.int32(2),
    usePruning = cms.bool(True),
    maxProblematicHcalCells = cms.uint32(9999999),
    rcut_factor = cms.double(0.5),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("pfNoElectronPFlow"),
    jetPtMin = cms.double(3.0),
    srcPVs = cms.InputTag(""),
    writeCompound = cms.bool(True),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.ak7TrimmedGenJetsNoNu = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(5),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(6.0),
    maxBadHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('GenJet'),
    useTrimming = cms.bool(True),
    minSeed = cms.uint32(14327),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('AntiKt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.5),
    trimPtFracMin = cms.double(0.03),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    rFilt = cms.double(0.2),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.7),
    maxProblematicHcalCells = cms.uint32(9999999),
    src = cms.InputTag("genParticlesForJetsNoNu"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.ak7TrimmedPFlow = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(True),
    voronoiRfact = cms.double(-0.9),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    useExplicitGhosts = cms.bool(True),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('PFJet'),
    useTrimming = cms.bool(True),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('AntiKt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    trimPtFracMin = cms.double(0.03),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    rFilt = cms.double(0.2),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.7),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("pfNoElectronPFlow"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.ak8FilteredPFlow = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(True),
    voronoiRfact = cms.double(-0.9),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    inputEtMin = cms.double(0.0),
    useExplicitGhosts = cms.bool(True),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('PFJet'),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('AntiKt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    jetCollInstanceName = cms.string('SubJets'),
    useFiltering = cms.bool(True),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    rFilt = cms.double(0.3),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.8),
    nFilt = cms.int32(3),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("pfNoElectronPFlow"),
    jetPtMin = cms.double(3.0),
    srcPVs = cms.InputTag(""),
    writeCompound = cms.bool(True),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.ak8GenJetsNoNu = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(5),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(6.0),
    maxBadHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('GenJet'),
    minSeed = cms.uint32(14327),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('AntiKt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.5),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.8),
    maxProblematicHcalCells = cms.uint32(9999999),
    src = cms.InputTag("genParticlesForJetsNoNu"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.ak8PFlow = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(True),
    Ghost_EtaMax = cms.double(5.0),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('PFJet'),
    minSeed = cms.uint32(14327),
    voronoiRfact = cms.double(-0.9),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('AntiKt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.8),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("pfNoElectronPFlow"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag("goodOfflinePrimaryVertices"),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.ak8PrunedPFlow = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(True),
    Ghost_EtaMax = cms.double(5.0),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    inputEtMin = cms.double(0.0),
    useExplicitGhosts = cms.bool(True),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('PFJet'),
    minSeed = cms.uint32(14327),
    voronoiRfact = cms.double(-0.9),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('AntiKt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    jetCollInstanceName = cms.string('SubJets'),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    zcut = cms.double(0.1),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.8),
    nFilt = cms.int32(2),
    usePruning = cms.bool(True),
    maxProblematicHcalCells = cms.uint32(9999999),
    rcut_factor = cms.double(0.5),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("pfNoElectronPFlow"),
    jetPtMin = cms.double(3.0),
    srcPVs = cms.InputTag(""),
    writeCompound = cms.bool(True),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.ak8TrimmedPFlow = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(True),
    voronoiRfact = cms.double(-0.9),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    useExplicitGhosts = cms.bool(True),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('PFJet'),
    useTrimming = cms.bool(True),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('AntiKt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    trimPtFracMin = cms.double(0.03),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    rFilt = cms.double(0.2),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.8),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("pfNoElectronPFlow"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.bFlavorHistoryProducer = cms.EDProducer("FlavorHistoryProducer",
    matchedSrc = cms.InputTag("ak5GenJets"),
    src = cms.InputTag("genParticles"),
    flavorHistoryName = cms.string('bPartonFlavorHistory'),
    verbose = cms.untracked.bool(False),
    pdgIdToSelect = cms.int32(5),
    etaMaxShower = cms.double(100.0),
    ptMinShower = cms.double(0.0),
    ptMinParticle = cms.double(0.0),
    matchDR = cms.double(0.5),
    etaMaxParticle = cms.double(100.0)
)


process.bToCharmDecayVertexMerged = cms.EDProducer("BtoCharmDecayVertexMerger",
    minvecSumIMifsmallDRUnique = cms.untracked.double(5.5),
    minDRUnique = cms.untracked.double(0.4),
    minCosPAtomerge = cms.untracked.double(0.99),
    primaryVertices = cms.InputTag("offlinePrimaryVertices"),
    maxPtreltomerge = cms.untracked.double(7777.0),
    secondaryVertices = cms.InputTag("inclusiveMergedVerticesFiltered")
)


process.cFlavorHistoryProducer = cms.EDProducer("FlavorHistoryProducer",
    matchedSrc = cms.InputTag("ak5GenJets"),
    src = cms.InputTag("genParticles"),
    flavorHistoryName = cms.string('cPartonFlavorHistory'),
    verbose = cms.untracked.bool(False),
    pdgIdToSelect = cms.int32(4),
    etaMaxShower = cms.double(100.0),
    ptMinShower = cms.double(0.0),
    ptMinParticle = cms.double(0.0),
    matchDR = cms.double(0.5),
    etaMaxParticle = cms.double(100.0)
)


process.ca4GenJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(5),
    src = cms.InputTag("genParticlesForJets"),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(6.0),
    doRhoFastjet = cms.bool(False),
    srcPVs = cms.InputTag(""),
    inputEtMin = cms.double(0.0),
    doAreaFastjet = cms.bool(False),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.5),
    jetPtMin = cms.double(3.0),
    inputEMin = cms.double(0.0),
    jetType = cms.string('GenJet'),
    doPUOffsetCorr = cms.bool(False),
    radiusPU = cms.double(0.5),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    jetAlgorithm = cms.string('CambridgeAachen'),
    rParam = cms.double(0.4)
)


process.ca4GenJetsNoMuNoNu = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(5),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(6.0),
    maxBadHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('GenJet'),
    minSeed = cms.uint32(14327),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('CambridgeAachen'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.5),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.4),
    maxProblematicHcalCells = cms.uint32(9999999),
    src = cms.InputTag("genParticlesForJetsNoMuNoNu"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.ca4GenJetsNoNu = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(5),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(6.0),
    maxBadHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('GenJet'),
    minSeed = cms.uint32(14327),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('CambridgeAachen'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.5),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.4),
    maxProblematicHcalCells = cms.uint32(9999999),
    src = cms.InputTag("genParticlesForJetsNoNu"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.ca6GenJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(5),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(6.0),
    maxBadHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('GenJet'),
    minSeed = cms.uint32(14327),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('CambridgeAachen'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.5),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.6),
    maxProblematicHcalCells = cms.uint32(9999999),
    src = cms.InputTag("genParticlesForJets"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.ca6GenJetsNoMuNoNu = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(5),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(6.0),
    maxBadHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('GenJet'),
    minSeed = cms.uint32(14327),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('CambridgeAachen'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.5),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.6),
    maxProblematicHcalCells = cms.uint32(9999999),
    src = cms.InputTag("genParticlesForJetsNoMuNoNu"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.ca6GenJetsNoNu = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(5),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(6.0),
    maxBadHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('GenJet'),
    minSeed = cms.uint32(14327),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('CambridgeAachen'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.5),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.6),
    maxProblematicHcalCells = cms.uint32(9999999),
    src = cms.InputTag("genParticlesForJetsNoNu"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.ca8GenJetsNoNu = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(5),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(6.0),
    maxBadHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('GenJet'),
    minSeed = cms.uint32(14327),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('CambridgeAachen'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.5),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.8),
    maxProblematicHcalCells = cms.uint32(9999999),
    src = cms.InputTag("genParticlesForJetsNoNu"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.ca8PFJetsPFlow = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(True),
    voronoiRfact = cms.double(-0.9),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('PFJet'),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(7.0),
    doRhoFastjet = cms.bool(True),
    jetAlgorithm = cms.string('CambridgeAachen'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(6.0),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.8),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("pfNoElectronPFlow"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.caFilteredGenJetsNoNu = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(5),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(6.0),
    maxBadHcalCells = cms.uint32(9999999),
    useExplicitGhosts = cms.bool(True),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('GenJet'),
    jetPtMin = cms.double(100.0),
    minSeed = cms.uint32(14327),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('CambridgeAachen'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.5),
    maxBadEcalCells = cms.uint32(9999999),
    jetCollInstanceName = cms.string('SubJets'),
    useFiltering = cms.bool(True),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    rFilt = cms.double(0.3),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(1.5),
    nFilt = cms.int32(2),
    maxProblematicHcalCells = cms.uint32(9999999),
    src = cms.InputTag("genParticlesForJetsNoNu"),
    writeCompound = cms.bool(True),
    srcPVs = cms.InputTag(""),
    inputEtMin = cms.double(0.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.caFilteredPFlow = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(True),
    Ghost_EtaMax = cms.double(5.0),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    useExplicitGhosts = cms.bool(True),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('PFJet'),
    minSeed = cms.uint32(14327),
    voronoiRfact = cms.double(-0.9),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('CambridgeAachen'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    jetCollInstanceName = cms.string('SubJets'),
    useFiltering = cms.bool(True),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    rFilt = cms.double(0.3),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(1.5),
    nFilt = cms.int32(3),
    maxProblematicHcalCells = cms.uint32(9999999),
    writeCompound = cms.bool(True),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("pfNoElectronPFlow"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(100.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.caHEPTopTagGen = cms.EDProducer("CATopJetProducer",
    Active_Area_Repeats = cms.int32(5),
    doAreaFastjet = cms.bool(False),
    verbose = cms.bool(False),
    Ghost_EtaMax = cms.double(6.0),
    maxBadHcalCells = cms.uint32(9999999),
    useAdjacency = cms.int32(2),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('GenJet'),
    minSeed = cms.uint32(14327),
    ptFracBins = cms.vdouble(0.05, 0.05, 0.05),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('CambridgeAachen'),
    sumEtBins = cms.vdouble(0, 1600, 2600),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.5),
    maxBadEcalCells = cms.uint32(9999999),
    jetCollInstanceName = cms.string('caTopSubJets'),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    rBins = cms.vdouble(0.8, 0.8, 0.8),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(1.5),
    deltarBins = cms.vdouble(0.19, 0.19, 0.19),
    nCellBins = cms.vdouble(1.9, 1.9, 1.9),
    debugLevel = cms.untracked.int32(0),
    sumEtEtaCut = cms.double(3.0),
    maxProblematicHcalCells = cms.uint32(9999999),
    writeCompound = cms.bool(True),
    src = cms.InputTag("genParticlesForJetsNoNu"),
    algorithm = cms.int32(1),
    useMaxTower = cms.bool(False),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    centralEtaCut = cms.double(2.5),
    etFrac = cms.double(0.7),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.caHEPTopTagPFlow = cms.EDProducer("CATopJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(True),
    verbose = cms.bool(False),
    Ghost_EtaMax = cms.double(5.0),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    useAdjacency = cms.int32(2),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('PFJet'),
    useMaxTower = cms.bool(False),
    minSeed = cms.uint32(14327),
    voronoiRfact = cms.double(-0.9),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('CambridgeAachen'),
    ptFracBins = cms.vdouble(0.05, 0.05, 0.05),
    sumEtBins = cms.vdouble(0, 1600, 2600),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    jetCollInstanceName = cms.string('caTopSubJets'),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    rBins = cms.vdouble(0.8, 0.8, 0.8),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(1.5),
    deltarBins = cms.vdouble(0.19, 0.19, 0.19),
    nCellBins = cms.vdouble(1.9, 1.9, 1.9),
    debugLevel = cms.untracked.int32(0),
    sumEtEtaCut = cms.double(3.0),
    maxProblematicHcalCells = cms.uint32(9999999),
    writeCompound = cms.bool(True),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("pfNoElectronPFlow"),
    tagAlgo = cms.int32(2),
    algorithm = cms.int32(1),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(100.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    centralEtaCut = cms.double(2.5),
    etFrac = cms.double(0.7),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.caMassDropFilteredGenJetsNoNu = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(5),
    useMassDropTagger = cms.bool(True),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(6.0),
    maxBadHcalCells = cms.uint32(9999999),
    useExplicitGhosts = cms.bool(True),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('GenJet'),
    muCut = cms.double(0.667),
    minSeed = cms.uint32(14327),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('CambridgeAachen'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.5),
    maxBadEcalCells = cms.uint32(9999999),
    jetCollInstanceName = cms.string('SubJets'),
    useFiltering = cms.bool(True),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    rFilt = cms.double(0.3),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(1.5),
    nFilt = cms.int32(2),
    yCut = cms.double(0.08),
    maxProblematicHcalCells = cms.uint32(9999999),
    writeCompound = cms.bool(True),
    src = cms.InputTag("genParticlesForJetsNoNu"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(100.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.caMassDropFilteredPFlow = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    useMassDropTagger = cms.bool(True),
    doAreaFastjet = cms.bool(True),
    voronoiRfact = cms.double(-0.9),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    inputEtMin = cms.double(0.0),
    useExplicitGhosts = cms.bool(True),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('PFJet'),
    radiusPU = cms.double(0.5),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('CambridgeAachen'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    jetCollInstanceName = cms.string('SubJets'),
    useFiltering = cms.bool(True),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    rFilt = cms.double(0.3),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(1.5),
    nFilt = cms.int32(3),
    yCut = cms.double(0.08),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("pfNoElectronPFlow"),
    jetPtMin = cms.double(100.0),
    srcPVs = cms.InputTag(""),
    writeCompound = cms.bool(True),
    muCut = cms.double(0.667),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.caPrunedGen = cms.EDProducer("FastjetJetProducer",
    nFilt = cms.int32(2),
    zcut = cms.double(0.1),
    rcut_factor = cms.double(0.5),
    Active_Area_Repeats = cms.int32(5),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(6.0),
    maxBadHcalCells = cms.uint32(9999999),
    useExplicitGhosts = cms.bool(True),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('GenJet'),
    jetPtMin = cms.double(3.0),
    minSeed = cms.uint32(14327),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('CambridgeAachen'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.5),
    maxBadEcalCells = cms.uint32(9999999),
    jetCollInstanceName = cms.string('SubJets'),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.8),
    usePruning = cms.bool(True),
    maxProblematicHcalCells = cms.uint32(9999999),
    src = cms.InputTag("genParticlesForJetsNoNu"),
    writeCompound = cms.bool(True),
    srcPVs = cms.InputTag(""),
    inputEtMin = cms.double(0.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.caPrunedPFlow = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(True),
    Ghost_EtaMax = cms.double(5.0),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    inputEtMin = cms.double(0.0),
    useExplicitGhosts = cms.bool(True),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('PFJet'),
    minSeed = cms.uint32(14327),
    voronoiRfact = cms.double(-0.9),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('CambridgeAachen'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    jetCollInstanceName = cms.string('SubJets'),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    zcut = cms.double(0.1),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.8),
    nFilt = cms.int32(2),
    usePruning = cms.bool(True),
    maxProblematicHcalCells = cms.uint32(9999999),
    rcut_factor = cms.double(0.5),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("pfNoElectronPFlow"),
    jetPtMin = cms.double(3.0),
    srcPVs = cms.InputTag(""),
    writeCompound = cms.bool(True),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.caTopTagGen = cms.EDProducer("CATopJetProducer",
    Active_Area_Repeats = cms.int32(5),
    src = cms.InputTag("genParticlesForJetsNoNu"),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(6.0),
    doRhoFastjet = cms.bool(False),
    srcPVs = cms.InputTag(""),
    inputEtMin = cms.double(0.0),
    doPUOffsetCorr = cms.bool(False),
    doAreaFastjet = cms.bool(False),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.5),
    jetType = cms.string('GenJet'),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    inputEMin = cms.double(0.0),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    sumEtEtaCut = cms.double(3.0),
    ptFracBins = cms.vdouble(0.05, 0.05, 0.05),
    rBins = cms.vdouble(0.8, 0.8, 0.8),
    algorithm = cms.int32(1),
    etFrac = cms.double(0.7),
    useMaxTower = cms.bool(False),
    deltarBins = cms.vdouble(0.19, 0.19, 0.19),
    nCellBins = cms.vdouble(1.9, 1.9, 1.9),
    sumEtBins = cms.vdouble(0, 1600, 2600),
    centralEtaCut = cms.double(2.5),
    debugLevel = cms.untracked.int32(0),
    useAdjacency = cms.int32(2),
    jetCollInstanceName = cms.string('caTopSubJets'),
    verbose = cms.bool(False),
    jetAlgorithm = cms.string('CambridgeAachen'),
    rParam = cms.double(0.8),
    writeCompound = cms.bool(True)
)


process.caTopTagPFlow = cms.EDProducer("CATopJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doOutputJets = cms.bool(True),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    minSeed = cms.uint32(14327),
    voronoiRfact = cms.double(-0.9),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(False),
    srcPVs = cms.InputTag(""),
    inputEtMin = cms.double(0.0),
    doPUOffsetCorr = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    src = cms.InputTag("pfNoElectronPFlow"),
    inputEMin = cms.double(0.0),
    jetType = cms.string('PFJet'),
    jetPtMin = cms.double(100.0),
    doAreaDiskApprox = cms.bool(False),
    radiusPU = cms.double(0.5),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    sumEtEtaCut = cms.double(3.0),
    ptFracBins = cms.vdouble(0.05, 0.05, 0.05),
    rBins = cms.vdouble(0.8, 0.8, 0.8),
    algorithm = cms.int32(1),
    etFrac = cms.double(0.7),
    useMaxTower = cms.bool(False),
    deltarBins = cms.vdouble(0.19, 0.19, 0.19),
    nCellBins = cms.vdouble(1.9, 1.9, 1.9),
    sumEtBins = cms.vdouble(0, 1600, 2600),
    centralEtaCut = cms.double(2.5),
    debugLevel = cms.untracked.int32(0),
    useAdjacency = cms.int32(2),
    jetCollInstanceName = cms.string('caTopSubJets'),
    verbose = cms.bool(False),
    jetAlgorithm = cms.string('CambridgeAachen'),
    rParam = cms.double(0.8),
    writeCompound = cms.bool(True)
)


process.caloJetMETcorr = cms.EDProducer("CaloJetMETcorrInputProducer",
    src = cms.InputTag("ak5CaloJets"),
    type1JetPtThreshold = cms.double(20.0),
    skipEMfractionThreshold = cms.double(0.9),
    skipEM = cms.bool(True),
    jetCorrEtaMax = cms.double(9.9),
    srcMET = cms.InputTag("corMetGlobalMuons"),
    jetCorrLabel = cms.string('ak5CaloL2L3')
)


process.caloJetMETcorrPFlow = cms.EDProducer("CaloJetMETcorrInputProducer",
    src = cms.InputTag("ak5CaloJets"),
    type1JetPtThreshold = cms.double(20.0),
    skipEMfractionThreshold = cms.double(0.9),
    skipEM = cms.bool(True),
    jetCorrEtaMax = cms.double(9.9),
    srcMET = cms.InputTag("corMetGlobalMuons"),
    jetCorrLabel = cms.string('ak5CaloL2L3')
)


process.caloJetMETcorrPFlowLoose = cms.EDProducer("CaloJetMETcorrInputProducer",
    src = cms.InputTag("ak5CaloJets"),
    type1JetPtThreshold = cms.double(20.0),
    skipEMfractionThreshold = cms.double(0.9),
    skipEM = cms.bool(True),
    jetCorrEtaMax = cms.double(9.9),
    srcMET = cms.InputTag("corMetGlobalMuons"),
    jetCorrLabel = cms.string('ak5CaloL2L3')
)


process.caloType1CorrectedMet = cms.EDProducer("CorrectedCaloMETProducer",
    applyType2Corrections = cms.bool(False),
    srcType1Corrections = cms.VInputTag(cms.InputTag("caloJetMETcorr","type1")),
    src = cms.InputTag("corMetGlobalMuons"),
    applyType1Corrections = cms.bool(True)
)


process.caloType1CorrectedMetPFlow = cms.EDProducer("CorrectedCaloMETProducer",
    applyType2Corrections = cms.bool(False),
    srcType1Corrections = cms.VInputTag(cms.InputTag("caloJetMETcorrPFlow","type1")),
    applyType1Corrections = cms.bool(True),
    src = cms.InputTag("corMetGlobalMuons")
)


process.caloType1CorrectedMetPFlowLoose = cms.EDProducer("CorrectedCaloMETProducer",
    applyType2Corrections = cms.bool(False),
    srcType1Corrections = cms.VInputTag(cms.InputTag("caloJetMETcorrPFlowLoose","type1")),
    applyType1Corrections = cms.bool(True),
    src = cms.InputTag("corMetGlobalMuons")
)


process.caloType1p2CorrectedMet = cms.EDProducer("CorrectedCaloMETProducer",
    src = cms.InputTag("corMetGlobalMuons"),
    applyType1Corrections = cms.bool(True),
    type2CorrFormula = cms.string('A + B*TMath::Exp(-C*x)'),
    srcUnclEnergySums = cms.VInputTag(cms.InputTag("caloJetMETcorr","type2"), cms.InputTag("muonCaloMETcorr")),
    srcType1Corrections = cms.VInputTag(cms.InputTag("caloJetMETcorr","type1")),
    applyType2Corrections = cms.bool(True),
    type2CorrParameter = cms.PSet(
        A = cms.double(2.0),
        C = cms.double(0.1),
        B = cms.double(1.3)
    )
)


process.caloType1p2CorrectedMetPFlow = cms.EDProducer("CorrectedCaloMETProducer",
    src = cms.InputTag("corMetGlobalMuons"),
    applyType1Corrections = cms.bool(True),
    type2CorrFormula = cms.string('A + B*TMath::Exp(-C*x)'),
    srcUnclEnergySums = cms.VInputTag(cms.InputTag("caloJetMETcorrPFlow","type2"), cms.InputTag("muonCaloMETcorrPFlow")),
    srcType1Corrections = cms.VInputTag(cms.InputTag("caloJetMETcorrPFlow","type1")),
    applyType2Corrections = cms.bool(True),
    type2CorrParameter = cms.PSet(
        A = cms.double(2.0),
        C = cms.double(0.1),
        B = cms.double(1.3)
    )
)


process.caloType1p2CorrectedMetPFlowLoose = cms.EDProducer("CorrectedCaloMETProducer",
    src = cms.InputTag("corMetGlobalMuons"),
    applyType1Corrections = cms.bool(True),
    type2CorrFormula = cms.string('A + B*TMath::Exp(-C*x)'),
    srcUnclEnergySums = cms.VInputTag(cms.InputTag("caloJetMETcorrPFlowLoose","type2"), cms.InputTag("muonCaloMETcorrPFlowLoose")),
    srcType1Corrections = cms.VInputTag(cms.InputTag("caloJetMETcorrPFlowLoose","type1")),
    applyType2Corrections = cms.bool(True),
    type2CorrParameter = cms.PSet(
        A = cms.double(2.0),
        C = cms.double(0.1),
        B = cms.double(1.3)
    )
)


process.cleanPatElectrons = cms.EDProducer("PATElectronCleaner",
    finalCut = cms.string(''),
    src = cms.InputTag("selectedPatElectrons"),
    checkOverlaps = cms.PSet(
        muons = cms.PSet(
            src = cms.InputTag("cleanPatMuons"),
            deltaR = cms.double(0.3),
            pairCut = cms.string(''),
            checkRecoComponents = cms.bool(False),
            algorithm = cms.string('byDeltaR'),
            preselection = cms.string(''),
            requireNoOverlaps = cms.bool(False)
        )
    ),
    preselection = cms.string('')
)


process.cleanPatElectronsPFlow = cms.EDProducer("PATElectronCleaner",
    finalCut = cms.string(''),
    src = cms.InputTag("selectedPatElectronsPFlow"),
    checkOverlaps = cms.PSet(
        muons = cms.PSet(
            src = cms.InputTag("cleanPatMuonsPFlow"),
            deltaR = cms.double(0.3),
            pairCut = cms.string(''),
            checkRecoComponents = cms.bool(False),
            algorithm = cms.string('byDeltaR'),
            preselection = cms.string(''),
            requireNoOverlaps = cms.bool(False)
        )
    ),
    preselection = cms.string('')
)


process.cleanPatElectronsPFlowLoose = cms.EDProducer("PATElectronCleaner",
    finalCut = cms.string(''),
    src = cms.InputTag("selectedPatElectronsPFlowLoose"),
    checkOverlaps = cms.PSet(
        muons = cms.PSet(
            src = cms.InputTag("cleanPatMuonsPFlowLoose"),
            deltaR = cms.double(0.3),
            pairCut = cms.string(''),
            checkRecoComponents = cms.bool(False),
            algorithm = cms.string('byDeltaR'),
            preselection = cms.string(''),
            requireNoOverlaps = cms.bool(False)
        )
    ),
    preselection = cms.string('')
)


process.cleanPatJets = cms.EDProducer("PATJetCleaner",
    finalCut = cms.string(''),
    src = cms.InputTag("selectedPatJets"),
    checkOverlaps = cms.PSet(
        taus = cms.PSet(
            src = cms.InputTag("cleanPatTaus"),
            deltaR = cms.double(0.5),
            pairCut = cms.string(''),
            checkRecoComponents = cms.bool(False),
            algorithm = cms.string('byDeltaR'),
            preselection = cms.string(''),
            requireNoOverlaps = cms.bool(False)
        ),
        photons = cms.PSet(
            src = cms.InputTag("cleanPatPhotons"),
            deltaR = cms.double(0.5),
            pairCut = cms.string(''),
            checkRecoComponents = cms.bool(False),
            algorithm = cms.string('byDeltaR'),
            preselection = cms.string(''),
            requireNoOverlaps = cms.bool(False)
        ),
        electrons = cms.PSet(
            src = cms.InputTag("cleanPatElectrons"),
            deltaR = cms.double(0.5),
            pairCut = cms.string(''),
            checkRecoComponents = cms.bool(False),
            algorithm = cms.string('byDeltaR'),
            preselection = cms.string(''),
            requireNoOverlaps = cms.bool(False)
        ),
        muons = cms.PSet(
            src = cms.InputTag("cleanPatMuons"),
            deltaR = cms.double(0.5),
            pairCut = cms.string(''),
            checkRecoComponents = cms.bool(False),
            algorithm = cms.string('byDeltaR'),
            preselection = cms.string(''),
            requireNoOverlaps = cms.bool(False)
        ),
        tkIsoElectrons = cms.PSet(
            src = cms.InputTag("cleanPatElectrons"),
            deltaR = cms.double(0.3),
            pairCut = cms.string(''),
            checkRecoComponents = cms.bool(False),
            algorithm = cms.string('byDeltaR'),
            preselection = cms.string('pt > 10 && trackIso < 3'),
            requireNoOverlaps = cms.bool(False)
        )
    ),
    preselection = cms.string('')
)


process.cleanPatJetsPFlow = cms.EDProducer("PATJetCleaner",
    finalCut = cms.string(''),
    src = cms.InputTag("selectedPatJetsPFlow"),
    checkOverlaps = cms.PSet(
        taus = cms.PSet(
            src = cms.InputTag("cleanPatTausPFlow"),
            deltaR = cms.double(0.5),
            pairCut = cms.string(''),
            checkRecoComponents = cms.bool(False),
            algorithm = cms.string('byDeltaR'),
            preselection = cms.string(''),
            requireNoOverlaps = cms.bool(False)
        ),
        photons = cms.PSet(
            src = cms.InputTag("cleanPatPhotonsPFlow"),
            deltaR = cms.double(0.5),
            pairCut = cms.string(''),
            checkRecoComponents = cms.bool(False),
            algorithm = cms.string('byDeltaR'),
            preselection = cms.string(''),
            requireNoOverlaps = cms.bool(False)
        ),
        electrons = cms.PSet(
            src = cms.InputTag("cleanPatElectronsPFlow"),
            deltaR = cms.double(0.5),
            pairCut = cms.string(''),
            checkRecoComponents = cms.bool(False),
            algorithm = cms.string('byDeltaR'),
            preselection = cms.string(''),
            requireNoOverlaps = cms.bool(False)
        ),
        muons = cms.PSet(
            src = cms.InputTag("cleanPatMuonsPFlow"),
            deltaR = cms.double(0.5),
            pairCut = cms.string(''),
            checkRecoComponents = cms.bool(False),
            algorithm = cms.string('byDeltaR'),
            preselection = cms.string(''),
            requireNoOverlaps = cms.bool(False)
        ),
        tkIsoElectrons = cms.PSet(
            src = cms.InputTag("cleanPatElectronsPFlow"),
            deltaR = cms.double(0.3),
            pairCut = cms.string(''),
            checkRecoComponents = cms.bool(False),
            algorithm = cms.string('byDeltaR'),
            preselection = cms.string('pt > 10 && trackIso < 3'),
            requireNoOverlaps = cms.bool(False)
        )
    ),
    preselection = cms.string('')
)


process.cleanPatJetsPFlowLoose = cms.EDProducer("PATJetCleaner",
    finalCut = cms.string(''),
    src = cms.InputTag("selectedPatJetsPFlowLoose"),
    checkOverlaps = cms.PSet(
        taus = cms.PSet(
            src = cms.InputTag("cleanPatTausPFlowLoose"),
            deltaR = cms.double(0.5),
            pairCut = cms.string(''),
            checkRecoComponents = cms.bool(False),
            algorithm = cms.string('byDeltaR'),
            preselection = cms.string(''),
            requireNoOverlaps = cms.bool(False)
        ),
        photons = cms.PSet(
            src = cms.InputTag("cleanPatPhotonsPFlowLoose"),
            deltaR = cms.double(0.5),
            pairCut = cms.string(''),
            checkRecoComponents = cms.bool(False),
            algorithm = cms.string('byDeltaR'),
            preselection = cms.string(''),
            requireNoOverlaps = cms.bool(False)
        ),
        electrons = cms.PSet(
            src = cms.InputTag("cleanPatElectronsPFlowLoose"),
            deltaR = cms.double(0.5),
            pairCut = cms.string(''),
            checkRecoComponents = cms.bool(False),
            algorithm = cms.string('byDeltaR'),
            preselection = cms.string(''),
            requireNoOverlaps = cms.bool(False)
        ),
        muons = cms.PSet(
            src = cms.InputTag("cleanPatMuonsPFlowLoose"),
            deltaR = cms.double(0.5),
            pairCut = cms.string(''),
            checkRecoComponents = cms.bool(False),
            algorithm = cms.string('byDeltaR'),
            preselection = cms.string(''),
            requireNoOverlaps = cms.bool(False)
        ),
        tkIsoElectrons = cms.PSet(
            src = cms.InputTag("cleanPatElectronsPFlowLoose"),
            deltaR = cms.double(0.3),
            pairCut = cms.string(''),
            checkRecoComponents = cms.bool(False),
            algorithm = cms.string('byDeltaR'),
            preselection = cms.string('pt > 10 && trackIso < 3'),
            requireNoOverlaps = cms.bool(False)
        )
    ),
    preselection = cms.string('')
)


process.cleanPatMuons = cms.EDProducer("PATMuonCleaner",
    finalCut = cms.string(''),
    src = cms.InputTag("selectedPatMuons"),
    checkOverlaps = cms.PSet(

    ),
    preselection = cms.string('')
)


process.cleanPatMuonsPFlow = cms.EDProducer("PATMuonCleaner",
    finalCut = cms.string(''),
    src = cms.InputTag("selectedPatMuonsPFlow"),
    checkOverlaps = cms.PSet(

    ),
    preselection = cms.string('')
)


process.cleanPatMuonsPFlowLoose = cms.EDProducer("PATMuonCleaner",
    finalCut = cms.string(''),
    src = cms.InputTag("selectedPatMuonsPFlowLoose"),
    checkOverlaps = cms.PSet(

    ),
    preselection = cms.string('')
)


process.cleanPatPhotons = cms.EDProducer("PATPhotonCleaner",
    finalCut = cms.string(''),
    src = cms.InputTag("selectedPatPhotons"),
    checkOverlaps = cms.PSet(
        electrons = cms.PSet(
            src = cms.InputTag("cleanPatElectrons"),
            requireNoOverlaps = cms.bool(False),
            algorithm = cms.string('bySuperClusterSeed')
        )
    ),
    preselection = cms.string('')
)


process.cleanPatPhotonsPFlow = cms.EDProducer("PATPhotonCleaner",
    finalCut = cms.string(''),
    src = cms.InputTag("selectedPatPhotonsPFlow"),
    checkOverlaps = cms.PSet(
        electrons = cms.PSet(
            src = cms.InputTag("cleanPatElectronsPFlow"),
            requireNoOverlaps = cms.bool(False),
            algorithm = cms.string('bySuperClusterSeed')
        )
    ),
    preselection = cms.string('')
)


process.cleanPatPhotonsPFlowLoose = cms.EDProducer("PATPhotonCleaner",
    finalCut = cms.string(''),
    src = cms.InputTag("selectedPatPhotonsPFlowLoose"),
    checkOverlaps = cms.PSet(
        electrons = cms.PSet(
            src = cms.InputTag("cleanPatElectronsPFlowLoose"),
            requireNoOverlaps = cms.bool(False),
            algorithm = cms.string('bySuperClusterSeed')
        )
    ),
    preselection = cms.string('')
)


process.cleanPatTaus = cms.EDProducer("PATTauCleaner",
    finalCut = cms.string('pt > 20. & abs(eta) < 2.3'),
    src = cms.InputTag("selectedPatTaus"),
    checkOverlaps = cms.PSet(
        muons = cms.PSet(
            src = cms.InputTag("cleanPatMuons"),
            deltaR = cms.double(0.3),
            pairCut = cms.string(''),
            checkRecoComponents = cms.bool(False),
            algorithm = cms.string('byDeltaR'),
            preselection = cms.string(''),
            requireNoOverlaps = cms.bool(False)
        ),
        electrons = cms.PSet(
            src = cms.InputTag("cleanPatElectrons"),
            deltaR = cms.double(0.3),
            pairCut = cms.string(''),
            checkRecoComponents = cms.bool(False),
            algorithm = cms.string('byDeltaR'),
            preselection = cms.string(''),
            requireNoOverlaps = cms.bool(False)
        )
    ),
    preselection = cms.string('tauID("decayModeFinding") > 0.5 & tauID("byLooseCombinedIsolationDeltaBetaCorr") > 0.5 & tauID("againstMuonMedium") > 0.5 & tauID("againstElectronMedium") > 0.5')
)


process.cleanPatTausPFlow = cms.EDProducer("PATTauCleaner",
    finalCut = cms.string('pt > 20. & abs(eta) < 2.3'),
    src = cms.InputTag("selectedPatTausPFlow"),
    checkOverlaps = cms.PSet(
        muons = cms.PSet(
            src = cms.InputTag("cleanPatMuonsPFlow"),
            deltaR = cms.double(0.3),
            pairCut = cms.string(''),
            checkRecoComponents = cms.bool(False),
            algorithm = cms.string('byDeltaR'),
            preselection = cms.string(''),
            requireNoOverlaps = cms.bool(False)
        ),
        electrons = cms.PSet(
            src = cms.InputTag("cleanPatElectronsPFlow"),
            deltaR = cms.double(0.3),
            pairCut = cms.string(''),
            checkRecoComponents = cms.bool(False),
            algorithm = cms.string('byDeltaR'),
            preselection = cms.string(''),
            requireNoOverlaps = cms.bool(False)
        )
    ),
    preselection = cms.string('pt > 15 & abs(eta) < 2.3 & tauID("decayModeFinding") > 0.5 & tauID("byLooseIsolation") > 0.5 & tauID("againstMuonTight") > 0.5 & tauID("againstElectronLoose") > 0.5')
)


process.cleanPatTausPFlowLoose = cms.EDProducer("PATTauCleaner",
    finalCut = cms.string('pt > 20. & abs(eta) < 2.3'),
    src = cms.InputTag("selectedPatTausPFlowLoose"),
    checkOverlaps = cms.PSet(
        muons = cms.PSet(
            src = cms.InputTag("cleanPatMuonsPFlowLoose"),
            deltaR = cms.double(0.3),
            pairCut = cms.string(''),
            checkRecoComponents = cms.bool(False),
            algorithm = cms.string('byDeltaR'),
            preselection = cms.string(''),
            requireNoOverlaps = cms.bool(False)
        ),
        electrons = cms.PSet(
            src = cms.InputTag("cleanPatElectronsPFlowLoose"),
            deltaR = cms.double(0.3),
            pairCut = cms.string(''),
            checkRecoComponents = cms.bool(False),
            algorithm = cms.string('byDeltaR'),
            preselection = cms.string(''),
            requireNoOverlaps = cms.bool(False)
        )
    ),
    preselection = cms.string('pt > 15 & abs(eta) < 2.3 & tauID("decayModeFinding") > 0.5 & tauID("byLooseIsolation") > 0.5 & tauID("againstMuonTight") > 0.5 & tauID("againstElectronLoose") > 0.5')
)


process.combinatoricRecoTaus = cms.EDProducer("RecoTauProducer",
    piZeroSrc = cms.InputTag("ak5PFJetsLegacyHPSPiZeros"),
    modifiers = cms.VPSet(cms.PSet(
        plugin = cms.string('RecoTauImpactParameterSignificancePlugin'),
        name = cms.string('sipt'),
        qualityCuts = cms.PSet(
            isolationQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(8),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(1.0),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(1.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            ),
            pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
            primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
            signalQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(3),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(0.5),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(0.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            )
        )
    ), 
        cms.PSet(
            ElectronPreIDProducer = cms.InputTag("elecpreid"),
            name = cms.string('elec_rej'),
            plugin = cms.string('RecoTauElectronRejectionPlugin'),
            DataType = cms.string('AOD'),
            maximumForElectrionPreIDOutput = cms.double(-0.1),
            EcalStripSumE_deltaPhiOverQ_minValue = cms.double(-0.1),
            EcalStripSumE_deltaPhiOverQ_maxValue = cms.double(0.5),
            EcalStripSumE_minClusEnergy = cms.double(0.1),
            ElecPreIDLeadTkMatch_maxDR = cms.double(0.01),
            EcalStripSumE_deltaEta = cms.double(0.03)
        ), 
        cms.PSet(
            dRcone = cms.double(0.12),
            name = cms.string('tau_en_recovery'),
            plugin = cms.string('RecoTauEnergyRecoveryPlugin2')
        ), 
        cms.PSet(
            pfTauTagInfoSrc = cms.InputTag("pfRecoTauTagInfoProducer"),
            name = cms.string('TTIworkaround'),
            plugin = cms.string('RecoTauTagInfoWorkaroundModifer')
        )),
    jetRegionSrc = cms.InputTag("recoTauAK5PFJets08Region"),
    jetSrc = cms.InputTag("ak5PFJets"),
    builders = cms.VPSet(cms.PSet(
        usePFLeptons = cms.bool(True),
        name = cms.string('combinatoric'),
        plugin = cms.string('RecoTauBuilderCombinatoricPlugin'),
        qualityCuts = cms.PSet(
            isolationQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(8),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(1.0),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(1.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            ),
            pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
            primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
            signalQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(3),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(0.5),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(0.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            )
        ),
        decayModes = cms.VPSet(cms.PSet(
            nPiZeros = cms.uint32(0),
            nCharged = cms.uint32(1),
            maxPiZeros = cms.uint32(0),
            maxTracks = cms.uint32(6)
        ), 
            cms.PSet(
                nPiZeros = cms.uint32(1),
                nCharged = cms.uint32(1),
                maxPiZeros = cms.uint32(6),
                maxTracks = cms.uint32(6)
            ), 
            cms.PSet(
                nPiZeros = cms.uint32(2),
                nCharged = cms.uint32(1),
                maxPiZeros = cms.uint32(5),
                maxTracks = cms.uint32(6)
            ), 
            cms.PSet(
                nPiZeros = cms.uint32(0),
                nCharged = cms.uint32(3),
                maxPiZeros = cms.uint32(0),
                maxTracks = cms.uint32(6)
            )),
        isolationConeSize = cms.double(0.5),
        pfCandSrc = cms.InputTag("particleFlow")
    )),
    buildNullTaus = cms.bool(True)
)


process.combinatoricRecoTausDiscriminationByLeadingPionPtCut = cms.EDProducer("PFRecoTauDiscriminationByLeadingObjectPtCut",
    MinPtLeadingObject = cms.double(5.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    UseOnlyChargedHadrons = cms.bool(False),
    PFTauProducer = cms.InputTag("combinatoricRecoTaus")
)


process.combinatoricRecoTausDiscriminationByTanc = cms.EDProducer("RecoTauMVADiscriminator",
    discriminantOptions = cms.PSet(
        BinnedMaskedHcalIsolation = cms.PSet(
            vtxSource = cms.InputTag("recoTauPileUpVertices"),
            mask = cms.PSet(
                finalHcalCone = cms.double(0.08),
                ecalCone = cms.double(0.15),
                hcalCone = cms.double(0.3),
                maxSigmas = cms.double(2)
            ),
            binning = cms.VPSet(cms.PSet(
                binLowEdges = cms.vdouble(1.0, 1.79, 4.03),
                nPUVtx = cms.int32(0)
            ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(1.15, 1.8, 4.03),
                    nPUVtx = cms.int32(1)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(1.22, 1.81, 4.03),
                    nPUVtx = cms.int32(2)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(1.27, 1.83, 4.03),
                    nPUVtx = cms.int32(3)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(1.31, 1.84, 4.03),
                    nPUVtx = cms.int32(4)
                )),
            defaultBinning = cms.vdouble(1.31, 1.84, 4.03),
            plugin = cms.string('RecoTauDiscriminationBinnedMaskedHCALIsolation')
        ),
        InvariantOpeningAngle = cms.PSet(
            defaultRMS = cms.string('max(0.3/max(pt, 1.0), 0.005)'),
            plugin = cms.string('RecoTauDiscriminantInvariantWidth'),
            decayModes = cms.VPSet(cms.PSet(
                nPiZeros = cms.uint32(1),
                rms = cms.string('2.7e-3 + 0.23/max(pt, 1.0)'),
                nCharged = cms.uint32(1),
                mean = cms.string('5.0e-3 + 0.43/max(pt, 1.0)')
            ), 
                cms.PSet(
                    nPiZeros = cms.uint32(2),
                    rms = cms.string('7.5e-3 + 0.3/max(pt, 1.0)'),
                    nCharged = cms.uint32(1),
                    mean = cms.string('4.7e-3 + 0.9/max(pt, 1.0)')
                ), 
                cms.PSet(
                    nPiZeros = cms.uint32(0),
                    rms = cms.string('0.38/max(pt, 1.0)'),
                    nCharged = cms.uint32(3),
                    mean = cms.string('0.87/max(pt, 1.0)')
                )),
            defaultMean = cms.string('max(0.87/max(pt, 1.0), 0.005)')
        ),
        BinnedMaskedEcalIsolation = cms.PSet(
            vtxSource = cms.InputTag("recoTauPileUpVertices"),
            mask = cms.PSet(
                finalHcalCone = cms.double(0.08),
                ecalCone = cms.double(0.15),
                hcalCone = cms.double(0.3),
                maxSigmas = cms.double(2)
            ),
            binning = cms.VPSet(cms.PSet(
                binLowEdges = cms.vdouble(0.5, 0.88, 2.53),
                nPUVtx = cms.int32(0)
            ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(0.65, 0.98, 2.53),
                    nPUVtx = cms.int32(1)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(0.74, 1.05, 2.54),
                    nPUVtx = cms.int32(2)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(0.8, 1.11, 2.54),
                    nPUVtx = cms.int32(3)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(0.86, 1.15, 2.54),
                    nPUVtx = cms.int32(4)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(0.9, 1.19, 2.55),
                    nPUVtx = cms.int32(5)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(0.94, 1.22, 2.55),
                    nPUVtx = cms.int32(6)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(0.97, 1.25, 2.55),
                    nPUVtx = cms.int32(7)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(1.0, 1.27, 2.56),
                    nPUVtx = cms.int32(8)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(1.03, 1.3, 2.56),
                    nPUVtx = cms.int32(9)
                )),
            defaultBinning = cms.vdouble(1.03, 1.3, 2.56),
            plugin = cms.string('RecoTauDiscriminationBinnedMaskedECALIsolation')
        ),
        FlightPathSignificance = cms.PSet(
            plugin = cms.string('RecoTauDiscriminantFromDiscriminator'),
            discSrc = cms.InputTag("hpsTancTausDiscriminationByFlightPath"),
            maxValue = cms.double(25),
            minValue = cms.double(-25)
        ),
        BinnedTrackIsolation = cms.PSet(
            vtxSource = cms.InputTag("recoTauPileUpVertices"),
            binning = cms.VPSet(cms.PSet(
                binLowEdges = cms.vdouble(0.5, 0.86, 1.87),
                nPUVtx = cms.int32(0)
            ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(0.51, 0.86, 1.87),
                    nPUVtx = cms.int32(1)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(0.51, 0.86, 1.87),
                    nPUVtx = cms.int32(2)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(0.52, 0.86, 1.87),
                    nPUVtx = cms.int32(3)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(0.52, 0.86, 1.87),
                    nPUVtx = cms.int32(4)
                )),
            defaultBinning = cms.vdouble(0.52, 0.86, 1.87),
            plugin = cms.string('RecoTauDiscriminationBinnedTrackIsolation')
        )
    ),
    mvas = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        mvaLabel = cms.string('1prong0pi0'),
        nCharged = cms.uint32(1)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            mvaLabel = cms.string('1prong1pi0'),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(2),
            mvaLabel = cms.string('1prong2pi0'),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            mvaLabel = cms.string('3prong0pi0'),
            nCharged = cms.uint32(3)
        )),
    PFTauProducer = cms.InputTag("combinatoricRecoTaus"),
    remapOutput = cms.bool(True),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    dbLabel = cms.string('hpstanc')
)


process.combinatoricRecoTausHPSSelector = cms.EDProducer("PFRecoTauDiscriminationByHPSSelection",
    src = cms.InputTag("combinatoricRecoTaus"),
    PFTauProducer = cms.InputTag("combinatoricRecoTaus"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    minTauPt = cms.double(5.0),
    coneSizeFormula = cms.string('0.3'),
    decayModes = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        minMass = cms.double(-1000.0),
        maxMass = cms.string('1.'),
        nCharged = cms.uint32(1)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            assumeStripMass = cms.double(0.1349),
            minMass = cms.double(0.3),
            maxMass = cms.string('max(1.3, min(1.3*sqrt(pt/200.), 2.1))'),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            minPi0Mass = cms.double(0.05),
            maxMass = cms.string('max(1.2, min(1.2*sqrt(pt/200.), 2.0))'),
            maxPi0Mass = cms.double(0.2),
            nPiZeros = cms.uint32(2),
            minMass = cms.double(0.4),
            nCharged = cms.uint32(1),
            assumeStripMass = cms.double(0.0)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            minMass = cms.double(0.8),
            maxMass = cms.string('1.5'),
            nCharged = cms.uint32(3)
        )),
    matchingCone = cms.double(0.1)
)


process.combinatoricRecoTausTancTransform = cms.EDProducer("RecoTauMVATransform",
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    transforms = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        transform = cms.PSet(
            max = cms.double(1.99833333333),
            transform = cms.vdouble( (0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243693947972, 0.2446621342, 
                0.25648929965, 0.2608766459, 0.265139843949, 0.268288096025, 0.271490633611, 
                0.274812027295, 0.278726505561, 0.283196361675, 0.287921047203, 0.293485065795, 
                0.299327353484, 0.305468394708, 0.310410038477, 0.315654364298, 0.320865024837, 
                0.324875648584, 0.328691660974, 0.332598633349, 0.336484807993, 0.339893814351, 
                0.343528868912, 0.346311138119, 0.348525259682, 0.350638868762, 0.352500481165, 
                0.354385202603, 0.356405103778, 0.358448162743, 0.359626155068, 0.361359527277, 
                0.362911630832, 0.364767207965, 0.365568276809, 0.367161876825, 0.368245783665, 
                0.369700987138, 0.370891835827, 0.371335926598, 0.372724067775, 0.374122626292, 
                0.374872824273, 0.376287585272, 0.377808481377, 0.379437962659, 0.380385427158, 
                0.381454465894, 0.382529530437, 0.383308773065, 0.383900643462, 0.384488881534, 
                0.385284008411, 0.385778244795, 0.386880706208, 0.387787417873, 0.389206336729, 
                0.390430843456, 0.391560096158, 0.392490239284, 0.393218300975, 0.394889524946, 
                0.396474094424, 0.397328157396, 0.398823062781, 0.400437280424, 0.401846875958, 
                0.402719262685, 0.403705236447, 0.40437725886, 0.405483096559, 0.40715324019, 
                0.408161946716, 0.408949958358, 0.410194428622, 0.411674966358, 0.412726139917, 
                0.413994836217, 0.414922434459, 0.415970963664, 0.417494895799, 0.418345516985, 
                0.419769194149, 0.42120259427, 0.423008169722, 0.424220511323, 0.425684525769, 
                0.426912279039, 0.428023327968, 0.429389155258, 0.430889124801, 0.432147128025, 
                0.433793555744, 0.435196517338, 0.436351162787, 0.437253465009, 0.438419065687, 
                0.439590897333, 0.440949213705, 0.441921470289, 0.442848592497, 0.44396524306, 
                0.445223842049, 0.446977728682, 0.448745488265, 0.451078381688, 0.451907557714, 
                0.452739787751, 0.453638395261, 0.45475822595, 0.456165813144, 0.457223834211, 
                0.457934807034, 0.45922014571, 0.461017229233, 0.461451032994, 0.463048655665, 
                0.464804181316, 0.466425147476, 0.467542494191, 0.468517661795, 0.470468799941, 
                0.47198076935, 0.472892624736, 0.474420238705, 0.476266453893, 0.477505267649, 
                0.479532143347, 0.481200116592, 0.481613637289, 0.483360304775, 0.485061449421, 
                0.487101659613, 0.488019909526, 0.488999144832, 0.490200759674, 0.491190516798, 
                0.493849514855, 0.495306102206, 0.495928489713, 0.4964353883, 0.498082556741, 
                0.49979254034, 0.500775976586, 0.502679733683, 0.504598020717, 0.505078487853, 
                0.506619141507, 0.508171974823, 0.509336469886, 0.510953930915, 0.512581697566, 
                0.513998315702, 0.515647034962, 0.515939613111, 0.517975069449, 0.519430445753, 
                0.519957296262, 0.521273324958, 0.522406663349, 0.523925469498, 0.524625850033, 
                0.525907581275, 0.527065315655, 0.52822815856, 0.528783474767, 0.529145626115, 
                0.529453767868, 0.530435650231, 0.532014259582, 0.532782125184, 0.534528955521, 
                0.535733634238, 0.539584530704, 0.541410067901, 0.543682312792, 0.545138243861, 
                0.546811742597, 0.548048893429, 0.548459504636, 0.550158093752, 0.551205716597, 
                0.552261157841, 0.553773021814, 0.554620522074, 0.557022425024, 0.558787346691, 
                0.55989408991, 0.562351160997, 0.564603650808, 0.567330572538, 0.568251047692, 
                0.570322191691, 0.570800554836, 0.573840553165, 0.575722428922, 0.578806943369, 
                0.580018988744, 0.581943439091, 0.583637839285, 0.583719886077, 0.585230062162, 
                0.586459819001, 0.58819018682, 0.589432428675, 0.590707557501, 0.59199058109, 
                0.593311935901, 0.596143502405, 0.598713047084, 0.59985869618, 0.60146038335, 
                0.603073645068, 0.60364159568, 0.605493798425, 0.607716165748, 0.611539567166, 
                0.61344596304, 0.614868728468, 0.616356298487, 0.617243661796, 0.618356139972, 
                0.620433033442, 0.623603658141, 0.625027738979, 0.626745245057, 0.630061473707, 
                0.634451273629, 0.636224368987, 0.638386932974, 0.639666729708, 0.641472541416, 
                0.643376129813, 0.645998175052, 0.648651724655, 0.650614385321, 0.651964427491, 
                0.654372246094, 0.656912558238, 0.657658356547, 0.658734274882, 0.661006291486, 
                0.663094362812, 0.664860224717, 0.667639986138, 0.669224738703, 0.670609710516, 
                0.672008536945, 0.674322956904, 0.676181757848, 0.680504320591, 0.681701882298, 
                0.683847428048, 0.687028204213, 0.690096183579, 0.692936565842, 0.698333032093, 
                0.702469873766, 0.704533440299, 0.706621657637, 0.710308262591, 0.713270705866, 
                0.714865826284, 0.719086552707, 0.722147885763, 0.725885046087, 0.729450681758, 
                0.732859861331, 0.739185288999, 0.743172463789, 0.74657896386, 0.751327840506, 
                0.754658774214, 0.758047388164, 0.762059448212, 0.769914558551, 0.775838239214, 
                0.780728907111, 0.786952215918, 0.793694146175, 0.796885300439, 0.802863959078, 
                0.813001141474, 0.820597251397, 0.829350775725, 0.837460143471, 0.84199323298, 
                0.847433416989, 0.854638027367, 0.860714284529, 0.869959964541, 0.876007819869, 
                0.884455823419, 0.896538436371, 0.904016005807, 0.910382232961, 0.916770946986, 
                0.93386870405, 0.943467586229, 0.95165443966, 0.971789456433, 0.970755563959, 
                0.9679163435, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0 ) ),
            min = cms.double(-0.998333333333)
        ),
        nCharged = cms.uint32(3)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            transform = cms.PSet(
                max = cms.double(1.99833333333),
                transform = cms.vdouble( (0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725625489751, 0.725917318629, 0.727526582607, 
                    0.745748231906, 0.750169168536, 0.757185219071, 0.764249672036, 0.767603981959, 
                    0.772574492642, 0.775097031572, 0.777704615235, 0.779407980465, 0.781767581973, 
                    0.784842584326, 0.786420654919, 0.787883166617, 0.790123535551, 0.79208138528, 
                    0.79327247227, 0.795907708578, 0.798503646112, 0.800206834461, 0.802663946447, 
                    0.8031582666, 0.80490222571, 0.806889568691, 0.809394028316, 0.811861583702, 
                    0.813019057268, 0.81342095915, 0.814698723372, 0.816279445985, 0.818232037783, 
                    0.819367026875, 0.819759858707, 0.821328989638, 0.822878675172, 0.82364763472, 
                    0.825358996088, 0.828499118125, 0.829830087025, 0.831236000117, 0.832703495507, 
                    0.833414247004, 0.834436344112, 0.834946785624, 0.835869791486, 0.836486520822, 
                    0.837364626557, 0.838193318858, 0.839702591039, 0.841531457051, 0.842218371935, 
                    0.843640339114, 0.844222988069, 0.845392038566, 0.846778761898, 0.84769605779, 
                    0.848073950379, 0.848849957765, 0.849494110293, 0.8500905241, 0.851335675181, 
                    0.853500950651, 0.853839833615, 0.854227213103, 0.854567621296, 0.854984559013, 
                    0.855203285083, 0.856470785047, 0.857475859603, 0.85892685241, 0.859008202829, 
                    0.859451257957, 0.860468389831, 0.861489507276, 0.861351261404, 0.861705874851, 
                    0.861659795003, 0.861659795003, 0.86179137032, 0.862147375366, 0.862550177315, 
                    0.863312092458, 0.863805642705, 0.864438066642, 0.864754370118, 0.865480701328, 
                    0.866346092335, 0.867168965701, 0.867397571488, 0.868313201223, 0.868771741382, 
                    0.869186401202, 0.86983185136, 0.869929474522, 0.870346507695, 0.870951429469, 
                    0.870863388987, 0.871514279263, 0.872166654676, 0.872355339191, 0.872776974093, 
                    0.873155878735, 0.873579101025, 0.874003066865, 0.873916467734, 0.874211597253, 
                    0.874402872188, 0.87510742975, 0.87525648792, 0.87525648792, 0.875448860228, 
                    0.875598481234, 0.875512416378, 0.87617785231, 0.87617785231, 0.876371452215, 
                    0.877233539228, 0.877818409805, 0.87840545558, 0.87840545558, 0.878601622981, 
                    0.878601622981, 0.879472984901, 0.879712328244, 0.87982581203, 0.879981638026, 
                    0.880179766123, 0.880378141371, 0.880534852587, 0.880691869776, 0.8811323429, 
                    0.881090533252, 0.881531917098, 0.881732079801, 0.8822162463, 0.882902187113, 
                    0.882979722574, 0.88403281278, 0.885010261835, 0.884928594333, 0.885132644083, 
                    0.885050953876, 0.88525535544, 0.886362380543, 0.886487219509, 0.886652934413, 
                    0.887232935079, 0.887728512003, 0.888561331939, 0.889019284728, 0.889438266521, 
                    0.890358658388, 0.890120720891, 0.890292192785, 0.890675834925, 0.890556765164, 
                    0.890981544778, 0.891699669632, 0.891660238395, 0.891969519877, 0.892319678993, 
                    0.892161931402, 0.892513711208, 0.892729546909, 0.893162065429, 0.893339503795, 
                    0.893339503795, 0.893656248099, 0.894427465173, 0.894606969217, 0.894825762437, 
                    0.894928163898, 0.895703822513, 0.89622167567, 0.896663385868, 0.897404545302, 
                    0.89769650475, 0.899189293203, 0.899525558799, 0.900803884235, 0.901822547362, 
                    0.901939302648, 0.902926505697, 0.903082359676, 0.904038745128, 0.90469561985, 
                    0.904927332682, 0.905283513893, 0.906828000044, 0.907062493553, 0.908109372415, 
                    0.908783021349, 0.90898498498, 0.910379224289, 0.911372920866, 0.911751863015, 
                    0.912477297669, 0.913239550237, 0.91300238707, 0.913422855139, 0.915063352192, 
                    0.916893920936, 0.916979020829, 0.91791358353, 0.918350995783, 0.918790342789, 
                    0.919328152961, 0.919993298628, 0.920982245955, 0.922524618114, 0.923591109364, 
                    0.924018850534, 0.924248923821, 0.924479515826, 0.925498182241, 0.926493584801, 
                    0.927436921962, 0.927911825271, 0.928716526512, 0.929225746944, 0.929920622352, 
                    0.931640820211, 0.931772433588, 0.932293506679, 0.932760264784, 0.93386870405, 
                    0.934480569506, 0.934731886916, 0.935797384751, 0.936588472051, 0.936817507478, 
                    0.937277790773, 0.938339506605, 0.938808219887, 0.93993649209, 0.94020045716, 
                    0.940781492864, 0.941047196853, 0.942510417566, 0.942629939, 0.942750378489, 
                    0.943616386541, 0.944163684906, 0.945338814696, 0.945845741457, 0.946028661789, 
                    0.946308362468, 0.946541150838, 0.946751152357, 0.947576555912, 0.948029352938, 
                    0.94826905955, 0.948081416726, 0.949376743021, 0.94926144862, 0.949775296374, 
                    0.949706301122, 0.951268968863, 0.953037066674, 0.95357532021, 0.953770570793, 
                    0.953640586734, 0.953509869657, 0.954300159882, 0.955476996866, 0.956207587781, 
                    0.956355833165, 0.956846568485, 0.957770053042, 0.958723171834, 0.958928454571, 
                    0.959445187694, 0.959807967592, 0.959442259047, 0.960697132989, 0.961203278228, 
                    0.963193467582, 0.963932365293, 0.964461162833, 0.964482886627, 0.96526433234, 
                    0.966030150632, 0.966856588211, 0.969491617691, 0.970743493871, 0.972389419268, 
                    0.973307337131, 0.975623617612, 0.976087161844, 0.975647899082, 0.976736074007, 
                    0.979440008803, 0.981271208497, 0.982207028661, 0.984863078211, 0.986956530647, 
                    0.990258251858, 0.990208776979, 0.990702226892, 0.993228159625, 0.99534336087, 
                    0.996696237239, 0.995185049087, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0 ) ),
                min = cms.double(-0.998333333333)
            ),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            transform = cms.PSet(
                max = cms.double(1.99833333333),
                transform = cms.vdouble( (0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.786753288885, 0.788132324416, 0.79656141615, 0.810183644995, 
                    0.858360829913, 0.862298212616, 0.867110980413, 0.871372861265, 0.875682014578, 
                    0.880242297589, 0.883696978098, 0.885512278829, 0.887768921813, 0.889264020585, 
                    0.89119925019, 0.892452552697, 0.893185095837, 0.893419577074, 0.894898998675, 
                    0.895774783109, 0.896260903725, 0.896505707407, 0.898082672851, 0.898779137453, 
                    0.89979939771, 0.900120276805, 0.900442301311, 0.900314253861, 0.90063761708, 
                    0.903107169678, 0.903707364412, 0.904624297652, 0.90437518453, 0.904187494019, 
                    0.904648539996, 0.905849328721, 0.90625146477, 0.906593041173, 0.906284313013, 
                    0.906627709554, 0.906627709554, 0.907095652088, 0.906972372385, 0.907318308525, 
                    0.907603995571, 0.907357055463, 0.907233089763, 0.907994846936, 0.908883949265, 
                    0.908883949265, 0.909836831321, 0.909836831321, 0.909776114594, 0.911030037809, 
                    0.911509901723, 0.911871023987, 0.911811279009, 0.911751452972, 0.911691545709, 
                    0.911511334909, 0.911451101085, 0.912784331406, 0.9125455069, 0.9125455069, 
                    0.91297278083, 0.912853317543, 0.912673506387, 0.913592984461, 0.915007651179, 
                    0.915441697726, 0.915324604996, 0.915207187526, 0.915148356591, 0.91552593882, 
                    0.915467174967, 0.9154083293, 0.915290391839, 0.915231299701, 0.915728896806, 
                    0.915728896806, 0.915552071941, 0.916492320764, 0.917377950283, 0.917822427143, 
                    0.918268017622, 0.91871472591, 0.919668295227, 0.919611512782, 0.919554650007, 
                    0.919440682785, 0.919269125195, 0.921306876156, 0.921306876156, 0.921082297245, 
                    0.920969526416, 0.921426208902, 0.921939970027, 0.921939970027, 0.922343069964, 
                    0.923319759486, 0.923727168952, 0.923727168952, 0.92460140151, 0.924492316338, 
                    0.924959238052, 0.926474177051, 0.926474177051, 0.926420752856, 0.926313671218, 
                    0.926785714713, 0.926785714713, 0.926785714713, 0.926732331515, 0.926732331515, 
                    0.926571713811, 0.927521701059, 0.927468561656, 0.927998554333, 0.927945695605, 
                    0.929008220067, 0.928746371941, 0.928693770351, 0.928641091039, 0.929607013105, 
                    0.929554832769, 0.930039996532, 0.93101417799, 0.931554211882, 0.932636161324, 
                    0.932585903271, 0.932585903271, 0.93357188521, 0.933522156167, 0.933967924145, 
                    0.933769185329, 0.934766776762, 0.935267583538, 0.935169629185, 0.935672412756, 
                    0.936176553451, 0.936176553451, 0.93779194569, 0.937554472402, 0.937458974653, 
                    0.937411116161, 0.937970225775, 0.938435668089, 0.938341043455, 0.938341043455, 
                    0.938903099624, 0.93885608225, 0.938808992455, 0.938714594933, 0.939278948765, 
                    0.940409694612, 0.940363611919, 0.940363611919, 0.940884673949, 0.940838860114, 
                    0.940700991551, 0.941179107659, 0.941750185868, 0.941750185868, 0.942276966885, 
                    0.943290568826, 0.943822114749, 0.944267645451, 0.944223792272, 0.944223792272, 
                    0.944223792272, 0.944223792272, 0.944135878551, 0.944091817682, 0.943959217069, 
                    0.944948988041, 0.944817531021, 0.945185418124, 0.945774534438, 0.946869842865, 
                    0.94678443912, 0.947292782482, 0.947803406812, 0.948955745704, 0.949513262437, 
                    0.949431324505, 0.949349120177, 0.949787213059, 0.950350748429, 0.951522477849, 
                    0.952051228023, 0.95197239226, 0.951813940452, 0.951734321829, 0.952189098377, 
                    0.952726227521, 0.952647494583, 0.953226869405, 0.953148724357, 0.95303101596, 
                    0.953497250008, 0.954122169792, 0.954006075021, 0.954594998037, 0.955778170341, 
                    0.955740668477, 0.957457733339, 0.958697023242, 0.958590781777, 0.958519649968, 
                    0.959665182275, 0.960242079268, 0.960242079268, 0.960855701368, 0.960787753107, 
                    0.961370655681, 0.961269567079, 0.961823203605, 0.963730727425, 0.963634885553, 
                    0.963570709071, 0.964138473298, 0.964106695414, 0.96404297039, 0.963914839098, 
                    0.963882663464, 0.96452094996, 0.964361812095, 0.96497328025, 0.965587812399, 
                    0.966174859102, 0.966052013818, 0.966021162949, 0.968018795469, 0.96867865254, 
                    0.968592547647, 0.96914294659, 0.969057430126, 0.969000155331, 0.970289180287, 
                    0.971618144708, 0.971511684075, 0.972907637123, 0.972856607143, 0.972753968298, 
                    0.972676478315, 0.973344727784, 0.973217439385, 0.973917083716, 0.973842007934, 
                    0.973791716846, 0.974496912029, 0.974447701286, 0.974373528048, 0.974273957942, 
                    0.974198771106, 0.974791150217, 0.975488253999, 0.976165676348, 0.977513433798, 
                    0.977332925695, 0.978053351441, 0.978734902423, 0.97864854949, 0.979275680612, 
                    0.979190505138, 0.979039751165, 0.978974471583, 0.978886796984, 0.980438334358, 
                    0.981887328142, 0.982567303114, 0.983312443593, 0.983168209088, 0.983021459539, 
                    0.98366063828, 0.983606342672, 0.983441268961, 0.983291720735, 0.985747459607, 
                    0.985615866821, 0.988157949486, 0.988031989052, 0.987786602856, 0.988507380959, 
                    0.988364321833, 0.988127868612, 0.987928555371, 0.987641272072, 0.987408197679, 
                    0.98704162283, 0.986691071046, 0.986360943929, 0.987048151948, 0.989952686544, 
                    0.991766844123, 0.992193166195, 0.99456966538, 0.995655052048, 0.994746673755, 
                    0.993062299865, 0.995491593707, 0.993997811711, 0.991951166261, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0 ) ),
                min = cms.double(-0.998333333333)
            ),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(2),
            transform = cms.PSet(
                max = cms.double(1.99833333333),
                transform = cms.vdouble( (0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320785409267, 0.320785409267, 0.320785409267, 
                    0.320967688479, 0.32115017496, 0.32115017496, 0.32115017496, 0.32115017496, 
                    0.321332869066, 0.321607300294, 0.321790515012, 0.322065728828, 0.322709728783, 
                    0.337811096719, 0.33917314626, 0.341489359417, 0.343051156809, 0.344690580804, 
                    0.34605531485, 0.347729452006, 0.349352972192, 0.351698761571, 0.354076266303, 
                    0.356364861761, 0.357459291064, 0.358806090169, 0.360659074159, 0.361655179522, 
                    0.363285639001, 0.363823848893, 0.365224296488, 0.366635567078, 0.368317558281, 
                    0.36949108301, 0.370409007364, 0.370997606343, 0.372726361337, 0.373488515297, 
                    0.374412657806, 0.375752608537, 0.377534910678, 0.378625338634, 0.379181030815, 
                    0.379877944035, 0.382266731549, 0.382549741971, 0.383828491978, 0.38525242259, 
                    0.386835650852, 0.38785063627, 0.389317222671, 0.390498501728, 0.392134514369, 
                    0.392433445129, 0.393938724972, 0.395003106909, 0.395165758646, 0.395929379967, 
                    0.396695958257, 0.397011143016, 0.398247378442, 0.399356983741, 0.399994683207, 
                    0.401254354869, 0.40236309389, 0.403477977186, 0.404278112546, 0.405403648355, 
                    0.406718341929, 0.408044942586, 0.409053791836, 0.409879342767, 0.410568240656, 
                    0.411067477386, 0.412572498902, 0.413612340683, 0.414628216181, 0.41718987191, 
                    0.417878334739, 0.41856907358, 0.419300644011, 0.420520753157, 0.420777117228, 
                    0.422716149289, 0.423248081689, 0.424315972822, 0.425568676714, 0.426697968924, 
                    0.427784748237, 0.428512348538, 0.429242428143, 0.430526071506, 0.4311350135, 
                    0.432803583714, 0.433609675616, 0.434608917639, 0.436308891919, 0.436878509184, 
                    0.437640316502, 0.438596319943, 0.440520911858, 0.441683795845, 0.443048277506, 
                    0.444696219849, 0.446478472767, 0.44715804854, 0.448645092811, 0.450058431683, 
                    0.450666877959, 0.450755388115, 0.451660727674, 0.452685605028, 0.453508861839, 
                    0.455164391331, 0.456611329026, 0.456920461171, 0.457863702358, 0.45902581005, 
                    0.459451411686, 0.460410936031, 0.461808077134, 0.4630001435, 0.46452516501, 
                    0.465632370863, 0.466972634942, 0.467639712811, 0.468206417853, 0.469000443277, 
                    0.470125946746, 0.471938031657, 0.473437184975, 0.474815974144, 0.475643583896, 
                    0.477037107394, 0.478345116523, 0.479756398109, 0.482127131145, 0.483321305722, 
                    0.484827612962, 0.485378450947, 0.486839313932, 0.488800865348, 0.488631796262, 
                    0.489784626283, 0.49019813266, 0.490696455307, 0.492699918902, 0.493707798202, 
                    0.495481544763, 0.497780890453, 0.499067549901, 0.499842743245, 0.501067711008, 
                    0.501110885208, 0.503739653301, 0.504533670387, 0.507669169039, 0.508207246665, 
                    0.510099534144, 0.511125093239, 0.513041788431, 0.514972912765, 0.517927881794, 
                    0.519848789077, 0.52116702462, 0.522598588906, 0.524038039421, 0.524905522273, 
                    0.525729939569, 0.527349110611, 0.528189103375, 0.529884063982, 0.531038635091, 
                    0.531258876588, 0.533372518417, 0.532652261497, 0.533222445036, 0.533832435241, 
                    0.534714171593, 0.536561182549, 0.536184284139, 0.538295230995, 0.539204274194, 
                    0.539743792118, 0.542257448251, 0.543191981222, 0.54415669717, 0.545124845911, 
                    0.546421082543, 0.548704392123, 0.551006864138, 0.551639517385, 0.554308295208, 
                    0.554286639155, 0.555277851271, 0.557294734318, 0.558661984326, 0.560735788966, 
                    0.561777981725, 0.56352691872, 0.56493793563, 0.567793486879, 0.568888208725, 
                    0.57034433091, 0.570356276084, 0.572191934216, 0.573659294894, 0.574044772549, 
                    0.575543527534, 0.577054482298, 0.578553389267, 0.580816407199, 0.582777514902, 
                    0.58546601664, 0.587013469943, 0.586699955875, 0.587164603914, 0.589909772096, 
                    0.590347109603, 0.591182964289, 0.593622213241, 0.595632610766, 0.596088895792, 
                    0.596547219627, 0.597007595967, 0.59905000376, 0.59875479532, 0.600402032492, 
                    0.601476624751, 0.602375325225, 0.604611692334, 0.606308877758, 0.609454442616, 
                    0.612487831768, 0.615198564485, 0.616345932738, 0.617679752716, 0.620364786891, 
                    0.621560433387, 0.622923085077, 0.622771613804, 0.627021967049, 0.629464905691, 
                    0.630636176618, 0.632414811477, 0.635412621765, 0.636860801036, 0.638359784998, 
                    0.642296739762, 0.64372019874, 0.646732193739, 0.649419880322, 0.653004922396, 
                    0.654536589972, 0.657493324695, 0.65872664624, 0.662116021475, 0.666837437051, 
                    0.668332370106, 0.670194812833, 0.671514734427, 0.671514734427, 0.672844093862, 
                    0.672352092845, 0.678607302272, 0.681605563269, 0.681020472505, 0.682082800049, 
                    0.684848783291, 0.686959317553, 0.690918830645, 0.691984674993, 0.694695530605, 
                    0.697455651971, 0.700496795416, 0.703736816672, 0.704917801757, 0.706220722464, 
                    0.707858889942, 0.71018130526, 0.714321429016, 0.720425948473, 0.724503155871, 
                    0.727977004139, 0.730714468803, 0.735012362904, 0.739735756402, 0.750660954162, 
                    0.757799352464, 0.760515374245, 0.768004247792, 0.77935327172, 0.784646260495, 
                    0.789164336822, 0.791123170072, 0.795276817521, 0.804299018936, 0.819103217408, 
                    0.822961151625, 0.833298258018, 0.842807182616, 0.85334688934, 0.86724344838, 
                    0.872176831791, 0.87195156781, 0.87843961359, 0.891494313173, 0.912879175226, 
                    0.924218217451, 0.937234161591, 0.94206607914, 0.958884557005, 0.959595443343, 
                    0.93904371889, 0.927733482302, 0.93386870405, 0.916051159827, 0.943467586229, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0 ) ),
                min = cms.double(-0.998333333333)
            ),
            nCharged = cms.uint32(1)
        )),
    toTransform = cms.InputTag("combinatoricRecoTausDiscriminationByTanc"),
    PFTauProducer = cms.InputTag("combinatoricRecoTaus")
)


process.combinedInclusiveSecondaryVertexBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('combinedSecondaryVertex'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"), cms.InputTag("inclusiveSecondaryVertexFinderTagInfos"))
)


process.combinedInclusiveSecondaryVertexPositiveBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('combinedSecondaryVertexPositive'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"), cms.InputTag("inclusiveSecondaryVertexFinderTagInfos"))
)


process.combinedMVABJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('combinedMVA'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"), cms.InputTag("secondaryVertexTagInfos"), cms.InputTag("softPFMuonsTagInfos"), cms.InputTag("softPFElectronsTagInfos"))
)


process.combinedSecondaryVertexBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('combinedSecondaryVertex'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"), cms.InputTag("secondaryVertexTagInfos"))
)


process.combinedSecondaryVertexBJetTagsAODPFlow = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('combinedSecondaryVertex'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfosAODPFlow"), cms.InputTag("secondaryVertexTagInfosAODPFlow"))
)


process.combinedSecondaryVertexBJetTagsAODPFlowLoose = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('combinedSecondaryVertex'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfosAODPFlowLoose"), cms.InputTag("secondaryVertexTagInfosAODPFlowLoose"))
)


process.combinedSecondaryVertexBJetTagsCA15MassDropFilteredPF = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('combinedSecondaryVertex'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfosCA15MassDropFilteredPF"), cms.InputTag("secondaryVertexTagInfosCA15MassDropFilteredPF"))
)


process.combinedSecondaryVertexBJetTagsCA15MassDropFilteredSubjetsPF = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('combinedSecondaryVertex'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfosCA15MassDropFilteredSubjetsPF"), cms.InputTag("secondaryVertexTagInfosCA15MassDropFilteredSubjetsPF"))
)


process.combinedSecondaryVertexBJetTagsCA8PF = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('combinedSecondaryVertex'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfosCA8PF"), cms.InputTag("secondaryVertexTagInfosCA8PF"))
)


process.combinedSecondaryVertexBJetTagsCA8PrunedPF = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('combinedSecondaryVertex'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfosCA8PrunedPF"), cms.InputTag("secondaryVertexTagInfosCA8PrunedPF"))
)


process.combinedSecondaryVertexBJetTagsCA8PrunedSubjetsPF = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('combinedSecondaryVertex'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfosCA8PrunedSubjetsPF"), cms.InputTag("secondaryVertexTagInfosCA8PrunedSubjetsPF"))
)


process.combinedSecondaryVertexBJetTagsCAHEPTopTagPF = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('combinedSecondaryVertex'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfosCAHEPTopTagPF"), cms.InputTag("secondaryVertexTagInfosCAHEPTopTagPF"))
)


process.combinedSecondaryVertexBJetTagsCAHEPTopTagSubjetsPF = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('combinedSecondaryVertex'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfosCAHEPTopTagSubjetsPF"), cms.InputTag("secondaryVertexTagInfosCAHEPTopTagSubjetsPF"))
)


process.combinedSecondaryVertexBJetTagsCATopTagPF = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('combinedSecondaryVertex'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfosCATopTagPF"), cms.InputTag("secondaryVertexTagInfosCATopTagPF"))
)


process.combinedSecondaryVertexBJetTagsCATopTagSubjetsPF = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('combinedSecondaryVertex'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfosCATopTagSubjetsPF"), cms.InputTag("secondaryVertexTagInfosCATopTagSubjetsPF"))
)


process.combinedSecondaryVertexMVABJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('combinedSecondaryVertexMVA'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"), cms.InputTag("secondaryVertexTagInfos"))
)


process.combinedSecondaryVertexNegativeBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('combinedSecondaryVertexNegative'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"), cms.InputTag("secondaryVertexNegativeTagInfos"))
)


process.combinedSecondaryVertexPositiveBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('combinedSecondaryVertexPositive'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"), cms.InputTag("secondaryVertexTagInfos"))
)


process.combinedSecondaryVertexSoftPFLeptonV1BJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('combinedSecondaryVertexSoftPFLeptonV1'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"), cms.InputTag("secondaryVertexTagInfos"), cms.InputTag("softPFMuonsTagInfos"), cms.InputTag("softPFElectronsTagInfos"))
)


process.combinedSecondaryVertexV1BJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('combinedSecondaryVertexV1'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"), cms.InputTag("secondaryVertexTagInfos"))
)


process.combinedSecondaryVertexV1NegativeBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('combinedSecondaryVertexV1Negative'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"), cms.InputTag("secondaryVertexNegativeTagInfos"))
)


process.combinedSecondaryVertexV1PositiveBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('combinedSecondaryVertexV1Positive'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"), cms.InputTag("secondaryVertexTagInfos"))
)


process.decaySubset = cms.EDProducer("TopDecaySubset",
    src = cms.InputTag("genParticles"),
    fillMode = cms.string('kStable'),
    addRadiation = cms.bool(True)
)


process.doubleSecondaryVertexHighEffBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('doubleVertex2Trk'),
    tagInfos = cms.VInputTag(cms.InputTag("inclusiveSecondaryVertexFinderFilteredTagInfos"))
)


process.eidCutBasedExt = cms.EDProducer("EleIdCutBasedExtProducer",
    electronQuality = cms.string('loose'),
    classbasedtightEleIDCutsV02 = cms.PSet(
        cutisohcal = cms.vdouble(10.9, 7.01, 8.75, 3.51, 7.75, 
            1.62, 11.6, 9.9, 4.97, 5.33, 
            3.18, 2.32, 0.164, 5.46, 12.0, 
            0.00604, 4.1, 0.000628),
        cutmishits = cms.vdouble(5.5, 1.5, 0.5, 1.5, 2.5, 
            0.5, 3.5, 5.5, 0.5, 0.5, 
            0.5, 0.5, 0.5, 1.5, 0.5, 
            0.5, 0.5, 0.5),
        cuthoe = cms.vdouble(0.0871, 0.0289, 0.0783, 0.0946, 0.0245, 
            0.0363, 0.0671, 0.048, 0.0614, 0.0924, 
            0.0158, 0.049, 0.0382, 0.0915, 0.0451, 
            0.0452, 0.00196, 0.0043),
        cutdeta = cms.vdouble(0.00915, 0.00302, 0.0061, 0.0135, 0.00565, 
            0.00793, 0.0102, 0.00266, 0.0106, 0.00903, 
            0.00766, 0.00723, 0.0116, 0.00203, 0.00659, 
            0.0148, 0.00555, 0.0128),
        cuteopin = cms.vdouble(0.878, 0.859, 0.874, 0.944, 0.737, 
            0.773, 0.86, 0.967, 0.917, 0.812, 
            0.915, 1.01, 0.847, 0.953, 0.979, 
            0.841, 0.771, 1.09),
        cutip = cms.vdouble(0.0239, 0.027, 0.0768, 0.0231, 0.178, 
            0.0957, 0.0102, 0.0168, 0.043, 0.0166, 
            0.0594, 0.0308, 2.1, 0.00527, 3.17, 
            4.91, 0.769, 5.9),
        cutisotk = cms.vdouble(6.53, 4.6, 6.0, 8.63, 3.11, 
            7.77, 5.42, 4.81, 4.06, 6.47, 
            2.8, 3.45, 5.29, 5.18, 15.4, 
            5.38, 4.47, 0.0347),
        cutsee = cms.vdouble(0.0131, 0.0106, 0.0115, 0.0306, 0.028, 
            0.0293, 0.0131, 0.0106, 0.0115, 0.0317, 
            0.029, 0.0289, 0.0142, 0.0106, 0.0103, 
            0.035, 0.0296, 0.0333),
        cutdphi = cms.vdouble(0.0369, 0.0307, 0.117, 0.0475, 0.0216, 
            0.117, 0.0372, 0.0246, 0.0426, 0.0612, 
            0.0142, 0.039, 0.0737, 0.0566, 0.0359, 
            0.0187, 0.012, 0.0358),
        cutisoecal = cms.vdouble(20.0, 27.2, 4.48, 13.5, 4.56, 
            3.19, 12.2, 13.1, 7.42, 7.67, 
            4.12, 4.85, 10.1, 12.4, 11.1, 
            11.0, 10.6, 13.4)
    ),
    classbasedtightEleIDCutsV03 = cms.PSet(
        cutdetain = cms.vdouble(0.00811, 0.00341, 0.00633, 0.0103, 0.00667, 
            0.01, 0.0106, 0.0145, 0.0163, 0.0076, 
            0.00259, 0.00511, 0.00941, 0.0043, 0.00857, 
            0.012, 0.0169, 0.00172, 0.00861, 0.00362, 
            0.00601, 0.00925, 0.00489, 0.00832, 0.0119, 
            0.0169, 0.000996),
        cutiso_sum = cms.vdouble(11.8, 8.31, 6.26, 6.18, 3.28, 
            4.38, 4.17, 5.4, 1.57, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0213, 0.0422, 0.0632, 0.0361, 0.073, 
            0.126, 0.171, 0.119, 0.0372, 0.0131, 
            0.0146, 0.0564, 0.0152, 0.0222, 0.0268, 
            0.0314, 0.0884, 0.00374, 0.00852, 0.00761, 
            0.0143, 0.0106, 0.0127, 0.0119, 0.0123, 
            0.0235, 0.00363),
        cuthoe = cms.vdouble(0.0783, 0.0387, 0.105, 0.118, 0.0227, 
            0.062, 0.13, 2.47, 0.38, 0.0888, 
            0.0503, 0.0955, 0.0741, 0.015, 0.03, 
            0.589, 1.13, 0.612, 0.0494, 0.0461, 
            0.0292, 0.0369, 0.0113, 0.0145, 0.124, 
            2.05, 0.61),
        cutfmishits = cms.vdouble(2.5, 1.5, 1.5, 1.5, 1.5, 
            0.5, 2.5, 0.5, 0.5, 2.5, 
            1.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5, -0.5, 2.5, 1.5, 
            0.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(13.7, 11.6, 7.14, 9.98, 3.52, 
            4.87, 6.24, 7.96, 2.53, 11.2, 
            11.9, 7.88, 8.16, 5.58, 5.03, 
            11.4, 8.15, 5.79, 10.4, 11.1, 
            10.4, 7.47, 5.08, 5.9, 11.8, 
            14.1, 11.7),
        cutdcotdist = cms.vdouble(0.0393, 0.0256, 0.00691, 0.0394, 0.0386, 
            0.039, 0.0325, 0.0384, 0.0382, 0.0245, 
            0.000281, 5.46e-05, 0.0342, 0.0232, 0.00107, 
            0.0178, 0.0193, 0.000758, 0.000108, 0.0248, 
            0.000458, 0.0129, 0.00119, 0.0182, 4.53e-05, 
            0.0189, 0.000928),
        cutsee = cms.vdouble(0.0143, 0.0105, 0.0123, 0.0324, 0.0307, 
            0.0301, 0.0109, 0.027, 0.0292, 0.0133, 
            0.0104, 0.0116, 0.0332, 0.0296, 0.031, 
            0.00981, 0.0307, 0.072, 0.0149, 0.0105, 
            0.011, 0.0342, 0.0307, 0.0303, 0.00954, 
            0.0265, 0.0101),
        cuteseedopcor = cms.vdouble(0.784, 0.366, 0.57, 0.911, 0.298, 
            0.645, 0.51, 0.497, 0.932, 0.835, 
            0.968, 0.969, 0.923, 0.898, 0.98, 
            0.63, 0.971, 1.0, 0.515, 0.963, 
            0.986, 0.823, 0.879, 1.01, 0.931, 
            0.937, 1.05),
        cutdphiin = cms.vdouble(0.0404, 0.0499, 0.263, 0.042, 0.0484, 
            0.241, 0.242, 0.231, 0.286, 0.0552, 
            0.0338, 0.154, 0.0623, 0.0183, 0.0392, 
            0.0547, 0.0588, 0.00654, 0.042, 0.0217, 
            0.0885, 0.0445, 0.0141, 0.0234, 0.065, 
            0.0258, 0.0346),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 13.7, 13.2, 
            13.6, 14.2, 14.1, 13.9, 12.9, 
            14.9, 17.7)
    ),
    classbasedtightEleIDCutsV00 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.032, 0.016, 0.0525, 0.09, 0.025, 
            0.035, 0.065, 0.092),
        hOverE = cms.vdouble(0.05, 0.042, 0.045, 0.0, 0.055, 
            0.037, 0.05, 0.0),
        sigmaEtaEta = cms.vdouble(0.0125, 0.011, 0.01, 0.0, 0.0265, 
            0.0252, 0.026, 0.0),
        deltaEtaIn = cms.vdouble(0.0055, 0.003, 0.0065, 0.0, 0.006, 
            0.0055, 0.0075, 0.0),
        eSeedOverPin = cms.vdouble(0.24, 0.94, 0.11, 0.0, 0.32, 
            0.83, 0.0, 0.0)
    ),
    classbasedtightEleIDCutsV01 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.0225, 0.0114, 0.0234, 0.039, 0.0215, 
            0.0095, 0.0148, 0.0167),
        hOverE = cms.vdouble(0.056, 0.0221, 0.037, 0.0, 0.0268, 
            0.0102, 0.0104, 0.0),
        sigmaEtaEta = cms.vdouble(0.0095, 0.0094, 0.0094, 0.0, 0.026, 
            0.0257, 0.0246, 0.0),
        deltaEtaIn = cms.vdouble(0.0043, 0.00282, 0.0036, 0.0, 0.0066, 
            0.0049, 0.0041, 0.0),
        eSeedOverPin = cms.vdouble(0.32, 0.94, 0.221, 0.0, 0.74, 
            0.89, 0.66, 0.0)
    ),
    classbasedtightEleIDCutsV06 = cms.PSet(
        cutdetain = cms.vdouble(0.0116, 0.00449, 0.00938, 0.0184, 0.00678, 
            0.0109, 0.0252, 0.0268, 0.0139),
        cutiso_sum = cms.vdouble(15.5, 12.2, 12.2, 11.7, 7.16, 
            9.71, 8.66, 11.9, 2.98),
        cutip_gsf = cms.vdouble(0.0131, 0.0586, 0.0839, 0.0366, 0.452, 
            0.204, 0.0913, 0.0802, 0.0731),
        cutip_gsfl = cms.vdouble(0.0119, 0.0527, 0.0471, 0.0212, 0.233, 
            0.267, 0.109, 0.122, 0.0479),
        cuthoe = cms.vdouble(0.215, 0.0608, 0.147, 0.369, 0.0349, 
            0.102, 0.52, 0.422, 0.404),
        cutiso_sumoetl = cms.vdouble(6.21, 6.81, 5.3, 5.39, 2.73, 
            4.73, 4.84, 3.46, 3.73),
        cutfmishits = cms.vdouble(1.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 1.5, 2.5, 0.5),
        cuthoel = cms.vdouble(0.228, 0.0836, 0.143, 0.37, 0.0392, 
            0.0979, 0.3, 0.381, 0.339),
        cutdphiin = cms.vdouble(0.0897, 0.0993, 0.295, 0.0979, 0.151, 
            0.252, 0.341, 0.308, 0.328),
        cutseel = cms.vdouble(0.0132, 0.0117, 0.0112, 0.0387, 0.0281, 
            0.0287, 0.00987, 0.0296, 0.0544),
        cutiso_sumoet = cms.vdouble(11.9, 7.81, 6.28, 8.92, 4.65, 
            5.49, 9.36, 8.84, 5.94),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0145, 0.0116, 0.012, 0.039, 0.0297, 
            0.0311, 0.00987, 0.0347, 0.0917),
        cuteseedopcor = cms.vdouble(0.637, 0.943, 0.742, 0.748, 0.763, 
            0.631, 0.214, 0.873, 0.473),
        cutdphiinl = cms.vdouble(0.061, 0.14, 0.286, 0.0921, 0.197, 
            0.24, 0.333, 0.303, 0.258),
        cutdetainl = cms.vdouble(0.00816, 0.00401, 0.0081, 0.019, 0.00588, 
            0.00893, 0.0171, 0.0434, 0.0143)
    ),
    classbasedtightEleIDCutsV04 = cms.PSet(
        cutdetain = cms.vdouble(0.00811, 0.00341, 0.00633, 0.0103, 0.00667, 
            0.01, 0.0106, 0.0145, 0.0163, 0.0076, 
            0.00259, 0.00511, 0.00941, 0.0043, 0.00857, 
            0.012, 0.0169, 0.00172, 0.00861, 0.00362, 
            0.00601, 0.00925, 0.00489, 0.00832, 0.0119, 
            0.0169, 0.000996),
        cutiso_sum = cms.vdouble(11.8, 8.31, 6.26, 6.18, 3.28, 
            4.38, 4.17, 5.4, 1.57, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0213, 0.0422, 0.0632, 0.0361, 0.073, 
            0.126, 0.171, 0.119, 0.0372, 0.0131, 
            0.0146, 0.0564, 0.0152, 0.0222, 0.0268, 
            0.0314, 0.0884, 0.00374, 0.00852, 0.00761, 
            0.0143, 0.0106, 0.0127, 0.0119, 0.0123, 
            0.0235, 0.00363),
        cuthoe = cms.vdouble(0.0783, 0.0387, 0.105, 0.118, 0.0227, 
            0.062, 0.13, 2.47, 0.38, 0.0888, 
            0.0503, 0.0955, 0.0741, 0.015, 0.03, 
            0.589, 1.13, 0.612, 0.0494, 0.0461, 
            0.0292, 0.0369, 0.0113, 0.0145, 0.124, 
            2.05, 0.61),
        cutfmishits = cms.vdouble(2.5, 1.5, 1.5, 1.5, 1.5, 
            0.5, 2.5, 0.5, 0.5, 2.5, 
            1.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5, -0.5, 2.5, 1.5, 
            0.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(13.7, 11.6, 7.14, 9.98, 3.52, 
            4.87, 6.24, 7.96, 2.53, 11.2, 
            11.9, 7.88, 8.16, 5.58, 5.03, 
            11.4, 8.15, 5.79, 10.4, 11.1, 
            10.4, 7.47, 5.08, 5.9, 11.8, 
            14.1, 11.7),
        cutdcotdist = cms.vdouble(0.0393, 0.0256, 0.00691, 0.0394, 0.0386, 
            0.039, 0.0325, 0.0384, 0.0382, 0.0245, 
            0.000281, 5.46e-05, 0.0342, 0.0232, 0.00107, 
            0.0178, 0.0193, 0.000758, 0.000108, 0.0248, 
            0.000458, 0.0129, 0.00119, 0.0182, 4.53e-05, 
            0.0189, 0.000928),
        cutsee = cms.vdouble(0.0143, 0.0105, 0.0123, 0.0324, 0.0307, 
            0.0301, 0.0109, 0.027, 0.0292, 0.0133, 
            0.0104, 0.0116, 0.0332, 0.0296, 0.031, 
            0.00981, 0.0307, 0.072, 0.0149, 0.0105, 
            0.011, 0.0342, 0.0307, 0.0303, 0.00954, 
            0.0265, 0.0101),
        cuteseedopcor = cms.vdouble(0.784, 0.366, 0.57, 0.911, 0.298, 
            0.645, 0.51, 0.497, 0.932, 0.835, 
            0.968, 0.969, 0.923, 0.898, 0.98, 
            0.63, 0.971, 1.0, 0.515, 0.963, 
            0.986, 0.823, 0.879, 1.01, 0.931, 
            0.937, 1.05),
        cutdphiin = cms.vdouble(0.0404, 0.0499, 0.263, 0.042, 0.0484, 
            0.241, 0.242, 0.231, 0.286, 0.0552, 
            0.0338, 0.154, 0.0623, 0.0183, 0.0392, 
            0.0547, 0.0588, 0.00654, 0.042, 0.0217, 
            0.0885, 0.0445, 0.0141, 0.0234, 0.065, 
            0.0258, 0.0346),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 13.7, 13.2, 
            13.6, 14.2, 14.1, 13.9, 12.9, 
            14.9, 17.7)
    ),
    electronIDType = cms.string('robust'),
    robusttightEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    electronVersion = cms.string(''),
    robusttightEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.015, 0.0092, 0.02, 0.0025, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.018, 0.025, 0.02, 0.004, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusttightEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.01, 0.0099, 0.025, 0.004, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.01, 0.028, 0.02, 0.0066, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusttightEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusttightEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    reducedEndcapRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    verticesCollection = cms.InputTag("offlinePrimaryVerticesWithBS"),
    classbasedlooseEleIDCuts = cms.PSet(
        cutdetain = cms.vdouble(0.0137, 0.00678, 0.0241, 0.0187, 0.0161, 
            0.0224, 0.0252, 0.0308, 0.0273),
        cutiso_sum = cms.vdouble(33.0, 17.0, 17.9, 18.8, 8.55, 
            12.5, 17.6, 18.5, 2.98),
        cutip_gsf = cms.vdouble(0.0551, 0.0765, 0.143, 0.0874, 0.594, 
            0.37, 0.0913, 1.15, 0.231),
        cutip_gsfl = cms.vdouble(0.0186, 0.0759, 0.138, 0.0473, 0.62, 
            0.304, 0.109, 0.775, 0.0479),
        cuthoe = cms.vdouble(0.247, 0.137, 0.147, 0.371, 0.0588, 
            0.147, 0.52, 0.452, 0.404),
        cutiso_sumoetl = cms.vdouble(11.3, 9.05, 9.07, 9.94, 5.25, 
            6.15, 10.7, 10.8, 4.4),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 4.5, 3.5, 3.5),
        cuthoel = cms.vdouble(0.236, 0.126, 0.147, 0.375, 0.0392, 
            0.145, 0.365, 0.383, 0.384),
        cutdphiin = cms.vdouble(0.0897, 0.262, 0.353, 0.116, 0.357, 
            0.319, 0.342, 0.404, 0.336),
        cutseel = cms.vdouble(0.0164, 0.0118, 0.015, 0.0523, 0.0326, 
            0.0456, 0.0185, 0.0589, 0.0544),
        cutiso_sumoet = cms.vdouble(34.5, 12.7, 12.1, 19.9, 6.35, 
            8.85, 14.0, 10.5, 9.74),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0176, 0.0125, 0.0181, 0.0415, 0.0364, 
            0.0418, 0.0146, 0.0678, 0.133),
        cuteseedopcor = cms.vdouble(0.63, 0.82, 0.401, 0.718, 0.4, 
            0.458, 0.15, 0.664, 0.373),
        cutdphiinl = cms.vdouble(0.0747, 0.25, 0.356, 0.0956, 0.347, 
            0.326, 0.333, 0.647, 0.289),
        cutdetainl = cms.vdouble(0.0124, 0.00503, 0.0257, 0.0228, 0.0118, 
            0.0178, 0.0188, 0.14, 0.024)
    ),
    reducedBarrelRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    robusthighenergyEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.0275, 0.09, 0.007, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.011, 0.09, 0.005, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.1, 0.0275, 0.09, 0.007, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    classbasedlooseEleIDCutsV00 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.05, 0.025, 0.053, 0.09, 0.07, 
            0.03, 0.092, 0.092),
        hOverE = cms.vdouble(0.115, 0.1, 0.055, 0.0, 0.145, 
            0.12, 0.15, 0.0),
        sigmaEtaEta = cms.vdouble(0.014, 0.012, 0.0115, 0.0, 0.0275, 
            0.0265, 0.0265, 0.0),
        deltaEtaIn = cms.vdouble(0.009, 0.0045, 0.0085, 0.0, 0.0105, 
            0.0068, 0.01, 0.0),
        eSeedOverPin = cms.vdouble(0.11, 0.91, 0.11, 0.0, 0.0, 
            0.85, 0.0, 0.0)
    ),
    classbasedlooseEleIDCutsV01 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.053, 0.0189, 0.059, 0.099, 0.0278, 
            0.0157, 0.042, 0.08),
        hOverE = cms.vdouble(0.076, 0.033, 0.07, 0.0, 0.083, 
            0.0148, 0.033, 0.0),
        sigmaEtaEta = cms.vdouble(0.0101, 0.0095, 0.0097, 0.0, 0.0271, 
            0.0267, 0.0259, 0.0),
        deltaEtaIn = cms.vdouble(0.0078, 0.00259, 0.0062, 0.0, 0.0078, 
            0.0061, 0.0061, 0.0),
        eSeedOverPin = cms.vdouble(0.3, 0.92, 0.211, 0.0, 0.42, 
            0.88, 0.68, 0.0)
    ),
    classbasedlooseEleIDCutsV02 = cms.PSet(
        cutisohcal = cms.vdouble(13.5, 9.93, 7.56, 14.8, 8.1, 
            10.8, 42.7, 20.1, 9.11, 10.4, 
            6.89, 5.59, 8.53, 9.59, 24.2, 
            2.78, 8.67, 0.288),
        cutmishits = cms.vdouble(5.5, 1.5, 5.5, 2.5, 2.5, 
            2.5, 3.5, 5.5, 0.5, 1.5, 
            2.5, 0.5, 1.5, 1.5, 0.5, 
            0.5, 0.5, 0.5),
        cuthoe = cms.vdouble(0.0887, 0.0934, 0.0949, 0.0986, 0.0431, 
            0.0878, 0.097, 0.0509, 0.098, 0.0991, 
            0.0321, 0.0928, 0.0663, 0.0717, 0.0966, 
            0.0758, 0.0149, 0.0131),
        cutdeta = cms.vdouble(0.00958, 0.00406, 0.0122, 0.0137, 0.00837, 
            0.0127, 0.011, 0.00336, 0.00977, 0.015, 
            0.00675, 0.0109, 0.014, 0.00508, 0.0109, 
            0.0146, 0.00506, 0.0127),
        cuteopin = cms.vdouble(0.878, 0.802, 0.814, 0.942, 0.735, 
            0.774, 0.829, 0.909, 0.829, 0.813, 
            0.86, 0.897, 0.817, 0.831, 0.818, 
            0.861, 0.787, 0.789),
        cutip = cms.vdouble(0.0246, 0.076, 0.0966, 0.0885, 0.441, 
            0.205, 0.0292, 0.0293, 0.0619, 0.0251, 
            0.159, 0.0815, 7.29, 0.0106, 5.76, 
            6.89, 1.27, 5.89),
        cutisotk = cms.vdouble(24.3, 8.45, 14.4, 27.8, 6.02, 
            10.5, 14.1, 10.2, 14.5, 19.1, 
            6.1, 14.1, 8.59, 8.33, 8.3, 
            8.93, 8.6, 16.0),
        cutsee = cms.vdouble(0.0172, 0.0115, 0.0143, 0.0344, 0.0295, 
            0.0304, 0.0145, 0.0108, 0.0128, 0.0347, 
            0.0307, 0.0316, 0.018, 0.011, 0.0132, 
            0.0349, 0.031, 0.0327),
        cutdphi = cms.vdouble(0.0372, 0.114, 0.118, 0.0488, 0.117, 
            0.119, 0.0606, 0.0548, 0.117, 0.07, 
            0.0355, 0.117, 0.088, 0.045, 0.118, 
            0.0919, 0.0236, 0.0515),
        cutisoecal = cms.vdouble(33.4, 28.1, 7.32, 27.4, 7.33, 
            21.7, 93.8, 102.0, 12.1, 26.0, 
            8.91, 10.0, 16.1, 31.3, 16.9, 
            15.4, 13.3, 37.7)
    ),
    classbasedlooseEleIDCutsV03 = cms.PSet(
        cutdetain = cms.vdouble(0.00989, 0.00484, 0.0146, 0.0146, 0.00902, 
            0.0172, 0.0137, 0.0477, 0.0275, 0.00967, 
            0.00377, 0.00924, 0.013, 0.00666, 0.0123, 
            0.0125, 0.0228, 0.0112, 0.0106, 0.0038, 
            0.00897, 0.0139, 0.00667, 0.0122, 0.0122, 
            0.0193, 0.00239),
        cutiso_sum = cms.vdouble(31.5, 10.3, 8.8, 11.0, 6.13, 
            6.94, 7.52, 9.0, 3.5, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0431, 0.0767, 0.139, 0.101, 0.149, 
            0.154, 0.932, 0.15, 0.124, 0.0238, 
            0.0467, 0.0759, 0.0369, 0.147, 0.0986, 
            0.0626, 0.195, 0.116, 0.0122, 0.0125, 
            0.0693, 0.0162, 0.089, 0.0673, 0.0467, 
            0.0651, 0.0221),
        cuthoe = cms.vdouble(0.166, 0.0771, 0.144, 0.37, 0.0497, 
            0.139, 0.401, 2.68, 0.516, 0.234, 
            0.0556, 0.144, 0.368, 0.031, 0.12, 
            0.602, 2.01, 1.05, 0.104, 0.063, 
            0.0565, 0.38, 0.0192, 0.0294, 0.537, 
            4.65, 1.87),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 2.5, 2.5, 1.5, 2.5, 
            1.5, 1.5, 1.5, 1.5, 0.5, 
            2.5, 2.5, 0.5, 2.5, 1.5, 
            0.5, 1.5, 1.5, 0.5, 2.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(28.9, 15.3, 12.0, 18.3, 7.17, 
            9.42, 11.0, 9.81, 3.94, 22.7, 
            15.9, 12.3, 17.0, 7.58, 8.89, 
            15.2, 12.7, 6.17, 20.8, 21.2, 
            17.2, 15.5, 9.37, 10.6, 19.8, 
            22.1, 15.6),
        cutdcotdist = cms.vdouble(0.0393, 0.0392, 0.0397, 0.0394, 0.0393, 
            0.039, 0.0378, 0.0388, 0.0382, 0.0385, 
            0.0167, 0.00325, 0.0394, 0.0387, 0.0388, 
            0.0227, 0.0258, 0.0127, 0.0298, 0.03, 
            0.00946, 0.039, 0.0231, 0.0278, 0.00162, 
            0.0367, 0.0199),
        cutsee = cms.vdouble(0.0175, 0.0127, 0.0177, 0.0373, 0.0314, 
            0.0329, 0.0157, 0.0409, 0.14, 0.0169, 
            0.0106, 0.0142, 0.0363, 0.0322, 0.0354, 
            0.0117, 0.0372, 28.2, 0.0171, 0.0113, 
            0.014, 0.0403, 0.0323, 0.0411, 0.0104, 
            0.0436, 0.0114),
        cuteseedopcor = cms.vdouble(0.78, 0.302, 0.483, 0.904, 0.168, 
            0.645, 0.108, 0.284, 0.324, 0.591, 
            0.286, 0.488, 0.813, 0.791, 0.672, 
            0.398, 0.834, 0.878, 0.515, 0.937, 
            0.806, 0.816, 0.85, 0.507, 0.367, 
            0.83, 0.648),
        cutdphiin = cms.vdouble(0.041, 0.275, 0.365, 0.047, 0.273, 
            0.296, 0.329, 0.465, 0.627, 0.0581, 
            0.0954, 0.327, 0.0702, 0.0582, 0.279, 
            0.117, 0.318, 0.246, 0.0821, 0.052, 
            0.292, 0.116, 0.0435, 0.312, 0.118, 
            0.296, 0.0459),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 12.0, 12.0, 
            12.0, 12.0, 12.0, 12.0, 12.0, 
            12.0, 12.5)
    ),
    classbasedlooseEleIDCutsV04 = cms.PSet(
        cutdetain = cms.vdouble(0.00989, 0.00484, 0.0146, 0.0146, 0.00902, 
            0.0172, 0.0137, 0.0477, 0.0275, 0.00967, 
            0.00377, 0.00924, 0.013, 0.00666, 0.0123, 
            0.0125, 0.0228, 0.0112, 0.0106, 0.0038, 
            0.00897, 0.0139, 0.00667, 0.0122, 0.0122, 
            0.0193, 0.00239),
        cutiso_sum = cms.vdouble(31.5, 10.3, 8.8, 11.0, 6.13, 
            6.94, 7.52, 9.0, 3.5, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0431, 0.0767, 0.139, 0.101, 0.149, 
            0.154, 0.932, 0.15, 0.124, 0.0238, 
            0.0467, 0.0759, 0.0369, 0.147, 0.0986, 
            0.0626, 0.195, 0.116, 0.0122, 0.0125, 
            0.0693, 0.0162, 0.089, 0.0673, 0.0467, 
            0.0651, 0.0221),
        cuthoe = cms.vdouble(0.166, 0.0771, 0.144, 0.37, 0.0497, 
            0.139, 0.401, 2.68, 0.516, 0.234, 
            0.0556, 0.144, 0.368, 0.031, 0.12, 
            0.602, 2.01, 1.05, 0.104, 0.063, 
            0.0565, 0.38, 0.0192, 0.0294, 0.537, 
            4.65, 1.87),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 2.5, 2.5, 1.5, 2.5, 
            1.5, 1.5, 1.5, 1.5, 0.5, 
            2.5, 2.5, 0.5, 2.5, 1.5, 
            0.5, 1.5, 1.5, 0.5, 2.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(28.9, 15.3, 12.0, 18.3, 7.17, 
            9.42, 11.0, 9.81, 3.94, 22.7, 
            15.9, 12.3, 17.0, 7.58, 8.89, 
            15.2, 12.7, 6.17, 20.8, 21.2, 
            17.2, 15.5, 9.37, 10.6, 19.8, 
            22.1, 15.6),
        cutdcotdist = cms.vdouble(0.0393, 0.0392, 0.0397, 0.0394, 0.0393, 
            0.039, 0.0378, 0.0388, 0.0382, 0.0385, 
            0.0167, 0.00325, 0.0394, 0.0387, 0.0388, 
            0.0227, 0.0258, 0.0127, 0.0298, 0.03, 
            0.00946, 0.039, 0.0231, 0.0278, 0.00162, 
            0.0367, 0.0199),
        cutsee = cms.vdouble(0.0175, 0.0127, 0.0177, 0.0373, 0.0314, 
            0.0329, 0.0157, 0.0409, 0.14, 0.0169, 
            0.0106, 0.0142, 0.0363, 0.0322, 0.0354, 
            0.0117, 0.0372, 28.2, 0.0171, 0.0113, 
            0.014, 0.0403, 0.0323, 0.0411, 0.0104, 
            0.0436, 0.0114),
        cuteseedopcor = cms.vdouble(0.78, 0.302, 0.483, 0.904, 0.168, 
            0.645, 0.108, 0.284, 0.324, 0.591, 
            0.286, 0.488, 0.813, 0.791, 0.672, 
            0.398, 0.834, 0.878, 0.515, 0.937, 
            0.806, 0.816, 0.85, 0.507, 0.367, 
            0.83, 0.648),
        cutdphiin = cms.vdouble(0.041, 0.275, 0.365, 0.047, 0.273, 
            0.296, 0.329, 0.465, 0.627, 0.0581, 
            0.0954, 0.327, 0.0702, 0.0582, 0.279, 
            0.117, 0.318, 0.246, 0.0821, 0.052, 
            0.292, 0.116, 0.0435, 0.312, 0.118, 
            0.296, 0.0459),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 12.0, 12.0, 
            12.0, 12.0, 12.0, 12.0, 12.0, 
            12.0, 12.5)
    ),
    classbasedlooseEleIDCutsV06 = cms.PSet(
        cutdetain = cms.vdouble(0.0137, 0.00678, 0.0241, 0.0187, 0.0161, 
            0.0224, 0.0252, 0.0308, 0.0273),
        cutiso_sum = cms.vdouble(33.0, 17.0, 17.9, 18.8, 8.55, 
            12.5, 17.6, 18.5, 2.98),
        cutip_gsf = cms.vdouble(0.0551, 0.0765, 0.143, 0.0874, 0.594, 
            0.37, 0.0913, 1.15, 0.231),
        cutip_gsfl = cms.vdouble(0.0186, 0.0759, 0.138, 0.0473, 0.62, 
            0.304, 0.109, 0.775, 0.0479),
        cuthoe = cms.vdouble(0.247, 0.137, 0.147, 0.371, 0.0588, 
            0.147, 0.52, 0.452, 0.404),
        cutiso_sumoetl = cms.vdouble(11.3, 9.05, 9.07, 9.94, 5.25, 
            6.15, 10.7, 10.8, 4.4),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 4.5, 3.5, 3.5),
        cuthoel = cms.vdouble(0.236, 0.126, 0.147, 0.375, 0.0392, 
            0.145, 0.365, 0.383, 0.384),
        cutdphiin = cms.vdouble(0.0897, 0.262, 0.353, 0.116, 0.357, 
            0.319, 0.342, 0.404, 0.336),
        cutseel = cms.vdouble(0.0164, 0.0118, 0.015, 0.0523, 0.0326, 
            0.0456, 0.0185, 0.0589, 0.0544),
        cutiso_sumoet = cms.vdouble(34.5, 12.7, 12.1, 19.9, 6.35, 
            8.85, 14.0, 10.5, 9.74),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0176, 0.0125, 0.0181, 0.0415, 0.0364, 
            0.0418, 0.0146, 0.0678, 0.133),
        cuteseedopcor = cms.vdouble(0.63, 0.82, 0.401, 0.718, 0.4, 
            0.458, 0.15, 0.664, 0.373),
        cutdphiinl = cms.vdouble(0.0747, 0.25, 0.356, 0.0956, 0.347, 
            0.326, 0.333, 0.647, 0.289),
        cutdetainl = cms.vdouble(0.0124, 0.00503, 0.0257, 0.0228, 0.0118, 
            0.0178, 0.0188, 0.14, 0.024)
    ),
    src = cms.InputTag("gsfElectrons"),
    robusttightEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    classbasedtightEleIDCuts = cms.PSet(
        cutdetain = cms.vdouble(0.0116, 0.00449, 0.00938, 0.0184, 0.00678, 
            0.0109, 0.0252, 0.0268, 0.0139),
        cutiso_sum = cms.vdouble(15.5, 12.2, 12.2, 11.7, 7.16, 
            9.71, 8.66, 11.9, 2.98),
        cutip_gsf = cms.vdouble(0.0131, 0.0586, 0.0839, 0.0366, 0.452, 
            0.204, 0.0913, 0.0802, 0.0731),
        cutip_gsfl = cms.vdouble(0.0119, 0.0527, 0.0471, 0.0212, 0.233, 
            0.267, 0.109, 0.122, 0.0479),
        cuthoe = cms.vdouble(0.215, 0.0608, 0.147, 0.369, 0.0349, 
            0.102, 0.52, 0.422, 0.404),
        cutiso_sumoetl = cms.vdouble(6.21, 6.81, 5.3, 5.39, 2.73, 
            4.73, 4.84, 3.46, 3.73),
        cutfmishits = cms.vdouble(1.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 1.5, 2.5, 0.5),
        cuthoel = cms.vdouble(0.228, 0.0836, 0.143, 0.37, 0.0392, 
            0.0979, 0.3, 0.381, 0.339),
        cutdphiin = cms.vdouble(0.0897, 0.0993, 0.295, 0.0979, 0.151, 
            0.252, 0.341, 0.308, 0.328),
        cutseel = cms.vdouble(0.0132, 0.0117, 0.0112, 0.0387, 0.0281, 
            0.0287, 0.00987, 0.0296, 0.0544),
        cutiso_sumoet = cms.vdouble(11.9, 7.81, 6.28, 8.92, 4.65, 
            5.49, 9.36, 8.84, 5.94),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0145, 0.0116, 0.012, 0.039, 0.0297, 
            0.0311, 0.00987, 0.0347, 0.0917),
        cuteseedopcor = cms.vdouble(0.637, 0.943, 0.742, 0.748, 0.763, 
            0.631, 0.214, 0.873, 0.473),
        cutdphiinl = cms.vdouble(0.061, 0.14, 0.286, 0.0921, 0.197, 
            0.24, 0.333, 0.303, 0.258),
        cutdetainl = cms.vdouble(0.00816, 0.00401, 0.0081, 0.019, 0.00588, 
            0.00893, 0.0171, 0.0434, 0.0143)
    ),
    algorithm = cms.string('eIDCB'),
    robusthighenergyEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.115, 0.014, 0.09, 0.009, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.15, 0.0275, 0.092, 0.0105, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.075, 0.0132, 0.058, 0.0077, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.083, 0.027, 0.042, 0.01, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    additionalCategories = cms.bool(True),
    etBinning = cms.bool(True)
)


process.eidLoose = cms.EDProducer("EleIdCutBasedExtProducer",
    electronQuality = cms.string('loose'),
    classbasedtightEleIDCutsV02 = cms.PSet(
        cutisohcal = cms.vdouble(10.9, 7.01, 8.75, 3.51, 7.75, 
            1.62, 11.6, 9.9, 4.97, 5.33, 
            3.18, 2.32, 0.164, 5.46, 12.0, 
            0.00604, 4.1, 0.000628),
        cutmishits = cms.vdouble(5.5, 1.5, 0.5, 1.5, 2.5, 
            0.5, 3.5, 5.5, 0.5, 0.5, 
            0.5, 0.5, 0.5, 1.5, 0.5, 
            0.5, 0.5, 0.5),
        cuthoe = cms.vdouble(0.0871, 0.0289, 0.0783, 0.0946, 0.0245, 
            0.0363, 0.0671, 0.048, 0.0614, 0.0924, 
            0.0158, 0.049, 0.0382, 0.0915, 0.0451, 
            0.0452, 0.00196, 0.0043),
        cutdeta = cms.vdouble(0.00915, 0.00302, 0.0061, 0.0135, 0.00565, 
            0.00793, 0.0102, 0.00266, 0.0106, 0.00903, 
            0.00766, 0.00723, 0.0116, 0.00203, 0.00659, 
            0.0148, 0.00555, 0.0128),
        cuteopin = cms.vdouble(0.878, 0.859, 0.874, 0.944, 0.737, 
            0.773, 0.86, 0.967, 0.917, 0.812, 
            0.915, 1.01, 0.847, 0.953, 0.979, 
            0.841, 0.771, 1.09),
        cutip = cms.vdouble(0.0239, 0.027, 0.0768, 0.0231, 0.178, 
            0.0957, 0.0102, 0.0168, 0.043, 0.0166, 
            0.0594, 0.0308, 2.1, 0.00527, 3.17, 
            4.91, 0.769, 5.9),
        cutisotk = cms.vdouble(6.53, 4.6, 6.0, 8.63, 3.11, 
            7.77, 5.42, 4.81, 4.06, 6.47, 
            2.8, 3.45, 5.29, 5.18, 15.4, 
            5.38, 4.47, 0.0347),
        cutsee = cms.vdouble(0.0131, 0.0106, 0.0115, 0.0306, 0.028, 
            0.0293, 0.0131, 0.0106, 0.0115, 0.0317, 
            0.029, 0.0289, 0.0142, 0.0106, 0.0103, 
            0.035, 0.0296, 0.0333),
        cutdphi = cms.vdouble(0.0369, 0.0307, 0.117, 0.0475, 0.0216, 
            0.117, 0.0372, 0.0246, 0.0426, 0.0612, 
            0.0142, 0.039, 0.0737, 0.0566, 0.0359, 
            0.0187, 0.012, 0.0358),
        cutisoecal = cms.vdouble(20.0, 27.2, 4.48, 13.5, 4.56, 
            3.19, 12.2, 13.1, 7.42, 7.67, 
            4.12, 4.85, 10.1, 12.4, 11.1, 
            11.0, 10.6, 13.4)
    ),
    classbasedtightEleIDCutsV03 = cms.PSet(
        cutdetain = cms.vdouble(0.00811, 0.00341, 0.00633, 0.0103, 0.00667, 
            0.01, 0.0106, 0.0145, 0.0163, 0.0076, 
            0.00259, 0.00511, 0.00941, 0.0043, 0.00857, 
            0.012, 0.0169, 0.00172, 0.00861, 0.00362, 
            0.00601, 0.00925, 0.00489, 0.00832, 0.0119, 
            0.0169, 0.000996),
        cutiso_sum = cms.vdouble(11.8, 8.31, 6.26, 6.18, 3.28, 
            4.38, 4.17, 5.4, 1.57, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0213, 0.0422, 0.0632, 0.0361, 0.073, 
            0.126, 0.171, 0.119, 0.0372, 0.0131, 
            0.0146, 0.0564, 0.0152, 0.0222, 0.0268, 
            0.0314, 0.0884, 0.00374, 0.00852, 0.00761, 
            0.0143, 0.0106, 0.0127, 0.0119, 0.0123, 
            0.0235, 0.00363),
        cuthoe = cms.vdouble(0.0783, 0.0387, 0.105, 0.118, 0.0227, 
            0.062, 0.13, 2.47, 0.38, 0.0888, 
            0.0503, 0.0955, 0.0741, 0.015, 0.03, 
            0.589, 1.13, 0.612, 0.0494, 0.0461, 
            0.0292, 0.0369, 0.0113, 0.0145, 0.124, 
            2.05, 0.61),
        cutfmishits = cms.vdouble(2.5, 1.5, 1.5, 1.5, 1.5, 
            0.5, 2.5, 0.5, 0.5, 2.5, 
            1.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5, -0.5, 2.5, 1.5, 
            0.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(13.7, 11.6, 7.14, 9.98, 3.52, 
            4.87, 6.24, 7.96, 2.53, 11.2, 
            11.9, 7.88, 8.16, 5.58, 5.03, 
            11.4, 8.15, 5.79, 10.4, 11.1, 
            10.4, 7.47, 5.08, 5.9, 11.8, 
            14.1, 11.7),
        cutdcotdist = cms.vdouble(0.0393, 0.0256, 0.00691, 0.0394, 0.0386, 
            0.039, 0.0325, 0.0384, 0.0382, 0.0245, 
            0.000281, 5.46e-05, 0.0342, 0.0232, 0.00107, 
            0.0178, 0.0193, 0.000758, 0.000108, 0.0248, 
            0.000458, 0.0129, 0.00119, 0.0182, 4.53e-05, 
            0.0189, 0.000928),
        cutsee = cms.vdouble(0.0143, 0.0105, 0.0123, 0.0324, 0.0307, 
            0.0301, 0.0109, 0.027, 0.0292, 0.0133, 
            0.0104, 0.0116, 0.0332, 0.0296, 0.031, 
            0.00981, 0.0307, 0.072, 0.0149, 0.0105, 
            0.011, 0.0342, 0.0307, 0.0303, 0.00954, 
            0.0265, 0.0101),
        cuteseedopcor = cms.vdouble(0.784, 0.366, 0.57, 0.911, 0.298, 
            0.645, 0.51, 0.497, 0.932, 0.835, 
            0.968, 0.969, 0.923, 0.898, 0.98, 
            0.63, 0.971, 1.0, 0.515, 0.963, 
            0.986, 0.823, 0.879, 1.01, 0.931, 
            0.937, 1.05),
        cutdphiin = cms.vdouble(0.0404, 0.0499, 0.263, 0.042, 0.0484, 
            0.241, 0.242, 0.231, 0.286, 0.0552, 
            0.0338, 0.154, 0.0623, 0.0183, 0.0392, 
            0.0547, 0.0588, 0.00654, 0.042, 0.0217, 
            0.0885, 0.0445, 0.0141, 0.0234, 0.065, 
            0.0258, 0.0346),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 13.7, 13.2, 
            13.6, 14.2, 14.1, 13.9, 12.9, 
            14.9, 17.7)
    ),
    classbasedtightEleIDCutsV00 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.032, 0.016, 0.0525, 0.09, 0.025, 
            0.035, 0.065, 0.092),
        hOverE = cms.vdouble(0.05, 0.042, 0.045, 0.0, 0.055, 
            0.037, 0.05, 0.0),
        sigmaEtaEta = cms.vdouble(0.0125, 0.011, 0.01, 0.0, 0.0265, 
            0.0252, 0.026, 0.0),
        deltaEtaIn = cms.vdouble(0.0055, 0.003, 0.0065, 0.0, 0.006, 
            0.0055, 0.0075, 0.0),
        eSeedOverPin = cms.vdouble(0.24, 0.94, 0.11, 0.0, 0.32, 
            0.83, 0.0, 0.0)
    ),
    classbasedtightEleIDCutsV01 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.0225, 0.0114, 0.0234, 0.039, 0.0215, 
            0.0095, 0.0148, 0.0167),
        hOverE = cms.vdouble(0.056, 0.0221, 0.037, 0.0, 0.0268, 
            0.0102, 0.0104, 0.0),
        sigmaEtaEta = cms.vdouble(0.0095, 0.0094, 0.0094, 0.0, 0.026, 
            0.0257, 0.0246, 0.0),
        deltaEtaIn = cms.vdouble(0.0043, 0.00282, 0.0036, 0.0, 0.0066, 
            0.0049, 0.0041, 0.0),
        eSeedOverPin = cms.vdouble(0.32, 0.94, 0.221, 0.0, 0.74, 
            0.89, 0.66, 0.0)
    ),
    classbasedtightEleIDCutsV06 = cms.PSet(
        cutdetain = cms.vdouble(0.0116, 0.00449, 0.00938, 0.0184, 0.00678, 
            0.0109, 0.0252, 0.0268, 0.0139),
        cutiso_sum = cms.vdouble(15.5, 12.2, 12.2, 11.7, 7.16, 
            9.71, 8.66, 11.9, 2.98),
        cutip_gsf = cms.vdouble(0.0131, 0.0586, 0.0839, 0.0366, 0.452, 
            0.204, 0.0913, 0.0802, 0.0731),
        cutip_gsfl = cms.vdouble(0.0119, 0.0527, 0.0471, 0.0212, 0.233, 
            0.267, 0.109, 0.122, 0.0479),
        cuthoe = cms.vdouble(0.215, 0.0608, 0.147, 0.369, 0.0349, 
            0.102, 0.52, 0.422, 0.404),
        cutiso_sumoetl = cms.vdouble(6.21, 6.81, 5.3, 5.39, 2.73, 
            4.73, 4.84, 3.46, 3.73),
        cutfmishits = cms.vdouble(1.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 1.5, 2.5, 0.5),
        cuthoel = cms.vdouble(0.228, 0.0836, 0.143, 0.37, 0.0392, 
            0.0979, 0.3, 0.381, 0.339),
        cutdphiin = cms.vdouble(0.0897, 0.0993, 0.295, 0.0979, 0.151, 
            0.252, 0.341, 0.308, 0.328),
        cutseel = cms.vdouble(0.0132, 0.0117, 0.0112, 0.0387, 0.0281, 
            0.0287, 0.00987, 0.0296, 0.0544),
        cutiso_sumoet = cms.vdouble(11.9, 7.81, 6.28, 8.92, 4.65, 
            5.49, 9.36, 8.84, 5.94),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0145, 0.0116, 0.012, 0.039, 0.0297, 
            0.0311, 0.00987, 0.0347, 0.0917),
        cuteseedopcor = cms.vdouble(0.637, 0.943, 0.742, 0.748, 0.763, 
            0.631, 0.214, 0.873, 0.473),
        cutdphiinl = cms.vdouble(0.061, 0.14, 0.286, 0.0921, 0.197, 
            0.24, 0.333, 0.303, 0.258),
        cutdetainl = cms.vdouble(0.00816, 0.00401, 0.0081, 0.019, 0.00588, 
            0.00893, 0.0171, 0.0434, 0.0143)
    ),
    classbasedtightEleIDCutsV04 = cms.PSet(
        cutdetain = cms.vdouble(0.00811, 0.00341, 0.00633, 0.0103, 0.00667, 
            0.01, 0.0106, 0.0145, 0.0163, 0.0076, 
            0.00259, 0.00511, 0.00941, 0.0043, 0.00857, 
            0.012, 0.0169, 0.00172, 0.00861, 0.00362, 
            0.00601, 0.00925, 0.00489, 0.00832, 0.0119, 
            0.0169, 0.000996),
        cutiso_sum = cms.vdouble(11.8, 8.31, 6.26, 6.18, 3.28, 
            4.38, 4.17, 5.4, 1.57, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0213, 0.0422, 0.0632, 0.0361, 0.073, 
            0.126, 0.171, 0.119, 0.0372, 0.0131, 
            0.0146, 0.0564, 0.0152, 0.0222, 0.0268, 
            0.0314, 0.0884, 0.00374, 0.00852, 0.00761, 
            0.0143, 0.0106, 0.0127, 0.0119, 0.0123, 
            0.0235, 0.00363),
        cuthoe = cms.vdouble(0.0783, 0.0387, 0.105, 0.118, 0.0227, 
            0.062, 0.13, 2.47, 0.38, 0.0888, 
            0.0503, 0.0955, 0.0741, 0.015, 0.03, 
            0.589, 1.13, 0.612, 0.0494, 0.0461, 
            0.0292, 0.0369, 0.0113, 0.0145, 0.124, 
            2.05, 0.61),
        cutfmishits = cms.vdouble(2.5, 1.5, 1.5, 1.5, 1.5, 
            0.5, 2.5, 0.5, 0.5, 2.5, 
            1.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5, -0.5, 2.5, 1.5, 
            0.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(13.7, 11.6, 7.14, 9.98, 3.52, 
            4.87, 6.24, 7.96, 2.53, 11.2, 
            11.9, 7.88, 8.16, 5.58, 5.03, 
            11.4, 8.15, 5.79, 10.4, 11.1, 
            10.4, 7.47, 5.08, 5.9, 11.8, 
            14.1, 11.7),
        cutdcotdist = cms.vdouble(0.0393, 0.0256, 0.00691, 0.0394, 0.0386, 
            0.039, 0.0325, 0.0384, 0.0382, 0.0245, 
            0.000281, 5.46e-05, 0.0342, 0.0232, 0.00107, 
            0.0178, 0.0193, 0.000758, 0.000108, 0.0248, 
            0.000458, 0.0129, 0.00119, 0.0182, 4.53e-05, 
            0.0189, 0.000928),
        cutsee = cms.vdouble(0.0143, 0.0105, 0.0123, 0.0324, 0.0307, 
            0.0301, 0.0109, 0.027, 0.0292, 0.0133, 
            0.0104, 0.0116, 0.0332, 0.0296, 0.031, 
            0.00981, 0.0307, 0.072, 0.0149, 0.0105, 
            0.011, 0.0342, 0.0307, 0.0303, 0.00954, 
            0.0265, 0.0101),
        cuteseedopcor = cms.vdouble(0.784, 0.366, 0.57, 0.911, 0.298, 
            0.645, 0.51, 0.497, 0.932, 0.835, 
            0.968, 0.969, 0.923, 0.898, 0.98, 
            0.63, 0.971, 1.0, 0.515, 0.963, 
            0.986, 0.823, 0.879, 1.01, 0.931, 
            0.937, 1.05),
        cutdphiin = cms.vdouble(0.0404, 0.0499, 0.263, 0.042, 0.0484, 
            0.241, 0.242, 0.231, 0.286, 0.0552, 
            0.0338, 0.154, 0.0623, 0.0183, 0.0392, 
            0.0547, 0.0588, 0.00654, 0.042, 0.0217, 
            0.0885, 0.0445, 0.0141, 0.0234, 0.065, 
            0.0258, 0.0346),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 13.7, 13.2, 
            13.6, 14.2, 14.1, 13.9, 12.9, 
            14.9, 17.7)
    ),
    electronIDType = cms.string('classbased'),
    robusttightEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    electronVersion = cms.string(''),
    robusttightEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.015, 0.0092, 0.02, 0.0025, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.018, 0.025, 0.02, 0.004, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusttightEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.01, 0.0099, 0.025, 0.004, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.01, 0.028, 0.02, 0.0066, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    reducedBarrelRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    robusttightEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    reducedEndcapRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    verticesCollection = cms.InputTag("offlinePrimaryVerticesWithBS"),
    classbasedlooseEleIDCuts = cms.PSet(
        cutdetain = cms.vdouble(0.0137, 0.00678, 0.0241, 0.0187, 0.0161, 
            0.0224, 0.0252, 0.0308, 0.0273),
        cutiso_sum = cms.vdouble(33.0, 17.0, 17.9, 18.8, 8.55, 
            12.5, 17.6, 18.5, 2.98),
        cutip_gsf = cms.vdouble(0.0551, 0.0765, 0.143, 0.0874, 0.594, 
            0.37, 0.0913, 1.15, 0.231),
        cutip_gsfl = cms.vdouble(0.0186, 0.0759, 0.138, 0.0473, 0.62, 
            0.304, 0.109, 0.775, 0.0479),
        cuthoe = cms.vdouble(0.247, 0.137, 0.147, 0.371, 0.0588, 
            0.147, 0.52, 0.452, 0.404),
        cutiso_sumoetl = cms.vdouble(11.3, 9.05, 9.07, 9.94, 5.25, 
            6.15, 10.7, 10.8, 4.4),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 4.5, 3.5, 3.5),
        cuthoel = cms.vdouble(0.236, 0.126, 0.147, 0.375, 0.0392, 
            0.145, 0.365, 0.383, 0.384),
        cutdphiin = cms.vdouble(0.0897, 0.262, 0.353, 0.116, 0.357, 
            0.319, 0.342, 0.404, 0.336),
        cutseel = cms.vdouble(0.0164, 0.0118, 0.015, 0.0523, 0.0326, 
            0.0456, 0.0185, 0.0589, 0.0544),
        cutiso_sumoet = cms.vdouble(34.5, 12.7, 12.1, 19.9, 6.35, 
            8.85, 14.0, 10.5, 9.74),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0176, 0.0125, 0.0181, 0.0415, 0.0364, 
            0.0418, 0.0146, 0.0678, 0.133),
        cuteseedopcor = cms.vdouble(0.63, 0.82, 0.401, 0.718, 0.4, 
            0.458, 0.15, 0.664, 0.373),
        cutdphiinl = cms.vdouble(0.0747, 0.25, 0.356, 0.0956, 0.347, 
            0.326, 0.333, 0.647, 0.289),
        cutdetainl = cms.vdouble(0.0124, 0.00503, 0.0257, 0.0228, 0.0118, 
            0.0178, 0.0188, 0.14, 0.024)
    ),
    robusttightEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.0275, 0.09, 0.007, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.011, 0.09, 0.005, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.1, 0.0275, 0.09, 0.007, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    classbasedlooseEleIDCutsV00 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.05, 0.025, 0.053, 0.09, 0.07, 
            0.03, 0.092, 0.092),
        hOverE = cms.vdouble(0.115, 0.1, 0.055, 0.0, 0.145, 
            0.12, 0.15, 0.0),
        sigmaEtaEta = cms.vdouble(0.014, 0.012, 0.0115, 0.0, 0.0275, 
            0.0265, 0.0265, 0.0),
        deltaEtaIn = cms.vdouble(0.009, 0.0045, 0.0085, 0.0, 0.0105, 
            0.0068, 0.01, 0.0),
        eSeedOverPin = cms.vdouble(0.11, 0.91, 0.11, 0.0, 0.0, 
            0.85, 0.0, 0.0)
    ),
    classbasedlooseEleIDCutsV01 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.053, 0.0189, 0.059, 0.099, 0.0278, 
            0.0157, 0.042, 0.08),
        hOverE = cms.vdouble(0.076, 0.033, 0.07, 0.0, 0.083, 
            0.0148, 0.033, 0.0),
        sigmaEtaEta = cms.vdouble(0.0101, 0.0095, 0.0097, 0.0, 0.0271, 
            0.0267, 0.0259, 0.0),
        deltaEtaIn = cms.vdouble(0.0078, 0.00259, 0.0062, 0.0, 0.0078, 
            0.0061, 0.0061, 0.0),
        eSeedOverPin = cms.vdouble(0.3, 0.92, 0.211, 0.0, 0.42, 
            0.88, 0.68, 0.0)
    ),
    classbasedlooseEleIDCutsV02 = cms.PSet(
        cutisohcal = cms.vdouble(13.5, 9.93, 7.56, 14.8, 8.1, 
            10.8, 42.7, 20.1, 9.11, 10.4, 
            6.89, 5.59, 8.53, 9.59, 24.2, 
            2.78, 8.67, 0.288),
        cutmishits = cms.vdouble(5.5, 1.5, 5.5, 2.5, 2.5, 
            2.5, 3.5, 5.5, 0.5, 1.5, 
            2.5, 0.5, 1.5, 1.5, 0.5, 
            0.5, 0.5, 0.5),
        cuthoe = cms.vdouble(0.0887, 0.0934, 0.0949, 0.0986, 0.0431, 
            0.0878, 0.097, 0.0509, 0.098, 0.0991, 
            0.0321, 0.0928, 0.0663, 0.0717, 0.0966, 
            0.0758, 0.0149, 0.0131),
        cutdeta = cms.vdouble(0.00958, 0.00406, 0.0122, 0.0137, 0.00837, 
            0.0127, 0.011, 0.00336, 0.00977, 0.015, 
            0.00675, 0.0109, 0.014, 0.00508, 0.0109, 
            0.0146, 0.00506, 0.0127),
        cuteopin = cms.vdouble(0.878, 0.802, 0.814, 0.942, 0.735, 
            0.774, 0.829, 0.909, 0.829, 0.813, 
            0.86, 0.897, 0.817, 0.831, 0.818, 
            0.861, 0.787, 0.789),
        cutip = cms.vdouble(0.0246, 0.076, 0.0966, 0.0885, 0.441, 
            0.205, 0.0292, 0.0293, 0.0619, 0.0251, 
            0.159, 0.0815, 7.29, 0.0106, 5.76, 
            6.89, 1.27, 5.89),
        cutisotk = cms.vdouble(24.3, 8.45, 14.4, 27.8, 6.02, 
            10.5, 14.1, 10.2, 14.5, 19.1, 
            6.1, 14.1, 8.59, 8.33, 8.3, 
            8.93, 8.6, 16.0),
        cutsee = cms.vdouble(0.0172, 0.0115, 0.0143, 0.0344, 0.0295, 
            0.0304, 0.0145, 0.0108, 0.0128, 0.0347, 
            0.0307, 0.0316, 0.018, 0.011, 0.0132, 
            0.0349, 0.031, 0.0327),
        cutdphi = cms.vdouble(0.0372, 0.114, 0.118, 0.0488, 0.117, 
            0.119, 0.0606, 0.0548, 0.117, 0.07, 
            0.0355, 0.117, 0.088, 0.045, 0.118, 
            0.0919, 0.0236, 0.0515),
        cutisoecal = cms.vdouble(33.4, 28.1, 7.32, 27.4, 7.33, 
            21.7, 93.8, 102.0, 12.1, 26.0, 
            8.91, 10.0, 16.1, 31.3, 16.9, 
            15.4, 13.3, 37.7)
    ),
    classbasedlooseEleIDCutsV03 = cms.PSet(
        cutdetain = cms.vdouble(0.00989, 0.00484, 0.0146, 0.0146, 0.00902, 
            0.0172, 0.0137, 0.0477, 0.0275, 0.00967, 
            0.00377, 0.00924, 0.013, 0.00666, 0.0123, 
            0.0125, 0.0228, 0.0112, 0.0106, 0.0038, 
            0.00897, 0.0139, 0.00667, 0.0122, 0.0122, 
            0.0193, 0.00239),
        cutiso_sum = cms.vdouble(31.5, 10.3, 8.8, 11.0, 6.13, 
            6.94, 7.52, 9.0, 3.5, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0431, 0.0767, 0.139, 0.101, 0.149, 
            0.154, 0.932, 0.15, 0.124, 0.0238, 
            0.0467, 0.0759, 0.0369, 0.147, 0.0986, 
            0.0626, 0.195, 0.116, 0.0122, 0.0125, 
            0.0693, 0.0162, 0.089, 0.0673, 0.0467, 
            0.0651, 0.0221),
        cuthoe = cms.vdouble(0.166, 0.0771, 0.144, 0.37, 0.0497, 
            0.139, 0.401, 2.68, 0.516, 0.234, 
            0.0556, 0.144, 0.368, 0.031, 0.12, 
            0.602, 2.01, 1.05, 0.104, 0.063, 
            0.0565, 0.38, 0.0192, 0.0294, 0.537, 
            4.65, 1.87),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 2.5, 2.5, 1.5, 2.5, 
            1.5, 1.5, 1.5, 1.5, 0.5, 
            2.5, 2.5, 0.5, 2.5, 1.5, 
            0.5, 1.5, 1.5, 0.5, 2.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(28.9, 15.3, 12.0, 18.3, 7.17, 
            9.42, 11.0, 9.81, 3.94, 22.7, 
            15.9, 12.3, 17.0, 7.58, 8.89, 
            15.2, 12.7, 6.17, 20.8, 21.2, 
            17.2, 15.5, 9.37, 10.6, 19.8, 
            22.1, 15.6),
        cutdcotdist = cms.vdouble(0.0393, 0.0392, 0.0397, 0.0394, 0.0393, 
            0.039, 0.0378, 0.0388, 0.0382, 0.0385, 
            0.0167, 0.00325, 0.0394, 0.0387, 0.0388, 
            0.0227, 0.0258, 0.0127, 0.0298, 0.03, 
            0.00946, 0.039, 0.0231, 0.0278, 0.00162, 
            0.0367, 0.0199),
        cutsee = cms.vdouble(0.0175, 0.0127, 0.0177, 0.0373, 0.0314, 
            0.0329, 0.0157, 0.0409, 0.14, 0.0169, 
            0.0106, 0.0142, 0.0363, 0.0322, 0.0354, 
            0.0117, 0.0372, 28.2, 0.0171, 0.0113, 
            0.014, 0.0403, 0.0323, 0.0411, 0.0104, 
            0.0436, 0.0114),
        cuteseedopcor = cms.vdouble(0.78, 0.302, 0.483, 0.904, 0.168, 
            0.645, 0.108, 0.284, 0.324, 0.591, 
            0.286, 0.488, 0.813, 0.791, 0.672, 
            0.398, 0.834, 0.878, 0.515, 0.937, 
            0.806, 0.816, 0.85, 0.507, 0.367, 
            0.83, 0.648),
        cutdphiin = cms.vdouble(0.041, 0.275, 0.365, 0.047, 0.273, 
            0.296, 0.329, 0.465, 0.627, 0.0581, 
            0.0954, 0.327, 0.0702, 0.0582, 0.279, 
            0.117, 0.318, 0.246, 0.0821, 0.052, 
            0.292, 0.116, 0.0435, 0.312, 0.118, 
            0.296, 0.0459),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 12.0, 12.0, 
            12.0, 12.0, 12.0, 12.0, 12.0, 
            12.0, 12.5)
    ),
    classbasedlooseEleIDCutsV04 = cms.PSet(
        cutdetain = cms.vdouble(0.00989, 0.00484, 0.0146, 0.0146, 0.00902, 
            0.0172, 0.0137, 0.0477, 0.0275, 0.00967, 
            0.00377, 0.00924, 0.013, 0.00666, 0.0123, 
            0.0125, 0.0228, 0.0112, 0.0106, 0.0038, 
            0.00897, 0.0139, 0.00667, 0.0122, 0.0122, 
            0.0193, 0.00239),
        cutiso_sum = cms.vdouble(31.5, 10.3, 8.8, 11.0, 6.13, 
            6.94, 7.52, 9.0, 3.5, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0431, 0.0767, 0.139, 0.101, 0.149, 
            0.154, 0.932, 0.15, 0.124, 0.0238, 
            0.0467, 0.0759, 0.0369, 0.147, 0.0986, 
            0.0626, 0.195, 0.116, 0.0122, 0.0125, 
            0.0693, 0.0162, 0.089, 0.0673, 0.0467, 
            0.0651, 0.0221),
        cuthoe = cms.vdouble(0.166, 0.0771, 0.144, 0.37, 0.0497, 
            0.139, 0.401, 2.68, 0.516, 0.234, 
            0.0556, 0.144, 0.368, 0.031, 0.12, 
            0.602, 2.01, 1.05, 0.104, 0.063, 
            0.0565, 0.38, 0.0192, 0.0294, 0.537, 
            4.65, 1.87),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 2.5, 2.5, 1.5, 2.5, 
            1.5, 1.5, 1.5, 1.5, 0.5, 
            2.5, 2.5, 0.5, 2.5, 1.5, 
            0.5, 1.5, 1.5, 0.5, 2.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(28.9, 15.3, 12.0, 18.3, 7.17, 
            9.42, 11.0, 9.81, 3.94, 22.7, 
            15.9, 12.3, 17.0, 7.58, 8.89, 
            15.2, 12.7, 6.17, 20.8, 21.2, 
            17.2, 15.5, 9.37, 10.6, 19.8, 
            22.1, 15.6),
        cutdcotdist = cms.vdouble(0.0393, 0.0392, 0.0397, 0.0394, 0.0393, 
            0.039, 0.0378, 0.0388, 0.0382, 0.0385, 
            0.0167, 0.00325, 0.0394, 0.0387, 0.0388, 
            0.0227, 0.0258, 0.0127, 0.0298, 0.03, 
            0.00946, 0.039, 0.0231, 0.0278, 0.00162, 
            0.0367, 0.0199),
        cutsee = cms.vdouble(0.0175, 0.0127, 0.0177, 0.0373, 0.0314, 
            0.0329, 0.0157, 0.0409, 0.14, 0.0169, 
            0.0106, 0.0142, 0.0363, 0.0322, 0.0354, 
            0.0117, 0.0372, 28.2, 0.0171, 0.0113, 
            0.014, 0.0403, 0.0323, 0.0411, 0.0104, 
            0.0436, 0.0114),
        cuteseedopcor = cms.vdouble(0.78, 0.302, 0.483, 0.904, 0.168, 
            0.645, 0.108, 0.284, 0.324, 0.591, 
            0.286, 0.488, 0.813, 0.791, 0.672, 
            0.398, 0.834, 0.878, 0.515, 0.937, 
            0.806, 0.816, 0.85, 0.507, 0.367, 
            0.83, 0.648),
        cutdphiin = cms.vdouble(0.041, 0.275, 0.365, 0.047, 0.273, 
            0.296, 0.329, 0.465, 0.627, 0.0581, 
            0.0954, 0.327, 0.0702, 0.0582, 0.279, 
            0.117, 0.318, 0.246, 0.0821, 0.052, 
            0.292, 0.116, 0.0435, 0.312, 0.118, 
            0.296, 0.0459),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 12.0, 12.0, 
            12.0, 12.0, 12.0, 12.0, 12.0, 
            12.0, 12.5)
    ),
    classbasedlooseEleIDCutsV06 = cms.PSet(
        cutdetain = cms.vdouble(0.0137, 0.00678, 0.0241, 0.0187, 0.0161, 
            0.0224, 0.0252, 0.0308, 0.0273),
        cutiso_sum = cms.vdouble(33.0, 17.0, 17.9, 18.8, 8.55, 
            12.5, 17.6, 18.5, 2.98),
        cutip_gsf = cms.vdouble(0.0551, 0.0765, 0.143, 0.0874, 0.594, 
            0.37, 0.0913, 1.15, 0.231),
        cutip_gsfl = cms.vdouble(0.0186, 0.0759, 0.138, 0.0473, 0.62, 
            0.304, 0.109, 0.775, 0.0479),
        cuthoe = cms.vdouble(0.247, 0.137, 0.147, 0.371, 0.0588, 
            0.147, 0.52, 0.452, 0.404),
        cutiso_sumoetl = cms.vdouble(11.3, 9.05, 9.07, 9.94, 5.25, 
            6.15, 10.7, 10.8, 4.4),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 4.5, 3.5, 3.5),
        cuthoel = cms.vdouble(0.236, 0.126, 0.147, 0.375, 0.0392, 
            0.145, 0.365, 0.383, 0.384),
        cutdphiin = cms.vdouble(0.0897, 0.262, 0.353, 0.116, 0.357, 
            0.319, 0.342, 0.404, 0.336),
        cutseel = cms.vdouble(0.0164, 0.0118, 0.015, 0.0523, 0.0326, 
            0.0456, 0.0185, 0.0589, 0.0544),
        cutiso_sumoet = cms.vdouble(34.5, 12.7, 12.1, 19.9, 6.35, 
            8.85, 14.0, 10.5, 9.74),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0176, 0.0125, 0.0181, 0.0415, 0.0364, 
            0.0418, 0.0146, 0.0678, 0.133),
        cuteseedopcor = cms.vdouble(0.63, 0.82, 0.401, 0.718, 0.4, 
            0.458, 0.15, 0.664, 0.373),
        cutdphiinl = cms.vdouble(0.0747, 0.25, 0.356, 0.0956, 0.347, 
            0.326, 0.333, 0.647, 0.289),
        cutdetainl = cms.vdouble(0.0124, 0.00503, 0.0257, 0.0228, 0.0118, 
            0.0178, 0.0188, 0.14, 0.024)
    ),
    src = cms.InputTag("gsfElectrons"),
    robusttightEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    classbasedtightEleIDCuts = cms.PSet(
        cutdetain = cms.vdouble(0.0116, 0.00449, 0.00938, 0.0184, 0.00678, 
            0.0109, 0.0252, 0.0268, 0.0139),
        cutiso_sum = cms.vdouble(15.5, 12.2, 12.2, 11.7, 7.16, 
            9.71, 8.66, 11.9, 2.98),
        cutip_gsf = cms.vdouble(0.0131, 0.0586, 0.0839, 0.0366, 0.452, 
            0.204, 0.0913, 0.0802, 0.0731),
        cutip_gsfl = cms.vdouble(0.0119, 0.0527, 0.0471, 0.0212, 0.233, 
            0.267, 0.109, 0.122, 0.0479),
        cuthoe = cms.vdouble(0.215, 0.0608, 0.147, 0.369, 0.0349, 
            0.102, 0.52, 0.422, 0.404),
        cutiso_sumoetl = cms.vdouble(6.21, 6.81, 5.3, 5.39, 2.73, 
            4.73, 4.84, 3.46, 3.73),
        cutfmishits = cms.vdouble(1.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 1.5, 2.5, 0.5),
        cuthoel = cms.vdouble(0.228, 0.0836, 0.143, 0.37, 0.0392, 
            0.0979, 0.3, 0.381, 0.339),
        cutdphiin = cms.vdouble(0.0897, 0.0993, 0.295, 0.0979, 0.151, 
            0.252, 0.341, 0.308, 0.328),
        cutseel = cms.vdouble(0.0132, 0.0117, 0.0112, 0.0387, 0.0281, 
            0.0287, 0.00987, 0.0296, 0.0544),
        cutiso_sumoet = cms.vdouble(11.9, 7.81, 6.28, 8.92, 4.65, 
            5.49, 9.36, 8.84, 5.94),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0145, 0.0116, 0.012, 0.039, 0.0297, 
            0.0311, 0.00987, 0.0347, 0.0917),
        cuteseedopcor = cms.vdouble(0.637, 0.943, 0.742, 0.748, 0.763, 
            0.631, 0.214, 0.873, 0.473),
        cutdphiinl = cms.vdouble(0.061, 0.14, 0.286, 0.0921, 0.197, 
            0.24, 0.333, 0.303, 0.258),
        cutdetainl = cms.vdouble(0.00816, 0.00401, 0.0081, 0.019, 0.00588, 
            0.00893, 0.0171, 0.0434, 0.0143)
    ),
    algorithm = cms.string('eIDCB'),
    robusthighenergyEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.115, 0.014, 0.09, 0.009, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.15, 0.0275, 0.092, 0.0105, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.075, 0.0132, 0.058, 0.0077, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.083, 0.027, 0.042, 0.01, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    additionalCategories = cms.bool(True),
    etBinning = cms.bool(True)
)


process.eidRobustHighEnergy = cms.EDProducer("EleIdCutBasedExtProducer",
    electronQuality = cms.string('highenergy'),
    classbasedtightEleIDCutsV02 = cms.PSet(
        cutisohcal = cms.vdouble(10.9, 7.01, 8.75, 3.51, 7.75, 
            1.62, 11.6, 9.9, 4.97, 5.33, 
            3.18, 2.32, 0.164, 5.46, 12.0, 
            0.00604, 4.1, 0.000628),
        cutmishits = cms.vdouble(5.5, 1.5, 0.5, 1.5, 2.5, 
            0.5, 3.5, 5.5, 0.5, 0.5, 
            0.5, 0.5, 0.5, 1.5, 0.5, 
            0.5, 0.5, 0.5),
        cuthoe = cms.vdouble(0.0871, 0.0289, 0.0783, 0.0946, 0.0245, 
            0.0363, 0.0671, 0.048, 0.0614, 0.0924, 
            0.0158, 0.049, 0.0382, 0.0915, 0.0451, 
            0.0452, 0.00196, 0.0043),
        cutdeta = cms.vdouble(0.00915, 0.00302, 0.0061, 0.0135, 0.00565, 
            0.00793, 0.0102, 0.00266, 0.0106, 0.00903, 
            0.00766, 0.00723, 0.0116, 0.00203, 0.00659, 
            0.0148, 0.00555, 0.0128),
        cuteopin = cms.vdouble(0.878, 0.859, 0.874, 0.944, 0.737, 
            0.773, 0.86, 0.967, 0.917, 0.812, 
            0.915, 1.01, 0.847, 0.953, 0.979, 
            0.841, 0.771, 1.09),
        cutip = cms.vdouble(0.0239, 0.027, 0.0768, 0.0231, 0.178, 
            0.0957, 0.0102, 0.0168, 0.043, 0.0166, 
            0.0594, 0.0308, 2.1, 0.00527, 3.17, 
            4.91, 0.769, 5.9),
        cutisotk = cms.vdouble(6.53, 4.6, 6.0, 8.63, 3.11, 
            7.77, 5.42, 4.81, 4.06, 6.47, 
            2.8, 3.45, 5.29, 5.18, 15.4, 
            5.38, 4.47, 0.0347),
        cutsee = cms.vdouble(0.0131, 0.0106, 0.0115, 0.0306, 0.028, 
            0.0293, 0.0131, 0.0106, 0.0115, 0.0317, 
            0.029, 0.0289, 0.0142, 0.0106, 0.0103, 
            0.035, 0.0296, 0.0333),
        cutdphi = cms.vdouble(0.0369, 0.0307, 0.117, 0.0475, 0.0216, 
            0.117, 0.0372, 0.0246, 0.0426, 0.0612, 
            0.0142, 0.039, 0.0737, 0.0566, 0.0359, 
            0.0187, 0.012, 0.0358),
        cutisoecal = cms.vdouble(20.0, 27.2, 4.48, 13.5, 4.56, 
            3.19, 12.2, 13.1, 7.42, 7.67, 
            4.12, 4.85, 10.1, 12.4, 11.1, 
            11.0, 10.6, 13.4)
    ),
    classbasedtightEleIDCutsV03 = cms.PSet(
        cutdetain = cms.vdouble(0.00811, 0.00341, 0.00633, 0.0103, 0.00667, 
            0.01, 0.0106, 0.0145, 0.0163, 0.0076, 
            0.00259, 0.00511, 0.00941, 0.0043, 0.00857, 
            0.012, 0.0169, 0.00172, 0.00861, 0.00362, 
            0.00601, 0.00925, 0.00489, 0.00832, 0.0119, 
            0.0169, 0.000996),
        cutiso_sum = cms.vdouble(11.8, 8.31, 6.26, 6.18, 3.28, 
            4.38, 4.17, 5.4, 1.57, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0213, 0.0422, 0.0632, 0.0361, 0.073, 
            0.126, 0.171, 0.119, 0.0372, 0.0131, 
            0.0146, 0.0564, 0.0152, 0.0222, 0.0268, 
            0.0314, 0.0884, 0.00374, 0.00852, 0.00761, 
            0.0143, 0.0106, 0.0127, 0.0119, 0.0123, 
            0.0235, 0.00363),
        cuthoe = cms.vdouble(0.0783, 0.0387, 0.105, 0.118, 0.0227, 
            0.062, 0.13, 2.47, 0.38, 0.0888, 
            0.0503, 0.0955, 0.0741, 0.015, 0.03, 
            0.589, 1.13, 0.612, 0.0494, 0.0461, 
            0.0292, 0.0369, 0.0113, 0.0145, 0.124, 
            2.05, 0.61),
        cutfmishits = cms.vdouble(2.5, 1.5, 1.5, 1.5, 1.5, 
            0.5, 2.5, 0.5, 0.5, 2.5, 
            1.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5, -0.5, 2.5, 1.5, 
            0.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(13.7, 11.6, 7.14, 9.98, 3.52, 
            4.87, 6.24, 7.96, 2.53, 11.2, 
            11.9, 7.88, 8.16, 5.58, 5.03, 
            11.4, 8.15, 5.79, 10.4, 11.1, 
            10.4, 7.47, 5.08, 5.9, 11.8, 
            14.1, 11.7),
        cutdcotdist = cms.vdouble(0.0393, 0.0256, 0.00691, 0.0394, 0.0386, 
            0.039, 0.0325, 0.0384, 0.0382, 0.0245, 
            0.000281, 5.46e-05, 0.0342, 0.0232, 0.00107, 
            0.0178, 0.0193, 0.000758, 0.000108, 0.0248, 
            0.000458, 0.0129, 0.00119, 0.0182, 4.53e-05, 
            0.0189, 0.000928),
        cutsee = cms.vdouble(0.0143, 0.0105, 0.0123, 0.0324, 0.0307, 
            0.0301, 0.0109, 0.027, 0.0292, 0.0133, 
            0.0104, 0.0116, 0.0332, 0.0296, 0.031, 
            0.00981, 0.0307, 0.072, 0.0149, 0.0105, 
            0.011, 0.0342, 0.0307, 0.0303, 0.00954, 
            0.0265, 0.0101),
        cuteseedopcor = cms.vdouble(0.784, 0.366, 0.57, 0.911, 0.298, 
            0.645, 0.51, 0.497, 0.932, 0.835, 
            0.968, 0.969, 0.923, 0.898, 0.98, 
            0.63, 0.971, 1.0, 0.515, 0.963, 
            0.986, 0.823, 0.879, 1.01, 0.931, 
            0.937, 1.05),
        cutdphiin = cms.vdouble(0.0404, 0.0499, 0.263, 0.042, 0.0484, 
            0.241, 0.242, 0.231, 0.286, 0.0552, 
            0.0338, 0.154, 0.0623, 0.0183, 0.0392, 
            0.0547, 0.0588, 0.00654, 0.042, 0.0217, 
            0.0885, 0.0445, 0.0141, 0.0234, 0.065, 
            0.0258, 0.0346),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 13.7, 13.2, 
            13.6, 14.2, 14.1, 13.9, 12.9, 
            14.9, 17.7)
    ),
    classbasedtightEleIDCutsV00 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.032, 0.016, 0.0525, 0.09, 0.025, 
            0.035, 0.065, 0.092),
        hOverE = cms.vdouble(0.05, 0.042, 0.045, 0.0, 0.055, 
            0.037, 0.05, 0.0),
        sigmaEtaEta = cms.vdouble(0.0125, 0.011, 0.01, 0.0, 0.0265, 
            0.0252, 0.026, 0.0),
        deltaEtaIn = cms.vdouble(0.0055, 0.003, 0.0065, 0.0, 0.006, 
            0.0055, 0.0075, 0.0),
        eSeedOverPin = cms.vdouble(0.24, 0.94, 0.11, 0.0, 0.32, 
            0.83, 0.0, 0.0)
    ),
    classbasedtightEleIDCutsV01 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.0225, 0.0114, 0.0234, 0.039, 0.0215, 
            0.0095, 0.0148, 0.0167),
        hOverE = cms.vdouble(0.056, 0.0221, 0.037, 0.0, 0.0268, 
            0.0102, 0.0104, 0.0),
        sigmaEtaEta = cms.vdouble(0.0095, 0.0094, 0.0094, 0.0, 0.026, 
            0.0257, 0.0246, 0.0),
        deltaEtaIn = cms.vdouble(0.0043, 0.00282, 0.0036, 0.0, 0.0066, 
            0.0049, 0.0041, 0.0),
        eSeedOverPin = cms.vdouble(0.32, 0.94, 0.221, 0.0, 0.74, 
            0.89, 0.66, 0.0)
    ),
    classbasedtightEleIDCutsV06 = cms.PSet(
        cutdetain = cms.vdouble(0.0116, 0.00449, 0.00938, 0.0184, 0.00678, 
            0.0109, 0.0252, 0.0268, 0.0139),
        cutiso_sum = cms.vdouble(15.5, 12.2, 12.2, 11.7, 7.16, 
            9.71, 8.66, 11.9, 2.98),
        cutip_gsf = cms.vdouble(0.0131, 0.0586, 0.0839, 0.0366, 0.452, 
            0.204, 0.0913, 0.0802, 0.0731),
        cutip_gsfl = cms.vdouble(0.0119, 0.0527, 0.0471, 0.0212, 0.233, 
            0.267, 0.109, 0.122, 0.0479),
        cuthoe = cms.vdouble(0.215, 0.0608, 0.147, 0.369, 0.0349, 
            0.102, 0.52, 0.422, 0.404),
        cutiso_sumoetl = cms.vdouble(6.21, 6.81, 5.3, 5.39, 2.73, 
            4.73, 4.84, 3.46, 3.73),
        cutfmishits = cms.vdouble(1.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 1.5, 2.5, 0.5),
        cuthoel = cms.vdouble(0.228, 0.0836, 0.143, 0.37, 0.0392, 
            0.0979, 0.3, 0.381, 0.339),
        cutdphiin = cms.vdouble(0.0897, 0.0993, 0.295, 0.0979, 0.151, 
            0.252, 0.341, 0.308, 0.328),
        cutseel = cms.vdouble(0.0132, 0.0117, 0.0112, 0.0387, 0.0281, 
            0.0287, 0.00987, 0.0296, 0.0544),
        cutiso_sumoet = cms.vdouble(11.9, 7.81, 6.28, 8.92, 4.65, 
            5.49, 9.36, 8.84, 5.94),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0145, 0.0116, 0.012, 0.039, 0.0297, 
            0.0311, 0.00987, 0.0347, 0.0917),
        cuteseedopcor = cms.vdouble(0.637, 0.943, 0.742, 0.748, 0.763, 
            0.631, 0.214, 0.873, 0.473),
        cutdphiinl = cms.vdouble(0.061, 0.14, 0.286, 0.0921, 0.197, 
            0.24, 0.333, 0.303, 0.258),
        cutdetainl = cms.vdouble(0.00816, 0.00401, 0.0081, 0.019, 0.00588, 
            0.00893, 0.0171, 0.0434, 0.0143)
    ),
    classbasedtightEleIDCutsV04 = cms.PSet(
        cutdetain = cms.vdouble(0.00811, 0.00341, 0.00633, 0.0103, 0.00667, 
            0.01, 0.0106, 0.0145, 0.0163, 0.0076, 
            0.00259, 0.00511, 0.00941, 0.0043, 0.00857, 
            0.012, 0.0169, 0.00172, 0.00861, 0.00362, 
            0.00601, 0.00925, 0.00489, 0.00832, 0.0119, 
            0.0169, 0.000996),
        cutiso_sum = cms.vdouble(11.8, 8.31, 6.26, 6.18, 3.28, 
            4.38, 4.17, 5.4, 1.57, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0213, 0.0422, 0.0632, 0.0361, 0.073, 
            0.126, 0.171, 0.119, 0.0372, 0.0131, 
            0.0146, 0.0564, 0.0152, 0.0222, 0.0268, 
            0.0314, 0.0884, 0.00374, 0.00852, 0.00761, 
            0.0143, 0.0106, 0.0127, 0.0119, 0.0123, 
            0.0235, 0.00363),
        cuthoe = cms.vdouble(0.0783, 0.0387, 0.105, 0.118, 0.0227, 
            0.062, 0.13, 2.47, 0.38, 0.0888, 
            0.0503, 0.0955, 0.0741, 0.015, 0.03, 
            0.589, 1.13, 0.612, 0.0494, 0.0461, 
            0.0292, 0.0369, 0.0113, 0.0145, 0.124, 
            2.05, 0.61),
        cutfmishits = cms.vdouble(2.5, 1.5, 1.5, 1.5, 1.5, 
            0.5, 2.5, 0.5, 0.5, 2.5, 
            1.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5, -0.5, 2.5, 1.5, 
            0.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(13.7, 11.6, 7.14, 9.98, 3.52, 
            4.87, 6.24, 7.96, 2.53, 11.2, 
            11.9, 7.88, 8.16, 5.58, 5.03, 
            11.4, 8.15, 5.79, 10.4, 11.1, 
            10.4, 7.47, 5.08, 5.9, 11.8, 
            14.1, 11.7),
        cutdcotdist = cms.vdouble(0.0393, 0.0256, 0.00691, 0.0394, 0.0386, 
            0.039, 0.0325, 0.0384, 0.0382, 0.0245, 
            0.000281, 5.46e-05, 0.0342, 0.0232, 0.00107, 
            0.0178, 0.0193, 0.000758, 0.000108, 0.0248, 
            0.000458, 0.0129, 0.00119, 0.0182, 4.53e-05, 
            0.0189, 0.000928),
        cutsee = cms.vdouble(0.0143, 0.0105, 0.0123, 0.0324, 0.0307, 
            0.0301, 0.0109, 0.027, 0.0292, 0.0133, 
            0.0104, 0.0116, 0.0332, 0.0296, 0.031, 
            0.00981, 0.0307, 0.072, 0.0149, 0.0105, 
            0.011, 0.0342, 0.0307, 0.0303, 0.00954, 
            0.0265, 0.0101),
        cuteseedopcor = cms.vdouble(0.784, 0.366, 0.57, 0.911, 0.298, 
            0.645, 0.51, 0.497, 0.932, 0.835, 
            0.968, 0.969, 0.923, 0.898, 0.98, 
            0.63, 0.971, 1.0, 0.515, 0.963, 
            0.986, 0.823, 0.879, 1.01, 0.931, 
            0.937, 1.05),
        cutdphiin = cms.vdouble(0.0404, 0.0499, 0.263, 0.042, 0.0484, 
            0.241, 0.242, 0.231, 0.286, 0.0552, 
            0.0338, 0.154, 0.0623, 0.0183, 0.0392, 
            0.0547, 0.0588, 0.00654, 0.042, 0.0217, 
            0.0885, 0.0445, 0.0141, 0.0234, 0.065, 
            0.0258, 0.0346),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 13.7, 13.2, 
            13.6, 14.2, 14.1, 13.9, 12.9, 
            14.9, 17.7)
    ),
    electronIDType = cms.string('robust'),
    robusttightEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    electronVersion = cms.string(''),
    robusttightEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.015, 0.0092, 0.02, 0.0025, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.018, 0.025, 0.02, 0.004, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusttightEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.01, 0.0099, 0.025, 0.004, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.01, 0.028, 0.02, 0.0066, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    reducedBarrelRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    robusttightEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    reducedEndcapRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    verticesCollection = cms.InputTag("offlinePrimaryVerticesWithBS"),
    classbasedlooseEleIDCuts = cms.PSet(
        cutdetain = cms.vdouble(0.0137, 0.00678, 0.0241, 0.0187, 0.0161, 
            0.0224, 0.0252, 0.0308, 0.0273),
        cutiso_sum = cms.vdouble(33.0, 17.0, 17.9, 18.8, 8.55, 
            12.5, 17.6, 18.5, 2.98),
        cutip_gsf = cms.vdouble(0.0551, 0.0765, 0.143, 0.0874, 0.594, 
            0.37, 0.0913, 1.15, 0.231),
        cutip_gsfl = cms.vdouble(0.0186, 0.0759, 0.138, 0.0473, 0.62, 
            0.304, 0.109, 0.775, 0.0479),
        cuthoe = cms.vdouble(0.247, 0.137, 0.147, 0.371, 0.0588, 
            0.147, 0.52, 0.452, 0.404),
        cutiso_sumoetl = cms.vdouble(11.3, 9.05, 9.07, 9.94, 5.25, 
            6.15, 10.7, 10.8, 4.4),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 4.5, 3.5, 3.5),
        cuthoel = cms.vdouble(0.236, 0.126, 0.147, 0.375, 0.0392, 
            0.145, 0.365, 0.383, 0.384),
        cutdphiin = cms.vdouble(0.0897, 0.262, 0.353, 0.116, 0.357, 
            0.319, 0.342, 0.404, 0.336),
        cutseel = cms.vdouble(0.0164, 0.0118, 0.015, 0.0523, 0.0326, 
            0.0456, 0.0185, 0.0589, 0.0544),
        cutiso_sumoet = cms.vdouble(34.5, 12.7, 12.1, 19.9, 6.35, 
            8.85, 14.0, 10.5, 9.74),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0176, 0.0125, 0.0181, 0.0415, 0.0364, 
            0.0418, 0.0146, 0.0678, 0.133),
        cuteseedopcor = cms.vdouble(0.63, 0.82, 0.401, 0.718, 0.4, 
            0.458, 0.15, 0.664, 0.373),
        cutdphiinl = cms.vdouble(0.0747, 0.25, 0.356, 0.0956, 0.347, 
            0.326, 0.333, 0.647, 0.289),
        cutdetainl = cms.vdouble(0.0124, 0.00503, 0.0257, 0.0228, 0.0118, 
            0.0178, 0.0188, 0.14, 0.024)
    ),
    robusttightEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.0275, 0.09, 0.007, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.011, 0.09, 0.005, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.1, 0.0275, 0.09, 0.007, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    classbasedlooseEleIDCutsV00 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.05, 0.025, 0.053, 0.09, 0.07, 
            0.03, 0.092, 0.092),
        hOverE = cms.vdouble(0.115, 0.1, 0.055, 0.0, 0.145, 
            0.12, 0.15, 0.0),
        sigmaEtaEta = cms.vdouble(0.014, 0.012, 0.0115, 0.0, 0.0275, 
            0.0265, 0.0265, 0.0),
        deltaEtaIn = cms.vdouble(0.009, 0.0045, 0.0085, 0.0, 0.0105, 
            0.0068, 0.01, 0.0),
        eSeedOverPin = cms.vdouble(0.11, 0.91, 0.11, 0.0, 0.0, 
            0.85, 0.0, 0.0)
    ),
    classbasedlooseEleIDCutsV01 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.053, 0.0189, 0.059, 0.099, 0.0278, 
            0.0157, 0.042, 0.08),
        hOverE = cms.vdouble(0.076, 0.033, 0.07, 0.0, 0.083, 
            0.0148, 0.033, 0.0),
        sigmaEtaEta = cms.vdouble(0.0101, 0.0095, 0.0097, 0.0, 0.0271, 
            0.0267, 0.0259, 0.0),
        deltaEtaIn = cms.vdouble(0.0078, 0.00259, 0.0062, 0.0, 0.0078, 
            0.0061, 0.0061, 0.0),
        eSeedOverPin = cms.vdouble(0.3, 0.92, 0.211, 0.0, 0.42, 
            0.88, 0.68, 0.0)
    ),
    classbasedlooseEleIDCutsV02 = cms.PSet(
        cutisohcal = cms.vdouble(13.5, 9.93, 7.56, 14.8, 8.1, 
            10.8, 42.7, 20.1, 9.11, 10.4, 
            6.89, 5.59, 8.53, 9.59, 24.2, 
            2.78, 8.67, 0.288),
        cutmishits = cms.vdouble(5.5, 1.5, 5.5, 2.5, 2.5, 
            2.5, 3.5, 5.5, 0.5, 1.5, 
            2.5, 0.5, 1.5, 1.5, 0.5, 
            0.5, 0.5, 0.5),
        cuthoe = cms.vdouble(0.0887, 0.0934, 0.0949, 0.0986, 0.0431, 
            0.0878, 0.097, 0.0509, 0.098, 0.0991, 
            0.0321, 0.0928, 0.0663, 0.0717, 0.0966, 
            0.0758, 0.0149, 0.0131),
        cutdeta = cms.vdouble(0.00958, 0.00406, 0.0122, 0.0137, 0.00837, 
            0.0127, 0.011, 0.00336, 0.00977, 0.015, 
            0.00675, 0.0109, 0.014, 0.00508, 0.0109, 
            0.0146, 0.00506, 0.0127),
        cuteopin = cms.vdouble(0.878, 0.802, 0.814, 0.942, 0.735, 
            0.774, 0.829, 0.909, 0.829, 0.813, 
            0.86, 0.897, 0.817, 0.831, 0.818, 
            0.861, 0.787, 0.789),
        cutip = cms.vdouble(0.0246, 0.076, 0.0966, 0.0885, 0.441, 
            0.205, 0.0292, 0.0293, 0.0619, 0.0251, 
            0.159, 0.0815, 7.29, 0.0106, 5.76, 
            6.89, 1.27, 5.89),
        cutisotk = cms.vdouble(24.3, 8.45, 14.4, 27.8, 6.02, 
            10.5, 14.1, 10.2, 14.5, 19.1, 
            6.1, 14.1, 8.59, 8.33, 8.3, 
            8.93, 8.6, 16.0),
        cutsee = cms.vdouble(0.0172, 0.0115, 0.0143, 0.0344, 0.0295, 
            0.0304, 0.0145, 0.0108, 0.0128, 0.0347, 
            0.0307, 0.0316, 0.018, 0.011, 0.0132, 
            0.0349, 0.031, 0.0327),
        cutdphi = cms.vdouble(0.0372, 0.114, 0.118, 0.0488, 0.117, 
            0.119, 0.0606, 0.0548, 0.117, 0.07, 
            0.0355, 0.117, 0.088, 0.045, 0.118, 
            0.0919, 0.0236, 0.0515),
        cutisoecal = cms.vdouble(33.4, 28.1, 7.32, 27.4, 7.33, 
            21.7, 93.8, 102.0, 12.1, 26.0, 
            8.91, 10.0, 16.1, 31.3, 16.9, 
            15.4, 13.3, 37.7)
    ),
    classbasedlooseEleIDCutsV03 = cms.PSet(
        cutdetain = cms.vdouble(0.00989, 0.00484, 0.0146, 0.0146, 0.00902, 
            0.0172, 0.0137, 0.0477, 0.0275, 0.00967, 
            0.00377, 0.00924, 0.013, 0.00666, 0.0123, 
            0.0125, 0.0228, 0.0112, 0.0106, 0.0038, 
            0.00897, 0.0139, 0.00667, 0.0122, 0.0122, 
            0.0193, 0.00239),
        cutiso_sum = cms.vdouble(31.5, 10.3, 8.8, 11.0, 6.13, 
            6.94, 7.52, 9.0, 3.5, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0431, 0.0767, 0.139, 0.101, 0.149, 
            0.154, 0.932, 0.15, 0.124, 0.0238, 
            0.0467, 0.0759, 0.0369, 0.147, 0.0986, 
            0.0626, 0.195, 0.116, 0.0122, 0.0125, 
            0.0693, 0.0162, 0.089, 0.0673, 0.0467, 
            0.0651, 0.0221),
        cuthoe = cms.vdouble(0.166, 0.0771, 0.144, 0.37, 0.0497, 
            0.139, 0.401, 2.68, 0.516, 0.234, 
            0.0556, 0.144, 0.368, 0.031, 0.12, 
            0.602, 2.01, 1.05, 0.104, 0.063, 
            0.0565, 0.38, 0.0192, 0.0294, 0.537, 
            4.65, 1.87),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 2.5, 2.5, 1.5, 2.5, 
            1.5, 1.5, 1.5, 1.5, 0.5, 
            2.5, 2.5, 0.5, 2.5, 1.5, 
            0.5, 1.5, 1.5, 0.5, 2.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(28.9, 15.3, 12.0, 18.3, 7.17, 
            9.42, 11.0, 9.81, 3.94, 22.7, 
            15.9, 12.3, 17.0, 7.58, 8.89, 
            15.2, 12.7, 6.17, 20.8, 21.2, 
            17.2, 15.5, 9.37, 10.6, 19.8, 
            22.1, 15.6),
        cutdcotdist = cms.vdouble(0.0393, 0.0392, 0.0397, 0.0394, 0.0393, 
            0.039, 0.0378, 0.0388, 0.0382, 0.0385, 
            0.0167, 0.00325, 0.0394, 0.0387, 0.0388, 
            0.0227, 0.0258, 0.0127, 0.0298, 0.03, 
            0.00946, 0.039, 0.0231, 0.0278, 0.00162, 
            0.0367, 0.0199),
        cutsee = cms.vdouble(0.0175, 0.0127, 0.0177, 0.0373, 0.0314, 
            0.0329, 0.0157, 0.0409, 0.14, 0.0169, 
            0.0106, 0.0142, 0.0363, 0.0322, 0.0354, 
            0.0117, 0.0372, 28.2, 0.0171, 0.0113, 
            0.014, 0.0403, 0.0323, 0.0411, 0.0104, 
            0.0436, 0.0114),
        cuteseedopcor = cms.vdouble(0.78, 0.302, 0.483, 0.904, 0.168, 
            0.645, 0.108, 0.284, 0.324, 0.591, 
            0.286, 0.488, 0.813, 0.791, 0.672, 
            0.398, 0.834, 0.878, 0.515, 0.937, 
            0.806, 0.816, 0.85, 0.507, 0.367, 
            0.83, 0.648),
        cutdphiin = cms.vdouble(0.041, 0.275, 0.365, 0.047, 0.273, 
            0.296, 0.329, 0.465, 0.627, 0.0581, 
            0.0954, 0.327, 0.0702, 0.0582, 0.279, 
            0.117, 0.318, 0.246, 0.0821, 0.052, 
            0.292, 0.116, 0.0435, 0.312, 0.118, 
            0.296, 0.0459),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 12.0, 12.0, 
            12.0, 12.0, 12.0, 12.0, 12.0, 
            12.0, 12.5)
    ),
    classbasedlooseEleIDCutsV04 = cms.PSet(
        cutdetain = cms.vdouble(0.00989, 0.00484, 0.0146, 0.0146, 0.00902, 
            0.0172, 0.0137, 0.0477, 0.0275, 0.00967, 
            0.00377, 0.00924, 0.013, 0.00666, 0.0123, 
            0.0125, 0.0228, 0.0112, 0.0106, 0.0038, 
            0.00897, 0.0139, 0.00667, 0.0122, 0.0122, 
            0.0193, 0.00239),
        cutiso_sum = cms.vdouble(31.5, 10.3, 8.8, 11.0, 6.13, 
            6.94, 7.52, 9.0, 3.5, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0431, 0.0767, 0.139, 0.101, 0.149, 
            0.154, 0.932, 0.15, 0.124, 0.0238, 
            0.0467, 0.0759, 0.0369, 0.147, 0.0986, 
            0.0626, 0.195, 0.116, 0.0122, 0.0125, 
            0.0693, 0.0162, 0.089, 0.0673, 0.0467, 
            0.0651, 0.0221),
        cuthoe = cms.vdouble(0.166, 0.0771, 0.144, 0.37, 0.0497, 
            0.139, 0.401, 2.68, 0.516, 0.234, 
            0.0556, 0.144, 0.368, 0.031, 0.12, 
            0.602, 2.01, 1.05, 0.104, 0.063, 
            0.0565, 0.38, 0.0192, 0.0294, 0.537, 
            4.65, 1.87),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 2.5, 2.5, 1.5, 2.5, 
            1.5, 1.5, 1.5, 1.5, 0.5, 
            2.5, 2.5, 0.5, 2.5, 1.5, 
            0.5, 1.5, 1.5, 0.5, 2.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(28.9, 15.3, 12.0, 18.3, 7.17, 
            9.42, 11.0, 9.81, 3.94, 22.7, 
            15.9, 12.3, 17.0, 7.58, 8.89, 
            15.2, 12.7, 6.17, 20.8, 21.2, 
            17.2, 15.5, 9.37, 10.6, 19.8, 
            22.1, 15.6),
        cutdcotdist = cms.vdouble(0.0393, 0.0392, 0.0397, 0.0394, 0.0393, 
            0.039, 0.0378, 0.0388, 0.0382, 0.0385, 
            0.0167, 0.00325, 0.0394, 0.0387, 0.0388, 
            0.0227, 0.0258, 0.0127, 0.0298, 0.03, 
            0.00946, 0.039, 0.0231, 0.0278, 0.00162, 
            0.0367, 0.0199),
        cutsee = cms.vdouble(0.0175, 0.0127, 0.0177, 0.0373, 0.0314, 
            0.0329, 0.0157, 0.0409, 0.14, 0.0169, 
            0.0106, 0.0142, 0.0363, 0.0322, 0.0354, 
            0.0117, 0.0372, 28.2, 0.0171, 0.0113, 
            0.014, 0.0403, 0.0323, 0.0411, 0.0104, 
            0.0436, 0.0114),
        cuteseedopcor = cms.vdouble(0.78, 0.302, 0.483, 0.904, 0.168, 
            0.645, 0.108, 0.284, 0.324, 0.591, 
            0.286, 0.488, 0.813, 0.791, 0.672, 
            0.398, 0.834, 0.878, 0.515, 0.937, 
            0.806, 0.816, 0.85, 0.507, 0.367, 
            0.83, 0.648),
        cutdphiin = cms.vdouble(0.041, 0.275, 0.365, 0.047, 0.273, 
            0.296, 0.329, 0.465, 0.627, 0.0581, 
            0.0954, 0.327, 0.0702, 0.0582, 0.279, 
            0.117, 0.318, 0.246, 0.0821, 0.052, 
            0.292, 0.116, 0.0435, 0.312, 0.118, 
            0.296, 0.0459),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 12.0, 12.0, 
            12.0, 12.0, 12.0, 12.0, 12.0, 
            12.0, 12.5)
    ),
    classbasedlooseEleIDCutsV06 = cms.PSet(
        cutdetain = cms.vdouble(0.0137, 0.00678, 0.0241, 0.0187, 0.0161, 
            0.0224, 0.0252, 0.0308, 0.0273),
        cutiso_sum = cms.vdouble(33.0, 17.0, 17.9, 18.8, 8.55, 
            12.5, 17.6, 18.5, 2.98),
        cutip_gsf = cms.vdouble(0.0551, 0.0765, 0.143, 0.0874, 0.594, 
            0.37, 0.0913, 1.15, 0.231),
        cutip_gsfl = cms.vdouble(0.0186, 0.0759, 0.138, 0.0473, 0.62, 
            0.304, 0.109, 0.775, 0.0479),
        cuthoe = cms.vdouble(0.247, 0.137, 0.147, 0.371, 0.0588, 
            0.147, 0.52, 0.452, 0.404),
        cutiso_sumoetl = cms.vdouble(11.3, 9.05, 9.07, 9.94, 5.25, 
            6.15, 10.7, 10.8, 4.4),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 4.5, 3.5, 3.5),
        cuthoel = cms.vdouble(0.236, 0.126, 0.147, 0.375, 0.0392, 
            0.145, 0.365, 0.383, 0.384),
        cutdphiin = cms.vdouble(0.0897, 0.262, 0.353, 0.116, 0.357, 
            0.319, 0.342, 0.404, 0.336),
        cutseel = cms.vdouble(0.0164, 0.0118, 0.015, 0.0523, 0.0326, 
            0.0456, 0.0185, 0.0589, 0.0544),
        cutiso_sumoet = cms.vdouble(34.5, 12.7, 12.1, 19.9, 6.35, 
            8.85, 14.0, 10.5, 9.74),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0176, 0.0125, 0.0181, 0.0415, 0.0364, 
            0.0418, 0.0146, 0.0678, 0.133),
        cuteseedopcor = cms.vdouble(0.63, 0.82, 0.401, 0.718, 0.4, 
            0.458, 0.15, 0.664, 0.373),
        cutdphiinl = cms.vdouble(0.0747, 0.25, 0.356, 0.0956, 0.347, 
            0.326, 0.333, 0.647, 0.289),
        cutdetainl = cms.vdouble(0.0124, 0.00503, 0.0257, 0.0228, 0.0118, 
            0.0178, 0.0188, 0.14, 0.024)
    ),
    src = cms.InputTag("gsfElectrons"),
    robusttightEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    classbasedtightEleIDCuts = cms.PSet(
        cutdetain = cms.vdouble(0.0116, 0.00449, 0.00938, 0.0184, 0.00678, 
            0.0109, 0.0252, 0.0268, 0.0139),
        cutiso_sum = cms.vdouble(15.5, 12.2, 12.2, 11.7, 7.16, 
            9.71, 8.66, 11.9, 2.98),
        cutip_gsf = cms.vdouble(0.0131, 0.0586, 0.0839, 0.0366, 0.452, 
            0.204, 0.0913, 0.0802, 0.0731),
        cutip_gsfl = cms.vdouble(0.0119, 0.0527, 0.0471, 0.0212, 0.233, 
            0.267, 0.109, 0.122, 0.0479),
        cuthoe = cms.vdouble(0.215, 0.0608, 0.147, 0.369, 0.0349, 
            0.102, 0.52, 0.422, 0.404),
        cutiso_sumoetl = cms.vdouble(6.21, 6.81, 5.3, 5.39, 2.73, 
            4.73, 4.84, 3.46, 3.73),
        cutfmishits = cms.vdouble(1.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 1.5, 2.5, 0.5),
        cuthoel = cms.vdouble(0.228, 0.0836, 0.143, 0.37, 0.0392, 
            0.0979, 0.3, 0.381, 0.339),
        cutdphiin = cms.vdouble(0.0897, 0.0993, 0.295, 0.0979, 0.151, 
            0.252, 0.341, 0.308, 0.328),
        cutseel = cms.vdouble(0.0132, 0.0117, 0.0112, 0.0387, 0.0281, 
            0.0287, 0.00987, 0.0296, 0.0544),
        cutiso_sumoet = cms.vdouble(11.9, 7.81, 6.28, 8.92, 4.65, 
            5.49, 9.36, 8.84, 5.94),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0145, 0.0116, 0.012, 0.039, 0.0297, 
            0.0311, 0.00987, 0.0347, 0.0917),
        cuteseedopcor = cms.vdouble(0.637, 0.943, 0.742, 0.748, 0.763, 
            0.631, 0.214, 0.873, 0.473),
        cutdphiinl = cms.vdouble(0.061, 0.14, 0.286, 0.0921, 0.197, 
            0.24, 0.333, 0.303, 0.258),
        cutdetainl = cms.vdouble(0.00816, 0.00401, 0.0081, 0.019, 0.00588, 
            0.00893, 0.0171, 0.0434, 0.0143)
    ),
    algorithm = cms.string('eIDCB'),
    robusthighenergyEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.115, 0.014, 0.09, 0.009, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.15, 0.0275, 0.092, 0.0105, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.075, 0.0132, 0.058, 0.0077, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.083, 0.027, 0.042, 0.01, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    additionalCategories = cms.bool(True),
    etBinning = cms.bool(True)
)


process.eidRobustLoose = cms.EDProducer("EleIdCutBasedExtProducer",
    electronQuality = cms.string('loose'),
    classbasedtightEleIDCutsV02 = cms.PSet(
        cutisohcal = cms.vdouble(10.9, 7.01, 8.75, 3.51, 7.75, 
            1.62, 11.6, 9.9, 4.97, 5.33, 
            3.18, 2.32, 0.164, 5.46, 12.0, 
            0.00604, 4.1, 0.000628),
        cutmishits = cms.vdouble(5.5, 1.5, 0.5, 1.5, 2.5, 
            0.5, 3.5, 5.5, 0.5, 0.5, 
            0.5, 0.5, 0.5, 1.5, 0.5, 
            0.5, 0.5, 0.5),
        cuthoe = cms.vdouble(0.0871, 0.0289, 0.0783, 0.0946, 0.0245, 
            0.0363, 0.0671, 0.048, 0.0614, 0.0924, 
            0.0158, 0.049, 0.0382, 0.0915, 0.0451, 
            0.0452, 0.00196, 0.0043),
        cutdeta = cms.vdouble(0.00915, 0.00302, 0.0061, 0.0135, 0.00565, 
            0.00793, 0.0102, 0.00266, 0.0106, 0.00903, 
            0.00766, 0.00723, 0.0116, 0.00203, 0.00659, 
            0.0148, 0.00555, 0.0128),
        cuteopin = cms.vdouble(0.878, 0.859, 0.874, 0.944, 0.737, 
            0.773, 0.86, 0.967, 0.917, 0.812, 
            0.915, 1.01, 0.847, 0.953, 0.979, 
            0.841, 0.771, 1.09),
        cutip = cms.vdouble(0.0239, 0.027, 0.0768, 0.0231, 0.178, 
            0.0957, 0.0102, 0.0168, 0.043, 0.0166, 
            0.0594, 0.0308, 2.1, 0.00527, 3.17, 
            4.91, 0.769, 5.9),
        cutisotk = cms.vdouble(6.53, 4.6, 6.0, 8.63, 3.11, 
            7.77, 5.42, 4.81, 4.06, 6.47, 
            2.8, 3.45, 5.29, 5.18, 15.4, 
            5.38, 4.47, 0.0347),
        cutsee = cms.vdouble(0.0131, 0.0106, 0.0115, 0.0306, 0.028, 
            0.0293, 0.0131, 0.0106, 0.0115, 0.0317, 
            0.029, 0.0289, 0.0142, 0.0106, 0.0103, 
            0.035, 0.0296, 0.0333),
        cutdphi = cms.vdouble(0.0369, 0.0307, 0.117, 0.0475, 0.0216, 
            0.117, 0.0372, 0.0246, 0.0426, 0.0612, 
            0.0142, 0.039, 0.0737, 0.0566, 0.0359, 
            0.0187, 0.012, 0.0358),
        cutisoecal = cms.vdouble(20.0, 27.2, 4.48, 13.5, 4.56, 
            3.19, 12.2, 13.1, 7.42, 7.67, 
            4.12, 4.85, 10.1, 12.4, 11.1, 
            11.0, 10.6, 13.4)
    ),
    classbasedtightEleIDCutsV03 = cms.PSet(
        cutdetain = cms.vdouble(0.00811, 0.00341, 0.00633, 0.0103, 0.00667, 
            0.01, 0.0106, 0.0145, 0.0163, 0.0076, 
            0.00259, 0.00511, 0.00941, 0.0043, 0.00857, 
            0.012, 0.0169, 0.00172, 0.00861, 0.00362, 
            0.00601, 0.00925, 0.00489, 0.00832, 0.0119, 
            0.0169, 0.000996),
        cutiso_sum = cms.vdouble(11.8, 8.31, 6.26, 6.18, 3.28, 
            4.38, 4.17, 5.4, 1.57, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0213, 0.0422, 0.0632, 0.0361, 0.073, 
            0.126, 0.171, 0.119, 0.0372, 0.0131, 
            0.0146, 0.0564, 0.0152, 0.0222, 0.0268, 
            0.0314, 0.0884, 0.00374, 0.00852, 0.00761, 
            0.0143, 0.0106, 0.0127, 0.0119, 0.0123, 
            0.0235, 0.00363),
        cuthoe = cms.vdouble(0.0783, 0.0387, 0.105, 0.118, 0.0227, 
            0.062, 0.13, 2.47, 0.38, 0.0888, 
            0.0503, 0.0955, 0.0741, 0.015, 0.03, 
            0.589, 1.13, 0.612, 0.0494, 0.0461, 
            0.0292, 0.0369, 0.0113, 0.0145, 0.124, 
            2.05, 0.61),
        cutfmishits = cms.vdouble(2.5, 1.5, 1.5, 1.5, 1.5, 
            0.5, 2.5, 0.5, 0.5, 2.5, 
            1.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5, -0.5, 2.5, 1.5, 
            0.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(13.7, 11.6, 7.14, 9.98, 3.52, 
            4.87, 6.24, 7.96, 2.53, 11.2, 
            11.9, 7.88, 8.16, 5.58, 5.03, 
            11.4, 8.15, 5.79, 10.4, 11.1, 
            10.4, 7.47, 5.08, 5.9, 11.8, 
            14.1, 11.7),
        cutdcotdist = cms.vdouble(0.0393, 0.0256, 0.00691, 0.0394, 0.0386, 
            0.039, 0.0325, 0.0384, 0.0382, 0.0245, 
            0.000281, 5.46e-05, 0.0342, 0.0232, 0.00107, 
            0.0178, 0.0193, 0.000758, 0.000108, 0.0248, 
            0.000458, 0.0129, 0.00119, 0.0182, 4.53e-05, 
            0.0189, 0.000928),
        cutsee = cms.vdouble(0.0143, 0.0105, 0.0123, 0.0324, 0.0307, 
            0.0301, 0.0109, 0.027, 0.0292, 0.0133, 
            0.0104, 0.0116, 0.0332, 0.0296, 0.031, 
            0.00981, 0.0307, 0.072, 0.0149, 0.0105, 
            0.011, 0.0342, 0.0307, 0.0303, 0.00954, 
            0.0265, 0.0101),
        cuteseedopcor = cms.vdouble(0.784, 0.366, 0.57, 0.911, 0.298, 
            0.645, 0.51, 0.497, 0.932, 0.835, 
            0.968, 0.969, 0.923, 0.898, 0.98, 
            0.63, 0.971, 1.0, 0.515, 0.963, 
            0.986, 0.823, 0.879, 1.01, 0.931, 
            0.937, 1.05),
        cutdphiin = cms.vdouble(0.0404, 0.0499, 0.263, 0.042, 0.0484, 
            0.241, 0.242, 0.231, 0.286, 0.0552, 
            0.0338, 0.154, 0.0623, 0.0183, 0.0392, 
            0.0547, 0.0588, 0.00654, 0.042, 0.0217, 
            0.0885, 0.0445, 0.0141, 0.0234, 0.065, 
            0.0258, 0.0346),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 13.7, 13.2, 
            13.6, 14.2, 14.1, 13.9, 12.9, 
            14.9, 17.7)
    ),
    classbasedtightEleIDCutsV00 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.032, 0.016, 0.0525, 0.09, 0.025, 
            0.035, 0.065, 0.092),
        hOverE = cms.vdouble(0.05, 0.042, 0.045, 0.0, 0.055, 
            0.037, 0.05, 0.0),
        sigmaEtaEta = cms.vdouble(0.0125, 0.011, 0.01, 0.0, 0.0265, 
            0.0252, 0.026, 0.0),
        deltaEtaIn = cms.vdouble(0.0055, 0.003, 0.0065, 0.0, 0.006, 
            0.0055, 0.0075, 0.0),
        eSeedOverPin = cms.vdouble(0.24, 0.94, 0.11, 0.0, 0.32, 
            0.83, 0.0, 0.0)
    ),
    classbasedtightEleIDCutsV01 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.0225, 0.0114, 0.0234, 0.039, 0.0215, 
            0.0095, 0.0148, 0.0167),
        hOverE = cms.vdouble(0.056, 0.0221, 0.037, 0.0, 0.0268, 
            0.0102, 0.0104, 0.0),
        sigmaEtaEta = cms.vdouble(0.0095, 0.0094, 0.0094, 0.0, 0.026, 
            0.0257, 0.0246, 0.0),
        deltaEtaIn = cms.vdouble(0.0043, 0.00282, 0.0036, 0.0, 0.0066, 
            0.0049, 0.0041, 0.0),
        eSeedOverPin = cms.vdouble(0.32, 0.94, 0.221, 0.0, 0.74, 
            0.89, 0.66, 0.0)
    ),
    classbasedtightEleIDCutsV06 = cms.PSet(
        cutdetain = cms.vdouble(0.0116, 0.00449, 0.00938, 0.0184, 0.00678, 
            0.0109, 0.0252, 0.0268, 0.0139),
        cutiso_sum = cms.vdouble(15.5, 12.2, 12.2, 11.7, 7.16, 
            9.71, 8.66, 11.9, 2.98),
        cutip_gsf = cms.vdouble(0.0131, 0.0586, 0.0839, 0.0366, 0.452, 
            0.204, 0.0913, 0.0802, 0.0731),
        cutip_gsfl = cms.vdouble(0.0119, 0.0527, 0.0471, 0.0212, 0.233, 
            0.267, 0.109, 0.122, 0.0479),
        cuthoe = cms.vdouble(0.215, 0.0608, 0.147, 0.369, 0.0349, 
            0.102, 0.52, 0.422, 0.404),
        cutiso_sumoetl = cms.vdouble(6.21, 6.81, 5.3, 5.39, 2.73, 
            4.73, 4.84, 3.46, 3.73),
        cutfmishits = cms.vdouble(1.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 1.5, 2.5, 0.5),
        cuthoel = cms.vdouble(0.228, 0.0836, 0.143, 0.37, 0.0392, 
            0.0979, 0.3, 0.381, 0.339),
        cutdphiin = cms.vdouble(0.0897, 0.0993, 0.295, 0.0979, 0.151, 
            0.252, 0.341, 0.308, 0.328),
        cutseel = cms.vdouble(0.0132, 0.0117, 0.0112, 0.0387, 0.0281, 
            0.0287, 0.00987, 0.0296, 0.0544),
        cutiso_sumoet = cms.vdouble(11.9, 7.81, 6.28, 8.92, 4.65, 
            5.49, 9.36, 8.84, 5.94),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0145, 0.0116, 0.012, 0.039, 0.0297, 
            0.0311, 0.00987, 0.0347, 0.0917),
        cuteseedopcor = cms.vdouble(0.637, 0.943, 0.742, 0.748, 0.763, 
            0.631, 0.214, 0.873, 0.473),
        cutdphiinl = cms.vdouble(0.061, 0.14, 0.286, 0.0921, 0.197, 
            0.24, 0.333, 0.303, 0.258),
        cutdetainl = cms.vdouble(0.00816, 0.00401, 0.0081, 0.019, 0.00588, 
            0.00893, 0.0171, 0.0434, 0.0143)
    ),
    classbasedtightEleIDCutsV04 = cms.PSet(
        cutdetain = cms.vdouble(0.00811, 0.00341, 0.00633, 0.0103, 0.00667, 
            0.01, 0.0106, 0.0145, 0.0163, 0.0076, 
            0.00259, 0.00511, 0.00941, 0.0043, 0.00857, 
            0.012, 0.0169, 0.00172, 0.00861, 0.00362, 
            0.00601, 0.00925, 0.00489, 0.00832, 0.0119, 
            0.0169, 0.000996),
        cutiso_sum = cms.vdouble(11.8, 8.31, 6.26, 6.18, 3.28, 
            4.38, 4.17, 5.4, 1.57, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0213, 0.0422, 0.0632, 0.0361, 0.073, 
            0.126, 0.171, 0.119, 0.0372, 0.0131, 
            0.0146, 0.0564, 0.0152, 0.0222, 0.0268, 
            0.0314, 0.0884, 0.00374, 0.00852, 0.00761, 
            0.0143, 0.0106, 0.0127, 0.0119, 0.0123, 
            0.0235, 0.00363),
        cuthoe = cms.vdouble(0.0783, 0.0387, 0.105, 0.118, 0.0227, 
            0.062, 0.13, 2.47, 0.38, 0.0888, 
            0.0503, 0.0955, 0.0741, 0.015, 0.03, 
            0.589, 1.13, 0.612, 0.0494, 0.0461, 
            0.0292, 0.0369, 0.0113, 0.0145, 0.124, 
            2.05, 0.61),
        cutfmishits = cms.vdouble(2.5, 1.5, 1.5, 1.5, 1.5, 
            0.5, 2.5, 0.5, 0.5, 2.5, 
            1.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5, -0.5, 2.5, 1.5, 
            0.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(13.7, 11.6, 7.14, 9.98, 3.52, 
            4.87, 6.24, 7.96, 2.53, 11.2, 
            11.9, 7.88, 8.16, 5.58, 5.03, 
            11.4, 8.15, 5.79, 10.4, 11.1, 
            10.4, 7.47, 5.08, 5.9, 11.8, 
            14.1, 11.7),
        cutdcotdist = cms.vdouble(0.0393, 0.0256, 0.00691, 0.0394, 0.0386, 
            0.039, 0.0325, 0.0384, 0.0382, 0.0245, 
            0.000281, 5.46e-05, 0.0342, 0.0232, 0.00107, 
            0.0178, 0.0193, 0.000758, 0.000108, 0.0248, 
            0.000458, 0.0129, 0.00119, 0.0182, 4.53e-05, 
            0.0189, 0.000928),
        cutsee = cms.vdouble(0.0143, 0.0105, 0.0123, 0.0324, 0.0307, 
            0.0301, 0.0109, 0.027, 0.0292, 0.0133, 
            0.0104, 0.0116, 0.0332, 0.0296, 0.031, 
            0.00981, 0.0307, 0.072, 0.0149, 0.0105, 
            0.011, 0.0342, 0.0307, 0.0303, 0.00954, 
            0.0265, 0.0101),
        cuteseedopcor = cms.vdouble(0.784, 0.366, 0.57, 0.911, 0.298, 
            0.645, 0.51, 0.497, 0.932, 0.835, 
            0.968, 0.969, 0.923, 0.898, 0.98, 
            0.63, 0.971, 1.0, 0.515, 0.963, 
            0.986, 0.823, 0.879, 1.01, 0.931, 
            0.937, 1.05),
        cutdphiin = cms.vdouble(0.0404, 0.0499, 0.263, 0.042, 0.0484, 
            0.241, 0.242, 0.231, 0.286, 0.0552, 
            0.0338, 0.154, 0.0623, 0.0183, 0.0392, 
            0.0547, 0.0588, 0.00654, 0.042, 0.0217, 
            0.0885, 0.0445, 0.0141, 0.0234, 0.065, 
            0.0258, 0.0346),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 13.7, 13.2, 
            13.6, 14.2, 14.1, 13.9, 12.9, 
            14.9, 17.7)
    ),
    electronIDType = cms.string('robust'),
    robusttightEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    electronVersion = cms.string(''),
    robusttightEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.015, 0.0092, 0.02, 0.0025, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.018, 0.025, 0.02, 0.004, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusttightEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.01, 0.0099, 0.025, 0.004, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.01, 0.028, 0.02, 0.0066, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    reducedBarrelRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    robusttightEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    reducedEndcapRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    verticesCollection = cms.InputTag("offlinePrimaryVerticesWithBS"),
    classbasedlooseEleIDCuts = cms.PSet(
        cutdetain = cms.vdouble(0.0137, 0.00678, 0.0241, 0.0187, 0.0161, 
            0.0224, 0.0252, 0.0308, 0.0273),
        cutiso_sum = cms.vdouble(33.0, 17.0, 17.9, 18.8, 8.55, 
            12.5, 17.6, 18.5, 2.98),
        cutip_gsf = cms.vdouble(0.0551, 0.0765, 0.143, 0.0874, 0.594, 
            0.37, 0.0913, 1.15, 0.231),
        cutip_gsfl = cms.vdouble(0.0186, 0.0759, 0.138, 0.0473, 0.62, 
            0.304, 0.109, 0.775, 0.0479),
        cuthoe = cms.vdouble(0.247, 0.137, 0.147, 0.371, 0.0588, 
            0.147, 0.52, 0.452, 0.404),
        cutiso_sumoetl = cms.vdouble(11.3, 9.05, 9.07, 9.94, 5.25, 
            6.15, 10.7, 10.8, 4.4),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 4.5, 3.5, 3.5),
        cuthoel = cms.vdouble(0.236, 0.126, 0.147, 0.375, 0.0392, 
            0.145, 0.365, 0.383, 0.384),
        cutdphiin = cms.vdouble(0.0897, 0.262, 0.353, 0.116, 0.357, 
            0.319, 0.342, 0.404, 0.336),
        cutseel = cms.vdouble(0.0164, 0.0118, 0.015, 0.0523, 0.0326, 
            0.0456, 0.0185, 0.0589, 0.0544),
        cutiso_sumoet = cms.vdouble(34.5, 12.7, 12.1, 19.9, 6.35, 
            8.85, 14.0, 10.5, 9.74),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0176, 0.0125, 0.0181, 0.0415, 0.0364, 
            0.0418, 0.0146, 0.0678, 0.133),
        cuteseedopcor = cms.vdouble(0.63, 0.82, 0.401, 0.718, 0.4, 
            0.458, 0.15, 0.664, 0.373),
        cutdphiinl = cms.vdouble(0.0747, 0.25, 0.356, 0.0956, 0.347, 
            0.326, 0.333, 0.647, 0.289),
        cutdetainl = cms.vdouble(0.0124, 0.00503, 0.0257, 0.0228, 0.0118, 
            0.0178, 0.0188, 0.14, 0.024)
    ),
    robusttightEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.0275, 0.09, 0.007, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.011, 0.09, 0.005, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.1, 0.0275, 0.09, 0.007, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    classbasedlooseEleIDCutsV00 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.05, 0.025, 0.053, 0.09, 0.07, 
            0.03, 0.092, 0.092),
        hOverE = cms.vdouble(0.115, 0.1, 0.055, 0.0, 0.145, 
            0.12, 0.15, 0.0),
        sigmaEtaEta = cms.vdouble(0.014, 0.012, 0.0115, 0.0, 0.0275, 
            0.0265, 0.0265, 0.0),
        deltaEtaIn = cms.vdouble(0.009, 0.0045, 0.0085, 0.0, 0.0105, 
            0.0068, 0.01, 0.0),
        eSeedOverPin = cms.vdouble(0.11, 0.91, 0.11, 0.0, 0.0, 
            0.85, 0.0, 0.0)
    ),
    classbasedlooseEleIDCutsV01 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.053, 0.0189, 0.059, 0.099, 0.0278, 
            0.0157, 0.042, 0.08),
        hOverE = cms.vdouble(0.076, 0.033, 0.07, 0.0, 0.083, 
            0.0148, 0.033, 0.0),
        sigmaEtaEta = cms.vdouble(0.0101, 0.0095, 0.0097, 0.0, 0.0271, 
            0.0267, 0.0259, 0.0),
        deltaEtaIn = cms.vdouble(0.0078, 0.00259, 0.0062, 0.0, 0.0078, 
            0.0061, 0.0061, 0.0),
        eSeedOverPin = cms.vdouble(0.3, 0.92, 0.211, 0.0, 0.42, 
            0.88, 0.68, 0.0)
    ),
    classbasedlooseEleIDCutsV02 = cms.PSet(
        cutisohcal = cms.vdouble(13.5, 9.93, 7.56, 14.8, 8.1, 
            10.8, 42.7, 20.1, 9.11, 10.4, 
            6.89, 5.59, 8.53, 9.59, 24.2, 
            2.78, 8.67, 0.288),
        cutmishits = cms.vdouble(5.5, 1.5, 5.5, 2.5, 2.5, 
            2.5, 3.5, 5.5, 0.5, 1.5, 
            2.5, 0.5, 1.5, 1.5, 0.5, 
            0.5, 0.5, 0.5),
        cuthoe = cms.vdouble(0.0887, 0.0934, 0.0949, 0.0986, 0.0431, 
            0.0878, 0.097, 0.0509, 0.098, 0.0991, 
            0.0321, 0.0928, 0.0663, 0.0717, 0.0966, 
            0.0758, 0.0149, 0.0131),
        cutdeta = cms.vdouble(0.00958, 0.00406, 0.0122, 0.0137, 0.00837, 
            0.0127, 0.011, 0.00336, 0.00977, 0.015, 
            0.00675, 0.0109, 0.014, 0.00508, 0.0109, 
            0.0146, 0.00506, 0.0127),
        cuteopin = cms.vdouble(0.878, 0.802, 0.814, 0.942, 0.735, 
            0.774, 0.829, 0.909, 0.829, 0.813, 
            0.86, 0.897, 0.817, 0.831, 0.818, 
            0.861, 0.787, 0.789),
        cutip = cms.vdouble(0.0246, 0.076, 0.0966, 0.0885, 0.441, 
            0.205, 0.0292, 0.0293, 0.0619, 0.0251, 
            0.159, 0.0815, 7.29, 0.0106, 5.76, 
            6.89, 1.27, 5.89),
        cutisotk = cms.vdouble(24.3, 8.45, 14.4, 27.8, 6.02, 
            10.5, 14.1, 10.2, 14.5, 19.1, 
            6.1, 14.1, 8.59, 8.33, 8.3, 
            8.93, 8.6, 16.0),
        cutsee = cms.vdouble(0.0172, 0.0115, 0.0143, 0.0344, 0.0295, 
            0.0304, 0.0145, 0.0108, 0.0128, 0.0347, 
            0.0307, 0.0316, 0.018, 0.011, 0.0132, 
            0.0349, 0.031, 0.0327),
        cutdphi = cms.vdouble(0.0372, 0.114, 0.118, 0.0488, 0.117, 
            0.119, 0.0606, 0.0548, 0.117, 0.07, 
            0.0355, 0.117, 0.088, 0.045, 0.118, 
            0.0919, 0.0236, 0.0515),
        cutisoecal = cms.vdouble(33.4, 28.1, 7.32, 27.4, 7.33, 
            21.7, 93.8, 102.0, 12.1, 26.0, 
            8.91, 10.0, 16.1, 31.3, 16.9, 
            15.4, 13.3, 37.7)
    ),
    classbasedlooseEleIDCutsV03 = cms.PSet(
        cutdetain = cms.vdouble(0.00989, 0.00484, 0.0146, 0.0146, 0.00902, 
            0.0172, 0.0137, 0.0477, 0.0275, 0.00967, 
            0.00377, 0.00924, 0.013, 0.00666, 0.0123, 
            0.0125, 0.0228, 0.0112, 0.0106, 0.0038, 
            0.00897, 0.0139, 0.00667, 0.0122, 0.0122, 
            0.0193, 0.00239),
        cutiso_sum = cms.vdouble(31.5, 10.3, 8.8, 11.0, 6.13, 
            6.94, 7.52, 9.0, 3.5, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0431, 0.0767, 0.139, 0.101, 0.149, 
            0.154, 0.932, 0.15, 0.124, 0.0238, 
            0.0467, 0.0759, 0.0369, 0.147, 0.0986, 
            0.0626, 0.195, 0.116, 0.0122, 0.0125, 
            0.0693, 0.0162, 0.089, 0.0673, 0.0467, 
            0.0651, 0.0221),
        cuthoe = cms.vdouble(0.166, 0.0771, 0.144, 0.37, 0.0497, 
            0.139, 0.401, 2.68, 0.516, 0.234, 
            0.0556, 0.144, 0.368, 0.031, 0.12, 
            0.602, 2.01, 1.05, 0.104, 0.063, 
            0.0565, 0.38, 0.0192, 0.0294, 0.537, 
            4.65, 1.87),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 2.5, 2.5, 1.5, 2.5, 
            1.5, 1.5, 1.5, 1.5, 0.5, 
            2.5, 2.5, 0.5, 2.5, 1.5, 
            0.5, 1.5, 1.5, 0.5, 2.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(28.9, 15.3, 12.0, 18.3, 7.17, 
            9.42, 11.0, 9.81, 3.94, 22.7, 
            15.9, 12.3, 17.0, 7.58, 8.89, 
            15.2, 12.7, 6.17, 20.8, 21.2, 
            17.2, 15.5, 9.37, 10.6, 19.8, 
            22.1, 15.6),
        cutdcotdist = cms.vdouble(0.0393, 0.0392, 0.0397, 0.0394, 0.0393, 
            0.039, 0.0378, 0.0388, 0.0382, 0.0385, 
            0.0167, 0.00325, 0.0394, 0.0387, 0.0388, 
            0.0227, 0.0258, 0.0127, 0.0298, 0.03, 
            0.00946, 0.039, 0.0231, 0.0278, 0.00162, 
            0.0367, 0.0199),
        cutsee = cms.vdouble(0.0175, 0.0127, 0.0177, 0.0373, 0.0314, 
            0.0329, 0.0157, 0.0409, 0.14, 0.0169, 
            0.0106, 0.0142, 0.0363, 0.0322, 0.0354, 
            0.0117, 0.0372, 28.2, 0.0171, 0.0113, 
            0.014, 0.0403, 0.0323, 0.0411, 0.0104, 
            0.0436, 0.0114),
        cuteseedopcor = cms.vdouble(0.78, 0.302, 0.483, 0.904, 0.168, 
            0.645, 0.108, 0.284, 0.324, 0.591, 
            0.286, 0.488, 0.813, 0.791, 0.672, 
            0.398, 0.834, 0.878, 0.515, 0.937, 
            0.806, 0.816, 0.85, 0.507, 0.367, 
            0.83, 0.648),
        cutdphiin = cms.vdouble(0.041, 0.275, 0.365, 0.047, 0.273, 
            0.296, 0.329, 0.465, 0.627, 0.0581, 
            0.0954, 0.327, 0.0702, 0.0582, 0.279, 
            0.117, 0.318, 0.246, 0.0821, 0.052, 
            0.292, 0.116, 0.0435, 0.312, 0.118, 
            0.296, 0.0459),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 12.0, 12.0, 
            12.0, 12.0, 12.0, 12.0, 12.0, 
            12.0, 12.5)
    ),
    classbasedlooseEleIDCutsV04 = cms.PSet(
        cutdetain = cms.vdouble(0.00989, 0.00484, 0.0146, 0.0146, 0.00902, 
            0.0172, 0.0137, 0.0477, 0.0275, 0.00967, 
            0.00377, 0.00924, 0.013, 0.00666, 0.0123, 
            0.0125, 0.0228, 0.0112, 0.0106, 0.0038, 
            0.00897, 0.0139, 0.00667, 0.0122, 0.0122, 
            0.0193, 0.00239),
        cutiso_sum = cms.vdouble(31.5, 10.3, 8.8, 11.0, 6.13, 
            6.94, 7.52, 9.0, 3.5, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0431, 0.0767, 0.139, 0.101, 0.149, 
            0.154, 0.932, 0.15, 0.124, 0.0238, 
            0.0467, 0.0759, 0.0369, 0.147, 0.0986, 
            0.0626, 0.195, 0.116, 0.0122, 0.0125, 
            0.0693, 0.0162, 0.089, 0.0673, 0.0467, 
            0.0651, 0.0221),
        cuthoe = cms.vdouble(0.166, 0.0771, 0.144, 0.37, 0.0497, 
            0.139, 0.401, 2.68, 0.516, 0.234, 
            0.0556, 0.144, 0.368, 0.031, 0.12, 
            0.602, 2.01, 1.05, 0.104, 0.063, 
            0.0565, 0.38, 0.0192, 0.0294, 0.537, 
            4.65, 1.87),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 2.5, 2.5, 1.5, 2.5, 
            1.5, 1.5, 1.5, 1.5, 0.5, 
            2.5, 2.5, 0.5, 2.5, 1.5, 
            0.5, 1.5, 1.5, 0.5, 2.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(28.9, 15.3, 12.0, 18.3, 7.17, 
            9.42, 11.0, 9.81, 3.94, 22.7, 
            15.9, 12.3, 17.0, 7.58, 8.89, 
            15.2, 12.7, 6.17, 20.8, 21.2, 
            17.2, 15.5, 9.37, 10.6, 19.8, 
            22.1, 15.6),
        cutdcotdist = cms.vdouble(0.0393, 0.0392, 0.0397, 0.0394, 0.0393, 
            0.039, 0.0378, 0.0388, 0.0382, 0.0385, 
            0.0167, 0.00325, 0.0394, 0.0387, 0.0388, 
            0.0227, 0.0258, 0.0127, 0.0298, 0.03, 
            0.00946, 0.039, 0.0231, 0.0278, 0.00162, 
            0.0367, 0.0199),
        cutsee = cms.vdouble(0.0175, 0.0127, 0.0177, 0.0373, 0.0314, 
            0.0329, 0.0157, 0.0409, 0.14, 0.0169, 
            0.0106, 0.0142, 0.0363, 0.0322, 0.0354, 
            0.0117, 0.0372, 28.2, 0.0171, 0.0113, 
            0.014, 0.0403, 0.0323, 0.0411, 0.0104, 
            0.0436, 0.0114),
        cuteseedopcor = cms.vdouble(0.78, 0.302, 0.483, 0.904, 0.168, 
            0.645, 0.108, 0.284, 0.324, 0.591, 
            0.286, 0.488, 0.813, 0.791, 0.672, 
            0.398, 0.834, 0.878, 0.515, 0.937, 
            0.806, 0.816, 0.85, 0.507, 0.367, 
            0.83, 0.648),
        cutdphiin = cms.vdouble(0.041, 0.275, 0.365, 0.047, 0.273, 
            0.296, 0.329, 0.465, 0.627, 0.0581, 
            0.0954, 0.327, 0.0702, 0.0582, 0.279, 
            0.117, 0.318, 0.246, 0.0821, 0.052, 
            0.292, 0.116, 0.0435, 0.312, 0.118, 
            0.296, 0.0459),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 12.0, 12.0, 
            12.0, 12.0, 12.0, 12.0, 12.0, 
            12.0, 12.5)
    ),
    classbasedlooseEleIDCutsV06 = cms.PSet(
        cutdetain = cms.vdouble(0.0137, 0.00678, 0.0241, 0.0187, 0.0161, 
            0.0224, 0.0252, 0.0308, 0.0273),
        cutiso_sum = cms.vdouble(33.0, 17.0, 17.9, 18.8, 8.55, 
            12.5, 17.6, 18.5, 2.98),
        cutip_gsf = cms.vdouble(0.0551, 0.0765, 0.143, 0.0874, 0.594, 
            0.37, 0.0913, 1.15, 0.231),
        cutip_gsfl = cms.vdouble(0.0186, 0.0759, 0.138, 0.0473, 0.62, 
            0.304, 0.109, 0.775, 0.0479),
        cuthoe = cms.vdouble(0.247, 0.137, 0.147, 0.371, 0.0588, 
            0.147, 0.52, 0.452, 0.404),
        cutiso_sumoetl = cms.vdouble(11.3, 9.05, 9.07, 9.94, 5.25, 
            6.15, 10.7, 10.8, 4.4),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 4.5, 3.5, 3.5),
        cuthoel = cms.vdouble(0.236, 0.126, 0.147, 0.375, 0.0392, 
            0.145, 0.365, 0.383, 0.384),
        cutdphiin = cms.vdouble(0.0897, 0.262, 0.353, 0.116, 0.357, 
            0.319, 0.342, 0.404, 0.336),
        cutseel = cms.vdouble(0.0164, 0.0118, 0.015, 0.0523, 0.0326, 
            0.0456, 0.0185, 0.0589, 0.0544),
        cutiso_sumoet = cms.vdouble(34.5, 12.7, 12.1, 19.9, 6.35, 
            8.85, 14.0, 10.5, 9.74),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0176, 0.0125, 0.0181, 0.0415, 0.0364, 
            0.0418, 0.0146, 0.0678, 0.133),
        cuteseedopcor = cms.vdouble(0.63, 0.82, 0.401, 0.718, 0.4, 
            0.458, 0.15, 0.664, 0.373),
        cutdphiinl = cms.vdouble(0.0747, 0.25, 0.356, 0.0956, 0.347, 
            0.326, 0.333, 0.647, 0.289),
        cutdetainl = cms.vdouble(0.0124, 0.00503, 0.0257, 0.0228, 0.0118, 
            0.0178, 0.0188, 0.14, 0.024)
    ),
    src = cms.InputTag("gsfElectrons"),
    robusttightEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    classbasedtightEleIDCuts = cms.PSet(
        cutdetain = cms.vdouble(0.0116, 0.00449, 0.00938, 0.0184, 0.00678, 
            0.0109, 0.0252, 0.0268, 0.0139),
        cutiso_sum = cms.vdouble(15.5, 12.2, 12.2, 11.7, 7.16, 
            9.71, 8.66, 11.9, 2.98),
        cutip_gsf = cms.vdouble(0.0131, 0.0586, 0.0839, 0.0366, 0.452, 
            0.204, 0.0913, 0.0802, 0.0731),
        cutip_gsfl = cms.vdouble(0.0119, 0.0527, 0.0471, 0.0212, 0.233, 
            0.267, 0.109, 0.122, 0.0479),
        cuthoe = cms.vdouble(0.215, 0.0608, 0.147, 0.369, 0.0349, 
            0.102, 0.52, 0.422, 0.404),
        cutiso_sumoetl = cms.vdouble(6.21, 6.81, 5.3, 5.39, 2.73, 
            4.73, 4.84, 3.46, 3.73),
        cutfmishits = cms.vdouble(1.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 1.5, 2.5, 0.5),
        cuthoel = cms.vdouble(0.228, 0.0836, 0.143, 0.37, 0.0392, 
            0.0979, 0.3, 0.381, 0.339),
        cutdphiin = cms.vdouble(0.0897, 0.0993, 0.295, 0.0979, 0.151, 
            0.252, 0.341, 0.308, 0.328),
        cutseel = cms.vdouble(0.0132, 0.0117, 0.0112, 0.0387, 0.0281, 
            0.0287, 0.00987, 0.0296, 0.0544),
        cutiso_sumoet = cms.vdouble(11.9, 7.81, 6.28, 8.92, 4.65, 
            5.49, 9.36, 8.84, 5.94),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0145, 0.0116, 0.012, 0.039, 0.0297, 
            0.0311, 0.00987, 0.0347, 0.0917),
        cuteseedopcor = cms.vdouble(0.637, 0.943, 0.742, 0.748, 0.763, 
            0.631, 0.214, 0.873, 0.473),
        cutdphiinl = cms.vdouble(0.061, 0.14, 0.286, 0.0921, 0.197, 
            0.24, 0.333, 0.303, 0.258),
        cutdetainl = cms.vdouble(0.00816, 0.00401, 0.0081, 0.019, 0.00588, 
            0.00893, 0.0171, 0.0434, 0.0143)
    ),
    algorithm = cms.string('eIDCB'),
    robusthighenergyEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.115, 0.014, 0.09, 0.009, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.15, 0.0275, 0.092, 0.0105, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.075, 0.0132, 0.058, 0.0077, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.083, 0.027, 0.042, 0.01, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    additionalCategories = cms.bool(True),
    etBinning = cms.bool(True)
)


process.eidRobustTight = cms.EDProducer("EleIdCutBasedExtProducer",
    electronQuality = cms.string('tight'),
    classbasedtightEleIDCutsV02 = cms.PSet(
        cutisohcal = cms.vdouble(10.9, 7.01, 8.75, 3.51, 7.75, 
            1.62, 11.6, 9.9, 4.97, 5.33, 
            3.18, 2.32, 0.164, 5.46, 12.0, 
            0.00604, 4.1, 0.000628),
        cutmishits = cms.vdouble(5.5, 1.5, 0.5, 1.5, 2.5, 
            0.5, 3.5, 5.5, 0.5, 0.5, 
            0.5, 0.5, 0.5, 1.5, 0.5, 
            0.5, 0.5, 0.5),
        cuthoe = cms.vdouble(0.0871, 0.0289, 0.0783, 0.0946, 0.0245, 
            0.0363, 0.0671, 0.048, 0.0614, 0.0924, 
            0.0158, 0.049, 0.0382, 0.0915, 0.0451, 
            0.0452, 0.00196, 0.0043),
        cutdeta = cms.vdouble(0.00915, 0.00302, 0.0061, 0.0135, 0.00565, 
            0.00793, 0.0102, 0.00266, 0.0106, 0.00903, 
            0.00766, 0.00723, 0.0116, 0.00203, 0.00659, 
            0.0148, 0.00555, 0.0128),
        cuteopin = cms.vdouble(0.878, 0.859, 0.874, 0.944, 0.737, 
            0.773, 0.86, 0.967, 0.917, 0.812, 
            0.915, 1.01, 0.847, 0.953, 0.979, 
            0.841, 0.771, 1.09),
        cutip = cms.vdouble(0.0239, 0.027, 0.0768, 0.0231, 0.178, 
            0.0957, 0.0102, 0.0168, 0.043, 0.0166, 
            0.0594, 0.0308, 2.1, 0.00527, 3.17, 
            4.91, 0.769, 5.9),
        cutisotk = cms.vdouble(6.53, 4.6, 6.0, 8.63, 3.11, 
            7.77, 5.42, 4.81, 4.06, 6.47, 
            2.8, 3.45, 5.29, 5.18, 15.4, 
            5.38, 4.47, 0.0347),
        cutsee = cms.vdouble(0.0131, 0.0106, 0.0115, 0.0306, 0.028, 
            0.0293, 0.0131, 0.0106, 0.0115, 0.0317, 
            0.029, 0.0289, 0.0142, 0.0106, 0.0103, 
            0.035, 0.0296, 0.0333),
        cutdphi = cms.vdouble(0.0369, 0.0307, 0.117, 0.0475, 0.0216, 
            0.117, 0.0372, 0.0246, 0.0426, 0.0612, 
            0.0142, 0.039, 0.0737, 0.0566, 0.0359, 
            0.0187, 0.012, 0.0358),
        cutisoecal = cms.vdouble(20.0, 27.2, 4.48, 13.5, 4.56, 
            3.19, 12.2, 13.1, 7.42, 7.67, 
            4.12, 4.85, 10.1, 12.4, 11.1, 
            11.0, 10.6, 13.4)
    ),
    classbasedtightEleIDCutsV03 = cms.PSet(
        cutdetain = cms.vdouble(0.00811, 0.00341, 0.00633, 0.0103, 0.00667, 
            0.01, 0.0106, 0.0145, 0.0163, 0.0076, 
            0.00259, 0.00511, 0.00941, 0.0043, 0.00857, 
            0.012, 0.0169, 0.00172, 0.00861, 0.00362, 
            0.00601, 0.00925, 0.00489, 0.00832, 0.0119, 
            0.0169, 0.000996),
        cutiso_sum = cms.vdouble(11.8, 8.31, 6.26, 6.18, 3.28, 
            4.38, 4.17, 5.4, 1.57, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0213, 0.0422, 0.0632, 0.0361, 0.073, 
            0.126, 0.171, 0.119, 0.0372, 0.0131, 
            0.0146, 0.0564, 0.0152, 0.0222, 0.0268, 
            0.0314, 0.0884, 0.00374, 0.00852, 0.00761, 
            0.0143, 0.0106, 0.0127, 0.0119, 0.0123, 
            0.0235, 0.00363),
        cuthoe = cms.vdouble(0.0783, 0.0387, 0.105, 0.118, 0.0227, 
            0.062, 0.13, 2.47, 0.38, 0.0888, 
            0.0503, 0.0955, 0.0741, 0.015, 0.03, 
            0.589, 1.13, 0.612, 0.0494, 0.0461, 
            0.0292, 0.0369, 0.0113, 0.0145, 0.124, 
            2.05, 0.61),
        cutfmishits = cms.vdouble(2.5, 1.5, 1.5, 1.5, 1.5, 
            0.5, 2.5, 0.5, 0.5, 2.5, 
            1.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5, -0.5, 2.5, 1.5, 
            0.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(13.7, 11.6, 7.14, 9.98, 3.52, 
            4.87, 6.24, 7.96, 2.53, 11.2, 
            11.9, 7.88, 8.16, 5.58, 5.03, 
            11.4, 8.15, 5.79, 10.4, 11.1, 
            10.4, 7.47, 5.08, 5.9, 11.8, 
            14.1, 11.7),
        cutdcotdist = cms.vdouble(0.0393, 0.0256, 0.00691, 0.0394, 0.0386, 
            0.039, 0.0325, 0.0384, 0.0382, 0.0245, 
            0.000281, 5.46e-05, 0.0342, 0.0232, 0.00107, 
            0.0178, 0.0193, 0.000758, 0.000108, 0.0248, 
            0.000458, 0.0129, 0.00119, 0.0182, 4.53e-05, 
            0.0189, 0.000928),
        cutsee = cms.vdouble(0.0143, 0.0105, 0.0123, 0.0324, 0.0307, 
            0.0301, 0.0109, 0.027, 0.0292, 0.0133, 
            0.0104, 0.0116, 0.0332, 0.0296, 0.031, 
            0.00981, 0.0307, 0.072, 0.0149, 0.0105, 
            0.011, 0.0342, 0.0307, 0.0303, 0.00954, 
            0.0265, 0.0101),
        cuteseedopcor = cms.vdouble(0.784, 0.366, 0.57, 0.911, 0.298, 
            0.645, 0.51, 0.497, 0.932, 0.835, 
            0.968, 0.969, 0.923, 0.898, 0.98, 
            0.63, 0.971, 1.0, 0.515, 0.963, 
            0.986, 0.823, 0.879, 1.01, 0.931, 
            0.937, 1.05),
        cutdphiin = cms.vdouble(0.0404, 0.0499, 0.263, 0.042, 0.0484, 
            0.241, 0.242, 0.231, 0.286, 0.0552, 
            0.0338, 0.154, 0.0623, 0.0183, 0.0392, 
            0.0547, 0.0588, 0.00654, 0.042, 0.0217, 
            0.0885, 0.0445, 0.0141, 0.0234, 0.065, 
            0.0258, 0.0346),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 13.7, 13.2, 
            13.6, 14.2, 14.1, 13.9, 12.9, 
            14.9, 17.7)
    ),
    classbasedtightEleIDCutsV00 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.032, 0.016, 0.0525, 0.09, 0.025, 
            0.035, 0.065, 0.092),
        hOverE = cms.vdouble(0.05, 0.042, 0.045, 0.0, 0.055, 
            0.037, 0.05, 0.0),
        sigmaEtaEta = cms.vdouble(0.0125, 0.011, 0.01, 0.0, 0.0265, 
            0.0252, 0.026, 0.0),
        deltaEtaIn = cms.vdouble(0.0055, 0.003, 0.0065, 0.0, 0.006, 
            0.0055, 0.0075, 0.0),
        eSeedOverPin = cms.vdouble(0.24, 0.94, 0.11, 0.0, 0.32, 
            0.83, 0.0, 0.0)
    ),
    classbasedtightEleIDCutsV01 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.0225, 0.0114, 0.0234, 0.039, 0.0215, 
            0.0095, 0.0148, 0.0167),
        hOverE = cms.vdouble(0.056, 0.0221, 0.037, 0.0, 0.0268, 
            0.0102, 0.0104, 0.0),
        sigmaEtaEta = cms.vdouble(0.0095, 0.0094, 0.0094, 0.0, 0.026, 
            0.0257, 0.0246, 0.0),
        deltaEtaIn = cms.vdouble(0.0043, 0.00282, 0.0036, 0.0, 0.0066, 
            0.0049, 0.0041, 0.0),
        eSeedOverPin = cms.vdouble(0.32, 0.94, 0.221, 0.0, 0.74, 
            0.89, 0.66, 0.0)
    ),
    classbasedtightEleIDCutsV06 = cms.PSet(
        cutdetain = cms.vdouble(0.0116, 0.00449, 0.00938, 0.0184, 0.00678, 
            0.0109, 0.0252, 0.0268, 0.0139),
        cutiso_sum = cms.vdouble(15.5, 12.2, 12.2, 11.7, 7.16, 
            9.71, 8.66, 11.9, 2.98),
        cutip_gsf = cms.vdouble(0.0131, 0.0586, 0.0839, 0.0366, 0.452, 
            0.204, 0.0913, 0.0802, 0.0731),
        cutip_gsfl = cms.vdouble(0.0119, 0.0527, 0.0471, 0.0212, 0.233, 
            0.267, 0.109, 0.122, 0.0479),
        cuthoe = cms.vdouble(0.215, 0.0608, 0.147, 0.369, 0.0349, 
            0.102, 0.52, 0.422, 0.404),
        cutiso_sumoetl = cms.vdouble(6.21, 6.81, 5.3, 5.39, 2.73, 
            4.73, 4.84, 3.46, 3.73),
        cutfmishits = cms.vdouble(1.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 1.5, 2.5, 0.5),
        cuthoel = cms.vdouble(0.228, 0.0836, 0.143, 0.37, 0.0392, 
            0.0979, 0.3, 0.381, 0.339),
        cutdphiin = cms.vdouble(0.0897, 0.0993, 0.295, 0.0979, 0.151, 
            0.252, 0.341, 0.308, 0.328),
        cutseel = cms.vdouble(0.0132, 0.0117, 0.0112, 0.0387, 0.0281, 
            0.0287, 0.00987, 0.0296, 0.0544),
        cutiso_sumoet = cms.vdouble(11.9, 7.81, 6.28, 8.92, 4.65, 
            5.49, 9.36, 8.84, 5.94),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0145, 0.0116, 0.012, 0.039, 0.0297, 
            0.0311, 0.00987, 0.0347, 0.0917),
        cuteseedopcor = cms.vdouble(0.637, 0.943, 0.742, 0.748, 0.763, 
            0.631, 0.214, 0.873, 0.473),
        cutdphiinl = cms.vdouble(0.061, 0.14, 0.286, 0.0921, 0.197, 
            0.24, 0.333, 0.303, 0.258),
        cutdetainl = cms.vdouble(0.00816, 0.00401, 0.0081, 0.019, 0.00588, 
            0.00893, 0.0171, 0.0434, 0.0143)
    ),
    classbasedtightEleIDCutsV04 = cms.PSet(
        cutdetain = cms.vdouble(0.00811, 0.00341, 0.00633, 0.0103, 0.00667, 
            0.01, 0.0106, 0.0145, 0.0163, 0.0076, 
            0.00259, 0.00511, 0.00941, 0.0043, 0.00857, 
            0.012, 0.0169, 0.00172, 0.00861, 0.00362, 
            0.00601, 0.00925, 0.00489, 0.00832, 0.0119, 
            0.0169, 0.000996),
        cutiso_sum = cms.vdouble(11.8, 8.31, 6.26, 6.18, 3.28, 
            4.38, 4.17, 5.4, 1.57, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0213, 0.0422, 0.0632, 0.0361, 0.073, 
            0.126, 0.171, 0.119, 0.0372, 0.0131, 
            0.0146, 0.0564, 0.0152, 0.0222, 0.0268, 
            0.0314, 0.0884, 0.00374, 0.00852, 0.00761, 
            0.0143, 0.0106, 0.0127, 0.0119, 0.0123, 
            0.0235, 0.00363),
        cuthoe = cms.vdouble(0.0783, 0.0387, 0.105, 0.118, 0.0227, 
            0.062, 0.13, 2.47, 0.38, 0.0888, 
            0.0503, 0.0955, 0.0741, 0.015, 0.03, 
            0.589, 1.13, 0.612, 0.0494, 0.0461, 
            0.0292, 0.0369, 0.0113, 0.0145, 0.124, 
            2.05, 0.61),
        cutfmishits = cms.vdouble(2.5, 1.5, 1.5, 1.5, 1.5, 
            0.5, 2.5, 0.5, 0.5, 2.5, 
            1.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5, -0.5, 2.5, 1.5, 
            0.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(13.7, 11.6, 7.14, 9.98, 3.52, 
            4.87, 6.24, 7.96, 2.53, 11.2, 
            11.9, 7.88, 8.16, 5.58, 5.03, 
            11.4, 8.15, 5.79, 10.4, 11.1, 
            10.4, 7.47, 5.08, 5.9, 11.8, 
            14.1, 11.7),
        cutdcotdist = cms.vdouble(0.0393, 0.0256, 0.00691, 0.0394, 0.0386, 
            0.039, 0.0325, 0.0384, 0.0382, 0.0245, 
            0.000281, 5.46e-05, 0.0342, 0.0232, 0.00107, 
            0.0178, 0.0193, 0.000758, 0.000108, 0.0248, 
            0.000458, 0.0129, 0.00119, 0.0182, 4.53e-05, 
            0.0189, 0.000928),
        cutsee = cms.vdouble(0.0143, 0.0105, 0.0123, 0.0324, 0.0307, 
            0.0301, 0.0109, 0.027, 0.0292, 0.0133, 
            0.0104, 0.0116, 0.0332, 0.0296, 0.031, 
            0.00981, 0.0307, 0.072, 0.0149, 0.0105, 
            0.011, 0.0342, 0.0307, 0.0303, 0.00954, 
            0.0265, 0.0101),
        cuteseedopcor = cms.vdouble(0.784, 0.366, 0.57, 0.911, 0.298, 
            0.645, 0.51, 0.497, 0.932, 0.835, 
            0.968, 0.969, 0.923, 0.898, 0.98, 
            0.63, 0.971, 1.0, 0.515, 0.963, 
            0.986, 0.823, 0.879, 1.01, 0.931, 
            0.937, 1.05),
        cutdphiin = cms.vdouble(0.0404, 0.0499, 0.263, 0.042, 0.0484, 
            0.241, 0.242, 0.231, 0.286, 0.0552, 
            0.0338, 0.154, 0.0623, 0.0183, 0.0392, 
            0.0547, 0.0588, 0.00654, 0.042, 0.0217, 
            0.0885, 0.0445, 0.0141, 0.0234, 0.065, 
            0.0258, 0.0346),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 13.7, 13.2, 
            13.6, 14.2, 14.1, 13.9, 12.9, 
            14.9, 17.7)
    ),
    electronIDType = cms.string('robust'),
    robusttightEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    electronVersion = cms.string(''),
    robusttightEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.015, 0.0092, 0.02, 0.0025, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.018, 0.025, 0.02, 0.004, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusttightEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.01, 0.0099, 0.025, 0.004, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.01, 0.028, 0.02, 0.0066, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    reducedBarrelRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    robusttightEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    reducedEndcapRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    verticesCollection = cms.InputTag("offlinePrimaryVerticesWithBS"),
    classbasedlooseEleIDCuts = cms.PSet(
        cutdetain = cms.vdouble(0.0137, 0.00678, 0.0241, 0.0187, 0.0161, 
            0.0224, 0.0252, 0.0308, 0.0273),
        cutiso_sum = cms.vdouble(33.0, 17.0, 17.9, 18.8, 8.55, 
            12.5, 17.6, 18.5, 2.98),
        cutip_gsf = cms.vdouble(0.0551, 0.0765, 0.143, 0.0874, 0.594, 
            0.37, 0.0913, 1.15, 0.231),
        cutip_gsfl = cms.vdouble(0.0186, 0.0759, 0.138, 0.0473, 0.62, 
            0.304, 0.109, 0.775, 0.0479),
        cuthoe = cms.vdouble(0.247, 0.137, 0.147, 0.371, 0.0588, 
            0.147, 0.52, 0.452, 0.404),
        cutiso_sumoetl = cms.vdouble(11.3, 9.05, 9.07, 9.94, 5.25, 
            6.15, 10.7, 10.8, 4.4),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 4.5, 3.5, 3.5),
        cuthoel = cms.vdouble(0.236, 0.126, 0.147, 0.375, 0.0392, 
            0.145, 0.365, 0.383, 0.384),
        cutdphiin = cms.vdouble(0.0897, 0.262, 0.353, 0.116, 0.357, 
            0.319, 0.342, 0.404, 0.336),
        cutseel = cms.vdouble(0.0164, 0.0118, 0.015, 0.0523, 0.0326, 
            0.0456, 0.0185, 0.0589, 0.0544),
        cutiso_sumoet = cms.vdouble(34.5, 12.7, 12.1, 19.9, 6.35, 
            8.85, 14.0, 10.5, 9.74),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0176, 0.0125, 0.0181, 0.0415, 0.0364, 
            0.0418, 0.0146, 0.0678, 0.133),
        cuteseedopcor = cms.vdouble(0.63, 0.82, 0.401, 0.718, 0.4, 
            0.458, 0.15, 0.664, 0.373),
        cutdphiinl = cms.vdouble(0.0747, 0.25, 0.356, 0.0956, 0.347, 
            0.326, 0.333, 0.647, 0.289),
        cutdetainl = cms.vdouble(0.0124, 0.00503, 0.0257, 0.0228, 0.0118, 
            0.0178, 0.0188, 0.14, 0.024)
    ),
    robusttightEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.0275, 0.09, 0.007, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.011, 0.09, 0.005, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.1, 0.0275, 0.09, 0.007, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    classbasedlooseEleIDCutsV00 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.05, 0.025, 0.053, 0.09, 0.07, 
            0.03, 0.092, 0.092),
        hOverE = cms.vdouble(0.115, 0.1, 0.055, 0.0, 0.145, 
            0.12, 0.15, 0.0),
        sigmaEtaEta = cms.vdouble(0.014, 0.012, 0.0115, 0.0, 0.0275, 
            0.0265, 0.0265, 0.0),
        deltaEtaIn = cms.vdouble(0.009, 0.0045, 0.0085, 0.0, 0.0105, 
            0.0068, 0.01, 0.0),
        eSeedOverPin = cms.vdouble(0.11, 0.91, 0.11, 0.0, 0.0, 
            0.85, 0.0, 0.0)
    ),
    classbasedlooseEleIDCutsV01 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.053, 0.0189, 0.059, 0.099, 0.0278, 
            0.0157, 0.042, 0.08),
        hOverE = cms.vdouble(0.076, 0.033, 0.07, 0.0, 0.083, 
            0.0148, 0.033, 0.0),
        sigmaEtaEta = cms.vdouble(0.0101, 0.0095, 0.0097, 0.0, 0.0271, 
            0.0267, 0.0259, 0.0),
        deltaEtaIn = cms.vdouble(0.0078, 0.00259, 0.0062, 0.0, 0.0078, 
            0.0061, 0.0061, 0.0),
        eSeedOverPin = cms.vdouble(0.3, 0.92, 0.211, 0.0, 0.42, 
            0.88, 0.68, 0.0)
    ),
    classbasedlooseEleIDCutsV02 = cms.PSet(
        cutisohcal = cms.vdouble(13.5, 9.93, 7.56, 14.8, 8.1, 
            10.8, 42.7, 20.1, 9.11, 10.4, 
            6.89, 5.59, 8.53, 9.59, 24.2, 
            2.78, 8.67, 0.288),
        cutmishits = cms.vdouble(5.5, 1.5, 5.5, 2.5, 2.5, 
            2.5, 3.5, 5.5, 0.5, 1.5, 
            2.5, 0.5, 1.5, 1.5, 0.5, 
            0.5, 0.5, 0.5),
        cuthoe = cms.vdouble(0.0887, 0.0934, 0.0949, 0.0986, 0.0431, 
            0.0878, 0.097, 0.0509, 0.098, 0.0991, 
            0.0321, 0.0928, 0.0663, 0.0717, 0.0966, 
            0.0758, 0.0149, 0.0131),
        cutdeta = cms.vdouble(0.00958, 0.00406, 0.0122, 0.0137, 0.00837, 
            0.0127, 0.011, 0.00336, 0.00977, 0.015, 
            0.00675, 0.0109, 0.014, 0.00508, 0.0109, 
            0.0146, 0.00506, 0.0127),
        cuteopin = cms.vdouble(0.878, 0.802, 0.814, 0.942, 0.735, 
            0.774, 0.829, 0.909, 0.829, 0.813, 
            0.86, 0.897, 0.817, 0.831, 0.818, 
            0.861, 0.787, 0.789),
        cutip = cms.vdouble(0.0246, 0.076, 0.0966, 0.0885, 0.441, 
            0.205, 0.0292, 0.0293, 0.0619, 0.0251, 
            0.159, 0.0815, 7.29, 0.0106, 5.76, 
            6.89, 1.27, 5.89),
        cutisotk = cms.vdouble(24.3, 8.45, 14.4, 27.8, 6.02, 
            10.5, 14.1, 10.2, 14.5, 19.1, 
            6.1, 14.1, 8.59, 8.33, 8.3, 
            8.93, 8.6, 16.0),
        cutsee = cms.vdouble(0.0172, 0.0115, 0.0143, 0.0344, 0.0295, 
            0.0304, 0.0145, 0.0108, 0.0128, 0.0347, 
            0.0307, 0.0316, 0.018, 0.011, 0.0132, 
            0.0349, 0.031, 0.0327),
        cutdphi = cms.vdouble(0.0372, 0.114, 0.118, 0.0488, 0.117, 
            0.119, 0.0606, 0.0548, 0.117, 0.07, 
            0.0355, 0.117, 0.088, 0.045, 0.118, 
            0.0919, 0.0236, 0.0515),
        cutisoecal = cms.vdouble(33.4, 28.1, 7.32, 27.4, 7.33, 
            21.7, 93.8, 102.0, 12.1, 26.0, 
            8.91, 10.0, 16.1, 31.3, 16.9, 
            15.4, 13.3, 37.7)
    ),
    classbasedlooseEleIDCutsV03 = cms.PSet(
        cutdetain = cms.vdouble(0.00989, 0.00484, 0.0146, 0.0146, 0.00902, 
            0.0172, 0.0137, 0.0477, 0.0275, 0.00967, 
            0.00377, 0.00924, 0.013, 0.00666, 0.0123, 
            0.0125, 0.0228, 0.0112, 0.0106, 0.0038, 
            0.00897, 0.0139, 0.00667, 0.0122, 0.0122, 
            0.0193, 0.00239),
        cutiso_sum = cms.vdouble(31.5, 10.3, 8.8, 11.0, 6.13, 
            6.94, 7.52, 9.0, 3.5, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0431, 0.0767, 0.139, 0.101, 0.149, 
            0.154, 0.932, 0.15, 0.124, 0.0238, 
            0.0467, 0.0759, 0.0369, 0.147, 0.0986, 
            0.0626, 0.195, 0.116, 0.0122, 0.0125, 
            0.0693, 0.0162, 0.089, 0.0673, 0.0467, 
            0.0651, 0.0221),
        cuthoe = cms.vdouble(0.166, 0.0771, 0.144, 0.37, 0.0497, 
            0.139, 0.401, 2.68, 0.516, 0.234, 
            0.0556, 0.144, 0.368, 0.031, 0.12, 
            0.602, 2.01, 1.05, 0.104, 0.063, 
            0.0565, 0.38, 0.0192, 0.0294, 0.537, 
            4.65, 1.87),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 2.5, 2.5, 1.5, 2.5, 
            1.5, 1.5, 1.5, 1.5, 0.5, 
            2.5, 2.5, 0.5, 2.5, 1.5, 
            0.5, 1.5, 1.5, 0.5, 2.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(28.9, 15.3, 12.0, 18.3, 7.17, 
            9.42, 11.0, 9.81, 3.94, 22.7, 
            15.9, 12.3, 17.0, 7.58, 8.89, 
            15.2, 12.7, 6.17, 20.8, 21.2, 
            17.2, 15.5, 9.37, 10.6, 19.8, 
            22.1, 15.6),
        cutdcotdist = cms.vdouble(0.0393, 0.0392, 0.0397, 0.0394, 0.0393, 
            0.039, 0.0378, 0.0388, 0.0382, 0.0385, 
            0.0167, 0.00325, 0.0394, 0.0387, 0.0388, 
            0.0227, 0.0258, 0.0127, 0.0298, 0.03, 
            0.00946, 0.039, 0.0231, 0.0278, 0.00162, 
            0.0367, 0.0199),
        cutsee = cms.vdouble(0.0175, 0.0127, 0.0177, 0.0373, 0.0314, 
            0.0329, 0.0157, 0.0409, 0.14, 0.0169, 
            0.0106, 0.0142, 0.0363, 0.0322, 0.0354, 
            0.0117, 0.0372, 28.2, 0.0171, 0.0113, 
            0.014, 0.0403, 0.0323, 0.0411, 0.0104, 
            0.0436, 0.0114),
        cuteseedopcor = cms.vdouble(0.78, 0.302, 0.483, 0.904, 0.168, 
            0.645, 0.108, 0.284, 0.324, 0.591, 
            0.286, 0.488, 0.813, 0.791, 0.672, 
            0.398, 0.834, 0.878, 0.515, 0.937, 
            0.806, 0.816, 0.85, 0.507, 0.367, 
            0.83, 0.648),
        cutdphiin = cms.vdouble(0.041, 0.275, 0.365, 0.047, 0.273, 
            0.296, 0.329, 0.465, 0.627, 0.0581, 
            0.0954, 0.327, 0.0702, 0.0582, 0.279, 
            0.117, 0.318, 0.246, 0.0821, 0.052, 
            0.292, 0.116, 0.0435, 0.312, 0.118, 
            0.296, 0.0459),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 12.0, 12.0, 
            12.0, 12.0, 12.0, 12.0, 12.0, 
            12.0, 12.5)
    ),
    classbasedlooseEleIDCutsV04 = cms.PSet(
        cutdetain = cms.vdouble(0.00989, 0.00484, 0.0146, 0.0146, 0.00902, 
            0.0172, 0.0137, 0.0477, 0.0275, 0.00967, 
            0.00377, 0.00924, 0.013, 0.00666, 0.0123, 
            0.0125, 0.0228, 0.0112, 0.0106, 0.0038, 
            0.00897, 0.0139, 0.00667, 0.0122, 0.0122, 
            0.0193, 0.00239),
        cutiso_sum = cms.vdouble(31.5, 10.3, 8.8, 11.0, 6.13, 
            6.94, 7.52, 9.0, 3.5, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0431, 0.0767, 0.139, 0.101, 0.149, 
            0.154, 0.932, 0.15, 0.124, 0.0238, 
            0.0467, 0.0759, 0.0369, 0.147, 0.0986, 
            0.0626, 0.195, 0.116, 0.0122, 0.0125, 
            0.0693, 0.0162, 0.089, 0.0673, 0.0467, 
            0.0651, 0.0221),
        cuthoe = cms.vdouble(0.166, 0.0771, 0.144, 0.37, 0.0497, 
            0.139, 0.401, 2.68, 0.516, 0.234, 
            0.0556, 0.144, 0.368, 0.031, 0.12, 
            0.602, 2.01, 1.05, 0.104, 0.063, 
            0.0565, 0.38, 0.0192, 0.0294, 0.537, 
            4.65, 1.87),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 2.5, 2.5, 1.5, 2.5, 
            1.5, 1.5, 1.5, 1.5, 0.5, 
            2.5, 2.5, 0.5, 2.5, 1.5, 
            0.5, 1.5, 1.5, 0.5, 2.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(28.9, 15.3, 12.0, 18.3, 7.17, 
            9.42, 11.0, 9.81, 3.94, 22.7, 
            15.9, 12.3, 17.0, 7.58, 8.89, 
            15.2, 12.7, 6.17, 20.8, 21.2, 
            17.2, 15.5, 9.37, 10.6, 19.8, 
            22.1, 15.6),
        cutdcotdist = cms.vdouble(0.0393, 0.0392, 0.0397, 0.0394, 0.0393, 
            0.039, 0.0378, 0.0388, 0.0382, 0.0385, 
            0.0167, 0.00325, 0.0394, 0.0387, 0.0388, 
            0.0227, 0.0258, 0.0127, 0.0298, 0.03, 
            0.00946, 0.039, 0.0231, 0.0278, 0.00162, 
            0.0367, 0.0199),
        cutsee = cms.vdouble(0.0175, 0.0127, 0.0177, 0.0373, 0.0314, 
            0.0329, 0.0157, 0.0409, 0.14, 0.0169, 
            0.0106, 0.0142, 0.0363, 0.0322, 0.0354, 
            0.0117, 0.0372, 28.2, 0.0171, 0.0113, 
            0.014, 0.0403, 0.0323, 0.0411, 0.0104, 
            0.0436, 0.0114),
        cuteseedopcor = cms.vdouble(0.78, 0.302, 0.483, 0.904, 0.168, 
            0.645, 0.108, 0.284, 0.324, 0.591, 
            0.286, 0.488, 0.813, 0.791, 0.672, 
            0.398, 0.834, 0.878, 0.515, 0.937, 
            0.806, 0.816, 0.85, 0.507, 0.367, 
            0.83, 0.648),
        cutdphiin = cms.vdouble(0.041, 0.275, 0.365, 0.047, 0.273, 
            0.296, 0.329, 0.465, 0.627, 0.0581, 
            0.0954, 0.327, 0.0702, 0.0582, 0.279, 
            0.117, 0.318, 0.246, 0.0821, 0.052, 
            0.292, 0.116, 0.0435, 0.312, 0.118, 
            0.296, 0.0459),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 12.0, 12.0, 
            12.0, 12.0, 12.0, 12.0, 12.0, 
            12.0, 12.5)
    ),
    classbasedlooseEleIDCutsV06 = cms.PSet(
        cutdetain = cms.vdouble(0.0137, 0.00678, 0.0241, 0.0187, 0.0161, 
            0.0224, 0.0252, 0.0308, 0.0273),
        cutiso_sum = cms.vdouble(33.0, 17.0, 17.9, 18.8, 8.55, 
            12.5, 17.6, 18.5, 2.98),
        cutip_gsf = cms.vdouble(0.0551, 0.0765, 0.143, 0.0874, 0.594, 
            0.37, 0.0913, 1.15, 0.231),
        cutip_gsfl = cms.vdouble(0.0186, 0.0759, 0.138, 0.0473, 0.62, 
            0.304, 0.109, 0.775, 0.0479),
        cuthoe = cms.vdouble(0.247, 0.137, 0.147, 0.371, 0.0588, 
            0.147, 0.52, 0.452, 0.404),
        cutiso_sumoetl = cms.vdouble(11.3, 9.05, 9.07, 9.94, 5.25, 
            6.15, 10.7, 10.8, 4.4),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 4.5, 3.5, 3.5),
        cuthoel = cms.vdouble(0.236, 0.126, 0.147, 0.375, 0.0392, 
            0.145, 0.365, 0.383, 0.384),
        cutdphiin = cms.vdouble(0.0897, 0.262, 0.353, 0.116, 0.357, 
            0.319, 0.342, 0.404, 0.336),
        cutseel = cms.vdouble(0.0164, 0.0118, 0.015, 0.0523, 0.0326, 
            0.0456, 0.0185, 0.0589, 0.0544),
        cutiso_sumoet = cms.vdouble(34.5, 12.7, 12.1, 19.9, 6.35, 
            8.85, 14.0, 10.5, 9.74),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0176, 0.0125, 0.0181, 0.0415, 0.0364, 
            0.0418, 0.0146, 0.0678, 0.133),
        cuteseedopcor = cms.vdouble(0.63, 0.82, 0.401, 0.718, 0.4, 
            0.458, 0.15, 0.664, 0.373),
        cutdphiinl = cms.vdouble(0.0747, 0.25, 0.356, 0.0956, 0.347, 
            0.326, 0.333, 0.647, 0.289),
        cutdetainl = cms.vdouble(0.0124, 0.00503, 0.0257, 0.0228, 0.0118, 
            0.0178, 0.0188, 0.14, 0.024)
    ),
    src = cms.InputTag("gsfElectrons"),
    robusttightEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    classbasedtightEleIDCuts = cms.PSet(
        cutdetain = cms.vdouble(0.0116, 0.00449, 0.00938, 0.0184, 0.00678, 
            0.0109, 0.0252, 0.0268, 0.0139),
        cutiso_sum = cms.vdouble(15.5, 12.2, 12.2, 11.7, 7.16, 
            9.71, 8.66, 11.9, 2.98),
        cutip_gsf = cms.vdouble(0.0131, 0.0586, 0.0839, 0.0366, 0.452, 
            0.204, 0.0913, 0.0802, 0.0731),
        cutip_gsfl = cms.vdouble(0.0119, 0.0527, 0.0471, 0.0212, 0.233, 
            0.267, 0.109, 0.122, 0.0479),
        cuthoe = cms.vdouble(0.215, 0.0608, 0.147, 0.369, 0.0349, 
            0.102, 0.52, 0.422, 0.404),
        cutiso_sumoetl = cms.vdouble(6.21, 6.81, 5.3, 5.39, 2.73, 
            4.73, 4.84, 3.46, 3.73),
        cutfmishits = cms.vdouble(1.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 1.5, 2.5, 0.5),
        cuthoel = cms.vdouble(0.228, 0.0836, 0.143, 0.37, 0.0392, 
            0.0979, 0.3, 0.381, 0.339),
        cutdphiin = cms.vdouble(0.0897, 0.0993, 0.295, 0.0979, 0.151, 
            0.252, 0.341, 0.308, 0.328),
        cutseel = cms.vdouble(0.0132, 0.0117, 0.0112, 0.0387, 0.0281, 
            0.0287, 0.00987, 0.0296, 0.0544),
        cutiso_sumoet = cms.vdouble(11.9, 7.81, 6.28, 8.92, 4.65, 
            5.49, 9.36, 8.84, 5.94),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0145, 0.0116, 0.012, 0.039, 0.0297, 
            0.0311, 0.00987, 0.0347, 0.0917),
        cuteseedopcor = cms.vdouble(0.637, 0.943, 0.742, 0.748, 0.763, 
            0.631, 0.214, 0.873, 0.473),
        cutdphiinl = cms.vdouble(0.061, 0.14, 0.286, 0.0921, 0.197, 
            0.24, 0.333, 0.303, 0.258),
        cutdetainl = cms.vdouble(0.00816, 0.00401, 0.0081, 0.019, 0.00588, 
            0.00893, 0.0171, 0.0434, 0.0143)
    ),
    algorithm = cms.string('eIDCB'),
    robusthighenergyEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.115, 0.014, 0.09, 0.009, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.15, 0.0275, 0.092, 0.0105, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.075, 0.0132, 0.058, 0.0077, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.083, 0.027, 0.042, 0.01, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    additionalCategories = cms.bool(True),
    etBinning = cms.bool(True)
)


process.eidTight = cms.EDProducer("EleIdCutBasedExtProducer",
    electronQuality = cms.string('tight'),
    classbasedtightEleIDCutsV02 = cms.PSet(
        cutisohcal = cms.vdouble(10.9, 7.01, 8.75, 3.51, 7.75, 
            1.62, 11.6, 9.9, 4.97, 5.33, 
            3.18, 2.32, 0.164, 5.46, 12.0, 
            0.00604, 4.1, 0.000628),
        cutmishits = cms.vdouble(5.5, 1.5, 0.5, 1.5, 2.5, 
            0.5, 3.5, 5.5, 0.5, 0.5, 
            0.5, 0.5, 0.5, 1.5, 0.5, 
            0.5, 0.5, 0.5),
        cuthoe = cms.vdouble(0.0871, 0.0289, 0.0783, 0.0946, 0.0245, 
            0.0363, 0.0671, 0.048, 0.0614, 0.0924, 
            0.0158, 0.049, 0.0382, 0.0915, 0.0451, 
            0.0452, 0.00196, 0.0043),
        cutdeta = cms.vdouble(0.00915, 0.00302, 0.0061, 0.0135, 0.00565, 
            0.00793, 0.0102, 0.00266, 0.0106, 0.00903, 
            0.00766, 0.00723, 0.0116, 0.00203, 0.00659, 
            0.0148, 0.00555, 0.0128),
        cuteopin = cms.vdouble(0.878, 0.859, 0.874, 0.944, 0.737, 
            0.773, 0.86, 0.967, 0.917, 0.812, 
            0.915, 1.01, 0.847, 0.953, 0.979, 
            0.841, 0.771, 1.09),
        cutip = cms.vdouble(0.0239, 0.027, 0.0768, 0.0231, 0.178, 
            0.0957, 0.0102, 0.0168, 0.043, 0.0166, 
            0.0594, 0.0308, 2.1, 0.00527, 3.17, 
            4.91, 0.769, 5.9),
        cutisotk = cms.vdouble(6.53, 4.6, 6.0, 8.63, 3.11, 
            7.77, 5.42, 4.81, 4.06, 6.47, 
            2.8, 3.45, 5.29, 5.18, 15.4, 
            5.38, 4.47, 0.0347),
        cutsee = cms.vdouble(0.0131, 0.0106, 0.0115, 0.0306, 0.028, 
            0.0293, 0.0131, 0.0106, 0.0115, 0.0317, 
            0.029, 0.0289, 0.0142, 0.0106, 0.0103, 
            0.035, 0.0296, 0.0333),
        cutdphi = cms.vdouble(0.0369, 0.0307, 0.117, 0.0475, 0.0216, 
            0.117, 0.0372, 0.0246, 0.0426, 0.0612, 
            0.0142, 0.039, 0.0737, 0.0566, 0.0359, 
            0.0187, 0.012, 0.0358),
        cutisoecal = cms.vdouble(20.0, 27.2, 4.48, 13.5, 4.56, 
            3.19, 12.2, 13.1, 7.42, 7.67, 
            4.12, 4.85, 10.1, 12.4, 11.1, 
            11.0, 10.6, 13.4)
    ),
    classbasedtightEleIDCutsV03 = cms.PSet(
        cutdetain = cms.vdouble(0.00811, 0.00341, 0.00633, 0.0103, 0.00667, 
            0.01, 0.0106, 0.0145, 0.0163, 0.0076, 
            0.00259, 0.00511, 0.00941, 0.0043, 0.00857, 
            0.012, 0.0169, 0.00172, 0.00861, 0.00362, 
            0.00601, 0.00925, 0.00489, 0.00832, 0.0119, 
            0.0169, 0.000996),
        cutiso_sum = cms.vdouble(11.8, 8.31, 6.26, 6.18, 3.28, 
            4.38, 4.17, 5.4, 1.57, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0213, 0.0422, 0.0632, 0.0361, 0.073, 
            0.126, 0.171, 0.119, 0.0372, 0.0131, 
            0.0146, 0.0564, 0.0152, 0.0222, 0.0268, 
            0.0314, 0.0884, 0.00374, 0.00852, 0.00761, 
            0.0143, 0.0106, 0.0127, 0.0119, 0.0123, 
            0.0235, 0.00363),
        cuthoe = cms.vdouble(0.0783, 0.0387, 0.105, 0.118, 0.0227, 
            0.062, 0.13, 2.47, 0.38, 0.0888, 
            0.0503, 0.0955, 0.0741, 0.015, 0.03, 
            0.589, 1.13, 0.612, 0.0494, 0.0461, 
            0.0292, 0.0369, 0.0113, 0.0145, 0.124, 
            2.05, 0.61),
        cutfmishits = cms.vdouble(2.5, 1.5, 1.5, 1.5, 1.5, 
            0.5, 2.5, 0.5, 0.5, 2.5, 
            1.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5, -0.5, 2.5, 1.5, 
            0.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(13.7, 11.6, 7.14, 9.98, 3.52, 
            4.87, 6.24, 7.96, 2.53, 11.2, 
            11.9, 7.88, 8.16, 5.58, 5.03, 
            11.4, 8.15, 5.79, 10.4, 11.1, 
            10.4, 7.47, 5.08, 5.9, 11.8, 
            14.1, 11.7),
        cutdcotdist = cms.vdouble(0.0393, 0.0256, 0.00691, 0.0394, 0.0386, 
            0.039, 0.0325, 0.0384, 0.0382, 0.0245, 
            0.000281, 5.46e-05, 0.0342, 0.0232, 0.00107, 
            0.0178, 0.0193, 0.000758, 0.000108, 0.0248, 
            0.000458, 0.0129, 0.00119, 0.0182, 4.53e-05, 
            0.0189, 0.000928),
        cutsee = cms.vdouble(0.0143, 0.0105, 0.0123, 0.0324, 0.0307, 
            0.0301, 0.0109, 0.027, 0.0292, 0.0133, 
            0.0104, 0.0116, 0.0332, 0.0296, 0.031, 
            0.00981, 0.0307, 0.072, 0.0149, 0.0105, 
            0.011, 0.0342, 0.0307, 0.0303, 0.00954, 
            0.0265, 0.0101),
        cuteseedopcor = cms.vdouble(0.784, 0.366, 0.57, 0.911, 0.298, 
            0.645, 0.51, 0.497, 0.932, 0.835, 
            0.968, 0.969, 0.923, 0.898, 0.98, 
            0.63, 0.971, 1.0, 0.515, 0.963, 
            0.986, 0.823, 0.879, 1.01, 0.931, 
            0.937, 1.05),
        cutdphiin = cms.vdouble(0.0404, 0.0499, 0.263, 0.042, 0.0484, 
            0.241, 0.242, 0.231, 0.286, 0.0552, 
            0.0338, 0.154, 0.0623, 0.0183, 0.0392, 
            0.0547, 0.0588, 0.00654, 0.042, 0.0217, 
            0.0885, 0.0445, 0.0141, 0.0234, 0.065, 
            0.0258, 0.0346),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 13.7, 13.2, 
            13.6, 14.2, 14.1, 13.9, 12.9, 
            14.9, 17.7)
    ),
    classbasedtightEleIDCutsV00 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.032, 0.016, 0.0525, 0.09, 0.025, 
            0.035, 0.065, 0.092),
        hOverE = cms.vdouble(0.05, 0.042, 0.045, 0.0, 0.055, 
            0.037, 0.05, 0.0),
        sigmaEtaEta = cms.vdouble(0.0125, 0.011, 0.01, 0.0, 0.0265, 
            0.0252, 0.026, 0.0),
        deltaEtaIn = cms.vdouble(0.0055, 0.003, 0.0065, 0.0, 0.006, 
            0.0055, 0.0075, 0.0),
        eSeedOverPin = cms.vdouble(0.24, 0.94, 0.11, 0.0, 0.32, 
            0.83, 0.0, 0.0)
    ),
    classbasedtightEleIDCutsV01 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.0225, 0.0114, 0.0234, 0.039, 0.0215, 
            0.0095, 0.0148, 0.0167),
        hOverE = cms.vdouble(0.056, 0.0221, 0.037, 0.0, 0.0268, 
            0.0102, 0.0104, 0.0),
        sigmaEtaEta = cms.vdouble(0.0095, 0.0094, 0.0094, 0.0, 0.026, 
            0.0257, 0.0246, 0.0),
        deltaEtaIn = cms.vdouble(0.0043, 0.00282, 0.0036, 0.0, 0.0066, 
            0.0049, 0.0041, 0.0),
        eSeedOverPin = cms.vdouble(0.32, 0.94, 0.221, 0.0, 0.74, 
            0.89, 0.66, 0.0)
    ),
    classbasedtightEleIDCutsV06 = cms.PSet(
        cutdetain = cms.vdouble(0.0116, 0.00449, 0.00938, 0.0184, 0.00678, 
            0.0109, 0.0252, 0.0268, 0.0139),
        cutiso_sum = cms.vdouble(15.5, 12.2, 12.2, 11.7, 7.16, 
            9.71, 8.66, 11.9, 2.98),
        cutip_gsf = cms.vdouble(0.0131, 0.0586, 0.0839, 0.0366, 0.452, 
            0.204, 0.0913, 0.0802, 0.0731),
        cutip_gsfl = cms.vdouble(0.0119, 0.0527, 0.0471, 0.0212, 0.233, 
            0.267, 0.109, 0.122, 0.0479),
        cuthoe = cms.vdouble(0.215, 0.0608, 0.147, 0.369, 0.0349, 
            0.102, 0.52, 0.422, 0.404),
        cutiso_sumoetl = cms.vdouble(6.21, 6.81, 5.3, 5.39, 2.73, 
            4.73, 4.84, 3.46, 3.73),
        cutfmishits = cms.vdouble(1.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 1.5, 2.5, 0.5),
        cuthoel = cms.vdouble(0.228, 0.0836, 0.143, 0.37, 0.0392, 
            0.0979, 0.3, 0.381, 0.339),
        cutdphiin = cms.vdouble(0.0897, 0.0993, 0.295, 0.0979, 0.151, 
            0.252, 0.341, 0.308, 0.328),
        cutseel = cms.vdouble(0.0132, 0.0117, 0.0112, 0.0387, 0.0281, 
            0.0287, 0.00987, 0.0296, 0.0544),
        cutiso_sumoet = cms.vdouble(11.9, 7.81, 6.28, 8.92, 4.65, 
            5.49, 9.36, 8.84, 5.94),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0145, 0.0116, 0.012, 0.039, 0.0297, 
            0.0311, 0.00987, 0.0347, 0.0917),
        cuteseedopcor = cms.vdouble(0.637, 0.943, 0.742, 0.748, 0.763, 
            0.631, 0.214, 0.873, 0.473),
        cutdphiinl = cms.vdouble(0.061, 0.14, 0.286, 0.0921, 0.197, 
            0.24, 0.333, 0.303, 0.258),
        cutdetainl = cms.vdouble(0.00816, 0.00401, 0.0081, 0.019, 0.00588, 
            0.00893, 0.0171, 0.0434, 0.0143)
    ),
    classbasedtightEleIDCutsV04 = cms.PSet(
        cutdetain = cms.vdouble(0.00811, 0.00341, 0.00633, 0.0103, 0.00667, 
            0.01, 0.0106, 0.0145, 0.0163, 0.0076, 
            0.00259, 0.00511, 0.00941, 0.0043, 0.00857, 
            0.012, 0.0169, 0.00172, 0.00861, 0.00362, 
            0.00601, 0.00925, 0.00489, 0.00832, 0.0119, 
            0.0169, 0.000996),
        cutiso_sum = cms.vdouble(11.8, 8.31, 6.26, 6.18, 3.28, 
            4.38, 4.17, 5.4, 1.57, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0213, 0.0422, 0.0632, 0.0361, 0.073, 
            0.126, 0.171, 0.119, 0.0372, 0.0131, 
            0.0146, 0.0564, 0.0152, 0.0222, 0.0268, 
            0.0314, 0.0884, 0.00374, 0.00852, 0.00761, 
            0.0143, 0.0106, 0.0127, 0.0119, 0.0123, 
            0.0235, 0.00363),
        cuthoe = cms.vdouble(0.0783, 0.0387, 0.105, 0.118, 0.0227, 
            0.062, 0.13, 2.47, 0.38, 0.0888, 
            0.0503, 0.0955, 0.0741, 0.015, 0.03, 
            0.589, 1.13, 0.612, 0.0494, 0.0461, 
            0.0292, 0.0369, 0.0113, 0.0145, 0.124, 
            2.05, 0.61),
        cutfmishits = cms.vdouble(2.5, 1.5, 1.5, 1.5, 1.5, 
            0.5, 2.5, 0.5, 0.5, 2.5, 
            1.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5, -0.5, 2.5, 1.5, 
            0.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(13.7, 11.6, 7.14, 9.98, 3.52, 
            4.87, 6.24, 7.96, 2.53, 11.2, 
            11.9, 7.88, 8.16, 5.58, 5.03, 
            11.4, 8.15, 5.79, 10.4, 11.1, 
            10.4, 7.47, 5.08, 5.9, 11.8, 
            14.1, 11.7),
        cutdcotdist = cms.vdouble(0.0393, 0.0256, 0.00691, 0.0394, 0.0386, 
            0.039, 0.0325, 0.0384, 0.0382, 0.0245, 
            0.000281, 5.46e-05, 0.0342, 0.0232, 0.00107, 
            0.0178, 0.0193, 0.000758, 0.000108, 0.0248, 
            0.000458, 0.0129, 0.00119, 0.0182, 4.53e-05, 
            0.0189, 0.000928),
        cutsee = cms.vdouble(0.0143, 0.0105, 0.0123, 0.0324, 0.0307, 
            0.0301, 0.0109, 0.027, 0.0292, 0.0133, 
            0.0104, 0.0116, 0.0332, 0.0296, 0.031, 
            0.00981, 0.0307, 0.072, 0.0149, 0.0105, 
            0.011, 0.0342, 0.0307, 0.0303, 0.00954, 
            0.0265, 0.0101),
        cuteseedopcor = cms.vdouble(0.784, 0.366, 0.57, 0.911, 0.298, 
            0.645, 0.51, 0.497, 0.932, 0.835, 
            0.968, 0.969, 0.923, 0.898, 0.98, 
            0.63, 0.971, 1.0, 0.515, 0.963, 
            0.986, 0.823, 0.879, 1.01, 0.931, 
            0.937, 1.05),
        cutdphiin = cms.vdouble(0.0404, 0.0499, 0.263, 0.042, 0.0484, 
            0.241, 0.242, 0.231, 0.286, 0.0552, 
            0.0338, 0.154, 0.0623, 0.0183, 0.0392, 
            0.0547, 0.0588, 0.00654, 0.042, 0.0217, 
            0.0885, 0.0445, 0.0141, 0.0234, 0.065, 
            0.0258, 0.0346),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 13.7, 13.2, 
            13.6, 14.2, 14.1, 13.9, 12.9, 
            14.9, 17.7)
    ),
    electronIDType = cms.string('classbased'),
    robusttightEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    electronVersion = cms.string(''),
    robusttightEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.015, 0.0092, 0.02, 0.0025, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.018, 0.025, 0.02, 0.004, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusttightEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.01, 0.0099, 0.025, 0.004, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.01, 0.028, 0.02, 0.0066, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    reducedBarrelRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    robusttightEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    reducedEndcapRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    verticesCollection = cms.InputTag("offlinePrimaryVerticesWithBS"),
    classbasedlooseEleIDCuts = cms.PSet(
        cutdetain = cms.vdouble(0.0137, 0.00678, 0.0241, 0.0187, 0.0161, 
            0.0224, 0.0252, 0.0308, 0.0273),
        cutiso_sum = cms.vdouble(33.0, 17.0, 17.9, 18.8, 8.55, 
            12.5, 17.6, 18.5, 2.98),
        cutip_gsf = cms.vdouble(0.0551, 0.0765, 0.143, 0.0874, 0.594, 
            0.37, 0.0913, 1.15, 0.231),
        cutip_gsfl = cms.vdouble(0.0186, 0.0759, 0.138, 0.0473, 0.62, 
            0.304, 0.109, 0.775, 0.0479),
        cuthoe = cms.vdouble(0.247, 0.137, 0.147, 0.371, 0.0588, 
            0.147, 0.52, 0.452, 0.404),
        cutiso_sumoetl = cms.vdouble(11.3, 9.05, 9.07, 9.94, 5.25, 
            6.15, 10.7, 10.8, 4.4),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 4.5, 3.5, 3.5),
        cuthoel = cms.vdouble(0.236, 0.126, 0.147, 0.375, 0.0392, 
            0.145, 0.365, 0.383, 0.384),
        cutdphiin = cms.vdouble(0.0897, 0.262, 0.353, 0.116, 0.357, 
            0.319, 0.342, 0.404, 0.336),
        cutseel = cms.vdouble(0.0164, 0.0118, 0.015, 0.0523, 0.0326, 
            0.0456, 0.0185, 0.0589, 0.0544),
        cutiso_sumoet = cms.vdouble(34.5, 12.7, 12.1, 19.9, 6.35, 
            8.85, 14.0, 10.5, 9.74),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0176, 0.0125, 0.0181, 0.0415, 0.0364, 
            0.0418, 0.0146, 0.0678, 0.133),
        cuteseedopcor = cms.vdouble(0.63, 0.82, 0.401, 0.718, 0.4, 
            0.458, 0.15, 0.664, 0.373),
        cutdphiinl = cms.vdouble(0.0747, 0.25, 0.356, 0.0956, 0.347, 
            0.326, 0.333, 0.647, 0.289),
        cutdetainl = cms.vdouble(0.0124, 0.00503, 0.0257, 0.0228, 0.0118, 
            0.0178, 0.0188, 0.14, 0.024)
    ),
    robusttightEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.0275, 0.09, 0.007, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.011, 0.09, 0.005, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.1, 0.0275, 0.09, 0.007, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    classbasedlooseEleIDCutsV00 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.05, 0.025, 0.053, 0.09, 0.07, 
            0.03, 0.092, 0.092),
        hOverE = cms.vdouble(0.115, 0.1, 0.055, 0.0, 0.145, 
            0.12, 0.15, 0.0),
        sigmaEtaEta = cms.vdouble(0.014, 0.012, 0.0115, 0.0, 0.0275, 
            0.0265, 0.0265, 0.0),
        deltaEtaIn = cms.vdouble(0.009, 0.0045, 0.0085, 0.0, 0.0105, 
            0.0068, 0.01, 0.0),
        eSeedOverPin = cms.vdouble(0.11, 0.91, 0.11, 0.0, 0.0, 
            0.85, 0.0, 0.0)
    ),
    classbasedlooseEleIDCutsV01 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.053, 0.0189, 0.059, 0.099, 0.0278, 
            0.0157, 0.042, 0.08),
        hOverE = cms.vdouble(0.076, 0.033, 0.07, 0.0, 0.083, 
            0.0148, 0.033, 0.0),
        sigmaEtaEta = cms.vdouble(0.0101, 0.0095, 0.0097, 0.0, 0.0271, 
            0.0267, 0.0259, 0.0),
        deltaEtaIn = cms.vdouble(0.0078, 0.00259, 0.0062, 0.0, 0.0078, 
            0.0061, 0.0061, 0.0),
        eSeedOverPin = cms.vdouble(0.3, 0.92, 0.211, 0.0, 0.42, 
            0.88, 0.68, 0.0)
    ),
    classbasedlooseEleIDCutsV02 = cms.PSet(
        cutisohcal = cms.vdouble(13.5, 9.93, 7.56, 14.8, 8.1, 
            10.8, 42.7, 20.1, 9.11, 10.4, 
            6.89, 5.59, 8.53, 9.59, 24.2, 
            2.78, 8.67, 0.288),
        cutmishits = cms.vdouble(5.5, 1.5, 5.5, 2.5, 2.5, 
            2.5, 3.5, 5.5, 0.5, 1.5, 
            2.5, 0.5, 1.5, 1.5, 0.5, 
            0.5, 0.5, 0.5),
        cuthoe = cms.vdouble(0.0887, 0.0934, 0.0949, 0.0986, 0.0431, 
            0.0878, 0.097, 0.0509, 0.098, 0.0991, 
            0.0321, 0.0928, 0.0663, 0.0717, 0.0966, 
            0.0758, 0.0149, 0.0131),
        cutdeta = cms.vdouble(0.00958, 0.00406, 0.0122, 0.0137, 0.00837, 
            0.0127, 0.011, 0.00336, 0.00977, 0.015, 
            0.00675, 0.0109, 0.014, 0.00508, 0.0109, 
            0.0146, 0.00506, 0.0127),
        cuteopin = cms.vdouble(0.878, 0.802, 0.814, 0.942, 0.735, 
            0.774, 0.829, 0.909, 0.829, 0.813, 
            0.86, 0.897, 0.817, 0.831, 0.818, 
            0.861, 0.787, 0.789),
        cutip = cms.vdouble(0.0246, 0.076, 0.0966, 0.0885, 0.441, 
            0.205, 0.0292, 0.0293, 0.0619, 0.0251, 
            0.159, 0.0815, 7.29, 0.0106, 5.76, 
            6.89, 1.27, 5.89),
        cutisotk = cms.vdouble(24.3, 8.45, 14.4, 27.8, 6.02, 
            10.5, 14.1, 10.2, 14.5, 19.1, 
            6.1, 14.1, 8.59, 8.33, 8.3, 
            8.93, 8.6, 16.0),
        cutsee = cms.vdouble(0.0172, 0.0115, 0.0143, 0.0344, 0.0295, 
            0.0304, 0.0145, 0.0108, 0.0128, 0.0347, 
            0.0307, 0.0316, 0.018, 0.011, 0.0132, 
            0.0349, 0.031, 0.0327),
        cutdphi = cms.vdouble(0.0372, 0.114, 0.118, 0.0488, 0.117, 
            0.119, 0.0606, 0.0548, 0.117, 0.07, 
            0.0355, 0.117, 0.088, 0.045, 0.118, 
            0.0919, 0.0236, 0.0515),
        cutisoecal = cms.vdouble(33.4, 28.1, 7.32, 27.4, 7.33, 
            21.7, 93.8, 102.0, 12.1, 26.0, 
            8.91, 10.0, 16.1, 31.3, 16.9, 
            15.4, 13.3, 37.7)
    ),
    classbasedlooseEleIDCutsV03 = cms.PSet(
        cutdetain = cms.vdouble(0.00989, 0.00484, 0.0146, 0.0146, 0.00902, 
            0.0172, 0.0137, 0.0477, 0.0275, 0.00967, 
            0.00377, 0.00924, 0.013, 0.00666, 0.0123, 
            0.0125, 0.0228, 0.0112, 0.0106, 0.0038, 
            0.00897, 0.0139, 0.00667, 0.0122, 0.0122, 
            0.0193, 0.00239),
        cutiso_sum = cms.vdouble(31.5, 10.3, 8.8, 11.0, 6.13, 
            6.94, 7.52, 9.0, 3.5, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0431, 0.0767, 0.139, 0.101, 0.149, 
            0.154, 0.932, 0.15, 0.124, 0.0238, 
            0.0467, 0.0759, 0.0369, 0.147, 0.0986, 
            0.0626, 0.195, 0.116, 0.0122, 0.0125, 
            0.0693, 0.0162, 0.089, 0.0673, 0.0467, 
            0.0651, 0.0221),
        cuthoe = cms.vdouble(0.166, 0.0771, 0.144, 0.37, 0.0497, 
            0.139, 0.401, 2.68, 0.516, 0.234, 
            0.0556, 0.144, 0.368, 0.031, 0.12, 
            0.602, 2.01, 1.05, 0.104, 0.063, 
            0.0565, 0.38, 0.0192, 0.0294, 0.537, 
            4.65, 1.87),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 2.5, 2.5, 1.5, 2.5, 
            1.5, 1.5, 1.5, 1.5, 0.5, 
            2.5, 2.5, 0.5, 2.5, 1.5, 
            0.5, 1.5, 1.5, 0.5, 2.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(28.9, 15.3, 12.0, 18.3, 7.17, 
            9.42, 11.0, 9.81, 3.94, 22.7, 
            15.9, 12.3, 17.0, 7.58, 8.89, 
            15.2, 12.7, 6.17, 20.8, 21.2, 
            17.2, 15.5, 9.37, 10.6, 19.8, 
            22.1, 15.6),
        cutdcotdist = cms.vdouble(0.0393, 0.0392, 0.0397, 0.0394, 0.0393, 
            0.039, 0.0378, 0.0388, 0.0382, 0.0385, 
            0.0167, 0.00325, 0.0394, 0.0387, 0.0388, 
            0.0227, 0.0258, 0.0127, 0.0298, 0.03, 
            0.00946, 0.039, 0.0231, 0.0278, 0.00162, 
            0.0367, 0.0199),
        cutsee = cms.vdouble(0.0175, 0.0127, 0.0177, 0.0373, 0.0314, 
            0.0329, 0.0157, 0.0409, 0.14, 0.0169, 
            0.0106, 0.0142, 0.0363, 0.0322, 0.0354, 
            0.0117, 0.0372, 28.2, 0.0171, 0.0113, 
            0.014, 0.0403, 0.0323, 0.0411, 0.0104, 
            0.0436, 0.0114),
        cuteseedopcor = cms.vdouble(0.78, 0.302, 0.483, 0.904, 0.168, 
            0.645, 0.108, 0.284, 0.324, 0.591, 
            0.286, 0.488, 0.813, 0.791, 0.672, 
            0.398, 0.834, 0.878, 0.515, 0.937, 
            0.806, 0.816, 0.85, 0.507, 0.367, 
            0.83, 0.648),
        cutdphiin = cms.vdouble(0.041, 0.275, 0.365, 0.047, 0.273, 
            0.296, 0.329, 0.465, 0.627, 0.0581, 
            0.0954, 0.327, 0.0702, 0.0582, 0.279, 
            0.117, 0.318, 0.246, 0.0821, 0.052, 
            0.292, 0.116, 0.0435, 0.312, 0.118, 
            0.296, 0.0459),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 12.0, 12.0, 
            12.0, 12.0, 12.0, 12.0, 12.0, 
            12.0, 12.5)
    ),
    classbasedlooseEleIDCutsV04 = cms.PSet(
        cutdetain = cms.vdouble(0.00989, 0.00484, 0.0146, 0.0146, 0.00902, 
            0.0172, 0.0137, 0.0477, 0.0275, 0.00967, 
            0.00377, 0.00924, 0.013, 0.00666, 0.0123, 
            0.0125, 0.0228, 0.0112, 0.0106, 0.0038, 
            0.00897, 0.0139, 0.00667, 0.0122, 0.0122, 
            0.0193, 0.00239),
        cutiso_sum = cms.vdouble(31.5, 10.3, 8.8, 11.0, 6.13, 
            6.94, 7.52, 9.0, 3.5, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0431, 0.0767, 0.139, 0.101, 0.149, 
            0.154, 0.932, 0.15, 0.124, 0.0238, 
            0.0467, 0.0759, 0.0369, 0.147, 0.0986, 
            0.0626, 0.195, 0.116, 0.0122, 0.0125, 
            0.0693, 0.0162, 0.089, 0.0673, 0.0467, 
            0.0651, 0.0221),
        cuthoe = cms.vdouble(0.166, 0.0771, 0.144, 0.37, 0.0497, 
            0.139, 0.401, 2.68, 0.516, 0.234, 
            0.0556, 0.144, 0.368, 0.031, 0.12, 
            0.602, 2.01, 1.05, 0.104, 0.063, 
            0.0565, 0.38, 0.0192, 0.0294, 0.537, 
            4.65, 1.87),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 2.5, 2.5, 1.5, 2.5, 
            1.5, 1.5, 1.5, 1.5, 0.5, 
            2.5, 2.5, 0.5, 2.5, 1.5, 
            0.5, 1.5, 1.5, 0.5, 2.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(28.9, 15.3, 12.0, 18.3, 7.17, 
            9.42, 11.0, 9.81, 3.94, 22.7, 
            15.9, 12.3, 17.0, 7.58, 8.89, 
            15.2, 12.7, 6.17, 20.8, 21.2, 
            17.2, 15.5, 9.37, 10.6, 19.8, 
            22.1, 15.6),
        cutdcotdist = cms.vdouble(0.0393, 0.0392, 0.0397, 0.0394, 0.0393, 
            0.039, 0.0378, 0.0388, 0.0382, 0.0385, 
            0.0167, 0.00325, 0.0394, 0.0387, 0.0388, 
            0.0227, 0.0258, 0.0127, 0.0298, 0.03, 
            0.00946, 0.039, 0.0231, 0.0278, 0.00162, 
            0.0367, 0.0199),
        cutsee = cms.vdouble(0.0175, 0.0127, 0.0177, 0.0373, 0.0314, 
            0.0329, 0.0157, 0.0409, 0.14, 0.0169, 
            0.0106, 0.0142, 0.0363, 0.0322, 0.0354, 
            0.0117, 0.0372, 28.2, 0.0171, 0.0113, 
            0.014, 0.0403, 0.0323, 0.0411, 0.0104, 
            0.0436, 0.0114),
        cuteseedopcor = cms.vdouble(0.78, 0.302, 0.483, 0.904, 0.168, 
            0.645, 0.108, 0.284, 0.324, 0.591, 
            0.286, 0.488, 0.813, 0.791, 0.672, 
            0.398, 0.834, 0.878, 0.515, 0.937, 
            0.806, 0.816, 0.85, 0.507, 0.367, 
            0.83, 0.648),
        cutdphiin = cms.vdouble(0.041, 0.275, 0.365, 0.047, 0.273, 
            0.296, 0.329, 0.465, 0.627, 0.0581, 
            0.0954, 0.327, 0.0702, 0.0582, 0.279, 
            0.117, 0.318, 0.246, 0.0821, 0.052, 
            0.292, 0.116, 0.0435, 0.312, 0.118, 
            0.296, 0.0459),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 12.0, 12.0, 
            12.0, 12.0, 12.0, 12.0, 12.0, 
            12.0, 12.5)
    ),
    classbasedlooseEleIDCutsV06 = cms.PSet(
        cutdetain = cms.vdouble(0.0137, 0.00678, 0.0241, 0.0187, 0.0161, 
            0.0224, 0.0252, 0.0308, 0.0273),
        cutiso_sum = cms.vdouble(33.0, 17.0, 17.9, 18.8, 8.55, 
            12.5, 17.6, 18.5, 2.98),
        cutip_gsf = cms.vdouble(0.0551, 0.0765, 0.143, 0.0874, 0.594, 
            0.37, 0.0913, 1.15, 0.231),
        cutip_gsfl = cms.vdouble(0.0186, 0.0759, 0.138, 0.0473, 0.62, 
            0.304, 0.109, 0.775, 0.0479),
        cuthoe = cms.vdouble(0.247, 0.137, 0.147, 0.371, 0.0588, 
            0.147, 0.52, 0.452, 0.404),
        cutiso_sumoetl = cms.vdouble(11.3, 9.05, 9.07, 9.94, 5.25, 
            6.15, 10.7, 10.8, 4.4),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 4.5, 3.5, 3.5),
        cuthoel = cms.vdouble(0.236, 0.126, 0.147, 0.375, 0.0392, 
            0.145, 0.365, 0.383, 0.384),
        cutdphiin = cms.vdouble(0.0897, 0.262, 0.353, 0.116, 0.357, 
            0.319, 0.342, 0.404, 0.336),
        cutseel = cms.vdouble(0.0164, 0.0118, 0.015, 0.0523, 0.0326, 
            0.0456, 0.0185, 0.0589, 0.0544),
        cutiso_sumoet = cms.vdouble(34.5, 12.7, 12.1, 19.9, 6.35, 
            8.85, 14.0, 10.5, 9.74),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0176, 0.0125, 0.0181, 0.0415, 0.0364, 
            0.0418, 0.0146, 0.0678, 0.133),
        cuteseedopcor = cms.vdouble(0.63, 0.82, 0.401, 0.718, 0.4, 
            0.458, 0.15, 0.664, 0.373),
        cutdphiinl = cms.vdouble(0.0747, 0.25, 0.356, 0.0956, 0.347, 
            0.326, 0.333, 0.647, 0.289),
        cutdetainl = cms.vdouble(0.0124, 0.00503, 0.0257, 0.0228, 0.0118, 
            0.0178, 0.0188, 0.14, 0.024)
    ),
    src = cms.InputTag("gsfElectrons"),
    robusttightEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    classbasedtightEleIDCuts = cms.PSet(
        cutdetain = cms.vdouble(0.0116, 0.00449, 0.00938, 0.0184, 0.00678, 
            0.0109, 0.0252, 0.0268, 0.0139),
        cutiso_sum = cms.vdouble(15.5, 12.2, 12.2, 11.7, 7.16, 
            9.71, 8.66, 11.9, 2.98),
        cutip_gsf = cms.vdouble(0.0131, 0.0586, 0.0839, 0.0366, 0.452, 
            0.204, 0.0913, 0.0802, 0.0731),
        cutip_gsfl = cms.vdouble(0.0119, 0.0527, 0.0471, 0.0212, 0.233, 
            0.267, 0.109, 0.122, 0.0479),
        cuthoe = cms.vdouble(0.215, 0.0608, 0.147, 0.369, 0.0349, 
            0.102, 0.52, 0.422, 0.404),
        cutiso_sumoetl = cms.vdouble(6.21, 6.81, 5.3, 5.39, 2.73, 
            4.73, 4.84, 3.46, 3.73),
        cutfmishits = cms.vdouble(1.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 1.5, 2.5, 0.5),
        cuthoel = cms.vdouble(0.228, 0.0836, 0.143, 0.37, 0.0392, 
            0.0979, 0.3, 0.381, 0.339),
        cutdphiin = cms.vdouble(0.0897, 0.0993, 0.295, 0.0979, 0.151, 
            0.252, 0.341, 0.308, 0.328),
        cutseel = cms.vdouble(0.0132, 0.0117, 0.0112, 0.0387, 0.0281, 
            0.0287, 0.00987, 0.0296, 0.0544),
        cutiso_sumoet = cms.vdouble(11.9, 7.81, 6.28, 8.92, 4.65, 
            5.49, 9.36, 8.84, 5.94),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0145, 0.0116, 0.012, 0.039, 0.0297, 
            0.0311, 0.00987, 0.0347, 0.0917),
        cuteseedopcor = cms.vdouble(0.637, 0.943, 0.742, 0.748, 0.763, 
            0.631, 0.214, 0.873, 0.473),
        cutdphiinl = cms.vdouble(0.061, 0.14, 0.286, 0.0921, 0.197, 
            0.24, 0.333, 0.303, 0.258),
        cutdetainl = cms.vdouble(0.00816, 0.00401, 0.0081, 0.019, 0.00588, 
            0.00893, 0.0171, 0.0434, 0.0143)
    ),
    algorithm = cms.string('eIDCB'),
    robusthighenergyEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.115, 0.014, 0.09, 0.009, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.15, 0.0275, 0.092, 0.0105, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.075, 0.0132, 0.058, 0.0077, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.083, 0.027, 0.042, 0.01, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    additionalCategories = cms.bool(True),
    etBinning = cms.bool(True)
)


process.elPFIsoDepositCharged = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("pfSelectedElectrons"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllChargedHadrons"),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.elPFIsoDepositChargedAll = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("pfSelectedElectrons"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllChargedParticles"),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.elPFIsoDepositChargedAllPFlow = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("pfSelectedElectronsPFlow"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllChargedParticlesPFlow"),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.elPFIsoDepositChargedAllPFlowLoose = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("pfSelectedElectronsPFlowLoose"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllChargedParticlesPFlowLoose"),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.elPFIsoDepositChargedPFlow = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("pfSelectedElectronsPFlow"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllChargedHadronsPFlow"),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.elPFIsoDepositChargedPFlowLoose = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("pfSelectedElectronsPFlowLoose"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllChargedHadronsPFlowLoose"),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.elPFIsoDepositGamma = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("pfSelectedElectrons"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllPhotons"),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.elPFIsoDepositGammaPFlow = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("pfSelectedElectronsPFlow"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllPhotonsPFlow"),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.elPFIsoDepositGammaPFlowLoose = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("pfSelectedElectronsPFlowLoose"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllPhotonsPFlowLoose"),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.elPFIsoDepositNeutral = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("pfSelectedElectrons"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllNeutralHadrons"),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.elPFIsoDepositNeutralPFlow = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("pfSelectedElectronsPFlow"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllNeutralHadronsPFlow"),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.elPFIsoDepositNeutralPFlowLoose = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("pfSelectedElectronsPFlowLoose"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllNeutralHadronsPFlowLoose"),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.elPFIsoDepositPU = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("pfSelectedElectrons"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfPileUpAllChargedParticles"),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.elPFIsoDepositPUPFlow = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("pfSelectedElectronsPFlow"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfPileUpAllChargedParticlesPFlow"),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.elPFIsoDepositPUPFlowLoose = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("pfSelectedElectronsPFlowLoose"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfPileUpAllChargedParticlesPFlowLoose"),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.elPFIsoValueCharged03NoPFId = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositCharged"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueCharged03NoPFIdPFlow = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositChargedPFlow"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueCharged03NoPFIdPFlowLoose = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositChargedPFlowLoose"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueCharged03PFId = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositCharged"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueCharged03PFIdPFlow = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositChargedPFlow"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueCharged03PFIdPFlowLoose = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositChargedPFlowLoose"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueCharged04NoPFId = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositCharged"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueCharged04NoPFIdPFlow = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositChargedPFlow"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueCharged04NoPFIdPFlowLoose = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositChargedPFlowLoose"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueCharged04PFId = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositCharged"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueCharged04PFIdPFlow = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositChargedPFlow"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueCharged04PFIdPFlowLoose = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositChargedPFlowLoose"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueChargedAll03NoPFId = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositChargedAll"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueChargedAll03NoPFIdPFlow = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositChargedAllPFlow"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueChargedAll03NoPFIdPFlowLoose = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositChargedAllPFlowLoose"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueChargedAll03PFId = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositChargedAll"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueChargedAll03PFIdPFlow = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositChargedAllPFlow"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueChargedAll03PFIdPFlowLoose = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositChargedAllPFlowLoose"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueChargedAll04NoPFId = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositChargedAll"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueChargedAll04NoPFIdPFlow = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositChargedAllPFlow"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueChargedAll04NoPFIdPFlowLoose = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositChargedAllPFlowLoose"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueChargedAll04PFId = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositChargedAll"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueChargedAll04PFIdPFlow = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositChargedAllPFlow"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueChargedAll04PFIdPFlowLoose = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositChargedAllPFlowLoose"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueGamma03NoPFId = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositGamma"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.08)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueGamma03NoPFIdPFlow = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositGammaPFlow"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.08)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueGamma03NoPFIdPFlowLoose = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositGammaPFlowLoose"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.08)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueGamma03PFId = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositGamma"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.08)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueGamma03PFIdPFlow = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositGammaPFlow"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.08)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueGamma03PFIdPFlowLoose = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositGammaPFlowLoose"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.08)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueGamma04NoPFId = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositGamma"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.08)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueGamma04NoPFIdPFlow = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositGammaPFlow"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.08)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueGamma04NoPFIdPFlowLoose = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositGammaPFlowLoose"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.08)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueGamma04PFId = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositGamma"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.08)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueGamma04PFIdPFlow = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositGammaPFlow"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.08)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueGamma04PFIdPFlowLoose = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositGammaPFlowLoose"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.08)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueNeutral03NoPFId = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositNeutral"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring(),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueNeutral03NoPFIdPFlow = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositNeutralPFlow"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring(),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueNeutral03NoPFIdPFlowLoose = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositNeutralPFlowLoose"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring(),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueNeutral03PFId = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositNeutral"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring(),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueNeutral03PFIdPFlow = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositNeutralPFlow"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring(),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueNeutral03PFIdPFlowLoose = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositNeutralPFlowLoose"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring(),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueNeutral04NoPFId = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositNeutral"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring(),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueNeutral04NoPFIdPFlow = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositNeutralPFlow"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring(),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueNeutral04NoPFIdPFlowLoose = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositNeutralPFlowLoose"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring(),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueNeutral04PFId = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositNeutral"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring(),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueNeutral04PFIdPFlow = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositNeutralPFlow"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring(),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueNeutral04PFIdPFlowLoose = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositNeutralPFlowLoose"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring(),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValuePU03NoPFId = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositPU"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValuePU03NoPFIdPFlow = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositPUPFlow"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValuePU03NoPFIdPFlowLoose = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositPUPFlowLoose"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValuePU03PFId = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositPU"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValuePU03PFIdPFlow = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositPUPFlow"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValuePU03PFIdPFlowLoose = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositPUPFlowLoose"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValuePU04NoPFId = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositPU"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValuePU04NoPFIdPFlow = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositPUPFlow"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValuePU04NoPFIdPFlowLoose = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositPUPFlowLoose"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValuePU04PFId = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositPU"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValuePU04PFIdPFlow = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositPUPFlow"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValuePU04PFIdPFlowLoose = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositPUPFlowLoose"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.eleIsoDepositEcalFromHits = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("gsfElectrons"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        isolationVariable = cms.string('et'),
        tryBoth = cms.bool(True),
        intStrip = cms.double(0.0),
        ComponentName = cms.string('EgammaRecHitExtractor'),
        endcapEcalHits = cms.InputTag("reducedEcalRecHitsEE"),
        recHitFlagsToBeExcluded = cms.vstring('kFaultyHardware', 
            'kPoorCalib', 
            'kTowerRecovered', 
            'kDead'),
        intRadius = cms.double(0.0),
        severityLevelCut = cms.int32(4),
        energyMin = cms.double(0.095),
        extRadius = cms.double(0.6),
        subtractSuperClusterEnergy = cms.bool(False),
        vetoClustered = cms.bool(False),
        etMin = cms.double(0.0),
        DepositLabel = cms.untracked.string(''),
        barrelEcalHits = cms.InputTag("reducedEcalRecHitsEB")
    )
)


process.eleIsoDepositHcalFromTowers = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("gsfElectrons"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        caloTowers = cms.InputTag("towerMaker"),
        ComponentName = cms.string('EgammaTowerExtractor'),
        hcalDepth = cms.int32(-1),
        intRadius = cms.double(0.0),
        extRadius = cms.double(0.6),
        DepositLabel = cms.untracked.string(''),
        etMin = cms.double(-999.0)
    )
)


process.eleIsoDepositTk = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("gsfElectrons"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(0.2),
        dzOption = cms.string('vz'),
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        ComponentName = cms.string('EgammaTrackExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(9999.0),
        Chi2Prob_Min = cms.double(-1.0),
        DR_Veto = cms.double(0.0),
        NHits_Min = cms.uint32(0),
        Chi2Ndof_Max = cms.double(1e+64),
        Pt_Min = cms.double(-1.0),
        DepositLabel = cms.untracked.string(''),
        BeamlineOption = cms.string('BeamSpotFromEvent'),
        inputTrackCollection = cms.InputTag("generalTracks")
    )
)


process.eleIsoFromDepsEcalFromHitsByCrystal = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("eleIsoDepositEcalFromHits"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('NumCrystalVeto(3.0)', 
            'NumCrystalEtaPhiVeto(1.5,9999.0)', 
            'EcalBarrel:AbsThresholdFromTransverse(0.095)', 
            'EcalEndcaps:AbsThreshold(0.110)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.eleIsoFromDepsHcalFromTowers = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("eleIsoDepositHcalFromTowers"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('0.15'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.eleIsoFromDepsTk = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("eleIsoDepositTk"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('RectangularEtaPhiVeto(-0.015,0.015,-0.5,0.5)', 
            'Threshold(0.7)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.electronMatch = cms.EDProducer("MCMatcher",
    src = cms.InputTag("gsfElectrons"),
    maxDPtRel = cms.double(0.5),
    mcPdgId = cms.vint32(11),
    mcStatus = cms.vint32(1),
    resolveByMatchQuality = cms.bool(False),
    maxDeltaR = cms.double(0.5),
    checkCharge = cms.bool(True),
    resolveAmbiguities = cms.bool(True),
    matched = cms.InputTag("genParticles")
)


process.electronMatchPFlow = cms.EDProducer("MCMatcher",
    src = cms.InputTag("gsfElectrons"),
    maxDPtRel = cms.double(0.5),
    mcPdgId = cms.vint32(11),
    mcStatus = cms.vint32(1),
    resolveByMatchQuality = cms.bool(False),
    maxDeltaR = cms.double(0.5),
    checkCharge = cms.bool(True),
    resolveAmbiguities = cms.bool(True),
    matched = cms.InputTag("genParticles")
)


process.electronMatchPFlowLoose = cms.EDProducer("MCMatcher",
    src = cms.InputTag("gsfElectrons"),
    maxDPtRel = cms.double(0.5),
    mcPdgId = cms.vint32(11),
    mcStatus = cms.vint32(1),
    resolveByMatchQuality = cms.bool(False),
    maxDeltaR = cms.double(0.5),
    checkCharge = cms.bool(True),
    resolveAmbiguities = cms.bool(True),
    matched = cms.InputTag("genParticles")
)


process.fixedConePFTauDecayModeIndexProducer = cms.EDProducer("PFRecoTauDecayModeIndexProducer",
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    PFTauProducer = cms.InputTag("fixedConePFTauProducer"),
    PFTauDecayModeProducer = cms.InputTag("fixedConePFTauDecayModeProducer")
)


process.fixedConePFTauDecayModeProducer = cms.EDProducer("PFRecoTauDecayModeDeterminator",
    mergeByBestMatch = cms.bool(True),
    refitTracks = cms.bool(False),
    maxPiZeroMass = cms.double(0.2),
    mergeLowPtPhotonsFirst = cms.bool(True),
    setMergedPi0Mass = cms.bool(True),
    setChargedPionMass = cms.bool(True),
    filterPhotons = cms.bool(True),
    minPtFractionSinglePhotons = cms.double(0.1),
    minPtFractionPiZeroes = cms.double(0.15),
    maxNbrOfIterations = cms.int32(10),
    filterTwoProngs = cms.bool(True),
    minPtFractionForSecondProng = cms.double(0.1),
    maxDistance = cms.double(0.01),
    setPi0Mass = cms.bool(True),
    maxPhotonsToMerge = cms.uint32(2),
    PFTauProducer = cms.InputTag("fixedConePFTauProducer")
)


process.fixedConePFTauDiscriminationAgainstElectron = cms.EDProducer("PFRecoTauDiscriminationAgainstElectron",
    ApplyCut_ElectronPreID_2D = cms.bool(False),
    ApplyCut_EOverPLead = cms.bool(False),
    ElecPreID0_HOverPLead_minValue = cms.double(0.05),
    PFTauProducer = cms.InputTag("fixedConePFTauProducer"),
    ApplyCut_ElectronPreID = cms.bool(False),
    ApplyCut_HcalTotOverPLead = cms.bool(False),
    EOverPLead_minValue = cms.double(0.8),
    ElecPreID1_EOverPLead_maxValue = cms.double(0.8),
    HcalMaxOverPLead_minValue = cms.double(0.1),
    ApplyCut_EmFraction = cms.bool(False),
    EmFraction_maxValue = cms.double(0.9),
    BremCombined_Mass = cms.double(0.55),
    ApplyCut_PFElectronMVA = cms.bool(True),
    PFElectronMVA_maxValue = cms.double(-0.1),
    ApplyCut_HcalMaxOverPLead = cms.bool(False),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("fixedConePFTauDiscriminationByLeadingTrackFinding")
        )
    ),
    ApplyCut_BremCombined = cms.bool(False),
    Hcal3x3OverPLead_minValue = cms.double(0.1),
    ElecPreID1_HOverPLead_minValue = cms.double(0.15),
    ElecPreID0_EOverPLead_maxValue = cms.double(0.95),
    BremsRecoveryEOverPLead_minValue = cms.double(0.8),
    ApplyCut_EcalCrackCut = cms.bool(False),
    BremCombined_StripSize = cms.double(0.03),
    EOverPLead_maxValue = cms.double(1.8),
    HcalTotOverPLead_minValue = cms.double(0.1),
    ApplyCut_BremsRecoveryEOverPLead = cms.bool(False),
    ApplyCut_Hcal3x3OverPLead = cms.bool(False),
    BremCombined_HOP = cms.double(0.1),
    BremCombined_Fraction = cms.double(0.99),
    BremsRecoveryEOverPLead_maxValue = cms.double(1.8)
)


process.fixedConePFTauDiscriminationAgainstMuon = cms.EDProducer("PFRecoTauDiscriminationAgainstMuon",
    a = cms.double(0.5),
    c = cms.double(0.0),
    b = cms.double(0.5),
    PFTauProducer = cms.InputTag("fixedConePFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("fixedConePFTauDiscriminationByLeadingTrackFinding")
        )
    ),
    discriminatorOption = cms.string('noSegMatch'),
    HoPMin = cms.double(0.2),
    maxNumberOfMatches = cms.int32(0),
    checkNumMatches = cms.bool(False)
)


process.fixedConePFTauDiscriminationByECALIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("fixedConePFTauProducer"),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("fixedConePFTauDiscriminationByLeadingTrackFinding")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    applySumPtCut = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    applyRelativeSumPtCut = cms.bool(False)
)


process.fixedConePFTauDiscriminationByECALIsolationUsingLeadingPion = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("fixedConePFTauProducer"),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadPion = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("fixedConePFTauDiscriminationByLeadingTrackFinding")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    applySumPtCut = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    applyRelativeSumPtCut = cms.bool(False)
)


process.fixedConePFTauDiscriminationByIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("fixedConePFTauProducer"),
    maximumOccupancy = cms.uint32(0),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.38'),
    applyRhoCorrection = cms.bool(False),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    isoConeSizeForDeltaBeta = cms.double(0.5),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("fixedConePFTauDiscriminationByLeadingTrackFinding")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.fixedConePFTauDiscriminationByIsolationUsingLeadingPion = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("fixedConePFTauProducer"),
    maximumOccupancy = cms.uint32(0),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.38'),
    applyRhoCorrection = cms.bool(False),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    isoConeSizeForDeltaBeta = cms.double(0.5),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadPion = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("fixedConePFTauDiscriminationByLeadingTrackFinding")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.fixedConePFTauDiscriminationByLeadingPionPtCut = cms.EDProducer("PFRecoTauDiscriminationByLeadingObjectPtCut",
    MinPtLeadingObject = cms.double(5.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    PFTauProducer = cms.InputTag("fixedConePFTauProducer"),
    UseOnlyChargedHadrons = cms.bool(False)
)


process.fixedConePFTauDiscriminationByLeadingTrackFinding = cms.EDProducer("PFRecoTauDiscriminationByLeadingObjectPtCut",
    MinPtLeadingObject = cms.double(0.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    PFTauProducer = cms.InputTag("fixedConePFTauProducer"),
    UseOnlyChargedHadrons = cms.bool(True)
)


process.fixedConePFTauDiscriminationByLeadingTrackPtCut = cms.EDProducer("PFRecoTauDiscriminationByLeadingObjectPtCut",
    MinPtLeadingObject = cms.double(5.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    PFTauProducer = cms.InputTag("fixedConePFTauProducer"),
    UseOnlyChargedHadrons = cms.bool(True)
)


process.fixedConePFTauDiscriminationByTrackIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(False),
    PFTauProducer = cms.InputTag("fixedConePFTauProducer"),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("fixedConePFTauDiscriminationByLeadingTrackFinding")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    applySumPtCut = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    applyRelativeSumPtCut = cms.bool(False)
)


process.fixedConePFTauDiscriminationByTrackIsolationUsingLeadingPion = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(False),
    PFTauProducer = cms.InputTag("fixedConePFTauProducer"),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadPion = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("fixedConePFTauDiscriminationByLeadingTrackFinding")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    applySumPtCut = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    applyRelativeSumPtCut = cms.bool(False)
)


process.fixedConePFTauProducer = cms.EDProducer("RecoTauProducer",
    piZeroSrc = cms.InputTag("ak5PFJetsRecoTauPiZeros"),
    modifiers = cms.VPSet(cms.PSet(
        ElectronPreIDProducer = cms.InputTag("elecpreid"),
        name = cms.string('shrinkingConeElectronRej'),
        plugin = cms.string('RecoTauElectronRejectionPlugin'),
        DataType = cms.string('AOD'),
        maximumForElectrionPreIDOutput = cms.double(-0.1),
        EcalStripSumE_deltaPhiOverQ_minValue = cms.double(-0.1),
        EcalStripSumE_deltaPhiOverQ_maxValue = cms.double(0.5),
        EcalStripSumE_minClusEnergy = cms.double(0.1),
        ElecPreIDLeadTkMatch_maxDR = cms.double(0.01),
        EcalStripSumE_deltaEta = cms.double(0.03)
    )),
    jetRegionSrc = cms.InputTag("recoTauAK5PFJets08Region"),
    jetSrc = cms.InputTag("ak5PFJets"),
    builders = cms.VPSet(cms.PSet(
        usePFLeptons = cms.bool(True),
        signalConeNeutralHadrons = cms.string('0.10'),
        name = cms.string('fixedCone'),
        plugin = cms.string('RecoTauBuilderConePlugin'),
        isoConeChargedHadrons = cms.string('0.5'),
        isoConePiZeros = cms.string('0.5'),
        isoConeNeutralHadrons = cms.string('0.5'),
        useClosestPV = cms.bool(False),
        matchingCone = cms.string('0.1'),
        signalConeChargedHadrons = cms.string('0.07'),
        leadObjectPt = cms.double(5.0),
        qualityCuts = cms.PSet(
            isolationQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(8),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(1.0),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(1.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            ),
            pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
            primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
            signalQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(3),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(0.5),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(0.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            )
        ),
        signalConePiZeros = cms.string('0.15'),
        pfCandSrc = cms.InputTag("particleFlow")
    )),
    buildNullTaus = cms.bool(True)
)


process.fixedConeRecoTaus = cms.EDProducer("RecoTauProducer",
    piZeroSrc = cms.InputTag("ak5PFJetsRecoTauPiZeros"),
    modifiers = cms.VPSet(cms.PSet(
        ElectronPreIDProducer = cms.InputTag("elecpreid"),
        name = cms.string('shrinkingConeElectronRej'),
        plugin = cms.string('RecoTauElectronRejectionPlugin'),
        DataType = cms.string('AOD'),
        maximumForElectrionPreIDOutput = cms.double(-0.1),
        EcalStripSumE_deltaPhiOverQ_minValue = cms.double(-0.1),
        EcalStripSumE_deltaPhiOverQ_maxValue = cms.double(0.5),
        EcalStripSumE_minClusEnergy = cms.double(0.1),
        ElecPreIDLeadTkMatch_maxDR = cms.double(0.01),
        EcalStripSumE_deltaEta = cms.double(0.03)
    )),
    jetRegionSrc = cms.InputTag("recoTauAK5PFJets08Region"),
    jetSrc = cms.InputTag("ak5PFJets"),
    builders = cms.VPSet(cms.PSet(
        usePFLeptons = cms.bool(True),
        signalConeNeutralHadrons = cms.string('0.10'),
        name = cms.string('fixedCone'),
        plugin = cms.string('RecoTauBuilderConePlugin'),
        isoConeChargedHadrons = cms.string('0.5'),
        isoConePiZeros = cms.string('0.5'),
        isoConeNeutralHadrons = cms.string('0.5'),
        useClosestPV = cms.bool(False),
        matchingCone = cms.string('0.1'),
        signalConeChargedHadrons = cms.string('0.07'),
        leadObjectPt = cms.double(5.0),
        qualityCuts = cms.PSet(
            isolationQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(8),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(1.0),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(1.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            ),
            pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
            primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
            signalQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(3),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(0.5),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(0.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            )
        ),
        signalConePiZeros = cms.string('0.15'),
        pfCandSrc = cms.InputTag("particleFlow")
    )),
    buildNullTaus = cms.bool(True)
)


process.gamIsoDepositEcalFromHits = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("photons"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        isolationVariable = cms.string('et'),
        tryBoth = cms.bool(True),
        intStrip = cms.double(0.0),
        ComponentName = cms.string('EgammaRecHitExtractor'),
        endcapEcalHits = cms.InputTag("reducedEcalRecHitsEE"),
        recHitFlagsToBeExcluded = cms.vstring('kFaultyHardware', 
            'kPoorCalib', 
            'kTowerRecovered', 
            'kDead'),
        intRadius = cms.double(0.0),
        severityLevelCut = cms.int32(4),
        energyMin = cms.double(0.095),
        extRadius = cms.double(0.6),
        subtractSuperClusterEnergy = cms.bool(False),
        vetoClustered = cms.bool(False),
        detector = cms.string('Ecal'),
        etMin = cms.double(0.0),
        DepositLabel = cms.untracked.string(''),
        barrelEcalHits = cms.InputTag("reducedEcalRecHitsEB")
    )
)


process.gamIsoDepositHcalFromTowers = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("photons"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        caloTowers = cms.InputTag("towerMaker"),
        ComponentName = cms.string('EgammaTowerExtractor'),
        hcalDepth = cms.int32(-1),
        intRadius = cms.double(0.0),
        extRadius = cms.double(0.6),
        DepositLabel = cms.untracked.string(''),
        etMin = cms.double(-999.0)
    )
)


process.gamIsoDepositTk = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("photons"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(0.2),
        dzOption = cms.string('vz'),
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        ComponentName = cms.string('EgammaTrackExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(9999.0),
        Chi2Prob_Min = cms.double(-1.0),
        DR_Veto = cms.double(0.0),
        NHits_Min = cms.uint32(0),
        Chi2Ndof_Max = cms.double(1e+64),
        Pt_Min = cms.double(-1.0),
        DepositLabel = cms.untracked.string(''),
        BeamlineOption = cms.string('BeamSpotFromEvent'),
        inputTrackCollection = cms.InputTag("generalTracks")
    )
)


process.gamIsoFromDepsEcalFromHits = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("gamIsoDepositEcalFromHits"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalBarrel:0.045', 
            'EcalBarrel:RectangularEtaPhiVeto(-0.02,0.02,-0.5,0.5)', 
            'EcalBarrel:AbsThresholdFromTransverse(0.095)', 
            'EcalEndcaps:0.070', 
            'EcalEndcaps:RectangularEtaPhiVeto(-0.02,0.02,-0.5,0.5)', 
            'EcalEndcaps:AbsThreshold(0.110)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.gamIsoFromDepsHcalFromTowers = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("gamIsoDepositHcalFromTowers"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('0.15'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.gamIsoFromDepsTk = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("gamIsoDepositTk"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('RectangularEtaPhiVeto(-0.015,0.015,-0.5,0.5)', 
            'Threshold(1.0)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.genEvt = cms.EDProducer("TtGenEventReco",
    src = cms.InputTag("decaySubset"),
    init = cms.InputTag("initSubset")
)


process.genParticlesForJets = cms.EDProducer("InputGenJetsParticleSelector",
    src = cms.InputTag("genParticles"),
    ignoreParticleIDs = cms.vuint32(1000022, 1000012, 1000014, 1000016, 2000012, 
        2000014, 2000016, 1000039, 5100039, 4000012, 
        4000014, 4000016, 9900012, 9900014, 9900016, 
        39),
    partonicFinalState = cms.bool(False),
    excludeResonances = cms.bool(True),
    excludeFromResonancePids = cms.vuint32(12, 13, 14, 16),
    tausAsJets = cms.bool(False)
)


process.genParticlesForJetsNoMuNoNu = cms.EDProducer("InputGenJetsParticleSelector",
    src = cms.InputTag("genParticles"),
    ignoreParticleIDs = cms.vuint32(1000022, 1000012, 1000014, 1000016, 2000012, 
        2000014, 2000016, 1000039, 5100039, 4000012, 
        4000014, 4000016, 9900012, 9900014, 9900016, 
        39, 12, 13, 14, 16),
    partonicFinalState = cms.bool(False),
    excludeResonances = cms.bool(True),
    excludeFromResonancePids = cms.vuint32(12, 13, 14, 16),
    tausAsJets = cms.bool(False)
)


process.genParticlesForJetsNoNu = cms.EDProducer("InputGenJetsParticleSelector",
    src = cms.InputTag("genParticles"),
    ignoreParticleIDs = cms.vuint32(1000022, 1000012, 1000014, 1000016, 2000012, 
        2000014, 2000016, 1000039, 5100039, 4000012, 
        4000014, 4000016, 9900012, 9900014, 9900016, 
        39, 12, 14, 16),
    partonicFinalState = cms.bool(False),
    excludeResonances = cms.bool(True),
    excludeFromResonancePids = cms.vuint32(12, 13, 14, 16),
    tausAsJets = cms.bool(False)
)


process.ghostTrackBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('ghostTrack'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"), cms.InputTag("ghostTrackVertexTagInfos"))
)


process.ghostTrackVertexTagInfos = cms.EDProducer("SecondaryVertexProducer",
    extSVDeltaRToJet = cms.double(0.3),
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    vertexReco = cms.PSet(
        primcut = cms.double(2.0),
        seccut = cms.double(4.0),
        maxFitChi2 = cms.double(10.0),
        fitType = cms.string('RefitGhostTrackWithVertices'),
        mergeThreshold = cms.double(3.0),
        finder = cms.string('gtvr')
    ),
    vertexSelection = cms.PSet(
        sortCriterium = cms.string('dist3dError')
    ),
    constraint = cms.string('BeamSpot'),
    trackIPTagInfos = cms.InputTag("impactParameterTagInfos"),
    vertexCuts = cms.PSet(
        distSig3dMax = cms.double(99999.9),
        fracPV = cms.double(0.65),
        distVal2dMax = cms.double(2.5),
        useTrackWeights = cms.bool(True),
        maxDeltaRToJetAxis = cms.double(0.5),
        v0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        ),
        distSig2dMin = cms.double(3.0),
        multiplicityMin = cms.uint32(1),
        massMax = cms.double(6.5),
        distSig2dMax = cms.double(99999.9),
        distVal3dMax = cms.double(99999.9),
        minimumTrackWeight = cms.double(0.5),
        distVal3dMin = cms.double(-99999.9),
        distVal2dMin = cms.double(0.01),
        distSig3dMin = cms.double(-99999.9)
    ),
    useExternalSV = cms.bool(False),
    minimumTrackWeight = cms.double(0.5),
    usePVError = cms.bool(True),
    trackSelection = cms.PSet(
        totalHitsMin = cms.uint32(8),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(2),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.2),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(99999.9),
        ptMin = cms.double(1.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    trackSort = cms.string('sip3dSig'),
    extSVCollection = cms.InputTag("secondaryVertices")
)


process.gk5GenJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(5),
    src = cms.InputTag("genParticlesForJets"),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(6.0),
    doRhoFastjet = cms.bool(False),
    srcPVs = cms.InputTag(""),
    inputEtMin = cms.double(0.0),
    doAreaFastjet = cms.bool(False),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.5),
    jetPtMin = cms.double(3.0),
    inputEMin = cms.double(0.0),
    jetType = cms.string('GenJet'),
    doPUOffsetCorr = cms.bool(False),
    radiusPU = cms.double(0.5),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    jetAlgorithm = cms.string('GeneralizedKt'),
    rParam = cms.double(0.5)
)


process.gk5GenJetsNoMuNoNu = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(5),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(6.0),
    maxBadHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('GenJet'),
    minSeed = cms.uint32(14327),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('GeneralizedKt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.5),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.5),
    maxProblematicHcalCells = cms.uint32(9999999),
    src = cms.InputTag("genParticlesForJetsNoMuNoNu"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.gk5GenJetsNoNu = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(5),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(6.0),
    maxBadHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('GenJet'),
    minSeed = cms.uint32(14327),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('GeneralizedKt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.5),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.5),
    maxProblematicHcalCells = cms.uint32(9999999),
    src = cms.InputTag("genParticlesForJetsNoNu"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.gk7GenJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(5),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(6.0),
    maxBadHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('GenJet'),
    minSeed = cms.uint32(14327),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('GeneralizedKt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.5),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.7),
    maxProblematicHcalCells = cms.uint32(9999999),
    src = cms.InputTag("genParticlesForJets"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.gk7GenJetsNoMuNoNu = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(5),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(6.0),
    maxBadHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('GenJet'),
    minSeed = cms.uint32(14327),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('GeneralizedKt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.5),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.7),
    maxProblematicHcalCells = cms.uint32(9999999),
    src = cms.InputTag("genParticlesForJetsNoMuNoNu"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.gk7GenJetsNoNu = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(5),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(6.0),
    maxBadHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('GenJet'),
    minSeed = cms.uint32(14327),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('GeneralizedKt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.5),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.7),
    maxProblematicHcalCells = cms.uint32(9999999),
    src = cms.InputTag("genParticlesForJetsNoNu"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.goodPatJetsCA15MassDropFilteredPFPacked = cms.EDProducer("BoostedJetMerger",
    subjetSrc = cms.InputTag("selectedPatJetsCA15MassDropFilteredSubjetsPF"),
    jetSrc = cms.InputTag("goodPatJetsCA15MassDropFilteredPF")
)


process.goodPatJetsCA8PrunedPFPacked = cms.EDProducer("BoostedJetMerger",
    subjetSrc = cms.InputTag("selectedPatJetsCA8PrunedSubjetsPF"),
    jetSrc = cms.InputTag("goodPatJetsCA8PrunedPF")
)


process.goodPatJetsCAHEPTopTagPFPacked = cms.EDProducer("BoostedJetMerger",
    subjetSrc = cms.InputTag("selectedPatJetsCAHEPTopTagSubjetsPF"),
    jetSrc = cms.InputTag("goodPatJetsCAHEPTopTagPF")
)


process.goodPatJetsCATopTagPFPacked = cms.EDProducer("BoostedJetMerger",
    subjetSrc = cms.InputTag("selectedPatJetsCATopTagSubjetsPF"),
    jetSrc = cms.InputTag("goodPatJetsCATopTagPF")
)


process.hiGenParticlesForJets = cms.EDProducer("InputGenJetsParticleSelector",
    src = cms.InputTag("hiGenParticles"),
    ignoreParticleIDs = cms.vuint32(1000022, 1000012, 1000014, 1000016, 2000012, 
        2000014, 2000016, 1000039, 5100039, 4000012, 
        4000014, 4000016, 9900012, 9900014, 9900016, 
        39),
    partonicFinalState = cms.bool(False),
    excludeResonances = cms.bool(True),
    excludeFromResonancePids = cms.vuint32(12, 13, 14, 16),
    tausAsJets = cms.bool(False)
)


process.hpsPFTauDiscriminationByDeadECALElectronRejection = cms.EDProducer("PFRecoTauDiscriminationAgainstElectronDeadECAL",
    minStatus = cms.uint32(12),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    dR = cms.double(0.08),
    PFTauProducer = cms.InputTag("hpsPFTauProducer")
)


process.hpsPFTauDiscriminationByDeadECALElectronRejectionPFlow = cms.EDProducer("PFRecoTauDiscriminationAgainstElectronDeadECAL",
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlow")
        )
    ),
    minStatus = cms.uint32(12),
    dR = cms.double(0.08),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlow")
)


process.hpsPFTauDiscriminationByDeadECALElectronRejectionPFlowLoose = cms.EDProducer("PFRecoTauDiscriminationAgainstElectronDeadECAL",
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlowLoose")
        )
    ),
    minStatus = cms.uint32(12),
    dR = cms.double(0.08),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlowLoose")
)


process.hpsPFTauDiscriminationByDecayModeFinding = cms.EDProducer("PFRecoTauDiscriminationByHPSSelection",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    minTauPt = cms.double(0.0),
    coneSizeFormula = cms.string('max(min(0.1, 2.8/pt()),0.05)'),
    decayModes = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        minMass = cms.double(-1000.0),
        maxMass = cms.string('1.'),
        nCharged = cms.uint32(1)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            assumeStripMass = cms.double(0.1349),
            minMass = cms.double(0.3),
            maxMass = cms.string('max(1.3, min(1.3*sqrt(pt/200.), 2.1))'),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            minPi0Mass = cms.double(0.05),
            maxMass = cms.string('max(1.2, min(1.2*sqrt(pt/200.), 2.0))'),
            maxPi0Mass = cms.double(0.2),
            nPiZeros = cms.uint32(2),
            minMass = cms.double(0.4),
            nCharged = cms.uint32(1),
            assumeStripMass = cms.double(0.0)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            minMass = cms.double(0.8),
            maxMass = cms.string('1.5'),
            nCharged = cms.uint32(3)
        )),
    matchingCone = cms.double(0.1)
)


process.hpsPFTauDiscriminationByDecayModeFindingPFlow = cms.EDProducer("PFRecoTauDiscriminationByHPSSelection",
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlow"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    minTauPt = cms.double(0.0),
    coneSizeFormula = cms.string('max(min(0.1, 2.8/pt()),0.05)'),
    matchingCone = cms.double(0.1),
    decayModes = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        minMass = cms.double(-1000.0),
        maxMass = cms.string('1.'),
        nCharged = cms.uint32(1)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            assumeStripMass = cms.double(0.1349),
            minMass = cms.double(0.3),
            maxMass = cms.string('max(1.3, min(1.3*sqrt(pt/200.), 2.1))'),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            minPi0Mass = cms.double(0.05),
            maxMass = cms.string('max(1.2, min(1.2*sqrt(pt/200.), 2.0))'),
            maxPi0Mass = cms.double(0.2),
            nPiZeros = cms.uint32(2),
            minMass = cms.double(0.4),
            nCharged = cms.uint32(1),
            assumeStripMass = cms.double(0.0)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            minMass = cms.double(0.8),
            maxMass = cms.string('1.5'),
            nCharged = cms.uint32(3)
        ))
)


process.hpsPFTauDiscriminationByDecayModeFindingPFlowLoose = cms.EDProducer("PFRecoTauDiscriminationByHPSSelection",
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlowLoose"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    minTauPt = cms.double(0.0),
    coneSizeFormula = cms.string('max(min(0.1, 2.8/pt()),0.05)'),
    matchingCone = cms.double(0.1),
    decayModes = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        minMass = cms.double(-1000.0),
        maxMass = cms.string('1.'),
        nCharged = cms.uint32(1)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            assumeStripMass = cms.double(0.1349),
            minMass = cms.double(0.3),
            maxMass = cms.string('max(1.3, min(1.3*sqrt(pt/200.), 2.1))'),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            minPi0Mass = cms.double(0.05),
            maxMass = cms.string('max(1.2, min(1.2*sqrt(pt/200.), 2.0))'),
            maxPi0Mass = cms.double(0.2),
            nPiZeros = cms.uint32(2),
            minMass = cms.double(0.4),
            nCharged = cms.uint32(1),
            assumeStripMass = cms.double(0.0)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            minMass = cms.double(0.8),
            maxMass = cms.string('1.5'),
            nCharged = cms.uint32(3)
        ))
)


process.hpsPFTauDiscriminationByIsolationMVA2raw = cms.EDProducer("PFRecoTauDiscriminationByMVAIsolation",
    mvaMin = cms.double(0.863),
    gbrfFilePath = cms.FileInPath('RecoTauTag/RecoTau/data/gbrfTauIso_v2.root'),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    rhoProducer = cms.InputTag("kt6PFJetsForRhoComputationVoronoi","rho"),
    returnMVA = cms.bool(True),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    )
)


process.hpsPFTauDiscriminationByIsolationMVA2rawPFlow = cms.EDProducer("PFRecoTauDiscriminationByMVAIsolation",
    mvaMin = cms.double(0.863),
    gbrfFilePath = cms.FileInPath('RecoTauTag/RecoTau/data/gbrfTauIso_v2.root'),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlow"),
    rhoProducer = cms.InputTag("kt6PFJetsForRhoComputationVoronoiPFlow","rho"),
    returnMVA = cms.bool(True),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlow")
        )
    )
)


process.hpsPFTauDiscriminationByIsolationMVA2rawPFlowLoose = cms.EDProducer("PFRecoTauDiscriminationByMVAIsolation",
    mvaMin = cms.double(0.863),
    gbrfFilePath = cms.FileInPath('RecoTauTag/RecoTau/data/gbrfTauIso_v2.root'),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlowLoose"),
    rhoProducer = cms.InputTag("kt6PFJetsForRhoComputationVoronoiPFlowLoose","rho"),
    returnMVA = cms.bool(True),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlowLoose")
        )
    )
)


process.hpsPFTauDiscriminationByIsolationMVAraw = cms.EDProducer("PFRecoTauDiscriminationByMVAIsolation",
    mvaMin = cms.double(0.863),
    gbrfFilePath = cms.FileInPath('RecoTauTag/RecoTau/data/gbrfTauIso.root'),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    rhoProducer = cms.InputTag("kt6PFJetsForRhoComputationVoronoi","rho"),
    returnMVA = cms.bool(True),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    )
)


process.hpsPFTauDiscriminationByIsolationMVArawPFlow = cms.EDProducer("PFRecoTauDiscriminationByMVAIsolation",
    mvaMin = cms.double(0.863),
    gbrfFilePath = cms.FileInPath('RecoTauTag/RecoTau/data/gbrfTauIso.root'),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlow"),
    rhoProducer = cms.InputTag("kt6PFJetsForRhoComputationVoronoiPFlow","rho"),
    returnMVA = cms.bool(True),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlow")
        )
    )
)


process.hpsPFTauDiscriminationByIsolationMVArawPFlowLoose = cms.EDProducer("PFRecoTauDiscriminationByMVAIsolation",
    mvaMin = cms.double(0.863),
    gbrfFilePath = cms.FileInPath('RecoTauTag/RecoTau/data/gbrfTauIso.root'),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlowLoose"),
    rhoProducer = cms.InputTag("kt6PFJetsForRhoComputationVoronoiPFlowLoose","rho"),
    returnMVA = cms.bool(True),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlowLoose")
        )
    )
)


process.hpsPFTauDiscriminationByLooseChargedIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(False),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    applyDeltaBetaCorrection = cms.bool(True),
    deltaBetaFactor = cms.string('0.4576'),
    applyRhoCorrection = cms.bool(False),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    maximumSumPtCut = cms.double(2.0),
    relativeSumPtCut = cms.double(0.0),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    maximumOccupancy = cms.uint32(0),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByLooseChargedIsolationPFlow = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(False),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlow"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.4576'),
    applyRhoCorrection = cms.bool(False),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    rhoUEOffsetCorrection = cms.double(1.0),
    maximumSumPtCut = cms.double(2.0),
    relativeSumPtCut = cms.double(0.0),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlow")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    applyDeltaBetaCorrection = cms.bool(True),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByLooseChargedIsolationPFlowLoose = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(False),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlowLoose"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.4576'),
    applyRhoCorrection = cms.bool(False),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    rhoUEOffsetCorrection = cms.double(1.0),
    maximumSumPtCut = cms.double(2.0),
    relativeSumPtCut = cms.double(0.0),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlowLoose")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    applyDeltaBetaCorrection = cms.bool(True),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByLooseCombinedIsolationDBSumPtCorr = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.4576'),
    applyRhoCorrection = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    maximumSumPtCut = cms.double(2.0),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    applyDeltaBetaCorrection = cms.bool(True),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    relativeSumPtCut = cms.double(0.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    rhoUEOffsetCorrection = cms.double(1.0),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByLooseCombinedIsolationDBSumPtCorr3Hits = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    applyDeltaBetaCorrection = cms.bool(True),
    deltaBetaFactor = cms.string('0.4576'),
    applyRhoCorrection = cms.bool(False),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    maximumSumPtCut = cms.double(2.0),
    relativeSumPtCut = cms.double(0.0),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    maximumOccupancy = cms.uint32(0),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByLooseCombinedIsolationDBSumPtCorr3HitsPFlow = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlow"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.4576'),
    applyRhoCorrection = cms.bool(False),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    rhoUEOffsetCorrection = cms.double(1.0),
    maximumSumPtCut = cms.double(2.0),
    relativeSumPtCut = cms.double(0.0),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlow")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    applyDeltaBetaCorrection = cms.bool(True),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByLooseCombinedIsolationDBSumPtCorr3HitsPFlowLoose = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlowLoose"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.4576'),
    applyRhoCorrection = cms.bool(False),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    rhoUEOffsetCorrection = cms.double(1.0),
    maximumSumPtCut = cms.double(2.0),
    relativeSumPtCut = cms.double(0.0),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlowLoose")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    applyDeltaBetaCorrection = cms.bool(True),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByLooseCombinedIsolationDBSumPtCorrPFlow = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlow"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    applyDeltaBetaCorrection = cms.bool(True),
    deltaBetaFactor = cms.string('0.4576'),
    applyRhoCorrection = cms.bool(False),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    maximumSumPtCut = cms.double(2.0),
    relativeSumPtCut = cms.double(0.0),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlow")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    maximumOccupancy = cms.uint32(0),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByLooseCombinedIsolationDBSumPtCorrPFlowLoose = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlowLoose"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    applyDeltaBetaCorrection = cms.bool(True),
    deltaBetaFactor = cms.string('0.4576'),
    applyRhoCorrection = cms.bool(False),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    maximumSumPtCut = cms.double(2.0),
    relativeSumPtCut = cms.double(0.0),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlowLoose")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    maximumOccupancy = cms.uint32(0),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByLooseElectronRejection = cms.EDProducer("PFRecoTauDiscriminationAgainstElectron",
    ApplyCut_ElectronPreID_2D = cms.bool(False),
    ElecPreID0_HOverPLead_minValue = cms.double(0.05),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    ApplyCut_ElectronPreID = cms.bool(False),
    ApplyCut_HcalTotOverPLead = cms.bool(False),
    EOverPLead_minValue = cms.double(0.8),
    ElecPreID1_EOverPLead_maxValue = cms.double(0.8),
    HcalMaxOverPLead_minValue = cms.double(0.1),
    BremCombined_HOP = cms.double(0.1),
    ApplyCut_EmFraction = cms.bool(False),
    EmFraction_maxValue = cms.double(0.9),
    BremCombined_Mass = cms.double(0.55),
    ApplyCut_PFElectronMVA = cms.bool(True),
    PFElectronMVA_maxValue = cms.double(0.6),
    ApplyCut_HcalMaxOverPLead = cms.bool(False),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    ApplyCut_BremCombined = cms.bool(False),
    Hcal3x3OverPLead_minValue = cms.double(0.1),
    ElecPreID1_HOverPLead_minValue = cms.double(0.15),
    ElecPreID0_EOverPLead_maxValue = cms.double(0.95),
    BremsRecoveryEOverPLead_minValue = cms.double(0.8),
    ApplyCut_EcalCrackCut = cms.bool(False),
    BremCombined_StripSize = cms.double(0.03),
    EOverPLead_maxValue = cms.double(1.8),
    HcalTotOverPLead_minValue = cms.double(0.1),
    ApplyCut_BremsRecoveryEOverPLead = cms.bool(False),
    ApplyCut_Hcal3x3OverPLead = cms.bool(False),
    ApplyCut_EOverPLead = cms.bool(False),
    BremCombined_Fraction = cms.double(0.99),
    BremsRecoveryEOverPLead_maxValue = cms.double(1.8)
)


process.hpsPFTauDiscriminationByLooseElectronRejectionPFlow = cms.EDProducer("PFRecoTauDiscriminationAgainstElectron",
    ApplyCut_ElectronPreID_2D = cms.bool(False),
    ApplyCut_EOverPLead = cms.bool(False),
    ElecPreID0_HOverPLead_minValue = cms.double(0.05),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlow"),
    ApplyCut_ElectronPreID = cms.bool(False),
    ApplyCut_HcalTotOverPLead = cms.bool(False),
    EOverPLead_minValue = cms.double(0.8),
    ElecPreID1_EOverPLead_maxValue = cms.double(0.8),
    HcalMaxOverPLead_minValue = cms.double(0.1),
    ApplyCut_EmFraction = cms.bool(False),
    EmFraction_maxValue = cms.double(0.9),
    BremCombined_Mass = cms.double(0.55),
    ApplyCut_PFElectronMVA = cms.bool(True),
    PFElectronMVA_maxValue = cms.double(0.6),
    ApplyCut_HcalMaxOverPLead = cms.bool(False),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    ApplyCut_BremCombined = cms.bool(False),
    Hcal3x3OverPLead_minValue = cms.double(0.1),
    ElecPreID1_HOverPLead_minValue = cms.double(0.15),
    ElecPreID0_EOverPLead_maxValue = cms.double(0.95),
    BremsRecoveryEOverPLead_minValue = cms.double(0.8),
    ApplyCut_EcalCrackCut = cms.bool(False),
    BremCombined_StripSize = cms.double(0.03),
    EOverPLead_maxValue = cms.double(1.8),
    HcalTotOverPLead_minValue = cms.double(0.1),
    ApplyCut_BremsRecoveryEOverPLead = cms.bool(False),
    ApplyCut_Hcal3x3OverPLead = cms.bool(False),
    BremCombined_HOP = cms.double(0.1),
    BremCombined_Fraction = cms.double(0.99),
    BremsRecoveryEOverPLead_maxValue = cms.double(1.8)
)


process.hpsPFTauDiscriminationByLooseElectronRejectionPFlowLoose = cms.EDProducer("PFRecoTauDiscriminationAgainstElectron",
    ApplyCut_ElectronPreID_2D = cms.bool(False),
    ApplyCut_EOverPLead = cms.bool(False),
    ElecPreID0_HOverPLead_minValue = cms.double(0.05),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlowLoose"),
    ApplyCut_ElectronPreID = cms.bool(False),
    ApplyCut_HcalTotOverPLead = cms.bool(False),
    EOverPLead_minValue = cms.double(0.8),
    ElecPreID1_EOverPLead_maxValue = cms.double(0.8),
    HcalMaxOverPLead_minValue = cms.double(0.1),
    ApplyCut_EmFraction = cms.bool(False),
    EmFraction_maxValue = cms.double(0.9),
    BremCombined_Mass = cms.double(0.55),
    ApplyCut_PFElectronMVA = cms.bool(True),
    PFElectronMVA_maxValue = cms.double(0.6),
    ApplyCut_HcalMaxOverPLead = cms.bool(False),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    ApplyCut_BremCombined = cms.bool(False),
    Hcal3x3OverPLead_minValue = cms.double(0.1),
    ElecPreID1_HOverPLead_minValue = cms.double(0.15),
    ElecPreID0_EOverPLead_maxValue = cms.double(0.95),
    BremsRecoveryEOverPLead_minValue = cms.double(0.8),
    ApplyCut_EcalCrackCut = cms.bool(False),
    BremCombined_StripSize = cms.double(0.03),
    EOverPLead_maxValue = cms.double(1.8),
    HcalTotOverPLead_minValue = cms.double(0.1),
    ApplyCut_BremsRecoveryEOverPLead = cms.bool(False),
    ApplyCut_Hcal3x3OverPLead = cms.bool(False),
    BremCombined_HOP = cms.double(0.1),
    BremCombined_Fraction = cms.double(0.99),
    BremsRecoveryEOverPLead_maxValue = cms.double(1.8)
)


process.hpsPFTauDiscriminationByLooseIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    applyDeltaBetaCorrection = cms.bool(False),
    deltaBetaFactor = cms.string('0.38'),
    applyRhoCorrection = cms.bool(False),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    isoConeSizeForDeltaBeta = cms.double(0.5),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        ),
        preIso = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByLooseChargedIsolation")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByLooseIsolationDBSumPtCorr = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.0729'),
    applyRhoCorrection = cms.bool(False),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    rhoUEOffsetCorrection = cms.double(1.0),
    maximumSumPtCut = cms.double(1.5),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        ),
        preIso = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByLooseChargedIsolation")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    applyDeltaBetaCorrection = cms.bool(True),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    rhoConeSize = cms.double(0.5),
    relativeSumPtCut = cms.double(0.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByLooseIsolationDBSumPtCorrPFlow = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlow"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.0729'),
    applyRhoCorrection = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    maximumSumPtCut = cms.double(1.5),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlow")
        ),
        preIso = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByLooseChargedIsolationPFlow")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    applyDeltaBetaCorrection = cms.bool(True),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    rhoConeSize = cms.double(0.5),
    relativeSumPtCut = cms.double(0.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    rhoUEOffsetCorrection = cms.double(1.0),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByLooseIsolationDBSumPtCorrPFlowLoose = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlowLoose"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.0729'),
    applyRhoCorrection = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    maximumSumPtCut = cms.double(1.5),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlowLoose")
        ),
        preIso = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByLooseChargedIsolationPFlowLoose")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    applyDeltaBetaCorrection = cms.bool(True),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    rhoConeSize = cms.double(0.5),
    relativeSumPtCut = cms.double(0.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    rhoUEOffsetCorrection = cms.double(1.0),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByLooseIsolationMVA = cms.EDProducer("PFRecoTauDiscriminationByHPSSelection",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        mva = cms.PSet(
            cut = cms.double(0.795),
            Producer = cms.InputTag("hpsPFTauDiscriminationByIsolationMVAraw")
        ),
        BooleanOperator = cms.string('and')
    ),
    minTauPt = cms.double(0.0),
    coneSizeFormula = cms.string('max(min(0.1, 2.8/pt()),0.05)'),
    matchingCone = cms.double(0.1),
    decayModes = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        minMass = cms.double(-1000.0),
        maxMass = cms.string('1.'),
        nCharged = cms.uint32(1)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            assumeStripMass = cms.double(0.1349),
            minMass = cms.double(0.3),
            maxMass = cms.string('max(1.3, min(1.3*sqrt(pt/200.), 2.1))'),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            minPi0Mass = cms.double(0.05),
            maxMass = cms.string('max(1.2, min(1.2*sqrt(pt/200.), 2.0))'),
            maxPi0Mass = cms.double(0.2),
            nPiZeros = cms.uint32(2),
            minMass = cms.double(0.4),
            nCharged = cms.uint32(1),
            assumeStripMass = cms.double(0.0)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            minMass = cms.double(0.8),
            maxMass = cms.string('1.5'),
            nCharged = cms.uint32(3)
        ))
)


process.hpsPFTauDiscriminationByLooseIsolationMVA2 = cms.EDProducer("PFRecoTauDiscriminationByHPSSelection",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        mva = cms.PSet(
            cut = cms.double(0.85),
            Producer = cms.InputTag("hpsPFTauDiscriminationByIsolationMVA2raw")
        ),
        BooleanOperator = cms.string('and')
    ),
    minTauPt = cms.double(0.0),
    coneSizeFormula = cms.string('max(min(0.1, 2.8/pt()),0.05)'),
    matchingCone = cms.double(0.1),
    decayModes = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        minMass = cms.double(-1000.0),
        maxMass = cms.string('1.'),
        nCharged = cms.uint32(1)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            assumeStripMass = cms.double(0.1349),
            minMass = cms.double(0.3),
            maxMass = cms.string('max(1.3, min(1.3*sqrt(pt/200.), 2.1))'),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            minPi0Mass = cms.double(0.05),
            maxMass = cms.string('max(1.2, min(1.2*sqrt(pt/200.), 2.0))'),
            maxPi0Mass = cms.double(0.2),
            nPiZeros = cms.uint32(2),
            minMass = cms.double(0.4),
            nCharged = cms.uint32(1),
            assumeStripMass = cms.double(0.0)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            minMass = cms.double(0.8),
            maxMass = cms.string('1.5'),
            nCharged = cms.uint32(3)
        ))
)


process.hpsPFTauDiscriminationByLooseIsolationMVA2PFlow = cms.EDProducer("PFRecoTauDiscriminationByHPSSelection",
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlow"),
    Prediscriminants = cms.PSet(
        mva = cms.PSet(
            cut = cms.double(0.85),
            Producer = cms.InputTag("hpsPFTauDiscriminationByIsolationMVA2rawPFlow")
        ),
        BooleanOperator = cms.string('and')
    ),
    minTauPt = cms.double(0.0),
    coneSizeFormula = cms.string('max(min(0.1, 2.8/pt()),0.05)'),
    decayModes = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        minMass = cms.double(-1000.0),
        maxMass = cms.string('1.'),
        nCharged = cms.uint32(1)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            assumeStripMass = cms.double(0.1349),
            minMass = cms.double(0.3),
            maxMass = cms.string('max(1.3, min(1.3*sqrt(pt/200.), 2.1))'),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            minPi0Mass = cms.double(0.05),
            maxMass = cms.string('max(1.2, min(1.2*sqrt(pt/200.), 2.0))'),
            maxPi0Mass = cms.double(0.2),
            nPiZeros = cms.uint32(2),
            minMass = cms.double(0.4),
            nCharged = cms.uint32(1),
            assumeStripMass = cms.double(0.0)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            minMass = cms.double(0.8),
            maxMass = cms.string('1.5'),
            nCharged = cms.uint32(3)
        )),
    matchingCone = cms.double(0.1)
)


process.hpsPFTauDiscriminationByLooseIsolationMVA2PFlowLoose = cms.EDProducer("PFRecoTauDiscriminationByHPSSelection",
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlowLoose"),
    Prediscriminants = cms.PSet(
        mva = cms.PSet(
            cut = cms.double(0.85),
            Producer = cms.InputTag("hpsPFTauDiscriminationByIsolationMVA2rawPFlowLoose")
        ),
        BooleanOperator = cms.string('and')
    ),
    minTauPt = cms.double(0.0),
    coneSizeFormula = cms.string('max(min(0.1, 2.8/pt()),0.05)'),
    decayModes = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        minMass = cms.double(-1000.0),
        maxMass = cms.string('1.'),
        nCharged = cms.uint32(1)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            assumeStripMass = cms.double(0.1349),
            minMass = cms.double(0.3),
            maxMass = cms.string('max(1.3, min(1.3*sqrt(pt/200.), 2.1))'),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            minPi0Mass = cms.double(0.05),
            maxMass = cms.string('max(1.2, min(1.2*sqrt(pt/200.), 2.0))'),
            maxPi0Mass = cms.double(0.2),
            nPiZeros = cms.uint32(2),
            minMass = cms.double(0.4),
            nCharged = cms.uint32(1),
            assumeStripMass = cms.double(0.0)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            minMass = cms.double(0.8),
            maxMass = cms.string('1.5'),
            nCharged = cms.uint32(3)
        )),
    matchingCone = cms.double(0.1)
)


process.hpsPFTauDiscriminationByLooseIsolationMVAPFlow = cms.EDProducer("PFRecoTauDiscriminationByHPSSelection",
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlow"),
    Prediscriminants = cms.PSet(
        mva = cms.PSet(
            cut = cms.double(0.795),
            Producer = cms.InputTag("hpsPFTauDiscriminationByIsolationMVArawPFlow")
        ),
        BooleanOperator = cms.string('and')
    ),
    minTauPt = cms.double(0.0),
    coneSizeFormula = cms.string('max(min(0.1, 2.8/pt()),0.05)'),
    decayModes = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        minMass = cms.double(-1000.0),
        maxMass = cms.string('1.'),
        nCharged = cms.uint32(1)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            assumeStripMass = cms.double(0.1349),
            minMass = cms.double(0.3),
            maxMass = cms.string('max(1.3, min(1.3*sqrt(pt/200.), 2.1))'),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            minPi0Mass = cms.double(0.05),
            maxMass = cms.string('max(1.2, min(1.2*sqrt(pt/200.), 2.0))'),
            maxPi0Mass = cms.double(0.2),
            nPiZeros = cms.uint32(2),
            minMass = cms.double(0.4),
            nCharged = cms.uint32(1),
            assumeStripMass = cms.double(0.0)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            minMass = cms.double(0.8),
            maxMass = cms.string('1.5'),
            nCharged = cms.uint32(3)
        )),
    matchingCone = cms.double(0.1)
)


process.hpsPFTauDiscriminationByLooseIsolationMVAPFlowLoose = cms.EDProducer("PFRecoTauDiscriminationByHPSSelection",
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlowLoose"),
    Prediscriminants = cms.PSet(
        mva = cms.PSet(
            cut = cms.double(0.795),
            Producer = cms.InputTag("hpsPFTauDiscriminationByIsolationMVArawPFlowLoose")
        ),
        BooleanOperator = cms.string('and')
    ),
    minTauPt = cms.double(0.0),
    coneSizeFormula = cms.string('max(min(0.1, 2.8/pt()),0.05)'),
    decayModes = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        minMass = cms.double(-1000.0),
        maxMass = cms.string('1.'),
        nCharged = cms.uint32(1)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            assumeStripMass = cms.double(0.1349),
            minMass = cms.double(0.3),
            maxMass = cms.string('max(1.3, min(1.3*sqrt(pt/200.), 2.1))'),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            minPi0Mass = cms.double(0.05),
            maxMass = cms.string('max(1.2, min(1.2*sqrt(pt/200.), 2.0))'),
            maxPi0Mass = cms.double(0.2),
            nPiZeros = cms.uint32(2),
            minMass = cms.double(0.4),
            nCharged = cms.uint32(1),
            assumeStripMass = cms.double(0.0)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            minMass = cms.double(0.8),
            maxMass = cms.string('1.5'),
            nCharged = cms.uint32(3)
        )),
    matchingCone = cms.double(0.1)
)


process.hpsPFTauDiscriminationByLooseIsolationPFlow = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlow"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.38'),
    applyRhoCorrection = cms.bool(False),
    isoConeSizeForDeltaBeta = cms.double(0.5),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlow")
        ),
        preIso = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByLooseChargedIsolationPFlow")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByLooseIsolationPFlowLoose = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlowLoose"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.38'),
    applyRhoCorrection = cms.bool(False),
    isoConeSizeForDeltaBeta = cms.double(0.5),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlowLoose")
        ),
        preIso = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByLooseChargedIsolationPFlowLoose")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByLooseMuonRejection = cms.EDProducer("PFRecoTauDiscriminationAgainstMuon",
    a = cms.double(0.5),
    c = cms.double(0.0),
    b = cms.double(0.5),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    discriminatorOption = cms.string('noSegMatch'),
    HoPMin = cms.double(0.2),
    maxNumberOfMatches = cms.int32(0),
    checkNumMatches = cms.bool(False)
)


process.hpsPFTauDiscriminationByLooseMuonRejection2 = cms.EDProducer("PFRecoTauDiscriminationAgainstMuon2",
    maxNumberOfHitsLast2Stations = cms.int32(0),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    verbosity = cms.int32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    discriminatorOption = cms.string('loose'),
    HoPMin = cms.double(0.2),
    maxNumberOfMatches = cms.int32(0),
    dRmuonMatch = cms.double(0.3),
    srcMuons = cms.InputTag("muons"),
    doCaloMuonVeto = cms.bool(False)
)


process.hpsPFTauDiscriminationByLooseMuonRejection2PFlow = cms.EDProducer("PFRecoTauDiscriminationAgainstMuon2",
    maxNumberOfHitsLast2Stations = cms.int32(0),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlow"),
    verbosity = cms.int32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    discriminatorOption = cms.string('loose'),
    HoPMin = cms.double(0.2),
    maxNumberOfMatches = cms.int32(0),
    dRmuonMatch = cms.double(0.3),
    srcMuons = cms.InputTag("muons"),
    doCaloMuonVeto = cms.bool(False)
)


process.hpsPFTauDiscriminationByLooseMuonRejection2PFlowLoose = cms.EDProducer("PFRecoTauDiscriminationAgainstMuon2",
    maxNumberOfHitsLast2Stations = cms.int32(0),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlowLoose"),
    verbosity = cms.int32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    discriminatorOption = cms.string('loose'),
    HoPMin = cms.double(0.2),
    maxNumberOfMatches = cms.int32(0),
    dRmuonMatch = cms.double(0.3),
    srcMuons = cms.InputTag("muons"),
    doCaloMuonVeto = cms.bool(False)
)


process.hpsPFTauDiscriminationByLooseMuonRejection3 = cms.EDProducer("PFRecoTauDiscriminationAgainstMuon2",
    maxNumberOfHitsLast2Stations = cms.int32(-1),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    verbosity = cms.int32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    discriminatorOption = cms.string('custom'),
    HoPMin = cms.double(0.2),
    maxNumberOfMatches = cms.int32(1),
    dRmuonMatch = cms.double(0.3),
    srcMuons = cms.InputTag("muons"),
    doCaloMuonVeto = cms.bool(True)
)


process.hpsPFTauDiscriminationByLooseMuonRejection3PFlow = cms.EDProducer("PFRecoTauDiscriminationAgainstMuon2",
    maxNumberOfHitsLast2Stations = cms.int32(-1),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlow"),
    verbosity = cms.int32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    discriminatorOption = cms.string('custom'),
    HoPMin = cms.double(0.2),
    maxNumberOfMatches = cms.int32(1),
    dRmuonMatch = cms.double(0.3),
    srcMuons = cms.InputTag("muons"),
    doCaloMuonVeto = cms.bool(True)
)


process.hpsPFTauDiscriminationByLooseMuonRejection3PFlowLoose = cms.EDProducer("PFRecoTauDiscriminationAgainstMuon2",
    maxNumberOfHitsLast2Stations = cms.int32(-1),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlowLoose"),
    verbosity = cms.int32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    discriminatorOption = cms.string('custom'),
    HoPMin = cms.double(0.2),
    maxNumberOfMatches = cms.int32(1),
    dRmuonMatch = cms.double(0.3),
    srcMuons = cms.InputTag("muons"),
    doCaloMuonVeto = cms.bool(True)
)


process.hpsPFTauDiscriminationByLooseMuonRejectionPFlow = cms.EDProducer("PFRecoTauDiscriminationAgainstMuon",
    a = cms.double(0.5),
    c = cms.double(0.0),
    b = cms.double(0.5),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlow"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    discriminatorOption = cms.string('noSegMatch'),
    HoPMin = cms.double(0.2),
    maxNumberOfMatches = cms.int32(0),
    checkNumMatches = cms.bool(False)
)


process.hpsPFTauDiscriminationByLooseMuonRejectionPFlowLoose = cms.EDProducer("PFRecoTauDiscriminationAgainstMuon",
    a = cms.double(0.5),
    c = cms.double(0.0),
    b = cms.double(0.5),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlowLoose"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    discriminatorOption = cms.string('noSegMatch'),
    HoPMin = cms.double(0.2),
    maxNumberOfMatches = cms.int32(0),
    checkNumMatches = cms.bool(False)
)


process.hpsPFTauDiscriminationByMVA2LooseElectronRejection = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    key = cms.InputTag("hpsPFTauDiscriminationByMVA2rawElectronRejection","category"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.double(-0.0639254)
    ), 
        cms.PSet(
            category = cms.uint32(1),
            cut = cms.double(-0.0220708)
        ), 
        cms.PSet(
            category = cms.uint32(2),
            cut = cms.double(-0.102071)
        ), 
        cms.PSet(
            category = cms.uint32(3),
            cut = cms.double(-0.0233814)
        ), 
        cms.PSet(
            category = cms.uint32(4),
            cut = cms.double(-0.0391565)
        ), 
        cms.PSet(
            category = cms.uint32(5),
            cut = cms.double(-0.142564)
        ), 
        cms.PSet(
            category = cms.uint32(6),
            cut = cms.double(0.00982555)
        ), 
        cms.PSet(
            category = cms.uint32(7),
            cut = cms.double(-0.0596019)
        ), 
        cms.PSet(
            category = cms.uint32(8),
            cut = cms.double(-0.0381238)
        ), 
        cms.PSet(
            category = cms.uint32(9),
            cut = cms.double(-0.100381)
        )),
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByMVA2rawElectronRejection"),
    PFTauProducer = cms.InputTag("hpsPFTauProducer")
)


process.hpsPFTauDiscriminationByMVA2LooseElectronRejectionPFlow = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByMVA2rawElectronRejectionPFlow"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlow")
        )
    ),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.double(-0.0639254)
    ), 
        cms.PSet(
            category = cms.uint32(1),
            cut = cms.double(-0.0220708)
        ), 
        cms.PSet(
            category = cms.uint32(2),
            cut = cms.double(-0.102071)
        ), 
        cms.PSet(
            category = cms.uint32(3),
            cut = cms.double(-0.0233814)
        ), 
        cms.PSet(
            category = cms.uint32(4),
            cut = cms.double(-0.0391565)
        ), 
        cms.PSet(
            category = cms.uint32(5),
            cut = cms.double(-0.142564)
        ), 
        cms.PSet(
            category = cms.uint32(6),
            cut = cms.double(0.00982555)
        ), 
        cms.PSet(
            category = cms.uint32(7),
            cut = cms.double(-0.0596019)
        ), 
        cms.PSet(
            category = cms.uint32(8),
            cut = cms.double(-0.0381238)
        ), 
        cms.PSet(
            category = cms.uint32(9),
            cut = cms.double(-0.100381)
        )),
    key = cms.InputTag("hpsPFTauDiscriminationByMVA2rawElectronRejectionPFlow","category"),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlow")
)


process.hpsPFTauDiscriminationByMVA2LooseElectronRejectionPFlowLoose = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByMVA2rawElectronRejectionPFlowLoose"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlowLoose")
        )
    ),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.double(-0.0639254)
    ), 
        cms.PSet(
            category = cms.uint32(1),
            cut = cms.double(-0.0220708)
        ), 
        cms.PSet(
            category = cms.uint32(2),
            cut = cms.double(-0.102071)
        ), 
        cms.PSet(
            category = cms.uint32(3),
            cut = cms.double(-0.0233814)
        ), 
        cms.PSet(
            category = cms.uint32(4),
            cut = cms.double(-0.0391565)
        ), 
        cms.PSet(
            category = cms.uint32(5),
            cut = cms.double(-0.142564)
        ), 
        cms.PSet(
            category = cms.uint32(6),
            cut = cms.double(0.00982555)
        ), 
        cms.PSet(
            category = cms.uint32(7),
            cut = cms.double(-0.0596019)
        ), 
        cms.PSet(
            category = cms.uint32(8),
            cut = cms.double(-0.0381238)
        ), 
        cms.PSet(
            category = cms.uint32(9),
            cut = cms.double(-0.100381)
        )),
    key = cms.InputTag("hpsPFTauDiscriminationByMVA2rawElectronRejectionPFlowLoose","category"),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlowLoose")
)


process.hpsPFTauDiscriminationByMVA2MediumElectronRejection = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    key = cms.InputTag("hpsPFTauDiscriminationByMVA2rawElectronRejection","category"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.double(0.011729)
    ), 
        cms.PSet(
            category = cms.uint32(1),
            cut = cms.double(0.0203646)
        ), 
        cms.PSet(
            category = cms.uint32(2),
            cut = cms.double(0.177502)
        ), 
        cms.PSet(
            category = cms.uint32(3),
            cut = cms.double(0.0103449)
        ), 
        cms.PSet(
            category = cms.uint32(4),
            cut = cms.double(0.257798)
        ), 
        cms.PSet(
            category = cms.uint32(5),
            cut = cms.double(-0.0966083)
        ), 
        cms.PSet(
            category = cms.uint32(6),
            cut = cms.double(-0.0466023)
        ), 
        cms.PSet(
            category = cms.uint32(7),
            cut = cms.double(0.0467638)
        ), 
        cms.PSet(
            category = cms.uint32(8),
            cut = cms.double(0.0863876)
        ), 
        cms.PSet(
            category = cms.uint32(9),
            cut = cms.double(0.233436)
        )),
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByMVA2rawElectronRejection"),
    PFTauProducer = cms.InputTag("hpsPFTauProducer")
)


process.hpsPFTauDiscriminationByMVA2MediumElectronRejectionPFlow = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByMVA2rawElectronRejectionPFlow"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlow")
        )
    ),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.double(0.011729)
    ), 
        cms.PSet(
            category = cms.uint32(1),
            cut = cms.double(0.0203646)
        ), 
        cms.PSet(
            category = cms.uint32(2),
            cut = cms.double(0.177502)
        ), 
        cms.PSet(
            category = cms.uint32(3),
            cut = cms.double(0.0103449)
        ), 
        cms.PSet(
            category = cms.uint32(4),
            cut = cms.double(0.257798)
        ), 
        cms.PSet(
            category = cms.uint32(5),
            cut = cms.double(-0.0966083)
        ), 
        cms.PSet(
            category = cms.uint32(6),
            cut = cms.double(-0.0466023)
        ), 
        cms.PSet(
            category = cms.uint32(7),
            cut = cms.double(0.0467638)
        ), 
        cms.PSet(
            category = cms.uint32(8),
            cut = cms.double(0.0863876)
        ), 
        cms.PSet(
            category = cms.uint32(9),
            cut = cms.double(0.233436)
        )),
    key = cms.InputTag("hpsPFTauDiscriminationByMVA2rawElectronRejectionPFlow","category"),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlow")
)


process.hpsPFTauDiscriminationByMVA2MediumElectronRejectionPFlowLoose = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByMVA2rawElectronRejectionPFlowLoose"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlowLoose")
        )
    ),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.double(0.011729)
    ), 
        cms.PSet(
            category = cms.uint32(1),
            cut = cms.double(0.0203646)
        ), 
        cms.PSet(
            category = cms.uint32(2),
            cut = cms.double(0.177502)
        ), 
        cms.PSet(
            category = cms.uint32(3),
            cut = cms.double(0.0103449)
        ), 
        cms.PSet(
            category = cms.uint32(4),
            cut = cms.double(0.257798)
        ), 
        cms.PSet(
            category = cms.uint32(5),
            cut = cms.double(-0.0966083)
        ), 
        cms.PSet(
            category = cms.uint32(6),
            cut = cms.double(-0.0466023)
        ), 
        cms.PSet(
            category = cms.uint32(7),
            cut = cms.double(0.0467638)
        ), 
        cms.PSet(
            category = cms.uint32(8),
            cut = cms.double(0.0863876)
        ), 
        cms.PSet(
            category = cms.uint32(9),
            cut = cms.double(0.233436)
        )),
    key = cms.InputTag("hpsPFTauDiscriminationByMVA2rawElectronRejectionPFlowLoose","category"),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlowLoose")
)


process.hpsPFTauDiscriminationByMVA2TightElectronRejection = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    key = cms.InputTag("hpsPFTauDiscriminationByMVA2rawElectronRejection","category"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.double(0.0306715)
    ), 
        cms.PSet(
            category = cms.uint32(1),
            cut = cms.double(0.992195)
        ), 
        cms.PSet(
            category = cms.uint32(2),
            cut = cms.double(0.308324)
        ), 
        cms.PSet(
            category = cms.uint32(3),
            cut = cms.double(-0.0370998)
        ), 
        cms.PSet(
            category = cms.uint32(4),
            cut = cms.double(0.864643)
        ), 
        cms.PSet(
            category = cms.uint32(5),
            cut = cms.double(0.0832094)
        ), 
        cms.PSet(
            category = cms.uint32(6),
            cut = cms.double(0.791665)
        ), 
        cms.PSet(
            category = cms.uint32(7),
            cut = cms.double(0.675537)
        ), 
        cms.PSet(
            category = cms.uint32(8),
            cut = cms.double(0.87047)
        ), 
        cms.PSet(
            category = cms.uint32(9),
            cut = cms.double(0.233711)
        )),
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByMVA2rawElectronRejection"),
    PFTauProducer = cms.InputTag("hpsPFTauProducer")
)


process.hpsPFTauDiscriminationByMVA2TightElectronRejectionPFlow = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByMVA2rawElectronRejectionPFlow"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlow")
        )
    ),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.double(0.0306715)
    ), 
        cms.PSet(
            category = cms.uint32(1),
            cut = cms.double(0.992195)
        ), 
        cms.PSet(
            category = cms.uint32(2),
            cut = cms.double(0.308324)
        ), 
        cms.PSet(
            category = cms.uint32(3),
            cut = cms.double(-0.0370998)
        ), 
        cms.PSet(
            category = cms.uint32(4),
            cut = cms.double(0.864643)
        ), 
        cms.PSet(
            category = cms.uint32(5),
            cut = cms.double(0.0832094)
        ), 
        cms.PSet(
            category = cms.uint32(6),
            cut = cms.double(0.791665)
        ), 
        cms.PSet(
            category = cms.uint32(7),
            cut = cms.double(0.675537)
        ), 
        cms.PSet(
            category = cms.uint32(8),
            cut = cms.double(0.87047)
        ), 
        cms.PSet(
            category = cms.uint32(9),
            cut = cms.double(0.233711)
        )),
    key = cms.InputTag("hpsPFTauDiscriminationByMVA2rawElectronRejectionPFlow","category"),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlow")
)


process.hpsPFTauDiscriminationByMVA2TightElectronRejectionPFlowLoose = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByMVA2rawElectronRejectionPFlowLoose"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlowLoose")
        )
    ),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.double(0.0306715)
    ), 
        cms.PSet(
            category = cms.uint32(1),
            cut = cms.double(0.992195)
        ), 
        cms.PSet(
            category = cms.uint32(2),
            cut = cms.double(0.308324)
        ), 
        cms.PSet(
            category = cms.uint32(3),
            cut = cms.double(-0.0370998)
        ), 
        cms.PSet(
            category = cms.uint32(4),
            cut = cms.double(0.864643)
        ), 
        cms.PSet(
            category = cms.uint32(5),
            cut = cms.double(0.0832094)
        ), 
        cms.PSet(
            category = cms.uint32(6),
            cut = cms.double(0.791665)
        ), 
        cms.PSet(
            category = cms.uint32(7),
            cut = cms.double(0.675537)
        ), 
        cms.PSet(
            category = cms.uint32(8),
            cut = cms.double(0.87047)
        ), 
        cms.PSet(
            category = cms.uint32(9),
            cut = cms.double(0.233711)
        )),
    key = cms.InputTag("hpsPFTauDiscriminationByMVA2rawElectronRejectionPFlowLoose","category"),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlowLoose")
)


process.hpsPFTauDiscriminationByMVA2VLooseElectronRejection = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    key = cms.InputTag("hpsPFTauDiscriminationByMVA2rawElectronRejection","category"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.double(-0.141383)
    ), 
        cms.PSet(
            category = cms.uint32(1),
            cut = cms.double(-0.122568)
        ), 
        cms.PSet(
            category = cms.uint32(2),
            cut = cms.double(-0.138286)
        ), 
        cms.PSet(
            category = cms.uint32(3),
            cut = cms.double(-0.100279)
        ), 
        cms.PSet(
            category = cms.uint32(4),
            cut = cms.double(-0.116113)
        ), 
        cms.PSet(
            category = cms.uint32(5),
            cut = cms.double(-0.191557)
        ), 
        cms.PSet(
            category = cms.uint32(6),
            cut = cms.double(-0.0921955)
        ), 
        cms.PSet(
            category = cms.uint32(7),
            cut = cms.double(-0.0936173)
        ), 
        cms.PSet(
            category = cms.uint32(8),
            cut = cms.double(-0.119732)
        ), 
        cms.PSet(
            category = cms.uint32(9),
            cut = cms.double(-0.1042)
        )),
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByMVA2rawElectronRejection"),
    PFTauProducer = cms.InputTag("hpsPFTauProducer")
)


process.hpsPFTauDiscriminationByMVA2VLooseElectronRejectionPFlow = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByMVA2rawElectronRejectionPFlow"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlow")
        )
    ),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.double(-0.141383)
    ), 
        cms.PSet(
            category = cms.uint32(1),
            cut = cms.double(-0.122568)
        ), 
        cms.PSet(
            category = cms.uint32(2),
            cut = cms.double(-0.138286)
        ), 
        cms.PSet(
            category = cms.uint32(3),
            cut = cms.double(-0.100279)
        ), 
        cms.PSet(
            category = cms.uint32(4),
            cut = cms.double(-0.116113)
        ), 
        cms.PSet(
            category = cms.uint32(5),
            cut = cms.double(-0.191557)
        ), 
        cms.PSet(
            category = cms.uint32(6),
            cut = cms.double(-0.0921955)
        ), 
        cms.PSet(
            category = cms.uint32(7),
            cut = cms.double(-0.0936173)
        ), 
        cms.PSet(
            category = cms.uint32(8),
            cut = cms.double(-0.119732)
        ), 
        cms.PSet(
            category = cms.uint32(9),
            cut = cms.double(-0.1042)
        )),
    key = cms.InputTag("hpsPFTauDiscriminationByMVA2rawElectronRejectionPFlow","category"),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlow")
)


process.hpsPFTauDiscriminationByMVA2VLooseElectronRejectionPFlowLoose = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByMVA2rawElectronRejectionPFlowLoose"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlowLoose")
        )
    ),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.double(-0.141383)
    ), 
        cms.PSet(
            category = cms.uint32(1),
            cut = cms.double(-0.122568)
        ), 
        cms.PSet(
            category = cms.uint32(2),
            cut = cms.double(-0.138286)
        ), 
        cms.PSet(
            category = cms.uint32(3),
            cut = cms.double(-0.100279)
        ), 
        cms.PSet(
            category = cms.uint32(4),
            cut = cms.double(-0.116113)
        ), 
        cms.PSet(
            category = cms.uint32(5),
            cut = cms.double(-0.191557)
        ), 
        cms.PSet(
            category = cms.uint32(6),
            cut = cms.double(-0.0921955)
        ), 
        cms.PSet(
            category = cms.uint32(7),
            cut = cms.double(-0.0936173)
        ), 
        cms.PSet(
            category = cms.uint32(8),
            cut = cms.double(-0.119732)
        ), 
        cms.PSet(
            category = cms.uint32(9),
            cut = cms.double(-0.1042)
        )),
    key = cms.InputTag("hpsPFTauDiscriminationByMVA2rawElectronRejectionPFlowLoose","category"),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlowLoose")
)


process.hpsPFTauDiscriminationByMVA2rawElectronRejection = cms.EDProducer("PFRecoTauDiscriminationAgainstElectronMVA2",
    minMVA1prongStripsWgsfWOpfEleMvaBL = cms.double(0.0),
    minMVA1prongEC = cms.double(0.0),
    inputFileName1prongNoEleMatchEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_NoEleMatch_Endcap_BDTG.weights.xml.gz'),
    inputFileName1prongEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_woG_Endcap_BDTG.weights.xml.gz'),
    inputFileName1prongStripsWgsfWOpfEleMvaBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_wGwGSFwoPFMVA_Barrel_BDTG.weights.xml.gz'),
    minMVA1prongStripsWgsfWpfEleMvaEC = cms.double(0.0),
    minMVA1prongStripsWOgsfEC = cms.double(0.0),
    returnMVA = cms.bool(True),
    inputFileName1prongStripsWgsfWOpfEleMvaEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_wGwGSFwoPFMVA_Endcap_BDTG.weights.xml.gz'),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    minMVA1prongBL = cms.double(0.0),
    inputFileName1prongStripsWgsfWpfEleMvaEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_wGwGSFwPFMVA_Endcap_BDTG.weights.xml.gz'),
    method = cms.string('BDT'),
    inputFileName1prongBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_woG_Barrel_BDTG.weights.xml.gz'),
    inputFileName1prongStripsWgsfWpfEleMvaBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_wGwGSFwPFMVA_Barrel_BDTG.weights.xml.gz'),
    minMVA1prongStripsWgsfWpfEleMvaBL = cms.double(0.0),
    inputFileName1prongNoEleMatchBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_NoEleMatch_Barrel_BDTG.weights.xml.gz'),
    inputFileName1prongStripsWOgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_wGwoGSF_Endcap_BDTG.weights.xml.gz'),
    minMVA1prongNoEleMatchBL = cms.double(0.0),
    minMVA1prongStripsWOgsfBL = cms.double(0.0),
    minMVA1prongNoEleMatchEC = cms.double(0.0),
    inputFileName1prongStripsWOgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_wGwoGSF_Barrel_BDTG.weights.xml.gz'),
    srcGsfElectrons = cms.InputTag("gsfElectrons"),
    minMVA1prongStripsWgsfWOpfEleMvaEC = cms.double(0.0)
)


process.hpsPFTauDiscriminationByMVA2rawElectronRejectionPFlow = cms.EDProducer("PFRecoTauDiscriminationAgainstElectronMVA2",
    minMVA1prongStripsWgsfWOpfEleMvaBL = cms.double(0.0),
    minMVA1prongEC = cms.double(0.0),
    inputFileName1prongNoEleMatchEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_NoEleMatch_Endcap_BDTG.weights.xml.gz'),
    minMVA1prongStripsWgsfWOpfEleMvaEC = cms.double(0.0),
    inputFileName1prongStripsWgsfWOpfEleMvaBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_wGwGSFwoPFMVA_Barrel_BDTG.weights.xml.gz'),
    minMVA1prongStripsWgsfWpfEleMvaEC = cms.double(0.0),
    minMVA1prongStripsWOgsfEC = cms.double(0.0),
    returnMVA = cms.bool(True),
    inputFileName1prongStripsWgsfWOpfEleMvaEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_wGwGSFwoPFMVA_Endcap_BDTG.weights.xml.gz'),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlow")
        )
    ),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlow"),
    minMVA1prongBL = cms.double(0.0),
    inputFileName1prongStripsWgsfWpfEleMvaEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_wGwGSFwPFMVA_Endcap_BDTG.weights.xml.gz'),
    method = cms.string('BDT'),
    inputFileName1prongBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_woG_Barrel_BDTG.weights.xml.gz'),
    inputFileName1prongStripsWgsfWpfEleMvaBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_wGwGSFwPFMVA_Barrel_BDTG.weights.xml.gz'),
    minMVA1prongStripsWgsfWpfEleMvaBL = cms.double(0.0),
    inputFileName1prongNoEleMatchBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_NoEleMatch_Barrel_BDTG.weights.xml.gz'),
    inputFileName1prongStripsWOgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_wGwoGSF_Endcap_BDTG.weights.xml.gz'),
    minMVA1prongNoEleMatchBL = cms.double(0.0),
    minMVA1prongStripsWOgsfBL = cms.double(0.0),
    minMVA1prongNoEleMatchEC = cms.double(0.0),
    inputFileName1prongStripsWOgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_wGwoGSF_Barrel_BDTG.weights.xml.gz'),
    srcGsfElectrons = cms.InputTag("gsfElectrons"),
    inputFileName1prongEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_woG_Endcap_BDTG.weights.xml.gz')
)


process.hpsPFTauDiscriminationByMVA2rawElectronRejectionPFlowLoose = cms.EDProducer("PFRecoTauDiscriminationAgainstElectronMVA2",
    minMVA1prongStripsWgsfWOpfEleMvaBL = cms.double(0.0),
    minMVA1prongEC = cms.double(0.0),
    inputFileName1prongNoEleMatchEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_NoEleMatch_Endcap_BDTG.weights.xml.gz'),
    minMVA1prongStripsWgsfWOpfEleMvaEC = cms.double(0.0),
    inputFileName1prongStripsWgsfWOpfEleMvaBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_wGwGSFwoPFMVA_Barrel_BDTG.weights.xml.gz'),
    minMVA1prongStripsWgsfWpfEleMvaEC = cms.double(0.0),
    minMVA1prongStripsWOgsfEC = cms.double(0.0),
    returnMVA = cms.bool(True),
    inputFileName1prongStripsWgsfWOpfEleMvaEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_wGwGSFwoPFMVA_Endcap_BDTG.weights.xml.gz'),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlowLoose")
        )
    ),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlowLoose"),
    minMVA1prongBL = cms.double(0.0),
    inputFileName1prongStripsWgsfWpfEleMvaEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_wGwGSFwPFMVA_Endcap_BDTG.weights.xml.gz'),
    method = cms.string('BDT'),
    inputFileName1prongBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_woG_Barrel_BDTG.weights.xml.gz'),
    inputFileName1prongStripsWgsfWpfEleMvaBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_wGwGSFwPFMVA_Barrel_BDTG.weights.xml.gz'),
    minMVA1prongStripsWgsfWpfEleMvaBL = cms.double(0.0),
    inputFileName1prongNoEleMatchBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_NoEleMatch_Barrel_BDTG.weights.xml.gz'),
    inputFileName1prongStripsWOgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_wGwoGSF_Endcap_BDTG.weights.xml.gz'),
    minMVA1prongNoEleMatchBL = cms.double(0.0),
    minMVA1prongStripsWOgsfBL = cms.double(0.0),
    minMVA1prongNoEleMatchEC = cms.double(0.0),
    inputFileName1prongStripsWOgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_wGwoGSF_Barrel_BDTG.weights.xml.gz'),
    srcGsfElectrons = cms.InputTag("gsfElectrons"),
    inputFileName1prongEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_woG_Endcap_BDTG.weights.xml.gz')
)


process.hpsPFTauDiscriminationByMVA3LooseElectronRejection = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    key = cms.InputTag("hpsPFTauDiscriminationByMVA3rawElectronRejection","category"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.double(0.1816889)
    ), 
        cms.PSet(
            category = cms.uint32(1),
            cut = cms.double(0.1538533)
        ), 
        cms.PSet(
            category = cms.uint32(2),
            cut = cms.double(0.5605197)
        ), 
        cms.PSet(
            category = cms.uint32(3),
            cut = cms.double(0.66321647)
        ), 
        cms.PSet(
            category = cms.uint32(4),
            cut = cms.double(0.86337829)
        ), 
        cms.PSet(
            category = cms.uint32(5),
            cut = cms.double(0.94084531)
        ), 
        cms.PSet(
            category = cms.uint32(6),
            cut = cms.double(0.98025548)
        ), 
        cms.PSet(
            category = cms.uint32(7),
            cut = cms.double(0.80039471)
        ), 
        cms.PSet(
            category = cms.uint32(8),
            cut = cms.double(-1.0)
        ), 
        cms.PSet(
            category = cms.uint32(9),
            cut = cms.double(0.49787951)
        ), 
        cms.PSet(
            category = cms.uint32(10),
            cut = cms.double(0.74751109)
        ), 
        cms.PSet(
            category = cms.uint32(11),
            cut = cms.double(0.94486511)
        ), 
        cms.PSet(
            category = cms.uint32(12),
            cut = cms.double(0.63645148)
        ), 
        cms.PSet(
            category = cms.uint32(13),
            cut = cms.double(0.9575507)
        ), 
        cms.PSet(
            category = cms.uint32(14),
            cut = cms.double(0.9549247)
        ), 
        cms.PSet(
            category = cms.uint32(15),
            cut = cms.double(0.83487612)
        ), 
        cms.PSet(
            category = cms.uint32(16),
            cut = cms.double(-1.0)
        ), 
        cms.PSet(
            category = cms.uint32(17),
            cut = cms.double(-1.0)
        )),
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByMVA3rawElectronRejection"),
    PFTauProducer = cms.InputTag("hpsPFTauProducer")
)


process.hpsPFTauDiscriminationByMVA3LooseElectronRejectionPFlow = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByMVA3rawElectronRejectionPFlow"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlow")
        )
    ),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.double(0.1816889)
    ), 
        cms.PSet(
            category = cms.uint32(1),
            cut = cms.double(0.1538533)
        ), 
        cms.PSet(
            category = cms.uint32(2),
            cut = cms.double(0.5605197)
        ), 
        cms.PSet(
            category = cms.uint32(3),
            cut = cms.double(0.66321647)
        ), 
        cms.PSet(
            category = cms.uint32(4),
            cut = cms.double(0.86337829)
        ), 
        cms.PSet(
            category = cms.uint32(5),
            cut = cms.double(0.94084531)
        ), 
        cms.PSet(
            category = cms.uint32(6),
            cut = cms.double(0.98025548)
        ), 
        cms.PSet(
            category = cms.uint32(7),
            cut = cms.double(0.80039471)
        ), 
        cms.PSet(
            category = cms.uint32(8),
            cut = cms.double(-1.0)
        ), 
        cms.PSet(
            category = cms.uint32(9),
            cut = cms.double(0.49787951)
        ), 
        cms.PSet(
            category = cms.uint32(10),
            cut = cms.double(0.74751109)
        ), 
        cms.PSet(
            category = cms.uint32(11),
            cut = cms.double(0.94486511)
        ), 
        cms.PSet(
            category = cms.uint32(12),
            cut = cms.double(0.63645148)
        ), 
        cms.PSet(
            category = cms.uint32(13),
            cut = cms.double(0.9575507)
        ), 
        cms.PSet(
            category = cms.uint32(14),
            cut = cms.double(0.9549247)
        ), 
        cms.PSet(
            category = cms.uint32(15),
            cut = cms.double(0.83487612)
        ), 
        cms.PSet(
            category = cms.uint32(16),
            cut = cms.double(-1.0)
        ), 
        cms.PSet(
            category = cms.uint32(17),
            cut = cms.double(-1.0)
        )),
    key = cms.InputTag("hpsPFTauDiscriminationByMVA3rawElectronRejectionPFlow","category"),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlow")
)


process.hpsPFTauDiscriminationByMVA3LooseElectronRejectionPFlowLoose = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByMVA3rawElectronRejectionPFlowLoose"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlowLoose")
        )
    ),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.double(0.1816889)
    ), 
        cms.PSet(
            category = cms.uint32(1),
            cut = cms.double(0.1538533)
        ), 
        cms.PSet(
            category = cms.uint32(2),
            cut = cms.double(0.5605197)
        ), 
        cms.PSet(
            category = cms.uint32(3),
            cut = cms.double(0.66321647)
        ), 
        cms.PSet(
            category = cms.uint32(4),
            cut = cms.double(0.86337829)
        ), 
        cms.PSet(
            category = cms.uint32(5),
            cut = cms.double(0.94084531)
        ), 
        cms.PSet(
            category = cms.uint32(6),
            cut = cms.double(0.98025548)
        ), 
        cms.PSet(
            category = cms.uint32(7),
            cut = cms.double(0.80039471)
        ), 
        cms.PSet(
            category = cms.uint32(8),
            cut = cms.double(-1.0)
        ), 
        cms.PSet(
            category = cms.uint32(9),
            cut = cms.double(0.49787951)
        ), 
        cms.PSet(
            category = cms.uint32(10),
            cut = cms.double(0.74751109)
        ), 
        cms.PSet(
            category = cms.uint32(11),
            cut = cms.double(0.94486511)
        ), 
        cms.PSet(
            category = cms.uint32(12),
            cut = cms.double(0.63645148)
        ), 
        cms.PSet(
            category = cms.uint32(13),
            cut = cms.double(0.9575507)
        ), 
        cms.PSet(
            category = cms.uint32(14),
            cut = cms.double(0.9549247)
        ), 
        cms.PSet(
            category = cms.uint32(15),
            cut = cms.double(0.83487612)
        ), 
        cms.PSet(
            category = cms.uint32(16),
            cut = cms.double(-1.0)
        ), 
        cms.PSet(
            category = cms.uint32(17),
            cut = cms.double(-1.0)
        )),
    key = cms.InputTag("hpsPFTauDiscriminationByMVA3rawElectronRejectionPFlowLoose","category"),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlowLoose")
)


process.hpsPFTauDiscriminationByMVA3MediumElectronRejection = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    key = cms.InputTag("hpsPFTauDiscriminationByMVA3rawElectronRejection","category"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.double(0.5577119)
    ), 
        cms.PSet(
            category = cms.uint32(1),
            cut = cms.double(0.7271899)
        ), 
        cms.PSet(
            category = cms.uint32(2),
            cut = cms.double(0.90410149)
        ), 
        cms.PSet(
            category = cms.uint32(3),
            cut = cms.double(0.94858187)
        ), 
        cms.PSet(
            category = cms.uint32(4),
            cut = cms.double(0.95044029)
        ), 
        cms.PSet(
            category = cms.uint32(5),
            cut = cms.double(0.97195327)
        ), 
        cms.PSet(
            category = cms.uint32(6),
            cut = cms.double(0.99229473)
        ), 
        cms.PSet(
            category = cms.uint32(7),
            cut = cms.double(0.92997772)
        ), 
        cms.PSet(
            category = cms.uint32(8),
            cut = cms.double(-0.3049897)
        ), 
        cms.PSet(
            category = cms.uint32(9),
            cut = cms.double(0.92191792)
        ), 
        cms.PSet(
            category = cms.uint32(10),
            cut = cms.double(0.96017671)
        ), 
        cms.PSet(
            category = cms.uint32(11),
            cut = cms.double(0.98126549)
        ), 
        cms.PSet(
            category = cms.uint32(12),
            cut = cms.double(0.80912107)
        ), 
        cms.PSet(
            category = cms.uint32(13),
            cut = cms.double(0.98326528)
        ), 
        cms.PSet(
            category = cms.uint32(14),
            cut = cms.double(0.97490251)
        ), 
        cms.PSet(
            category = cms.uint32(15),
            cut = cms.double(0.94708711)
        ), 
        cms.PSet(
            category = cms.uint32(16),
            cut = cms.double(-1.0)
        ), 
        cms.PSet(
            category = cms.uint32(17),
            cut = cms.double(-1.0)
        )),
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByMVA3rawElectronRejection"),
    PFTauProducer = cms.InputTag("hpsPFTauProducer")
)


process.hpsPFTauDiscriminationByMVA3MediumElectronRejectionPFlow = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByMVA3rawElectronRejectionPFlow"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlow")
        )
    ),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.double(0.5577119)
    ), 
        cms.PSet(
            category = cms.uint32(1),
            cut = cms.double(0.7271899)
        ), 
        cms.PSet(
            category = cms.uint32(2),
            cut = cms.double(0.90410149)
        ), 
        cms.PSet(
            category = cms.uint32(3),
            cut = cms.double(0.94858187)
        ), 
        cms.PSet(
            category = cms.uint32(4),
            cut = cms.double(0.95044029)
        ), 
        cms.PSet(
            category = cms.uint32(5),
            cut = cms.double(0.97195327)
        ), 
        cms.PSet(
            category = cms.uint32(6),
            cut = cms.double(0.99229473)
        ), 
        cms.PSet(
            category = cms.uint32(7),
            cut = cms.double(0.92997772)
        ), 
        cms.PSet(
            category = cms.uint32(8),
            cut = cms.double(-0.3049897)
        ), 
        cms.PSet(
            category = cms.uint32(9),
            cut = cms.double(0.92191792)
        ), 
        cms.PSet(
            category = cms.uint32(10),
            cut = cms.double(0.96017671)
        ), 
        cms.PSet(
            category = cms.uint32(11),
            cut = cms.double(0.98126549)
        ), 
        cms.PSet(
            category = cms.uint32(12),
            cut = cms.double(0.80912107)
        ), 
        cms.PSet(
            category = cms.uint32(13),
            cut = cms.double(0.98326528)
        ), 
        cms.PSet(
            category = cms.uint32(14),
            cut = cms.double(0.97490251)
        ), 
        cms.PSet(
            category = cms.uint32(15),
            cut = cms.double(0.94708711)
        ), 
        cms.PSet(
            category = cms.uint32(16),
            cut = cms.double(-1.0)
        ), 
        cms.PSet(
            category = cms.uint32(17),
            cut = cms.double(-1.0)
        )),
    key = cms.InputTag("hpsPFTauDiscriminationByMVA3rawElectronRejectionPFlow","category"),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlow")
)


process.hpsPFTauDiscriminationByMVA3MediumElectronRejectionPFlowLoose = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByMVA3rawElectronRejectionPFlowLoose"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlowLoose")
        )
    ),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.double(0.5577119)
    ), 
        cms.PSet(
            category = cms.uint32(1),
            cut = cms.double(0.7271899)
        ), 
        cms.PSet(
            category = cms.uint32(2),
            cut = cms.double(0.90410149)
        ), 
        cms.PSet(
            category = cms.uint32(3),
            cut = cms.double(0.94858187)
        ), 
        cms.PSet(
            category = cms.uint32(4),
            cut = cms.double(0.95044029)
        ), 
        cms.PSet(
            category = cms.uint32(5),
            cut = cms.double(0.97195327)
        ), 
        cms.PSet(
            category = cms.uint32(6),
            cut = cms.double(0.99229473)
        ), 
        cms.PSet(
            category = cms.uint32(7),
            cut = cms.double(0.92997772)
        ), 
        cms.PSet(
            category = cms.uint32(8),
            cut = cms.double(-0.3049897)
        ), 
        cms.PSet(
            category = cms.uint32(9),
            cut = cms.double(0.92191792)
        ), 
        cms.PSet(
            category = cms.uint32(10),
            cut = cms.double(0.96017671)
        ), 
        cms.PSet(
            category = cms.uint32(11),
            cut = cms.double(0.98126549)
        ), 
        cms.PSet(
            category = cms.uint32(12),
            cut = cms.double(0.80912107)
        ), 
        cms.PSet(
            category = cms.uint32(13),
            cut = cms.double(0.98326528)
        ), 
        cms.PSet(
            category = cms.uint32(14),
            cut = cms.double(0.97490251)
        ), 
        cms.PSet(
            category = cms.uint32(15),
            cut = cms.double(0.94708711)
        ), 
        cms.PSet(
            category = cms.uint32(16),
            cut = cms.double(-1.0)
        ), 
        cms.PSet(
            category = cms.uint32(17),
            cut = cms.double(-1.0)
        )),
    key = cms.InputTag("hpsPFTauDiscriminationByMVA3rawElectronRejectionPFlowLoose","category"),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlowLoose")
)


process.hpsPFTauDiscriminationByMVA3TightElectronRejection = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    key = cms.InputTag("hpsPFTauDiscriminationByMVA3rawElectronRejection","category"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.double(0.78914332)
    ), 
        cms.PSet(
            category = cms.uint32(1),
            cut = cms.double(0.91818088)
        ), 
        cms.PSet(
            category = cms.uint32(2),
            cut = cms.double(0.96754968)
        ), 
        cms.PSet(
            category = cms.uint32(3),
            cut = cms.double(0.98437631)
        ), 
        cms.PSet(
            category = cms.uint32(4),
            cut = cms.double(0.96684271)
        ), 
        cms.PSet(
            category = cms.uint32(5),
            cut = cms.double(0.99065852)
        ), 
        cms.PSet(
            category = cms.uint32(6),
            cut = cms.double(0.99797088)
        ), 
        cms.PSet(
            category = cms.uint32(7),
            cut = cms.double(0.96952927)
        ), 
        cms.PSet(
            category = cms.uint32(8),
            cut = cms.double(0.1180589)
        ), 
        cms.PSet(
            category = cms.uint32(9),
            cut = cms.double(0.9714281)
        ), 
        cms.PSet(
            category = cms.uint32(10),
            cut = cms.double(0.98451769)
        ), 
        cms.PSet(
            category = cms.uint32(11),
            cut = cms.double(0.99372888)
        ), 
        cms.PSet(
            category = cms.uint32(12),
            cut = cms.double(0.84681427)
        ), 
        cms.PSet(
            category = cms.uint32(13),
            cut = cms.double(0.98940611)
        ), 
        cms.PSet(
            category = cms.uint32(14),
            cut = cms.double(0.98308349)
        ), 
        cms.PSet(
            category = cms.uint32(15),
            cut = cms.double(0.97482169)
        ), 
        cms.PSet(
            category = cms.uint32(16),
            cut = cms.double(-1.0)
        ), 
        cms.PSet(
            category = cms.uint32(17),
            cut = cms.double(-1.0)
        )),
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByMVA3rawElectronRejection"),
    PFTauProducer = cms.InputTag("hpsPFTauProducer")
)


process.hpsPFTauDiscriminationByMVA3TightElectronRejectionPFlow = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByMVA3rawElectronRejectionPFlow"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlow")
        )
    ),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.double(0.78914332)
    ), 
        cms.PSet(
            category = cms.uint32(1),
            cut = cms.double(0.91818088)
        ), 
        cms.PSet(
            category = cms.uint32(2),
            cut = cms.double(0.96754968)
        ), 
        cms.PSet(
            category = cms.uint32(3),
            cut = cms.double(0.98437631)
        ), 
        cms.PSet(
            category = cms.uint32(4),
            cut = cms.double(0.96684271)
        ), 
        cms.PSet(
            category = cms.uint32(5),
            cut = cms.double(0.99065852)
        ), 
        cms.PSet(
            category = cms.uint32(6),
            cut = cms.double(0.99797088)
        ), 
        cms.PSet(
            category = cms.uint32(7),
            cut = cms.double(0.96952927)
        ), 
        cms.PSet(
            category = cms.uint32(8),
            cut = cms.double(0.1180589)
        ), 
        cms.PSet(
            category = cms.uint32(9),
            cut = cms.double(0.9714281)
        ), 
        cms.PSet(
            category = cms.uint32(10),
            cut = cms.double(0.98451769)
        ), 
        cms.PSet(
            category = cms.uint32(11),
            cut = cms.double(0.99372888)
        ), 
        cms.PSet(
            category = cms.uint32(12),
            cut = cms.double(0.84681427)
        ), 
        cms.PSet(
            category = cms.uint32(13),
            cut = cms.double(0.98940611)
        ), 
        cms.PSet(
            category = cms.uint32(14),
            cut = cms.double(0.98308349)
        ), 
        cms.PSet(
            category = cms.uint32(15),
            cut = cms.double(0.97482169)
        ), 
        cms.PSet(
            category = cms.uint32(16),
            cut = cms.double(-1.0)
        ), 
        cms.PSet(
            category = cms.uint32(17),
            cut = cms.double(-1.0)
        )),
    key = cms.InputTag("hpsPFTauDiscriminationByMVA3rawElectronRejectionPFlow","category"),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlow")
)


process.hpsPFTauDiscriminationByMVA3TightElectronRejectionPFlowLoose = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByMVA3rawElectronRejectionPFlowLoose"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlowLoose")
        )
    ),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.double(0.78914332)
    ), 
        cms.PSet(
            category = cms.uint32(1),
            cut = cms.double(0.91818088)
        ), 
        cms.PSet(
            category = cms.uint32(2),
            cut = cms.double(0.96754968)
        ), 
        cms.PSet(
            category = cms.uint32(3),
            cut = cms.double(0.98437631)
        ), 
        cms.PSet(
            category = cms.uint32(4),
            cut = cms.double(0.96684271)
        ), 
        cms.PSet(
            category = cms.uint32(5),
            cut = cms.double(0.99065852)
        ), 
        cms.PSet(
            category = cms.uint32(6),
            cut = cms.double(0.99797088)
        ), 
        cms.PSet(
            category = cms.uint32(7),
            cut = cms.double(0.96952927)
        ), 
        cms.PSet(
            category = cms.uint32(8),
            cut = cms.double(0.1180589)
        ), 
        cms.PSet(
            category = cms.uint32(9),
            cut = cms.double(0.9714281)
        ), 
        cms.PSet(
            category = cms.uint32(10),
            cut = cms.double(0.98451769)
        ), 
        cms.PSet(
            category = cms.uint32(11),
            cut = cms.double(0.99372888)
        ), 
        cms.PSet(
            category = cms.uint32(12),
            cut = cms.double(0.84681427)
        ), 
        cms.PSet(
            category = cms.uint32(13),
            cut = cms.double(0.98940611)
        ), 
        cms.PSet(
            category = cms.uint32(14),
            cut = cms.double(0.98308349)
        ), 
        cms.PSet(
            category = cms.uint32(15),
            cut = cms.double(0.97482169)
        ), 
        cms.PSet(
            category = cms.uint32(16),
            cut = cms.double(-1.0)
        ), 
        cms.PSet(
            category = cms.uint32(17),
            cut = cms.double(-1.0)
        )),
    key = cms.InputTag("hpsPFTauDiscriminationByMVA3rawElectronRejectionPFlowLoose","category"),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlowLoose")
)


process.hpsPFTauDiscriminationByMVA3VTightElectronRejection = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    key = cms.InputTag("hpsPFTauDiscriminationByMVA3rawElectronRejection","category"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.double(0.89307231)
    ), 
        cms.PSet(
            category = cms.uint32(1),
            cut = cms.double(0.96239871)
        ), 
        cms.PSet(
            category = cms.uint32(2),
            cut = cms.double(0.98247749)
        ), 
        cms.PSet(
            category = cms.uint32(3),
            cut = cms.double(0.99013329)
        ), 
        cms.PSet(
            category = cms.uint32(4),
            cut = cms.double(0.9768821)
        ), 
        cms.PSet(
            category = cms.uint32(5),
            cut = cms.double(0.9958095)
        ), 
        cms.PSet(
            category = cms.uint32(6),
            cut = cms.double(0.99797088)
        ), 
        cms.PSet(
            category = cms.uint32(7),
            cut = cms.double(0.98120493)
        ), 
        cms.PSet(
            category = cms.uint32(8),
            cut = cms.double(0.60025311)
        ), 
        cms.PSet(
            category = cms.uint32(9),
            cut = cms.double(0.98320472)
        ), 
        cms.PSet(
            category = cms.uint32(10),
            cut = cms.double(0.9897899)
        ), 
        cms.PSet(
            category = cms.uint32(11),
            cut = cms.double(0.9964357)
        ), 
        cms.PSet(
            category = cms.uint32(12),
            cut = cms.double(0.88230568)
        ), 
        cms.PSet(
            category = cms.uint32(13),
            cut = cms.double(0.99132508)
        ), 
        cms.PSet(
            category = cms.uint32(14),
            cut = cms.double(0.98467928)
        ), 
        cms.PSet(
            category = cms.uint32(15),
            cut = cms.double(0.98235631)
        ), 
        cms.PSet(
            category = cms.uint32(16),
            cut = cms.double(-1.0)
        ), 
        cms.PSet(
            category = cms.uint32(17),
            cut = cms.double(-1.0)
        )),
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByMVA3rawElectronRejection"),
    PFTauProducer = cms.InputTag("hpsPFTauProducer")
)


process.hpsPFTauDiscriminationByMVA3VTightElectronRejectionPFlow = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByMVA3rawElectronRejectionPFlow"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlow")
        )
    ),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.double(0.89307231)
    ), 
        cms.PSet(
            category = cms.uint32(1),
            cut = cms.double(0.96239871)
        ), 
        cms.PSet(
            category = cms.uint32(2),
            cut = cms.double(0.98247749)
        ), 
        cms.PSet(
            category = cms.uint32(3),
            cut = cms.double(0.99013329)
        ), 
        cms.PSet(
            category = cms.uint32(4),
            cut = cms.double(0.9768821)
        ), 
        cms.PSet(
            category = cms.uint32(5),
            cut = cms.double(0.9958095)
        ), 
        cms.PSet(
            category = cms.uint32(6),
            cut = cms.double(0.99797088)
        ), 
        cms.PSet(
            category = cms.uint32(7),
            cut = cms.double(0.98120493)
        ), 
        cms.PSet(
            category = cms.uint32(8),
            cut = cms.double(0.60025311)
        ), 
        cms.PSet(
            category = cms.uint32(9),
            cut = cms.double(0.98320472)
        ), 
        cms.PSet(
            category = cms.uint32(10),
            cut = cms.double(0.9897899)
        ), 
        cms.PSet(
            category = cms.uint32(11),
            cut = cms.double(0.9964357)
        ), 
        cms.PSet(
            category = cms.uint32(12),
            cut = cms.double(0.88230568)
        ), 
        cms.PSet(
            category = cms.uint32(13),
            cut = cms.double(0.99132508)
        ), 
        cms.PSet(
            category = cms.uint32(14),
            cut = cms.double(0.98467928)
        ), 
        cms.PSet(
            category = cms.uint32(15),
            cut = cms.double(0.98235631)
        ), 
        cms.PSet(
            category = cms.uint32(16),
            cut = cms.double(-1.0)
        ), 
        cms.PSet(
            category = cms.uint32(17),
            cut = cms.double(-1.0)
        )),
    key = cms.InputTag("hpsPFTauDiscriminationByMVA3rawElectronRejectionPFlow","category"),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlow")
)


process.hpsPFTauDiscriminationByMVA3VTightElectronRejectionPFlowLoose = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByMVA3rawElectronRejectionPFlowLoose"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlowLoose")
        )
    ),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.double(0.89307231)
    ), 
        cms.PSet(
            category = cms.uint32(1),
            cut = cms.double(0.96239871)
        ), 
        cms.PSet(
            category = cms.uint32(2),
            cut = cms.double(0.98247749)
        ), 
        cms.PSet(
            category = cms.uint32(3),
            cut = cms.double(0.99013329)
        ), 
        cms.PSet(
            category = cms.uint32(4),
            cut = cms.double(0.9768821)
        ), 
        cms.PSet(
            category = cms.uint32(5),
            cut = cms.double(0.9958095)
        ), 
        cms.PSet(
            category = cms.uint32(6),
            cut = cms.double(0.99797088)
        ), 
        cms.PSet(
            category = cms.uint32(7),
            cut = cms.double(0.98120493)
        ), 
        cms.PSet(
            category = cms.uint32(8),
            cut = cms.double(0.60025311)
        ), 
        cms.PSet(
            category = cms.uint32(9),
            cut = cms.double(0.98320472)
        ), 
        cms.PSet(
            category = cms.uint32(10),
            cut = cms.double(0.9897899)
        ), 
        cms.PSet(
            category = cms.uint32(11),
            cut = cms.double(0.9964357)
        ), 
        cms.PSet(
            category = cms.uint32(12),
            cut = cms.double(0.88230568)
        ), 
        cms.PSet(
            category = cms.uint32(13),
            cut = cms.double(0.99132508)
        ), 
        cms.PSet(
            category = cms.uint32(14),
            cut = cms.double(0.98467928)
        ), 
        cms.PSet(
            category = cms.uint32(15),
            cut = cms.double(0.98235631)
        ), 
        cms.PSet(
            category = cms.uint32(16),
            cut = cms.double(-1.0)
        ), 
        cms.PSet(
            category = cms.uint32(17),
            cut = cms.double(-1.0)
        )),
    key = cms.InputTag("hpsPFTauDiscriminationByMVA3rawElectronRejectionPFlowLoose","category"),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlowLoose")
)


process.hpsPFTauDiscriminationByMVA3rawElectronRejection = cms.EDProducer("PFRecoTauDiscriminationAgainstElectronMVA3",
    inputFileName1prongNoEleMatchWgWOgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_NoEleMatch_wGwoGSF_Endcap_BDTG.weights.xml.gz'),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    minMVA1prongNoEleMatchWgWgsfEC = cms.double(0.0),
    inputFileName1prongWOgWgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_woGwGSF_Barrel_BDTG.weights.xml.gz'),
    minMVA1prongWOgWOgsfBL = cms.double(0.0),
    minMVA1prongNoEleMatchWOgWOgsfEC = cms.double(0.0),
    minMVA1prongNoEleMatchWgWOgsfBL = cms.double(0.0),
    inputFileName1prongWgWOgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_wGwoGSF_Barrel_BDTG.weights.xml.gz'),
    minMVA1prongWOgWgsfEC = cms.double(0.0),
    inputFileName1prongWgWOgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_wGwoGSF_Endcap_BDTG.weights.xml.gz'),
    inputFileName1prongNoEleMatchWOgWgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_NoEleMatch_woGwGSF_Barrel_BDTG.weights.xml.gz'),
    minMVA1prongWgWgsfBL = cms.double(0.0),
    inputFileName1prongNoEleMatchWOgWgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_NoEleMatch_woGwGSF_Endcap_BDTG.weights.xml.gz'),
    minMVA1prongNoEleMatchWgWOgsfEC = cms.double(0.0),
    minMVA1prongNoEleMatchWOgWgsfBL = cms.double(0.0),
    minMVA1prongWgWOgsfEC = cms.double(0.0),
    minMVA1prongWgWOgsfBL = cms.double(0.0),
    returnMVA = cms.bool(True),
    minMVA1prongWOgWOgsfEC = cms.double(0.0),
    inputFileName1prongWOgWOgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_woGwoGSF_Endcap_BDTG.weights.xml.gz'),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    inputFileName1prongWgWgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_wGwGSF_Endcap_BDTG.weights.xml.gz'),
    inputFileName1prongNoEleMatchWgWOgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_NoEleMatch_wGwoGSF_Barrel_BDTG.weights.xml.gz'),
    inputFileName1prongNoEleMatchWOgWOgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_NoEleMatch_woGwoGSF_Barrel_BDTG.weights.xml.gz'),
    inputFileName1prongNoEleMatchWOgWOgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_NoEleMatch_woGwoGSF_Endcap_BDTG.weights.xml.gz'),
    minMVA1prongWOgWgsfBL = cms.double(0.0),
    minMVA1prongWgWgsfEC = cms.double(0.0),
    minMVA1prongNoEleMatchWOgWOgsfBL = cms.double(0.0),
    inputFileName1prongNoEleMatchWgWgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_NoEleMatch_wGwGSF_Barrel_BDTG.weights.xml.gz'),
    minMVA1prongNoEleMatchWgWgsfBL = cms.double(0.0),
    inputFileName1prongNoEleMatchWgWgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_NoEleMatch_wGwGSF_Endcap_BDTG.weights.xml.gz'),
    inputFileName1prongWOgWOgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_woGwoGSF_Barrel_BDTG.weights.xml.gz'),
    minMVA3prongNoMatch = cms.double(0.0),
    method = cms.string('BDTG'),
    minMVA1prongNoEleMatchWOgWgsfEC = cms.double(0.0),
    srcGsfElectrons = cms.InputTag("gsfElectrons"),
    minMVA3prongMatch = cms.double(0.0),
    inputFileName1prongWOgWgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_woGwGSF_Endcap_BDTG.weights.xml.gz'),
    inputFileName1prongWgWgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_wGwGSF_Barrel_BDTG.weights.xml.gz')
)


process.hpsPFTauDiscriminationByMVA3rawElectronRejectionPFlow = cms.EDProducer("PFRecoTauDiscriminationAgainstElectronMVA3",
    inputFileName1prongNoEleMatchWOgWOgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_NoEleMatch_woGwoGSF_Endcap_BDTG.weights.xml.gz'),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlow"),
    minMVA1prongNoEleMatchWgWgsfEC = cms.double(0.0),
    inputFileName1prongWOgWgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_woGwGSF_Barrel_BDTG.weights.xml.gz'),
    minMVA1prongWOgWOgsfBL = cms.double(0.0),
    minMVA1prongNoEleMatchWOgWOgsfEC = cms.double(0.0),
    minMVA1prongNoEleMatchWgWOgsfBL = cms.double(0.0),
    inputFileName1prongWgWOgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_wGwoGSF_Barrel_BDTG.weights.xml.gz'),
    minMVA1prongWOgWgsfEC = cms.double(0.0),
    inputFileName1prongWgWOgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_wGwoGSF_Endcap_BDTG.weights.xml.gz'),
    inputFileName1prongNoEleMatchWOgWgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_NoEleMatch_woGwGSF_Barrel_BDTG.weights.xml.gz'),
    minMVA1prongWgWOgsfBL = cms.double(0.0),
    inputFileName1prongNoEleMatchWOgWgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_NoEleMatch_woGwGSF_Endcap_BDTG.weights.xml.gz'),
    minMVA1prongNoEleMatchWgWOgsfEC = cms.double(0.0),
    minMVA1prongNoEleMatchWOgWgsfBL = cms.double(0.0),
    minMVA1prongWgWOgsfEC = cms.double(0.0),
    minMVA1prongWgWgsfBL = cms.double(0.0),
    returnMVA = cms.bool(True),
    minMVA1prongWOgWOgsfEC = cms.double(0.0),
    inputFileName1prongWOgWOgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_woGwoGSF_Endcap_BDTG.weights.xml.gz'),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlow")
        )
    ),
    inputFileName1prongWgWgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_wGwGSF_Endcap_BDTG.weights.xml.gz'),
    inputFileName1prongNoEleMatchWgWOgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_NoEleMatch_wGwoGSF_Barrel_BDTG.weights.xml.gz'),
    inputFileName1prongNoEleMatchWOgWOgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_NoEleMatch_woGwoGSF_Barrel_BDTG.weights.xml.gz'),
    inputFileName1prongNoEleMatchWgWOgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_NoEleMatch_wGwoGSF_Endcap_BDTG.weights.xml.gz'),
    minMVA1prongWOgWgsfBL = cms.double(0.0),
    minMVA1prongWgWgsfEC = cms.double(0.0),
    minMVA1prongNoEleMatchWOgWOgsfBL = cms.double(0.0),
    inputFileName1prongNoEleMatchWgWgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_NoEleMatch_wGwGSF_Barrel_BDTG.weights.xml.gz'),
    minMVA1prongNoEleMatchWgWgsfBL = cms.double(0.0),
    inputFileName1prongNoEleMatchWgWgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_NoEleMatch_wGwGSF_Endcap_BDTG.weights.xml.gz'),
    inputFileName1prongWOgWOgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_woGwoGSF_Barrel_BDTG.weights.xml.gz'),
    minMVA3prongNoMatch = cms.double(0.0),
    method = cms.string('BDTG'),
    minMVA1prongNoEleMatchWOgWgsfEC = cms.double(0.0),
    srcGsfElectrons = cms.InputTag("gsfElectrons"),
    minMVA3prongMatch = cms.double(0.0),
    inputFileName1prongWOgWgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_woGwGSF_Endcap_BDTG.weights.xml.gz'),
    inputFileName1prongWgWgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_wGwGSF_Barrel_BDTG.weights.xml.gz')
)


process.hpsPFTauDiscriminationByMVA3rawElectronRejectionPFlowLoose = cms.EDProducer("PFRecoTauDiscriminationAgainstElectronMVA3",
    inputFileName1prongNoEleMatchWOgWOgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_NoEleMatch_woGwoGSF_Endcap_BDTG.weights.xml.gz'),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlowLoose"),
    minMVA1prongNoEleMatchWgWgsfEC = cms.double(0.0),
    inputFileName1prongWOgWgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_woGwGSF_Barrel_BDTG.weights.xml.gz'),
    minMVA1prongWOgWOgsfBL = cms.double(0.0),
    minMVA1prongNoEleMatchWOgWOgsfEC = cms.double(0.0),
    minMVA1prongNoEleMatchWgWOgsfBL = cms.double(0.0),
    inputFileName1prongWgWOgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_wGwoGSF_Barrel_BDTG.weights.xml.gz'),
    minMVA1prongWOgWgsfEC = cms.double(0.0),
    inputFileName1prongWgWOgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_wGwoGSF_Endcap_BDTG.weights.xml.gz'),
    inputFileName1prongNoEleMatchWOgWgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_NoEleMatch_woGwGSF_Barrel_BDTG.weights.xml.gz'),
    minMVA1prongWgWOgsfBL = cms.double(0.0),
    inputFileName1prongNoEleMatchWOgWgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_NoEleMatch_woGwGSF_Endcap_BDTG.weights.xml.gz'),
    minMVA1prongNoEleMatchWgWOgsfEC = cms.double(0.0),
    minMVA1prongNoEleMatchWOgWgsfBL = cms.double(0.0),
    minMVA1prongWgWOgsfEC = cms.double(0.0),
    minMVA1prongWgWgsfBL = cms.double(0.0),
    returnMVA = cms.bool(True),
    minMVA1prongWOgWOgsfEC = cms.double(0.0),
    inputFileName1prongWOgWOgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_woGwoGSF_Endcap_BDTG.weights.xml.gz'),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlowLoose")
        )
    ),
    inputFileName1prongWgWgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_wGwGSF_Endcap_BDTG.weights.xml.gz'),
    inputFileName1prongNoEleMatchWgWOgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_NoEleMatch_wGwoGSF_Barrel_BDTG.weights.xml.gz'),
    inputFileName1prongNoEleMatchWOgWOgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_NoEleMatch_woGwoGSF_Barrel_BDTG.weights.xml.gz'),
    inputFileName1prongNoEleMatchWgWOgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_NoEleMatch_wGwoGSF_Endcap_BDTG.weights.xml.gz'),
    minMVA1prongWOgWgsfBL = cms.double(0.0),
    minMVA1prongWgWgsfEC = cms.double(0.0),
    minMVA1prongNoEleMatchWOgWOgsfBL = cms.double(0.0),
    inputFileName1prongNoEleMatchWgWgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_NoEleMatch_wGwGSF_Barrel_BDTG.weights.xml.gz'),
    minMVA1prongNoEleMatchWgWgsfBL = cms.double(0.0),
    inputFileName1prongNoEleMatchWgWgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_NoEleMatch_wGwGSF_Endcap_BDTG.weights.xml.gz'),
    inputFileName1prongWOgWOgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_woGwoGSF_Barrel_BDTG.weights.xml.gz'),
    minMVA3prongNoMatch = cms.double(0.0),
    method = cms.string('BDTG'),
    minMVA1prongNoEleMatchWOgWgsfEC = cms.double(0.0),
    srcGsfElectrons = cms.InputTag("gsfElectrons"),
    minMVA3prongMatch = cms.double(0.0),
    inputFileName1prongWOgWgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_woGwGSF_Endcap_BDTG.weights.xml.gz'),
    inputFileName1prongWgWgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_wGwGSF_Barrel_BDTG.weights.xml.gz')
)


process.hpsPFTauDiscriminationByMVAElectronRejection = cms.EDProducer("PFRecoTauDiscriminationAgainstElectronMVA",
    minMVA1prongStripsWgsfEC = cms.double(0.053),
    minMVA1prongStripsWOgsfEC = cms.double(0.049),
    minMVA1prongBL = cms.double(0.054),
    minMVA1prongEC = cms.double(0.06),
    returnMVA = cms.bool(False),
    inputFileName1prongStripsWgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v2_1_1EC_BDT.weights.xml.gz'),
    inputFileName1prongStripsWgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v2_1_1BL_BDT.weights.xml.gz'),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        ),
        electronMedium = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByMediumElectronRejection")
        )
    ),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    inputFileName1prongStripsWOgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v2_0_1BL_BDT.weights.xml.gz'),
    inputFileName1prongStripsWOgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v2_0_1EC_BDT.weights.xml.gz'),
    inputFileName1prongEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v2_X_0EC_BDT.weights.xml.gz'),
    minMVA1prongStripsWgsfBL = cms.double(0.06),
    method = cms.string('BDT'),
    minMVA1prongStripsWOgsfBL = cms.double(0.054),
    inputFileName1prongBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v2_X_0BL_BDT.weights.xml.gz')
)


process.hpsPFTauDiscriminationByMVAElectronRejectionPFlow = cms.EDProducer("PFRecoTauDiscriminationAgainstElectronMVA",
    minMVA1prongStripsWgsfEC = cms.double(0.053),
    minMVA1prongEC = cms.double(0.06),
    minMVA1prongStripsWOgsfEC = cms.double(0.049),
    returnMVA = cms.bool(False),
    inputFileName1prongStripsWgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v2_1_1EC_BDT.weights.xml.gz'),
    inputFileName1prongEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v2_X_0EC_BDT.weights.xml.gz'),
    inputFileName1prongStripsWgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v2_1_1BL_BDT.weights.xml.gz'),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlow")
        ),
        electronMedium = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByMediumElectronRejectionPFlow")
        )
    ),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlow"),
    inputFileName1prongStripsWOgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v2_0_1BL_BDT.weights.xml.gz'),
    inputFileName1prongStripsWOgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v2_0_1EC_BDT.weights.xml.gz'),
    minMVA1prongBL = cms.double(0.054),
    inputFileName1prongBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v2_X_0BL_BDT.weights.xml.gz'),
    method = cms.string('BDT'),
    minMVA1prongStripsWOgsfBL = cms.double(0.054),
    minMVA1prongStripsWgsfBL = cms.double(0.06)
)


process.hpsPFTauDiscriminationByMVAElectronRejectionPFlowLoose = cms.EDProducer("PFRecoTauDiscriminationAgainstElectronMVA",
    minMVA1prongStripsWgsfEC = cms.double(0.053),
    minMVA1prongEC = cms.double(0.06),
    minMVA1prongStripsWOgsfEC = cms.double(0.049),
    returnMVA = cms.bool(False),
    inputFileName1prongStripsWgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v2_1_1EC_BDT.weights.xml.gz'),
    inputFileName1prongEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v2_X_0EC_BDT.weights.xml.gz'),
    inputFileName1prongStripsWgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v2_1_1BL_BDT.weights.xml.gz'),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlowLoose")
        ),
        electronMedium = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByMediumElectronRejectionPFlowLoose")
        )
    ),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlowLoose"),
    inputFileName1prongStripsWOgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v2_0_1BL_BDT.weights.xml.gz'),
    inputFileName1prongStripsWOgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v2_0_1EC_BDT.weights.xml.gz'),
    minMVA1prongBL = cms.double(0.054),
    inputFileName1prongBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v2_X_0BL_BDT.weights.xml.gz'),
    method = cms.string('BDT'),
    minMVA1prongStripsWOgsfBL = cms.double(0.054),
    minMVA1prongStripsWgsfBL = cms.double(0.06)
)


process.hpsPFTauDiscriminationByMediumChargedIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(False),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.4576'),
    applyRhoCorrection = cms.bool(False),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    rhoUEOffsetCorrection = cms.double(1.0),
    maximumSumPtCut = cms.double(1.0),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    applyDeltaBetaCorrection = cms.bool(True),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    relativeSumPtCut = cms.double(0.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByMediumChargedIsolationPFlow = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(False),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlow"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.4576'),
    applyRhoCorrection = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    maximumSumPtCut = cms.double(1.0),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlow")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    applyDeltaBetaCorrection = cms.bool(True),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    relativeSumPtCut = cms.double(0.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    rhoUEOffsetCorrection = cms.double(1.0),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByMediumChargedIsolationPFlowLoose = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(False),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlowLoose"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.4576'),
    applyRhoCorrection = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    maximumSumPtCut = cms.double(1.0),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlowLoose")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    applyDeltaBetaCorrection = cms.bool(True),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    relativeSumPtCut = cms.double(0.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    rhoUEOffsetCorrection = cms.double(1.0),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByMediumCombinedIsolationDBSumPtCorr = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    relativeSumPtCut = cms.double(0.0),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    applyDeltaBetaCorrection = cms.bool(True),
    deltaBetaFactor = cms.string('0.4576'),
    applyRhoCorrection = cms.bool(False),
    maximumSumPtCut = cms.double(1.0),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    maximumOccupancy = cms.uint32(0),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByMediumCombinedIsolationDBSumPtCorr3Hits = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.4576'),
    applyRhoCorrection = cms.bool(False),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    rhoUEOffsetCorrection = cms.double(1.0),
    maximumSumPtCut = cms.double(1.0),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    applyDeltaBetaCorrection = cms.bool(True),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    relativeSumPtCut = cms.double(0.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByMediumCombinedIsolationDBSumPtCorr3HitsPFlow = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlow"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.4576'),
    applyRhoCorrection = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    maximumSumPtCut = cms.double(1.0),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlow")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    applyDeltaBetaCorrection = cms.bool(True),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    relativeSumPtCut = cms.double(0.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    rhoUEOffsetCorrection = cms.double(1.0),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByMediumCombinedIsolationDBSumPtCorr3HitsPFlowLoose = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlowLoose"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.4576'),
    applyRhoCorrection = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    maximumSumPtCut = cms.double(1.0),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlowLoose")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    applyDeltaBetaCorrection = cms.bool(True),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    relativeSumPtCut = cms.double(0.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    rhoUEOffsetCorrection = cms.double(1.0),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByMediumCombinedIsolationDBSumPtCorrPFlow = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlow"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.4576'),
    applyRhoCorrection = cms.bool(False),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    rhoUEOffsetCorrection = cms.double(1.0),
    maximumSumPtCut = cms.double(1.0),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlow")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    applyDeltaBetaCorrection = cms.bool(True),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    relativeSumPtCut = cms.double(0.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByMediumCombinedIsolationDBSumPtCorrPFlowLoose = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlowLoose"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.4576'),
    applyRhoCorrection = cms.bool(False),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    rhoUEOffsetCorrection = cms.double(1.0),
    maximumSumPtCut = cms.double(1.0),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlowLoose")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    applyDeltaBetaCorrection = cms.bool(True),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    relativeSumPtCut = cms.double(0.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByMediumElectronRejection = cms.EDProducer("PFRecoTauDiscriminationAgainstElectron",
    ApplyCut_ElectronPreID_2D = cms.bool(False),
    ElecPreID0_HOverPLead_minValue = cms.double(0.05),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    ApplyCut_ElectronPreID = cms.bool(False),
    ApplyCut_HcalTotOverPLead = cms.bool(False),
    EOverPLead_minValue = cms.double(0.8),
    ElecPreID1_EOverPLead_maxValue = cms.double(0.8),
    HcalMaxOverPLead_minValue = cms.double(0.1),
    BremCombined_HOP = cms.double(0.1),
    ApplyCut_EmFraction = cms.bool(False),
    EmFraction_maxValue = cms.double(0.9),
    BremCombined_Mass = cms.double(0.55),
    ApplyCut_PFElectronMVA = cms.bool(True),
    PFElectronMVA_maxValue = cms.double(-0.1),
    ApplyCut_HcalMaxOverPLead = cms.bool(False),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    ApplyCut_BremCombined = cms.bool(False),
    Hcal3x3OverPLead_minValue = cms.double(0.1),
    ElecPreID1_HOverPLead_minValue = cms.double(0.15),
    ElecPreID0_EOverPLead_maxValue = cms.double(0.95),
    BremsRecoveryEOverPLead_minValue = cms.double(0.8),
    ApplyCut_EcalCrackCut = cms.bool(True),
    BremCombined_StripSize = cms.double(0.03),
    EOverPLead_maxValue = cms.double(1.8),
    HcalTotOverPLead_minValue = cms.double(0.1),
    ApplyCut_BremsRecoveryEOverPLead = cms.bool(False),
    ApplyCut_Hcal3x3OverPLead = cms.bool(False),
    ApplyCut_EOverPLead = cms.bool(False),
    BremCombined_Fraction = cms.double(0.99),
    BremsRecoveryEOverPLead_maxValue = cms.double(1.8)
)


process.hpsPFTauDiscriminationByMediumElectronRejectionPFlow = cms.EDProducer("PFRecoTauDiscriminationAgainstElectron",
    ApplyCut_ElectronPreID_2D = cms.bool(False),
    ApplyCut_EOverPLead = cms.bool(False),
    ElecPreID0_HOverPLead_minValue = cms.double(0.05),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlow"),
    ApplyCut_ElectronPreID = cms.bool(False),
    ApplyCut_HcalTotOverPLead = cms.bool(False),
    EOverPLead_minValue = cms.double(0.8),
    ElecPreID1_EOverPLead_maxValue = cms.double(0.8),
    HcalMaxOverPLead_minValue = cms.double(0.1),
    ApplyCut_EmFraction = cms.bool(False),
    EmFraction_maxValue = cms.double(0.9),
    BremCombined_Mass = cms.double(0.55),
    ApplyCut_PFElectronMVA = cms.bool(True),
    PFElectronMVA_maxValue = cms.double(-0.1),
    ApplyCut_HcalMaxOverPLead = cms.bool(False),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    ApplyCut_BremCombined = cms.bool(False),
    Hcal3x3OverPLead_minValue = cms.double(0.1),
    ElecPreID1_HOverPLead_minValue = cms.double(0.15),
    ElecPreID0_EOverPLead_maxValue = cms.double(0.95),
    BremsRecoveryEOverPLead_minValue = cms.double(0.8),
    ApplyCut_EcalCrackCut = cms.bool(True),
    BremCombined_StripSize = cms.double(0.03),
    EOverPLead_maxValue = cms.double(1.8),
    HcalTotOverPLead_minValue = cms.double(0.1),
    ApplyCut_BremsRecoveryEOverPLead = cms.bool(False),
    ApplyCut_Hcal3x3OverPLead = cms.bool(False),
    BremCombined_HOP = cms.double(0.1),
    BremCombined_Fraction = cms.double(0.99),
    BremsRecoveryEOverPLead_maxValue = cms.double(1.8)
)


process.hpsPFTauDiscriminationByMediumElectronRejectionPFlowLoose = cms.EDProducer("PFRecoTauDiscriminationAgainstElectron",
    ApplyCut_ElectronPreID_2D = cms.bool(False),
    ApplyCut_EOverPLead = cms.bool(False),
    ElecPreID0_HOverPLead_minValue = cms.double(0.05),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlowLoose"),
    ApplyCut_ElectronPreID = cms.bool(False),
    ApplyCut_HcalTotOverPLead = cms.bool(False),
    EOverPLead_minValue = cms.double(0.8),
    ElecPreID1_EOverPLead_maxValue = cms.double(0.8),
    HcalMaxOverPLead_minValue = cms.double(0.1),
    ApplyCut_EmFraction = cms.bool(False),
    EmFraction_maxValue = cms.double(0.9),
    BremCombined_Mass = cms.double(0.55),
    ApplyCut_PFElectronMVA = cms.bool(True),
    PFElectronMVA_maxValue = cms.double(-0.1),
    ApplyCut_HcalMaxOverPLead = cms.bool(False),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    ApplyCut_BremCombined = cms.bool(False),
    Hcal3x3OverPLead_minValue = cms.double(0.1),
    ElecPreID1_HOverPLead_minValue = cms.double(0.15),
    ElecPreID0_EOverPLead_maxValue = cms.double(0.95),
    BremsRecoveryEOverPLead_minValue = cms.double(0.8),
    ApplyCut_EcalCrackCut = cms.bool(True),
    BremCombined_StripSize = cms.double(0.03),
    EOverPLead_maxValue = cms.double(1.8),
    HcalTotOverPLead_minValue = cms.double(0.1),
    ApplyCut_BremsRecoveryEOverPLead = cms.bool(False),
    ApplyCut_Hcal3x3OverPLead = cms.bool(False),
    BremCombined_HOP = cms.double(0.1),
    BremCombined_Fraction = cms.double(0.99),
    BremsRecoveryEOverPLead_maxValue = cms.double(1.8)
)


process.hpsPFTauDiscriminationByMediumIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.38'),
    applyRhoCorrection = cms.bool(False),
    isoConeSizeForDeltaBeta = cms.double(0.5),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        ),
        preIso = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByMediumChargedIsolation")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.8),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.8),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByMediumIsolationDBSumPtCorr = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.2739'),
    applyRhoCorrection = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    maximumSumPtCut = cms.double(0.8),
    relativeSumPtCut = cms.double(0.0),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        ),
        preIso = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByMediumChargedIsolation")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    applyDeltaBetaCorrection = cms.bool(True),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    rhoConeSize = cms.double(0.5),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    particleFlowSrc = cms.InputTag("particleFlow"),
    rhoUEOffsetCorrection = cms.double(1.0),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.8),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.8),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByMediumIsolationDBSumPtCorrPFlow = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    relativeSumPtCut = cms.double(0.0),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlow"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    applyDeltaBetaCorrection = cms.bool(True),
    deltaBetaFactor = cms.string('0.2739'),
    applyRhoCorrection = cms.bool(False),
    maximumSumPtCut = cms.double(0.8),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlow")
        ),
        preIso = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByMediumChargedIsolationPFlow")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    maximumOccupancy = cms.uint32(0),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.8),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.8),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByMediumIsolationDBSumPtCorrPFlowLoose = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    relativeSumPtCut = cms.double(0.0),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlowLoose"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    applyDeltaBetaCorrection = cms.bool(True),
    deltaBetaFactor = cms.string('0.2739'),
    applyRhoCorrection = cms.bool(False),
    maximumSumPtCut = cms.double(0.8),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlowLoose")
        ),
        preIso = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByMediumChargedIsolationPFlowLoose")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    maximumOccupancy = cms.uint32(0),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.8),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.8),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByMediumIsolationMVA = cms.EDProducer("PFRecoTauDiscriminationByHPSSelection",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        mva = cms.PSet(
            cut = cms.double(0.884),
            Producer = cms.InputTag("hpsPFTauDiscriminationByIsolationMVAraw")
        ),
        BooleanOperator = cms.string('and')
    ),
    minTauPt = cms.double(0.0),
    coneSizeFormula = cms.string('max(min(0.1, 2.8/pt()),0.05)'),
    matchingCone = cms.double(0.1),
    decayModes = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        minMass = cms.double(-1000.0),
        maxMass = cms.string('1.'),
        nCharged = cms.uint32(1)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            assumeStripMass = cms.double(0.1349),
            minMass = cms.double(0.3),
            maxMass = cms.string('max(1.3, min(1.3*sqrt(pt/200.), 2.1))'),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            minPi0Mass = cms.double(0.05),
            maxMass = cms.string('max(1.2, min(1.2*sqrt(pt/200.), 2.0))'),
            maxPi0Mass = cms.double(0.2),
            nPiZeros = cms.uint32(2),
            minMass = cms.double(0.4),
            nCharged = cms.uint32(1),
            assumeStripMass = cms.double(0.0)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            minMass = cms.double(0.8),
            maxMass = cms.string('1.5'),
            nCharged = cms.uint32(3)
        ))
)


process.hpsPFTauDiscriminationByMediumIsolationMVA2 = cms.EDProducer("PFRecoTauDiscriminationByHPSSelection",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        mva = cms.PSet(
            cut = cms.double(0.9),
            Producer = cms.InputTag("hpsPFTauDiscriminationByIsolationMVA2raw")
        ),
        BooleanOperator = cms.string('and')
    ),
    minTauPt = cms.double(0.0),
    coneSizeFormula = cms.string('max(min(0.1, 2.8/pt()),0.05)'),
    matchingCone = cms.double(0.1),
    decayModes = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        minMass = cms.double(-1000.0),
        maxMass = cms.string('1.'),
        nCharged = cms.uint32(1)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            assumeStripMass = cms.double(0.1349),
            minMass = cms.double(0.3),
            maxMass = cms.string('max(1.3, min(1.3*sqrt(pt/200.), 2.1))'),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            minPi0Mass = cms.double(0.05),
            maxMass = cms.string('max(1.2, min(1.2*sqrt(pt/200.), 2.0))'),
            maxPi0Mass = cms.double(0.2),
            nPiZeros = cms.uint32(2),
            minMass = cms.double(0.4),
            nCharged = cms.uint32(1),
            assumeStripMass = cms.double(0.0)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            minMass = cms.double(0.8),
            maxMass = cms.string('1.5'),
            nCharged = cms.uint32(3)
        ))
)


process.hpsPFTauDiscriminationByMediumIsolationMVA2PFlow = cms.EDProducer("PFRecoTauDiscriminationByHPSSelection",
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlow"),
    Prediscriminants = cms.PSet(
        mva = cms.PSet(
            cut = cms.double(0.9),
            Producer = cms.InputTag("hpsPFTauDiscriminationByIsolationMVA2rawPFlow")
        ),
        BooleanOperator = cms.string('and')
    ),
    minTauPt = cms.double(0.0),
    coneSizeFormula = cms.string('max(min(0.1, 2.8/pt()),0.05)'),
    decayModes = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        minMass = cms.double(-1000.0),
        maxMass = cms.string('1.'),
        nCharged = cms.uint32(1)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            assumeStripMass = cms.double(0.1349),
            minMass = cms.double(0.3),
            maxMass = cms.string('max(1.3, min(1.3*sqrt(pt/200.), 2.1))'),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            minPi0Mass = cms.double(0.05),
            maxMass = cms.string('max(1.2, min(1.2*sqrt(pt/200.), 2.0))'),
            maxPi0Mass = cms.double(0.2),
            nPiZeros = cms.uint32(2),
            minMass = cms.double(0.4),
            nCharged = cms.uint32(1),
            assumeStripMass = cms.double(0.0)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            minMass = cms.double(0.8),
            maxMass = cms.string('1.5'),
            nCharged = cms.uint32(3)
        )),
    matchingCone = cms.double(0.1)
)


process.hpsPFTauDiscriminationByMediumIsolationMVA2PFlowLoose = cms.EDProducer("PFRecoTauDiscriminationByHPSSelection",
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlowLoose"),
    Prediscriminants = cms.PSet(
        mva = cms.PSet(
            cut = cms.double(0.9),
            Producer = cms.InputTag("hpsPFTauDiscriminationByIsolationMVA2rawPFlowLoose")
        ),
        BooleanOperator = cms.string('and')
    ),
    minTauPt = cms.double(0.0),
    coneSizeFormula = cms.string('max(min(0.1, 2.8/pt()),0.05)'),
    decayModes = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        minMass = cms.double(-1000.0),
        maxMass = cms.string('1.'),
        nCharged = cms.uint32(1)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            assumeStripMass = cms.double(0.1349),
            minMass = cms.double(0.3),
            maxMass = cms.string('max(1.3, min(1.3*sqrt(pt/200.), 2.1))'),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            minPi0Mass = cms.double(0.05),
            maxMass = cms.string('max(1.2, min(1.2*sqrt(pt/200.), 2.0))'),
            maxPi0Mass = cms.double(0.2),
            nPiZeros = cms.uint32(2),
            minMass = cms.double(0.4),
            nCharged = cms.uint32(1),
            assumeStripMass = cms.double(0.0)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            minMass = cms.double(0.8),
            maxMass = cms.string('1.5'),
            nCharged = cms.uint32(3)
        )),
    matchingCone = cms.double(0.1)
)


process.hpsPFTauDiscriminationByMediumIsolationMVAPFlow = cms.EDProducer("PFRecoTauDiscriminationByHPSSelection",
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlow"),
    Prediscriminants = cms.PSet(
        mva = cms.PSet(
            cut = cms.double(0.884),
            Producer = cms.InputTag("hpsPFTauDiscriminationByIsolationMVArawPFlow")
        ),
        BooleanOperator = cms.string('and')
    ),
    minTauPt = cms.double(0.0),
    coneSizeFormula = cms.string('max(min(0.1, 2.8/pt()),0.05)'),
    decayModes = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        minMass = cms.double(-1000.0),
        maxMass = cms.string('1.'),
        nCharged = cms.uint32(1)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            assumeStripMass = cms.double(0.1349),
            minMass = cms.double(0.3),
            maxMass = cms.string('max(1.3, min(1.3*sqrt(pt/200.), 2.1))'),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            minPi0Mass = cms.double(0.05),
            maxMass = cms.string('max(1.2, min(1.2*sqrt(pt/200.), 2.0))'),
            maxPi0Mass = cms.double(0.2),
            nPiZeros = cms.uint32(2),
            minMass = cms.double(0.4),
            nCharged = cms.uint32(1),
            assumeStripMass = cms.double(0.0)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            minMass = cms.double(0.8),
            maxMass = cms.string('1.5'),
            nCharged = cms.uint32(3)
        )),
    matchingCone = cms.double(0.1)
)


process.hpsPFTauDiscriminationByMediumIsolationMVAPFlowLoose = cms.EDProducer("PFRecoTauDiscriminationByHPSSelection",
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlowLoose"),
    Prediscriminants = cms.PSet(
        mva = cms.PSet(
            cut = cms.double(0.884),
            Producer = cms.InputTag("hpsPFTauDiscriminationByIsolationMVArawPFlowLoose")
        ),
        BooleanOperator = cms.string('and')
    ),
    minTauPt = cms.double(0.0),
    coneSizeFormula = cms.string('max(min(0.1, 2.8/pt()),0.05)'),
    decayModes = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        minMass = cms.double(-1000.0),
        maxMass = cms.string('1.'),
        nCharged = cms.uint32(1)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            assumeStripMass = cms.double(0.1349),
            minMass = cms.double(0.3),
            maxMass = cms.string('max(1.3, min(1.3*sqrt(pt/200.), 2.1))'),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            minPi0Mass = cms.double(0.05),
            maxMass = cms.string('max(1.2, min(1.2*sqrt(pt/200.), 2.0))'),
            maxPi0Mass = cms.double(0.2),
            nPiZeros = cms.uint32(2),
            minMass = cms.double(0.4),
            nCharged = cms.uint32(1),
            assumeStripMass = cms.double(0.0)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            minMass = cms.double(0.8),
            maxMass = cms.string('1.5'),
            nCharged = cms.uint32(3)
        )),
    matchingCone = cms.double(0.1)
)


process.hpsPFTauDiscriminationByMediumIsolationPFlow = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlow"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.38'),
    applyRhoCorrection = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    isoConeSizeForDeltaBeta = cms.double(0.5),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlow")
        ),
        preIso = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByMediumChargedIsolationPFlow")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.8),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.8),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByMediumIsolationPFlowLoose = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlowLoose"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.38'),
    applyRhoCorrection = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    isoConeSizeForDeltaBeta = cms.double(0.5),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlowLoose")
        ),
        preIso = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByMediumChargedIsolationPFlowLoose")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.8),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.8),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByMediumMuonRejection = cms.EDProducer("PFRecoTauDiscriminationAgainstMuon",
    a = cms.double(0.5),
    c = cms.double(0.0),
    b = cms.double(0.5),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    discriminatorOption = cms.string('noAllArbitrated'),
    HoPMin = cms.double(0.2),
    maxNumberOfMatches = cms.int32(0),
    checkNumMatches = cms.bool(False)
)


process.hpsPFTauDiscriminationByMediumMuonRejection2 = cms.EDProducer("PFRecoTauDiscriminationAgainstMuon2",
    maxNumberOfHitsLast2Stations = cms.int32(0),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    verbosity = cms.int32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    discriminatorOption = cms.string('medium'),
    HoPMin = cms.double(0.2),
    maxNumberOfMatches = cms.int32(0),
    dRmuonMatch = cms.double(0.3),
    srcMuons = cms.InputTag("muons"),
    doCaloMuonVeto = cms.bool(False)
)


process.hpsPFTauDiscriminationByMediumMuonRejection2PFlow = cms.EDProducer("PFRecoTauDiscriminationAgainstMuon2",
    maxNumberOfHitsLast2Stations = cms.int32(0),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlow"),
    verbosity = cms.int32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    discriminatorOption = cms.string('medium'),
    HoPMin = cms.double(0.2),
    maxNumberOfMatches = cms.int32(0),
    dRmuonMatch = cms.double(0.3),
    srcMuons = cms.InputTag("muons"),
    doCaloMuonVeto = cms.bool(False)
)


process.hpsPFTauDiscriminationByMediumMuonRejection2PFlowLoose = cms.EDProducer("PFRecoTauDiscriminationAgainstMuon2",
    maxNumberOfHitsLast2Stations = cms.int32(0),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlowLoose"),
    verbosity = cms.int32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    discriminatorOption = cms.string('medium'),
    HoPMin = cms.double(0.2),
    maxNumberOfMatches = cms.int32(0),
    dRmuonMatch = cms.double(0.3),
    srcMuons = cms.InputTag("muons"),
    doCaloMuonVeto = cms.bool(False)
)


process.hpsPFTauDiscriminationByMediumMuonRejectionPFlow = cms.EDProducer("PFRecoTauDiscriminationAgainstMuon",
    a = cms.double(0.5),
    c = cms.double(0.0),
    b = cms.double(0.5),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlow"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    discriminatorOption = cms.string('noAllArbitrated'),
    HoPMin = cms.double(0.2),
    maxNumberOfMatches = cms.int32(0),
    checkNumMatches = cms.bool(False)
)


process.hpsPFTauDiscriminationByMediumMuonRejectionPFlowLoose = cms.EDProducer("PFRecoTauDiscriminationAgainstMuon",
    a = cms.double(0.5),
    c = cms.double(0.0),
    b = cms.double(0.5),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlowLoose"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    discriminatorOption = cms.string('noAllArbitrated'),
    HoPMin = cms.double(0.2),
    maxNumberOfMatches = cms.int32(0),
    checkNumMatches = cms.bool(False)
)


process.hpsPFTauDiscriminationByRawChargedIsolationDBSumPtCorr = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    maximumSumPtCut = cms.double(2.0),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    rhoConeSize = cms.double(0.5),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.4576'),
    relativeSumPtCut = cms.double(0.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(True),
    applyRelativeSumPtCut = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    rhoUEOffsetCorrection = cms.double(1.0),
    ApplyDiscriminationByECALIsolation = cms.bool(False),
    storeRawSumPt = cms.bool(True),
    applyRhoCorrection = cms.bool(False),
    particleFlowSrc = cms.InputTag("particleFlow")
)


process.hpsPFTauDiscriminationByRawChargedIsolationDBSumPtCorrPFlow = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlow"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    maximumSumPtCut = cms.double(2.0),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    rhoConeSize = cms.double(0.5),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.4576'),
    relativeSumPtCut = cms.double(0.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlow")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(True),
    applyRelativeSumPtCut = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    rhoUEOffsetCorrection = cms.double(1.0),
    ApplyDiscriminationByECALIsolation = cms.bool(False),
    storeRawSumPt = cms.bool(True),
    applyRhoCorrection = cms.bool(False),
    particleFlowSrc = cms.InputTag("particleFlow")
)


process.hpsPFTauDiscriminationByRawChargedIsolationDBSumPtCorrPFlowLoose = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlowLoose"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    maximumSumPtCut = cms.double(2.0),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    rhoConeSize = cms.double(0.5),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.4576'),
    relativeSumPtCut = cms.double(0.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlowLoose")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(True),
    applyRelativeSumPtCut = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    rhoUEOffsetCorrection = cms.double(1.0),
    ApplyDiscriminationByECALIsolation = cms.bool(False),
    storeRawSumPt = cms.bool(True),
    applyRhoCorrection = cms.bool(False),
    particleFlowSrc = cms.InputTag("particleFlow")
)


process.hpsPFTauDiscriminationByRawCombinedIsolationDBSumPtCorr = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    maximumSumPtCut = cms.double(2.0),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    rhoConeSize = cms.double(0.5),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.4576'),
    relativeSumPtCut = cms.double(0.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(True),
    applyRelativeSumPtCut = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    rhoUEOffsetCorrection = cms.double(1.0),
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    storeRawSumPt = cms.bool(True),
    applyRhoCorrection = cms.bool(False),
    particleFlowSrc = cms.InputTag("particleFlow")
)


process.hpsPFTauDiscriminationByRawCombinedIsolationDBSumPtCorr3Hits = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    maximumSumPtCut = cms.double(2.0),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    rhoConeSize = cms.double(0.5),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.4576'),
    relativeSumPtCut = cms.double(0.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(True),
    applyRelativeSumPtCut = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    rhoUEOffsetCorrection = cms.double(1.0),
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    storeRawSumPt = cms.bool(True),
    applyRhoCorrection = cms.bool(False),
    particleFlowSrc = cms.InputTag("particleFlow")
)


process.hpsPFTauDiscriminationByRawCombinedIsolationDBSumPtCorr3HitsPFlow = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlow"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    maximumSumPtCut = cms.double(2.0),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    rhoConeSize = cms.double(0.5),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.4576'),
    relativeSumPtCut = cms.double(0.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlow")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(True),
    applyRelativeSumPtCut = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    rhoUEOffsetCorrection = cms.double(1.0),
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    storeRawSumPt = cms.bool(True),
    applyRhoCorrection = cms.bool(False),
    particleFlowSrc = cms.InputTag("particleFlow")
)


process.hpsPFTauDiscriminationByRawCombinedIsolationDBSumPtCorr3HitsPFlowLoose = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlowLoose"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    maximumSumPtCut = cms.double(2.0),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    rhoConeSize = cms.double(0.5),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.4576'),
    relativeSumPtCut = cms.double(0.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlowLoose")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(True),
    applyRelativeSumPtCut = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    rhoUEOffsetCorrection = cms.double(1.0),
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    storeRawSumPt = cms.bool(True),
    applyRhoCorrection = cms.bool(False),
    particleFlowSrc = cms.InputTag("particleFlow")
)


process.hpsPFTauDiscriminationByRawCombinedIsolationDBSumPtCorrPFlow = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlow"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    maximumSumPtCut = cms.double(2.0),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    rhoConeSize = cms.double(0.5),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.4576'),
    relativeSumPtCut = cms.double(0.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlow")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(True),
    applyRelativeSumPtCut = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    rhoUEOffsetCorrection = cms.double(1.0),
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    storeRawSumPt = cms.bool(True),
    applyRhoCorrection = cms.bool(False),
    particleFlowSrc = cms.InputTag("particleFlow")
)


process.hpsPFTauDiscriminationByRawCombinedIsolationDBSumPtCorrPFlowLoose = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlowLoose"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    maximumSumPtCut = cms.double(2.0),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    rhoConeSize = cms.double(0.5),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.4576'),
    relativeSumPtCut = cms.double(0.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlowLoose")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(True),
    applyRelativeSumPtCut = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    rhoUEOffsetCorrection = cms.double(1.0),
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    storeRawSumPt = cms.bool(True),
    applyRhoCorrection = cms.bool(False),
    particleFlowSrc = cms.InputTag("particleFlow")
)


process.hpsPFTauDiscriminationByRawGammaIsolationDBSumPtCorr = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    maximumSumPtCut = cms.double(2.0),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    rhoConeSize = cms.double(0.5),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.4576'),
    relativeSumPtCut = cms.double(0.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(True),
    applyRelativeSumPtCut = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    rhoUEOffsetCorrection = cms.double(1.0),
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    storeRawSumPt = cms.bool(True),
    applyRhoCorrection = cms.bool(False),
    particleFlowSrc = cms.InputTag("particleFlow")
)


process.hpsPFTauDiscriminationByRawGammaIsolationDBSumPtCorrPFlow = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlow"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    maximumSumPtCut = cms.double(2.0),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    rhoConeSize = cms.double(0.5),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.4576'),
    relativeSumPtCut = cms.double(0.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlow")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(True),
    applyRelativeSumPtCut = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    rhoUEOffsetCorrection = cms.double(1.0),
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    storeRawSumPt = cms.bool(True),
    applyRhoCorrection = cms.bool(False),
    particleFlowSrc = cms.InputTag("particleFlow")
)


process.hpsPFTauDiscriminationByRawGammaIsolationDBSumPtCorrPFlowLoose = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlowLoose"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    maximumSumPtCut = cms.double(2.0),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    rhoConeSize = cms.double(0.5),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.4576'),
    relativeSumPtCut = cms.double(0.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlowLoose")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(True),
    applyRelativeSumPtCut = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    rhoUEOffsetCorrection = cms.double(1.0),
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    storeRawSumPt = cms.bool(True),
    applyRhoCorrection = cms.bool(False),
    particleFlowSrc = cms.InputTag("particleFlow")
)


process.hpsPFTauDiscriminationByTightChargedIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(False),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.4576'),
    applyRhoCorrection = cms.bool(False),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    rhoUEOffsetCorrection = cms.double(1.0),
    maximumSumPtCut = cms.double(0.8),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    applyDeltaBetaCorrection = cms.bool(True),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    relativeSumPtCut = cms.double(0.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByTightChargedIsolationPFlow = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(False),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlow"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.4576'),
    applyRhoCorrection = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    maximumSumPtCut = cms.double(0.8),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlow")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    applyDeltaBetaCorrection = cms.bool(True),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    relativeSumPtCut = cms.double(0.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    rhoUEOffsetCorrection = cms.double(1.0),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByTightChargedIsolationPFlowLoose = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(False),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlowLoose"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.4576'),
    applyRhoCorrection = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    maximumSumPtCut = cms.double(0.8),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlowLoose")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    applyDeltaBetaCorrection = cms.bool(True),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    relativeSumPtCut = cms.double(0.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    rhoUEOffsetCorrection = cms.double(1.0),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByTightCombinedIsolationDBSumPtCorr = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    relativeSumPtCut = cms.double(0.0),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    applyDeltaBetaCorrection = cms.bool(True),
    deltaBetaFactor = cms.string('0.4576'),
    applyRhoCorrection = cms.bool(False),
    maximumSumPtCut = cms.double(0.8),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    maximumOccupancy = cms.uint32(0),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByTightCombinedIsolationDBSumPtCorr3Hits = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.4576'),
    applyRhoCorrection = cms.bool(False),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    rhoUEOffsetCorrection = cms.double(1.0),
    maximumSumPtCut = cms.double(0.8),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    applyDeltaBetaCorrection = cms.bool(True),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    relativeSumPtCut = cms.double(0.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByTightCombinedIsolationDBSumPtCorr3HitsPFlow = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlow"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.4576'),
    applyRhoCorrection = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    maximumSumPtCut = cms.double(0.8),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlow")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    applyDeltaBetaCorrection = cms.bool(True),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    relativeSumPtCut = cms.double(0.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    rhoUEOffsetCorrection = cms.double(1.0),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByTightCombinedIsolationDBSumPtCorr3HitsPFlowLoose = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlowLoose"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.4576'),
    applyRhoCorrection = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    maximumSumPtCut = cms.double(0.8),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlowLoose")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    applyDeltaBetaCorrection = cms.bool(True),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    relativeSumPtCut = cms.double(0.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    rhoUEOffsetCorrection = cms.double(1.0),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByTightCombinedIsolationDBSumPtCorrPFlow = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlow"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.4576'),
    applyRhoCorrection = cms.bool(False),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    rhoUEOffsetCorrection = cms.double(1.0),
    maximumSumPtCut = cms.double(0.8),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlow")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    applyDeltaBetaCorrection = cms.bool(True),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    relativeSumPtCut = cms.double(0.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByTightCombinedIsolationDBSumPtCorrPFlowLoose = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlowLoose"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.4576'),
    applyRhoCorrection = cms.bool(False),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    rhoUEOffsetCorrection = cms.double(1.0),
    maximumSumPtCut = cms.double(0.8),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlowLoose")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    applyDeltaBetaCorrection = cms.bool(True),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    relativeSumPtCut = cms.double(0.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByTightElectronRejection = cms.EDProducer("PFRecoTauDiscriminationAgainstElectron",
    ApplyCut_ElectronPreID_2D = cms.bool(False),
    ElecPreID0_HOverPLead_minValue = cms.double(0.05),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    ApplyCut_ElectronPreID = cms.bool(False),
    ApplyCut_HcalTotOverPLead = cms.bool(False),
    EOverPLead_minValue = cms.double(0.8),
    ElecPreID1_EOverPLead_maxValue = cms.double(0.8),
    HcalMaxOverPLead_minValue = cms.double(0.1),
    BremCombined_HOP = cms.double(0.1),
    ApplyCut_EmFraction = cms.bool(False),
    EmFraction_maxValue = cms.double(0.9),
    BremCombined_Mass = cms.double(0.55),
    ApplyCut_PFElectronMVA = cms.bool(True),
    PFElectronMVA_maxValue = cms.double(-0.1),
    ApplyCut_HcalMaxOverPLead = cms.bool(False),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    ApplyCut_BremCombined = cms.bool(True),
    Hcal3x3OverPLead_minValue = cms.double(0.1),
    ElecPreID1_HOverPLead_minValue = cms.double(0.15),
    ElecPreID0_EOverPLead_maxValue = cms.double(0.95),
    BremsRecoveryEOverPLead_minValue = cms.double(0.8),
    ApplyCut_EcalCrackCut = cms.bool(True),
    BremCombined_StripSize = cms.double(0.03),
    EOverPLead_maxValue = cms.double(1.8),
    HcalTotOverPLead_minValue = cms.double(0.1),
    ApplyCut_BremsRecoveryEOverPLead = cms.bool(False),
    ApplyCut_Hcal3x3OverPLead = cms.bool(False),
    ApplyCut_EOverPLead = cms.bool(False),
    BremCombined_Fraction = cms.double(0.99),
    BremsRecoveryEOverPLead_maxValue = cms.double(1.8)
)


process.hpsPFTauDiscriminationByTightElectronRejectionPFlow = cms.EDProducer("PFRecoTauDiscriminationAgainstElectron",
    ApplyCut_ElectronPreID_2D = cms.bool(False),
    ApplyCut_EOverPLead = cms.bool(False),
    ElecPreID0_HOverPLead_minValue = cms.double(0.05),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlow"),
    ApplyCut_ElectronPreID = cms.bool(False),
    ApplyCut_HcalTotOverPLead = cms.bool(False),
    EOverPLead_minValue = cms.double(0.8),
    ElecPreID1_EOverPLead_maxValue = cms.double(0.8),
    HcalMaxOverPLead_minValue = cms.double(0.1),
    ApplyCut_EmFraction = cms.bool(False),
    EmFraction_maxValue = cms.double(0.9),
    BremCombined_Mass = cms.double(0.55),
    ApplyCut_PFElectronMVA = cms.bool(True),
    PFElectronMVA_maxValue = cms.double(-0.1),
    ApplyCut_HcalMaxOverPLead = cms.bool(False),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    ApplyCut_BremCombined = cms.bool(True),
    Hcal3x3OverPLead_minValue = cms.double(0.1),
    ElecPreID1_HOverPLead_minValue = cms.double(0.15),
    ElecPreID0_EOverPLead_maxValue = cms.double(0.95),
    BremsRecoveryEOverPLead_minValue = cms.double(0.8),
    ApplyCut_EcalCrackCut = cms.bool(True),
    BremCombined_StripSize = cms.double(0.03),
    EOverPLead_maxValue = cms.double(1.8),
    HcalTotOverPLead_minValue = cms.double(0.1),
    ApplyCut_BremsRecoveryEOverPLead = cms.bool(False),
    ApplyCut_Hcal3x3OverPLead = cms.bool(False),
    BremCombined_HOP = cms.double(0.1),
    BremCombined_Fraction = cms.double(0.99),
    BremsRecoveryEOverPLead_maxValue = cms.double(1.8)
)


process.hpsPFTauDiscriminationByTightElectronRejectionPFlowLoose = cms.EDProducer("PFRecoTauDiscriminationAgainstElectron",
    ApplyCut_ElectronPreID_2D = cms.bool(False),
    ApplyCut_EOverPLead = cms.bool(False),
    ElecPreID0_HOverPLead_minValue = cms.double(0.05),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlowLoose"),
    ApplyCut_ElectronPreID = cms.bool(False),
    ApplyCut_HcalTotOverPLead = cms.bool(False),
    EOverPLead_minValue = cms.double(0.8),
    ElecPreID1_EOverPLead_maxValue = cms.double(0.8),
    HcalMaxOverPLead_minValue = cms.double(0.1),
    ApplyCut_EmFraction = cms.bool(False),
    EmFraction_maxValue = cms.double(0.9),
    BremCombined_Mass = cms.double(0.55),
    ApplyCut_PFElectronMVA = cms.bool(True),
    PFElectronMVA_maxValue = cms.double(-0.1),
    ApplyCut_HcalMaxOverPLead = cms.bool(False),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    ApplyCut_BremCombined = cms.bool(True),
    Hcal3x3OverPLead_minValue = cms.double(0.1),
    ElecPreID1_HOverPLead_minValue = cms.double(0.15),
    ElecPreID0_EOverPLead_maxValue = cms.double(0.95),
    BremsRecoveryEOverPLead_minValue = cms.double(0.8),
    ApplyCut_EcalCrackCut = cms.bool(True),
    BremCombined_StripSize = cms.double(0.03),
    EOverPLead_maxValue = cms.double(1.8),
    HcalTotOverPLead_minValue = cms.double(0.1),
    ApplyCut_BremsRecoveryEOverPLead = cms.bool(False),
    ApplyCut_Hcal3x3OverPLead = cms.bool(False),
    BremCombined_HOP = cms.double(0.1),
    BremCombined_Fraction = cms.double(0.99),
    BremsRecoveryEOverPLead_maxValue = cms.double(1.8)
)


process.hpsPFTauDiscriminationByTightIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.38'),
    applyRhoCorrection = cms.bool(False),
    isoConeSizeForDeltaBeta = cms.double(0.5),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        ),
        preIso = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByTightChargedIsolation")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByTightIsolationDBSumPtCorr = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.4576'),
    applyRhoCorrection = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    maximumSumPtCut = cms.double(0.5),
    relativeSumPtCut = cms.double(0.0),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        ),
        preIso = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByTightChargedIsolation")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    applyDeltaBetaCorrection = cms.bool(True),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    rhoConeSize = cms.double(0.5),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    particleFlowSrc = cms.InputTag("particleFlow"),
    rhoUEOffsetCorrection = cms.double(1.0),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByTightIsolationDBSumPtCorrPFlow = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    relativeSumPtCut = cms.double(0.0),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlow"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    applyDeltaBetaCorrection = cms.bool(True),
    deltaBetaFactor = cms.string('0.4576'),
    applyRhoCorrection = cms.bool(False),
    maximumSumPtCut = cms.double(0.5),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlow")
        ),
        preIso = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByTightChargedIsolationPFlow")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    maximumOccupancy = cms.uint32(0),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByTightIsolationDBSumPtCorrPFlowLoose = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    relativeSumPtCut = cms.double(0.0),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlowLoose"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    applyDeltaBetaCorrection = cms.bool(True),
    deltaBetaFactor = cms.string('0.4576'),
    applyRhoCorrection = cms.bool(False),
    maximumSumPtCut = cms.double(0.5),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlowLoose")
        ),
        preIso = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByTightChargedIsolationPFlowLoose")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    maximumOccupancy = cms.uint32(0),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByTightIsolationMVA = cms.EDProducer("PFRecoTauDiscriminationByHPSSelection",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        mva = cms.PSet(
            cut = cms.double(0.921),
            Producer = cms.InputTag("hpsPFTauDiscriminationByIsolationMVAraw")
        ),
        BooleanOperator = cms.string('and')
    ),
    minTauPt = cms.double(0.0),
    coneSizeFormula = cms.string('max(min(0.1, 2.8/pt()),0.05)'),
    matchingCone = cms.double(0.1),
    decayModes = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        minMass = cms.double(-1000.0),
        maxMass = cms.string('1.'),
        nCharged = cms.uint32(1)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            assumeStripMass = cms.double(0.1349),
            minMass = cms.double(0.3),
            maxMass = cms.string('max(1.3, min(1.3*sqrt(pt/200.), 2.1))'),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            minPi0Mass = cms.double(0.05),
            maxMass = cms.string('max(1.2, min(1.2*sqrt(pt/200.), 2.0))'),
            maxPi0Mass = cms.double(0.2),
            nPiZeros = cms.uint32(2),
            minMass = cms.double(0.4),
            nCharged = cms.uint32(1),
            assumeStripMass = cms.double(0.0)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            minMass = cms.double(0.8),
            maxMass = cms.string('1.5'),
            nCharged = cms.uint32(3)
        ))
)


process.hpsPFTauDiscriminationByTightIsolationMVA2 = cms.EDProducer("PFRecoTauDiscriminationByHPSSelection",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        mva = cms.PSet(
            cut = cms.double(0.94),
            Producer = cms.InputTag("hpsPFTauDiscriminationByIsolationMVA2raw")
        ),
        BooleanOperator = cms.string('and')
    ),
    minTauPt = cms.double(0.0),
    coneSizeFormula = cms.string('max(min(0.1, 2.8/pt()),0.05)'),
    matchingCone = cms.double(0.1),
    decayModes = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        minMass = cms.double(-1000.0),
        maxMass = cms.string('1.'),
        nCharged = cms.uint32(1)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            assumeStripMass = cms.double(0.1349),
            minMass = cms.double(0.3),
            maxMass = cms.string('max(1.3, min(1.3*sqrt(pt/200.), 2.1))'),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            minPi0Mass = cms.double(0.05),
            maxMass = cms.string('max(1.2, min(1.2*sqrt(pt/200.), 2.0))'),
            maxPi0Mass = cms.double(0.2),
            nPiZeros = cms.uint32(2),
            minMass = cms.double(0.4),
            nCharged = cms.uint32(1),
            assumeStripMass = cms.double(0.0)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            minMass = cms.double(0.8),
            maxMass = cms.string('1.5'),
            nCharged = cms.uint32(3)
        ))
)


process.hpsPFTauDiscriminationByTightIsolationMVA2PFlow = cms.EDProducer("PFRecoTauDiscriminationByHPSSelection",
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlow"),
    Prediscriminants = cms.PSet(
        mva = cms.PSet(
            cut = cms.double(0.94),
            Producer = cms.InputTag("hpsPFTauDiscriminationByIsolationMVA2rawPFlow")
        ),
        BooleanOperator = cms.string('and')
    ),
    minTauPt = cms.double(0.0),
    coneSizeFormula = cms.string('max(min(0.1, 2.8/pt()),0.05)'),
    decayModes = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        minMass = cms.double(-1000.0),
        maxMass = cms.string('1.'),
        nCharged = cms.uint32(1)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            assumeStripMass = cms.double(0.1349),
            minMass = cms.double(0.3),
            maxMass = cms.string('max(1.3, min(1.3*sqrt(pt/200.), 2.1))'),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            minPi0Mass = cms.double(0.05),
            maxMass = cms.string('max(1.2, min(1.2*sqrt(pt/200.), 2.0))'),
            maxPi0Mass = cms.double(0.2),
            nPiZeros = cms.uint32(2),
            minMass = cms.double(0.4),
            nCharged = cms.uint32(1),
            assumeStripMass = cms.double(0.0)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            minMass = cms.double(0.8),
            maxMass = cms.string('1.5'),
            nCharged = cms.uint32(3)
        )),
    matchingCone = cms.double(0.1)
)


process.hpsPFTauDiscriminationByTightIsolationMVA2PFlowLoose = cms.EDProducer("PFRecoTauDiscriminationByHPSSelection",
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlowLoose"),
    Prediscriminants = cms.PSet(
        mva = cms.PSet(
            cut = cms.double(0.94),
            Producer = cms.InputTag("hpsPFTauDiscriminationByIsolationMVA2rawPFlowLoose")
        ),
        BooleanOperator = cms.string('and')
    ),
    minTauPt = cms.double(0.0),
    coneSizeFormula = cms.string('max(min(0.1, 2.8/pt()),0.05)'),
    decayModes = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        minMass = cms.double(-1000.0),
        maxMass = cms.string('1.'),
        nCharged = cms.uint32(1)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            assumeStripMass = cms.double(0.1349),
            minMass = cms.double(0.3),
            maxMass = cms.string('max(1.3, min(1.3*sqrt(pt/200.), 2.1))'),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            minPi0Mass = cms.double(0.05),
            maxMass = cms.string('max(1.2, min(1.2*sqrt(pt/200.), 2.0))'),
            maxPi0Mass = cms.double(0.2),
            nPiZeros = cms.uint32(2),
            minMass = cms.double(0.4),
            nCharged = cms.uint32(1),
            assumeStripMass = cms.double(0.0)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            minMass = cms.double(0.8),
            maxMass = cms.string('1.5'),
            nCharged = cms.uint32(3)
        )),
    matchingCone = cms.double(0.1)
)


process.hpsPFTauDiscriminationByTightIsolationMVAPFlow = cms.EDProducer("PFRecoTauDiscriminationByHPSSelection",
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlow"),
    Prediscriminants = cms.PSet(
        mva = cms.PSet(
            cut = cms.double(0.921),
            Producer = cms.InputTag("hpsPFTauDiscriminationByIsolationMVArawPFlow")
        ),
        BooleanOperator = cms.string('and')
    ),
    minTauPt = cms.double(0.0),
    coneSizeFormula = cms.string('max(min(0.1, 2.8/pt()),0.05)'),
    decayModes = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        minMass = cms.double(-1000.0),
        maxMass = cms.string('1.'),
        nCharged = cms.uint32(1)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            assumeStripMass = cms.double(0.1349),
            minMass = cms.double(0.3),
            maxMass = cms.string('max(1.3, min(1.3*sqrt(pt/200.), 2.1))'),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            minPi0Mass = cms.double(0.05),
            maxMass = cms.string('max(1.2, min(1.2*sqrt(pt/200.), 2.0))'),
            maxPi0Mass = cms.double(0.2),
            nPiZeros = cms.uint32(2),
            minMass = cms.double(0.4),
            nCharged = cms.uint32(1),
            assumeStripMass = cms.double(0.0)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            minMass = cms.double(0.8),
            maxMass = cms.string('1.5'),
            nCharged = cms.uint32(3)
        )),
    matchingCone = cms.double(0.1)
)


process.hpsPFTauDiscriminationByTightIsolationMVAPFlowLoose = cms.EDProducer("PFRecoTauDiscriminationByHPSSelection",
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlowLoose"),
    Prediscriminants = cms.PSet(
        mva = cms.PSet(
            cut = cms.double(0.921),
            Producer = cms.InputTag("hpsPFTauDiscriminationByIsolationMVArawPFlowLoose")
        ),
        BooleanOperator = cms.string('and')
    ),
    minTauPt = cms.double(0.0),
    coneSizeFormula = cms.string('max(min(0.1, 2.8/pt()),0.05)'),
    decayModes = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        minMass = cms.double(-1000.0),
        maxMass = cms.string('1.'),
        nCharged = cms.uint32(1)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            assumeStripMass = cms.double(0.1349),
            minMass = cms.double(0.3),
            maxMass = cms.string('max(1.3, min(1.3*sqrt(pt/200.), 2.1))'),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            minPi0Mass = cms.double(0.05),
            maxMass = cms.string('max(1.2, min(1.2*sqrt(pt/200.), 2.0))'),
            maxPi0Mass = cms.double(0.2),
            nPiZeros = cms.uint32(2),
            minMass = cms.double(0.4),
            nCharged = cms.uint32(1),
            assumeStripMass = cms.double(0.0)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            minMass = cms.double(0.8),
            maxMass = cms.string('1.5'),
            nCharged = cms.uint32(3)
        )),
    matchingCone = cms.double(0.1)
)


process.hpsPFTauDiscriminationByTightIsolationPFlow = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlow"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.38'),
    applyRhoCorrection = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    isoConeSizeForDeltaBeta = cms.double(0.5),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlow")
        ),
        preIso = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByTightChargedIsolationPFlow")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByTightIsolationPFlowLoose = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlowLoose"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.38'),
    applyRhoCorrection = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    isoConeSizeForDeltaBeta = cms.double(0.5),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlowLoose")
        ),
        preIso = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByTightChargedIsolationPFlowLoose")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByTightMuonRejection = cms.EDProducer("PFRecoTauDiscriminationAgainstMuon",
    a = cms.double(0.5),
    c = cms.double(0.0),
    b = cms.double(0.5),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    discriminatorOption = cms.string('noAllArbitratedWithHOP'),
    HoPMin = cms.double(0.2),
    maxNumberOfMatches = cms.int32(0),
    checkNumMatches = cms.bool(False)
)


process.hpsPFTauDiscriminationByTightMuonRejection2 = cms.EDProducer("PFRecoTauDiscriminationAgainstMuon2",
    maxNumberOfHitsLast2Stations = cms.int32(0),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    verbosity = cms.int32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    discriminatorOption = cms.string('tight'),
    HoPMin = cms.double(0.2),
    maxNumberOfMatches = cms.int32(0),
    dRmuonMatch = cms.double(0.3),
    srcMuons = cms.InputTag("muons"),
    doCaloMuonVeto = cms.bool(False)
)


process.hpsPFTauDiscriminationByTightMuonRejection2PFlow = cms.EDProducer("PFRecoTauDiscriminationAgainstMuon2",
    maxNumberOfHitsLast2Stations = cms.int32(0),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlow"),
    verbosity = cms.int32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    discriminatorOption = cms.string('tight'),
    HoPMin = cms.double(0.2),
    maxNumberOfMatches = cms.int32(0),
    dRmuonMatch = cms.double(0.3),
    srcMuons = cms.InputTag("muons"),
    doCaloMuonVeto = cms.bool(False)
)


process.hpsPFTauDiscriminationByTightMuonRejection2PFlowLoose = cms.EDProducer("PFRecoTauDiscriminationAgainstMuon2",
    maxNumberOfHitsLast2Stations = cms.int32(0),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlowLoose"),
    verbosity = cms.int32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    discriminatorOption = cms.string('tight'),
    HoPMin = cms.double(0.2),
    maxNumberOfMatches = cms.int32(0),
    dRmuonMatch = cms.double(0.3),
    srcMuons = cms.InputTag("muons"),
    doCaloMuonVeto = cms.bool(False)
)


process.hpsPFTauDiscriminationByTightMuonRejection3 = cms.EDProducer("PFRecoTauDiscriminationAgainstMuon2",
    maxNumberOfHitsLast2Stations = cms.int32(0),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    verbosity = cms.int32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    discriminatorOption = cms.string('custom'),
    HoPMin = cms.double(0.2),
    maxNumberOfMatches = cms.int32(1),
    dRmuonMatch = cms.double(0.3),
    srcMuons = cms.InputTag("muons"),
    doCaloMuonVeto = cms.bool(True)
)


process.hpsPFTauDiscriminationByTightMuonRejection3PFlow = cms.EDProducer("PFRecoTauDiscriminationAgainstMuon2",
    maxNumberOfHitsLast2Stations = cms.int32(0),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlow"),
    verbosity = cms.int32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    discriminatorOption = cms.string('custom'),
    HoPMin = cms.double(0.2),
    maxNumberOfMatches = cms.int32(1),
    dRmuonMatch = cms.double(0.3),
    srcMuons = cms.InputTag("muons"),
    doCaloMuonVeto = cms.bool(True)
)


process.hpsPFTauDiscriminationByTightMuonRejection3PFlowLoose = cms.EDProducer("PFRecoTauDiscriminationAgainstMuon2",
    maxNumberOfHitsLast2Stations = cms.int32(0),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlowLoose"),
    verbosity = cms.int32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    discriminatorOption = cms.string('custom'),
    HoPMin = cms.double(0.2),
    maxNumberOfMatches = cms.int32(1),
    dRmuonMatch = cms.double(0.3),
    srcMuons = cms.InputTag("muons"),
    doCaloMuonVeto = cms.bool(True)
)


process.hpsPFTauDiscriminationByTightMuonRejectionPFlow = cms.EDProducer("PFRecoTauDiscriminationAgainstMuon",
    a = cms.double(0.5),
    c = cms.double(0.0),
    b = cms.double(0.5),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlow"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    discriminatorOption = cms.string('noAllArbitratedWithHOP'),
    HoPMin = cms.double(0.2),
    maxNumberOfMatches = cms.int32(0),
    checkNumMatches = cms.bool(False)
)


process.hpsPFTauDiscriminationByTightMuonRejectionPFlowLoose = cms.EDProducer("PFRecoTauDiscriminationAgainstMuon",
    a = cms.double(0.5),
    c = cms.double(0.0),
    b = cms.double(0.5),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlowLoose"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    discriminatorOption = cms.string('noAllArbitratedWithHOP'),
    HoPMin = cms.double(0.2),
    maxNumberOfMatches = cms.int32(0),
    checkNumMatches = cms.bool(False)
)


process.hpsPFTauDiscriminationByVLooseChargedIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    maximumSumPtCut = cms.double(3.0),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.1647'),
    relativeSumPtCut = cms.double(0.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(True),
    applyRelativeSumPtCut = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    rhoUEOffsetCorrection = cms.double(1.0),
    ApplyDiscriminationByECALIsolation = cms.bool(False),
    applyRhoCorrection = cms.bool(False),
    customOuterCone = cms.double(0.3),
    particleFlowSrc = cms.InputTag("particleFlow")
)


process.hpsPFTauDiscriminationByVLooseChargedIsolationPFlow = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlow"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    maximumSumPtCut = cms.double(3.0),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.1647'),
    relativeSumPtCut = cms.double(0.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlow")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(True),
    applyRelativeSumPtCut = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    rhoUEOffsetCorrection = cms.double(1.0),
    ApplyDiscriminationByECALIsolation = cms.bool(False),
    applyRhoCorrection = cms.bool(False),
    customOuterCone = cms.double(0.3),
    particleFlowSrc = cms.InputTag("particleFlow")
)


process.hpsPFTauDiscriminationByVLooseChargedIsolationPFlowLoose = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlowLoose"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    maximumSumPtCut = cms.double(3.0),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.1647'),
    relativeSumPtCut = cms.double(0.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlowLoose")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(True),
    applyRelativeSumPtCut = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    rhoUEOffsetCorrection = cms.double(1.0),
    ApplyDiscriminationByECALIsolation = cms.bool(False),
    applyRhoCorrection = cms.bool(False),
    customOuterCone = cms.double(0.3),
    particleFlowSrc = cms.InputTag("particleFlow")
)


process.hpsPFTauDiscriminationByVLooseCombinedIsolationDBSumPtCorr = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    maximumSumPtCut = cms.double(3.0),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.1647'),
    relativeSumPtCut = cms.double(0.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(True),
    applyRelativeSumPtCut = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    rhoUEOffsetCorrection = cms.double(1.0),
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    applyRhoCorrection = cms.bool(False),
    customOuterCone = cms.double(0.3),
    particleFlowSrc = cms.InputTag("particleFlow")
)


process.hpsPFTauDiscriminationByVLooseCombinedIsolationDBSumPtCorrPFlow = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlow"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    maximumSumPtCut = cms.double(3.0),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.1647'),
    relativeSumPtCut = cms.double(0.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlow")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(True),
    applyRelativeSumPtCut = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    rhoUEOffsetCorrection = cms.double(1.0),
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    applyRhoCorrection = cms.bool(False),
    customOuterCone = cms.double(0.3),
    particleFlowSrc = cms.InputTag("particleFlow")
)


process.hpsPFTauDiscriminationByVLooseCombinedIsolationDBSumPtCorrPFlowLoose = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlowLoose"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    maximumSumPtCut = cms.double(3.0),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.1647'),
    relativeSumPtCut = cms.double(0.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlowLoose")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(True),
    applyRelativeSumPtCut = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    rhoUEOffsetCorrection = cms.double(1.0),
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    applyRhoCorrection = cms.bool(False),
    customOuterCone = cms.double(0.3),
    particleFlowSrc = cms.InputTag("particleFlow")
)


process.hpsPFTauDiscriminationByVLooseIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.38'),
    applyRhoCorrection = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(2.0),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    isoConeSizeForDeltaBeta = cms.double(0.3),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        ),
        preIso = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByVLooseChargedIsolation")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    customOuterCone = cms.double(0.3)
)


process.hpsPFTauDiscriminationByVLooseIsolationDBSumPtCorr = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(2.0),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    maximumSumPtCut = cms.double(2.0),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.0729'),
    relativeSumPtCut = cms.double(0.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        ),
        preIso = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByVLooseChargedIsolation")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(True),
    applyRelativeSumPtCut = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    rhoUEOffsetCorrection = cms.double(1.0),
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    applyRhoCorrection = cms.bool(False),
    customOuterCone = cms.double(0.3),
    particleFlowSrc = cms.InputTag("particleFlow")
)


process.hpsPFTauDiscriminationByVLooseIsolationDBSumPtCorrPFlow = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlow"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(2.0),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    maximumSumPtCut = cms.double(2.0),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.0729'),
    relativeSumPtCut = cms.double(0.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlow")
        ),
        preIso = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByVLooseChargedIsolationPFlow")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(True),
    applyRelativeSumPtCut = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    rhoUEOffsetCorrection = cms.double(1.0),
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    applyRhoCorrection = cms.bool(False),
    customOuterCone = cms.double(0.3),
    particleFlowSrc = cms.InputTag("particleFlow")
)


process.hpsPFTauDiscriminationByVLooseIsolationDBSumPtCorrPFlowLoose = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlowLoose"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(2.0),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    maximumSumPtCut = cms.double(2.0),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.0729'),
    relativeSumPtCut = cms.double(0.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlowLoose")
        ),
        preIso = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByVLooseChargedIsolationPFlowLoose")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(True),
    applyRelativeSumPtCut = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    rhoUEOffsetCorrection = cms.double(1.0),
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    applyRhoCorrection = cms.bool(False),
    customOuterCone = cms.double(0.3),
    particleFlowSrc = cms.InputTag("particleFlow")
)


process.hpsPFTauDiscriminationByVLooseIsolationPFlow = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlow"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.38'),
    applyRhoCorrection = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    isoConeSizeForDeltaBeta = cms.double(0.3),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlow")
        ),
        preIso = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByVLooseChargedIsolationPFlow")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    rhoConeSize = cms.double(0.5),
    customOuterCone = cms.double(0.3),
    particleFlowSrc = cms.InputTag("particleFlow"),
    rhoUEOffsetCorrection = cms.double(1.0),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(2.0),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByVLooseIsolationPFlowLoose = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlowLoose"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.38'),
    applyRhoCorrection = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    isoConeSizeForDeltaBeta = cms.double(0.3),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlowLoose")
        ),
        preIso = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByVLooseChargedIsolationPFlowLoose")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    rhoConeSize = cms.double(0.5),
    customOuterCone = cms.double(0.3),
    particleFlowSrc = cms.InputTag("particleFlow"),
    rhoUEOffsetCorrection = cms.double(1.0),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(2.0),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauProducer = cms.EDProducer("RecoTauPiZeroUnembedder",
    src = cms.InputTag("hpsPFTauProducerSansRefs")
)


process.hpsPFTauProducerPFlow = cms.EDProducer("RecoTauPiZeroUnembedder",
    src = cms.InputTag("hpsPFTauProducerSansRefsPFlow")
)


process.hpsPFTauProducerPFlowLoose = cms.EDProducer("RecoTauPiZeroUnembedder",
    src = cms.InputTag("hpsPFTauProducerSansRefsPFlowLoose")
)


process.hpsPFTauProducerSansRefs = cms.EDProducer("RecoTauCleaner",
    cleaners = cms.VPSet(cms.PSet(
        selectionPassFunction = cms.string('abs(charge())-1'),
        selection = cms.string('signalPFChargedHadrCands().size() = 3'),
        name = cms.string('UnitCharge'),
        plugin = cms.string('RecoTauStringCleanerPlugin'),
        selectionFailValue = cms.double(0)
    ), 
        cms.PSet(
            selectionPassFunction = cms.string('0'),
            selection = cms.string('signalPiZeroCandidates().size() = 0 | signalPiZeroCandidates()[0].pt > 2.5'),
            name = cms.string('leadStripPtLt2_5'),
            plugin = cms.string('RecoTauStringCleanerPlugin'),
            selectionFailValue = cms.double(1000.0)
        ), 
        cms.PSet(
            src = cms.InputTag("hpsSelectionDiscriminator"),
            name = cms.string('HPS_Select'),
            plugin = cms.string('RecoTauDiscriminantCleanerPlugin')
        ), 
        cms.PSet(
            selectionPassFunction = cms.string('isolationPFChargedHadrCandsPtSum()+isolationPFGammaCandsEtSum()'),
            selection = cms.string('leadPFCand().isNonnull()'),
            name = cms.string('CombinedIsolation'),
            plugin = cms.string('RecoTauStringCleanerPlugin'),
            selectionFailValue = cms.double(1000.0)
        )),
    src = cms.InputTag("combinatoricRecoTaus")
)


process.hpsPFTauProducerSansRefsPFlow = cms.EDProducer("RecoTauCleaner",
    cleaners = cms.VPSet(cms.PSet(
        selectionPassFunction = cms.string('abs(charge())-1'),
        selection = cms.string('signalPFChargedHadrCands().size() = 3'),
        name = cms.string('UnitCharge'),
        plugin = cms.string('RecoTauStringCleanerPlugin'),
        selectionFailValue = cms.double(0)
    ), 
        cms.PSet(
            selectionPassFunction = cms.string('0'),
            selection = cms.string('signalPiZeroCandidates().size() = 0 | signalPiZeroCandidates()[0].pt > 2.5'),
            name = cms.string('leadStripPtLt2_5'),
            plugin = cms.string('RecoTauStringCleanerPlugin'),
            selectionFailValue = cms.double(1000.0)
        ), 
        cms.PSet(
            src = cms.InputTag("hpsSelectionDiscriminatorPFlow"),
            name = cms.string('HPS_Select'),
            plugin = cms.string('RecoTauDiscriminantCleanerPlugin')
        ), 
        cms.PSet(
            selectionPassFunction = cms.string('isolationPFChargedHadrCandsPtSum()+isolationPFGammaCandsEtSum()'),
            selection = cms.string('leadPFCand().isNonnull()'),
            name = cms.string('CombinedIsolation'),
            plugin = cms.string('RecoTauStringCleanerPlugin'),
            selectionFailValue = cms.double(1000.0)
        )),
    src = cms.InputTag("pfTausBasePFlow")
)


process.hpsPFTauProducerSansRefsPFlowLoose = cms.EDProducer("RecoTauCleaner",
    cleaners = cms.VPSet(cms.PSet(
        selectionPassFunction = cms.string('abs(charge())-1'),
        selection = cms.string('signalPFChargedHadrCands().size() = 3'),
        name = cms.string('UnitCharge'),
        plugin = cms.string('RecoTauStringCleanerPlugin'),
        selectionFailValue = cms.double(0)
    ), 
        cms.PSet(
            selectionPassFunction = cms.string('0'),
            selection = cms.string('signalPiZeroCandidates().size() = 0 | signalPiZeroCandidates()[0].pt > 2.5'),
            name = cms.string('leadStripPtLt2_5'),
            plugin = cms.string('RecoTauStringCleanerPlugin'),
            selectionFailValue = cms.double(1000.0)
        ), 
        cms.PSet(
            src = cms.InputTag("hpsSelectionDiscriminatorPFlowLoose"),
            name = cms.string('HPS_Select'),
            plugin = cms.string('RecoTauDiscriminantCleanerPlugin')
        ), 
        cms.PSet(
            selectionPassFunction = cms.string('isolationPFChargedHadrCandsPtSum()+isolationPFGammaCandsEtSum()'),
            selection = cms.string('leadPFCand().isNonnull()'),
            name = cms.string('CombinedIsolation'),
            plugin = cms.string('RecoTauStringCleanerPlugin'),
            selectionFailValue = cms.double(1000.0)
        )),
    src = cms.InputTag("pfTausBasePFlowLoose")
)


process.hpsSelectionDiscriminator = cms.EDProducer("PFRecoTauDiscriminationByHPSSelection",
    PFTauProducer = cms.InputTag("combinatoricRecoTaus"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    minTauPt = cms.double(0.0),
    coneSizeFormula = cms.string('max(min(0.1, 2.8/pt()),0.05)'),
    matchingCone = cms.double(0.1),
    decayModes = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        minMass = cms.double(-1000.0),
        maxMass = cms.string('1.'),
        nCharged = cms.uint32(1)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            assumeStripMass = cms.double(0.1349),
            minMass = cms.double(0.3),
            maxMass = cms.string('max(1.3, min(1.3*sqrt(pt/200.), 2.1))'),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            minPi0Mass = cms.double(0.05),
            maxMass = cms.string('max(1.2, min(1.2*sqrt(pt/200.), 2.0))'),
            maxPi0Mass = cms.double(0.2),
            nPiZeros = cms.uint32(2),
            minMass = cms.double(0.4),
            nCharged = cms.uint32(1),
            assumeStripMass = cms.double(0.0)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            minMass = cms.double(0.8),
            maxMass = cms.string('1.5'),
            nCharged = cms.uint32(3)
        ))
)


process.hpsSelectionDiscriminatorPFlow = cms.EDProducer("PFRecoTauDiscriminationByHPSSelection",
    PFTauProducer = cms.InputTag("pfTausBasePFlow"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    minTauPt = cms.double(0.0),
    coneSizeFormula = cms.string('max(min(0.1, 2.8/pt()),0.05)'),
    decayModes = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        minMass = cms.double(-1000.0),
        maxMass = cms.string('1.'),
        nCharged = cms.uint32(1)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            assumeStripMass = cms.double(0.1349),
            minMass = cms.double(0.3),
            maxMass = cms.string('max(1.3, min(1.3*sqrt(pt/200.), 2.1))'),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            minPi0Mass = cms.double(0.05),
            maxMass = cms.string('max(1.2, min(1.2*sqrt(pt/200.), 2.0))'),
            maxPi0Mass = cms.double(0.2),
            nPiZeros = cms.uint32(2),
            minMass = cms.double(0.4),
            nCharged = cms.uint32(1),
            assumeStripMass = cms.double(0.0)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            minMass = cms.double(0.8),
            maxMass = cms.string('1.5'),
            nCharged = cms.uint32(3)
        )),
    matchingCone = cms.double(0.1)
)


process.hpsSelectionDiscriminatorPFlowLoose = cms.EDProducer("PFRecoTauDiscriminationByHPSSelection",
    PFTauProducer = cms.InputTag("pfTausBasePFlowLoose"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    minTauPt = cms.double(0.0),
    coneSizeFormula = cms.string('max(min(0.1, 2.8/pt()),0.05)'),
    decayModes = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        minMass = cms.double(-1000.0),
        maxMass = cms.string('1.'),
        nCharged = cms.uint32(1)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            assumeStripMass = cms.double(0.1349),
            minMass = cms.double(0.3),
            maxMass = cms.string('max(1.3, min(1.3*sqrt(pt/200.), 2.1))'),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            minPi0Mass = cms.double(0.05),
            maxMass = cms.string('max(1.2, min(1.2*sqrt(pt/200.), 2.0))'),
            maxPi0Mass = cms.double(0.2),
            nPiZeros = cms.uint32(2),
            minMass = cms.double(0.4),
            nCharged = cms.uint32(1),
            assumeStripMass = cms.double(0.0)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            minMass = cms.double(0.8),
            maxMass = cms.string('1.5'),
            nCharged = cms.uint32(3)
        )),
    matchingCone = cms.double(0.1)
)


process.hpsTancTaus = cms.EDProducer("RecoTauPiZeroUnembedder",
    src = cms.InputTag("hpsTancTausSansRefs")
)


process.hpsTancTausDiscriminationAgainstCaloMuon = cms.EDProducer("PFRecoTauDiscriminationAgainstCaloMuon",
    srcHcalRecHits = cms.InputTag("hbhereco"),
    minLeadTrackPt = cms.double(15.0),
    maxEnToTrackRatio = cms.double(0.25),
    srcVertex = cms.InputTag("offlinePrimaryVertices"),
    PFTauProducer = cms.InputTag("hpsTancTaus"),
    srcEcalRecHitsBarrel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    dRhcal = cms.double(25.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsTancTausDiscriminationByLeadingTrackFinding")
        )
    ),
    maxEnHcal = cms.double(8.0),
    dRecal = cms.double(15.0),
    srcEcalRecHitsEndcap = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    minLeadTrackPtFraction = cms.double(0.8),
    maxEnEcal = cms.double(3.0)
)


process.hpsTancTausDiscriminationByDecayModeSelection = cms.EDProducer("PFRecoTauDiscriminationByHPSSelection",
    src = cms.InputTag("combinatoricRecoTaus"),
    PFTauProducer = cms.InputTag("hpsTancTaus"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    minTauPt = cms.double(5.0),
    coneSizeFormula = cms.string('0.3'),
    decayModes = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        minMass = cms.double(-1000.0),
        maxMass = cms.string('1.'),
        nCharged = cms.uint32(1)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            assumeStripMass = cms.double(0.1349),
            minMass = cms.double(0.3),
            maxMass = cms.string('max(1.3, min(1.3*sqrt(pt/200.), 2.1))'),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            minPi0Mass = cms.double(0.05),
            maxMass = cms.string('max(1.2, min(1.2*sqrt(pt/200.), 2.0))'),
            maxPi0Mass = cms.double(0.2),
            nPiZeros = cms.uint32(2),
            minMass = cms.double(0.4),
            nCharged = cms.uint32(1),
            assumeStripMass = cms.double(0.0)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            minMass = cms.double(0.8),
            maxMass = cms.string('1.5'),
            nCharged = cms.uint32(3)
        )),
    matchingCone = cms.double(0.1)
)


process.hpsTancTausDiscriminationByFlightPath = cms.EDProducer("PFRecoTauDiscriminationByFlight",
    refitPV = cms.bool(True),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsTancTausDiscriminationByDecayModeSelection")
        )
    ),
    PFTauProducer = cms.InputTag("hpsTancTaus"),
    vertexSource = cms.InputTag("offlinePrimaryVertices"),
    beamspot = cms.InputTag("offlineBeamSpot")
)


process.hpsTancTausDiscriminationByLeadingPionPtCut = cms.EDProducer("PFRecoTauDiscriminationByLeadingObjectPtCut",
    MinPtLeadingObject = cms.double(5.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    PFTauProducer = cms.InputTag("hpsTancTaus"),
    UseOnlyChargedHadrons = cms.bool(False)
)


process.hpsTancTausDiscriminationByLeadingTrackFinding = cms.EDProducer("PFRecoTauDiscriminationByLeadingObjectPtCut",
    MinPtLeadingObject = cms.double(0.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    UseOnlyChargedHadrons = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsTancTaus")
)


process.hpsTancTausDiscriminationByLeadingTrackPtCut = cms.EDProducer("PFRecoTauDiscriminationByLeadingObjectPtCut",
    MinPtLeadingObject = cms.double(5.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    UseOnlyChargedHadrons = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsTancTaus")
)


process.hpsTancTausDiscriminationByLooseElectronRejection = cms.EDProducer("PFRecoTauDiscriminationAgainstElectron",
    ApplyCut_ElectronPreID_2D = cms.bool(False),
    ElecPreID0_HOverPLead_minValue = cms.double(0.05),
    PFTauProducer = cms.InputTag("hpsTancTaus"),
    ApplyCut_ElectronPreID = cms.bool(False),
    ApplyCut_HcalTotOverPLead = cms.bool(False),
    EOverPLead_minValue = cms.double(0.8),
    ElecPreID1_EOverPLead_maxValue = cms.double(0.8),
    HcalMaxOverPLead_minValue = cms.double(0.1),
    BremCombined_HOP = cms.double(0.1),
    ApplyCut_EmFraction = cms.bool(False),
    EmFraction_maxValue = cms.double(0.9),
    BremCombined_Mass = cms.double(0.55),
    ApplyCut_PFElectronMVA = cms.bool(True),
    PFElectronMVA_maxValue = cms.double(0.6),
    ApplyCut_HcalMaxOverPLead = cms.bool(False),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    ApplyCut_BremCombined = cms.bool(False),
    Hcal3x3OverPLead_minValue = cms.double(0.1),
    ElecPreID1_HOverPLead_minValue = cms.double(0.15),
    ElecPreID0_EOverPLead_maxValue = cms.double(0.95),
    BremsRecoveryEOverPLead_minValue = cms.double(0.8),
    ApplyCut_EcalCrackCut = cms.bool(False),
    BremCombined_StripSize = cms.double(0.03),
    EOverPLead_maxValue = cms.double(1.8),
    HcalTotOverPLead_minValue = cms.double(0.1),
    ApplyCut_BremsRecoveryEOverPLead = cms.bool(False),
    ApplyCut_Hcal3x3OverPLead = cms.bool(False),
    ApplyCut_EOverPLead = cms.bool(False),
    BremCombined_Fraction = cms.double(0.99),
    BremsRecoveryEOverPLead_maxValue = cms.double(1.8)
)


process.hpsTancTausDiscriminationByLooseIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsTancTaus"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.38'),
    applyRhoCorrection = cms.bool(False),
    isoConeSizeForDeltaBeta = cms.double(0.5),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsTancTausDiscriminationByDecayModeSelection")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsTancTausDiscriminationByLooseMuonRejection = cms.EDProducer("PFRecoTauDiscriminationAgainstMuon",
    a = cms.double(0.5),
    c = cms.double(0.0),
    b = cms.double(0.5),
    PFTauProducer = cms.InputTag("hpsTancTaus"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    discriminatorOption = cms.string('noSegMatch'),
    HoPMin = cms.double(0.2),
    maxNumberOfMatches = cms.int32(0),
    checkNumMatches = cms.bool(False)
)


process.hpsTancTausDiscriminationByMediumElectronRejection = cms.EDProducer("PFRecoTauDiscriminationAgainstElectron",
    ApplyCut_ElectronPreID_2D = cms.bool(False),
    ElecPreID0_HOverPLead_minValue = cms.double(0.05),
    PFTauProducer = cms.InputTag("hpsTancTaus"),
    ApplyCut_ElectronPreID = cms.bool(False),
    ApplyCut_HcalTotOverPLead = cms.bool(False),
    EOverPLead_minValue = cms.double(0.8),
    ElecPreID1_EOverPLead_maxValue = cms.double(0.8),
    HcalMaxOverPLead_minValue = cms.double(0.1),
    BremCombined_HOP = cms.double(0.1),
    ApplyCut_EmFraction = cms.bool(False),
    EmFraction_maxValue = cms.double(0.9),
    BremCombined_Mass = cms.double(0.55),
    ApplyCut_PFElectronMVA = cms.bool(True),
    PFElectronMVA_maxValue = cms.double(-0.1),
    ApplyCut_HcalMaxOverPLead = cms.bool(False),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    ApplyCut_BremCombined = cms.bool(False),
    Hcal3x3OverPLead_minValue = cms.double(0.1),
    ElecPreID1_HOverPLead_minValue = cms.double(0.15),
    ElecPreID0_EOverPLead_maxValue = cms.double(0.95),
    BremsRecoveryEOverPLead_minValue = cms.double(0.8),
    ApplyCut_EcalCrackCut = cms.bool(True),
    BremCombined_StripSize = cms.double(0.03),
    EOverPLead_maxValue = cms.double(1.8),
    HcalTotOverPLead_minValue = cms.double(0.1),
    ApplyCut_BremsRecoveryEOverPLead = cms.bool(False),
    ApplyCut_Hcal3x3OverPLead = cms.bool(False),
    ApplyCut_EOverPLead = cms.bool(False),
    BremCombined_Fraction = cms.double(0.99),
    BremsRecoveryEOverPLead_maxValue = cms.double(1.8)
)


process.hpsTancTausDiscriminationByMediumIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsTancTaus"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.38'),
    applyRhoCorrection = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    isoConeSizeForDeltaBeta = cms.double(0.5),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsTancTausDiscriminationByDecayModeSelection")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.8),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.8),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsTancTausDiscriminationByTanc = cms.EDProducer("RecoTauMVATransform",
    Prediscriminants = cms.PSet(
        hpsSelect = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsTancTausDiscriminationByDecayModeSelection")
        ),
        BooleanOperator = cms.string('and'),
        leadPion = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsTancTausDiscriminationByLeadingPionPtCut")
        )
    ),
    transforms = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        transform = cms.PSet(
            max = cms.double(1.99833333333),
            transform = cms.vdouble( (0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243693947972, 0.2446621342, 
                0.25648929965, 0.2608766459, 0.265139843949, 0.268288096025, 0.271490633611, 
                0.274812027295, 0.278726505561, 0.283196361675, 0.287921047203, 0.293485065795, 
                0.299327353484, 0.305468394708, 0.310410038477, 0.315654364298, 0.320865024837, 
                0.324875648584, 0.328691660974, 0.332598633349, 0.336484807993, 0.339893814351, 
                0.343528868912, 0.346311138119, 0.348525259682, 0.350638868762, 0.352500481165, 
                0.354385202603, 0.356405103778, 0.358448162743, 0.359626155068, 0.361359527277, 
                0.362911630832, 0.364767207965, 0.365568276809, 0.367161876825, 0.368245783665, 
                0.369700987138, 0.370891835827, 0.371335926598, 0.372724067775, 0.374122626292, 
                0.374872824273, 0.376287585272, 0.377808481377, 0.379437962659, 0.380385427158, 
                0.381454465894, 0.382529530437, 0.383308773065, 0.383900643462, 0.384488881534, 
                0.385284008411, 0.385778244795, 0.386880706208, 0.387787417873, 0.389206336729, 
                0.390430843456, 0.391560096158, 0.392490239284, 0.393218300975, 0.394889524946, 
                0.396474094424, 0.397328157396, 0.398823062781, 0.400437280424, 0.401846875958, 
                0.402719262685, 0.403705236447, 0.40437725886, 0.405483096559, 0.40715324019, 
                0.408161946716, 0.408949958358, 0.410194428622, 0.411674966358, 0.412726139917, 
                0.413994836217, 0.414922434459, 0.415970963664, 0.417494895799, 0.418345516985, 
                0.419769194149, 0.42120259427, 0.423008169722, 0.424220511323, 0.425684525769, 
                0.426912279039, 0.428023327968, 0.429389155258, 0.430889124801, 0.432147128025, 
                0.433793555744, 0.435196517338, 0.436351162787, 0.437253465009, 0.438419065687, 
                0.439590897333, 0.440949213705, 0.441921470289, 0.442848592497, 0.44396524306, 
                0.445223842049, 0.446977728682, 0.448745488265, 0.451078381688, 0.451907557714, 
                0.452739787751, 0.453638395261, 0.45475822595, 0.456165813144, 0.457223834211, 
                0.457934807034, 0.45922014571, 0.461017229233, 0.461451032994, 0.463048655665, 
                0.464804181316, 0.466425147476, 0.467542494191, 0.468517661795, 0.470468799941, 
                0.47198076935, 0.472892624736, 0.474420238705, 0.476266453893, 0.477505267649, 
                0.479532143347, 0.481200116592, 0.481613637289, 0.483360304775, 0.485061449421, 
                0.487101659613, 0.488019909526, 0.488999144832, 0.490200759674, 0.491190516798, 
                0.493849514855, 0.495306102206, 0.495928489713, 0.4964353883, 0.498082556741, 
                0.49979254034, 0.500775976586, 0.502679733683, 0.504598020717, 0.505078487853, 
                0.506619141507, 0.508171974823, 0.509336469886, 0.510953930915, 0.512581697566, 
                0.513998315702, 0.515647034962, 0.515939613111, 0.517975069449, 0.519430445753, 
                0.519957296262, 0.521273324958, 0.522406663349, 0.523925469498, 0.524625850033, 
                0.525907581275, 0.527065315655, 0.52822815856, 0.528783474767, 0.529145626115, 
                0.529453767868, 0.530435650231, 0.532014259582, 0.532782125184, 0.534528955521, 
                0.535733634238, 0.539584530704, 0.541410067901, 0.543682312792, 0.545138243861, 
                0.546811742597, 0.548048893429, 0.548459504636, 0.550158093752, 0.551205716597, 
                0.552261157841, 0.553773021814, 0.554620522074, 0.557022425024, 0.558787346691, 
                0.55989408991, 0.562351160997, 0.564603650808, 0.567330572538, 0.568251047692, 
                0.570322191691, 0.570800554836, 0.573840553165, 0.575722428922, 0.578806943369, 
                0.580018988744, 0.581943439091, 0.583637839285, 0.583719886077, 0.585230062162, 
                0.586459819001, 0.58819018682, 0.589432428675, 0.590707557501, 0.59199058109, 
                0.593311935901, 0.596143502405, 0.598713047084, 0.59985869618, 0.60146038335, 
                0.603073645068, 0.60364159568, 0.605493798425, 0.607716165748, 0.611539567166, 
                0.61344596304, 0.614868728468, 0.616356298487, 0.617243661796, 0.618356139972, 
                0.620433033442, 0.623603658141, 0.625027738979, 0.626745245057, 0.630061473707, 
                0.634451273629, 0.636224368987, 0.638386932974, 0.639666729708, 0.641472541416, 
                0.643376129813, 0.645998175052, 0.648651724655, 0.650614385321, 0.651964427491, 
                0.654372246094, 0.656912558238, 0.657658356547, 0.658734274882, 0.661006291486, 
                0.663094362812, 0.664860224717, 0.667639986138, 0.669224738703, 0.670609710516, 
                0.672008536945, 0.674322956904, 0.676181757848, 0.680504320591, 0.681701882298, 
                0.683847428048, 0.687028204213, 0.690096183579, 0.692936565842, 0.698333032093, 
                0.702469873766, 0.704533440299, 0.706621657637, 0.710308262591, 0.713270705866, 
                0.714865826284, 0.719086552707, 0.722147885763, 0.725885046087, 0.729450681758, 
                0.732859861331, 0.739185288999, 0.743172463789, 0.74657896386, 0.751327840506, 
                0.754658774214, 0.758047388164, 0.762059448212, 0.769914558551, 0.775838239214, 
                0.780728907111, 0.786952215918, 0.793694146175, 0.796885300439, 0.802863959078, 
                0.813001141474, 0.820597251397, 0.829350775725, 0.837460143471, 0.84199323298, 
                0.847433416989, 0.854638027367, 0.860714284529, 0.869959964541, 0.876007819869, 
                0.884455823419, 0.896538436371, 0.904016005807, 0.910382232961, 0.916770946986, 
                0.93386870405, 0.943467586229, 0.95165443966, 0.971789456433, 0.970755563959, 
                0.9679163435, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0 ) ),
            min = cms.double(-0.998333333333)
        ),
        nCharged = cms.uint32(3)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            transform = cms.PSet(
                max = cms.double(1.99833333333),
                transform = cms.vdouble( (0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725625489751, 0.725917318629, 0.727526582607, 
                    0.745748231906, 0.750169168536, 0.757185219071, 0.764249672036, 0.767603981959, 
                    0.772574492642, 0.775097031572, 0.777704615235, 0.779407980465, 0.781767581973, 
                    0.784842584326, 0.786420654919, 0.787883166617, 0.790123535551, 0.79208138528, 
                    0.79327247227, 0.795907708578, 0.798503646112, 0.800206834461, 0.802663946447, 
                    0.8031582666, 0.80490222571, 0.806889568691, 0.809394028316, 0.811861583702, 
                    0.813019057268, 0.81342095915, 0.814698723372, 0.816279445985, 0.818232037783, 
                    0.819367026875, 0.819759858707, 0.821328989638, 0.822878675172, 0.82364763472, 
                    0.825358996088, 0.828499118125, 0.829830087025, 0.831236000117, 0.832703495507, 
                    0.833414247004, 0.834436344112, 0.834946785624, 0.835869791486, 0.836486520822, 
                    0.837364626557, 0.838193318858, 0.839702591039, 0.841531457051, 0.842218371935, 
                    0.843640339114, 0.844222988069, 0.845392038566, 0.846778761898, 0.84769605779, 
                    0.848073950379, 0.848849957765, 0.849494110293, 0.8500905241, 0.851335675181, 
                    0.853500950651, 0.853839833615, 0.854227213103, 0.854567621296, 0.854984559013, 
                    0.855203285083, 0.856470785047, 0.857475859603, 0.85892685241, 0.859008202829, 
                    0.859451257957, 0.860468389831, 0.861489507276, 0.861351261404, 0.861705874851, 
                    0.861659795003, 0.861659795003, 0.86179137032, 0.862147375366, 0.862550177315, 
                    0.863312092458, 0.863805642705, 0.864438066642, 0.864754370118, 0.865480701328, 
                    0.866346092335, 0.867168965701, 0.867397571488, 0.868313201223, 0.868771741382, 
                    0.869186401202, 0.86983185136, 0.869929474522, 0.870346507695, 0.870951429469, 
                    0.870863388987, 0.871514279263, 0.872166654676, 0.872355339191, 0.872776974093, 
                    0.873155878735, 0.873579101025, 0.874003066865, 0.873916467734, 0.874211597253, 
                    0.874402872188, 0.87510742975, 0.87525648792, 0.87525648792, 0.875448860228, 
                    0.875598481234, 0.875512416378, 0.87617785231, 0.87617785231, 0.876371452215, 
                    0.877233539228, 0.877818409805, 0.87840545558, 0.87840545558, 0.878601622981, 
                    0.878601622981, 0.879472984901, 0.879712328244, 0.87982581203, 0.879981638026, 
                    0.880179766123, 0.880378141371, 0.880534852587, 0.880691869776, 0.8811323429, 
                    0.881090533252, 0.881531917098, 0.881732079801, 0.8822162463, 0.882902187113, 
                    0.882979722574, 0.88403281278, 0.885010261835, 0.884928594333, 0.885132644083, 
                    0.885050953876, 0.88525535544, 0.886362380543, 0.886487219509, 0.886652934413, 
                    0.887232935079, 0.887728512003, 0.888561331939, 0.889019284728, 0.889438266521, 
                    0.890358658388, 0.890120720891, 0.890292192785, 0.890675834925, 0.890556765164, 
                    0.890981544778, 0.891699669632, 0.891660238395, 0.891969519877, 0.892319678993, 
                    0.892161931402, 0.892513711208, 0.892729546909, 0.893162065429, 0.893339503795, 
                    0.893339503795, 0.893656248099, 0.894427465173, 0.894606969217, 0.894825762437, 
                    0.894928163898, 0.895703822513, 0.89622167567, 0.896663385868, 0.897404545302, 
                    0.89769650475, 0.899189293203, 0.899525558799, 0.900803884235, 0.901822547362, 
                    0.901939302648, 0.902926505697, 0.903082359676, 0.904038745128, 0.90469561985, 
                    0.904927332682, 0.905283513893, 0.906828000044, 0.907062493553, 0.908109372415, 
                    0.908783021349, 0.90898498498, 0.910379224289, 0.911372920866, 0.911751863015, 
                    0.912477297669, 0.913239550237, 0.91300238707, 0.913422855139, 0.915063352192, 
                    0.916893920936, 0.916979020829, 0.91791358353, 0.918350995783, 0.918790342789, 
                    0.919328152961, 0.919993298628, 0.920982245955, 0.922524618114, 0.923591109364, 
                    0.924018850534, 0.924248923821, 0.924479515826, 0.925498182241, 0.926493584801, 
                    0.927436921962, 0.927911825271, 0.928716526512, 0.929225746944, 0.929920622352, 
                    0.931640820211, 0.931772433588, 0.932293506679, 0.932760264784, 0.93386870405, 
                    0.934480569506, 0.934731886916, 0.935797384751, 0.936588472051, 0.936817507478, 
                    0.937277790773, 0.938339506605, 0.938808219887, 0.93993649209, 0.94020045716, 
                    0.940781492864, 0.941047196853, 0.942510417566, 0.942629939, 0.942750378489, 
                    0.943616386541, 0.944163684906, 0.945338814696, 0.945845741457, 0.946028661789, 
                    0.946308362468, 0.946541150838, 0.946751152357, 0.947576555912, 0.948029352938, 
                    0.94826905955, 0.948081416726, 0.949376743021, 0.94926144862, 0.949775296374, 
                    0.949706301122, 0.951268968863, 0.953037066674, 0.95357532021, 0.953770570793, 
                    0.953640586734, 0.953509869657, 0.954300159882, 0.955476996866, 0.956207587781, 
                    0.956355833165, 0.956846568485, 0.957770053042, 0.958723171834, 0.958928454571, 
                    0.959445187694, 0.959807967592, 0.959442259047, 0.960697132989, 0.961203278228, 
                    0.963193467582, 0.963932365293, 0.964461162833, 0.964482886627, 0.96526433234, 
                    0.966030150632, 0.966856588211, 0.969491617691, 0.970743493871, 0.972389419268, 
                    0.973307337131, 0.975623617612, 0.976087161844, 0.975647899082, 0.976736074007, 
                    0.979440008803, 0.981271208497, 0.982207028661, 0.984863078211, 0.986956530647, 
                    0.990258251858, 0.990208776979, 0.990702226892, 0.993228159625, 0.99534336087, 
                    0.996696237239, 0.995185049087, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0 ) ),
                min = cms.double(-0.998333333333)
            ),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            transform = cms.PSet(
                max = cms.double(1.99833333333),
                transform = cms.vdouble( (0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.786753288885, 0.788132324416, 0.79656141615, 0.810183644995, 
                    0.858360829913, 0.862298212616, 0.867110980413, 0.871372861265, 0.875682014578, 
                    0.880242297589, 0.883696978098, 0.885512278829, 0.887768921813, 0.889264020585, 
                    0.89119925019, 0.892452552697, 0.893185095837, 0.893419577074, 0.894898998675, 
                    0.895774783109, 0.896260903725, 0.896505707407, 0.898082672851, 0.898779137453, 
                    0.89979939771, 0.900120276805, 0.900442301311, 0.900314253861, 0.90063761708, 
                    0.903107169678, 0.903707364412, 0.904624297652, 0.90437518453, 0.904187494019, 
                    0.904648539996, 0.905849328721, 0.90625146477, 0.906593041173, 0.906284313013, 
                    0.906627709554, 0.906627709554, 0.907095652088, 0.906972372385, 0.907318308525, 
                    0.907603995571, 0.907357055463, 0.907233089763, 0.907994846936, 0.908883949265, 
                    0.908883949265, 0.909836831321, 0.909836831321, 0.909776114594, 0.911030037809, 
                    0.911509901723, 0.911871023987, 0.911811279009, 0.911751452972, 0.911691545709, 
                    0.911511334909, 0.911451101085, 0.912784331406, 0.9125455069, 0.9125455069, 
                    0.91297278083, 0.912853317543, 0.912673506387, 0.913592984461, 0.915007651179, 
                    0.915441697726, 0.915324604996, 0.915207187526, 0.915148356591, 0.91552593882, 
                    0.915467174967, 0.9154083293, 0.915290391839, 0.915231299701, 0.915728896806, 
                    0.915728896806, 0.915552071941, 0.916492320764, 0.917377950283, 0.917822427143, 
                    0.918268017622, 0.91871472591, 0.919668295227, 0.919611512782, 0.919554650007, 
                    0.919440682785, 0.919269125195, 0.921306876156, 0.921306876156, 0.921082297245, 
                    0.920969526416, 0.921426208902, 0.921939970027, 0.921939970027, 0.922343069964, 
                    0.923319759486, 0.923727168952, 0.923727168952, 0.92460140151, 0.924492316338, 
                    0.924959238052, 0.926474177051, 0.926474177051, 0.926420752856, 0.926313671218, 
                    0.926785714713, 0.926785714713, 0.926785714713, 0.926732331515, 0.926732331515, 
                    0.926571713811, 0.927521701059, 0.927468561656, 0.927998554333, 0.927945695605, 
                    0.929008220067, 0.928746371941, 0.928693770351, 0.928641091039, 0.929607013105, 
                    0.929554832769, 0.930039996532, 0.93101417799, 0.931554211882, 0.932636161324, 
                    0.932585903271, 0.932585903271, 0.93357188521, 0.933522156167, 0.933967924145, 
                    0.933769185329, 0.934766776762, 0.935267583538, 0.935169629185, 0.935672412756, 
                    0.936176553451, 0.936176553451, 0.93779194569, 0.937554472402, 0.937458974653, 
                    0.937411116161, 0.937970225775, 0.938435668089, 0.938341043455, 0.938341043455, 
                    0.938903099624, 0.93885608225, 0.938808992455, 0.938714594933, 0.939278948765, 
                    0.940409694612, 0.940363611919, 0.940363611919, 0.940884673949, 0.940838860114, 
                    0.940700991551, 0.941179107659, 0.941750185868, 0.941750185868, 0.942276966885, 
                    0.943290568826, 0.943822114749, 0.944267645451, 0.944223792272, 0.944223792272, 
                    0.944223792272, 0.944223792272, 0.944135878551, 0.944091817682, 0.943959217069, 
                    0.944948988041, 0.944817531021, 0.945185418124, 0.945774534438, 0.946869842865, 
                    0.94678443912, 0.947292782482, 0.947803406812, 0.948955745704, 0.949513262437, 
                    0.949431324505, 0.949349120177, 0.949787213059, 0.950350748429, 0.951522477849, 
                    0.952051228023, 0.95197239226, 0.951813940452, 0.951734321829, 0.952189098377, 
                    0.952726227521, 0.952647494583, 0.953226869405, 0.953148724357, 0.95303101596, 
                    0.953497250008, 0.954122169792, 0.954006075021, 0.954594998037, 0.955778170341, 
                    0.955740668477, 0.957457733339, 0.958697023242, 0.958590781777, 0.958519649968, 
                    0.959665182275, 0.960242079268, 0.960242079268, 0.960855701368, 0.960787753107, 
                    0.961370655681, 0.961269567079, 0.961823203605, 0.963730727425, 0.963634885553, 
                    0.963570709071, 0.964138473298, 0.964106695414, 0.96404297039, 0.963914839098, 
                    0.963882663464, 0.96452094996, 0.964361812095, 0.96497328025, 0.965587812399, 
                    0.966174859102, 0.966052013818, 0.966021162949, 0.968018795469, 0.96867865254, 
                    0.968592547647, 0.96914294659, 0.969057430126, 0.969000155331, 0.970289180287, 
                    0.971618144708, 0.971511684075, 0.972907637123, 0.972856607143, 0.972753968298, 
                    0.972676478315, 0.973344727784, 0.973217439385, 0.973917083716, 0.973842007934, 
                    0.973791716846, 0.974496912029, 0.974447701286, 0.974373528048, 0.974273957942, 
                    0.974198771106, 0.974791150217, 0.975488253999, 0.976165676348, 0.977513433798, 
                    0.977332925695, 0.978053351441, 0.978734902423, 0.97864854949, 0.979275680612, 
                    0.979190505138, 0.979039751165, 0.978974471583, 0.978886796984, 0.980438334358, 
                    0.981887328142, 0.982567303114, 0.983312443593, 0.983168209088, 0.983021459539, 
                    0.98366063828, 0.983606342672, 0.983441268961, 0.983291720735, 0.985747459607, 
                    0.985615866821, 0.988157949486, 0.988031989052, 0.987786602856, 0.988507380959, 
                    0.988364321833, 0.988127868612, 0.987928555371, 0.987641272072, 0.987408197679, 
                    0.98704162283, 0.986691071046, 0.986360943929, 0.987048151948, 0.989952686544, 
                    0.991766844123, 0.992193166195, 0.99456966538, 0.995655052048, 0.994746673755, 
                    0.993062299865, 0.995491593707, 0.993997811711, 0.991951166261, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0 ) ),
                min = cms.double(-0.998333333333)
            ),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(2),
            transform = cms.PSet(
                max = cms.double(1.99833333333),
                transform = cms.vdouble( (0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320785409267, 0.320785409267, 0.320785409267, 
                    0.320967688479, 0.32115017496, 0.32115017496, 0.32115017496, 0.32115017496, 
                    0.321332869066, 0.321607300294, 0.321790515012, 0.322065728828, 0.322709728783, 
                    0.337811096719, 0.33917314626, 0.341489359417, 0.343051156809, 0.344690580804, 
                    0.34605531485, 0.347729452006, 0.349352972192, 0.351698761571, 0.354076266303, 
                    0.356364861761, 0.357459291064, 0.358806090169, 0.360659074159, 0.361655179522, 
                    0.363285639001, 0.363823848893, 0.365224296488, 0.366635567078, 0.368317558281, 
                    0.36949108301, 0.370409007364, 0.370997606343, 0.372726361337, 0.373488515297, 
                    0.374412657806, 0.375752608537, 0.377534910678, 0.378625338634, 0.379181030815, 
                    0.379877944035, 0.382266731549, 0.382549741971, 0.383828491978, 0.38525242259, 
                    0.386835650852, 0.38785063627, 0.389317222671, 0.390498501728, 0.392134514369, 
                    0.392433445129, 0.393938724972, 0.395003106909, 0.395165758646, 0.395929379967, 
                    0.396695958257, 0.397011143016, 0.398247378442, 0.399356983741, 0.399994683207, 
                    0.401254354869, 0.40236309389, 0.403477977186, 0.404278112546, 0.405403648355, 
                    0.406718341929, 0.408044942586, 0.409053791836, 0.409879342767, 0.410568240656, 
                    0.411067477386, 0.412572498902, 0.413612340683, 0.414628216181, 0.41718987191, 
                    0.417878334739, 0.41856907358, 0.419300644011, 0.420520753157, 0.420777117228, 
                    0.422716149289, 0.423248081689, 0.424315972822, 0.425568676714, 0.426697968924, 
                    0.427784748237, 0.428512348538, 0.429242428143, 0.430526071506, 0.4311350135, 
                    0.432803583714, 0.433609675616, 0.434608917639, 0.436308891919, 0.436878509184, 
                    0.437640316502, 0.438596319943, 0.440520911858, 0.441683795845, 0.443048277506, 
                    0.444696219849, 0.446478472767, 0.44715804854, 0.448645092811, 0.450058431683, 
                    0.450666877959, 0.450755388115, 0.451660727674, 0.452685605028, 0.453508861839, 
                    0.455164391331, 0.456611329026, 0.456920461171, 0.457863702358, 0.45902581005, 
                    0.459451411686, 0.460410936031, 0.461808077134, 0.4630001435, 0.46452516501, 
                    0.465632370863, 0.466972634942, 0.467639712811, 0.468206417853, 0.469000443277, 
                    0.470125946746, 0.471938031657, 0.473437184975, 0.474815974144, 0.475643583896, 
                    0.477037107394, 0.478345116523, 0.479756398109, 0.482127131145, 0.483321305722, 
                    0.484827612962, 0.485378450947, 0.486839313932, 0.488800865348, 0.488631796262, 
                    0.489784626283, 0.49019813266, 0.490696455307, 0.492699918902, 0.493707798202, 
                    0.495481544763, 0.497780890453, 0.499067549901, 0.499842743245, 0.501067711008, 
                    0.501110885208, 0.503739653301, 0.504533670387, 0.507669169039, 0.508207246665, 
                    0.510099534144, 0.511125093239, 0.513041788431, 0.514972912765, 0.517927881794, 
                    0.519848789077, 0.52116702462, 0.522598588906, 0.524038039421, 0.524905522273, 
                    0.525729939569, 0.527349110611, 0.528189103375, 0.529884063982, 0.531038635091, 
                    0.531258876588, 0.533372518417, 0.532652261497, 0.533222445036, 0.533832435241, 
                    0.534714171593, 0.536561182549, 0.536184284139, 0.538295230995, 0.539204274194, 
                    0.539743792118, 0.542257448251, 0.543191981222, 0.54415669717, 0.545124845911, 
                    0.546421082543, 0.548704392123, 0.551006864138, 0.551639517385, 0.554308295208, 
                    0.554286639155, 0.555277851271, 0.557294734318, 0.558661984326, 0.560735788966, 
                    0.561777981725, 0.56352691872, 0.56493793563, 0.567793486879, 0.568888208725, 
                    0.57034433091, 0.570356276084, 0.572191934216, 0.573659294894, 0.574044772549, 
                    0.575543527534, 0.577054482298, 0.578553389267, 0.580816407199, 0.582777514902, 
                    0.58546601664, 0.587013469943, 0.586699955875, 0.587164603914, 0.589909772096, 
                    0.590347109603, 0.591182964289, 0.593622213241, 0.595632610766, 0.596088895792, 
                    0.596547219627, 0.597007595967, 0.59905000376, 0.59875479532, 0.600402032492, 
                    0.601476624751, 0.602375325225, 0.604611692334, 0.606308877758, 0.609454442616, 
                    0.612487831768, 0.615198564485, 0.616345932738, 0.617679752716, 0.620364786891, 
                    0.621560433387, 0.622923085077, 0.622771613804, 0.627021967049, 0.629464905691, 
                    0.630636176618, 0.632414811477, 0.635412621765, 0.636860801036, 0.638359784998, 
                    0.642296739762, 0.64372019874, 0.646732193739, 0.649419880322, 0.653004922396, 
                    0.654536589972, 0.657493324695, 0.65872664624, 0.662116021475, 0.666837437051, 
                    0.668332370106, 0.670194812833, 0.671514734427, 0.671514734427, 0.672844093862, 
                    0.672352092845, 0.678607302272, 0.681605563269, 0.681020472505, 0.682082800049, 
                    0.684848783291, 0.686959317553, 0.690918830645, 0.691984674993, 0.694695530605, 
                    0.697455651971, 0.700496795416, 0.703736816672, 0.704917801757, 0.706220722464, 
                    0.707858889942, 0.71018130526, 0.714321429016, 0.720425948473, 0.724503155871, 
                    0.727977004139, 0.730714468803, 0.735012362904, 0.739735756402, 0.750660954162, 
                    0.757799352464, 0.760515374245, 0.768004247792, 0.77935327172, 0.784646260495, 
                    0.789164336822, 0.791123170072, 0.795276817521, 0.804299018936, 0.819103217408, 
                    0.822961151625, 0.833298258018, 0.842807182616, 0.85334688934, 0.86724344838, 
                    0.872176831791, 0.87195156781, 0.87843961359, 0.891494313173, 0.912879175226, 
                    0.924218217451, 0.937234161591, 0.94206607914, 0.958884557005, 0.959595443343, 
                    0.93904371889, 0.927733482302, 0.93386870405, 0.916051159827, 0.943467586229, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0 ) ),
                min = cms.double(-0.998333333333)
            ),
            nCharged = cms.uint32(1)
        )),
    toTransform = cms.InputTag("hpsTancTausDiscriminationByTancRaw"),
    PFTauProducer = cms.InputTag("hpsTancTaus")
)


process.hpsTancTausDiscriminationByTancLoose = cms.EDProducer("PFRecoTauDiscriminationByLeadingObjectPtCut",
    MinPtLeadingObject = cms.double(0.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        tancCut = cms.PSet(
            cut = cms.double(0.95),
            Producer = cms.InputTag("hpsTancTausDiscriminationByTanc")
        )
    ),
    PFTauProducer = cms.InputTag("hpsTancTaus"),
    UseOnlyChargedHadrons = cms.bool(True)
)


process.hpsTancTausDiscriminationByTancMedium = cms.EDProducer("PFRecoTauDiscriminationByLeadingObjectPtCut",
    MinPtLeadingObject = cms.double(0.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        tancCut = cms.PSet(
            cut = cms.double(0.97),
            Producer = cms.InputTag("hpsTancTausDiscriminationByTanc")
        )
    ),
    UseOnlyChargedHadrons = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsTancTaus")
)


process.hpsTancTausDiscriminationByTancRaw = cms.EDProducer("RecoTauMVADiscriminator",
    discriminantOptions = cms.PSet(
        BinnedMaskedHcalIsolation = cms.PSet(
            vtxSource = cms.InputTag("recoTauPileUpVertices"),
            mask = cms.PSet(
                finalHcalCone = cms.double(0.08),
                ecalCone = cms.double(0.15),
                hcalCone = cms.double(0.3),
                maxSigmas = cms.double(2)
            ),
            binning = cms.VPSet(cms.PSet(
                binLowEdges = cms.vdouble(1.0, 1.79, 4.03),
                nPUVtx = cms.int32(0)
            ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(1.15, 1.8, 4.03),
                    nPUVtx = cms.int32(1)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(1.22, 1.81, 4.03),
                    nPUVtx = cms.int32(2)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(1.27, 1.83, 4.03),
                    nPUVtx = cms.int32(3)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(1.31, 1.84, 4.03),
                    nPUVtx = cms.int32(4)
                )),
            defaultBinning = cms.vdouble(1.31, 1.84, 4.03),
            plugin = cms.string('RecoTauDiscriminationBinnedMaskedHCALIsolation')
        ),
        InvariantOpeningAngle = cms.PSet(
            defaultRMS = cms.string('max(0.3/max(pt, 1.0), 0.005)'),
            plugin = cms.string('RecoTauDiscriminantInvariantWidth'),
            decayModes = cms.VPSet(cms.PSet(
                nPiZeros = cms.uint32(1),
                rms = cms.string('2.7e-3 + 0.23/max(pt, 1.0)'),
                nCharged = cms.uint32(1),
                mean = cms.string('5.0e-3 + 0.43/max(pt, 1.0)')
            ), 
                cms.PSet(
                    nPiZeros = cms.uint32(2),
                    rms = cms.string('7.5e-3 + 0.3/max(pt, 1.0)'),
                    nCharged = cms.uint32(1),
                    mean = cms.string('4.7e-3 + 0.9/max(pt, 1.0)')
                ), 
                cms.PSet(
                    nPiZeros = cms.uint32(0),
                    rms = cms.string('0.38/max(pt, 1.0)'),
                    nCharged = cms.uint32(3),
                    mean = cms.string('0.87/max(pt, 1.0)')
                )),
            defaultMean = cms.string('max(0.87/max(pt, 1.0), 0.005)')
        ),
        BinnedMaskedEcalIsolation = cms.PSet(
            vtxSource = cms.InputTag("recoTauPileUpVertices"),
            mask = cms.PSet(
                finalHcalCone = cms.double(0.08),
                ecalCone = cms.double(0.15),
                hcalCone = cms.double(0.3),
                maxSigmas = cms.double(2)
            ),
            binning = cms.VPSet(cms.PSet(
                binLowEdges = cms.vdouble(0.5, 0.88, 2.53),
                nPUVtx = cms.int32(0)
            ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(0.65, 0.98, 2.53),
                    nPUVtx = cms.int32(1)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(0.74, 1.05, 2.54),
                    nPUVtx = cms.int32(2)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(0.8, 1.11, 2.54),
                    nPUVtx = cms.int32(3)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(0.86, 1.15, 2.54),
                    nPUVtx = cms.int32(4)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(0.9, 1.19, 2.55),
                    nPUVtx = cms.int32(5)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(0.94, 1.22, 2.55),
                    nPUVtx = cms.int32(6)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(0.97, 1.25, 2.55),
                    nPUVtx = cms.int32(7)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(1.0, 1.27, 2.56),
                    nPUVtx = cms.int32(8)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(1.03, 1.3, 2.56),
                    nPUVtx = cms.int32(9)
                )),
            defaultBinning = cms.vdouble(1.03, 1.3, 2.56),
            plugin = cms.string('RecoTauDiscriminationBinnedMaskedECALIsolation')
        ),
        FlightPathSignificance = cms.PSet(
            plugin = cms.string('RecoTauDiscriminantFromDiscriminator'),
            discSrc = cms.InputTag("hpsTancTausDiscriminationByFlightPath"),
            maxValue = cms.double(25),
            minValue = cms.double(-25)
        ),
        BinnedTrackIsolation = cms.PSet(
            vtxSource = cms.InputTag("recoTauPileUpVertices"),
            binning = cms.VPSet(cms.PSet(
                binLowEdges = cms.vdouble(0.5, 0.86, 1.87),
                nPUVtx = cms.int32(0)
            ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(0.51, 0.86, 1.87),
                    nPUVtx = cms.int32(1)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(0.51, 0.86, 1.87),
                    nPUVtx = cms.int32(2)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(0.52, 0.86, 1.87),
                    nPUVtx = cms.int32(3)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(0.52, 0.86, 1.87),
                    nPUVtx = cms.int32(4)
                )),
            defaultBinning = cms.vdouble(0.52, 0.86, 1.87),
            plugin = cms.string('RecoTauDiscriminationBinnedTrackIsolation')
        )
    ),
    mvas = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        mvaLabel = cms.string('1prong0pi0'),
        nCharged = cms.uint32(1)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            mvaLabel = cms.string('1prong1pi0'),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(2),
            mvaLabel = cms.string('1prong2pi0'),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            mvaLabel = cms.string('3prong0pi0'),
            nCharged = cms.uint32(3)
        )),
    remapOutput = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsTancTaus"),
    Prediscriminants = cms.PSet(
        hpsSelect = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsTancTausDiscriminationByDecayModeSelection")
        ),
        BooleanOperator = cms.string('and'),
        leadPion = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsTancTausDiscriminationByLeadingPionPtCut")
        )
    ),
    dbLabel = cms.string('hpstanc')
)


process.hpsTancTausDiscriminationByTancTight = cms.EDProducer("PFRecoTauDiscriminationByLeadingObjectPtCut",
    MinPtLeadingObject = cms.double(0.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        tancCut = cms.PSet(
            cut = cms.double(0.985),
            Producer = cms.InputTag("hpsTancTausDiscriminationByTanc")
        )
    ),
    UseOnlyChargedHadrons = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsTancTaus")
)


process.hpsTancTausDiscriminationByTancVLoose = cms.EDProducer("PFRecoTauDiscriminationByLeadingObjectPtCut",
    MinPtLeadingObject = cms.double(0.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        tancCut = cms.PSet(
            cut = cms.double(0.9),
            Producer = cms.InputTag("hpsTancTausDiscriminationByTanc")
        )
    ),
    UseOnlyChargedHadrons = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsTancTaus")
)


process.hpsTancTausDiscriminationByTightElectronRejection = cms.EDProducer("PFRecoTauDiscriminationAgainstElectron",
    ApplyCut_ElectronPreID_2D = cms.bool(False),
    ElecPreID0_HOverPLead_minValue = cms.double(0.05),
    PFTauProducer = cms.InputTag("hpsTancTaus"),
    ApplyCut_ElectronPreID = cms.bool(False),
    ApplyCut_HcalTotOverPLead = cms.bool(False),
    EOverPLead_minValue = cms.double(0.8),
    ElecPreID1_EOverPLead_maxValue = cms.double(0.8),
    HcalMaxOverPLead_minValue = cms.double(0.1),
    BremCombined_HOP = cms.double(0.1),
    ApplyCut_EmFraction = cms.bool(False),
    EmFraction_maxValue = cms.double(0.9),
    BremCombined_Mass = cms.double(0.55),
    ApplyCut_PFElectronMVA = cms.bool(True),
    PFElectronMVA_maxValue = cms.double(-0.1),
    ApplyCut_HcalMaxOverPLead = cms.bool(False),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    ApplyCut_BremCombined = cms.bool(True),
    Hcal3x3OverPLead_minValue = cms.double(0.1),
    ElecPreID1_HOverPLead_minValue = cms.double(0.15),
    ElecPreID0_EOverPLead_maxValue = cms.double(0.95),
    BremsRecoveryEOverPLead_minValue = cms.double(0.8),
    ApplyCut_EcalCrackCut = cms.bool(True),
    BremCombined_StripSize = cms.double(0.03),
    EOverPLead_maxValue = cms.double(1.8),
    HcalTotOverPLead_minValue = cms.double(0.1),
    ApplyCut_BremsRecoveryEOverPLead = cms.bool(False),
    ApplyCut_Hcal3x3OverPLead = cms.bool(False),
    ApplyCut_EOverPLead = cms.bool(False),
    BremCombined_Fraction = cms.double(0.99),
    BremsRecoveryEOverPLead_maxValue = cms.double(1.8)
)


process.hpsTancTausDiscriminationByTightIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsTancTaus"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.38'),
    applyRhoCorrection = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    isoConeSizeForDeltaBeta = cms.double(0.5),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsTancTausDiscriminationByDecayModeSelection")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsTancTausDiscriminationByTightMuonRejection = cms.EDProducer("PFRecoTauDiscriminationAgainstMuon",
    a = cms.double(0.5),
    c = cms.double(0.0),
    b = cms.double(0.5),
    PFTauProducer = cms.InputTag("hpsTancTaus"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    discriminatorOption = cms.string('noAllArbitrated'),
    HoPMin = cms.double(0.2),
    maxNumberOfMatches = cms.int32(0),
    checkNumMatches = cms.bool(False)
)


process.hpsTancTausDiscriminationByVLooseIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsTancTaus"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.38'),
    applyRhoCorrection = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    isoConeSizeForDeltaBeta = cms.double(0.3),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsTancTausDiscriminationByDecayModeSelection")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    rhoConeSize = cms.double(0.5),
    customOuterCone = cms.double(0.3),
    particleFlowSrc = cms.InputTag("particleFlow"),
    rhoUEOffsetCorrection = cms.double(1.0),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(2.0),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsTancTausSansRefs = cms.EDProducer("RecoTauCleaner",
    cleaners = cms.VPSet(cms.PSet(
        selectionPassFunction = cms.string('abs(charge())-1'),
        selection = cms.string('signalPFChargedHadrCands().size() = 3'),
        name = cms.string('UnitCharge'),
        plugin = cms.string('RecoTauStringCleanerPlugin'),
        selectionFailValue = cms.double(0)
    ), 
        cms.PSet(
            selectionPassFunction = cms.string('0'),
            selection = cms.string('deltaR(eta, phi, jetRef().eta, jetRef().phi) < 0.1'),
            name = cms.string('MatchingCone'),
            plugin = cms.string('RecoTauStringCleanerPlugin'),
            selectionFailValue = cms.double(1000.0)
        ), 
        cms.PSet(
            src = cms.InputTag("combinatoricRecoTausDiscriminationByLeadingPionPtCut"),
            name = cms.string('lead pion'),
            plugin = cms.string('RecoTauDiscriminantCleanerPlugin')
        ), 
        cms.PSet(
            src = cms.InputTag("combinatoricRecoTausHPSSelector"),
            name = cms.string('HPS selection'),
            plugin = cms.string('RecoTauDiscriminantCleanerPlugin')
        ), 
        cms.PSet(
            selectionPassFunction = cms.string('isolationPFChargedHadrCandsPtSum()+isolationPFGammaCandsEtSum()'),
            selection = cms.string('leadPFCand().isNonnull()'),
            name = cms.string('CombinedIsolation'),
            plugin = cms.string('RecoTauStringCleanerPlugin'),
            selectionFailValue = cms.double(1000.0)
        )),
    src = cms.InputTag("combinatoricRecoTaus")
)


process.ic5PFJetTracksAssociatorAtVertex = cms.EDProducer("JetTracksAssociatorAtVertex",
    tracks = cms.InputTag("generalTracks"),
    useAssigned = cms.bool(False),
    coneSize = cms.double(0.5),
    pvSrc = cms.InputTag("offlinePrimaryVertices"),
    jets = cms.InputTag("iterativeCone5PFJets")
)


process.impactParameterMVABJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('impactParameterMVAComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"))
)


process.impactParameterTagInfos = cms.EDProducer("TrackIPProducer",
    maximumTransverseImpactParameter = cms.double(0.2),
    minimumNumberOfHits = cms.int32(8),
    minimumTransverseMomentum = cms.double(1.0),
    primaryVertex = cms.InputTag("offlinePrimaryVertices"),
    maximumLongitudinalImpactParameter = cms.double(17.0),
    computeProbabilities = cms.bool(True),
    ghostTrackPriorDeltaR = cms.double(0.03),
    jetTracks = cms.InputTag("ak5JetTracksAssociatorAtVertex"),
    jetDirectionUsingGhostTrack = cms.bool(False),
    minimumNumberOfPixelHits = cms.int32(2),
    jetDirectionUsingTracks = cms.bool(False),
    computeGhostTrack = cms.bool(True),
    useTrackQuality = cms.bool(False),
    maximumChiSquared = cms.double(5.0)
)


process.impactParameterTagInfosAODPFlow = cms.EDProducer("TrackIPProducer",
    maximumTransverseImpactParameter = cms.double(0.2),
    minimumNumberOfHits = cms.int32(8),
    minimumTransverseMomentum = cms.double(1.0),
    primaryVertex = cms.InputTag("offlinePrimaryVertices"),
    maximumLongitudinalImpactParameter = cms.double(17.0),
    computeGhostTrack = cms.bool(True),
    ghostTrackPriorDeltaR = cms.double(0.03),
    jetTracks = cms.InputTag("jetTracksAssociatorAtVertexPFlow"),
    jetDirectionUsingGhostTrack = cms.bool(False),
    minimumNumberOfPixelHits = cms.int32(2),
    jetDirectionUsingTracks = cms.bool(False),
    computeProbabilities = cms.bool(True),
    useTrackQuality = cms.bool(False),
    maximumChiSquared = cms.double(5.0)
)


process.impactParameterTagInfosAODPFlowLoose = cms.EDProducer("TrackIPProducer",
    maximumTransverseImpactParameter = cms.double(0.2),
    minimumNumberOfHits = cms.int32(8),
    minimumTransverseMomentum = cms.double(1.0),
    primaryVertex = cms.InputTag("offlinePrimaryVertices"),
    maximumLongitudinalImpactParameter = cms.double(17.0),
    computeGhostTrack = cms.bool(True),
    ghostTrackPriorDeltaR = cms.double(0.03),
    jetTracks = cms.InputTag("jetTracksAssociatorAtVertexPFlowLoose"),
    jetDirectionUsingGhostTrack = cms.bool(False),
    minimumNumberOfPixelHits = cms.int32(2),
    jetDirectionUsingTracks = cms.bool(False),
    computeProbabilities = cms.bool(True),
    useTrackQuality = cms.bool(False),
    maximumChiSquared = cms.double(5.0)
)


process.impactParameterTagInfosCA15MassDropFilteredPF = cms.EDProducer("TrackIPProducer",
    maximumTransverseImpactParameter = cms.double(0.2),
    minimumNumberOfHits = cms.int32(8),
    minimumTransverseMomentum = cms.double(1.0),
    primaryVertex = cms.InputTag("offlinePrimaryVertices"),
    maximumLongitudinalImpactParameter = cms.double(17.0),
    computeGhostTrack = cms.bool(True),
    ghostTrackPriorDeltaR = cms.double(0.03),
    jetTracks = cms.InputTag("jetTracksAssociatorAtVertexCA15MassDropFilteredPF"),
    jetDirectionUsingGhostTrack = cms.bool(False),
    minimumNumberOfPixelHits = cms.int32(2),
    jetDirectionUsingTracks = cms.bool(False),
    computeProbabilities = cms.bool(True),
    useTrackQuality = cms.bool(False),
    maximumChiSquared = cms.double(5.0)
)


process.impactParameterTagInfosCA15MassDropFilteredSubjetsPF = cms.EDProducer("TrackIPProducer",
    maximumTransverseImpactParameter = cms.double(0.2),
    minimumNumberOfHits = cms.int32(8),
    minimumTransverseMomentum = cms.double(1.0),
    primaryVertex = cms.InputTag("offlinePrimaryVertices"),
    maximumLongitudinalImpactParameter = cms.double(17.0),
    computeGhostTrack = cms.bool(True),
    ghostTrackPriorDeltaR = cms.double(0.03),
    jetTracks = cms.InputTag("jetTracksAssociatorAtVertexCA15MassDropFilteredSubjetsPF"),
    jetDirectionUsingGhostTrack = cms.bool(False),
    minimumNumberOfPixelHits = cms.int32(2),
    jetDirectionUsingTracks = cms.bool(False),
    computeProbabilities = cms.bool(True),
    useTrackQuality = cms.bool(False),
    maximumChiSquared = cms.double(5.0)
)


process.impactParameterTagInfosCA8PF = cms.EDProducer("TrackIPProducer",
    maximumTransverseImpactParameter = cms.double(0.2),
    minimumNumberOfHits = cms.int32(8),
    minimumTransverseMomentum = cms.double(1.0),
    primaryVertex = cms.InputTag("offlinePrimaryVertices"),
    maximumLongitudinalImpactParameter = cms.double(17.0),
    computeGhostTrack = cms.bool(True),
    ghostTrackPriorDeltaR = cms.double(0.03),
    jetTracks = cms.InputTag("jetTracksAssociatorAtVertexCA8PF"),
    jetDirectionUsingGhostTrack = cms.bool(False),
    minimumNumberOfPixelHits = cms.int32(2),
    jetDirectionUsingTracks = cms.bool(False),
    computeProbabilities = cms.bool(True),
    useTrackQuality = cms.bool(False),
    maximumChiSquared = cms.double(5.0)
)


process.impactParameterTagInfosCA8PrunedPF = cms.EDProducer("TrackIPProducer",
    maximumTransverseImpactParameter = cms.double(0.2),
    minimumNumberOfHits = cms.int32(8),
    minimumTransverseMomentum = cms.double(1.0),
    primaryVertex = cms.InputTag("offlinePrimaryVertices"),
    maximumLongitudinalImpactParameter = cms.double(17.0),
    computeGhostTrack = cms.bool(True),
    ghostTrackPriorDeltaR = cms.double(0.03),
    jetTracks = cms.InputTag("jetTracksAssociatorAtVertexCA8PrunedPF"),
    jetDirectionUsingGhostTrack = cms.bool(False),
    minimumNumberOfPixelHits = cms.int32(2),
    jetDirectionUsingTracks = cms.bool(False),
    computeProbabilities = cms.bool(True),
    useTrackQuality = cms.bool(False),
    maximumChiSquared = cms.double(5.0)
)


process.impactParameterTagInfosCA8PrunedSubjetsPF = cms.EDProducer("TrackIPProducer",
    maximumTransverseImpactParameter = cms.double(0.2),
    minimumNumberOfHits = cms.int32(8),
    minimumTransverseMomentum = cms.double(1.0),
    primaryVertex = cms.InputTag("offlinePrimaryVertices"),
    maximumLongitudinalImpactParameter = cms.double(17.0),
    computeGhostTrack = cms.bool(True),
    ghostTrackPriorDeltaR = cms.double(0.03),
    jetTracks = cms.InputTag("jetTracksAssociatorAtVertexCA8PrunedSubjetsPF"),
    jetDirectionUsingGhostTrack = cms.bool(False),
    minimumNumberOfPixelHits = cms.int32(2),
    jetDirectionUsingTracks = cms.bool(False),
    computeProbabilities = cms.bool(True),
    useTrackQuality = cms.bool(False),
    maximumChiSquared = cms.double(5.0)
)


process.impactParameterTagInfosCAHEPTopTagPF = cms.EDProducer("TrackIPProducer",
    maximumTransverseImpactParameter = cms.double(0.2),
    minimumNumberOfHits = cms.int32(8),
    minimumTransverseMomentum = cms.double(1.0),
    primaryVertex = cms.InputTag("offlinePrimaryVertices"),
    maximumLongitudinalImpactParameter = cms.double(17.0),
    computeGhostTrack = cms.bool(True),
    ghostTrackPriorDeltaR = cms.double(0.03),
    jetTracks = cms.InputTag("jetTracksAssociatorAtVertexCAHEPTopTagPF"),
    jetDirectionUsingGhostTrack = cms.bool(False),
    minimumNumberOfPixelHits = cms.int32(2),
    jetDirectionUsingTracks = cms.bool(False),
    computeProbabilities = cms.bool(True),
    useTrackQuality = cms.bool(False),
    maximumChiSquared = cms.double(5.0)
)


process.impactParameterTagInfosCAHEPTopTagSubjetsPF = cms.EDProducer("TrackIPProducer",
    maximumTransverseImpactParameter = cms.double(0.2),
    minimumNumberOfHits = cms.int32(8),
    minimumTransverseMomentum = cms.double(1.0),
    primaryVertex = cms.InputTag("offlinePrimaryVertices"),
    maximumLongitudinalImpactParameter = cms.double(17.0),
    computeGhostTrack = cms.bool(True),
    ghostTrackPriorDeltaR = cms.double(0.03),
    jetTracks = cms.InputTag("jetTracksAssociatorAtVertexCAHEPTopTagSubjetsPF"),
    jetDirectionUsingGhostTrack = cms.bool(False),
    minimumNumberOfPixelHits = cms.int32(2),
    jetDirectionUsingTracks = cms.bool(False),
    computeProbabilities = cms.bool(True),
    useTrackQuality = cms.bool(False),
    maximumChiSquared = cms.double(5.0)
)


process.impactParameterTagInfosCATopTagPF = cms.EDProducer("TrackIPProducer",
    maximumTransverseImpactParameter = cms.double(0.2),
    minimumNumberOfHits = cms.int32(8),
    minimumTransverseMomentum = cms.double(1.0),
    primaryVertex = cms.InputTag("offlinePrimaryVertices"),
    maximumLongitudinalImpactParameter = cms.double(17.0),
    computeGhostTrack = cms.bool(True),
    ghostTrackPriorDeltaR = cms.double(0.03),
    jetTracks = cms.InputTag("jetTracksAssociatorAtVertexCATopTagPF"),
    jetDirectionUsingGhostTrack = cms.bool(False),
    minimumNumberOfPixelHits = cms.int32(2),
    jetDirectionUsingTracks = cms.bool(False),
    computeProbabilities = cms.bool(True),
    useTrackQuality = cms.bool(False),
    maximumChiSquared = cms.double(5.0)
)


process.impactParameterTagInfosCATopTagSubjetsPF = cms.EDProducer("TrackIPProducer",
    maximumTransverseImpactParameter = cms.double(0.2),
    minimumNumberOfHits = cms.int32(8),
    minimumTransverseMomentum = cms.double(1.0),
    primaryVertex = cms.InputTag("offlinePrimaryVertices"),
    maximumLongitudinalImpactParameter = cms.double(17.0),
    computeGhostTrack = cms.bool(True),
    ghostTrackPriorDeltaR = cms.double(0.03),
    jetTracks = cms.InputTag("jetTracksAssociatorAtVertexCATopTagSubjetsPF"),
    jetDirectionUsingGhostTrack = cms.bool(False),
    minimumNumberOfPixelHits = cms.int32(2),
    jetDirectionUsingTracks = cms.bool(False),
    computeProbabilities = cms.bool(True),
    useTrackQuality = cms.bool(False),
    maximumChiSquared = cms.double(5.0)
)


process.inclusiveMergedVertices = cms.EDProducer("VertexMerger",
    minSignificance = cms.double(10.0),
    secondaryVertices = cms.InputTag("trackVertexArbitrator"),
    maxFraction = cms.double(0.2)
)


process.inclusiveSecondaryVertexFinderFilteredTagInfos = cms.EDProducer("SecondaryVertexProducer",
    extSVDeltaRToJet = cms.double(0.5),
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    vertexReco = cms.PSet(
        seccut = cms.double(6.0),
        primcut = cms.double(1.8),
        smoothing = cms.bool(False),
        weightthreshold = cms.double(0.001),
        minweight = cms.double(0.5),
        finder = cms.string('avr')
    ),
    vertexSelection = cms.PSet(
        sortCriterium = cms.string('dist3dError')
    ),
    constraint = cms.string('BeamSpot'),
    trackIPTagInfos = cms.InputTag("impactParameterTagInfos"),
    vertexCuts = cms.PSet(
        distSig3dMax = cms.double(99999.9),
        fracPV = cms.double(0.79),
        distVal2dMax = cms.double(2.5),
        useTrackWeights = cms.bool(True),
        maxDeltaRToJetAxis = cms.double(0.5),
        v0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        ),
        distSig2dMin = cms.double(2.0),
        multiplicityMin = cms.uint32(2),
        massMax = cms.double(6.5),
        distSig2dMax = cms.double(99999.9),
        distVal3dMax = cms.double(99999.9),
        minimumTrackWeight = cms.double(0.5),
        distVal3dMin = cms.double(-99999.9),
        distVal2dMin = cms.double(0.01),
        distSig3dMin = cms.double(-99999.9)
    ),
    useExternalSV = cms.bool(True),
    minimumTrackWeight = cms.double(0.5),
    usePVError = cms.bool(True),
    trackSelection = cms.PSet(
        totalHitsMin = cms.uint32(8),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(2),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.2),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(99999.9),
        ptMin = cms.double(1.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    trackSort = cms.string('sip3dSig'),
    extSVCollection = cms.InputTag("bToCharmDecayVertexMerged")
)


process.inclusiveSecondaryVertexFinderTagInfos = cms.EDProducer("SecondaryVertexProducer",
    extSVDeltaRToJet = cms.double(0.3),
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    vertexReco = cms.PSet(
        seccut = cms.double(6.0),
        primcut = cms.double(1.8),
        smoothing = cms.bool(False),
        weightthreshold = cms.double(0.001),
        minweight = cms.double(0.5),
        finder = cms.string('avr')
    ),
    vertexSelection = cms.PSet(
        sortCriterium = cms.string('dist3dError')
    ),
    constraint = cms.string('BeamSpot'),
    trackIPTagInfos = cms.InputTag("impactParameterTagInfos"),
    vertexCuts = cms.PSet(
        distSig3dMax = cms.double(99999.9),
        fracPV = cms.double(0.79),
        distVal2dMax = cms.double(2.5),
        useTrackWeights = cms.bool(True),
        maxDeltaRToJetAxis = cms.double(0.5),
        v0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        ),
        distSig2dMin = cms.double(2.0),
        multiplicityMin = cms.uint32(2),
        massMax = cms.double(6.5),
        distSig2dMax = cms.double(99999.9),
        distVal3dMax = cms.double(99999.9),
        minimumTrackWeight = cms.double(0.5),
        distVal3dMin = cms.double(-99999.9),
        distVal2dMin = cms.double(0.01),
        distSig3dMin = cms.double(-99999.9)
    ),
    useExternalSV = cms.bool(True),
    minimumTrackWeight = cms.double(0.5),
    usePVError = cms.bool(True),
    trackSelection = cms.PSet(
        totalHitsMin = cms.uint32(8),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(2),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.2),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(99999.9),
        ptMin = cms.double(1.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    trackSort = cms.string('sip3dSig'),
    extSVCollection = cms.InputTag("inclusiveMergedVertices")
)


process.inclusiveVertexFinder = cms.EDProducer("InclusiveVertexFinder",
    beamSpot = cms.InputTag("offlineBeamSpot"),
    minHits = cms.uint32(8),
    vertexMinDLen2DSig = cms.double(2.5),
    maximumLongitudinalImpactParameter = cms.double(0.3),
    maxNTracks = cms.uint32(30),
    primaryVertices = cms.InputTag("offlinePrimaryVertices"),
    tracks = cms.InputTag("generalTracks"),
    vertexMinAngleCosine = cms.double(0.95),
    clusterizer = cms.PSet(
        seedMin3DIPValue = cms.double(0.005),
        clusterMaxDistance = cms.double(0.05),
        seedMin3DIPSignificance = cms.double(1.2),
        clusterScale = cms.double(1),
        clusterMaxSignificance = cms.double(4.5),
        clusterMinAngleCosine = cms.double(0.5)
    ),
    vertexReco = cms.PSet(
        seccut = cms.double(3),
        primcut = cms.double(1.0),
        finder = cms.string('avr'),
        smoothing = cms.bool(True)
    ),
    vertexMinDLenSig = cms.double(0.5),
    minPt = cms.double(0.8)
)


process.initSubset = cms.EDProducer("TopInitSubset",
    src = cms.InputTag("genParticles")
)


process.isoDeposits = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag(""),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag(""),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.iterativeCone5GenJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(5),
    src = cms.InputTag("genParticlesForJets"),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(6.0),
    doRhoFastjet = cms.bool(False),
    srcPVs = cms.InputTag(""),
    inputEtMin = cms.double(0.0),
    doAreaFastjet = cms.bool(False),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.5),
    jetPtMin = cms.double(3.0),
    inputEMin = cms.double(0.0),
    jetType = cms.string('GenJet'),
    doPUOffsetCorr = cms.bool(False),
    radiusPU = cms.double(0.5),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    jetAlgorithm = cms.string('IterativeCone'),
    rParam = cms.double(0.5)
)


process.iterativeCone5GenJetsNoMuNoNu = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(5),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(6.0),
    maxBadHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('GenJet'),
    minSeed = cms.uint32(14327),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('IterativeCone'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.5),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.5),
    maxProblematicHcalCells = cms.uint32(9999999),
    src = cms.InputTag("genParticlesForJetsNoMuNoNu"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.iterativeCone5GenJetsNoNu = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(5),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(6.0),
    maxBadHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('GenJet'),
    minSeed = cms.uint32(14327),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('IterativeCone'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.5),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.5),
    maxProblematicHcalCells = cms.uint32(9999999),
    src = cms.InputTag("genParticlesForJetsNoNu"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag("goodOfflinePrimaryVertices"),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.iterativeCone5HiGenJets = cms.EDProducer("SubEventGenJetProducer",
    Active_Area_Repeats = cms.int32(5),
    src = cms.InputTag("hiGenParticlesForJets"),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(6.0),
    doRhoFastjet = cms.bool(False),
    srcPVs = cms.InputTag(""),
    inputEtMin = cms.double(0.0),
    doAreaFastjet = cms.bool(True),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.5),
    jetPtMin = cms.double(3.0),
    inputEMin = cms.double(0.0),
    jetType = cms.string('GenJet'),
    doPUOffsetCorr = cms.bool(False),
    radiusPU = cms.double(0.5),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    jetAlgorithm = cms.string('IterativeCone'),
    rParam = cms.double(0.5)
)


process.iterativeCone7HiGenJets = cms.EDProducer("SubEventGenJetProducer",
    Active_Area_Repeats = cms.int32(5),
    doAreaFastjet = cms.bool(True),
    Ghost_EtaMax = cms.double(6.0),
    maxBadHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('GenJet'),
    minSeed = cms.uint32(14327),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('IterativeCone'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.5),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.7),
    maxProblematicHcalCells = cms.uint32(9999999),
    src = cms.InputTag("hiGenParticlesForJets"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.jetBProbabilityBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('jetBProbability'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"))
)


process.jetBProbabilityBJetTagsAODPFlow = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('jetBProbability'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfosAODPFlow"))
)


process.jetBProbabilityBJetTagsAODPFlowLoose = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('jetBProbability'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfosAODPFlowLoose"))
)


process.jetBProbabilityBJetTagsCA15MassDropFilteredPF = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('jetBProbability'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfosCA15MassDropFilteredPF"))
)


process.jetBProbabilityBJetTagsCA15MassDropFilteredSubjetsPF = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('jetBProbability'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfosCA15MassDropFilteredSubjetsPF"))
)


process.jetBProbabilityBJetTagsCA8PF = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('jetBProbability'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfosCA8PF"))
)


process.jetBProbabilityBJetTagsCA8PrunedPF = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('jetBProbability'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfosCA8PrunedPF"))
)


process.jetBProbabilityBJetTagsCA8PrunedSubjetsPF = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('jetBProbability'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfosCA8PrunedSubjetsPF"))
)


process.jetBProbabilityBJetTagsCAHEPTopTagPF = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('jetBProbability'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfosCAHEPTopTagPF"))
)


process.jetBProbabilityBJetTagsCAHEPTopTagSubjetsPF = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('jetBProbability'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfosCAHEPTopTagSubjetsPF"))
)


process.jetBProbabilityBJetTagsCATopTagPF = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('jetBProbability'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfosCATopTagPF"))
)


process.jetBProbabilityBJetTagsCATopTagSubjetsPF = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('jetBProbability'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfosCATopTagSubjetsPF"))
)


process.jetProbabilityBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('jetProbability'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"))
)


process.jetProbabilityBJetTagsAODPFlow = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('jetProbability'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfosAODPFlow"))
)


process.jetProbabilityBJetTagsAODPFlowLoose = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('jetProbability'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfosAODPFlowLoose"))
)


process.jetProbabilityBJetTagsCA15MassDropFilteredPF = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('jetProbability'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfosCA15MassDropFilteredPF"))
)


process.jetProbabilityBJetTagsCA15MassDropFilteredSubjetsPF = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('jetProbability'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfosCA15MassDropFilteredSubjetsPF"))
)


process.jetProbabilityBJetTagsCA8PF = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('jetProbability'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfosCA8PF"))
)


process.jetProbabilityBJetTagsCA8PrunedPF = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('jetProbability'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfosCA8PrunedPF"))
)


process.jetProbabilityBJetTagsCA8PrunedSubjetsPF = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('jetProbability'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfosCA8PrunedSubjetsPF"))
)


process.jetProbabilityBJetTagsCAHEPTopTagPF = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('jetProbability'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfosCAHEPTopTagPF"))
)


process.jetProbabilityBJetTagsCAHEPTopTagSubjetsPF = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('jetProbability'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfosCAHEPTopTagSubjetsPF"))
)


process.jetProbabilityBJetTagsCATopTagPF = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('jetProbability'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfosCATopTagPF"))
)


process.jetProbabilityBJetTagsCATopTagSubjetsPF = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('jetProbability'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfosCATopTagSubjetsPF"))
)


process.jetTracksAssociatorAtVertexCA15MassDropFilteredPF = cms.EDProducer("JetTracksAssociatorAtVertex",
    jets = cms.InputTag("caMassDropFilteredPFlow"),
    tracks = cms.InputTag("generalTracks"),
    useAssigned = cms.bool(False),
    coneSize = cms.double(0.5),
    pvSrc = cms.InputTag("offlinePrimaryVertices")
)


process.jetTracksAssociatorAtVertexCA15MassDropFilteredSubjetsPF = cms.EDProducer("JetTracksAssociatorAtVertex",
    jets = cms.InputTag("caMassDropFilteredPFlow","SubJets"),
    tracks = cms.InputTag("generalTracks"),
    useAssigned = cms.bool(False),
    coneSize = cms.double(0.5),
    pvSrc = cms.InputTag("offlinePrimaryVertices")
)


process.jetTracksAssociatorAtVertexCA8PF = cms.EDProducer("JetTracksAssociatorAtVertex",
    jets = cms.InputTag("ca8PFJetsPFlow"),
    tracks = cms.InputTag("generalTracks"),
    useAssigned = cms.bool(False),
    coneSize = cms.double(0.5),
    pvSrc = cms.InputTag("offlinePrimaryVertices")
)


process.jetTracksAssociatorAtVertexCA8PrunedPF = cms.EDProducer("JetTracksAssociatorAtVertex",
    jets = cms.InputTag("caPrunedPFlow"),
    tracks = cms.InputTag("generalTracks"),
    useAssigned = cms.bool(False),
    coneSize = cms.double(0.5),
    pvSrc = cms.InputTag("offlinePrimaryVertices")
)


process.jetTracksAssociatorAtVertexCA8PrunedSubjetsPF = cms.EDProducer("JetTracksAssociatorAtVertex",
    jets = cms.InputTag("caPrunedPFlow","SubJets"),
    tracks = cms.InputTag("generalTracks"),
    useAssigned = cms.bool(False),
    coneSize = cms.double(0.5),
    pvSrc = cms.InputTag("offlinePrimaryVertices")
)


process.jetTracksAssociatorAtVertexCAHEPTopTagPF = cms.EDProducer("JetTracksAssociatorAtVertex",
    jets = cms.InputTag("caHEPTopTagPFlow"),
    tracks = cms.InputTag("generalTracks"),
    useAssigned = cms.bool(False),
    coneSize = cms.double(0.5),
    pvSrc = cms.InputTag("offlinePrimaryVertices")
)


process.jetTracksAssociatorAtVertexCAHEPTopTagSubjetsPF = cms.EDProducer("JetTracksAssociatorAtVertex",
    jets = cms.InputTag("caHEPTopTagPFlow","caTopSubJets"),
    tracks = cms.InputTag("generalTracks"),
    useAssigned = cms.bool(False),
    coneSize = cms.double(0.5),
    pvSrc = cms.InputTag("offlinePrimaryVertices")
)


process.jetTracksAssociatorAtVertexCATopTagPF = cms.EDProducer("JetTracksAssociatorAtVertex",
    jets = cms.InputTag("caTopTagPFlow"),
    tracks = cms.InputTag("generalTracks"),
    useAssigned = cms.bool(False),
    coneSize = cms.double(0.5),
    pvSrc = cms.InputTag("offlinePrimaryVertices")
)


process.jetTracksAssociatorAtVertexCATopTagSubjetsPF = cms.EDProducer("JetTracksAssociatorAtVertex",
    jets = cms.InputTag("caTopTagPFlow","caTopSubJets"),
    tracks = cms.InputTag("generalTracks"),
    useAssigned = cms.bool(False),
    coneSize = cms.double(0.5),
    pvSrc = cms.InputTag("offlinePrimaryVertices")
)


process.jetTracksAssociatorAtVertexPFlow = cms.EDProducer("JetTracksAssociatorAtVertex",
    jets = cms.InputTag("pfNoTauPFlow"),
    tracks = cms.InputTag("generalTracks"),
    useAssigned = cms.bool(False),
    coneSize = cms.double(0.5),
    pvSrc = cms.InputTag("goodOfflinePrimaryVertices")
)


process.jetTracksAssociatorAtVertexPFlowLoose = cms.EDProducer("JetTracksAssociatorAtVertex",
    jets = cms.InputTag("pfNoTauPFlowLoose"),
    tracks = cms.InputTag("generalTracks"),
    useAssigned = cms.bool(False),
    coneSize = cms.double(0.5),
    pvSrc = cms.InputTag("goodOfflinePrimaryVertices")
)


process.kt4GenJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(5),
    src = cms.InputTag("genParticlesForJets"),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(6.0),
    doRhoFastjet = cms.bool(False),
    srcPVs = cms.InputTag(""),
    inputEtMin = cms.double(0.0),
    doAreaFastjet = cms.bool(False),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.5),
    jetPtMin = cms.double(3.0),
    inputEMin = cms.double(0.0),
    jetType = cms.string('GenJet'),
    doPUOffsetCorr = cms.bool(False),
    radiusPU = cms.double(0.5),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    jetAlgorithm = cms.string('Kt'),
    rParam = cms.double(0.4)
)


process.kt4GenJetsNoMuNoNu = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(5),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(6.0),
    maxBadHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('GenJet'),
    minSeed = cms.uint32(14327),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('Kt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.5),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.4),
    maxProblematicHcalCells = cms.uint32(9999999),
    src = cms.InputTag("genParticlesForJetsNoMuNoNu"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.kt4GenJetsNoNu = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(5),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(6.0),
    maxBadHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('GenJet'),
    minSeed = cms.uint32(14327),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('Kt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.5),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.4),
    maxProblematicHcalCells = cms.uint32(9999999),
    src = cms.InputTag("genParticlesForJetsNoNu"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.kt4HiGenJets = cms.EDProducer("SubEventGenJetProducer",
    Active_Area_Repeats = cms.int32(5),
    src = cms.InputTag("hiGenParticlesForJets"),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(6.0),
    doRhoFastjet = cms.bool(False),
    srcPVs = cms.InputTag(""),
    inputEtMin = cms.double(0.0),
    doAreaFastjet = cms.bool(True),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.5),
    jetPtMin = cms.double(3.0),
    inputEMin = cms.double(0.0),
    jetType = cms.string('GenJet'),
    doPUOffsetCorr = cms.bool(False),
    radiusPU = cms.double(0.5),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    jetAlgorithm = cms.string('Kt'),
    rParam = cms.double(0.4)
)


process.kt6GenJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(5),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(6.0),
    maxBadHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('GenJet'),
    minSeed = cms.uint32(14327),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('Kt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.5),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.6),
    maxProblematicHcalCells = cms.uint32(9999999),
    src = cms.InputTag("genParticlesForJets"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.kt6GenJetsNoMuNoNu = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(5),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(6.0),
    maxBadHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('GenJet'),
    minSeed = cms.uint32(14327),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('Kt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.5),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.6),
    maxProblematicHcalCells = cms.uint32(9999999),
    src = cms.InputTag("genParticlesForJetsNoMuNoNu"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.kt6GenJetsNoNu = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(5),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(6.0),
    maxBadHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('GenJet'),
    minSeed = cms.uint32(14327),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('Kt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.5),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.6),
    maxProblematicHcalCells = cms.uint32(9999999),
    src = cms.InputTag("genParticlesForJetsNoNu"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.kt6HiGenJets = cms.EDProducer("SubEventGenJetProducer",
    Active_Area_Repeats = cms.int32(5),
    doAreaFastjet = cms.bool(True),
    Ghost_EtaMax = cms.double(6.0),
    maxBadHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('GenJet'),
    minSeed = cms.uint32(14327),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('Kt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.5),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.6),
    maxProblematicHcalCells = cms.uint32(9999999),
    src = cms.InputTag("hiGenParticlesForJets"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.kt6PFJetsForIsolation = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(True),
    Ghost_EtaMax = cms.double(5.0),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('PFJet'),
    minSeed = cms.uint32(14327),
    voronoiRfact = cms.double(0.9),
    doRhoFastjet = cms.bool(True),
    jetAlgorithm = cms.string('Kt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(2.5),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.6),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("particleFlow"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.kt6PFJetsForRhoComputationVoronoi = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(True),
    Ghost_EtaMax = cms.double(5.0),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('PFJet'),
    minSeed = cms.uint32(14327),
    voronoiRfact = cms.double(0.9),
    doRhoFastjet = cms.bool(True),
    jetAlgorithm = cms.string('Kt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.6),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("particleFlow"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.kt6PFJetsForRhoComputationVoronoiPFlow = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(True),
    voronoiRfact = cms.double(0.9),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('PFJet'),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(True),
    jetAlgorithm = cms.string('Kt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.6),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("particleFlow"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag("goodOfflinePrimaryVertices"),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.kt6PFJetsForRhoComputationVoronoiPFlowLoose = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(True),
    voronoiRfact = cms.double(0.9),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('PFJet'),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(True),
    jetAlgorithm = cms.string('Kt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.6),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("particleFlow"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag("goodOfflinePrimaryVertices"),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.muPFIsoDepositCharged = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("pfSelectedMuons"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllChargedHadrons"),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.muPFIsoDepositChargedAll = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("pfSelectedMuons"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllChargedParticles"),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.muPFIsoDepositChargedAllPFlow = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("pfSelectedMuonsPFlow"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllChargedParticlesPFlow"),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.muPFIsoDepositChargedAllPFlowLoose = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("pfSelectedMuonsPFlowLoose"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllChargedParticlesPFlowLoose"),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.muPFIsoDepositChargedPFlow = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("pfSelectedMuonsPFlow"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllChargedHadronsPFlow"),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.muPFIsoDepositChargedPFlowLoose = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("pfSelectedMuonsPFlowLoose"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllChargedHadronsPFlowLoose"),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.muPFIsoDepositGamma = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("pfSelectedMuons"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllPhotons"),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.muPFIsoDepositGammaPFlow = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("pfSelectedMuonsPFlow"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllPhotonsPFlow"),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.muPFIsoDepositGammaPFlowLoose = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("pfSelectedMuonsPFlowLoose"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllPhotonsPFlowLoose"),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.muPFIsoDepositNeutral = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("pfSelectedMuons"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllNeutralHadrons"),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.muPFIsoDepositNeutralPFlow = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("pfSelectedMuonsPFlow"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllNeutralHadronsPFlow"),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.muPFIsoDepositNeutralPFlowLoose = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("pfSelectedMuonsPFlowLoose"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllNeutralHadronsPFlowLoose"),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.muPFIsoDepositPU = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("pfSelectedMuons"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfPileUpAllChargedParticles"),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.muPFIsoDepositPUPFlow = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("pfSelectedMuonsPFlow"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfPileUpAllChargedParticlesPFlow"),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.muPFIsoDepositPUPFlowLoose = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("pfSelectedMuonsPFlowLoose"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfPileUpAllChargedParticlesPFlowLoose"),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.muPFIsoValueCharged03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositCharged"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('0.0001', 
            'Threshold(0.0)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFIsoValueCharged03PFlow = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositChargedPFlow"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('0.0001', 
            'Threshold(0.0)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFIsoValueCharged03PFlowLoose = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositChargedPFlowLoose"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('0.0001', 
            'Threshold(0.0)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFIsoValueCharged04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositCharged"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('0.0001', 
            'Threshold(0.0)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFIsoValueCharged04PFlow = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositChargedPFlow"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('0.0001', 
            'Threshold(0.0)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFIsoValueCharged04PFlowLoose = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositChargedPFlowLoose"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('0.0001', 
            'Threshold(0.0)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFIsoValueChargedAll03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositChargedAll"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('0.0001', 
            'Threshold(0.0)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFIsoValueChargedAll03PFlow = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositChargedAllPFlow"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('0.0001', 
            'Threshold(0.0)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFIsoValueChargedAll03PFlowLoose = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositChargedAllPFlowLoose"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('0.0001', 
            'Threshold(0.0)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFIsoValueChargedAll04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositChargedAll"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('0.0001', 
            'Threshold(0.0)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFIsoValueChargedAll04PFlow = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositChargedAllPFlow"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('0.0001', 
            'Threshold(0.0)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFIsoValueChargedAll04PFlowLoose = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositChargedAllPFlowLoose"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('0.0001', 
            'Threshold(0.0)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFIsoValueGamma03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositGamma"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(0.5)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFIsoValueGamma03PFlow = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositGammaPFlow"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(0.5)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFIsoValueGamma03PFlowLoose = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositGammaPFlowLoose"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(0.5)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFIsoValueGamma04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositGamma"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(0.5)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFIsoValueGamma04PFlow = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositGammaPFlow"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(0.5)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFIsoValueGamma04PFlowLoose = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositGammaPFlowLoose"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(0.5)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFIsoValueGammaHighThreshold03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositGamma"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(1.0)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFIsoValueGammaHighThreshold03PFlow = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositGammaPFlow"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(1.0)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFIsoValueGammaHighThreshold03PFlowLoose = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositGammaPFlowLoose"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(1.0)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFIsoValueGammaHighThreshold04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositGamma"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(1.0)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFIsoValueGammaHighThreshold04PFlow = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositGammaPFlow"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(1.0)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFIsoValueGammaHighThreshold04PFlowLoose = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositGammaPFlowLoose"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(1.0)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFIsoValueNeutral03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositNeutral"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(0.5)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFIsoValueNeutral03PFlow = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositNeutralPFlow"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(0.5)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFIsoValueNeutral03PFlowLoose = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositNeutralPFlowLoose"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(0.5)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFIsoValueNeutral04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositNeutral"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(0.5)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFIsoValueNeutral04PFlow = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositNeutralPFlow"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(0.5)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFIsoValueNeutral04PFlowLoose = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositNeutralPFlowLoose"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(0.5)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFIsoValueNeutralHighThreshold03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositNeutral"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(1.0)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFIsoValueNeutralHighThreshold03PFlow = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositNeutralPFlow"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(1.0)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFIsoValueNeutralHighThreshold03PFlowLoose = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositNeutralPFlowLoose"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(1.0)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFIsoValueNeutralHighThreshold04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositNeutral"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(1.0)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFIsoValueNeutralHighThreshold04PFlow = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositNeutralPFlow"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(1.0)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFIsoValueNeutralHighThreshold04PFlowLoose = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositNeutralPFlowLoose"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(1.0)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFIsoValuePU03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositPU"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(0.5)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFIsoValuePU03PFlow = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositPUPFlow"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(0.5)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFIsoValuePU03PFlowLoose = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositPUPFlowLoose"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(0.5)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFIsoValuePU04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositPU"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(0.5)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFIsoValuePU04PFlow = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositPUPFlow"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(0.5)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFIsoValuePU04PFlowLoose = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositPUPFlowLoose"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(0.5)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muonCaloMETcorr = cms.EDProducer("MuonMETcorrInputProducer",
    srcMuonCorrections = cms.InputTag("muonMETValueMapProducer","muCorrData"),
    src = cms.InputTag("muons")
)


process.muonCaloMETcorrPFlow = cms.EDProducer("MuonMETcorrInputProducer",
    srcMuonCorrections = cms.InputTag("muonMETValueMapProducer","muCorrData"),
    src = cms.InputTag("muons")
)


process.muonCaloMETcorrPFlowLoose = cms.EDProducer("MuonMETcorrInputProducer",
    srcMuonCorrections = cms.InputTag("muonMETValueMapProducer","muCorrData"),
    src = cms.InputTag("muons")
)


process.muonMatch = cms.EDProducer("MCMatcher",
    src = cms.InputTag("muons"),
    maxDPtRel = cms.double(0.5),
    mcPdgId = cms.vint32(13),
    mcStatus = cms.vint32(1),
    resolveByMatchQuality = cms.bool(False),
    maxDeltaR = cms.double(0.5),
    checkCharge = cms.bool(True),
    resolveAmbiguities = cms.bool(True),
    matched = cms.InputTag("genParticles")
)


process.muonMatchPFlow = cms.EDProducer("MCMatcher",
    src = cms.InputTag("pfIsolatedMuonsPFlow"),
    maxDPtRel = cms.double(0.5),
    mcPdgId = cms.vint32(13),
    mcStatus = cms.vint32(1),
    resolveByMatchQuality = cms.bool(False),
    maxDeltaR = cms.double(0.5),
    checkCharge = cms.bool(True),
    resolveAmbiguities = cms.bool(True),
    matched = cms.InputTag("genParticles")
)


process.muonMatchPFlowLoose = cms.EDProducer("MCMatcher",
    src = cms.InputTag("pfMuonsPFlowLoose"),
    maxDPtRel = cms.double(0.5),
    mcPdgId = cms.vint32(13),
    mcStatus = cms.vint32(1),
    resolveByMatchQuality = cms.bool(False),
    maxDeltaR = cms.double(0.5),
    checkCharge = cms.bool(True),
    resolveAmbiguities = cms.bool(True),
    matched = cms.InputTag("genParticles")
)


process.negativeCombinedMVABJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('negativeCombinedMVA'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"), cms.InputTag("secondaryVertexNegativeTagInfos"), cms.InputTag("softPFMuonsTagInfos"), cms.InputTag("softPFElectronsTagInfos"))
)


process.negativeCombinedSecondaryVertexSoftPFLeptonV1BJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('negativeCombinedSecondaryVertexSoftPFLeptonV1'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"), cms.InputTag("secondaryVertexNegativeTagInfos"), cms.InputTag("softPFMuonsTagInfos"), cms.InputTag("softPFElectronsTagInfos"))
)


process.negativeOnlyJetBProbabilityJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('negativeOnlyJetBProbability'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"))
)


process.negativeOnlyJetProbabilityJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('negativeOnlyJetProbability'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"))
)


process.negativeSoftPFElectronBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('negativeSoftPFElectron'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFElectronsTagInfos"))
)


process.negativeSoftPFElectronByIP2dBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('negativeSoftPFElectronByIP2d'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFElectronsTagInfos"))
)


process.negativeSoftPFElectronByIP3dBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('negativeSoftPFElectronByIP3d'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFElectronsTagInfos"))
)


process.negativeSoftPFElectronByPtBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('negativeSoftPFElectronByPt'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFElectronsTagInfos"))
)


process.negativeSoftPFMuonBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('negativeSoftPFMuon'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFMuonsTagInfos"))
)


process.negativeSoftPFMuonByIP2dBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('negativeSoftPFMuonByIP2d'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFMuonsTagInfos"))
)


process.negativeSoftPFMuonByIP3dBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('negativeSoftPFMuonByIP3d'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFMuonsTagInfos"))
)


process.negativeSoftPFMuonByPtBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('negativeSoftPFMuonByPt'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFMuonsTagInfos"))
)


process.negativeTrackCountingHighEffJetTags = cms.EDProducer("JetTagProducer",
    trackQualityClass = cms.string('any'),
    jetTagComputer = cms.string('negativeTrackCounting3D2nd'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"))
)


process.negativeTrackCountingHighPurJetTags = cms.EDProducer("JetTagProducer",
    trackQualityClass = cms.string('any'),
    jetTagComputer = cms.string('negativeTrackCounting3D3rd'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"))
)


process.particleFlowDisplacedVertex = cms.EDProducer("PFDisplacedVertexProducer",
    verbose = cms.untracked.bool(False),
    primaryVertexCut = cms.double(2.5),
    avfParameters = cms.PSet(
        sigmacut = cms.double(6.0),
        ratio = cms.double(0.25),
        Tini = cms.double(256.0)
    ),
    minAdaptWeight = cms.double(0.5),
    switchOff2TrackVertex = cms.untracked.bool(True),
    vertexIdentifierParameters = cms.PSet(
        logPrimSec_min = cms.double(0.0),
        pt_kink_min = cms.double(3.0),
        masses = cms.vdouble(0.05, 0.485, 0.515, 0.48, 0.52, 
            1.107, 1.125, 0.2),
        angles = cms.vdouble(15, 15),
        pt_min = cms.double(0.5),
        bIdentifyVertices = cms.bool(True),
        looper_eta_max = cms.double(0.1)
    ),
    mainVertexLabel = cms.InputTag("offlinePrimaryVertices"),
    vertexCandidatesLabel = cms.InputTag("particleFlowDisplacedVertexCandidate"),
    transvSize = cms.double(1.0),
    offlineBeamSpotLabel = cms.InputTag("offlineBeamSpot"),
    tracksSelectorParameters = cms.PSet(
        nChi2_max = cms.double(5.0),
        bSelectTracks = cms.bool(True),
        nOuterHits_max = cms.int32(9),
        dxy_min = cms.double(0.2),
        nHits_min = cms.int32(6),
        nChi2_min = cms.double(0.5),
        pt_min = cms.double(0.2),
        quality = cms.string('HighPurity')
    ),
    debug = cms.untracked.bool(False),
    tobCut = cms.double(100),
    longSize = cms.double(5),
    tecCut = cms.double(220)
)


process.patConversionsPFlow = cms.EDProducer("PATConversionProducer",
    electronSource = cms.InputTag("selectedPatElectronsPFlow")
)


process.patConversionsPFlowLoose = cms.EDProducer("PATConversionProducer",
    electronSource = cms.InputTag("selectedPatElectronsPFlowLoose")
)


process.patElectrons = cms.EDProducer("PATElectronProducer",
    embedPreshowerClusters = cms.bool(True),
    embedHighLevelSelection = cms.bool(True),
    embedRecHits = cms.bool(True),
    embedGsfElectronCore = cms.bool(True),
    electronSource = cms.InputTag("gsfElectrons"),
    resolutions = cms.PSet(

    ),
    pfElectronSource = cms.InputTag("particleFlow"),
    userIsolation = cms.PSet(

    ),
    embedPflowBasicClusters = cms.bool(True),
    embedSuperCluster = cms.bool(True),
    embedSeedCluster = cms.bool(True),
    embedPFCandidate = cms.bool(True),
    pfCandidateMap = cms.InputTag("particleFlow","electrons"),
    addElectronID = cms.bool(True),
    efficiencies = cms.PSet(

    ),
    reducedBarrelRecHitCollection = cms.InputTag("reducedEcalRecHitsEB"),
    embedPflowPreshowerClusters = cms.bool(True),
    embedGsfTrack = cms.bool(True),
    usePV = cms.bool(True),
    useParticleFlow = cms.bool(False),
    userData = cms.PSet(
        userCands = cms.PSet(
            src = cms.VInputTag("")
        ),
        userInts = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFloats = cms.PSet(
            src = cms.VInputTag("")
        ),
        userClasses = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFunctionLabels = cms.vstring(),
        userFunctions = cms.vstring()
    ),
    embedTrack = cms.bool(True),
    addEfficiencies = cms.bool(False),
    embedPflowSuperCluster = cms.bool(True),
    reducedEndcapRecHitCollection = cms.InputTag("reducedEcalRecHitsEE"),
    pvSrc = cms.InputTag("goodOfflinePrimaryVertices"),
    electronIDSources = cms.PSet(
        eidTight = cms.InputTag("eidTight"),
        eidLoose = cms.InputTag("eidLoose"),
        eidRobustTight = cms.InputTag("eidRobustTight"),
        eidRobustHighEnergy = cms.InputTag("eidRobustHighEnergy"),
        eidRobustLoose = cms.InputTag("eidRobustLoose")
    ),
    genParticleMatch = cms.InputTag("electronMatch"),
    beamLineSrc = cms.InputTag("offlineBeamSpot"),
    addGenMatch = cms.bool(True),
    addResolutions = cms.bool(False),
    isoDeposits = cms.PSet(

    ),
    embedGenMatch = cms.bool(True),
    embedBasicClusters = cms.bool(True)
)


process.patElectronsPFlow = cms.EDProducer("PATElectronProducer",
    embedPreshowerClusters = cms.bool(True),
    embedHighLevelSelection = cms.bool(True),
    embedRecHits = cms.bool(True),
    embedGsfElectronCore = cms.bool(True),
    electronSource = cms.InputTag("gsfElectrons"),
    resolutions = cms.PSet(

    ),
    pfElectronSource = cms.InputTag("pfIsolatedElectronsPFlow"),
    embedPflowSuperCluster = cms.bool(True),
    reducedBarrelRecHitCollection = cms.InputTag("reducedEcalRecHitsEB"),
    embedPflowBasicClusters = cms.bool(True),
    embedSuperCluster = cms.bool(True),
    embedSeedCluster = cms.bool(True),
    embedPFCandidate = cms.bool(True),
    pfCandidateMap = cms.InputTag("particleFlow","electrons"),
    addElectronID = cms.bool(True),
    efficiencies = cms.PSet(

    ),
    userIsolation = cms.PSet(

    ),
    embedPflowPreshowerClusters = cms.bool(True),
    embedGsfTrack = cms.bool(True),
    useParticleFlow = cms.bool(True),
    userData = cms.PSet(
        userCands = cms.PSet(
            src = cms.VInputTag("")
        ),
        userInts = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFloats = cms.PSet(
            src = cms.VInputTag("")
        ),
        userClasses = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFunctionLabels = cms.vstring(),
        userFunctions = cms.vstring()
    ),
    embedTrack = cms.bool(True),
    addEfficiencies = cms.bool(False),
    usePV = cms.bool(True),
    reducedEndcapRecHitCollection = cms.InputTag("reducedEcalRecHitsEE"),
    pvSrc = cms.InputTag("goodOfflinePrimaryVertices"),
    addResolutions = cms.bool(False),
    genParticleMatch = cms.InputTag("electronMatchPFlow"),
    beamLineSrc = cms.InputTag("offlineBeamSpot"),
    addGenMatch = cms.bool(True),
    electronIDSources = cms.PSet(
        eidTight = cms.InputTag("eidTight"),
        eidLoose = cms.InputTag("eidLoose"),
        eidRobustTight = cms.InputTag("eidRobustTight"),
        eidRobustHighEnergy = cms.InputTag("eidRobustHighEnergy"),
        eidRobustLoose = cms.InputTag("eidRobustLoose"),
        mvaTrigV0 = cms.InputTag("mvaTrigV0"),
        mvaNonTrigV0 = cms.InputTag("mvaNonTrigV0")
    ),
    isoDeposits = cms.PSet(
        pfNeutralHadrons = cms.InputTag("elPFIsoDepositNeutralPFlow"),
        pfChargedAll = cms.InputTag("elPFIsoDepositChargedAllPFlow"),
        pfPUChargedHadrons = cms.InputTag("elPFIsoDepositPUPFlow"),
        pfPhotons = cms.InputTag("elPFIsoDepositGammaPFlow"),
        pfChargedHadrons = cms.InputTag("elPFIsoDepositChargedPFlow")
    ),
    embedGenMatch = cms.bool(True),
    embedBasicClusters = cms.bool(True),
    isolationValues = cms.PSet(
        pfNeutralHadrons = cms.InputTag("elPFIsoValueNeutral03PFIdPFlow"),
        pfChargedAll = cms.InputTag("elPFIsoValueChargedAll03PFIdPFlow"),
        pfPUChargedHadrons = cms.InputTag("elPFIsoValuePU03PFIdPFlow"),
        pfPhotons = cms.InputTag("elPFIsoValueGamma03PFIdPFlow"),
        pfChargedHadrons = cms.InputTag("elPFIsoValueCharged03PFIdPFlow")
    )
)


process.patElectronsPFlowLoose = cms.EDProducer("PATElectronProducer",
    embedPreshowerClusters = cms.bool(True),
    embedHighLevelSelection = cms.bool(True),
    embedRecHits = cms.bool(True),
    embedGsfElectronCore = cms.bool(True),
    electronSource = cms.InputTag("gsfElectrons"),
    resolutions = cms.PSet(

    ),
    pfElectronSource = cms.InputTag("pfElectronsPFlowLoose"),
    embedPflowSuperCluster = cms.bool(True),
    reducedBarrelRecHitCollection = cms.InputTag("reducedEcalRecHitsEB"),
    embedPflowBasicClusters = cms.bool(True),
    embedSuperCluster = cms.bool(True),
    embedSeedCluster = cms.bool(True),
    embedPFCandidate = cms.bool(True),
    pfCandidateMap = cms.InputTag("particleFlow","electrons"),
    addElectronID = cms.bool(True),
    efficiencies = cms.PSet(

    ),
    userIsolation = cms.PSet(

    ),
    embedPflowPreshowerClusters = cms.bool(True),
    embedGsfTrack = cms.bool(True),
    useParticleFlow = cms.bool(True),
    userData = cms.PSet(
        userCands = cms.PSet(
            src = cms.VInputTag("")
        ),
        userInts = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFloats = cms.PSet(
            src = cms.VInputTag("")
        ),
        userClasses = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFunctionLabels = cms.vstring(),
        userFunctions = cms.vstring()
    ),
    embedTrack = cms.bool(True),
    addEfficiencies = cms.bool(False),
    usePV = cms.bool(True),
    reducedEndcapRecHitCollection = cms.InputTag("reducedEcalRecHitsEE"),
    pvSrc = cms.InputTag("goodOfflinePrimaryVertices"),
    addResolutions = cms.bool(False),
    genParticleMatch = cms.InputTag("electronMatchPFlowLoose"),
    beamLineSrc = cms.InputTag("offlineBeamSpot"),
    addGenMatch = cms.bool(True),
    electronIDSources = cms.PSet(
        eidTight = cms.InputTag("eidTight"),
        eidLoose = cms.InputTag("eidLoose"),
        eidRobustTight = cms.InputTag("eidRobustTight"),
        eidRobustHighEnergy = cms.InputTag("eidRobustHighEnergy"),
        eidRobustLoose = cms.InputTag("eidRobustLoose"),
        mvaTrigV0 = cms.InputTag("mvaTrigV0"),
        mvaNonTrigV0 = cms.InputTag("mvaNonTrigV0")
    ),
    isoDeposits = cms.PSet(
        pfNeutralHadrons = cms.InputTag("elPFIsoDepositNeutralPFlowLoose"),
        pfChargedAll = cms.InputTag("elPFIsoDepositChargedAllPFlowLoose"),
        pfPUChargedHadrons = cms.InputTag("elPFIsoDepositPUPFlowLoose"),
        pfPhotons = cms.InputTag("elPFIsoDepositGammaPFlowLoose"),
        pfChargedHadrons = cms.InputTag("elPFIsoDepositChargedPFlowLoose")
    ),
    embedGenMatch = cms.bool(True),
    embedBasicClusters = cms.bool(True),
    isolationValues = cms.PSet(
        pfNeutralHadrons = cms.InputTag("elPFIsoValueNeutral03PFIdPFlowLoose"),
        pfChargedAll = cms.InputTag("elPFIsoValueChargedAll03PFIdPFlowLoose"),
        pfPUChargedHadrons = cms.InputTag("elPFIsoValuePU03PFIdPFlowLoose"),
        pfPhotons = cms.InputTag("elPFIsoValueGamma03PFIdPFlowLoose"),
        pfChargedHadrons = cms.InputTag("elPFIsoValueCharged03PFIdPFlowLoose")
    )
)


process.patHemispheres = cms.EDProducer("PATHemisphereProducer",
    patJets = cms.InputTag("cleanLayer1Jets"),
    maxTauEta = cms.double(-1),
    maxPhotonEta = cms.double(5),
    minMuonEt = cms.double(7),
    patMuons = cms.InputTag("cleanLayer1Muons"),
    seedMethod = cms.int32(3),
    patElectrons = cms.InputTag("cleanLayer1Electrons"),
    patMets = cms.InputTag("layer1METs"),
    maxMuonEta = cms.double(5),
    minTauEt = cms.double(1000000),
    minPhotonEt = cms.double(200000),
    minElectronEt = cms.double(7),
    patPhotons = cms.InputTag("cleanLayer1Photons"),
    combinationMethod = cms.int32(3),
    maxJetEta = cms.double(5),
    maxElectronEta = cms.double(5),
    minJetEt = cms.double(30),
    patTaus = cms.InputTag("cleanLayer1Taus")
)


process.patJetCharge = cms.EDProducer("JetChargeProducer",
    var = cms.string('Pt'),
    src = cms.InputTag("ak5JetTracksAssociatorAtVertex"),
    exp = cms.double(1.0)
)


process.patJetChargeCA15MassDropFilteredPF = cms.EDProducer("JetChargeProducer",
    var = cms.string('Pt'),
    src = cms.InputTag("jetTracksAssociatorAtVertexCA15MassDropFilteredPF"),
    exp = cms.double(1.0)
)


process.patJetChargeCA15MassDropFilteredSubjetsPF = cms.EDProducer("JetChargeProducer",
    var = cms.string('Pt'),
    src = cms.InputTag("jetTracksAssociatorAtVertexCA15MassDropFilteredSubjetsPF"),
    exp = cms.double(1.0)
)


process.patJetChargeCA8PF = cms.EDProducer("JetChargeProducer",
    var = cms.string('Pt'),
    src = cms.InputTag("jetTracksAssociatorAtVertexCA8PF"),
    exp = cms.double(1.0)
)


process.patJetChargeCA8PrunedPF = cms.EDProducer("JetChargeProducer",
    var = cms.string('Pt'),
    src = cms.InputTag("jetTracksAssociatorAtVertexCA8PrunedPF"),
    exp = cms.double(1.0)
)


process.patJetChargeCA8PrunedSubjetsPF = cms.EDProducer("JetChargeProducer",
    var = cms.string('Pt'),
    src = cms.InputTag("jetTracksAssociatorAtVertexCA8PrunedSubjetsPF"),
    exp = cms.double(1.0)
)


process.patJetChargeCAHEPTopTagPF = cms.EDProducer("JetChargeProducer",
    var = cms.string('Pt'),
    src = cms.InputTag("jetTracksAssociatorAtVertexCAHEPTopTagPF"),
    exp = cms.double(1.0)
)


process.patJetChargeCAHEPTopTagSubjetsPF = cms.EDProducer("JetChargeProducer",
    var = cms.string('Pt'),
    src = cms.InputTag("jetTracksAssociatorAtVertexCAHEPTopTagSubjetsPF"),
    exp = cms.double(1.0)
)


process.patJetChargeCATopTagPF = cms.EDProducer("JetChargeProducer",
    var = cms.string('Pt'),
    src = cms.InputTag("jetTracksAssociatorAtVertexCATopTagPF"),
    exp = cms.double(1.0)
)


process.patJetChargeCATopTagSubjetsPF = cms.EDProducer("JetChargeProducer",
    var = cms.string('Pt'),
    src = cms.InputTag("jetTracksAssociatorAtVertexCATopTagSubjetsPF"),
    exp = cms.double(1.0)
)


process.patJetChargePFlow = cms.EDProducer("JetChargeProducer",
    var = cms.string('Pt'),
    src = cms.InputTag("jetTracksAssociatorAtVertexPFlow"),
    exp = cms.double(1.0)
)


process.patJetChargePFlowLoose = cms.EDProducer("JetChargeProducer",
    var = cms.string('Pt'),
    src = cms.InputTag("jetTracksAssociatorAtVertexPFlowLoose"),
    exp = cms.double(1.0)
)


process.patJetCorrFactors = cms.EDProducer("JetCorrFactorsProducer",
    src = cms.InputTag("ak5PFJets"),
    emf = cms.bool(False),
    primaryVertices = cms.InputTag("goodOfflinePrimaryVertices"),
    levels = cms.vstring('L1FastJet', 
        'L2Relative', 
        'L3Absolute'),
    useNPV = cms.bool(True),
    rho = cms.InputTag("kt6PFJets","rho"),
    useRho = cms.bool(True),
    payload = cms.string('AK5PFchs'),
    flavorType = cms.string('J')
)


process.patJetCorrFactorsCA15FilteredPF = cms.EDProducer("JetCorrFactorsProducer",
    src = cms.InputTag("caFilteredPFlow"),
    emf = cms.bool(False),
    primaryVertices = cms.InputTag("goodOfflinePrimaryVertices"),
    levels = cms.vstring('L1FastJet', 
        'L2Relative', 
        'L3Absolute'),
    useNPV = cms.bool(True),
    rho = cms.InputTag("kt6PFJets","rho"),
    useRho = cms.bool(True),
    payload = cms.string('AK7PFchs'),
    flavorType = cms.string('J')
)


process.patJetCorrFactorsCA15MassDropFilteredPF = cms.EDProducer("JetCorrFactorsProducer",
    src = cms.InputTag("caMassDropFilteredPFlow"),
    emf = cms.bool(False),
    primaryVertices = cms.InputTag("goodOfflinePrimaryVertices"),
    levels = cms.vstring('L1FastJet', 
        'L2Relative', 
        'L3Absolute'),
    useNPV = cms.bool(True),
    rho = cms.InputTag("kt6PFJets","rho"),
    useRho = cms.bool(True),
    payload = cms.string('AK7PFchs'),
    flavorType = cms.string('J')
)


process.patJetCorrFactorsCA15MassDropFilteredSubjetsPF = cms.EDProducer("JetCorrFactorsProducer",
    src = cms.InputTag("caMassDropFilteredPFlow","SubJets"),
    emf = cms.bool(False),
    primaryVertices = cms.InputTag("goodOfflinePrimaryVertices"),
    levels = cms.vstring('L1FastJet', 
        'L2Relative', 
        'L3Absolute'),
    useNPV = cms.bool(True),
    rho = cms.InputTag("kt6PFJets","rho"),
    useRho = cms.bool(True),
    payload = cms.string('AK5PFchs'),
    flavorType = cms.string('J')
)


process.patJetCorrFactorsCA8PF = cms.EDProducer("JetCorrFactorsProducer",
    src = cms.InputTag("ca8PFJetsPFlow"),
    emf = cms.bool(False),
    primaryVertices = cms.InputTag("goodOfflinePrimaryVertices"),
    levels = cms.vstring('L1FastJet', 
        'L2Relative', 
        'L3Absolute'),
    useNPV = cms.bool(True),
    rho = cms.InputTag("kt6PFJets","rho"),
    useRho = cms.bool(True),
    payload = cms.string('AK7PFchs'),
    flavorType = cms.string('J')
)


process.patJetCorrFactorsCA8PrunedPF = cms.EDProducer("JetCorrFactorsProducer",
    src = cms.InputTag("caPrunedPFlow"),
    emf = cms.bool(False),
    primaryVertices = cms.InputTag("goodOfflinePrimaryVertices"),
    levels = cms.vstring('L1FastJet', 
        'L2Relative', 
        'L3Absolute'),
    useNPV = cms.bool(True),
    rho = cms.InputTag("kt6PFJets","rho"),
    useRho = cms.bool(True),
    payload = cms.string('AK7PFchs'),
    flavorType = cms.string('J')
)


process.patJetCorrFactorsCA8PrunedSubjetsPF = cms.EDProducer("JetCorrFactorsProducer",
    src = cms.InputTag("caPrunedPFlow","SubJets"),
    emf = cms.bool(False),
    primaryVertices = cms.InputTag("goodOfflinePrimaryVertices"),
    levels = cms.vstring('L1FastJet', 
        'L2Relative', 
        'L3Absolute'),
    useNPV = cms.bool(True),
    rho = cms.InputTag("kt6PFJets","rho"),
    useRho = cms.bool(True),
    payload = cms.string('AK5PFchs'),
    flavorType = cms.string('J')
)


process.patJetCorrFactorsCAHEPTopTagPF = cms.EDProducer("JetCorrFactorsProducer",
    src = cms.InputTag("caHEPTopTagPFlow"),
    emf = cms.bool(False),
    primaryVertices = cms.InputTag("goodOfflinePrimaryVertices"),
    levels = cms.vstring('L1FastJet', 
        'L2Relative', 
        'L3Absolute'),
    useNPV = cms.bool(True),
    rho = cms.InputTag("kt6PFJets","rho"),
    useRho = cms.bool(True),
    payload = cms.string('AK7PFchs'),
    flavorType = cms.string('J')
)


process.patJetCorrFactorsCAHEPTopTagSubjetsPF = cms.EDProducer("JetCorrFactorsProducer",
    src = cms.InputTag("caHEPTopTagPFlow","caTopSubJets"),
    emf = cms.bool(False),
    primaryVertices = cms.InputTag("goodOfflinePrimaryVertices"),
    levels = cms.vstring('L1FastJet', 
        'L2Relative', 
        'L3Absolute'),
    useNPV = cms.bool(True),
    rho = cms.InputTag("kt6PFJets","rho"),
    useRho = cms.bool(True),
    payload = cms.string('AK5PFchs'),
    flavorType = cms.string('J')
)


process.patJetCorrFactorsCATopTagPF = cms.EDProducer("JetCorrFactorsProducer",
    src = cms.InputTag("caTopTagPFlow"),
    emf = cms.bool(False),
    primaryVertices = cms.InputTag("goodOfflinePrimaryVertices"),
    levels = cms.vstring('L1FastJet', 
        'L2Relative', 
        'L3Absolute'),
    useNPV = cms.bool(True),
    rho = cms.InputTag("kt6PFJets","rho"),
    useRho = cms.bool(True),
    payload = cms.string('AK7PFchs'),
    flavorType = cms.string('J')
)


process.patJetCorrFactorsCATopTagSubjetsPF = cms.EDProducer("JetCorrFactorsProducer",
    src = cms.InputTag("caTopTagPFlow","caTopSubJets"),
    emf = cms.bool(False),
    primaryVertices = cms.InputTag("goodOfflinePrimaryVertices"),
    levels = cms.vstring('L1FastJet', 
        'L2Relative', 
        'L3Absolute'),
    useNPV = cms.bool(True),
    rho = cms.InputTag("kt6PFJets","rho"),
    useRho = cms.bool(True),
    payload = cms.string('AK5PFchs'),
    flavorType = cms.string('J')
)


process.patJetCorrFactorsPFlow = cms.EDProducer("JetCorrFactorsProducer",
    src = cms.InputTag("pfNoTauPFlow"),
    emf = cms.bool(False),
    primaryVertices = cms.InputTag("goodOfflinePrimaryVertices"),
    levels = cms.vstring('L1FastJet', 
        'L2Relative', 
        'L3Absolute'),
    useNPV = cms.bool(True),
    rho = cms.InputTag("kt6PFJets","rho"),
    useRho = cms.bool(True),
    payload = cms.string('AK5PFchs'),
    flavorType = cms.string('J')
)


process.patJetCorrFactorsPFlowLoose = cms.EDProducer("JetCorrFactorsProducer",
    src = cms.InputTag("pfNoTauPFlowLoose"),
    emf = cms.bool(False),
    primaryVertices = cms.InputTag("goodOfflinePrimaryVertices"),
    levels = cms.vstring('L1FastJet', 
        'L2Relative', 
        'L3Absolute'),
    useNPV = cms.bool(True),
    rho = cms.InputTag("kt6PFJets","rho"),
    useRho = cms.bool(True),
    payload = cms.string('AK5PFchs'),
    flavorType = cms.string('J')
)


process.patJetFlavourAssociation = cms.EDProducer("JetFlavourIdentifier",
    srcByReference = cms.InputTag("patJetPartonAssociation"),
    physicsDefinition = cms.bool(False)
)


process.patJetFlavourAssociationCA15FilteredPF = cms.EDProducer("JetFlavourIdentifier",
    srcByReference = cms.InputTag("patJetPartonAssociationCA15FilteredPF"),
    physicsDefinition = cms.bool(False)
)


process.patJetFlavourAssociationCA15MassDropFilteredPF = cms.EDProducer("JetFlavourIdentifier",
    srcByReference = cms.InputTag("patJetPartonAssociationCA15MassDropFilteredPF"),
    physicsDefinition = cms.bool(False)
)


process.patJetFlavourAssociationCA15MassDropFilteredSubjetsPF = cms.EDProducer("JetFlavourIdentifier",
    srcByReference = cms.InputTag("patJetPartonAssociationCA15MassDropFilteredSubjetsPF"),
    physicsDefinition = cms.bool(False)
)


process.patJetFlavourAssociationCA8PF = cms.EDProducer("JetFlavourIdentifier",
    srcByReference = cms.InputTag("patJetPartonAssociationCA8PF"),
    physicsDefinition = cms.bool(False)
)


process.patJetFlavourAssociationCA8PrunedPF = cms.EDProducer("JetFlavourIdentifier",
    srcByReference = cms.InputTag("patJetPartonAssociationCA8PrunedPF"),
    physicsDefinition = cms.bool(False)
)


process.patJetFlavourAssociationCA8PrunedSubjetsPF = cms.EDProducer("JetFlavourIdentifier",
    srcByReference = cms.InputTag("patJetPartonAssociationCA8PrunedSubjetsPF"),
    physicsDefinition = cms.bool(False)
)


process.patJetFlavourAssociationCAHEPTopTagPF = cms.EDProducer("JetFlavourIdentifier",
    srcByReference = cms.InputTag("patJetPartonAssociationCAHEPTopTagPF"),
    physicsDefinition = cms.bool(False)
)


process.patJetFlavourAssociationCAHEPTopTagSubjetsPF = cms.EDProducer("JetFlavourIdentifier",
    srcByReference = cms.InputTag("patJetPartonAssociationCAHEPTopTagSubjetsPF"),
    physicsDefinition = cms.bool(False)
)


process.patJetFlavourAssociationCATopTagPF = cms.EDProducer("JetFlavourIdentifier",
    srcByReference = cms.InputTag("patJetPartonAssociationCATopTagPF"),
    physicsDefinition = cms.bool(False)
)


process.patJetFlavourAssociationCATopTagSubjetsPF = cms.EDProducer("JetFlavourIdentifier",
    srcByReference = cms.InputTag("patJetPartonAssociationCATopTagSubjetsPF"),
    physicsDefinition = cms.bool(False)
)


process.patJetFlavourAssociationPFlow = cms.EDProducer("JetFlavourIdentifier",
    srcByReference = cms.InputTag("patJetPartonAssociationPFlow"),
    physicsDefinition = cms.bool(False)
)


process.patJetFlavourAssociationPFlowLoose = cms.EDProducer("JetFlavourIdentifier",
    srcByReference = cms.InputTag("patJetPartonAssociationPFlowLoose"),
    physicsDefinition = cms.bool(False)
)


process.patJetGenJetMatch = cms.EDProducer("GenJetMatcher",
    src = cms.InputTag("ak5PFJets"),
    maxDPtRel = cms.double(3.0),
    mcPdgId = cms.vint32(),
    mcStatus = cms.vint32(),
    resolveByMatchQuality = cms.bool(False),
    maxDeltaR = cms.double(0.4),
    checkCharge = cms.bool(False),
    resolveAmbiguities = cms.bool(True),
    matched = cms.InputTag("ak5GenJetsNoNu")
)


process.patJetGenJetMatchCA15FilteredPF = cms.EDProducer("GenJetMatcher",
    src = cms.InputTag("caFilteredPFlow"),
    maxDPtRel = cms.double(3.0),
    mcPdgId = cms.vint32(),
    mcStatus = cms.vint32(),
    resolveByMatchQuality = cms.bool(False),
    maxDeltaR = cms.double(0.4),
    checkCharge = cms.bool(False),
    resolveAmbiguities = cms.bool(True),
    matched = cms.InputTag("ca8GenJetsNoNu")
)


process.patJetGenJetMatchCA15MassDropFilteredPF = cms.EDProducer("GenJetMatcher",
    src = cms.InputTag("caMassDropFilteredPFlow"),
    maxDPtRel = cms.double(3.0),
    mcPdgId = cms.vint32(),
    mcStatus = cms.vint32(),
    resolveByMatchQuality = cms.bool(False),
    maxDeltaR = cms.double(0.4),
    checkCharge = cms.bool(False),
    resolveAmbiguities = cms.bool(True),
    matched = cms.InputTag("ak5GenJets")
)


process.patJetGenJetMatchCA15MassDropFilteredSubjetsPF = cms.EDProducer("GenJetMatcher",
    src = cms.InputTag("caMassDropFilteredPFlow","SubJets"),
    maxDPtRel = cms.double(3.0),
    mcPdgId = cms.vint32(),
    mcStatus = cms.vint32(),
    resolveByMatchQuality = cms.bool(False),
    maxDeltaR = cms.double(0.4),
    checkCharge = cms.bool(False),
    resolveAmbiguities = cms.bool(True),
    matched = cms.InputTag("ak5GenJets")
)


process.patJetGenJetMatchCA8PF = cms.EDProducer("GenJetMatcher",
    src = cms.InputTag("ca8PFJetsPFlow"),
    maxDPtRel = cms.double(3.0),
    mcPdgId = cms.vint32(),
    mcStatus = cms.vint32(),
    resolveByMatchQuality = cms.bool(False),
    maxDeltaR = cms.double(0.4),
    checkCharge = cms.bool(False),
    resolveAmbiguities = cms.bool(True),
    matched = cms.InputTag("ca8GenJetsNoNu")
)


process.patJetGenJetMatchCA8PrunedPF = cms.EDProducer("GenJetMatcher",
    src = cms.InputTag("caPrunedPFlow"),
    maxDPtRel = cms.double(3.0),
    mcPdgId = cms.vint32(),
    mcStatus = cms.vint32(),
    resolveByMatchQuality = cms.bool(False),
    maxDeltaR = cms.double(0.4),
    checkCharge = cms.bool(False),
    resolveAmbiguities = cms.bool(True),
    matched = cms.InputTag("ca8GenJetsNoNu")
)


process.patJetGenJetMatchCA8PrunedSubjetsPF = cms.EDProducer("GenJetMatcher",
    src = cms.InputTag("caPrunedPFlow","SubJets"),
    maxDPtRel = cms.double(3.0),
    mcPdgId = cms.vint32(),
    mcStatus = cms.vint32(),
    resolveByMatchQuality = cms.bool(False),
    maxDeltaR = cms.double(0.4),
    checkCharge = cms.bool(False),
    resolveAmbiguities = cms.bool(True),
    matched = cms.InputTag("caPrunedGen","SubJets")
)


process.patJetGenJetMatchCAHEPTopTagPF = cms.EDProducer("GenJetMatcher",
    src = cms.InputTag("caHEPTopTagPFlow"),
    maxDPtRel = cms.double(3.0),
    mcPdgId = cms.vint32(),
    mcStatus = cms.vint32(),
    resolveByMatchQuality = cms.bool(False),
    maxDeltaR = cms.double(0.4),
    checkCharge = cms.bool(False),
    resolveAmbiguities = cms.bool(True),
    matched = cms.InputTag("ak5GenJets")
)


process.patJetGenJetMatchCAHEPTopTagSubjetsPF = cms.EDProducer("GenJetMatcher",
    src = cms.InputTag("caHEPTopTagPFlow","caTopSubJets"),
    maxDPtRel = cms.double(3.0),
    mcPdgId = cms.vint32(),
    mcStatus = cms.vint32(),
    resolveByMatchQuality = cms.bool(False),
    maxDeltaR = cms.double(0.4),
    checkCharge = cms.bool(False),
    resolveAmbiguities = cms.bool(True),
    matched = cms.InputTag("ak5GenJets")
)


process.patJetGenJetMatchCATopTagPF = cms.EDProducer("GenJetMatcher",
    src = cms.InputTag("caTopTagPFlow"),
    maxDPtRel = cms.double(3.0),
    mcPdgId = cms.vint32(),
    mcStatus = cms.vint32(),
    resolveByMatchQuality = cms.bool(False),
    maxDeltaR = cms.double(0.4),
    checkCharge = cms.bool(False),
    resolveAmbiguities = cms.bool(True),
    matched = cms.InputTag("ca8GenJetsNoNu")
)


process.patJetGenJetMatchCATopTagSubjetsPF = cms.EDProducer("GenJetMatcher",
    src = cms.InputTag("caTopTagPFlow","caTopSubJets"),
    maxDPtRel = cms.double(3.0),
    mcPdgId = cms.vint32(),
    mcStatus = cms.vint32(),
    resolveByMatchQuality = cms.bool(False),
    maxDeltaR = cms.double(0.4),
    checkCharge = cms.bool(False),
    resolveAmbiguities = cms.bool(True),
    matched = cms.InputTag("ak5GenJets")
)


process.patJetGenJetMatchPFlow = cms.EDProducer("GenJetMatcher",
    src = cms.InputTag("pfNoTauPFlow"),
    maxDPtRel = cms.double(3.0),
    mcPdgId = cms.vint32(),
    mcStatus = cms.vint32(),
    resolveByMatchQuality = cms.bool(False),
    maxDeltaR = cms.double(0.4),
    checkCharge = cms.bool(False),
    resolveAmbiguities = cms.bool(True),
    matched = cms.InputTag("ak5GenJetsNoNu")
)


process.patJetGenJetMatchPFlowLoose = cms.EDProducer("GenJetMatcher",
    src = cms.InputTag("pfNoTauPFlowLoose"),
    maxDPtRel = cms.double(3.0),
    mcPdgId = cms.vint32(),
    mcStatus = cms.vint32(),
    resolveByMatchQuality = cms.bool(False),
    maxDeltaR = cms.double(0.4),
    checkCharge = cms.bool(False),
    resolveAmbiguities = cms.bool(True),
    matched = cms.InputTag("ak5GenJetsNoNu")
)


process.patJetPartonAssociation = cms.EDProducer("JetPartonMatcher",
    jets = cms.InputTag("ak5PFJets"),
    coneSizeToAssociate = cms.double(0.3),
    partons = cms.InputTag("patJetPartons")
)


process.patJetPartonAssociationCA15FilteredPF = cms.EDProducer("JetPartonMatcher",
    jets = cms.InputTag("caFilteredPFlow"),
    coneSizeToAssociate = cms.double(0.3),
    partons = cms.InputTag("patJetPartons")
)


process.patJetPartonAssociationCA15MassDropFilteredPF = cms.EDProducer("JetPartonMatcher",
    jets = cms.InputTag("caMassDropFilteredPFlow"),
    coneSizeToAssociate = cms.double(0.3),
    partons = cms.InputTag("patJetPartons")
)


process.patJetPartonAssociationCA15MassDropFilteredSubjetsPF = cms.EDProducer("JetPartonMatcher",
    jets = cms.InputTag("caMassDropFilteredPFlow","SubJets"),
    coneSizeToAssociate = cms.double(0.3),
    partons = cms.InputTag("patJetPartons")
)


process.patJetPartonAssociationCA8PF = cms.EDProducer("JetPartonMatcher",
    jets = cms.InputTag("ca8PFJetsPFlow"),
    coneSizeToAssociate = cms.double(0.3),
    partons = cms.InputTag("patJetPartons")
)


process.patJetPartonAssociationCA8PrunedPF = cms.EDProducer("JetPartonMatcher",
    jets = cms.InputTag("caPrunedPFlow"),
    coneSizeToAssociate = cms.double(0.3),
    partons = cms.InputTag("patJetPartons")
)


process.patJetPartonAssociationCA8PrunedSubjetsPF = cms.EDProducer("JetPartonMatcher",
    jets = cms.InputTag("caPrunedPFlow","SubJets"),
    coneSizeToAssociate = cms.double(0.3),
    partons = cms.InputTag("patJetPartons")
)


process.patJetPartonAssociationCAHEPTopTagPF = cms.EDProducer("JetPartonMatcher",
    jets = cms.InputTag("caHEPTopTagPFlow"),
    coneSizeToAssociate = cms.double(0.3),
    partons = cms.InputTag("patJetPartons")
)


process.patJetPartonAssociationCAHEPTopTagSubjetsPF = cms.EDProducer("JetPartonMatcher",
    jets = cms.InputTag("caHEPTopTagPFlow","caTopSubJets"),
    coneSizeToAssociate = cms.double(0.3),
    partons = cms.InputTag("patJetPartons")
)


process.patJetPartonAssociationCATopTagPF = cms.EDProducer("JetPartonMatcher",
    jets = cms.InputTag("caTopTagPFlow"),
    coneSizeToAssociate = cms.double(0.3),
    partons = cms.InputTag("patJetPartons")
)


process.patJetPartonAssociationCATopTagSubjetsPF = cms.EDProducer("JetPartonMatcher",
    jets = cms.InputTag("caTopTagPFlow","caTopSubJets"),
    coneSizeToAssociate = cms.double(0.3),
    partons = cms.InputTag("patJetPartons")
)


process.patJetPartonAssociationPFlow = cms.EDProducer("JetPartonMatcher",
    jets = cms.InputTag("pfNoTauPFlow"),
    coneSizeToAssociate = cms.double(0.3),
    partons = cms.InputTag("patJetPartonsPFlow")
)


process.patJetPartonAssociationPFlowLoose = cms.EDProducer("JetPartonMatcher",
    jets = cms.InputTag("pfNoTauPFlowLoose"),
    coneSizeToAssociate = cms.double(0.3),
    partons = cms.InputTag("patJetPartonsPFlowLoose")
)


process.patJetPartonMatch = cms.EDProducer("MCMatcher",
    src = cms.InputTag("ak5PFJets"),
    maxDPtRel = cms.double(3.0),
    mcPdgId = cms.vint32(1, 2, 3, 4, 5, 
        21),
    mcStatus = cms.vint32(3),
    resolveByMatchQuality = cms.bool(False),
    maxDeltaR = cms.double(0.4),
    checkCharge = cms.bool(False),
    resolveAmbiguities = cms.bool(True),
    matched = cms.InputTag("genParticles")
)


process.patJetPartonMatchCA15FilteredPF = cms.EDProducer("MCMatcher",
    src = cms.InputTag("caFilteredPFlow"),
    maxDPtRel = cms.double(3.0),
    mcPdgId = cms.vint32(1, 2, 3, 4, 5, 
        21),
    mcStatus = cms.vint32(3),
    resolveByMatchQuality = cms.bool(False),
    maxDeltaR = cms.double(0.4),
    checkCharge = cms.bool(False),
    resolveAmbiguities = cms.bool(True),
    matched = cms.InputTag("genParticles")
)


process.patJetPartonMatchCA15MassDropFilteredPF = cms.EDProducer("MCMatcher",
    src = cms.InputTag("caMassDropFilteredPFlow"),
    maxDPtRel = cms.double(3.0),
    mcPdgId = cms.vint32(1, 2, 3, 4, 5, 
        21),
    mcStatus = cms.vint32(3),
    resolveByMatchQuality = cms.bool(False),
    maxDeltaR = cms.double(0.4),
    checkCharge = cms.bool(False),
    resolveAmbiguities = cms.bool(True),
    matched = cms.InputTag("genParticles")
)


process.patJetPartonMatchCA15MassDropFilteredSubjetsPF = cms.EDProducer("MCMatcher",
    src = cms.InputTag("caMassDropFilteredPFlow","SubJets"),
    maxDPtRel = cms.double(3.0),
    mcPdgId = cms.vint32(1, 2, 3, 4, 5, 
        21),
    mcStatus = cms.vint32(3),
    resolveByMatchQuality = cms.bool(False),
    maxDeltaR = cms.double(0.4),
    checkCharge = cms.bool(False),
    resolveAmbiguities = cms.bool(True),
    matched = cms.InputTag("genParticles")
)


process.patJetPartonMatchCA8PF = cms.EDProducer("MCMatcher",
    src = cms.InputTag("ca8PFJetsPFlow"),
    maxDPtRel = cms.double(3.0),
    mcPdgId = cms.vint32(1, 2, 3, 4, 5, 
        21),
    mcStatus = cms.vint32(3),
    resolveByMatchQuality = cms.bool(False),
    maxDeltaR = cms.double(0.4),
    checkCharge = cms.bool(False),
    resolveAmbiguities = cms.bool(True),
    matched = cms.InputTag("genParticles")
)


process.patJetPartonMatchCA8PrunedPF = cms.EDProducer("MCMatcher",
    src = cms.InputTag("caPrunedPFlow"),
    maxDPtRel = cms.double(3.0),
    mcPdgId = cms.vint32(1, 2, 3, 4, 5, 
        21),
    mcStatus = cms.vint32(3),
    resolveByMatchQuality = cms.bool(False),
    maxDeltaR = cms.double(0.4),
    checkCharge = cms.bool(False),
    resolveAmbiguities = cms.bool(True),
    matched = cms.InputTag("genParticles")
)


process.patJetPartonMatchCA8PrunedSubjetsPF = cms.EDProducer("MCMatcher",
    src = cms.InputTag("caPrunedPFlow","SubJets"),
    maxDPtRel = cms.double(3.0),
    mcPdgId = cms.vint32(1, 2, 3, 4, 5, 
        21),
    mcStatus = cms.vint32(3),
    resolveByMatchQuality = cms.bool(False),
    maxDeltaR = cms.double(0.4),
    checkCharge = cms.bool(False),
    resolveAmbiguities = cms.bool(True),
    matched = cms.InputTag("genParticles")
)


process.patJetPartonMatchCAHEPTopTagPF = cms.EDProducer("MCMatcher",
    src = cms.InputTag("caHEPTopTagPFlow"),
    maxDPtRel = cms.double(3.0),
    mcPdgId = cms.vint32(1, 2, 3, 4, 5, 
        21),
    mcStatus = cms.vint32(3),
    resolveByMatchQuality = cms.bool(False),
    maxDeltaR = cms.double(0.4),
    checkCharge = cms.bool(False),
    resolveAmbiguities = cms.bool(True),
    matched = cms.InputTag("genParticles")
)


process.patJetPartonMatchCAHEPTopTagSubjetsPF = cms.EDProducer("MCMatcher",
    src = cms.InputTag("caHEPTopTagPFlow","caTopSubJets"),
    maxDPtRel = cms.double(3.0),
    mcPdgId = cms.vint32(1, 2, 3, 4, 5, 
        21),
    mcStatus = cms.vint32(3),
    resolveByMatchQuality = cms.bool(False),
    maxDeltaR = cms.double(0.4),
    checkCharge = cms.bool(False),
    resolveAmbiguities = cms.bool(True),
    matched = cms.InputTag("genParticles")
)


process.patJetPartonMatchCATopTagPF = cms.EDProducer("MCMatcher",
    src = cms.InputTag("caTopTagPFlow"),
    maxDPtRel = cms.double(3.0),
    mcPdgId = cms.vint32(1, 2, 3, 4, 5, 
        21),
    mcStatus = cms.vint32(3),
    resolveByMatchQuality = cms.bool(False),
    maxDeltaR = cms.double(0.4),
    checkCharge = cms.bool(False),
    resolveAmbiguities = cms.bool(True),
    matched = cms.InputTag("genParticles")
)


process.patJetPartonMatchCATopTagSubjetsPF = cms.EDProducer("MCMatcher",
    src = cms.InputTag("caTopTagPFlow","caTopSubJets"),
    maxDPtRel = cms.double(3.0),
    mcPdgId = cms.vint32(1, 2, 3, 4, 5, 
        21),
    mcStatus = cms.vint32(3),
    resolveByMatchQuality = cms.bool(False),
    maxDeltaR = cms.double(0.4),
    checkCharge = cms.bool(False),
    resolveAmbiguities = cms.bool(True),
    matched = cms.InputTag("genParticles")
)


process.patJetPartonMatchPFlow = cms.EDProducer("MCMatcher",
    src = cms.InputTag("pfNoTauPFlow"),
    maxDPtRel = cms.double(3.0),
    mcPdgId = cms.vint32(1, 2, 3, 4, 5, 
        21),
    mcStatus = cms.vint32(3),
    resolveByMatchQuality = cms.bool(False),
    maxDeltaR = cms.double(0.4),
    checkCharge = cms.bool(False),
    resolveAmbiguities = cms.bool(True),
    matched = cms.InputTag("genParticles")
)


process.patJetPartonMatchPFlowLoose = cms.EDProducer("MCMatcher",
    src = cms.InputTag("pfNoTauPFlowLoose"),
    maxDPtRel = cms.double(3.0),
    mcPdgId = cms.vint32(1, 2, 3, 4, 5, 
        21),
    mcStatus = cms.vint32(3),
    resolveByMatchQuality = cms.bool(False),
    maxDeltaR = cms.double(0.4),
    checkCharge = cms.bool(False),
    resolveAmbiguities = cms.bool(True),
    matched = cms.InputTag("genParticles")
)


process.patJetPartons = cms.EDProducer("PartonSelector",
    src = cms.InputTag("genParticles"),
    withLeptons = cms.bool(False)
)


process.patJetPartonsPFlow = cms.EDProducer("PartonSelector",
    src = cms.InputTag("genParticles"),
    withLeptons = cms.bool(False)
)


process.patJetPartonsPFlowLoose = cms.EDProducer("PartonSelector",
    src = cms.InputTag("genParticles"),
    withLeptons = cms.bool(False)
)


process.patJets = cms.EDProducer("PATJetProducer",
    addJetCharge = cms.bool(False),
    addGenJetMatch = cms.bool(True),
    embedPFCandidates = cms.bool(True),
    embedGenJetMatch = cms.bool(False),
    addAssociatedTracks = cms.bool(False),
    partonJetSource = cms.InputTag("NOT_IMPLEMENTED"),
    addGenPartonMatch = cms.bool(True),
    JetPartonMapSource = cms.InputTag("patJetFlavourAssociation"),
    resolutions = cms.PSet(

    ),
    genPartonMatch = cms.InputTag("patJetPartonMatch"),
    addTagInfos = cms.bool(False),
    addPartonJetMatch = cms.bool(False),
    embedGenPartonMatch = cms.bool(True),
    efficiencies = cms.PSet(

    ),
    genJetMatch = cms.InputTag("patJetGenJetMatch"),
    userData = cms.PSet(
        userCands = cms.PSet(
            src = cms.VInputTag("")
        ),
        userInts = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFloats = cms.PSet(
            src = cms.VInputTag("")
        ),
        userClasses = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFunctionLabels = cms.vstring(),
        userFunctions = cms.vstring()
    ),
    jetSource = cms.InputTag("ak5PFJets"),
    addEfficiencies = cms.bool(False),
    jetCorrFactorsSource = cms.VInputTag(cms.InputTag("patJetCorrFactors")),
    trackAssociationSource = cms.InputTag("ak5JetTracksAssociatorAtVertex"),
    tagInfoSources = cms.VInputTag(),
    discriminatorSources = cms.VInputTag(cms.InputTag("combinedSecondaryVertexBJetTags"), cms.InputTag("combinedSecondaryVertexMVABJetTags"), cms.InputTag("jetBProbabilityBJetTags"), cms.InputTag("jetProbabilityBJetTags"), cms.InputTag("simpleSecondaryVertexHighEffBJetTags"), 
        cms.InputTag("simpleSecondaryVertexHighPurBJetTags"), cms.InputTag("softElectronByPtBJetTags"), cms.InputTag("softElectronByIP3dBJetTags"), cms.InputTag("softMuonBJetTags"), cms.InputTag("softMuonByPtBJetTags"), 
        cms.InputTag("softMuonByIP3dBJetTags"), cms.InputTag("trackCountingHighEffBJetTags"), cms.InputTag("trackCountingHighPurBJetTags")),
    addBTagInfo = cms.bool(False),
    embedCaloTowers = cms.bool(True),
    addResolutions = cms.bool(False),
    getJetMCFlavour = cms.bool(True),
    addDiscriminators = cms.bool(True),
    jetChargeSource = cms.InputTag("patJetCharge"),
    addJetCorrFactors = cms.bool(True),
    jetIDMap = cms.InputTag("ak5JetID"),
    addJetID = cms.bool(False)
)


process.patJetsCA15FilteredPF = cms.EDProducer("PATJetProducer",
    addJetCharge = cms.bool(False),
    addGenJetMatch = cms.bool(True),
    embedGenJetMatch = cms.bool(False),
    addAssociatedTracks = cms.bool(False),
    addBTagInfo = cms.bool(False),
    partonJetSource = cms.InputTag("NOT_IMPLEMENTED"),
    addGenPartonMatch = cms.bool(True),
    JetPartonMapSource = cms.InputTag("patJetFlavourAssociationCA15FilteredPF"),
    resolutions = cms.PSet(

    ),
    genPartonMatch = cms.InputTag("patJetPartonMatchCA15FilteredPF"),
    addTagInfos = cms.bool(False),
    addPartonJetMatch = cms.bool(False),
    embedGenPartonMatch = cms.bool(True),
    efficiencies = cms.PSet(

    ),
    genJetMatch = cms.InputTag("patJetGenJetMatchCA15FilteredPF"),
    userData = cms.PSet(
        userCands = cms.PSet(
            src = cms.VInputTag("")
        ),
        userInts = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFloats = cms.PSet(
            src = cms.VInputTag("")
        ),
        userClasses = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFunctionLabels = cms.vstring(),
        userFunctions = cms.vstring()
    ),
    jetSource = cms.InputTag("caFilteredPFlow"),
    addEfficiencies = cms.bool(False),
    discriminatorSources = cms.VInputTag(cms.InputTag("combinedSecondaryVertexBJetTags"), cms.InputTag("combinedSecondaryVertexMVABJetTags"), cms.InputTag("jetBProbabilityBJetTags"), cms.InputTag("jetProbabilityBJetTags"), cms.InputTag("simpleSecondaryVertexHighEffBJetTags"), 
        cms.InputTag("simpleSecondaryVertexHighPurBJetTags"), cms.InputTag("softElectronByPtBJetTags"), cms.InputTag("softElectronByIP3dBJetTags"), cms.InputTag("softMuonBJetTags"), cms.InputTag("softMuonByPtBJetTags"), 
        cms.InputTag("softMuonByIP3dBJetTags"), cms.InputTag("trackCountingHighEffBJetTags"), cms.InputTag("trackCountingHighPurBJetTags")),
    trackAssociationSource = cms.InputTag("ak5JetTracksAssociatorAtVertex"),
    tagInfoSources = cms.VInputTag(),
    jetCorrFactorsSource = cms.VInputTag(cms.InputTag("patJetCorrFactorsCA15FilteredPF")),
    embedPFCandidates = cms.bool(True),
    addJetCorrFactors = cms.bool(True),
    addResolutions = cms.bool(False),
    getJetMCFlavour = cms.bool(True),
    addDiscriminators = cms.bool(True),
    jetChargeSource = cms.InputTag("patJetCharge"),
    embedCaloTowers = cms.bool(True),
    jetIDMap = cms.InputTag("ak5JetID"),
    addJetID = cms.bool(False)
)


process.patJetsCA15MassDropFilteredPF = cms.EDProducer("PATJetProducer",
    addJetCharge = cms.bool(True),
    addGenJetMatch = cms.bool(True),
    embedGenJetMatch = cms.bool(False),
    addAssociatedTracks = cms.bool(True),
    addBTagInfo = cms.bool(False),
    partonJetSource = cms.InputTag("NOT_IMPLEMENTED"),
    addGenPartonMatch = cms.bool(True),
    JetPartonMapSource = cms.InputTag("patJetFlavourAssociationCA15MassDropFilteredPF"),
    resolutions = cms.PSet(

    ),
    genPartonMatch = cms.InputTag("patJetPartonMatchCA15MassDropFilteredPF"),
    addTagInfos = cms.bool(False),
    addPartonJetMatch = cms.bool(False),
    embedGenPartonMatch = cms.bool(True),
    efficiencies = cms.PSet(

    ),
    genJetMatch = cms.InputTag("patJetGenJetMatchCA15MassDropFilteredPF"),
    userData = cms.PSet(
        userCands = cms.PSet(
            src = cms.VInputTag("")
        ),
        userInts = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFloats = cms.PSet(
            src = cms.VInputTag("")
        ),
        userClasses = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFunctionLabels = cms.vstring(),
        userFunctions = cms.vstring()
    ),
    jetSource = cms.InputTag("caMassDropFilteredPFlow"),
    addEfficiencies = cms.bool(False),
    discriminatorSources = cms.VInputTag(cms.InputTag("jetBProbabilityBJetTagsCA15MassDropFilteredPF"), cms.InputTag("jetProbabilityBJetTagsCA15MassDropFilteredPF"), cms.InputTag("trackCountingHighPurBJetTagsCA15MassDropFilteredPF"), cms.InputTag("trackCountingHighEffBJetTagsCA15MassDropFilteredPF"), cms.InputTag("simpleSecondaryVertexHighEffBJetTagsCA15MassDropFilteredPF"), 
        cms.InputTag("simpleSecondaryVertexHighPurBJetTagsCA15MassDropFilteredPF"), cms.InputTag("combinedSecondaryVertexBJetTagsCA15MassDropFilteredPF")),
    trackAssociationSource = cms.InputTag("jetTracksAssociatorAtVertexCA15MassDropFilteredPF"),
    tagInfoSources = cms.VInputTag(cms.InputTag("impactParameterTagInfosCA15MassDropFilteredPF"), cms.InputTag("secondaryVertexTagInfosCA15MassDropFilteredPF")),
    jetCorrFactorsSource = cms.VInputTag(cms.InputTag("patJetCorrFactorsCA15MassDropFilteredPF")),
    embedPFCandidates = cms.bool(True),
    addJetCorrFactors = cms.bool(True),
    addResolutions = cms.bool(False),
    getJetMCFlavour = cms.bool(True),
    addDiscriminators = cms.bool(True),
    jetChargeSource = cms.InputTag("patJetChargeCA15MassDropFilteredPF"),
    embedCaloTowers = cms.bool(True),
    jetIDMap = cms.InputTag("ak5JetID"),
    addJetID = cms.bool(False)
)


process.patJetsCA15MassDropFilteredSubjetsPF = cms.EDProducer("PATJetProducer",
    addJetCharge = cms.bool(True),
    addGenJetMatch = cms.bool(True),
    embedGenJetMatch = cms.bool(False),
    addAssociatedTracks = cms.bool(True),
    addBTagInfo = cms.bool(True),
    partonJetSource = cms.InputTag("NOT_IMPLEMENTED"),
    addGenPartonMatch = cms.bool(True),
    JetPartonMapSource = cms.InputTag("patJetFlavourAssociationCA15MassDropFilteredSubjetsPF"),
    resolutions = cms.PSet(

    ),
    genPartonMatch = cms.InputTag("patJetPartonMatchCA15MassDropFilteredSubjetsPF"),
    addTagInfos = cms.bool(False),
    addPartonJetMatch = cms.bool(False),
    embedGenPartonMatch = cms.bool(True),
    efficiencies = cms.PSet(

    ),
    genJetMatch = cms.InputTag("patJetGenJetMatchCA15MassDropFilteredSubjetsPF"),
    userData = cms.PSet(
        userCands = cms.PSet(
            src = cms.VInputTag("")
        ),
        userInts = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFloats = cms.PSet(
            src = cms.VInputTag("")
        ),
        userClasses = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFunctionLabels = cms.vstring(),
        userFunctions = cms.vstring()
    ),
    jetSource = cms.InputTag("caMassDropFilteredPFlow","SubJets"),
    addEfficiencies = cms.bool(False),
    discriminatorSources = cms.VInputTag(cms.InputTag("jetBProbabilityBJetTagsCA15MassDropFilteredSubjetsPF"), cms.InputTag("jetProbabilityBJetTagsCA15MassDropFilteredSubjetsPF"), cms.InputTag("trackCountingHighPurBJetTagsCA15MassDropFilteredSubjetsPF"), cms.InputTag("trackCountingHighEffBJetTagsCA15MassDropFilteredSubjetsPF"), cms.InputTag("simpleSecondaryVertexHighEffBJetTagsCA15MassDropFilteredSubjetsPF"), 
        cms.InputTag("simpleSecondaryVertexHighPurBJetTagsCA15MassDropFilteredSubjetsPF"), cms.InputTag("combinedSecondaryVertexBJetTagsCA15MassDropFilteredSubjetsPF")),
    trackAssociationSource = cms.InputTag("jetTracksAssociatorAtVertexCA15MassDropFilteredSubjetsPF"),
    tagInfoSources = cms.VInputTag(cms.InputTag("impactParameterTagInfosCA15MassDropFilteredSubjetsPF"), cms.InputTag("secondaryVertexTagInfosCA15MassDropFilteredSubjetsPF")),
    jetCorrFactorsSource = cms.VInputTag(cms.InputTag("patJetCorrFactorsCA15MassDropFilteredSubjetsPF")),
    embedPFCandidates = cms.bool(True),
    addJetCorrFactors = cms.bool(True),
    addResolutions = cms.bool(False),
    getJetMCFlavour = cms.bool(True),
    addDiscriminators = cms.bool(True),
    jetChargeSource = cms.InputTag("patJetChargeCA15MassDropFilteredSubjetsPF"),
    embedCaloTowers = cms.bool(True),
    jetIDMap = cms.InputTag("ak5JetID"),
    addJetID = cms.bool(False)
)


process.patJetsCA8PF = cms.EDProducer("PATJetProducer",
    addJetCharge = cms.bool(True),
    addGenJetMatch = cms.bool(True),
    embedGenJetMatch = cms.bool(False),
    addAssociatedTracks = cms.bool(True),
    addBTagInfo = cms.bool(False),
    partonJetSource = cms.InputTag("NOT_IMPLEMENTED"),
    addGenPartonMatch = cms.bool(True),
    JetPartonMapSource = cms.InputTag("patJetFlavourAssociationCA8PF"),
    resolutions = cms.PSet(

    ),
    genPartonMatch = cms.InputTag("patJetPartonMatchCA8PF"),
    addTagInfos = cms.bool(False),
    addPartonJetMatch = cms.bool(False),
    embedGenPartonMatch = cms.bool(True),
    efficiencies = cms.PSet(

    ),
    genJetMatch = cms.InputTag("patJetGenJetMatchCA8PF"),
    userData = cms.PSet(
        userCands = cms.PSet(
            src = cms.VInputTag("")
        ),
        userInts = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFloats = cms.PSet(
            src = cms.VInputTag("")
        ),
        userClasses = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFunctionLabels = cms.vstring(),
        userFunctions = cms.vstring()
    ),
    jetSource = cms.InputTag("ca8PFJetsPFlow"),
    addEfficiencies = cms.bool(False),
    discriminatorSources = cms.VInputTag(cms.InputTag("jetBProbabilityBJetTagsCA8PF"), cms.InputTag("jetProbabilityBJetTagsCA8PF"), cms.InputTag("trackCountingHighPurBJetTagsCA8PF"), cms.InputTag("trackCountingHighEffBJetTagsCA8PF"), cms.InputTag("simpleSecondaryVertexHighEffBJetTagsCA8PF"), 
        cms.InputTag("simpleSecondaryVertexHighPurBJetTagsCA8PF"), cms.InputTag("combinedSecondaryVertexBJetTagsCA8PF")),
    trackAssociationSource = cms.InputTag("jetTracksAssociatorAtVertexCA8PF"),
    tagInfoSources = cms.VInputTag(cms.InputTag("impactParameterTagInfosCA8PF"), cms.InputTag("secondaryVertexTagInfosCA8PF")),
    jetCorrFactorsSource = cms.VInputTag(cms.InputTag("patJetCorrFactorsCA8PF")),
    embedPFCandidates = cms.bool(True),
    addJetCorrFactors = cms.bool(True),
    addResolutions = cms.bool(False),
    getJetMCFlavour = cms.bool(True),
    addDiscriminators = cms.bool(True),
    jetChargeSource = cms.InputTag("patJetChargeCA8PF"),
    embedCaloTowers = cms.bool(True),
    jetIDMap = cms.InputTag("ak5JetID"),
    addJetID = cms.bool(False)
)


process.patJetsCA8PrunedPF = cms.EDProducer("PATJetProducer",
    addJetCharge = cms.bool(True),
    addGenJetMatch = cms.bool(True),
    embedGenJetMatch = cms.bool(False),
    addAssociatedTracks = cms.bool(True),
    addBTagInfo = cms.bool(True),
    partonJetSource = cms.InputTag("NOT_IMPLEMENTED"),
    addGenPartonMatch = cms.bool(True),
    JetPartonMapSource = cms.InputTag("patJetFlavourAssociationCA8PrunedPF"),
    resolutions = cms.PSet(

    ),
    genPartonMatch = cms.InputTag("patJetPartonMatchCA8PrunedPF"),
    addTagInfos = cms.bool(False),
    addPartonJetMatch = cms.bool(False),
    embedGenPartonMatch = cms.bool(True),
    efficiencies = cms.PSet(

    ),
    genJetMatch = cms.InputTag("patJetGenJetMatchCA8PrunedPF"),
    userData = cms.PSet(
        userCands = cms.PSet(
            src = cms.VInputTag("")
        ),
        userInts = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFloats = cms.PSet(
            src = cms.VInputTag("")
        ),
        userClasses = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFunctionLabels = cms.vstring(),
        userFunctions = cms.vstring()
    ),
    jetSource = cms.InputTag("caPrunedPFlow"),
    addEfficiencies = cms.bool(False),
    discriminatorSources = cms.VInputTag(cms.InputTag("jetBProbabilityBJetTagsCA8PrunedPF"), cms.InputTag("jetProbabilityBJetTagsCA8PrunedPF"), cms.InputTag("trackCountingHighPurBJetTagsCA8PrunedPF"), cms.InputTag("trackCountingHighEffBJetTagsCA8PrunedPF"), cms.InputTag("simpleSecondaryVertexHighEffBJetTagsCA8PrunedPF"), 
        cms.InputTag("simpleSecondaryVertexHighPurBJetTagsCA8PrunedPF"), cms.InputTag("combinedSecondaryVertexBJetTagsCA8PrunedPF")),
    trackAssociationSource = cms.InputTag("jetTracksAssociatorAtVertexCA8PrunedPF"),
    tagInfoSources = cms.VInputTag(cms.InputTag("impactParameterTagInfosCA8PrunedPF"), cms.InputTag("secondaryVertexTagInfosCA8PrunedPF")),
    jetCorrFactorsSource = cms.VInputTag(cms.InputTag("patJetCorrFactorsCA8PrunedPF")),
    embedPFCandidates = cms.bool(True),
    addJetCorrFactors = cms.bool(True),
    addResolutions = cms.bool(False),
    getJetMCFlavour = cms.bool(True),
    addDiscriminators = cms.bool(True),
    jetChargeSource = cms.InputTag("patJetChargeCA8PrunedPF"),
    embedCaloTowers = cms.bool(True),
    jetIDMap = cms.InputTag("ak5JetID"),
    addJetID = cms.bool(False)
)


process.patJetsCA8PrunedSubjetsPF = cms.EDProducer("PATJetProducer",
    addJetCharge = cms.bool(True),
    addGenJetMatch = cms.bool(True),
    embedGenJetMatch = cms.bool(False),
    addAssociatedTracks = cms.bool(True),
    addBTagInfo = cms.bool(True),
    partonJetSource = cms.InputTag("NOT_IMPLEMENTED"),
    addGenPartonMatch = cms.bool(True),
    JetPartonMapSource = cms.InputTag("patJetFlavourAssociationCA8PrunedSubjetsPF"),
    resolutions = cms.PSet(

    ),
    genPartonMatch = cms.InputTag("patJetPartonMatchCA8PrunedSubjetsPF"),
    addTagInfos = cms.bool(False),
    addPartonJetMatch = cms.bool(False),
    embedGenPartonMatch = cms.bool(True),
    efficiencies = cms.PSet(

    ),
    genJetMatch = cms.InputTag("patJetGenJetMatchCA8PrunedSubjetsPF"),
    userData = cms.PSet(
        userCands = cms.PSet(
            src = cms.VInputTag("")
        ),
        userInts = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFloats = cms.PSet(
            src = cms.VInputTag("")
        ),
        userClasses = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFunctionLabels = cms.vstring(),
        userFunctions = cms.vstring()
    ),
    jetSource = cms.InputTag("caPrunedPFlow","SubJets"),
    addEfficiencies = cms.bool(False),
    discriminatorSources = cms.VInputTag(cms.InputTag("jetBProbabilityBJetTagsCA8PrunedSubjetsPF"), cms.InputTag("jetProbabilityBJetTagsCA8PrunedSubjetsPF"), cms.InputTag("trackCountingHighPurBJetTagsCA8PrunedSubjetsPF"), cms.InputTag("trackCountingHighEffBJetTagsCA8PrunedSubjetsPF"), cms.InputTag("simpleSecondaryVertexHighEffBJetTagsCA8PrunedSubjetsPF"), 
        cms.InputTag("simpleSecondaryVertexHighPurBJetTagsCA8PrunedSubjetsPF"), cms.InputTag("combinedSecondaryVertexBJetTagsCA8PrunedSubjetsPF")),
    trackAssociationSource = cms.InputTag("jetTracksAssociatorAtVertexCA8PrunedSubjetsPF"),
    tagInfoSources = cms.VInputTag(cms.InputTag("impactParameterTagInfosCA8PrunedSubjetsPF"), cms.InputTag("secondaryVertexTagInfosCA8PrunedSubjetsPF")),
    jetCorrFactorsSource = cms.VInputTag(cms.InputTag("patJetCorrFactorsCA8PrunedSubjetsPF")),
    embedPFCandidates = cms.bool(False),
    addJetCorrFactors = cms.bool(True),
    addResolutions = cms.bool(False),
    getJetMCFlavour = cms.bool(True),
    addDiscriminators = cms.bool(True),
    jetChargeSource = cms.InputTag("patJetChargeCA8PrunedSubjetsPF"),
    embedCaloTowers = cms.bool(True),
    jetIDMap = cms.InputTag("ak5JetID"),
    addJetID = cms.bool(False)
)


process.patJetsCAHEPTopTagPF = cms.EDProducer("PATJetProducer",
    addJetCharge = cms.bool(True),
    addGenJetMatch = cms.bool(True),
    embedGenJetMatch = cms.bool(False),
    addAssociatedTracks = cms.bool(True),
    addBTagInfo = cms.bool(True),
    partonJetSource = cms.InputTag("NOT_IMPLEMENTED"),
    addGenPartonMatch = cms.bool(True),
    JetPartonMapSource = cms.InputTag("patJetFlavourAssociationCAHEPTopTagPF"),
    resolutions = cms.PSet(

    ),
    genPartonMatch = cms.InputTag("patJetPartonMatchCAHEPTopTagPF"),
    addTagInfos = cms.bool(True),
    addPartonJetMatch = cms.bool(False),
    embedGenPartonMatch = cms.bool(True),
    efficiencies = cms.PSet(

    ),
    genJetMatch = cms.InputTag("patJetGenJetMatchCAHEPTopTagPF"),
    userData = cms.PSet(
        userCands = cms.PSet(
            src = cms.VInputTag("")
        ),
        userInts = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFloats = cms.PSet(
            src = cms.VInputTag("")
        ),
        userClasses = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFunctionLabels = cms.vstring(),
        userFunctions = cms.vstring()
    ),
    jetSource = cms.InputTag("caHEPTopTagPFlow"),
    addEfficiencies = cms.bool(False),
    discriminatorSources = cms.VInputTag(cms.InputTag("jetBProbabilityBJetTagsCAHEPTopTagPF"), cms.InputTag("jetProbabilityBJetTagsCAHEPTopTagPF"), cms.InputTag("trackCountingHighPurBJetTagsCAHEPTopTagPF"), cms.InputTag("trackCountingHighEffBJetTagsCAHEPTopTagPF"), cms.InputTag("simpleSecondaryVertexHighEffBJetTagsCAHEPTopTagPF"), 
        cms.InputTag("simpleSecondaryVertexHighPurBJetTagsCAHEPTopTagPF"), cms.InputTag("combinedSecondaryVertexBJetTagsCAHEPTopTagPF")),
    trackAssociationSource = cms.InputTag("jetTracksAssociatorAtVertexCAHEPTopTagPF"),
    tagInfoSources = cms.VInputTag(cms.InputTag("CATopTagInfosHEPTopTagPFlow")),
    jetCorrFactorsSource = cms.VInputTag(cms.InputTag("patJetCorrFactorsCAHEPTopTagPF")),
    embedPFCandidates = cms.bool(True),
    addJetCorrFactors = cms.bool(True),
    addResolutions = cms.bool(False),
    getJetMCFlavour = cms.bool(True),
    addDiscriminators = cms.bool(True),
    jetChargeSource = cms.InputTag("patJetChargeCAHEPTopTagPF"),
    embedCaloTowers = cms.bool(True),
    jetIDMap = cms.InputTag("ak5JetID"),
    addJetID = cms.bool(False)
)


process.patJetsCAHEPTopTagSubjetsPF = cms.EDProducer("PATJetProducer",
    addJetCharge = cms.bool(True),
    addGenJetMatch = cms.bool(True),
    embedGenJetMatch = cms.bool(False),
    addAssociatedTracks = cms.bool(True),
    addBTagInfo = cms.bool(True),
    partonJetSource = cms.InputTag("NOT_IMPLEMENTED"),
    addGenPartonMatch = cms.bool(True),
    JetPartonMapSource = cms.InputTag("patJetFlavourAssociationCAHEPTopTagSubjetsPF"),
    resolutions = cms.PSet(

    ),
    genPartonMatch = cms.InputTag("patJetPartonMatchCAHEPTopTagSubjetsPF"),
    addTagInfos = cms.bool(False),
    addPartonJetMatch = cms.bool(False),
    embedGenPartonMatch = cms.bool(True),
    efficiencies = cms.PSet(

    ),
    genJetMatch = cms.InputTag("patJetGenJetMatchCAHEPTopTagSubjetsPF"),
    userData = cms.PSet(
        userCands = cms.PSet(
            src = cms.VInputTag("")
        ),
        userInts = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFloats = cms.PSet(
            src = cms.VInputTag("")
        ),
        userClasses = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFunctionLabels = cms.vstring(),
        userFunctions = cms.vstring()
    ),
    jetSource = cms.InputTag("caHEPTopTagPFlow","caTopSubJets"),
    addEfficiencies = cms.bool(False),
    discriminatorSources = cms.VInputTag(cms.InputTag("jetBProbabilityBJetTagsCAHEPTopTagSubjetsPF"), cms.InputTag("jetProbabilityBJetTagsCAHEPTopTagSubjetsPF"), cms.InputTag("trackCountingHighPurBJetTagsCAHEPTopTagSubjetsPF"), cms.InputTag("trackCountingHighEffBJetTagsCAHEPTopTagSubjetsPF"), cms.InputTag("simpleSecondaryVertexHighEffBJetTagsCAHEPTopTagSubjetsPF"), 
        cms.InputTag("simpleSecondaryVertexHighPurBJetTagsCAHEPTopTagSubjetsPF"), cms.InputTag("combinedSecondaryVertexBJetTagsCAHEPTopTagSubjetsPF")),
    trackAssociationSource = cms.InputTag("jetTracksAssociatorAtVertexCAHEPTopTagSubjetsPF"),
    tagInfoSources = cms.VInputTag(cms.InputTag("impactParameterTagInfosCAHEPTopTagSubjetsPF"), cms.InputTag("secondaryVertexTagInfosCAHEPTopTagSubjetsPF")),
    jetCorrFactorsSource = cms.VInputTag(cms.InputTag("patJetCorrFactorsCAHEPTopTagSubjetsPF")),
    embedPFCandidates = cms.bool(True),
    addJetCorrFactors = cms.bool(True),
    addResolutions = cms.bool(False),
    getJetMCFlavour = cms.bool(True),
    addDiscriminators = cms.bool(True),
    jetChargeSource = cms.InputTag("patJetChargeCAHEPTopTagSubjetsPF"),
    embedCaloTowers = cms.bool(True),
    jetIDMap = cms.InputTag("ak5JetID"),
    addJetID = cms.bool(False)
)


process.patJetsCATopTagPF = cms.EDProducer("PATJetProducer",
    addJetCharge = cms.bool(True),
    addGenJetMatch = cms.bool(True),
    embedGenJetMatch = cms.bool(False),
    addAssociatedTracks = cms.bool(True),
    addBTagInfo = cms.bool(True),
    partonJetSource = cms.InputTag("NOT_IMPLEMENTED"),
    addGenPartonMatch = cms.bool(True),
    JetPartonMapSource = cms.InputTag("patJetFlavourAssociationCATopTagPF"),
    resolutions = cms.PSet(

    ),
    genPartonMatch = cms.InputTag("patJetPartonMatchCATopTagPF"),
    addTagInfos = cms.bool(True),
    addPartonJetMatch = cms.bool(False),
    embedGenPartonMatch = cms.bool(True),
    efficiencies = cms.PSet(

    ),
    genJetMatch = cms.InputTag("patJetGenJetMatchCATopTagPF"),
    userData = cms.PSet(
        userCands = cms.PSet(
            src = cms.VInputTag("")
        ),
        userInts = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFloats = cms.PSet(
            src = cms.VInputTag("")
        ),
        userClasses = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFunctionLabels = cms.vstring(),
        userFunctions = cms.vstring()
    ),
    jetSource = cms.InputTag("caTopTagPFlow"),
    addEfficiencies = cms.bool(False),
    discriminatorSources = cms.VInputTag(cms.InputTag("jetBProbabilityBJetTagsCATopTagPF"), cms.InputTag("jetProbabilityBJetTagsCATopTagPF"), cms.InputTag("trackCountingHighPurBJetTagsCATopTagPF"), cms.InputTag("trackCountingHighEffBJetTagsCATopTagPF"), cms.InputTag("simpleSecondaryVertexHighEffBJetTagsCATopTagPF"), 
        cms.InputTag("simpleSecondaryVertexHighPurBJetTagsCATopTagPF"), cms.InputTag("combinedSecondaryVertexBJetTagsCATopTagPF")),
    trackAssociationSource = cms.InputTag("jetTracksAssociatorAtVertexCATopTagPF"),
    tagInfoSources = cms.VInputTag(cms.InputTag("CATopTagInfosPFlow")),
    jetCorrFactorsSource = cms.VInputTag(cms.InputTag("patJetCorrFactorsCATopTagPF")),
    embedPFCandidates = cms.bool(True),
    addJetCorrFactors = cms.bool(True),
    addResolutions = cms.bool(False),
    getJetMCFlavour = cms.bool(True),
    addDiscriminators = cms.bool(True),
    jetChargeSource = cms.InputTag("patJetChargeCATopTagPF"),
    embedCaloTowers = cms.bool(True),
    jetIDMap = cms.InputTag("ak5JetID"),
    addJetID = cms.bool(False)
)


process.patJetsCATopTagSubjetsPF = cms.EDProducer("PATJetProducer",
    addJetCharge = cms.bool(True),
    addGenJetMatch = cms.bool(True),
    embedGenJetMatch = cms.bool(False),
    addAssociatedTracks = cms.bool(True),
    addBTagInfo = cms.bool(True),
    partonJetSource = cms.InputTag("NOT_IMPLEMENTED"),
    addGenPartonMatch = cms.bool(True),
    JetPartonMapSource = cms.InputTag("patJetFlavourAssociationCATopTagSubjetsPF"),
    resolutions = cms.PSet(

    ),
    genPartonMatch = cms.InputTag("patJetPartonMatchCATopTagSubjetsPF"),
    addTagInfos = cms.bool(False),
    addPartonJetMatch = cms.bool(False),
    embedGenPartonMatch = cms.bool(True),
    efficiencies = cms.PSet(

    ),
    genJetMatch = cms.InputTag("patJetGenJetMatchCATopTagSubjetsPF"),
    userData = cms.PSet(
        userCands = cms.PSet(
            src = cms.VInputTag("")
        ),
        userInts = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFloats = cms.PSet(
            src = cms.VInputTag("")
        ),
        userClasses = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFunctionLabels = cms.vstring(),
        userFunctions = cms.vstring()
    ),
    jetSource = cms.InputTag("caTopTagPFlow","caTopSubJets"),
    addEfficiencies = cms.bool(False),
    discriminatorSources = cms.VInputTag(cms.InputTag("jetBProbabilityBJetTagsCATopTagSubjetsPF"), cms.InputTag("jetProbabilityBJetTagsCATopTagSubjetsPF"), cms.InputTag("trackCountingHighPurBJetTagsCATopTagSubjetsPF"), cms.InputTag("trackCountingHighEffBJetTagsCATopTagSubjetsPF"), cms.InputTag("simpleSecondaryVertexHighEffBJetTagsCATopTagSubjetsPF"), 
        cms.InputTag("simpleSecondaryVertexHighPurBJetTagsCATopTagSubjetsPF"), cms.InputTag("combinedSecondaryVertexBJetTagsCATopTagSubjetsPF")),
    trackAssociationSource = cms.InputTag("jetTracksAssociatorAtVertexCATopTagSubjetsPF"),
    tagInfoSources = cms.VInputTag(cms.InputTag("impactParameterTagInfosCATopTagSubjetsPF"), cms.InputTag("secondaryVertexTagInfosCATopTagSubjetsPF")),
    jetCorrFactorsSource = cms.VInputTag(cms.InputTag("patJetCorrFactorsCATopTagSubjetsPF")),
    embedPFCandidates = cms.bool(True),
    addJetCorrFactors = cms.bool(True),
    addResolutions = cms.bool(False),
    getJetMCFlavour = cms.bool(True),
    addDiscriminators = cms.bool(True),
    jetChargeSource = cms.InputTag("patJetChargeCATopTagSubjetsPF"),
    embedCaloTowers = cms.bool(True),
    jetIDMap = cms.InputTag("ak5JetID"),
    addJetID = cms.bool(False)
)


process.patJetsPFlow = cms.EDProducer("PATJetProducer",
    addJetCharge = cms.bool(True),
    addGenJetMatch = cms.bool(True),
    embedGenJetMatch = cms.bool(False),
    addAssociatedTracks = cms.bool(True),
    addBTagInfo = cms.bool(True),
    partonJetSource = cms.InputTag("NOT_IMPLEMENTED"),
    addGenPartonMatch = cms.bool(True),
    JetPartonMapSource = cms.InputTag("patJetFlavourAssociationPFlow"),
    resolutions = cms.PSet(

    ),
    genPartonMatch = cms.InputTag("patJetPartonMatchPFlow"),
    addTagInfos = cms.bool(True),
    addPartonJetMatch = cms.bool(False),
    embedGenPartonMatch = cms.bool(True),
    efficiencies = cms.PSet(

    ),
    genJetMatch = cms.InputTag("patJetGenJetMatchPFlow"),
    userData = cms.PSet(
        userCands = cms.PSet(
            src = cms.VInputTag("")
        ),
        userInts = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFloats = cms.PSet(
            src = cms.VInputTag("")
        ),
        userClasses = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFunctionLabels = cms.vstring('secvtxMass'),
        userFunctions = cms.vstring("? hasTagInfo(\'secondaryVertex\') && tagInfoSecondaryVertex(\'secondaryVertex\').nVertices() > 0 ? tagInfoSecondaryVertex(\'secondaryVertex\').secondaryVertex(0).p4().mass() : 0")
    ),
    jetSource = cms.InputTag("pfNoTauPFlow"),
    addEfficiencies = cms.bool(False),
    discriminatorSources = cms.VInputTag(cms.InputTag("jetBProbabilityBJetTagsAODPFlow"), cms.InputTag("jetProbabilityBJetTagsAODPFlow"), cms.InputTag("trackCountingHighPurBJetTagsAODPFlow"), cms.InputTag("trackCountingHighEffBJetTagsAODPFlow"), cms.InputTag("simpleSecondaryVertexHighEffBJetTagsAODPFlow"), 
        cms.InputTag("simpleSecondaryVertexHighPurBJetTagsAODPFlow"), cms.InputTag("combinedSecondaryVertexBJetTagsAODPFlow")),
    trackAssociationSource = cms.InputTag("jetTracksAssociatorAtVertexPFlow"),
    tagInfoSources = cms.VInputTag(cms.InputTag("secondaryVertexTagInfosAODPFlow")),
    jetCorrFactorsSource = cms.VInputTag(cms.InputTag("patJetCorrFactorsPFlow")),
    embedPFCandidates = cms.bool(True),
    addJetCorrFactors = cms.bool(True),
    addResolutions = cms.bool(False),
    getJetMCFlavour = cms.bool(True),
    addDiscriminators = cms.bool(True),
    jetChargeSource = cms.InputTag("patJetChargePFlow"),
    embedCaloTowers = cms.bool(True),
    jetIDMap = cms.InputTag("AK5JetID"),
    addJetID = cms.bool(True)
)


process.patJetsPFlowLoose = cms.EDProducer("PATJetProducer",
    addJetCharge = cms.bool(True),
    addGenJetMatch = cms.bool(True),
    embedGenJetMatch = cms.bool(True),
    addAssociatedTracks = cms.bool(True),
    addBTagInfo = cms.bool(True),
    partonJetSource = cms.InputTag("NOT_IMPLEMENTED"),
    addGenPartonMatch = cms.bool(True),
    JetPartonMapSource = cms.InputTag("patJetFlavourAssociationPFlowLoose"),
    resolutions = cms.PSet(

    ),
    genPartonMatch = cms.InputTag("patJetPartonMatchPFlowLoose"),
    addTagInfos = cms.bool(False),
    addPartonJetMatch = cms.bool(False),
    embedGenPartonMatch = cms.bool(True),
    efficiencies = cms.PSet(

    ),
    genJetMatch = cms.InputTag("patJetGenJetMatchPFlowLoose"),
    userData = cms.PSet(
        userCands = cms.PSet(
            src = cms.VInputTag("")
        ),
        userInts = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFloats = cms.PSet(
            src = cms.VInputTag("")
        ),
        userClasses = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFunctionLabels = cms.vstring(),
        userFunctions = cms.vstring()
    ),
    jetSource = cms.InputTag("pfNoTauPFlowLoose"),
    addEfficiencies = cms.bool(False),
    discriminatorSources = cms.VInputTag(cms.InputTag("jetBProbabilityBJetTagsAODPFlowLoose"), cms.InputTag("jetProbabilityBJetTagsAODPFlowLoose"), cms.InputTag("trackCountingHighPurBJetTagsAODPFlowLoose"), cms.InputTag("trackCountingHighEffBJetTagsAODPFlowLoose"), cms.InputTag("simpleSecondaryVertexHighEffBJetTagsAODPFlowLoose"), 
        cms.InputTag("simpleSecondaryVertexHighPurBJetTagsAODPFlowLoose"), cms.InputTag("combinedSecondaryVertexBJetTagsAODPFlowLoose")),
    trackAssociationSource = cms.InputTag("jetTracksAssociatorAtVertexPFlowLoose"),
    tagInfoSources = cms.VInputTag(cms.InputTag("impactParameterTagInfosAODPFlowLoose"), cms.InputTag("secondaryVertexTagInfosAODPFlowLoose")),
    jetCorrFactorsSource = cms.VInputTag(cms.InputTag("patJetCorrFactorsPFlowLoose")),
    embedPFCandidates = cms.bool(True),
    addJetCorrFactors = cms.bool(True),
    addResolutions = cms.bool(False),
    getJetMCFlavour = cms.bool(True),
    addDiscriminators = cms.bool(True),
    jetChargeSource = cms.InputTag("patJetChargePFlowLoose"),
    embedCaloTowers = cms.bool(False),
    jetIDMap = cms.InputTag("AK5JetID"),
    addJetID = cms.bool(True)
)


process.patMETs = cms.EDProducer("PATMETProducer",
    metSource = cms.InputTag("pfType1CorrectedMet"),
    userData = cms.PSet(
        userCands = cms.PSet(
            src = cms.VInputTag("")
        ),
        userInts = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFloats = cms.PSet(
            src = cms.VInputTag("")
        ),
        userClasses = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFunctionLabels = cms.vstring(),
        userFunctions = cms.vstring()
    ),
    addResolutions = cms.bool(False),
    addEfficiencies = cms.bool(False),
    genMETSource = cms.InputTag("genMetTrue"),
    efficiencies = cms.PSet(

    ),
    addGenMET = cms.bool(True),
    addMuonCorrections = cms.bool(False),
    muonSource = cms.InputTag("muons"),
    resolutions = cms.PSet(

    )
)


process.patMETsPFlow = cms.EDProducer("PATMETProducer",
    metSource = cms.InputTag("patType1CorrectedPFMetPFlow"),
    userData = cms.PSet(
        userCands = cms.PSet(
            src = cms.VInputTag("")
        ),
        userInts = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFloats = cms.PSet(
            src = cms.VInputTag("")
        ),
        userClasses = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFunctionLabels = cms.vstring(),
        userFunctions = cms.vstring()
    ),
    addResolutions = cms.bool(False),
    muonSource = cms.InputTag("muons"),
    addEfficiencies = cms.bool(False),
    genMETSource = cms.InputTag("genMetTrue"),
    efficiencies = cms.PSet(

    ),
    addGenMET = cms.bool(True),
    addMuonCorrections = cms.bool(False),
    resolutions = cms.PSet(

    )
)


process.patMETsPFlowLoose = cms.EDProducer("PATMETProducer",
    metSource = cms.InputTag("patType1CorrectedPFMetPFlowLoose"),
    userData = cms.PSet(
        userCands = cms.PSet(
            src = cms.VInputTag("")
        ),
        userInts = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFloats = cms.PSet(
            src = cms.VInputTag("")
        ),
        userClasses = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFunctionLabels = cms.vstring(),
        userFunctions = cms.vstring()
    ),
    addResolutions = cms.bool(False),
    muonSource = cms.InputTag("muons"),
    addEfficiencies = cms.bool(False),
    genMETSource = cms.InputTag("genMetTrue"),
    efficiencies = cms.PSet(

    ),
    addGenMET = cms.bool(True),
    addMuonCorrections = cms.bool(False),
    resolutions = cms.PSet(

    )
)


process.patMHTs = cms.EDProducer("PATMHTProducer",
    verbose = cms.double(0.0),
    muonEtaMax = cms.double(2.5),
    jetTag = cms.untracked.InputTag("allLayer1Jets"),
    eleEtaMax = cms.double(3.0),
    noHF = cms.bool(False),
    muonTag = cms.untracked.InputTag("allLayer1Muons"),
    CaloTowerTag = cms.InputTag("towerMaker"),
    elePhiUncertaintyParameter0 = cms.double(0.01),
    uncertaintyScaleFactor = cms.double(1.0),
    muonPtMin = cms.double(10.0),
    eleEtUncertaintyParameter0 = cms.double(0.01),
    useHO = cms.bool(False),
    jetEtUncertaintyParameter2 = cms.double(0.033),
    jetEtUncertaintyParameter1 = cms.double(1.25),
    jetEMfracMax = cms.double(0.9),
    jetPhiUncertaintyParameter2 = cms.double(0.023),
    jetPhiUncertaintyParameter0 = cms.double(4.75),
    jetPhiUncertaintyParameter1 = cms.double(-0.426),
    tauTag = cms.untracked.InputTag("allLayer1Taus"),
    jetEtUncertaintyParameter0 = cms.double(5.6),
    electronTag = cms.untracked.InputTag("allLayer1Electrons"),
    jetEtaMax = cms.double(5.0),
    elePtMin = cms.double(10.0),
    jetPtMin = cms.double(20.0),
    muonEtUncertaintyParameter0 = cms.double(0.01),
    photonTag = cms.untracked.InputTag("allLayer1Photons"),
    muonPhiUncertaintyParameter0 = cms.double(0.01),
    controlledUncertainty = cms.bool(True),
    towerEtThreshold = cms.double(0.5)
)


process.patMuons = cms.EDProducer("PATMuonProducer",
    embedTpfmsMuon = cms.bool(True),
    embedHighLevelSelection = cms.bool(True),
    embedCaloMETMuonCorrs = cms.bool(True),
    caloMETMuonCorrs = cms.InputTag("muonMETValueMapProducer","muCorrData"),
    resolutions = cms.PSet(

    ),
    embedDytMuon = cms.bool(True),
    userIsolation = cms.PSet(

    ),
    embedPFCandidate = cms.bool(True),
    pfMuonSource = cms.InputTag("particleFlow"),
    efficiencies = cms.PSet(

    ),
    embedStandAloneMuon = cms.bool(True),
    useParticleFlow = cms.bool(False),
    userData = cms.PSet(
        userCands = cms.PSet(
            src = cms.VInputTag("")
        ),
        userInts = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFloats = cms.PSet(
            src = cms.VInputTag("")
        ),
        userClasses = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFunctionLabels = cms.vstring(),
        userFunctions = cms.vstring()
    ),
    embedTrack = cms.bool(True),
    embedImprovedMuonBestTrack = cms.bool(True),
    addEfficiencies = cms.bool(False),
    usePV = cms.bool(True),
    embedTcMETMuonCorrs = cms.bool(True),
    pvSrc = cms.InputTag("goodOfflinePrimaryVertices"),
    embedMuonBestTrack = cms.bool(True),
    muonSource = cms.InputTag("muons"),
    embedCombinedMuon = cms.bool(True),
    genParticleMatch = cms.InputTag("muonMatch"),
    beamLineSrc = cms.InputTag("offlineBeamSpot"),
    addGenMatch = cms.bool(True),
    addResolutions = cms.bool(False),
    isoDeposits = cms.PSet(

    ),
    embedGenMatch = cms.bool(True),
    tcMETMuonCorrs = cms.InputTag("muonTCMETValueMapProducer","muCorrData"),
    embedPickyMuon = cms.bool(True)
)


process.patMuonsPFlow = cms.EDProducer("PATMuonProducer",
    embedTpfmsMuon = cms.bool(True),
    embedHighLevelSelection = cms.bool(True),
    embedCaloMETMuonCorrs = cms.bool(True),
    caloMETMuonCorrs = cms.InputTag("muonMETValueMapProducer","muCorrData"),
    resolutions = cms.PSet(

    ),
    embedDytMuon = cms.bool(True),
    userIsolation = cms.PSet(

    ),
    embedPFCandidate = cms.bool(True),
    pfMuonSource = cms.InputTag("pfIsolatedMuonsPFlow"),
    efficiencies = cms.PSet(

    ),
    embedStandAloneMuon = cms.bool(True),
    useParticleFlow = cms.bool(True),
    userData = cms.PSet(
        userCands = cms.PSet(
            src = cms.VInputTag("")
        ),
        userInts = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFloats = cms.PSet(
            src = cms.VInputTag("")
        ),
        userClasses = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFunctionLabels = cms.vstring(),
        userFunctions = cms.vstring()
    ),
    embedTrack = cms.bool(True),
    embedImprovedMuonBestTrack = cms.bool(True),
    addEfficiencies = cms.bool(False),
    usePV = cms.bool(True),
    embedTcMETMuonCorrs = cms.bool(True),
    pvSrc = cms.InputTag("goodOfflinePrimaryVertices"),
    embedMuonBestTrack = cms.bool(True),
    addResolutions = cms.bool(False),
    embedCombinedMuon = cms.bool(True),
    genParticleMatch = cms.InputTag("muonMatchPFlow"),
    beamLineSrc = cms.InputTag("offlineBeamSpot"),
    addGenMatch = cms.bool(True),
    muonSource = cms.InputTag("muons"),
    isoDeposits = cms.PSet(
        pfNeutralHadrons = cms.InputTag("muPFIsoDepositNeutralPFlow"),
        pfChargedAll = cms.InputTag("muPFIsoDepositChargedAllPFlow"),
        pfPUChargedHadrons = cms.InputTag("muPFIsoDepositPUPFlow"),
        pfPhotons = cms.InputTag("muPFIsoDepositGammaPFlow"),
        pfChargedHadrons = cms.InputTag("muPFIsoDepositChargedPFlow")
    ),
    embedGenMatch = cms.bool(True),
    tcMETMuonCorrs = cms.InputTag("muonTCMETValueMapProducer","muCorrData"),
    embedPickyMuon = cms.bool(True),
    isolationValues = cms.PSet(
        pfNeutralHadrons = cms.InputTag("muPFIsoValueNeutral04PFlow"),
        pfChargedAll = cms.InputTag("muPFIsoValueChargedAll04PFlow"),
        pfPUChargedHadrons = cms.InputTag("muPFIsoValuePU04PFlow"),
        pfPhotons = cms.InputTag("muPFIsoValueGamma04PFlow"),
        pfChargedHadrons = cms.InputTag("muPFIsoValueCharged04PFlow")
    )
)


process.patMuonsPFlowLoose = cms.EDProducer("PATMuonProducer",
    embedTpfmsMuon = cms.bool(True),
    embedHighLevelSelection = cms.bool(True),
    embedCaloMETMuonCorrs = cms.bool(True),
    caloMETMuonCorrs = cms.InputTag("muonMETValueMapProducer","muCorrData"),
    resolutions = cms.PSet(

    ),
    embedDytMuon = cms.bool(True),
    userIsolation = cms.PSet(

    ),
    embedPFCandidate = cms.bool(True),
    pfMuonSource = cms.InputTag("pfMuonsPFlowLoose"),
    efficiencies = cms.PSet(

    ),
    embedStandAloneMuon = cms.bool(True),
    useParticleFlow = cms.bool(True),
    userData = cms.PSet(
        userCands = cms.PSet(
            src = cms.VInputTag("")
        ),
        userInts = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFloats = cms.PSet(
            src = cms.VInputTag("")
        ),
        userClasses = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFunctionLabels = cms.vstring(),
        userFunctions = cms.vstring()
    ),
    embedTrack = cms.bool(True),
    embedImprovedMuonBestTrack = cms.bool(True),
    addEfficiencies = cms.bool(False),
    usePV = cms.bool(True),
    embedTcMETMuonCorrs = cms.bool(True),
    pvSrc = cms.InputTag("goodOfflinePrimaryVertices"),
    embedMuonBestTrack = cms.bool(True),
    addResolutions = cms.bool(False),
    embedCombinedMuon = cms.bool(True),
    genParticleMatch = cms.InputTag("muonMatchPFlowLoose"),
    beamLineSrc = cms.InputTag("offlineBeamSpot"),
    addGenMatch = cms.bool(True),
    muonSource = cms.InputTag("muons"),
    isoDeposits = cms.PSet(
        pfNeutralHadrons = cms.InputTag("muPFIsoDepositNeutralPFlowLoose"),
        pfChargedAll = cms.InputTag("muPFIsoDepositChargedAllPFlowLoose"),
        pfPUChargedHadrons = cms.InputTag("muPFIsoDepositPUPFlowLoose"),
        pfPhotons = cms.InputTag("muPFIsoDepositGammaPFlowLoose"),
        pfChargedHadrons = cms.InputTag("muPFIsoDepositChargedPFlowLoose")
    ),
    embedGenMatch = cms.bool(True),
    tcMETMuonCorrs = cms.InputTag("muonTCMETValueMapProducer","muCorrData"),
    embedPickyMuon = cms.bool(True),
    isolationValues = cms.PSet(
        pfNeutralHadrons = cms.InputTag("muPFIsoValueNeutral04PFlowLoose"),
        pfChargedAll = cms.InputTag("muPFIsoValueChargedAll04PFlowLoose"),
        pfPUChargedHadrons = cms.InputTag("muPFIsoValuePU04PFlowLoose"),
        pfPhotons = cms.InputTag("muPFIsoValueGamma04PFlowLoose"),
        pfChargedHadrons = cms.InputTag("muPFIsoValueCharged04PFlowLoose")
    )
)


process.patPFJetMETtype1p2Corr = cms.EDProducer("PATPFJetMETcorrInputProducer",
    src = cms.InputTag("selectedPatJetsForMETtype1p2Corr"),
    type1JetPtThreshold = cms.double(10.0),
    skipEMfractionThreshold = cms.double(0.9),
    skipEM = cms.bool(True),
    offsetCorrLabel = cms.string('L1FastJet'),
    skipMuons = cms.bool(True),
    skipMuonSelection = cms.string('isGlobalMuon | isStandAloneMuon'),
    jetCorrLabel = cms.string('L3Absolute')
)


process.patPFJetMETtype1p2CorrPFlow = cms.EDProducer("PATPFJetMETcorrInputProducer",
    src = cms.InputTag("selectedPatJetsForMETtype1p2CorrPFlow"),
    type1JetPtThreshold = cms.double(10.0),
    skipEMfractionThreshold = cms.double(0.9),
    skipEM = cms.bool(False),
    offsetCorrLabel = cms.string('L1FastJet'),
    skipMuons = cms.bool(False),
    skipMuonSelection = cms.string('isGlobalMuon | isStandAloneMuon'),
    jetCorrLabel = cms.string('L3Absolute')
)


process.patPFJetMETtype1p2CorrPFlowLoose = cms.EDProducer("PATPFJetMETcorrInputProducer",
    src = cms.InputTag("selectedPatJetsForMETtype1p2CorrPFlowLoose"),
    type1JetPtThreshold = cms.double(10.0),
    skipEMfractionThreshold = cms.double(0.9),
    skipEM = cms.bool(False),
    offsetCorrLabel = cms.string('L1FastJet'),
    skipMuons = cms.bool(False),
    skipMuonSelection = cms.string('isGlobalMuon | isStandAloneMuon'),
    jetCorrLabel = cms.string('L3Absolute')
)


process.patPFJetMETtype2Corr = cms.EDProducer("PATPFJetMETcorrInputProducer",
    src = cms.InputTag("selectedPatJetsForMETtype2Corr"),
    type1JetPtThreshold = cms.double(10.0),
    skipEMfractionThreshold = cms.double(0.9),
    skipEM = cms.bool(True),
    offsetCorrLabel = cms.string('L1FastJet'),
    skipMuons = cms.bool(True),
    skipMuonSelection = cms.string('isGlobalMuon | isStandAloneMuon'),
    jetCorrLabel = cms.string('L3Absolute')
)


process.patPFJetMETtype2CorrPFlow = cms.EDProducer("PATPFJetMETcorrInputProducer",
    src = cms.InputTag("selectedPatJetsForMETtype2CorrPFlow"),
    type1JetPtThreshold = cms.double(10.0),
    skipEMfractionThreshold = cms.double(0.9),
    skipEM = cms.bool(False),
    offsetCorrLabel = cms.string('L1FastJet'),
    skipMuons = cms.bool(False),
    skipMuonSelection = cms.string('isGlobalMuon | isStandAloneMuon'),
    jetCorrLabel = cms.string('L3Absolute')
)


process.patPFJetMETtype2CorrPFlowLoose = cms.EDProducer("PATPFJetMETcorrInputProducer",
    src = cms.InputTag("selectedPatJetsForMETtype2CorrPFlowLoose"),
    type1JetPtThreshold = cms.double(10.0),
    skipEMfractionThreshold = cms.double(0.9),
    skipEM = cms.bool(False),
    offsetCorrLabel = cms.string('L1FastJet'),
    skipMuons = cms.bool(False),
    skipMuonSelection = cms.string('isGlobalMuon | isStandAloneMuon'),
    jetCorrLabel = cms.string('L3Absolute')
)


process.patPFMETtype0Corr = cms.EDProducer("Type0PFMETcorrInputProducer",
    srcPFCandidateToVertexAssociations = cms.InputTag("pfCandidateToVertexAssociation"),
    correction = cms.PSet(
        formula = cms.string('-([0] + [1]*x)*(1.0 + TMath::Erf(-[2]*TMath::Power(x, [3])))'),
        par3 = cms.double(0.909209),
        par2 = cms.double(0.0303531),
        par1 = cms.double(-0.703151),
        par0 = cms.double(0.0)
    ),
    srcHardScatterVertex = cms.InputTag("selectedPrimaryVertexHighestPtTrackSumForPFMEtCorrType0"),
    minDz = cms.double(0.2)
)


process.patPFMet = cms.EDProducer("PATMETProducer",
    metSource = cms.InputTag("pfMet"),
    userData = cms.PSet(
        userCands = cms.PSet(
            src = cms.VInputTag("")
        ),
        userInts = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFloats = cms.PSet(
            src = cms.VInputTag("")
        ),
        userClasses = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFunctionLabels = cms.vstring(),
        userFunctions = cms.vstring()
    ),
    addResolutions = cms.bool(False),
    muonSource = cms.InputTag("muons"),
    addEfficiencies = cms.bool(False),
    genMETSource = cms.InputTag("genMetTrue"),
    efficiencies = cms.PSet(

    ),
    addGenMET = cms.bool(True),
    addMuonCorrections = cms.bool(False),
    resolutions = cms.PSet(

    )
)


process.patPFMetPFlow = cms.EDProducer("PATMETProducer",
    metSource = cms.InputTag("pfMETPFlow"),
    userData = cms.PSet(
        userCands = cms.PSet(
            src = cms.VInputTag("")
        ),
        userInts = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFloats = cms.PSet(
            src = cms.VInputTag("")
        ),
        userClasses = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFunctionLabels = cms.vstring(),
        userFunctions = cms.vstring()
    ),
    addResolutions = cms.bool(False),
    addEfficiencies = cms.bool(False),
    genMETSource = cms.InputTag("genMetTrue"),
    efficiencies = cms.PSet(

    ),
    addGenMET = cms.bool(True),
    addMuonCorrections = cms.bool(False),
    muonSource = cms.InputTag("muons"),
    resolutions = cms.PSet(

    )
)


process.patPFMetPFlowLoose = cms.EDProducer("PATMETProducer",
    metSource = cms.InputTag("pfMETPFlowLoose"),
    userData = cms.PSet(
        userCands = cms.PSet(
            src = cms.VInputTag("")
        ),
        userInts = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFloats = cms.PSet(
            src = cms.VInputTag("")
        ),
        userClasses = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFunctionLabels = cms.vstring(),
        userFunctions = cms.vstring()
    ),
    addResolutions = cms.bool(False),
    addEfficiencies = cms.bool(False),
    genMETSource = cms.InputTag("genMetTrue"),
    efficiencies = cms.PSet(

    ),
    addGenMET = cms.bool(True),
    addMuonCorrections = cms.bool(False),
    muonSource = cms.InputTag("muons"),
    resolutions = cms.PSet(

    )
)


process.patPFParticlesPFlow = cms.EDProducer("PATPFParticleProducer",
    userData = cms.PSet(
        userCands = cms.PSet(
            src = cms.VInputTag("")
        ),
        userInts = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFloats = cms.PSet(
            src = cms.VInputTag("")
        ),
        userClasses = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFunctionLabels = cms.vstring(),
        userFunctions = cms.vstring()
    ),
    addGenMatch = cms.bool(False),
    addResolutions = cms.bool(False),
    addEfficiencies = cms.bool(False),
    efficiencies = cms.PSet(

    ),
    embedGenMatch = cms.bool(False),
    pfCandidateSource = cms.InputTag("pfNoJetPFlow"),
    resolutions = cms.PSet(

    ),
    genParticleMatch = cms.InputTag("")
)


process.patPFParticlesPFlowLoose = cms.EDProducer("PATPFParticleProducer",
    userData = cms.PSet(
        userCands = cms.PSet(
            src = cms.VInputTag("")
        ),
        userInts = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFloats = cms.PSet(
            src = cms.VInputTag("")
        ),
        userClasses = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFunctionLabels = cms.vstring(),
        userFunctions = cms.vstring()
    ),
    addGenMatch = cms.bool(False),
    addResolutions = cms.bool(False),
    addEfficiencies = cms.bool(False),
    efficiencies = cms.PSet(

    ),
    embedGenMatch = cms.bool(False),
    pfCandidateSource = cms.InputTag("pfNoJetPFlowLoose"),
    resolutions = cms.PSet(

    ),
    genParticleMatch = cms.InputTag("")
)


process.patPhotons = cms.EDProducer("PATPhotonProducer",
    userData = cms.PSet(
        userCands = cms.PSet(
            src = cms.VInputTag("")
        ),
        userInts = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFloats = cms.PSet(
            src = cms.VInputTag("")
        ),
        userClasses = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFunctionLabels = cms.vstring(),
        userFunctions = cms.vstring()
    ),
    addGenMatch = cms.bool(True),
    addResolutions = cms.bool(False),
    addEfficiencies = cms.bool(False),
    photonIDSources = cms.PSet(
        PhotonCutBasedIDTight = cms.InputTag("PhotonIDProd","PhotonCutBasedIDTight"),
        PhotonCutBasedIDLoose = cms.InputTag("PhotonIDProd","PhotonCutBasedIDLoose")
    ),
    isoDeposits = cms.PSet(

    ),
    efficiencies = cms.PSet(

    ),
    embedSuperCluster = cms.bool(True),
    embedGenMatch = cms.bool(True),
    resolutions = cms.PSet(

    ),
    addPhotonID = cms.bool(True),
    photonSource = cms.InputTag("photons"),
    userIsolation = cms.PSet(

    ),
    genParticleMatch = cms.InputTag("photonMatch")
)


process.patPhotonsPFlow = cms.EDProducer("PATPhotonProducer",
    userData = cms.PSet(
        userCands = cms.PSet(
            src = cms.VInputTag("")
        ),
        userInts = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFloats = cms.PSet(
            src = cms.VInputTag("")
        ),
        userClasses = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFunctionLabels = cms.vstring(),
        userFunctions = cms.vstring()
    ),
    addGenMatch = cms.bool(True),
    addResolutions = cms.bool(False),
    addEfficiencies = cms.bool(False),
    photonIDSources = cms.PSet(
        PhotonCutBasedIDTight = cms.InputTag("PhotonIDProd","PhotonCutBasedIDTight"),
        PhotonCutBasedIDLoose = cms.InputTag("PhotonIDProd","PhotonCutBasedIDLoose")
    ),
    isoDeposits = cms.PSet(

    ),
    efficiencies = cms.PSet(

    ),
    embedSuperCluster = cms.bool(True),
    embedGenMatch = cms.bool(True),
    resolutions = cms.PSet(

    ),
    genParticleMatch = cms.InputTag("photonMatchPFlow"),
    photonSource = cms.InputTag("photons"),
    userIsolation = cms.PSet(

    ),
    addPhotonID = cms.bool(True)
)


process.patPhotonsPFlowLoose = cms.EDProducer("PATPhotonProducer",
    userData = cms.PSet(
        userCands = cms.PSet(
            src = cms.VInputTag("")
        ),
        userInts = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFloats = cms.PSet(
            src = cms.VInputTag("")
        ),
        userClasses = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFunctionLabels = cms.vstring(),
        userFunctions = cms.vstring()
    ),
    addGenMatch = cms.bool(True),
    addResolutions = cms.bool(False),
    addEfficiencies = cms.bool(False),
    photonIDSources = cms.PSet(
        PhotonCutBasedIDTight = cms.InputTag("PhotonIDProd","PhotonCutBasedIDTight"),
        PhotonCutBasedIDLoose = cms.InputTag("PhotonIDProd","PhotonCutBasedIDLoose")
    ),
    isoDeposits = cms.PSet(

    ),
    efficiencies = cms.PSet(

    ),
    embedSuperCluster = cms.bool(True),
    embedGenMatch = cms.bool(True),
    resolutions = cms.PSet(

    ),
    genParticleMatch = cms.InputTag("photonMatchPFlowLoose"),
    photonSource = cms.InputTag("photons"),
    userIsolation = cms.PSet(

    ),
    addPhotonID = cms.bool(True)
)


process.patTaus = cms.EDProducer("PATTauProducer",
    tauIDSources = cms.PSet(
        byIsolationMVAraw = cms.InputTag("hpsPFTauDiscriminationByIsolationMVAraw"),
        byCombinedIsolationDeltaBetaCorrRaw3Hits = cms.InputTag("hpsPFTauDiscriminationByRawCombinedIsolationDBSumPtCorr3Hits"),
        againstMuonMedium = cms.InputTag("hpsPFTauDiscriminationByMediumMuonRejection"),
        againstElectronTightMVA3 = cms.InputTag("hpsPFTauDiscriminationByMVA3TightElectronRejection"),
        againstElectronTight = cms.InputTag("hpsPFTauDiscriminationByTightElectronRejection"),
        byLooseIsolationMVA2 = cms.InputTag("hpsPFTauDiscriminationByLooseIsolationMVA2"),
        againstMuonTight = cms.InputTag("hpsPFTauDiscriminationByTightMuonRejection"),
        againstElectronMedium = cms.InputTag("hpsPFTauDiscriminationByMediumElectronRejection"),
        byTightIsolationMVA = cms.InputTag("hpsPFTauDiscriminationByTightIsolationMVA"),
        againstMuonLoose2 = cms.InputTag("hpsPFTauDiscriminationByLooseMuonRejection2"),
        byLooseCombinedIsolationDeltaBetaCorr = cms.InputTag("hpsPFTauDiscriminationByLooseCombinedIsolationDBSumPtCorr"),
        againstElectronLooseMVA3 = cms.InputTag("hpsPFTauDiscriminationByMVA3LooseElectronRejection"),
        byVLooseCombinedIsolationDeltaBetaCorr = cms.InputTag("hpsPFTauDiscriminationByVLooseCombinedIsolationDBSumPtCorr"),
        againstElectronVTightMVA3 = cms.InputTag("hpsPFTauDiscriminationByMVA3VTightElectronRejection"),
        againstElectronMediumMVA3 = cms.InputTag("hpsPFTauDiscriminationByMVA3MediumElectronRejection"),
        againstMuonLoose = cms.InputTag("hpsPFTauDiscriminationByLooseMuonRejection"),
        againstMuonTight2 = cms.InputTag("hpsPFTauDiscriminationByTightMuonRejection2"),
        byMediumCombinedIsolationDeltaBetaCorr = cms.InputTag("hpsPFTauDiscriminationByMediumCombinedIsolationDBSumPtCorr"),
        againstMuonMedium2 = cms.InputTag("hpsPFTauDiscriminationByMediumMuonRejection2"),
        againstElectronLoose = cms.InputTag("hpsPFTauDiscriminationByLooseElectronRejection"),
        byMediumIsolationMVA = cms.InputTag("hpsPFTauDiscriminationByMediumIsolationMVA"),
        byMediumCombinedIsolationDeltaBetaCorr3Hits = cms.InputTag("hpsPFTauDiscriminationByMediumCombinedIsolationDBSumPtCorr3Hits"),
        byIsolationMVA2raw = cms.InputTag("hpsPFTauDiscriminationByIsolationMVA2raw"),
        byTightIsolationMVA2 = cms.InputTag("hpsPFTauDiscriminationByTightIsolationMVA2"),
        againstElectronMVA3category = cms.InputTag("hpsPFTauDiscriminationByMVA3rawElectronRejection","category"),
        againstElectronDeadECAL = cms.InputTag("hpsPFTauDiscriminationByDeadECALElectronRejection"),
        byTightCombinedIsolationDeltaBetaCorr = cms.InputTag("hpsPFTauDiscriminationByTightCombinedIsolationDBSumPtCorr"),
        againstElectronMVA3raw = cms.InputTag("hpsPFTauDiscriminationByMVA3rawElectronRejection"),
        byLooseCombinedIsolationDeltaBetaCorr3Hits = cms.InputTag("hpsPFTauDiscriminationByLooseCombinedIsolationDBSumPtCorr3Hits"),
        byMediumIsolationMVA2 = cms.InputTag("hpsPFTauDiscriminationByMediumIsolationMVA2"),
        byLooseIsolationMVA = cms.InputTag("hpsPFTauDiscriminationByLooseIsolationMVA"),
        byCombinedIsolationDeltaBetaCorrRaw = cms.InputTag("hpsPFTauDiscriminationByRawCombinedIsolationDBSumPtCorr"),
        byTightCombinedIsolationDeltaBetaCorr3Hits = cms.InputTag("hpsPFTauDiscriminationByTightCombinedIsolationDBSumPtCorr3Hits"),
        decayModeFinding = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
    ),
    addGenJetMatch = cms.bool(True),
    embedGenJetMatch = cms.bool(True),
    embedLeadTrack = cms.bool(False),
    embedLeadPFCand = cms.bool(False),
    embedSignalPFChargedHadrCands = cms.bool(True),
    addTauJetCorrFactors = cms.bool(False),
    resolutions = cms.PSet(

    ),
    userIsolation = cms.PSet(
        pfAllParticles = cms.PSet(
            threshold = cms.double(0.0),
            src = cms.InputTag("tauIsoDepositPFCandidates"),
            deltaR = cms.double(0.5)
        ),
        pfNeutralHadron = cms.PSet(
            threshold = cms.double(0.0),
            src = cms.InputTag("tauIsoDepositPFNeutralHadrons"),
            deltaR = cms.double(0.5)
        ),
        pfChargedHadron = cms.PSet(
            threshold = cms.double(0.0),
            src = cms.InputTag("tauIsoDepositPFChargedHadrons"),
            deltaR = cms.double(0.5)
        ),
        pfGamma = cms.PSet(
            threshold = cms.double(0.0),
            src = cms.InputTag("tauIsoDepositPFGammas"),
            deltaR = cms.double(0.5)
        )
    ),
    embedIsolationPFGammaCands = cms.bool(True),
    embedSignalPFGammaCands = cms.bool(True),
    efficiencies = cms.PSet(

    ),
    genJetMatch = cms.InputTag("tauGenJetMatch"),
    embedIsolationPFCands = cms.bool(False),
    userData = cms.PSet(
        userCands = cms.PSet(
            src = cms.VInputTag("")
        ),
        userInts = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFloats = cms.PSet(
            src = cms.VInputTag("")
        ),
        userClasses = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFunctionLabels = cms.vstring(),
        userFunctions = cms.vstring()
    ),
    embedSignalPFCands = cms.bool(False),
    addEfficiencies = cms.bool(False),
    embedSignalTracks = cms.bool(False),
    tauSource = cms.InputTag("hpsPFTauProducer"),
    tauJetCorrFactorsSource = cms.VInputTag(cms.InputTag("patTauJetCorrFactors")),
    embedIsolationPFNeutralHadrCands = cms.bool(False),
    addTauID = cms.bool(True),
    genParticleMatch = cms.InputTag("tauMatch"),
    addGenMatch = cms.bool(True),
    addResolutions = cms.bool(False),
    embedIsolationPFChargedHadrCands = cms.bool(True),
    embedIsolationTracks = cms.bool(False),
    embedSignalPFNeutralHadrCands = cms.bool(False),
    isoDeposits = cms.PSet(

    ),
    embedLeadPFChargedHadrCand = cms.bool(True),
    embedGenMatch = cms.bool(True),
    embedLeadPFNeutralCand = cms.bool(False)
)


process.patTausPFlow = cms.EDProducer("PATTauProducer",
    tauIDSources = cms.PSet(
        decayModeFinding = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlow"),
        byVLooseIsolation = cms.InputTag("hpsPFTauDiscriminationByVLooseIsolationPFlow"),
        byLooseIsolation = cms.InputTag("hpsPFTauDiscriminationByLooseIsolationPFlow"),
        byMediumIsolation = cms.InputTag("hpsPFTauDiscriminationByMediumIsolationPFlow"),
        byTightIsolation = cms.InputTag("hpsPFTauDiscriminationByTightIsolationPFlow"),
        byVLooseIsolationDeltaBetaCorr = cms.InputTag("hpsPFTauDiscriminationByVLooseIsolationDBSumPtCorrPFlow"),
        byLooseIsolationDeltaBetaCorr = cms.InputTag("hpsPFTauDiscriminationByLooseIsolationDBSumPtCorrPFlow"),
        byMediumIsolationDeltaBetaCorr = cms.InputTag("hpsPFTauDiscriminationByMediumIsolationDBSumPtCorrPFlow"),
        byTightIsolationDeltaBetaCorr = cms.InputTag("hpsPFTauDiscriminationByTightIsolationDBSumPtCorrPFlow"),
        byVLooseCombinedIsolationDeltaBetaCorr = cms.InputTag("hpsPFTauDiscriminationByVLooseCombinedIsolationDBSumPtCorrPFlow"),
        byLooseCombinedIsolationDeltaBetaCorr = cms.InputTag("hpsPFTauDiscriminationByLooseCombinedIsolationDBSumPtCorrPFlow"),
        byMediumCombinedIsolationDeltaBetaCorr = cms.InputTag("hpsPFTauDiscriminationByMediumCombinedIsolationDBSumPtCorrPFlow"),
        byTightCombinedIsolationDeltaBetaCorr = cms.InputTag("hpsPFTauDiscriminationByTightCombinedIsolationDBSumPtCorrPFlow"),
        byCombinedIsolationDeltaBetaCorrRaw = cms.InputTag("hpsPFTauDiscriminationByRawCombinedIsolationDBSumPtCorrPFlow"),
        againstElectronLoose = cms.InputTag("hpsPFTauDiscriminationByLooseElectronRejectionPFlow"),
        againstElectronMedium = cms.InputTag("hpsPFTauDiscriminationByMediumElectronRejectionPFlow"),
        againstElectronTight = cms.InputTag("hpsPFTauDiscriminationByTightElectronRejectionPFlow"),
        againstMuonLoose = cms.InputTag("hpsPFTauDiscriminationByLooseMuonRejectionPFlow"),
        againstMuonMedium = cms.InputTag("hpsPFTauDiscriminationByMediumMuonRejectionPFlow"),
        againstMuonTight = cms.InputTag("hpsPFTauDiscriminationByTightMuonRejectionPFlow"),
        byIsolationMVAraw = cms.InputTag("hpsPFTauDiscriminationByIsolationMVArawPFlow"),
        byLooseIsolationMVA = cms.InputTag("hpsPFTauDiscriminationByLooseIsolationMVAPFlow"),
        byMediumIsolationMVA = cms.InputTag("hpsPFTauDiscriminationByMediumIsolationMVAPFlow"),
        byTightIsolationMVA = cms.InputTag("hpsPFTauDiscriminationByTightIsolationMVAPFlow"),
        byIsolationMVA2raw = cms.InputTag("hpsPFTauDiscriminationByIsolationMVA2rawPFlow"),
        byLooseIsolationMVA2 = cms.InputTag("hpsPFTauDiscriminationByLooseIsolationMVA2PFlow"),
        byMediumIsolationMVA2 = cms.InputTag("hpsPFTauDiscriminationByMediumIsolationMVA2PFlow"),
        byTightIsolationMVA2 = cms.InputTag("hpsPFTauDiscriminationByTightIsolationMVA2PFlow"),
        byLooseCombinedIsolationDeltaBetaCorr3Hits = cms.InputTag("hpsPFTauDiscriminationByLooseCombinedIsolationDBSumPtCorr3HitsPFlow"),
        byMediumCombinedIsolationDeltaBetaCorr3Hits = cms.InputTag("hpsPFTauDiscriminationByMediumCombinedIsolationDBSumPtCorr3HitsPFlow"),
        byTightCombinedIsolationDeltaBetaCorr3Hits = cms.InputTag("hpsPFTauDiscriminationByTightCombinedIsolationDBSumPtCorr3HitsPFlow"),
        byCombinedIsolationDeltaBetaCorrRaw3Hits = cms.InputTag("hpsPFTauDiscriminationByRawCombinedIsolationDBSumPtCorr3HitsPFlow"),
        againstElectronMVA3raw = cms.InputTag("hpsPFTauDiscriminationByMVA3rawElectronRejectionPFlow"),
        againstElectronMVA3category = cms.InputTag("hpsPFTauDiscriminationByMVA3rawElectronRejectionPFlow","category"),
        againstElectronLooseMVA3 = cms.InputTag("hpsPFTauDiscriminationByMVA3LooseElectronRejectionPFlow"),
        againstElectronMediumMVA3 = cms.InputTag("hpsPFTauDiscriminationByMVA3MediumElectronRejectionPFlow"),
        againstElectronTightMVA3 = cms.InputTag("hpsPFTauDiscriminationByMVA3TightElectronRejectionPFlow"),
        againstElectronVTightMVA3 = cms.InputTag("hpsPFTauDiscriminationByMVA3VTightElectronRejectionPFlow"),
        againstElectronDeadECAL = cms.InputTag("hpsPFTauDiscriminationByDeadECALElectronRejectionPFlow"),
        againstMuonLoose2 = cms.InputTag("hpsPFTauDiscriminationByLooseMuonRejection2PFlow"),
        againstMuonMedium2 = cms.InputTag("hpsPFTauDiscriminationByMediumMuonRejection2PFlow"),
        againstMuonTight2 = cms.InputTag("hpsPFTauDiscriminationByTightMuonRejection2PFlow"),
        againstMuonLoose3 = cms.InputTag("hpsPFTauDiscriminationByLooseMuonRejection3PFlow"),
        againstMuonTight3 = cms.InputTag("hpsPFTauDiscriminationByTightMuonRejection3PFlow")
    ),
    addGenJetMatch = cms.bool(True),
    embedGenJetMatch = cms.bool(True),
    embedLeadTrack = cms.bool(False),
    embedLeadPFCand = cms.bool(False),
    embedSignalPFChargedHadrCands = cms.bool(True),
    embedSignalPFCands = cms.bool(False),
    resolutions = cms.PSet(

    ),
    userIsolation = cms.PSet(
        pfAllParticles = cms.PSet(
            threshold = cms.double(0.0),
            src = cms.InputTag("tauIsoDepositPFCandidatesPFlow"),
            deltaR = cms.double(0.5)
        ),
        pfNeutralHadron = cms.PSet(
            threshold = cms.double(0.0),
            src = cms.InputTag("tauIsoDepositPFNeutralHadronsPFlow"),
            deltaR = cms.double(0.5)
        ),
        pfChargedHadron = cms.PSet(
            threshold = cms.double(0.0),
            src = cms.InputTag("tauIsoDepositPFChargedHadronsPFlow"),
            deltaR = cms.double(0.5)
        ),
        pfGamma = cms.PSet(
            threshold = cms.double(0.0),
            src = cms.InputTag("tauIsoDepositPFGammasPFlow"),
            deltaR = cms.double(0.5)
        )
    ),
    embedIsolationPFGammaCands = cms.bool(True),
    embedSignalPFGammaCands = cms.bool(True),
    efficiencies = cms.PSet(

    ),
    genJetMatch = cms.InputTag("tauGenJetMatchPFlow"),
    addEfficiencies = cms.bool(False),
    userData = cms.PSet(
        userCands = cms.PSet(
            src = cms.VInputTag("")
        ),
        userInts = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFloats = cms.PSet(
            src = cms.VInputTag("")
        ),
        userClasses = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFunctionLabels = cms.vstring(),
        userFunctions = cms.vstring()
    ),
    addTauJetCorrFactors = cms.bool(False),
    embedIsolationPFCands = cms.bool(False),
    embedSignalTracks = cms.bool(False),
    tauSource = cms.InputTag("hpsPFTauProducerPFlow"),
    tauJetCorrFactorsSource = cms.VInputTag(cms.InputTag("patTauJetCorrFactors")),
    addResolutions = cms.bool(False),
    addTauID = cms.bool(True),
    genParticleMatch = cms.InputTag("tauMatchPFlow"),
    addGenMatch = cms.bool(True),
    embedIsolationPFNeutralHadrCands = cms.bool(False),
    embedIsolationPFChargedHadrCands = cms.bool(True),
    embedIsolationTracks = cms.bool(False),
    embedSignalPFNeutralHadrCands = cms.bool(False),
    isoDeposits = cms.PSet(

    ),
    embedLeadPFChargedHadrCand = cms.bool(True),
    embedGenMatch = cms.bool(True),
    embedLeadPFNeutralCand = cms.bool(False)
)


process.patTausPFlowLoose = cms.EDProducer("PATTauProducer",
    tauIDSources = cms.PSet(
        decayModeFinding = cms.InputTag("hpsPFTauDiscriminationByDecayModeFindingPFlowLoose"),
        byVLooseIsolation = cms.InputTag("hpsPFTauDiscriminationByVLooseIsolationPFlowLoose"),
        byLooseIsolation = cms.InputTag("hpsPFTauDiscriminationByLooseIsolationPFlowLoose"),
        byMediumIsolation = cms.InputTag("hpsPFTauDiscriminationByMediumIsolationPFlowLoose"),
        byTightIsolation = cms.InputTag("hpsPFTauDiscriminationByTightIsolationPFlowLoose"),
        byVLooseIsolationDeltaBetaCorr = cms.InputTag("hpsPFTauDiscriminationByVLooseIsolationDBSumPtCorrPFlowLoose"),
        byLooseIsolationDeltaBetaCorr = cms.InputTag("hpsPFTauDiscriminationByLooseIsolationDBSumPtCorrPFlowLoose"),
        byMediumIsolationDeltaBetaCorr = cms.InputTag("hpsPFTauDiscriminationByMediumIsolationDBSumPtCorrPFlowLoose"),
        byTightIsolationDeltaBetaCorr = cms.InputTag("hpsPFTauDiscriminationByTightIsolationDBSumPtCorrPFlowLoose"),
        byVLooseCombinedIsolationDeltaBetaCorr = cms.InputTag("hpsPFTauDiscriminationByVLooseCombinedIsolationDBSumPtCorrPFlowLoose"),
        byLooseCombinedIsolationDeltaBetaCorr = cms.InputTag("hpsPFTauDiscriminationByLooseCombinedIsolationDBSumPtCorrPFlowLoose"),
        byMediumCombinedIsolationDeltaBetaCorr = cms.InputTag("hpsPFTauDiscriminationByMediumCombinedIsolationDBSumPtCorrPFlowLoose"),
        byTightCombinedIsolationDeltaBetaCorr = cms.InputTag("hpsPFTauDiscriminationByTightCombinedIsolationDBSumPtCorrPFlowLoose"),
        byCombinedIsolationDeltaBetaCorrRaw = cms.InputTag("hpsPFTauDiscriminationByRawCombinedIsolationDBSumPtCorrPFlowLoose"),
        againstElectronLoose = cms.InputTag("hpsPFTauDiscriminationByLooseElectronRejectionPFlowLoose"),
        againstElectronMedium = cms.InputTag("hpsPFTauDiscriminationByMediumElectronRejectionPFlowLoose"),
        againstElectronTight = cms.InputTag("hpsPFTauDiscriminationByTightElectronRejectionPFlowLoose"),
        againstMuonLoose = cms.InputTag("hpsPFTauDiscriminationByLooseMuonRejectionPFlowLoose"),
        againstMuonMedium = cms.InputTag("hpsPFTauDiscriminationByMediumMuonRejectionPFlowLoose"),
        againstMuonTight = cms.InputTag("hpsPFTauDiscriminationByTightMuonRejectionPFlowLoose"),
        byIsolationMVAraw = cms.InputTag("hpsPFTauDiscriminationByIsolationMVArawPFlowLoose"),
        byLooseIsolationMVA = cms.InputTag("hpsPFTauDiscriminationByLooseIsolationMVAPFlowLoose"),
        byMediumIsolationMVA = cms.InputTag("hpsPFTauDiscriminationByMediumIsolationMVAPFlowLoose"),
        byTightIsolationMVA = cms.InputTag("hpsPFTauDiscriminationByTightIsolationMVAPFlowLoose"),
        byIsolationMVA2raw = cms.InputTag("hpsPFTauDiscriminationByIsolationMVA2rawPFlowLoose"),
        byLooseIsolationMVA2 = cms.InputTag("hpsPFTauDiscriminationByLooseIsolationMVA2PFlowLoose"),
        byMediumIsolationMVA2 = cms.InputTag("hpsPFTauDiscriminationByMediumIsolationMVA2PFlowLoose"),
        byTightIsolationMVA2 = cms.InputTag("hpsPFTauDiscriminationByTightIsolationMVA2PFlowLoose"),
        byLooseCombinedIsolationDeltaBetaCorr3Hits = cms.InputTag("hpsPFTauDiscriminationByLooseCombinedIsolationDBSumPtCorr3HitsPFlowLoose"),
        byMediumCombinedIsolationDeltaBetaCorr3Hits = cms.InputTag("hpsPFTauDiscriminationByMediumCombinedIsolationDBSumPtCorr3HitsPFlowLoose"),
        byTightCombinedIsolationDeltaBetaCorr3Hits = cms.InputTag("hpsPFTauDiscriminationByTightCombinedIsolationDBSumPtCorr3HitsPFlowLoose"),
        byCombinedIsolationDeltaBetaCorrRaw3Hits = cms.InputTag("hpsPFTauDiscriminationByRawCombinedIsolationDBSumPtCorr3HitsPFlowLoose"),
        againstElectronMVA3raw = cms.InputTag("hpsPFTauDiscriminationByMVA3rawElectronRejectionPFlowLoose"),
        againstElectronMVA3category = cms.InputTag("hpsPFTauDiscriminationByMVA3rawElectronRejectionPFlowLoose","category"),
        againstElectronLooseMVA3 = cms.InputTag("hpsPFTauDiscriminationByMVA3LooseElectronRejectionPFlowLoose"),
        againstElectronMediumMVA3 = cms.InputTag("hpsPFTauDiscriminationByMVA3MediumElectronRejectionPFlowLoose"),
        againstElectronTightMVA3 = cms.InputTag("hpsPFTauDiscriminationByMVA3TightElectronRejectionPFlowLoose"),
        againstElectronVTightMVA3 = cms.InputTag("hpsPFTauDiscriminationByMVA3VTightElectronRejectionPFlowLoose"),
        againstElectronDeadECAL = cms.InputTag("hpsPFTauDiscriminationByDeadECALElectronRejectionPFlowLoose"),
        againstMuonLoose2 = cms.InputTag("hpsPFTauDiscriminationByLooseMuonRejection2PFlowLoose"),
        againstMuonMedium2 = cms.InputTag("hpsPFTauDiscriminationByMediumMuonRejection2PFlowLoose"),
        againstMuonTight2 = cms.InputTag("hpsPFTauDiscriminationByTightMuonRejection2PFlowLoose"),
        againstMuonLoose3 = cms.InputTag("hpsPFTauDiscriminationByLooseMuonRejection3PFlowLoose"),
        againstMuonTight3 = cms.InputTag("hpsPFTauDiscriminationByTightMuonRejection3PFlowLoose")
    ),
    addGenJetMatch = cms.bool(True),
    embedGenJetMatch = cms.bool(True),
    embedLeadTrack = cms.bool(False),
    embedLeadPFCand = cms.bool(False),
    embedSignalPFChargedHadrCands = cms.bool(False),
    embedSignalPFCands = cms.bool(False),
    resolutions = cms.PSet(

    ),
    userIsolation = cms.PSet(
        pfAllParticles = cms.PSet(
            threshold = cms.double(0.0),
            src = cms.InputTag("tauIsoDepositPFCandidatesPFlowLoose"),
            deltaR = cms.double(0.5)
        ),
        pfNeutralHadron = cms.PSet(
            threshold = cms.double(0.0),
            src = cms.InputTag("tauIsoDepositPFNeutralHadronsPFlowLoose"),
            deltaR = cms.double(0.5)
        ),
        pfChargedHadron = cms.PSet(
            threshold = cms.double(0.0),
            src = cms.InputTag("tauIsoDepositPFChargedHadronsPFlowLoose"),
            deltaR = cms.double(0.5)
        ),
        pfGamma = cms.PSet(
            threshold = cms.double(0.0),
            src = cms.InputTag("tauIsoDepositPFGammasPFlowLoose"),
            deltaR = cms.double(0.5)
        )
    ),
    embedIsolationPFGammaCands = cms.bool(False),
    embedSignalPFGammaCands = cms.bool(False),
    efficiencies = cms.PSet(

    ),
    genJetMatch = cms.InputTag("tauGenJetMatchPFlowLoose"),
    addEfficiencies = cms.bool(False),
    userData = cms.PSet(
        userCands = cms.PSet(
            src = cms.VInputTag("")
        ),
        userInts = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFloats = cms.PSet(
            src = cms.VInputTag("")
        ),
        userClasses = cms.PSet(
            src = cms.VInputTag("")
        ),
        userFunctionLabels = cms.vstring(),
        userFunctions = cms.vstring()
    ),
    addTauJetCorrFactors = cms.bool(False),
    embedIsolationPFCands = cms.bool(False),
    embedSignalTracks = cms.bool(False),
    tauSource = cms.InputTag("hpsPFTauProducerPFlowLoose"),
    tauJetCorrFactorsSource = cms.VInputTag(cms.InputTag("patTauJetCorrFactors")),
    addResolutions = cms.bool(False),
    addTauID = cms.bool(True),
    genParticleMatch = cms.InputTag("tauMatchPFlowLoose"),
    addGenMatch = cms.bool(True),
    embedIsolationPFNeutralHadrCands = cms.bool(False),
    embedIsolationPFChargedHadrCands = cms.bool(False),
    embedIsolationTracks = cms.bool(False),
    embedSignalPFNeutralHadrCands = cms.bool(False),
    isoDeposits = cms.PSet(
        pfAllParticles = cms.InputTag("tauIsoDepositPFCandidatesPFlowLoose"),
        pfNeutralHadron = cms.InputTag("tauIsoDepositPFNeutralHadronsPFlowLoose"),
        pfChargedHadron = cms.InputTag("tauIsoDepositPFChargedHadronsPFlowLoose"),
        pfGamma = cms.InputTag("tauIsoDepositPFGammasPFlowLoose")
    ),
    embedLeadPFChargedHadrCand = cms.bool(False),
    embedGenMatch = cms.bool(True),
    embedLeadPFNeutralCand = cms.bool(False)
)


process.patType1CorrectedPFMet = cms.EDProducer("CorrectedPATMETProducer",
    applyType2Corrections = cms.bool(False),
    srcType1Corrections = cms.VInputTag(cms.InputTag("patPFJetMETtype1p2Corr","type1")),
    src = cms.InputTag("patPFMet"),
    applyType1Corrections = cms.bool(True)
)


process.patType1CorrectedPFMetPFlow = cms.EDProducer("CorrectedPATMETProducer",
    applyType2Corrections = cms.bool(False),
    srcType1Corrections = cms.VInputTag(cms.InputTag("patPFJetMETtype1p2CorrPFlow","type1")),
    applyType1Corrections = cms.bool(True),
    src = cms.InputTag("patPFMetPFlow")
)


process.patType1CorrectedPFMetPFlowLoose = cms.EDProducer("CorrectedPATMETProducer",
    applyType2Corrections = cms.bool(False),
    srcType1Corrections = cms.VInputTag(cms.InputTag("patPFJetMETtype1p2CorrPFlowLoose","type1")),
    applyType1Corrections = cms.bool(True),
    src = cms.InputTag("patPFMetPFlowLoose")
)


process.patType1p2CorrectedPFMet = cms.EDProducer("CorrectedPATMETProducer",
    src = cms.InputTag("patPFMet"),
    applyType1Corrections = cms.bool(True),
    type2CorrFormula = cms.string('A'),
    srcUnclEnergySums = cms.VInputTag(cms.InputTag("patPFJetMETtype1p2Corr","type2"), cms.InputTag("patPFJetMETtype2Corr","type2"), cms.InputTag("patPFJetMETtype1p2Corr","offset"), cms.InputTag("pfCandMETcorr")),
    srcType1Corrections = cms.VInputTag(cms.InputTag("patPFJetMETtype1p2Corr","type1")),
    applyType2Corrections = cms.bool(True),
    type2CorrParameter = cms.PSet(
        A = cms.double(1.4)
    )
)


process.patType1p2CorrectedPFMetPFlow = cms.EDProducer("CorrectedPATMETProducer",
    src = cms.InputTag("patPFMetPFlow"),
    applyType1Corrections = cms.bool(True),
    type2CorrFormula = cms.string('A'),
    srcUnclEnergySums = cms.VInputTag(cms.InputTag("patPFJetMETtype1p2CorrPFlow","type2"), cms.InputTag("patPFJetMETtype2CorrPFlow","type2"), cms.InputTag("patPFJetMETtype1p2CorrPFlow","offset"), cms.InputTag("pfCandMETcorrPFlow")),
    srcType1Corrections = cms.VInputTag(cms.InputTag("patPFJetMETtype1p2CorrPFlow","type1")),
    applyType2Corrections = cms.bool(True),
    type2CorrParameter = cms.PSet(
        A = cms.double(1.4)
    )
)


process.patType1p2CorrectedPFMetPFlowLoose = cms.EDProducer("CorrectedPATMETProducer",
    src = cms.InputTag("patPFMetPFlowLoose"),
    applyType1Corrections = cms.bool(True),
    type2CorrFormula = cms.string('A'),
    srcUnclEnergySums = cms.VInputTag(cms.InputTag("patPFJetMETtype1p2CorrPFlowLoose","type2"), cms.InputTag("patPFJetMETtype2CorrPFlowLoose","type2"), cms.InputTag("patPFJetMETtype1p2CorrPFlowLoose","offset"), cms.InputTag("pfCandMETcorrPFlowLoose")),
    srcType1Corrections = cms.VInputTag(cms.InputTag("patPFJetMETtype1p2CorrPFlowLoose","type1")),
    applyType2Corrections = cms.bool(True),
    type2CorrParameter = cms.PSet(
        A = cms.double(1.4)
    )
)


process.pfCandMETcorr = cms.EDProducer("PFCandMETcorrInputProducer",
    src = cms.InputTag("pfCandsNotInJet")
)


process.pfCandMETcorrPFlow = cms.EDProducer("PFCandMETcorrInputProducer",
    src = cms.InputTag("pfNoJetPFlow")
)


process.pfCandMETcorrPFlowLoose = cms.EDProducer("PFCandMETcorrInputProducer",
    src = cms.InputTag("pfNoJetPFlowLoose")
)


process.pfCandidateToVertexAssociation = cms.EDProducer("PFCand_AssoMap",
    ConversionsCollection = cms.InputTag("allConversions"),
    nTrackWeight = cms.double(0.001),
    BeamSpot = cms.InputTag("offlineBeamSpot"),
    GetCleanedCollections = cms.bool(False),
    V0KshortCollection = cms.InputTag("generalV0Candidates","Kshort"),
    V0LambdaCollection = cms.InputTag("generalV0Candidates","Lambda"),
    VertexTrackAssociationMap = cms.InputTag("trackToVertexAssociation"),
    MaxNumberOfAssociations = cms.int32(1),
    ignoreMissingCollection = cms.bool(True),
    VertexCollection = cms.InputTag("offlinePrimaryVertices"),
    NIVertexCollection = cms.InputTag("particleFlowDisplacedVertex"),
    AssociationType = cms.InputTag("Both"),
    PFCandidateCollection = cms.InputTag("particleFlow"),
    FinalAssociation = cms.untracked.int32(1),
    doReassociation = cms.bool(True)
)


process.pfCandsNotInJet = cms.EDProducer("TPPFJetsOnPFCandidates",
    bottomCollection = cms.InputTag("particleFlow"),
    enable = cms.bool(True),
    topCollection = cms.InputTag("ak5PFJets"),
    name = cms.untracked.string('noJet'),
    verbose = cms.untracked.bool(False)
)


process.pfCandsNotInJetPFlow = cms.EDProducer("TPPFJetsOnPFCandidates",
    bottomCollection = cms.InputTag("particleFlow"),
    enable = cms.bool(True),
    topCollection = cms.InputTag("ak5PFJets"),
    name = cms.untracked.string('noJet'),
    verbose = cms.untracked.bool(False)
)


process.pfCandsNotInJetPFlowLoose = cms.EDProducer("TPPFJetsOnPFCandidates",
    bottomCollection = cms.InputTag("particleFlow"),
    enable = cms.bool(True),
    topCollection = cms.InputTag("ak5PFJets"),
    name = cms.untracked.string('noJet'),
    verbose = cms.untracked.bool(False)
)


process.pfJetMETcorr = cms.EDProducer("PFJetMETcorrInputProducer",
    src = cms.InputTag("ak5PFJets"),
    type1JetPtThreshold = cms.double(10.0),
    skipEMfractionThreshold = cms.double(0.9),
    skipEM = cms.bool(True),
    offsetCorrLabel = cms.string('AK5PFchsL1FastJet'),
    skipMuons = cms.bool(True),
    skipMuonSelection = cms.string('isGlobalMuon | isStandAloneMuon'),
    jetCorrEtaMax = cms.double(9.9),
    jetCorrLabel = cms.string('AK5PFchsCombinedCorrector')
)


process.pfJetMETcorrPFlow = cms.EDProducer("PFJetMETcorrInputProducer",
    src = cms.InputTag("ak5PFJets"),
    type1JetPtThreshold = cms.double(10.0),
    skipEMfractionThreshold = cms.double(0.9),
    skipEM = cms.bool(True),
    offsetCorrLabel = cms.string('AK5PFchsL1FastJet'),
    skipMuons = cms.bool(True),
    skipMuonSelection = cms.string('isGlobalMuon | isStandAloneMuon'),
    jetCorrEtaMax = cms.double(9.9),
    jetCorrLabel = cms.string('AK5PFchsCombinedCorrector')
)


process.pfJetMETcorrPFlowLoose = cms.EDProducer("PFJetMETcorrInputProducer",
    src = cms.InputTag("ak5PFJets"),
    type1JetPtThreshold = cms.double(10.0),
    skipEMfractionThreshold = cms.double(0.9),
    skipEM = cms.bool(True),
    offsetCorrLabel = cms.string('AK5PFchsL1FastJet'),
    skipMuons = cms.bool(True),
    skipMuonSelection = cms.string('isGlobalMuon | isStandAloneMuon'),
    jetCorrEtaMax = cms.double(9.9),
    jetCorrLabel = cms.string('AK5PFchsCombinedCorrector')
)


process.pfJetTracksAssociatorAtVertex = cms.EDProducer("JetTracksAssociatorAtVertex",
    tracks = cms.InputTag("generalTracks"),
    useAssigned = cms.bool(False),
    coneSize = cms.double(0.5),
    pvSrc = cms.InputTag("offlinePrimaryVertices"),
    jets = cms.InputTag("pfJets")
)


process.pfJetTracksAssociatorAtVertexPFlow = cms.EDProducer("JetTracksAssociatorAtVertex",
    jets = cms.InputTag("pfJetsPFlow"),
    tracks = cms.InputTag("generalTracks"),
    useAssigned = cms.bool(False),
    coneSize = cms.double(0.5),
    pvSrc = cms.InputTag("goodOfflinePrimaryVertices")
)


process.pfJetTracksAssociatorAtVertexPFlowLoose = cms.EDProducer("JetTracksAssociatorAtVertex",
    jets = cms.InputTag("pfJetsPFlowLoose"),
    tracks = cms.InputTag("generalTracks"),
    useAssigned = cms.bool(False),
    coneSize = cms.double(0.5),
    pvSrc = cms.InputTag("goodOfflinePrimaryVertices")
)


process.pfJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(True),
    voronoiRfact = cms.double(-0.9),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('PFJet'),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('AntiKt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.5),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("pfNoElectron"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.pfJetsLegacyHPSPiZeros = cms.EDProducer("RecoTauPiZeroProducer",
    massHypothesis = cms.double(0.136),
    ranking = cms.VPSet(cms.PSet(
        selectionPassFunction = cms.string('abs(mass() - 0.13579)'),
        selection = cms.string('algoIs("kStrips")'),
        name = cms.string('InStrip'),
        plugin = cms.string('RecoTauPiZeroStringQuality'),
        selectionFailValue = cms.double(1000)
    )),
    jetRegionSrc = cms.InputTag("pfTauPFJets08Region"),
    outputSelection = cms.string('pt > 0'),
    jetSrc = cms.InputTag("pfJets"),
    builders = cms.VPSet(cms.PSet(
        name = cms.string('s'),
        stripPhiAssociationDistance = cms.double(0.2),
        plugin = cms.string('RecoTauPiZeroStripPlugin2'),
        minGammaEtStripAdd = cms.double(0.0),
        minGammaEtStripSeed = cms.double(0.5),
        qualityCuts = cms.PSet(
            isolationQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(8),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(1.0),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(1.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            ),
            pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
            primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
            signalQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(3),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(0.5),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(0.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            )
        ),
        maxStripBuildIterations = cms.int32(-1),
        updateStripAfterEachDaughter = cms.bool(False),
        makeCombinatoricStrips = cms.bool(False),
        applyElecTrackQcuts = cms.bool(False),
        stripCandidatesParticleIds = cms.vint32(2, 4),
        minStripEt = cms.double(1.0),
        stripEtaAssociationDistance = cms.double(0.05)
    ))
)


process.pfJetsLegacyHPSPiZerosPFlow = cms.EDProducer("RecoTauPiZeroProducer",
    massHypothesis = cms.double(0.136),
    ranking = cms.VPSet(cms.PSet(
        selectionPassFunction = cms.string('abs(mass() - 0.13579)'),
        selection = cms.string('algoIs("kStrips")'),
        name = cms.string('InStrip'),
        plugin = cms.string('RecoTauPiZeroStringQuality'),
        selectionFailValue = cms.double(1000)
    )),
    jetRegionSrc = cms.InputTag("pfTauPFJets08RegionPFlow"),
    outputSelection = cms.string('pt > 0'),
    jetSrc = cms.InputTag("pfJetsPFlow"),
    builders = cms.VPSet(cms.PSet(
        name = cms.string('s'),
        stripPhiAssociationDistance = cms.double(0.2),
        plugin = cms.string('RecoTauPiZeroStripPlugin2'),
        minGammaEtStripAdd = cms.double(0.0),
        minGammaEtStripSeed = cms.double(0.5),
        qualityCuts = cms.PSet(
            isolationQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(8),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(1.0),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(1.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            ),
            pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
            primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
            signalQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(3),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(0.5),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(0.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            )
        ),
        maxStripBuildIterations = cms.int32(-1),
        updateStripAfterEachDaughter = cms.bool(False),
        makeCombinatoricStrips = cms.bool(False),
        applyElecTrackQcuts = cms.bool(False),
        stripCandidatesParticleIds = cms.vint32(2, 4),
        minStripEt = cms.double(1.0),
        stripEtaAssociationDistance = cms.double(0.05)
    ))
)


process.pfJetsLegacyHPSPiZerosPFlowLoose = cms.EDProducer("RecoTauPiZeroProducer",
    massHypothesis = cms.double(0.136),
    ranking = cms.VPSet(cms.PSet(
        selectionPassFunction = cms.string('abs(mass() - 0.13579)'),
        selection = cms.string('algoIs("kStrips")'),
        name = cms.string('InStrip'),
        plugin = cms.string('RecoTauPiZeroStringQuality'),
        selectionFailValue = cms.double(1000)
    )),
    jetRegionSrc = cms.InputTag("pfTauPFJets08RegionPFlowLoose"),
    outputSelection = cms.string('pt > 0'),
    jetSrc = cms.InputTag("pfJetsPFlowLoose"),
    builders = cms.VPSet(cms.PSet(
        name = cms.string('s'),
        stripPhiAssociationDistance = cms.double(0.2),
        plugin = cms.string('RecoTauPiZeroStripPlugin2'),
        minGammaEtStripAdd = cms.double(0.0),
        minGammaEtStripSeed = cms.double(0.5),
        qualityCuts = cms.PSet(
            isolationQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(8),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(1.0),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(1.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            ),
            pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
            primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
            signalQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(3),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(0.5),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(0.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            )
        ),
        maxStripBuildIterations = cms.int32(-1),
        updateStripAfterEachDaughter = cms.bool(False),
        makeCombinatoricStrips = cms.bool(False),
        applyElecTrackQcuts = cms.bool(False),
        stripCandidatesParticleIds = cms.vint32(2, 4),
        minStripEt = cms.double(1.0),
        stripEtaAssociationDistance = cms.double(0.05)
    ))
)


process.pfJetsLegacyTaNCPiZeros = cms.EDProducer("RecoTauPiZeroProducer",
    massHypothesis = cms.double(0.136),
    ranking = cms.VPSet(cms.PSet(
        selectionPassFunction = cms.string('abs(mass() - 0.13579)'),
        selection = cms.string('mass() < 0.2'),
        name = cms.string('PFTDM'),
        plugin = cms.string('RecoTauPiZeroStringQuality'),
        selectionFailValue = cms.double(1000)
    )),
    jetRegionSrc = cms.InputTag("pfTauPFJets08Region"),
    outputSelection = cms.string('pt > 1.5'),
    jetSrc = cms.InputTag("pfJets"),
    builders = cms.VPSet(cms.PSet(
        plugin = cms.string('RecoTauPiZeroTrivialPlugin'),
        name = cms.string('1'),
        qualityCuts = cms.PSet(
            isolationQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(8),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(1.0),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(1.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            ),
            pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
            primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
            signalQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(3),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(0.5),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(0.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            )
        )
    ), 
        cms.PSet(
            maxMass = cms.double(-1.0),
            plugin = cms.string('RecoTauPiZeroCombinatoricPlugin'),
            minMass = cms.double(0.0),
            qualityCuts = cms.PSet(
                isolationQualityCuts = cms.PSet(
                    minTrackHits = cms.uint32(8),
                    minTrackVertexWeight = cms.double(-1),
                    minTrackPt = cms.double(1.0),
                    maxTrackChi2 = cms.double(100.0),
                    minTrackPixelHits = cms.uint32(0),
                    minGammaEt = cms.double(1.5),
                    maxDeltaZ = cms.double(0.2),
                    maxTransverseImpactParameter = cms.double(0.03)
                ),
                pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
                primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
                signalQualityCuts = cms.PSet(
                    minTrackHits = cms.uint32(3),
                    minTrackVertexWeight = cms.double(-1),
                    minTrackPt = cms.double(0.5),
                    maxTrackChi2 = cms.double(100.0),
                    minTrackPixelHits = cms.uint32(0),
                    minGammaEt = cms.double(0.5),
                    maxDeltaZ = cms.double(0.2),
                    maxTransverseImpactParameter = cms.double(0.03)
                )
            ),
            choose = cms.uint32(2),
            maxInputGammas = cms.uint32(10),
            name = cms.string('2')
        ))
)


process.pfJetsLegacyTaNCPiZerosPFlow = cms.EDProducer("RecoTauPiZeroProducer",
    massHypothesis = cms.double(0.136),
    ranking = cms.VPSet(cms.PSet(
        selectionPassFunction = cms.string('abs(mass() - 0.13579)'),
        selection = cms.string('mass() < 0.2'),
        name = cms.string('PFTDM'),
        plugin = cms.string('RecoTauPiZeroStringQuality'),
        selectionFailValue = cms.double(1000)
    )),
    jetRegionSrc = cms.InputTag("pfTauPFJets08RegionPFlow"),
    outputSelection = cms.string('pt > 1.5'),
    jetSrc = cms.InputTag("pfJetsPFlow"),
    builders = cms.VPSet(cms.PSet(
        plugin = cms.string('RecoTauPiZeroTrivialPlugin'),
        name = cms.string('1'),
        qualityCuts = cms.PSet(
            isolationQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(8),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(1.0),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(1.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            ),
            pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
            primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
            signalQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(3),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(0.5),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(0.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            )
        )
    ), 
        cms.PSet(
            maxMass = cms.double(-1.0),
            plugin = cms.string('RecoTauPiZeroCombinatoricPlugin'),
            minMass = cms.double(0.0),
            qualityCuts = cms.PSet(
                isolationQualityCuts = cms.PSet(
                    minTrackHits = cms.uint32(8),
                    minTrackVertexWeight = cms.double(-1),
                    minTrackPt = cms.double(1.0),
                    maxTrackChi2 = cms.double(100.0),
                    minTrackPixelHits = cms.uint32(0),
                    minGammaEt = cms.double(1.5),
                    maxDeltaZ = cms.double(0.2),
                    maxTransverseImpactParameter = cms.double(0.03)
                ),
                pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
                primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
                signalQualityCuts = cms.PSet(
                    minTrackHits = cms.uint32(3),
                    minTrackVertexWeight = cms.double(-1),
                    minTrackPt = cms.double(0.5),
                    maxTrackChi2 = cms.double(100.0),
                    minTrackPixelHits = cms.uint32(0),
                    minGammaEt = cms.double(0.5),
                    maxDeltaZ = cms.double(0.2),
                    maxTransverseImpactParameter = cms.double(0.03)
                )
            ),
            choose = cms.uint32(2),
            maxInputGammas = cms.uint32(10),
            name = cms.string('2')
        ))
)


process.pfJetsLegacyTaNCPiZerosPFlowLoose = cms.EDProducer("RecoTauPiZeroProducer",
    massHypothesis = cms.double(0.136),
    ranking = cms.VPSet(cms.PSet(
        selectionPassFunction = cms.string('abs(mass() - 0.13579)'),
        selection = cms.string('mass() < 0.2'),
        name = cms.string('PFTDM'),
        plugin = cms.string('RecoTauPiZeroStringQuality'),
        selectionFailValue = cms.double(1000)
    )),
    jetRegionSrc = cms.InputTag("pfTauPFJets08RegionPFlowLoose"),
    outputSelection = cms.string('pt > 1.5'),
    jetSrc = cms.InputTag("pfJetsPFlowLoose"),
    builders = cms.VPSet(cms.PSet(
        plugin = cms.string('RecoTauPiZeroTrivialPlugin'),
        name = cms.string('1'),
        qualityCuts = cms.PSet(
            isolationQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(8),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(1.0),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(1.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            ),
            pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
            primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
            signalQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(3),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(0.5),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(0.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            )
        )
    ), 
        cms.PSet(
            maxMass = cms.double(-1.0),
            plugin = cms.string('RecoTauPiZeroCombinatoricPlugin'),
            minMass = cms.double(0.0),
            qualityCuts = cms.PSet(
                isolationQualityCuts = cms.PSet(
                    minTrackHits = cms.uint32(8),
                    minTrackVertexWeight = cms.double(-1),
                    minTrackPt = cms.double(1.0),
                    maxTrackChi2 = cms.double(100.0),
                    minTrackPixelHits = cms.uint32(0),
                    minGammaEt = cms.double(1.5),
                    maxDeltaZ = cms.double(0.2),
                    maxTransverseImpactParameter = cms.double(0.03)
                ),
                pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
                primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
                signalQualityCuts = cms.PSet(
                    minTrackHits = cms.uint32(3),
                    minTrackVertexWeight = cms.double(-1),
                    minTrackPt = cms.double(0.5),
                    maxTrackChi2 = cms.double(100.0),
                    minTrackPixelHits = cms.uint32(0),
                    minGammaEt = cms.double(0.5),
                    maxDeltaZ = cms.double(0.2),
                    maxTransverseImpactParameter = cms.double(0.03)
                )
            ),
            choose = cms.uint32(2),
            maxInputGammas = cms.uint32(10),
            name = cms.string('2')
        ))
)


process.pfJetsPFlow = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(True),
    voronoiRfact = cms.double(-0.9),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('PFJet'),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('AntiKt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.5),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("pfNoElectronPFlow"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag("goodOfflinePrimaryVertices"),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.pfJetsPFlowLoose = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(True),
    voronoiRfact = cms.double(-0.9),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('PFJet'),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('AntiKt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.5),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("pfNoElectronPFlowLoose"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag("goodOfflinePrimaryVertices"),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.pfJetsPiZeros = cms.EDProducer("RecoTauPiZeroProducer",
    massHypothesis = cms.double(0.136),
    ranking = cms.VPSet(cms.PSet(
        selectionPassFunction = cms.string('abs(mass() - 0.13579)'),
        selection = cms.string('abs(eta()) < 1.5 & abs(mass() - 0.13579) < 0.05'),
        name = cms.string('nearPiZeroMass'),
        plugin = cms.string('RecoTauPiZeroStringQuality'),
        selectionFailValue = cms.double(1000)
    ), 
        cms.PSet(
            selectionPassFunction = cms.string('abs(mass() - 0.13579)'),
            selection = cms.string('abs(eta()) > 1.5 & mass() < 0.2'),
            name = cms.string('nearPiZeroMass'),
            plugin = cms.string('RecoTauPiZeroStringQuality'),
            selectionFailValue = cms.double(1000)
        ), 
        cms.PSet(
            selectionPassFunction = cms.string('abs(mass() - 0.13579)'),
            selection = cms.string('algoIs("kStrips")'),
            name = cms.string('InStrip'),
            plugin = cms.string('RecoTauPiZeroStringQuality'),
            selectionFailValue = cms.double(1000)
        )),
    jetRegionSrc = cms.InputTag("pfTauPFJets08Region"),
    outputSelection = cms.string('pt > 1.5'),
    jetSrc = cms.InputTag("pfJets"),
    builders = cms.VPSet(cms.PSet(
        maxMass = cms.double(-1.0),
        plugin = cms.string('RecoTauPiZeroCombinatoricPlugin'),
        minMass = cms.double(0.0),
        qualityCuts = cms.PSet(
            isolationQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(8),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(1.0),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(1.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            ),
            pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
            primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
            signalQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(3),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(0.5),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(0.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            )
        ),
        choose = cms.uint32(2),
        maxInputGammas = cms.uint32(10),
        name = cms.string('2')
    ), 
        cms.PSet(
            name = cms.string('s'),
            stripPhiAssociationDistance = cms.double(0.2),
            plugin = cms.string('RecoTauPiZeroStripPlugin2'),
            minGammaEtStripAdd = cms.double(0.0),
            minGammaEtStripSeed = cms.double(0.5),
            qualityCuts = cms.PSet(
                isolationQualityCuts = cms.PSet(
                    minTrackHits = cms.uint32(8),
                    minTrackVertexWeight = cms.double(-1),
                    minTrackPt = cms.double(1.0),
                    maxTrackChi2 = cms.double(100.0),
                    minTrackPixelHits = cms.uint32(0),
                    minGammaEt = cms.double(1.5),
                    maxDeltaZ = cms.double(0.2),
                    maxTransverseImpactParameter = cms.double(0.03)
                ),
                pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
                primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
                signalQualityCuts = cms.PSet(
                    minTrackHits = cms.uint32(3),
                    minTrackVertexWeight = cms.double(-1),
                    minTrackPt = cms.double(0.5),
                    maxTrackChi2 = cms.double(100.0),
                    minTrackPixelHits = cms.uint32(0),
                    minGammaEt = cms.double(0.5),
                    maxDeltaZ = cms.double(0.2),
                    maxTransverseImpactParameter = cms.double(0.03)
                )
            ),
            maxStripBuildIterations = cms.int32(-1),
            updateStripAfterEachDaughter = cms.bool(False),
            makeCombinatoricStrips = cms.bool(False),
            applyElecTrackQcuts = cms.bool(False),
            stripCandidatesParticleIds = cms.vint32(2, 4),
            minStripEt = cms.double(1.0),
            stripEtaAssociationDistance = cms.double(0.05)
        ))
)


process.pfJetsPiZerosPFlow = cms.EDProducer("RecoTauPiZeroProducer",
    massHypothesis = cms.double(0.136),
    ranking = cms.VPSet(cms.PSet(
        selectionPassFunction = cms.string('abs(mass() - 0.13579)'),
        selection = cms.string('abs(eta()) < 1.5 & abs(mass() - 0.13579) < 0.05'),
        name = cms.string('nearPiZeroMass'),
        plugin = cms.string('RecoTauPiZeroStringQuality'),
        selectionFailValue = cms.double(1000)
    ), 
        cms.PSet(
            selectionPassFunction = cms.string('abs(mass() - 0.13579)'),
            selection = cms.string('abs(eta()) > 1.5 & mass() < 0.2'),
            name = cms.string('nearPiZeroMass'),
            plugin = cms.string('RecoTauPiZeroStringQuality'),
            selectionFailValue = cms.double(1000)
        ), 
        cms.PSet(
            selectionPassFunction = cms.string('abs(mass() - 0.13579)'),
            selection = cms.string('algoIs("kStrips")'),
            name = cms.string('InStrip'),
            plugin = cms.string('RecoTauPiZeroStringQuality'),
            selectionFailValue = cms.double(1000)
        )),
    jetRegionSrc = cms.InputTag("pfTauPFJets08RegionPFlow"),
    outputSelection = cms.string('pt > 1.5'),
    jetSrc = cms.InputTag("pfJetsPFlow"),
    builders = cms.VPSet(cms.PSet(
        maxMass = cms.double(-1.0),
        plugin = cms.string('RecoTauPiZeroCombinatoricPlugin'),
        minMass = cms.double(0.0),
        qualityCuts = cms.PSet(
            isolationQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(8),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(1.0),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(1.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            ),
            pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
            primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
            signalQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(3),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(0.5),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(0.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            )
        ),
        choose = cms.uint32(2),
        maxInputGammas = cms.uint32(10),
        name = cms.string('2')
    ), 
        cms.PSet(
            name = cms.string('s'),
            stripPhiAssociationDistance = cms.double(0.2),
            plugin = cms.string('RecoTauPiZeroStripPlugin2'),
            minGammaEtStripAdd = cms.double(0.0),
            minGammaEtStripSeed = cms.double(0.5),
            qualityCuts = cms.PSet(
                isolationQualityCuts = cms.PSet(
                    minTrackHits = cms.uint32(8),
                    minTrackVertexWeight = cms.double(-1),
                    minTrackPt = cms.double(1.0),
                    maxTrackChi2 = cms.double(100.0),
                    minTrackPixelHits = cms.uint32(0),
                    minGammaEt = cms.double(1.5),
                    maxDeltaZ = cms.double(0.2),
                    maxTransverseImpactParameter = cms.double(0.03)
                ),
                pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
                primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
                signalQualityCuts = cms.PSet(
                    minTrackHits = cms.uint32(3),
                    minTrackVertexWeight = cms.double(-1),
                    minTrackPt = cms.double(0.5),
                    maxTrackChi2 = cms.double(100.0),
                    minTrackPixelHits = cms.uint32(0),
                    minGammaEt = cms.double(0.5),
                    maxDeltaZ = cms.double(0.2),
                    maxTransverseImpactParameter = cms.double(0.03)
                )
            ),
            maxStripBuildIterations = cms.int32(-1),
            updateStripAfterEachDaughter = cms.bool(False),
            makeCombinatoricStrips = cms.bool(False),
            applyElecTrackQcuts = cms.bool(False),
            stripCandidatesParticleIds = cms.vint32(2, 4),
            minStripEt = cms.double(1.0),
            stripEtaAssociationDistance = cms.double(0.05)
        ))
)


process.pfJetsPiZerosPFlowLoose = cms.EDProducer("RecoTauPiZeroProducer",
    massHypothesis = cms.double(0.136),
    ranking = cms.VPSet(cms.PSet(
        selectionPassFunction = cms.string('abs(mass() - 0.13579)'),
        selection = cms.string('abs(eta()) < 1.5 & abs(mass() - 0.13579) < 0.05'),
        name = cms.string('nearPiZeroMass'),
        plugin = cms.string('RecoTauPiZeroStringQuality'),
        selectionFailValue = cms.double(1000)
    ), 
        cms.PSet(
            selectionPassFunction = cms.string('abs(mass() - 0.13579)'),
            selection = cms.string('abs(eta()) > 1.5 & mass() < 0.2'),
            name = cms.string('nearPiZeroMass'),
            plugin = cms.string('RecoTauPiZeroStringQuality'),
            selectionFailValue = cms.double(1000)
        ), 
        cms.PSet(
            selectionPassFunction = cms.string('abs(mass() - 0.13579)'),
            selection = cms.string('algoIs("kStrips")'),
            name = cms.string('InStrip'),
            plugin = cms.string('RecoTauPiZeroStringQuality'),
            selectionFailValue = cms.double(1000)
        )),
    jetRegionSrc = cms.InputTag("pfTauPFJets08RegionPFlowLoose"),
    outputSelection = cms.string('pt > 1.5'),
    jetSrc = cms.InputTag("pfJetsPFlowLoose"),
    builders = cms.VPSet(cms.PSet(
        maxMass = cms.double(-1.0),
        plugin = cms.string('RecoTauPiZeroCombinatoricPlugin'),
        minMass = cms.double(0.0),
        qualityCuts = cms.PSet(
            isolationQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(8),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(1.0),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(1.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            ),
            pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
            primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
            signalQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(3),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(0.5),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(0.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            )
        ),
        choose = cms.uint32(2),
        maxInputGammas = cms.uint32(10),
        name = cms.string('2')
    ), 
        cms.PSet(
            name = cms.string('s'),
            stripPhiAssociationDistance = cms.double(0.2),
            plugin = cms.string('RecoTauPiZeroStripPlugin2'),
            minGammaEtStripAdd = cms.double(0.0),
            minGammaEtStripSeed = cms.double(0.5),
            qualityCuts = cms.PSet(
                isolationQualityCuts = cms.PSet(
                    minTrackHits = cms.uint32(8),
                    minTrackVertexWeight = cms.double(-1),
                    minTrackPt = cms.double(1.0),
                    maxTrackChi2 = cms.double(100.0),
                    minTrackPixelHits = cms.uint32(0),
                    minGammaEt = cms.double(1.5),
                    maxDeltaZ = cms.double(0.2),
                    maxTransverseImpactParameter = cms.double(0.03)
                ),
                pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
                primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
                signalQualityCuts = cms.PSet(
                    minTrackHits = cms.uint32(3),
                    minTrackVertexWeight = cms.double(-1),
                    minTrackPt = cms.double(0.5),
                    maxTrackChi2 = cms.double(100.0),
                    minTrackPixelHits = cms.uint32(0),
                    minGammaEt = cms.double(0.5),
                    maxDeltaZ = cms.double(0.2),
                    maxTransverseImpactParameter = cms.double(0.03)
                )
            ),
            maxStripBuildIterations = cms.int32(-1),
            updateStripAfterEachDaughter = cms.bool(False),
            makeCombinatoricStrips = cms.bool(False),
            applyElecTrackQcuts = cms.bool(False),
            stripCandidatesParticleIds = cms.vint32(2, 4),
            minStripEt = cms.double(1.0),
            stripEtaAssociationDistance = cms.double(0.05)
        ))
)


process.pfMET = cms.EDProducer("METProducer",
    HB_EtResPar = cms.vdouble(0.0, 1.22, 0.05),
    EE_PhiResPar = cms.vdouble(0.02511),
    jdphi3 = cms.vdouble(0.042, 0.043, 0.044, 0.043, 0.041, 
        0.039, 0.039, 0.036, 0.034, 0.031),
    jdpt9 = cms.vdouble(0.843, 0.885, 1.245, 1.665, 1.944, 
        1.981, 1.972, 2.875, 3.923, 7.51),
    jdpt8 = cms.vdouble(0.889, 0.939, 1.166, 1.365, 1.553, 
        1.805, 2.06, 2.22, 2.268, 2.247),
    jdpt7 = cms.vdouble(1.094, 1.139, 1.436, 1.672, 1.831, 
        2.05, 2.267, 2.549, 2.785, 2.86),
    jdpt6 = cms.vdouble(1.213, 1.298, 1.716, 2.015, 2.191, 
        2.612, 2.863, 2.879, 2.925, 2.902),
    jdpt5 = cms.vdouble(1.049, 1.149, 1.607, 1.869, 2.012, 
        2.219, 2.289, 2.412, 2.695, 2.865),
    jdpt4 = cms.vdouble(0.85, 0.961, 1.337, 1.593, 1.854, 
        2.005, 2.209, 2.533, 2.812, 3.047),
    jdpt3 = cms.vdouble(0.929, 1.04, 1.46, 1.74, 2.042, 
        2.289, 2.639, 2.837, 2.946, 2.971),
    jdpt2 = cms.vdouble(0.841, 0.937, 1.316, 1.605, 1.919, 
        2.295, 2.562, 2.722, 2.943, 3.293),
    jdpt1 = cms.vdouble(0.718, 0.813, 1.133, 1.384, 1.588, 
        1.841, 2.115, 2.379, 2.508, 2.772),
    jdpt0 = cms.vdouble(0.749, 0.829, 1.099, 1.355, 1.584, 
        1.807, 2.035, 2.217, 2.378, 2.591),
    HE_EtResPar = cms.vdouble(0.0, 1.3, 0.05),
    alias = cms.string('pfMET'),
    HF_PhiResPar = cms.vdouble(0.05022),
    PF_PhiResType7 = cms.vdouble(0.02511),
    HE_PhiResPar = cms.vdouble(0.02511),
    EE_EtResPar = cms.vdouble(0.2, 0.03, 0.005),
    noHF = cms.bool(False),
    PF_PhiResType2 = cms.vdouble(0.002),
    PF_PhiResType3 = cms.vdouble(0.002),
    HF_EtResPar = cms.vdouble(0.0, 1.82, 0.09),
    resolutionsEra = cms.string('Spring10'),
    PF_PhiResType6 = cms.vdouble(0.02511),
    InputType = cms.string('PFCandidateCollection'),
    PF_PhiResType4 = cms.vdouble(0.0028, 0.0, 0.0022),
    PF_PhiResType5 = cms.vdouble(0.1, 0.1, 0.13),
    ptresolthreshold = cms.double(10.0),
    METType = cms.string('PFMET'),
    HO_EtResPar = cms.vdouble(0.0, 1.3, 0.005),
    EB_EtResPar = cms.vdouble(0.2, 0.03, 0.005),
    jdphi8 = cms.vdouble(0.059, 0.057, 0.051, 0.044, 0.038, 
        0.035, 0.037, 0.032, 0.028, 0.028),
    globalThreshold = cms.double(0.0),
    jets = cms.InputTag("pfJets"),
    EB_PhiResPar = cms.vdouble(0.00502),
    src = cms.InputTag("particleFlow"),
    jdphi9 = cms.vdouble(0.062, 0.059, 0.053, 0.047, 0.042, 
        0.045, 0.036, 0.032, 0.034, 0.044),
    resolutionsAlgo = cms.string('AK5PF'),
    jdphi4 = cms.vdouble(0.042, 0.042, 0.043, 0.042, 0.038, 
        0.036, 0.036, 0.033, 0.031, 0.031),
    HO_PhiResPar = cms.vdouble(0.02511),
    jdphi2 = cms.vdouble(0.04, 0.04, 0.04, 0.04, 0.04, 
        0.038, 0.036, 0.035, 0.034, 0.033),
    jdphi1 = cms.vdouble(0.034, 0.035, 0.035, 0.035, 0.035, 
        0.034, 0.031, 0.03, 0.029, 0.027),
    jdphi0 = cms.vdouble(0.034, 0.034, 0.034, 0.034, 0.032, 
        0.031, 0.028, 0.027, 0.027, 0.027),
    jdphi7 = cms.vdouble(0.077, 0.072, 0.059, 0.05, 0.045, 
        0.042, 0.039, 0.039, 0.037, 0.031),
    jdphi6 = cms.vdouble(0.084, 0.08, 0.072, 0.065, 0.066, 
        0.06, 0.051, 0.049, 0.045, 0.045),
    jdphi5 = cms.vdouble(0.069, 0.069, 0.064, 0.058, 0.053, 
        0.049, 0.049, 0.043, 0.039, 0.04),
    HB_PhiResPar = cms.vdouble(0.02511),
    PF_PhiResType1 = cms.vdouble(0.002),
    PF_EtResType5 = cms.vdouble(0.41, 0.52, 0.25),
    PF_EtResType4 = cms.vdouble(0.042, 0.1, 0.0),
    PF_EtResType7 = cms.vdouble(0.0, 1.22, 0.05),
    PF_EtResType6 = cms.vdouble(0.0, 1.22, 0.05),
    PF_EtResType1 = cms.vdouble(0.05, 0, 0),
    calculateSignificance = cms.bool(True),
    PF_EtResType3 = cms.vdouble(0.05, 0, 0),
    PF_EtResType2 = cms.vdouble(0.05, 0, 0)
)


process.pfMETPFlow = cms.EDProducer("METProducer",
    resolutionsEra = cms.string('Spring10'),
    PF_EtResType6 = cms.vdouble(0.0, 1.22, 0.05),
    HB_EtResPar = cms.vdouble(0.0, 1.22, 0.05),
    jdphi6 = cms.vdouble(0.084, 0.08, 0.072, 0.065, 0.066, 
        0.06, 0.051, 0.049, 0.045, 0.045),
    jdphi3 = cms.vdouble(0.042, 0.043, 0.044, 0.043, 0.041, 
        0.039, 0.039, 0.036, 0.034, 0.031),
    jdpt9 = cms.vdouble(0.843, 0.885, 1.245, 1.665, 1.944, 
        1.981, 1.972, 2.875, 3.923, 7.51),
    jdpt8 = cms.vdouble(0.889, 0.939, 1.166, 1.365, 1.553, 
        1.805, 2.06, 2.22, 2.268, 2.247),
    jdpt7 = cms.vdouble(1.094, 1.139, 1.436, 1.672, 1.831, 
        2.05, 2.267, 2.549, 2.785, 2.86),
    jdpt6 = cms.vdouble(1.213, 1.298, 1.716, 2.015, 2.191, 
        2.612, 2.863, 2.879, 2.925, 2.902),
    jdpt5 = cms.vdouble(1.049, 1.149, 1.607, 1.869, 2.012, 
        2.219, 2.289, 2.412, 2.695, 2.865),
    jdpt4 = cms.vdouble(0.85, 0.961, 1.337, 1.593, 1.854, 
        2.005, 2.209, 2.533, 2.812, 3.047),
    jdpt3 = cms.vdouble(0.929, 1.04, 1.46, 1.74, 2.042, 
        2.289, 2.639, 2.837, 2.946, 2.971),
    jdpt2 = cms.vdouble(0.841, 0.937, 1.316, 1.605, 1.919, 
        2.295, 2.562, 2.722, 2.943, 3.293),
    EE_EtResPar = cms.vdouble(0.2, 0.03, 0.005),
    jdpt0 = cms.vdouble(0.749, 0.829, 1.099, 1.355, 1.584, 
        1.807, 2.035, 2.217, 2.378, 2.591),
    HF_PhiResPar = cms.vdouble(0.05022),
    InputType = cms.string('PFCandidateCollection'),
    HE_PhiResPar = cms.vdouble(0.02511),
    jdpt1 = cms.vdouble(0.718, 0.813, 1.133, 1.384, 1.588, 
        1.841, 2.115, 2.379, 2.508, 2.772),
    noHF = cms.bool(False),
    PF_PhiResType2 = cms.vdouble(0.002),
    PF_PhiResType3 = cms.vdouble(0.002),
    HF_EtResPar = cms.vdouble(0.0, 1.82, 0.09),
    resolutionsAlgo = cms.string('AK5PF'),
    PF_PhiResType6 = cms.vdouble(0.02511),
    HB_PhiResPar = cms.vdouble(0.02511),
    PF_PhiResType4 = cms.vdouble(0.0028, 0.0, 0.0022),
    PF_PhiResType5 = cms.vdouble(0.1, 0.1, 0.13),
    ptresolthreshold = cms.double(10.0),
    METType = cms.string('PFMET'),
    HO_EtResPar = cms.vdouble(0.0, 1.3, 0.005),
    EB_EtResPar = cms.vdouble(0.2, 0.03, 0.005),
    PF_PhiResType1 = cms.vdouble(0.002),
    PF_EtResType4 = cms.vdouble(0.042, 0.1, 0.0),
    jets = cms.InputTag("pfJetsPFlow"),
    EB_PhiResPar = cms.vdouble(0.00502),
    src = cms.InputTag("particleFlow"),
    jdphi9 = cms.vdouble(0.062, 0.059, 0.053, 0.047, 0.042, 
        0.045, 0.036, 0.032, 0.034, 0.044),
    jdphi8 = cms.vdouble(0.059, 0.057, 0.051, 0.044, 0.038, 
        0.035, 0.037, 0.032, 0.028, 0.028),
    jdphi4 = cms.vdouble(0.042, 0.042, 0.043, 0.042, 0.038, 
        0.036, 0.036, 0.033, 0.031, 0.031),
    HO_PhiResPar = cms.vdouble(0.02511),
    jdphi2 = cms.vdouble(0.04, 0.04, 0.04, 0.04, 0.04, 
        0.038, 0.036, 0.035, 0.034, 0.033),
    jdphi1 = cms.vdouble(0.034, 0.035, 0.035, 0.035, 0.035, 
        0.034, 0.031, 0.03, 0.029, 0.027),
    jdphi0 = cms.vdouble(0.034, 0.034, 0.034, 0.034, 0.032, 
        0.031, 0.028, 0.027, 0.027, 0.027),
    jdphi7 = cms.vdouble(0.077, 0.072, 0.059, 0.05, 0.045, 
        0.042, 0.039, 0.039, 0.037, 0.031),
    EE_PhiResPar = cms.vdouble(0.02511),
    jdphi5 = cms.vdouble(0.069, 0.069, 0.064, 0.058, 0.053, 
        0.049, 0.049, 0.043, 0.039, 0.04),
    PF_PhiResType7 = cms.vdouble(0.02511),
    alias = cms.string('pfMET'),
    PF_EtResType5 = cms.vdouble(0.41, 0.52, 0.25),
    globalThreshold = cms.double(0.0),
    PF_EtResType7 = cms.vdouble(0.0, 1.22, 0.05),
    HE_EtResPar = cms.vdouble(0.0, 1.3, 0.05),
    PF_EtResType1 = cms.vdouble(0.05, 0, 0),
    calculateSignificance = cms.bool(True),
    PF_EtResType3 = cms.vdouble(0.05, 0, 0),
    PF_EtResType2 = cms.vdouble(0.05, 0, 0)
)


process.pfMETPFlowLoose = cms.EDProducer("METProducer",
    resolutionsEra = cms.string('Spring10'),
    PF_EtResType6 = cms.vdouble(0.0, 1.22, 0.05),
    HB_EtResPar = cms.vdouble(0.0, 1.22, 0.05),
    jdphi6 = cms.vdouble(0.084, 0.08, 0.072, 0.065, 0.066, 
        0.06, 0.051, 0.049, 0.045, 0.045),
    jdphi3 = cms.vdouble(0.042, 0.043, 0.044, 0.043, 0.041, 
        0.039, 0.039, 0.036, 0.034, 0.031),
    jdpt9 = cms.vdouble(0.843, 0.885, 1.245, 1.665, 1.944, 
        1.981, 1.972, 2.875, 3.923, 7.51),
    jdpt8 = cms.vdouble(0.889, 0.939, 1.166, 1.365, 1.553, 
        1.805, 2.06, 2.22, 2.268, 2.247),
    jdpt7 = cms.vdouble(1.094, 1.139, 1.436, 1.672, 1.831, 
        2.05, 2.267, 2.549, 2.785, 2.86),
    jdpt6 = cms.vdouble(1.213, 1.298, 1.716, 2.015, 2.191, 
        2.612, 2.863, 2.879, 2.925, 2.902),
    jdpt5 = cms.vdouble(1.049, 1.149, 1.607, 1.869, 2.012, 
        2.219, 2.289, 2.412, 2.695, 2.865),
    jdpt4 = cms.vdouble(0.85, 0.961, 1.337, 1.593, 1.854, 
        2.005, 2.209, 2.533, 2.812, 3.047),
    jdpt3 = cms.vdouble(0.929, 1.04, 1.46, 1.74, 2.042, 
        2.289, 2.639, 2.837, 2.946, 2.971),
    jdpt2 = cms.vdouble(0.841, 0.937, 1.316, 1.605, 1.919, 
        2.295, 2.562, 2.722, 2.943, 3.293),
    EE_EtResPar = cms.vdouble(0.2, 0.03, 0.005),
    jdpt0 = cms.vdouble(0.749, 0.829, 1.099, 1.355, 1.584, 
        1.807, 2.035, 2.217, 2.378, 2.591),
    HF_PhiResPar = cms.vdouble(0.05022),
    InputType = cms.string('PFCandidateCollection'),
    HE_PhiResPar = cms.vdouble(0.02511),
    jdpt1 = cms.vdouble(0.718, 0.813, 1.133, 1.384, 1.588, 
        1.841, 2.115, 2.379, 2.508, 2.772),
    noHF = cms.bool(False),
    PF_PhiResType2 = cms.vdouble(0.002),
    PF_PhiResType3 = cms.vdouble(0.002),
    HF_EtResPar = cms.vdouble(0.0, 1.82, 0.09),
    resolutionsAlgo = cms.string('AK5PF'),
    PF_PhiResType6 = cms.vdouble(0.02511),
    HB_PhiResPar = cms.vdouble(0.02511),
    PF_PhiResType4 = cms.vdouble(0.0028, 0.0, 0.0022),
    PF_PhiResType5 = cms.vdouble(0.1, 0.1, 0.13),
    ptresolthreshold = cms.double(10.0),
    METType = cms.string('PFMET'),
    HO_EtResPar = cms.vdouble(0.0, 1.3, 0.005),
    EB_EtResPar = cms.vdouble(0.2, 0.03, 0.005),
    PF_PhiResType1 = cms.vdouble(0.002),
    PF_EtResType4 = cms.vdouble(0.042, 0.1, 0.0),
    jets = cms.InputTag("pfJetsPFlowLoose"),
    EB_PhiResPar = cms.vdouble(0.00502),
    src = cms.InputTag("particleFlow"),
    jdphi9 = cms.vdouble(0.062, 0.059, 0.053, 0.047, 0.042, 
        0.045, 0.036, 0.032, 0.034, 0.044),
    jdphi8 = cms.vdouble(0.059, 0.057, 0.051, 0.044, 0.038, 
        0.035, 0.037, 0.032, 0.028, 0.028),
    jdphi4 = cms.vdouble(0.042, 0.042, 0.043, 0.042, 0.038, 
        0.036, 0.036, 0.033, 0.031, 0.031),
    HO_PhiResPar = cms.vdouble(0.02511),
    jdphi2 = cms.vdouble(0.04, 0.04, 0.04, 0.04, 0.04, 
        0.038, 0.036, 0.035, 0.034, 0.033),
    jdphi1 = cms.vdouble(0.034, 0.035, 0.035, 0.035, 0.035, 
        0.034, 0.031, 0.03, 0.029, 0.027),
    jdphi0 = cms.vdouble(0.034, 0.034, 0.034, 0.034, 0.032, 
        0.031, 0.028, 0.027, 0.027, 0.027),
    jdphi7 = cms.vdouble(0.077, 0.072, 0.059, 0.05, 0.045, 
        0.042, 0.039, 0.039, 0.037, 0.031),
    EE_PhiResPar = cms.vdouble(0.02511),
    jdphi5 = cms.vdouble(0.069, 0.069, 0.064, 0.058, 0.053, 
        0.049, 0.049, 0.043, 0.039, 0.04),
    PF_PhiResType7 = cms.vdouble(0.02511),
    alias = cms.string('pfMET'),
    PF_EtResType5 = cms.vdouble(0.41, 0.52, 0.25),
    globalThreshold = cms.double(0.0),
    PF_EtResType7 = cms.vdouble(0.0, 1.22, 0.05),
    HE_EtResPar = cms.vdouble(0.0, 1.3, 0.05),
    PF_EtResType1 = cms.vdouble(0.05, 0, 0),
    calculateSignificance = cms.bool(True),
    PF_EtResType3 = cms.vdouble(0.05, 0, 0),
    PF_EtResType2 = cms.vdouble(0.05, 0, 0)
)


process.pfMETcorrType0 = cms.EDProducer("Type0PFMETcorrInputProducer",
    srcPFCandidateToVertexAssociations = cms.InputTag("pfCandidateToVertexAssociation"),
    correction = cms.PSet(
        formula = cms.string('-([0] + [1]*x)*(1.0 + TMath::Erf(-[2]*TMath::Power(x, [3])))'),
        par3 = cms.double(0.909209),
        par2 = cms.double(0.0303531),
        par1 = cms.double(-0.703151),
        par0 = cms.double(0.0)
    ),
    srcHardScatterVertex = cms.InputTag("selectedPrimaryVertexHighestPtTrackSumForPFMEtCorrType0"),
    minDz = cms.double(0.2)
)


process.pfMet = cms.EDProducer("METProducer",
    resolutionsEra = cms.string('Spring10'),
    PF_EtResType6 = cms.vdouble(0.0, 1.22, 0.05),
    HB_EtResPar = cms.vdouble(0.0, 1.22, 0.05),
    jdphi6 = cms.vdouble(0.084, 0.08, 0.072, 0.065, 0.066, 
        0.06, 0.051, 0.049, 0.045, 0.045),
    jdphi3 = cms.vdouble(0.042, 0.043, 0.044, 0.043, 0.041, 
        0.039, 0.039, 0.036, 0.034, 0.031),
    jdpt9 = cms.vdouble(0.843, 0.885, 1.245, 1.665, 1.944, 
        1.981, 1.972, 2.875, 3.923, 7.51),
    jdpt8 = cms.vdouble(0.889, 0.939, 1.166, 1.365, 1.553, 
        1.805, 2.06, 2.22, 2.268, 2.247),
    jdpt7 = cms.vdouble(1.094, 1.139, 1.436, 1.672, 1.831, 
        2.05, 2.267, 2.549, 2.785, 2.86),
    jdpt6 = cms.vdouble(1.213, 1.298, 1.716, 2.015, 2.191, 
        2.612, 2.863, 2.879, 2.925, 2.902),
    jdpt5 = cms.vdouble(1.049, 1.149, 1.607, 1.869, 2.012, 
        2.219, 2.289, 2.412, 2.695, 2.865),
    jdpt4 = cms.vdouble(0.85, 0.961, 1.337, 1.593, 1.854, 
        2.005, 2.209, 2.533, 2.812, 3.047),
    jdpt3 = cms.vdouble(0.929, 1.04, 1.46, 1.74, 2.042, 
        2.289, 2.639, 2.837, 2.946, 2.971),
    jdpt2 = cms.vdouble(0.841, 0.937, 1.316, 1.605, 1.919, 
        2.295, 2.562, 2.722, 2.943, 3.293),
    EE_EtResPar = cms.vdouble(0.2, 0.03, 0.005),
    jdpt0 = cms.vdouble(0.749, 0.829, 1.099, 1.355, 1.584, 
        1.807, 2.035, 2.217, 2.378, 2.591),
    HF_PhiResPar = cms.vdouble(0.05022),
    HE_PhiResPar = cms.vdouble(0.02511),
    jdpt1 = cms.vdouble(0.718, 0.813, 1.133, 1.384, 1.588, 
        1.841, 2.115, 2.379, 2.508, 2.772),
    PF_PhiResType2 = cms.vdouble(0.002),
    PF_PhiResType3 = cms.vdouble(0.002),
    HF_EtResPar = cms.vdouble(0.0, 1.82, 0.09),
    resolutionsAlgo = cms.string('AK5PF'),
    PF_PhiResType6 = cms.vdouble(0.02511),
    PF_PhiResType7 = cms.vdouble(0.02511),
    PF_PhiResType4 = cms.vdouble(0.0028, 0.0, 0.0022),
    PF_PhiResType5 = cms.vdouble(0.1, 0.1, 0.13),
    ptresolthreshold = cms.double(10.0),
    HO_EtResPar = cms.vdouble(0.0, 1.3, 0.005),
    EB_EtResPar = cms.vdouble(0.2, 0.03, 0.005),
    EB_PhiResPar = cms.vdouble(0.00502),
    jdphi9 = cms.vdouble(0.062, 0.059, 0.053, 0.047, 0.042, 
        0.045, 0.036, 0.032, 0.034, 0.044),
    jdphi8 = cms.vdouble(0.059, 0.057, 0.051, 0.044, 0.038, 
        0.035, 0.037, 0.032, 0.028, 0.028),
    jdphi4 = cms.vdouble(0.042, 0.042, 0.043, 0.042, 0.038, 
        0.036, 0.036, 0.033, 0.031, 0.031),
    HO_PhiResPar = cms.vdouble(0.02511),
    jdphi2 = cms.vdouble(0.04, 0.04, 0.04, 0.04, 0.04, 
        0.038, 0.036, 0.035, 0.034, 0.033),
    jdphi1 = cms.vdouble(0.034, 0.035, 0.035, 0.035, 0.035, 
        0.034, 0.031, 0.03, 0.029, 0.027),
    jdphi0 = cms.vdouble(0.034, 0.034, 0.034, 0.034, 0.032, 
        0.031, 0.028, 0.027, 0.027, 0.027),
    jdphi7 = cms.vdouble(0.077, 0.072, 0.059, 0.05, 0.045, 
        0.042, 0.039, 0.039, 0.037, 0.031),
    EE_PhiResPar = cms.vdouble(0.02511),
    jdphi5 = cms.vdouble(0.069, 0.069, 0.064, 0.058, 0.053, 
        0.049, 0.049, 0.043, 0.039, 0.04),
    HB_PhiResPar = cms.vdouble(0.02511),
    PF_PhiResType1 = cms.vdouble(0.002),
    PF_EtResType5 = cms.vdouble(0.41, 0.52, 0.25),
    PF_EtResType4 = cms.vdouble(0.042, 0.1, 0.0),
    PF_EtResType7 = cms.vdouble(0.0, 1.22, 0.05),
    HE_EtResPar = cms.vdouble(0.0, 1.3, 0.05),
    PF_EtResType1 = cms.vdouble(0.05, 0, 0),
    PF_EtResType3 = cms.vdouble(0.05, 0, 0),
    PF_EtResType2 = cms.vdouble(0.05, 0, 0),
    src = cms.InputTag("particleFlow"),
    METType = cms.string('PFMET'),
    calculateSignificance = cms.bool(True),
    alias = cms.string('PFMET'),
    noHF = cms.bool(False),
    jets = cms.InputTag("ak5PFJets"),
    globalThreshold = cms.double(0.0),
    InputType = cms.string('PFCandidateCollection')
)


process.pfNoElectron = cms.EDProducer("TPPFCandidatesOnPFCandidates",
    bottomCollection = cms.InputTag("pfNoMuon"),
    enable = cms.bool(True),
    topCollection = cms.InputTag("pfIsolatedElectrons"),
    name = cms.untracked.string('noElectron'),
    verbose = cms.untracked.bool(False)
)


process.pfNoElectronPFlow = cms.EDProducer("TPPFCandidatesOnPFCandidates",
    bottomCollection = cms.InputTag("pfNoMuonPFlow"),
    enable = cms.bool(True),
    topCollection = cms.InputTag("pfIsolatedElectronsPFlow"),
    name = cms.untracked.string('noElectron'),
    verbose = cms.untracked.bool(False)
)


process.pfNoElectronPFlowLoose = cms.EDProducer("TPPFCandidatesOnPFCandidates",
    bottomCollection = cms.InputTag("pfNoMuonPFlowLoose"),
    enable = cms.bool(True),
    topCollection = cms.InputTag("pfIsolatedElectronsPFlowLoose"),
    name = cms.untracked.string('noElectron'),
    verbose = cms.untracked.bool(False)
)


process.pfNoJet = cms.EDProducer("TPPFJetsOnPFCandidates",
    bottomCollection = cms.InputTag("pfNoElectron"),
    enable = cms.bool(True),
    topCollection = cms.InputTag("pfJets"),
    name = cms.untracked.string('noJet'),
    verbose = cms.untracked.bool(False)
)


process.pfNoJetPFlow = cms.EDProducer("TPPFJetsOnPFCandidates",
    bottomCollection = cms.InputTag("pfNoElectronPFlow"),
    enable = cms.bool(True),
    topCollection = cms.InputTag("pfJetsPFlow"),
    name = cms.untracked.string('noJet'),
    verbose = cms.untracked.bool(False)
)


process.pfNoJetPFlowLoose = cms.EDProducer("TPPFJetsOnPFCandidates",
    bottomCollection = cms.InputTag("pfNoElectronPFlowLoose"),
    enable = cms.bool(True),
    topCollection = cms.InputTag("pfJetsPFlowLoose"),
    name = cms.untracked.string('noJet'),
    verbose = cms.untracked.bool(False)
)


process.pfNoMuon = cms.EDProducer("TPPFCandidatesOnPFCandidates",
    bottomCollection = cms.InputTag("pfNoPileUp"),
    enable = cms.bool(True),
    topCollection = cms.InputTag("pfIsolatedMuons"),
    name = cms.untracked.string('noMuon'),
    verbose = cms.untracked.bool(False)
)


process.pfNoMuonPFlow = cms.EDProducer("TPPFCandidatesOnPFCandidates",
    bottomCollection = cms.InputTag("pfNoPileUpPFlow"),
    enable = cms.bool(True),
    topCollection = cms.InputTag("pfIsolatedMuonsPFlow"),
    name = cms.untracked.string('noMuon'),
    verbose = cms.untracked.bool(False)
)


process.pfNoMuonPFlowLoose = cms.EDProducer("TPPFCandidatesOnPFCandidates",
    bottomCollection = cms.InputTag("pfNoPileUpPFlowLoose"),
    enable = cms.bool(True),
    topCollection = cms.InputTag("pfIsolatedMuonsPFlowLoose"),
    name = cms.untracked.string('noMuon'),
    verbose = cms.untracked.bool(False)
)


process.pfNoPileUp = cms.EDProducer("TPPFCandidatesOnPFCandidates",
    bottomCollection = cms.InputTag("particleFlow"),
    enable = cms.bool(True),
    topCollection = cms.InputTag("pfPileUp"),
    name = cms.untracked.string('pileUpOnPFCandidates'),
    verbose = cms.untracked.bool(False)
)


process.pfNoPileUpIso = cms.EDProducer("TPPFCandidatesOnPFCandidates",
    bottomCollection = cms.InputTag("particleFlow"),
    enable = cms.bool(True),
    topCollection = cms.InputTag("pfPileUpIso"),
    name = cms.untracked.string('pileUpOnPFCandidates'),
    verbose = cms.untracked.bool(False)
)


process.pfNoPileUpIsoPFlow = cms.EDProducer("TPPFCandidatesOnPFCandidates",
    bottomCollection = cms.InputTag("particleFlow"),
    enable = cms.bool(True),
    topCollection = cms.InputTag("pfPileUpIsoPFlow"),
    name = cms.untracked.string('pileUpOnPFCandidates'),
    verbose = cms.untracked.bool(False)
)


process.pfNoPileUpIsoPFlowLoose = cms.EDProducer("TPPFCandidatesOnPFCandidates",
    bottomCollection = cms.InputTag("particleFlow"),
    enable = cms.bool(True),
    topCollection = cms.InputTag("pfPileUpIsoPFlowLoose"),
    name = cms.untracked.string('pileUpOnPFCandidates'),
    verbose = cms.untracked.bool(False)
)


process.pfNoPileUpPFlow = cms.EDProducer("TPPFCandidatesOnPFCandidates",
    bottomCollection = cms.InputTag("particleFlow"),
    enable = cms.bool(True),
    topCollection = cms.InputTag("pfPileUpPFlow"),
    name = cms.untracked.string('pileUpOnPFCandidates'),
    verbose = cms.untracked.bool(False)
)


process.pfNoPileUpPFlowLoose = cms.EDProducer("TPPFCandidatesOnPFCandidates",
    bottomCollection = cms.InputTag("particleFlow"),
    enable = cms.bool(True),
    topCollection = cms.InputTag("pfPileUpPFlowLoose"),
    name = cms.untracked.string('pileUpOnPFCandidates'),
    verbose = cms.untracked.bool(False)
)


process.pfNoTau = cms.EDProducer("TPPFTausOnPFJets",
    bottomCollection = cms.InputTag("pfJets"),
    enable = cms.bool(True),
    topCollection = cms.InputTag("pfTaus"),
    name = cms.untracked.string('noTau'),
    verbose = cms.untracked.bool(False)
)


process.pfNoTauPFlow = cms.EDProducer("TPPFTausOnPFJets",
    bottomCollection = cms.InputTag("pfJetsPFlow"),
    enable = cms.bool(False),
    topCollection = cms.InputTag("pfTausPFlow"),
    name = cms.untracked.string('noTau'),
    verbose = cms.untracked.bool(False)
)


process.pfNoTauPFlowLoose = cms.EDProducer("TPPFTausOnPFJets",
    bottomCollection = cms.InputTag("pfJetsPFlowLoose"),
    enable = cms.bool(False),
    topCollection = cms.InputTag("pfTausPFlowLoose"),
    name = cms.untracked.string('noTau'),
    verbose = cms.untracked.bool(False)
)


process.pfPileUp = cms.EDProducer("PFPileUp",
    PFCandidates = cms.InputTag("particleFlow"),
    Enable = cms.bool(True),
    checkClosestZVertex = cms.bool(True),
    verbose = cms.untracked.bool(False),
    Vertices = cms.InputTag("offlinePrimaryVertices")
)


process.pfPileUpIso = cms.EDProducer("PFPileUp",
    checkClosestZVertex = cms.bool(True),
    Enable = cms.bool(True),
    PFCandidates = cms.InputTag("particleFlow"),
    verbose = cms.untracked.bool(False),
    Vertices = cms.InputTag("offlinePrimaryVertices")
)


process.pfPileUpIsoPFlow = cms.EDProducer("PFPileUp",
    PFCandidates = cms.InputTag("particleFlow"),
    Enable = cms.bool(True),
    checkClosestZVertex = cms.bool(True),
    verbose = cms.untracked.bool(False),
    Vertices = cms.InputTag("goodOfflinePrimaryVertices")
)


process.pfPileUpIsoPFlowLoose = cms.EDProducer("PFPileUp",
    PFCandidates = cms.InputTag("particleFlow"),
    Enable = cms.bool(True),
    checkClosestZVertex = cms.bool(True),
    verbose = cms.untracked.bool(False),
    Vertices = cms.InputTag("goodOfflinePrimaryVertices")
)


process.pfPileUpPFlow = cms.EDProducer("PFPileUp",
    checkClosestZVertex = cms.bool(False),
    Enable = cms.bool(True),
    PFCandidates = cms.InputTag("particleFlow"),
    verbose = cms.untracked.bool(False),
    Vertices = cms.InputTag("goodOfflinePrimaryVertices")
)


process.pfPileUpPFlowLoose = cms.EDProducer("PFPileUp",
    checkClosestZVertex = cms.bool(False),
    Enable = cms.bool(True),
    PFCandidates = cms.InputTag("particleFlow"),
    verbose = cms.untracked.bool(False),
    Vertices = cms.InputTag("goodOfflinePrimaryVertices")
)


process.pfRecoTauDiscriminationAgainstCaloMuon = cms.EDProducer("PFRecoTauDiscriminationAgainstCaloMuon",
    srcHcalRecHits = cms.InputTag("hbhereco"),
    minLeadTrackPt = cms.double(15.0),
    maxEnToTrackRatio = cms.double(0.25),
    srcVertex = cms.InputTag("offlinePrimaryVertices"),
    PFTauProducer = cms.InputTag("pfRecoTauProducer"),
    srcEcalRecHitsBarrel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    dRhcal = cms.double(25.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding")
        )
    ),
    maxEnEcal = cms.double(3.0),
    maxEnHcal = cms.double(8.0),
    dRecal = cms.double(15.0),
    srcEcalRecHitsEndcap = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    minLeadTrackPtFraction = cms.double(0.8)
)


process.pfRecoTauDiscriminationAgainstElectron = cms.EDProducer("PFRecoTauDiscriminationAgainstElectron",
    ApplyCut_ElectronPreID_2D = cms.bool(False),
    ApplyCut_EOverPLead = cms.bool(False),
    ElecPreID0_HOverPLead_minValue = cms.double(0.05),
    PFTauProducer = cms.InputTag("pfRecoTauProducer"),
    ApplyCut_ElectronPreID = cms.bool(False),
    ApplyCut_HcalTotOverPLead = cms.bool(False),
    EOverPLead_minValue = cms.double(0.8),
    ElecPreID1_EOverPLead_maxValue = cms.double(0.8),
    HcalMaxOverPLead_minValue = cms.double(0.1),
    ApplyCut_EmFraction = cms.bool(False),
    EmFraction_maxValue = cms.double(0.9),
    BremCombined_Mass = cms.double(0.55),
    ApplyCut_PFElectronMVA = cms.bool(True),
    PFElectronMVA_maxValue = cms.double(-0.1),
    ApplyCut_HcalMaxOverPLead = cms.bool(False),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding")
        )
    ),
    ApplyCut_BremCombined = cms.bool(False),
    Hcal3x3OverPLead_minValue = cms.double(0.1),
    ElecPreID1_HOverPLead_minValue = cms.double(0.15),
    ElecPreID0_EOverPLead_maxValue = cms.double(0.95),
    BremsRecoveryEOverPLead_minValue = cms.double(0.8),
    ApplyCut_EcalCrackCut = cms.bool(False),
    BremCombined_StripSize = cms.double(0.03),
    EOverPLead_maxValue = cms.double(1.8),
    HcalTotOverPLead_minValue = cms.double(0.1),
    ApplyCut_BremsRecoveryEOverPLead = cms.bool(False),
    ApplyCut_Hcal3x3OverPLead = cms.bool(False),
    BremCombined_HOP = cms.double(0.1),
    BremCombined_Fraction = cms.double(0.99),
    BremsRecoveryEOverPLead_maxValue = cms.double(1.8)
)


process.pfRecoTauDiscriminationAgainstElectronDeadECAL = cms.EDProducer("PFRecoTauDiscriminationAgainstElectronDeadECAL",
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding")
        )
    ),
    minStatus = cms.uint32(12),
    dR = cms.double(0.08),
    PFTauProducer = cms.InputTag("pfTauProducer")
)


process.pfRecoTauDiscriminationAgainstElectronMVA = cms.EDProducer("PFRecoTauDiscriminationAgainstElectronMVA",
    minMVA1prongStripsWgsfEC = cms.double(0.053),
    minMVA1prongEC = cms.double(0.06),
    minMVA1prongStripsWOgsfEC = cms.double(0.049),
    returnMVA = cms.bool(False),
    inputFileName1prongStripsWgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v2_1_1EC_BDT.weights.xml.gz'),
    inputFileName1prongEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v2_X_0EC_BDT.weights.xml.gz'),
    inputFileName1prongStripsWgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v2_1_1BL_BDT.weights.xml.gz'),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding")
        )
    ),
    PFTauProducer = cms.InputTag("pfRecoTauProducer"),
    inputFileName1prongStripsWOgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v2_0_1BL_BDT.weights.xml.gz'),
    inputFileName1prongStripsWOgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v2_0_1EC_BDT.weights.xml.gz'),
    minMVA1prongBL = cms.double(0.054),
    inputFileName1prongBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v2_X_0BL_BDT.weights.xml.gz'),
    method = cms.string('BDT'),
    minMVA1prongStripsWOgsfBL = cms.double(0.054),
    minMVA1prongStripsWgsfBL = cms.double(0.06)
)


process.pfRecoTauDiscriminationAgainstElectronMVA2 = cms.EDProducer("PFRecoTauDiscriminationAgainstElectronMVA2",
    minMVA1prongStripsWgsfWOpfEleMvaBL = cms.double(0.0),
    minMVA1prongEC = cms.double(0.0),
    inputFileName1prongNoEleMatchEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_NoEleMatch_Endcap_BDTG.weights.xml.gz'),
    minMVA1prongStripsWgsfWOpfEleMvaEC = cms.double(0.0),
    inputFileName1prongStripsWgsfWOpfEleMvaBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_wGwGSFwoPFMVA_Barrel_BDTG.weights.xml.gz'),
    minMVA1prongStripsWgsfWpfEleMvaEC = cms.double(0.0),
    minMVA1prongStripsWOgsfEC = cms.double(0.0),
    returnMVA = cms.bool(True),
    inputFileName1prongStripsWgsfWOpfEleMvaEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_wGwGSFwoPFMVA_Endcap_BDTG.weights.xml.gz'),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding")
        )
    ),
    PFTauProducer = cms.InputTag("pfTauProducer"),
    minMVA1prongBL = cms.double(0.0),
    inputFileName1prongStripsWgsfWpfEleMvaEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_wGwGSFwPFMVA_Endcap_BDTG.weights.xml.gz'),
    method = cms.string('BDT'),
    inputFileName1prongBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_woG_Barrel_BDTG.weights.xml.gz'),
    inputFileName1prongStripsWgsfWpfEleMvaBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_wGwGSFwPFMVA_Barrel_BDTG.weights.xml.gz'),
    minMVA1prongStripsWgsfWpfEleMvaBL = cms.double(0.0),
    inputFileName1prongNoEleMatchBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_NoEleMatch_Barrel_BDTG.weights.xml.gz'),
    inputFileName1prongStripsWOgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_wGwoGSF_Endcap_BDTG.weights.xml.gz'),
    minMVA1prongNoEleMatchBL = cms.double(0.0),
    minMVA1prongStripsWOgsfBL = cms.double(0.0),
    minMVA1prongNoEleMatchEC = cms.double(0.0),
    inputFileName1prongStripsWOgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_wGwoGSF_Barrel_BDTG.weights.xml.gz'),
    srcGsfElectrons = cms.InputTag("gsfElectrons"),
    inputFileName1prongEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_woG_Endcap_BDTG.weights.xml.gz')
)


process.pfRecoTauDiscriminationAgainstElectronMVA3 = cms.EDProducer("PFRecoTauDiscriminationAgainstElectronMVA3",
    inputFileName1prongNoEleMatchWOgWOgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_NoEleMatch_woGwoGSF_Endcap_BDTG.weights.xml.gz'),
    PFTauProducer = cms.InputTag("pfTauProducer"),
    minMVA1prongNoEleMatchWgWgsfEC = cms.double(0.0),
    inputFileName1prongWOgWgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_woGwGSF_Barrel_BDTG.weights.xml.gz'),
    minMVA1prongWOgWOgsfBL = cms.double(0.0),
    minMVA1prongNoEleMatchWOgWOgsfEC = cms.double(0.0),
    minMVA1prongNoEleMatchWgWOgsfBL = cms.double(0.0),
    inputFileName1prongWgWOgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_wGwoGSF_Barrel_BDTG.weights.xml.gz'),
    minMVA1prongWOgWgsfEC = cms.double(0.0),
    inputFileName1prongWgWOgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_wGwoGSF_Endcap_BDTG.weights.xml.gz'),
    inputFileName1prongNoEleMatchWOgWgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_NoEleMatch_woGwGSF_Barrel_BDTG.weights.xml.gz'),
    minMVA1prongWgWOgsfBL = cms.double(0.0),
    inputFileName1prongNoEleMatchWOgWgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_NoEleMatch_woGwGSF_Endcap_BDTG.weights.xml.gz'),
    minMVA1prongNoEleMatchWgWOgsfEC = cms.double(0.0),
    minMVA1prongNoEleMatchWOgWgsfBL = cms.double(0.0),
    minMVA1prongWgWOgsfEC = cms.double(0.0),
    minMVA1prongWgWgsfBL = cms.double(0.0),
    returnMVA = cms.bool(True),
    minMVA1prongWOgWOgsfEC = cms.double(0.0),
    inputFileName1prongWOgWOgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_woGwoGSF_Endcap_BDTG.weights.xml.gz'),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding")
        )
    ),
    inputFileName1prongWgWgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_wGwGSF_Endcap_BDTG.weights.xml.gz'),
    inputFileName1prongNoEleMatchWgWOgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_NoEleMatch_wGwoGSF_Barrel_BDTG.weights.xml.gz'),
    inputFileName1prongNoEleMatchWOgWOgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_NoEleMatch_woGwoGSF_Barrel_BDTG.weights.xml.gz'),
    inputFileName1prongNoEleMatchWgWOgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_NoEleMatch_wGwoGSF_Endcap_BDTG.weights.xml.gz'),
    minMVA1prongWOgWgsfBL = cms.double(0.0),
    minMVA1prongWgWgsfEC = cms.double(0.0),
    minMVA1prongNoEleMatchWOgWOgsfBL = cms.double(0.0),
    inputFileName1prongNoEleMatchWgWgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_NoEleMatch_wGwGSF_Barrel_BDTG.weights.xml.gz'),
    minMVA1prongNoEleMatchWgWgsfBL = cms.double(0.0),
    inputFileName1prongNoEleMatchWgWgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_NoEleMatch_wGwGSF_Endcap_BDTG.weights.xml.gz'),
    inputFileName1prongWOgWOgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_woGwoGSF_Barrel_BDTG.weights.xml.gz'),
    minMVA3prongNoMatch = cms.double(0.0),
    method = cms.string('BDTG'),
    minMVA1prongNoEleMatchWOgWgsfEC = cms.double(0.0),
    srcGsfElectrons = cms.InputTag("gsfElectrons"),
    minMVA3prongMatch = cms.double(0.0),
    inputFileName1prongWOgWgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_woGwGSF_Endcap_BDTG.weights.xml.gz'),
    inputFileName1prongWgWgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_wGwGSF_Barrel_BDTG.weights.xml.gz')
)


process.pfRecoTauDiscriminationAgainstMuon = cms.EDProducer("PFRecoTauDiscriminationAgainstMuon",
    a = cms.double(0.5),
    c = cms.double(0.0),
    b = cms.double(0.5),
    PFTauProducer = cms.InputTag("pfRecoTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding")
        )
    ),
    discriminatorOption = cms.string('noSegMatch'),
    HoPMin = cms.double(0.2),
    maxNumberOfMatches = cms.int32(0),
    checkNumMatches = cms.bool(False)
)


process.pfRecoTauDiscriminationAgainstMuon2 = cms.EDProducer("PFRecoTauDiscriminationAgainstMuon2",
    maxNumberOfHitsLast2Stations = cms.int32(0),
    PFTauProducer = cms.InputTag("pfRecoTauProducer"),
    verbosity = cms.int32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding")
        )
    ),
    discriminatorOption = cms.string('loose'),
    HoPMin = cms.double(0.2),
    maxNumberOfMatches = cms.int32(0),
    dRmuonMatch = cms.double(0.3),
    srcMuons = cms.InputTag("muons"),
    doCaloMuonVeto = cms.bool(False)
)


process.pfRecoTauDiscriminationByECALIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("pfRecoTauProducer"),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    applySumPtCut = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    applyRelativeSumPtCut = cms.bool(False)
)


process.pfRecoTauDiscriminationByECALIsolationUsingLeadingPion = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("pfRecoTauProducer"),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadPion = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    applySumPtCut = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    applyRelativeSumPtCut = cms.bool(False)
)


process.pfRecoTauDiscriminationByIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("pfRecoTauProducer"),
    maximumOccupancy = cms.uint32(0),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.38'),
    applyRhoCorrection = cms.bool(False),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    isoConeSizeForDeltaBeta = cms.double(0.5),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.pfRecoTauDiscriminationByIsolationUsingLeadingPion = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("pfRecoTauProducer"),
    maximumOccupancy = cms.uint32(0),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.38'),
    applyRhoCorrection = cms.bool(False),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    isoConeSizeForDeltaBeta = cms.double(0.5),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadPion = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.pfRecoTauDiscriminationByLeadingPionPtCut = cms.EDProducer("PFRecoTauDiscriminationByLeadingObjectPtCut",
    MinPtLeadingObject = cms.double(5.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    PFTauProducer = cms.InputTag("pfRecoTauProducer"),
    UseOnlyChargedHadrons = cms.bool(False)
)


process.pfRecoTauDiscriminationByLeadingTrackFinding = cms.EDProducer("PFRecoTauDiscriminationByLeadingObjectPtCut",
    MinPtLeadingObject = cms.double(0.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    PFTauProducer = cms.InputTag("pfRecoTauProducer"),
    UseOnlyChargedHadrons = cms.bool(True)
)


process.pfRecoTauDiscriminationByLeadingTrackPtCut = cms.EDProducer("PFRecoTauDiscriminationByLeadingObjectPtCut",
    MinPtLeadingObject = cms.double(5.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    PFTauProducer = cms.InputTag("pfRecoTauProducer"),
    UseOnlyChargedHadrons = cms.bool(True)
)


process.pfRecoTauDiscriminationByMVAIsolation = cms.EDProducer("PFRecoTauDiscriminationByMVAIsolation",
    mvaMin = cms.double(0.863),
    gbrfFilePath = cms.FileInPath('RecoTauTag/RecoTau/data/gbrfTauIso.root'),
    PFTauProducer = cms.InputTag("pfRecoTauProducer"),
    rhoProducer = cms.InputTag("kt6PFJetsForRhoComputationVoronoi","rho"),
    returnMVA = cms.bool(True),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding")
        )
    )
)


process.pfRecoTauDiscriminationByTrackIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(False),
    PFTauProducer = cms.InputTag("pfRecoTauProducer"),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    applySumPtCut = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    applyRelativeSumPtCut = cms.bool(False)
)


process.pfRecoTauDiscriminationByTrackIsolationUsingLeadingPion = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(False),
    PFTauProducer = cms.InputTag("pfRecoTauProducer"),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadPion = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    applySumPtCut = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    applyRelativeSumPtCut = cms.bool(False)
)


process.pfRecoTauTagInfoProducer = cms.EDProducer("PFRecoTauTagInfoProducer",
    tkminTrackerHitsn = cms.int32(3),
    PVProducer = cms.InputTag("offlinePrimaryVertices"),
    tkmaxChi2 = cms.double(100.0),
    ChargedHadrCand_AssociationCone = cms.double(0.8),
    ChargedHadrCand_tkminTrackerHitsn = cms.int32(3),
    ChargedHadrCand_tkmaxChi2 = cms.double(100.0),
    tkPVmaxDZ = cms.double(0.2),
    GammaCand_EcalclusMinEt = cms.double(0.5),
    tkminPixelHitsn = cms.int32(0),
    tkminPt = cms.double(0.5),
    PFCandidateProducer = cms.InputTag("particleFlow"),
    ChargedHadrCand_tkminPt = cms.double(0.5),
    ChargedHadrCand_tkmaxipt = cms.double(0.03),
    ChargedHadrCand_tkminPixelHitsn = cms.int32(0),
    UsePVconstraint = cms.bool(True),
    NeutrHadrCand_HcalclusMinEt = cms.double(1.0),
    PFJetTracksAssociatorProducer = cms.InputTag("ak5PFJetTracksAssociatorAtVertex"),
    smearedPVsigmaY = cms.double(0.0015),
    smearedPVsigmaX = cms.double(0.0015),
    smearedPVsigmaZ = cms.double(0.005),
    ChargedHadrCand_tkPVmaxDZ = cms.double(0.2),
    tkmaxipt = cms.double(0.03)
)


process.pfTauDecayMode = cms.EDProducer("PFRecoTauDecayModeDeterminator",
    mergeByBestMatch = cms.bool(True),
    refitTracks = cms.bool(False),
    maxPiZeroMass = cms.double(0.2),
    mergeLowPtPhotonsFirst = cms.bool(True),
    setMergedPi0Mass = cms.bool(True),
    setChargedPionMass = cms.bool(True),
    filterPhotons = cms.bool(True),
    minPtFractionSinglePhotons = cms.double(0.1),
    minPtFractionPiZeroes = cms.double(0.15),
    maxNbrOfIterations = cms.int32(10),
    filterTwoProngs = cms.bool(True),
    minPtFractionForSecondProng = cms.double(0.1),
    maxDistance = cms.double(0.01),
    setPi0Mass = cms.bool(True),
    maxPhotonsToMerge = cms.uint32(2),
    PFTauProducer = cms.InputTag("pfRecoTauProducer")
)


process.pfTauDecayModeHighEfficiency = cms.EDProducer("PFRecoTauDecayModeDeterminator",
    mergeByBestMatch = cms.bool(True),
    refitTracks = cms.bool(False),
    maxPiZeroMass = cms.double(0.2),
    mergeLowPtPhotonsFirst = cms.bool(True),
    setMergedPi0Mass = cms.bool(True),
    setChargedPionMass = cms.bool(True),
    filterPhotons = cms.bool(True),
    minPtFractionSinglePhotons = cms.double(0.1),
    minPtFractionPiZeroes = cms.double(0.15),
    maxNbrOfIterations = cms.int32(10),
    filterTwoProngs = cms.bool(True),
    minPtFractionForSecondProng = cms.double(0.1),
    maxDistance = cms.double(0.01),
    setPi0Mass = cms.bool(True),
    maxPhotonsToMerge = cms.uint32(2),
    PFTauProducer = cms.InputTag("pfRecoTauProducerHighEfficiency")
)


process.pfTauDecayModeIndexProducer = cms.EDProducer("PFRecoTauDecayModeIndexProducer",
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    PFTauProducer = cms.InputTag("pfRecoTauProducer"),
    PFTauDecayModeProducer = cms.InputTag("pfRecoTauDecayModeProducer")
)


process.pfTauDecayModeInsideOut = cms.EDProducer("PFRecoTauDecayModeDeterminator",
    mergeByBestMatch = cms.bool(True),
    refitTracks = cms.bool(False),
    maxPiZeroMass = cms.double(0.2),
    mergeLowPtPhotonsFirst = cms.bool(True),
    setMergedPi0Mass = cms.bool(True),
    setChargedPionMass = cms.bool(True),
    filterPhotons = cms.bool(True),
    minPtFractionSinglePhotons = cms.double(0.1),
    minPtFractionPiZeroes = cms.double(0.15),
    maxNbrOfIterations = cms.int32(10),
    filterTwoProngs = cms.bool(True),
    minPtFractionForSecondProng = cms.double(0.1),
    maxDistance = cms.double(0.01),
    setPi0Mass = cms.bool(True),
    maxPhotonsToMerge = cms.uint32(2),
    PFTauProducer = cms.InputTag("pfRecoTauProducerInsideOut")
)


process.pfTauPFJets08Region = cms.EDProducer("RecoTauJetRegionProducer",
    src = cms.InputTag("pfJets"),
    deltaR = cms.double(0.8),
    pfSrc = cms.InputTag("pfNoElectron")
)


process.pfTauPFJets08RegionPFlow = cms.EDProducer("RecoTauJetRegionProducer",
    src = cms.InputTag("pfJetsPFlow"),
    deltaR = cms.double(0.8),
    pfSrc = cms.InputTag("pfNoElectronPFlow")
)


process.pfTauPFJets08RegionPFlowLoose = cms.EDProducer("RecoTauJetRegionProducer",
    src = cms.InputTag("pfJetsPFlowLoose"),
    deltaR = cms.double(0.8),
    pfSrc = cms.InputTag("pfNoElectronPFlowLoose")
)


process.pfTauTagInfoProducer = cms.EDProducer("PFRecoTauTagInfoProducer",
    tkminTrackerHitsn = cms.int32(3),
    tkminPt = cms.double(0.5),
    tkmaxChi2 = cms.double(100.0),
    ChargedHadrCand_AssociationCone = cms.double(0.8),
    ChargedHadrCand_tkminTrackerHitsn = cms.int32(3),
    ChargedHadrCand_tkmaxChi2 = cms.double(100.0),
    tkPVmaxDZ = cms.double(0.2),
    GammaCand_EcalclusMinEt = cms.double(0.5),
    tkminPixelHitsn = cms.int32(0),
    PVProducer = cms.InputTag("offlinePrimaryVertices"),
    PFCandidateProducer = cms.InputTag("pfNoElectron"),
    ChargedHadrCand_tkminPt = cms.double(0.5),
    ChargedHadrCand_tkmaxipt = cms.double(0.03),
    ChargedHadrCand_tkminPixelHitsn = cms.int32(0),
    UsePVconstraint = cms.bool(True),
    NeutrHadrCand_HcalclusMinEt = cms.double(1.0),
    PFJetTracksAssociatorProducer = cms.InputTag("pfJetTracksAssociatorAtVertex"),
    smearedPVsigmaY = cms.double(0.0015),
    smearedPVsigmaX = cms.double(0.0015),
    smearedPVsigmaZ = cms.double(0.005),
    ChargedHadrCand_tkPVmaxDZ = cms.double(0.2),
    tkmaxipt = cms.double(0.03)
)


process.pfTauTagInfoProducerPFlow = cms.EDProducer("PFRecoTauTagInfoProducer",
    tkminTrackerHitsn = cms.int32(3),
    PVProducer = cms.InputTag("offlinePrimaryVertices"),
    tkmaxChi2 = cms.double(100.0),
    ChargedHadrCand_AssociationCone = cms.double(0.8),
    ChargedHadrCand_tkminTrackerHitsn = cms.int32(3),
    ChargedHadrCand_tkmaxChi2 = cms.double(100.0),
    tkPVmaxDZ = cms.double(0.2),
    GammaCand_EcalclusMinEt = cms.double(0.5),
    tkminPixelHitsn = cms.int32(0),
    tkminPt = cms.double(0.5),
    PFCandidateProducer = cms.InputTag("pfNoElectronPFlow"),
    ChargedHadrCand_tkminPt = cms.double(0.5),
    ChargedHadrCand_tkmaxipt = cms.double(0.03),
    ChargedHadrCand_tkminPixelHitsn = cms.int32(0),
    UsePVconstraint = cms.bool(True),
    NeutrHadrCand_HcalclusMinEt = cms.double(1.0),
    PFJetTracksAssociatorProducer = cms.InputTag("pfJetTracksAssociatorAtVertexPFlow"),
    smearedPVsigmaY = cms.double(0.0015),
    smearedPVsigmaX = cms.double(0.0015),
    smearedPVsigmaZ = cms.double(0.005),
    ChargedHadrCand_tkPVmaxDZ = cms.double(0.2),
    tkmaxipt = cms.double(0.03)
)


process.pfTauTagInfoProducerPFlowLoose = cms.EDProducer("PFRecoTauTagInfoProducer",
    tkminTrackerHitsn = cms.int32(3),
    PVProducer = cms.InputTag("offlinePrimaryVertices"),
    tkmaxChi2 = cms.double(100.0),
    ChargedHadrCand_AssociationCone = cms.double(0.8),
    ChargedHadrCand_tkminTrackerHitsn = cms.int32(3),
    ChargedHadrCand_tkmaxChi2 = cms.double(100.0),
    tkPVmaxDZ = cms.double(0.2),
    GammaCand_EcalclusMinEt = cms.double(0.5),
    tkminPixelHitsn = cms.int32(0),
    tkminPt = cms.double(0.5),
    PFCandidateProducer = cms.InputTag("pfNoElectronPFlowLoose"),
    ChargedHadrCand_tkminPt = cms.double(0.5),
    ChargedHadrCand_tkmaxipt = cms.double(0.03),
    ChargedHadrCand_tkminPixelHitsn = cms.int32(0),
    UsePVconstraint = cms.bool(True),
    NeutrHadrCand_HcalclusMinEt = cms.double(1.0),
    PFJetTracksAssociatorProducer = cms.InputTag("pfJetTracksAssociatorAtVertexPFlowLoose"),
    smearedPVsigmaY = cms.double(0.0015),
    smearedPVsigmaX = cms.double(0.0015),
    smearedPVsigmaZ = cms.double(0.005),
    ChargedHadrCand_tkPVmaxDZ = cms.double(0.2),
    tkmaxipt = cms.double(0.03)
)


process.pfTausBaseDiscriminationByDecayModeFindingPFlow = cms.EDProducer("PFRecoTauDiscriminationByHPSSelection",
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlow"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    minTauPt = cms.double(0.0),
    coneSizeFormula = cms.string('max(min(0.1, 2.8/pt()),0.05)'),
    matchingCone = cms.double(0.1),
    decayModes = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        minMass = cms.double(-1000.0),
        maxMass = cms.string('1.'),
        nCharged = cms.uint32(1)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            assumeStripMass = cms.double(0.1349),
            minMass = cms.double(0.3),
            maxMass = cms.string('max(1.3, min(1.3*sqrt(pt/200.), 2.1))'),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            minPi0Mass = cms.double(0.05),
            maxMass = cms.string('max(1.2, min(1.2*sqrt(pt/200.), 2.0))'),
            maxPi0Mass = cms.double(0.2),
            nPiZeros = cms.uint32(2),
            minMass = cms.double(0.4),
            nCharged = cms.uint32(1),
            assumeStripMass = cms.double(0.0)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            minMass = cms.double(0.8),
            maxMass = cms.string('1.5'),
            nCharged = cms.uint32(3)
        ))
)


process.pfTausBaseDiscriminationByDecayModeFindingPFlowLoose = cms.EDProducer("PFRecoTauDiscriminationByHPSSelection",
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlowLoose"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    minTauPt = cms.double(0.0),
    coneSizeFormula = cms.string('max(min(0.1, 2.8/pt()),0.05)'),
    matchingCone = cms.double(0.1),
    decayModes = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        minMass = cms.double(-1000.0),
        maxMass = cms.string('1.'),
        nCharged = cms.uint32(1)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            assumeStripMass = cms.double(0.1349),
            minMass = cms.double(0.3),
            maxMass = cms.string('max(1.3, min(1.3*sqrt(pt/200.), 2.1))'),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            minPi0Mass = cms.double(0.05),
            maxMass = cms.string('max(1.2, min(1.2*sqrt(pt/200.), 2.0))'),
            maxPi0Mass = cms.double(0.2),
            nPiZeros = cms.uint32(2),
            minMass = cms.double(0.4),
            nCharged = cms.uint32(1),
            assumeStripMass = cms.double(0.0)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            minMass = cms.double(0.8),
            maxMass = cms.string('1.5'),
            nCharged = cms.uint32(3)
        ))
)


process.pfTausBaseDiscriminationByLooseCombinedIsolationDBSumPtCorrPFlow = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlow"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    applyDeltaBetaCorrection = cms.bool(True),
    deltaBetaFactor = cms.string('0.4576'),
    applyRhoCorrection = cms.bool(False),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    maximumSumPtCut = cms.double(2.0),
    relativeSumPtCut = cms.double(0.0),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("pfTausBaseDiscriminationByDecayModeFindingPFlow")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    maximumOccupancy = cms.uint32(0),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.pfTausBaseDiscriminationByLooseCombinedIsolationDBSumPtCorrPFlowLoose = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsPFTauProducerPFlowLoose"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    applyDeltaBetaCorrection = cms.bool(True),
    deltaBetaFactor = cms.string('0.4576'),
    applyRhoCorrection = cms.bool(False),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    maximumSumPtCut = cms.double(2.0),
    relativeSumPtCut = cms.double(0.0),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("pfTausBaseDiscriminationByDecayModeFindingPFlowLoose")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    maximumOccupancy = cms.uint32(0),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.pfTausBasePFlow = cms.EDProducer("RecoTauProducer",
    piZeroSrc = cms.InputTag("pfJetsLegacyHPSPiZerosPFlow"),
    modifiers = cms.VPSet(cms.PSet(
        plugin = cms.string('RecoTauImpactParameterSignificancePlugin'),
        name = cms.string('sipt'),
        qualityCuts = cms.PSet(
            isolationQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(8),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(1.0),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(1.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            ),
            pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
            primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
            signalQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(3),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(0.5),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(0.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            )
        )
    ), 
        cms.PSet(
            ElectronPreIDProducer = cms.InputTag("elecpreid"),
            name = cms.string('elec_rej'),
            plugin = cms.string('RecoTauElectronRejectionPlugin'),
            DataType = cms.string('AOD'),
            maximumForElectrionPreIDOutput = cms.double(-0.1),
            EcalStripSumE_deltaPhiOverQ_minValue = cms.double(-0.1),
            EcalStripSumE_deltaPhiOverQ_maxValue = cms.double(0.5),
            EcalStripSumE_minClusEnergy = cms.double(0.1),
            ElecPreIDLeadTkMatch_maxDR = cms.double(0.01),
            EcalStripSumE_deltaEta = cms.double(0.03)
        ), 
        cms.PSet(
            dRcone = cms.double(0.12),
            name = cms.string('tau_en_recovery'),
            plugin = cms.string('RecoTauEnergyRecoveryPlugin2')
        ), 
        cms.PSet(
            pfTauTagInfoSrc = cms.InputTag("pfTauTagInfoProducerPFlow"),
            name = cms.string('pfTauTTIworkaroundPFlow'),
            plugin = cms.string('RecoTauTagInfoWorkaroundModifer')
        )),
    jetRegionSrc = cms.InputTag("pfTauPFJets08RegionPFlow"),
    jetSrc = cms.InputTag("pfJetsPFlow"),
    builders = cms.VPSet(cms.PSet(
        usePFLeptons = cms.bool(True),
        name = cms.string('combinatoric'),
        plugin = cms.string('RecoTauBuilderCombinatoricPlugin'),
        qualityCuts = cms.PSet(
            isolationQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(8),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(1.0),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(1.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            ),
            pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
            primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
            signalQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(3),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(0.5),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(0.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            )
        ),
        decayModes = cms.VPSet(cms.PSet(
            nPiZeros = cms.uint32(0),
            nCharged = cms.uint32(1),
            maxPiZeros = cms.uint32(0),
            maxTracks = cms.uint32(6)
        ), 
            cms.PSet(
                nPiZeros = cms.uint32(1),
                nCharged = cms.uint32(1),
                maxPiZeros = cms.uint32(6),
                maxTracks = cms.uint32(6)
            ), 
            cms.PSet(
                nPiZeros = cms.uint32(2),
                nCharged = cms.uint32(1),
                maxPiZeros = cms.uint32(5),
                maxTracks = cms.uint32(6)
            ), 
            cms.PSet(
                nPiZeros = cms.uint32(0),
                nCharged = cms.uint32(3),
                maxPiZeros = cms.uint32(0),
                maxTracks = cms.uint32(6)
            )),
        isolationConeSize = cms.double(0.5),
        pfCandSrc = cms.InputTag("pfNoElectronPFlow")
    )),
    buildNullTaus = cms.bool(True)
)


process.pfTausBasePFlowLoose = cms.EDProducer("RecoTauProducer",
    piZeroSrc = cms.InputTag("pfJetsLegacyHPSPiZerosPFlowLoose"),
    modifiers = cms.VPSet(cms.PSet(
        plugin = cms.string('RecoTauImpactParameterSignificancePlugin'),
        name = cms.string('sipt'),
        qualityCuts = cms.PSet(
            isolationQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(8),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(1.0),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(1.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            ),
            pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
            primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
            signalQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(3),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(0.5),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(0.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            )
        )
    ), 
        cms.PSet(
            ElectronPreIDProducer = cms.InputTag("elecpreid"),
            name = cms.string('elec_rej'),
            plugin = cms.string('RecoTauElectronRejectionPlugin'),
            DataType = cms.string('AOD'),
            maximumForElectrionPreIDOutput = cms.double(-0.1),
            EcalStripSumE_deltaPhiOverQ_minValue = cms.double(-0.1),
            EcalStripSumE_deltaPhiOverQ_maxValue = cms.double(0.5),
            EcalStripSumE_minClusEnergy = cms.double(0.1),
            ElecPreIDLeadTkMatch_maxDR = cms.double(0.01),
            EcalStripSumE_deltaEta = cms.double(0.03)
        ), 
        cms.PSet(
            dRcone = cms.double(0.12),
            name = cms.string('tau_en_recovery'),
            plugin = cms.string('RecoTauEnergyRecoveryPlugin2')
        ), 
        cms.PSet(
            pfTauTagInfoSrc = cms.InputTag("pfTauTagInfoProducerPFlowLoose"),
            name = cms.string('pfTauTTIworkaroundPFlowLoose'),
            plugin = cms.string('RecoTauTagInfoWorkaroundModifer')
        )),
    jetRegionSrc = cms.InputTag("pfTauPFJets08RegionPFlowLoose"),
    jetSrc = cms.InputTag("pfJetsPFlowLoose"),
    builders = cms.VPSet(cms.PSet(
        usePFLeptons = cms.bool(True),
        name = cms.string('combinatoric'),
        plugin = cms.string('RecoTauBuilderCombinatoricPlugin'),
        qualityCuts = cms.PSet(
            isolationQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(8),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(1.0),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(1.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            ),
            pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
            primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
            signalQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(3),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(0.5),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(0.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            )
        ),
        decayModes = cms.VPSet(cms.PSet(
            nPiZeros = cms.uint32(0),
            nCharged = cms.uint32(1),
            maxPiZeros = cms.uint32(0),
            maxTracks = cms.uint32(6)
        ), 
            cms.PSet(
                nPiZeros = cms.uint32(1),
                nCharged = cms.uint32(1),
                maxPiZeros = cms.uint32(6),
                maxTracks = cms.uint32(6)
            ), 
            cms.PSet(
                nPiZeros = cms.uint32(2),
                nCharged = cms.uint32(1),
                maxPiZeros = cms.uint32(5),
                maxTracks = cms.uint32(6)
            ), 
            cms.PSet(
                nPiZeros = cms.uint32(0),
                nCharged = cms.uint32(3),
                maxPiZeros = cms.uint32(0),
                maxTracks = cms.uint32(6)
            )),
        isolationConeSize = cms.double(0.5),
        pfCandSrc = cms.InputTag("pfNoElectronPFlowLoose")
    )),
    buildNullTaus = cms.bool(True)
)


process.pfTausDiscriminationByIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("pfTausProducer"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    applyDeltaBetaCorrection = cms.bool(False),
    deltaBetaFactor = cms.string('0.38'),
    applyRhoCorrection = cms.bool(False),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    isoConeSizeForDeltaBeta = cms.double(0.5),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("pfTausDiscriminationByLeadingTrackFinding")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.pfTausDiscriminationByIsolationPFlow = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("pfTausProducerPFlow"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.38'),
    applyRhoCorrection = cms.bool(False),
    isoConeSizeForDeltaBeta = cms.double(0.5),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("pfTausDiscriminationByLeadingTrackFindingPFlow")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.pfTausDiscriminationByIsolationPFlowLoose = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("pfTausProducerPFlowLoose"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.38'),
    applyRhoCorrection = cms.bool(False),
    isoConeSizeForDeltaBeta = cms.double(0.5),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("pfTausDiscriminationByLeadingTrackFindingPFlowLoose")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.pfTausDiscriminationByLeadingPionPtCut = cms.EDProducer("PFRecoTauDiscriminationByLeadingObjectPtCut",
    MinPtLeadingObject = cms.double(5.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    UseOnlyChargedHadrons = cms.bool(False),
    PFTauProducer = cms.InputTag("pfTausProducer")
)


process.pfTausDiscriminationByLeadingPionPtCutPFlow = cms.EDProducer("PFRecoTauDiscriminationByLeadingObjectPtCut",
    MinPtLeadingObject = cms.double(5.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    PFTauProducer = cms.InputTag("pfTausProducerPFlow"),
    UseOnlyChargedHadrons = cms.bool(False)
)


process.pfTausDiscriminationByLeadingPionPtCutPFlowLoose = cms.EDProducer("PFRecoTauDiscriminationByLeadingObjectPtCut",
    MinPtLeadingObject = cms.double(5.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    PFTauProducer = cms.InputTag("pfTausProducerPFlowLoose"),
    UseOnlyChargedHadrons = cms.bool(False)
)


process.pfTausDiscriminationByLeadingTrackFinding = cms.EDProducer("PFRecoTauDiscriminationByLeadingObjectPtCut",
    MinPtLeadingObject = cms.double(0.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    UseOnlyChargedHadrons = cms.bool(True),
    PFTauProducer = cms.InputTag("pfTausProducer")
)


process.pfTausDiscriminationByLeadingTrackFindingPFlow = cms.EDProducer("PFRecoTauDiscriminationByLeadingObjectPtCut",
    MinPtLeadingObject = cms.double(0.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    PFTauProducer = cms.InputTag("pfTausProducerPFlow"),
    UseOnlyChargedHadrons = cms.bool(True)
)


process.pfTausDiscriminationByLeadingTrackFindingPFlowLoose = cms.EDProducer("PFRecoTauDiscriminationByLeadingObjectPtCut",
    MinPtLeadingObject = cms.double(0.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    PFTauProducer = cms.InputTag("pfTausProducerPFlowLoose"),
    UseOnlyChargedHadrons = cms.bool(True)
)


process.pfTausProducer = cms.EDProducer("RecoTauPiZeroUnembedder",
    src = cms.InputTag("pfTausProducerSansRefs"),
    piZeroSrc = cms.InputTag("pfJetsLegacyTaNCPiZeros"),
    modifiers = cms.VPSet(cms.PSet(
        ElectronPreIDProducer = cms.InputTag("elecpreid"),
        name = cms.string('shrinkingConeElectronRej'),
        plugin = cms.string('RecoTauElectronRejectionPlugin'),
        DataType = cms.string('AOD'),
        maximumForElectrionPreIDOutput = cms.double(-0.1),
        EcalStripSumE_deltaPhiOverQ_minValue = cms.double(-0.1),
        EcalStripSumE_deltaPhiOverQ_maxValue = cms.double(0.5),
        EcalStripSumE_minClusEnergy = cms.double(0.1),
        ElecPreIDLeadTkMatch_maxDR = cms.double(0.01),
        EcalStripSumE_deltaEta = cms.double(0.03)
    ), 
        cms.PSet(
            pfTauTagInfoSrc = cms.InputTag("pfTauTagInfoProducer"),
            name = cms.string('pfTauTTIworkaround'),
            plugin = cms.string('RecoTauTagInfoWorkaroundModifer')
        )),
    builders = cms.VPSet(cms.PSet(
        usePFLeptons = cms.bool(True),
        signalConeNeutralHadrons = cms.string('0.15'),
        name = cms.string('shrinkingCone'),
        plugin = cms.string('RecoTauBuilderConePlugin'),
        isoConeChargedHadrons = cms.string('0.5'),
        isoConePiZeros = cms.string('0.5'),
        isoConeNeutralHadrons = cms.string('0.5'),
        matchingCone = cms.string('0.1'),
        signalConeChargedHadrons = cms.string('min(max(5.0/et(), 0.07), 0.15)'),
        leadObjectPt = cms.double(5.0),
        qualityCuts = cms.PSet(
            isolationQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(8),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(1.0),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(1.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            ),
            pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
            primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
            signalQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(3),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(0.5),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(0.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            )
        ),
        signalConePiZeros = cms.string('0.15'),
        pfCandSrc = cms.InputTag("pfNoElectron")
    )),
    jetSrc = cms.InputTag("pfJets"),
    jetRegionSrc = cms.InputTag("pfTauPFJets08Region")
)


process.pfTausProducerPFlow = cms.EDProducer("RecoTauPiZeroUnembedder",
    src = cms.InputTag("pfTausProducerSansRefsPFlow"),
    piZeroSrc = cms.InputTag("pfJetsLegacyTaNCPiZerosPFlow"),
    modifiers = cms.VPSet(cms.PSet(
        ElectronPreIDProducer = cms.InputTag("elecpreid"),
        name = cms.string('shrinkingConeElectronRej'),
        plugin = cms.string('RecoTauElectronRejectionPlugin'),
        DataType = cms.string('AOD'),
        maximumForElectrionPreIDOutput = cms.double(-0.1),
        EcalStripSumE_deltaPhiOverQ_minValue = cms.double(-0.1),
        EcalStripSumE_deltaPhiOverQ_maxValue = cms.double(0.5),
        EcalStripSumE_minClusEnergy = cms.double(0.1),
        ElecPreIDLeadTkMatch_maxDR = cms.double(0.01),
        EcalStripSumE_deltaEta = cms.double(0.03)
    ), 
        cms.PSet(
            pfTauTagInfoSrc = cms.InputTag("pfTauTagInfoProducerPFlow"),
            name = cms.string('pfTauTTIworkaround'),
            plugin = cms.string('RecoTauTagInfoWorkaroundModifer')
        )),
    jetRegionSrc = cms.InputTag("pfTauPFJets08RegionPFlow"),
    jetSrc = cms.InputTag("pfJetsPFlow"),
    builders = cms.VPSet(cms.PSet(
        usePFLeptons = cms.bool(True),
        signalConeNeutralHadrons = cms.string('0.15'),
        name = cms.string('shrinkingCone'),
        plugin = cms.string('RecoTauBuilderConePlugin'),
        isoConeChargedHadrons = cms.string('0.5'),
        isoConePiZeros = cms.string('0.5'),
        isoConeNeutralHadrons = cms.string('0.5'),
        matchingCone = cms.string('0.1'),
        signalConeChargedHadrons = cms.string('min(max(5.0/et(), 0.07), 0.15)'),
        leadObjectPt = cms.double(5.0),
        qualityCuts = cms.PSet(
            isolationQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(8),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(1.0),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(1.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            ),
            pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
            primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
            signalQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(3),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(0.5),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(0.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            )
        ),
        signalConePiZeros = cms.string('0.15'),
        pfCandSrc = cms.InputTag("pfNoElectronPFlow")
    ))
)


process.pfTausProducerPFlowLoose = cms.EDProducer("RecoTauPiZeroUnembedder",
    src = cms.InputTag("pfTausProducerSansRefsPFlowLoose"),
    piZeroSrc = cms.InputTag("pfJetsLegacyTaNCPiZerosPFlowLoose"),
    modifiers = cms.VPSet(cms.PSet(
        ElectronPreIDProducer = cms.InputTag("elecpreid"),
        name = cms.string('shrinkingConeElectronRej'),
        plugin = cms.string('RecoTauElectronRejectionPlugin'),
        DataType = cms.string('AOD'),
        maximumForElectrionPreIDOutput = cms.double(-0.1),
        EcalStripSumE_deltaPhiOverQ_minValue = cms.double(-0.1),
        EcalStripSumE_deltaPhiOverQ_maxValue = cms.double(0.5),
        EcalStripSumE_minClusEnergy = cms.double(0.1),
        ElecPreIDLeadTkMatch_maxDR = cms.double(0.01),
        EcalStripSumE_deltaEta = cms.double(0.03)
    ), 
        cms.PSet(
            pfTauTagInfoSrc = cms.InputTag("pfTauTagInfoProducerPFlowLoose"),
            name = cms.string('pfTauTTIworkaround'),
            plugin = cms.string('RecoTauTagInfoWorkaroundModifer')
        )),
    jetRegionSrc = cms.InputTag("pfTauPFJets08RegionPFlowLoose"),
    jetSrc = cms.InputTag("pfJetsPFlowLoose"),
    builders = cms.VPSet(cms.PSet(
        usePFLeptons = cms.bool(True),
        signalConeNeutralHadrons = cms.string('0.15'),
        name = cms.string('shrinkingCone'),
        plugin = cms.string('RecoTauBuilderConePlugin'),
        isoConeChargedHadrons = cms.string('0.5'),
        isoConePiZeros = cms.string('0.5'),
        isoConeNeutralHadrons = cms.string('0.5'),
        matchingCone = cms.string('0.1'),
        signalConeChargedHadrons = cms.string('min(max(5.0/et(), 0.07), 0.15)'),
        leadObjectPt = cms.double(5.0),
        qualityCuts = cms.PSet(
            isolationQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(8),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(1.0),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(1.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            ),
            pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
            primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
            signalQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(3),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(0.5),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(0.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            )
        ),
        signalConePiZeros = cms.string('0.15'),
        pfCandSrc = cms.InputTag("pfNoElectronPFlowLoose")
    ))
)


process.pfTausProducerSansRefs = cms.EDProducer("RecoTauProducer",
    piZeroSrc = cms.InputTag("pfJetsLegacyTaNCPiZeros"),
    modifiers = cms.VPSet(cms.PSet(
        ElectronPreIDProducer = cms.InputTag("elecpreid"),
        name = cms.string('shrinkingConeElectronRej'),
        plugin = cms.string('RecoTauElectronRejectionPlugin'),
        DataType = cms.string('AOD'),
        maximumForElectrionPreIDOutput = cms.double(-0.1),
        EcalStripSumE_deltaPhiOverQ_minValue = cms.double(-0.1),
        EcalStripSumE_deltaPhiOverQ_maxValue = cms.double(0.5),
        EcalStripSumE_minClusEnergy = cms.double(0.1),
        ElecPreIDLeadTkMatch_maxDR = cms.double(0.01),
        EcalStripSumE_deltaEta = cms.double(0.03)
    ), 
        cms.PSet(
            pfTauTagInfoSrc = cms.InputTag("pfTauTagInfoProducer"),
            name = cms.string('pfTauTTIworkaround'),
            plugin = cms.string('RecoTauTagInfoWorkaroundModifer')
        )),
    jetRegionSrc = cms.InputTag("pfTauPFJets08Region"),
    jetSrc = cms.InputTag("pfJets"),
    builders = cms.VPSet(cms.PSet(
        usePFLeptons = cms.bool(True),
        signalConeNeutralHadrons = cms.string('0.15'),
        name = cms.string('shrinkingCone'),
        plugin = cms.string('RecoTauBuilderConePlugin'),
        isoConeChargedHadrons = cms.string('0.5'),
        isoConePiZeros = cms.string('0.5'),
        isoConeNeutralHadrons = cms.string('0.5'),
        matchingCone = cms.string('0.1'),
        signalConeChargedHadrons = cms.string('min(max(5.0/et(), 0.07), 0.15)'),
        leadObjectPt = cms.double(5.0),
        qualityCuts = cms.PSet(
            isolationQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(8),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(1.0),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(1.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            ),
            pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
            primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
            signalQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(3),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(0.5),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(0.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            )
        ),
        signalConePiZeros = cms.string('0.15'),
        pfCandSrc = cms.InputTag("pfNoElectron")
    )),
    buildNullTaus = cms.bool(True)
)


process.pfTausProducerSansRefsPFlow = cms.EDProducer("RecoTauProducer",
    piZeroSrc = cms.InputTag("pfJetsLegacyTaNCPiZerosPFlow"),
    modifiers = cms.VPSet(cms.PSet(
        ElectronPreIDProducer = cms.InputTag("elecpreid"),
        name = cms.string('shrinkingConeElectronRej'),
        plugin = cms.string('RecoTauElectronRejectionPlugin'),
        DataType = cms.string('AOD'),
        maximumForElectrionPreIDOutput = cms.double(-0.1),
        EcalStripSumE_deltaPhiOverQ_minValue = cms.double(-0.1),
        EcalStripSumE_deltaPhiOverQ_maxValue = cms.double(0.5),
        EcalStripSumE_minClusEnergy = cms.double(0.1),
        ElecPreIDLeadTkMatch_maxDR = cms.double(0.01),
        EcalStripSumE_deltaEta = cms.double(0.03)
    ), 
        cms.PSet(
            pfTauTagInfoSrc = cms.InputTag("pfTauTagInfoProducerPFlow"),
            name = cms.string('pfTauTTIworkaround'),
            plugin = cms.string('RecoTauTagInfoWorkaroundModifer')
        )),
    jetRegionSrc = cms.InputTag("pfTauPFJets08RegionPFlow"),
    jetSrc = cms.InputTag("pfJetsPFlow"),
    builders = cms.VPSet(cms.PSet(
        usePFLeptons = cms.bool(True),
        signalConeNeutralHadrons = cms.string('0.15'),
        name = cms.string('shrinkingCone'),
        plugin = cms.string('RecoTauBuilderConePlugin'),
        isoConeChargedHadrons = cms.string('0.5'),
        isoConePiZeros = cms.string('0.5'),
        isoConeNeutralHadrons = cms.string('0.5'),
        matchingCone = cms.string('0.1'),
        signalConeChargedHadrons = cms.string('min(max(5.0/et(), 0.07), 0.15)'),
        leadObjectPt = cms.double(5.0),
        qualityCuts = cms.PSet(
            isolationQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(8),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(1.0),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(1.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            ),
            pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
            primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
            signalQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(3),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(0.5),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(0.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            )
        ),
        signalConePiZeros = cms.string('0.15'),
        pfCandSrc = cms.InputTag("pfNoElectronPFlow")
    )),
    buildNullTaus = cms.bool(True)
)


process.pfTausProducerSansRefsPFlowLoose = cms.EDProducer("RecoTauProducer",
    piZeroSrc = cms.InputTag("pfJetsLegacyTaNCPiZerosPFlowLoose"),
    modifiers = cms.VPSet(cms.PSet(
        ElectronPreIDProducer = cms.InputTag("elecpreid"),
        name = cms.string('shrinkingConeElectronRej'),
        plugin = cms.string('RecoTauElectronRejectionPlugin'),
        DataType = cms.string('AOD'),
        maximumForElectrionPreIDOutput = cms.double(-0.1),
        EcalStripSumE_deltaPhiOverQ_minValue = cms.double(-0.1),
        EcalStripSumE_deltaPhiOverQ_maxValue = cms.double(0.5),
        EcalStripSumE_minClusEnergy = cms.double(0.1),
        ElecPreIDLeadTkMatch_maxDR = cms.double(0.01),
        EcalStripSumE_deltaEta = cms.double(0.03)
    ), 
        cms.PSet(
            pfTauTagInfoSrc = cms.InputTag("pfTauTagInfoProducerPFlowLoose"),
            name = cms.string('pfTauTTIworkaround'),
            plugin = cms.string('RecoTauTagInfoWorkaroundModifer')
        )),
    jetRegionSrc = cms.InputTag("pfTauPFJets08RegionPFlowLoose"),
    jetSrc = cms.InputTag("pfJetsPFlowLoose"),
    builders = cms.VPSet(cms.PSet(
        usePFLeptons = cms.bool(True),
        signalConeNeutralHadrons = cms.string('0.15'),
        name = cms.string('shrinkingCone'),
        plugin = cms.string('RecoTauBuilderConePlugin'),
        isoConeChargedHadrons = cms.string('0.5'),
        isoConePiZeros = cms.string('0.5'),
        isoConeNeutralHadrons = cms.string('0.5'),
        matchingCone = cms.string('0.1'),
        signalConeChargedHadrons = cms.string('min(max(5.0/et(), 0.07), 0.15)'),
        leadObjectPt = cms.double(5.0),
        qualityCuts = cms.PSet(
            isolationQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(8),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(1.0),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(1.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            ),
            pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
            primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
            signalQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(3),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(0.5),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(0.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            )
        ),
        signalConePiZeros = cms.string('0.15'),
        pfCandSrc = cms.InputTag("pfNoElectronPFlowLoose")
    )),
    buildNullTaus = cms.bool(True)
)


process.pfType1CorrectedMet = cms.EDProducer("CorrectedPFMETProducer",
    src = cms.InputTag("pfMet"),
    applyType1Corrections = cms.bool(True),
    srcType1Corrections = cms.VInputTag(cms.InputTag("pfJetMETcorr","type1")),
    type0Rsoft = cms.double(0.6),
    applyType2Corrections = cms.bool(False),
    srcCHSSums = cms.VInputTag(cms.InputTag("pfchsMETcorr","type0")),
    applyType0Corrections = cms.bool(False)
)


process.pfType1CorrectedMetPFlow = cms.EDProducer("CorrectedPFMETProducer",
    src = cms.InputTag("pfMet"),
    applyType1Corrections = cms.bool(True),
    srcType1Corrections = cms.VInputTag(cms.InputTag("pfJetMETcorrPFlow","type1")),
    srcCHSSums = cms.VInputTag(cms.InputTag("pfchsMETcorrPFlow","type0")),
    applyType2Corrections = cms.bool(False),
    type0Rsoft = cms.double(0.6),
    applyType0Corrections = cms.bool(False)
)


process.pfType1CorrectedMetPFlowLoose = cms.EDProducer("CorrectedPFMETProducer",
    src = cms.InputTag("pfMet"),
    applyType1Corrections = cms.bool(True),
    srcType1Corrections = cms.VInputTag(cms.InputTag("pfJetMETcorrPFlowLoose","type1")),
    srcCHSSums = cms.VInputTag(cms.InputTag("pfchsMETcorrPFlowLoose","type0")),
    applyType2Corrections = cms.bool(False),
    type0Rsoft = cms.double(0.6),
    applyType0Corrections = cms.bool(False)
)


process.pfType1p2CorrectedMet = cms.EDProducer("CorrectedPFMETProducer",
    src = cms.InputTag("pfMet"),
    applyType1Corrections = cms.bool(True),
    type2CorrFormula = cms.string('A'),
    srcUnclEnergySums = cms.VInputTag(cms.InputTag("pfJetMETcorr","type2"), cms.InputTag("pfJetMETcorr","offset"), cms.InputTag("pfCandMETcorr")),
    srcType1Corrections = cms.VInputTag(cms.InputTag("pfJetMETcorr","type1")),
    type0Rsoft = cms.double(0.6),
    applyType2Corrections = cms.bool(True),
    srcCHSSums = cms.VInputTag(cms.InputTag("pfchsMETcorr","type0")),
    applyType0Corrections = cms.bool(False),
    type2CorrParameter = cms.PSet(
        A = cms.double(1.4)
    )
)


process.pfType1p2CorrectedMetPFlow = cms.EDProducer("CorrectedPFMETProducer",
    src = cms.InputTag("pfMet"),
    applyType1Corrections = cms.bool(True),
    type2CorrFormula = cms.string('A'),
    srcUnclEnergySums = cms.VInputTag(cms.InputTag("pfJetMETcorrPFlow","type2"), cms.InputTag("pfJetMETcorrPFlow","offset"), cms.InputTag("pfCandMETcorrPFlow")),
    srcType1Corrections = cms.VInputTag(cms.InputTag("pfJetMETcorrPFlow","type1")),
    type0Rsoft = cms.double(0.6),
    applyType2Corrections = cms.bool(True),
    srcCHSSums = cms.VInputTag(cms.InputTag("pfchsMETcorrPFlow","type0")),
    applyType0Corrections = cms.bool(False),
    type2CorrParameter = cms.PSet(
        A = cms.double(1.4)
    )
)


process.pfType1p2CorrectedMetPFlowLoose = cms.EDProducer("CorrectedPFMETProducer",
    src = cms.InputTag("pfMet"),
    applyType1Corrections = cms.bool(True),
    type2CorrFormula = cms.string('A'),
    srcUnclEnergySums = cms.VInputTag(cms.InputTag("pfJetMETcorrPFlowLoose","type2"), cms.InputTag("pfJetMETcorrPFlowLoose","offset"), cms.InputTag("pfCandMETcorrPFlowLoose")),
    srcType1Corrections = cms.VInputTag(cms.InputTag("pfJetMETcorrPFlowLoose","type1")),
    type0Rsoft = cms.double(0.6),
    applyType2Corrections = cms.bool(True),
    srcCHSSums = cms.VInputTag(cms.InputTag("pfchsMETcorrPFlowLoose","type0")),
    applyType0Corrections = cms.bool(False),
    type2CorrParameter = cms.PSet(
        A = cms.double(1.4)
    )
)


process.pfchsMETcorr = cms.EDProducer("PFchsMETcorrInputProducer",
    src = cms.InputTag("offlinePrimaryVertices"),
    goodVtxNdof = cms.uint32(4),
    goodVtxZ = cms.double(24)
)


process.pfchsMETcorrPFlow = cms.EDProducer("PFchsMETcorrInputProducer",
    src = cms.InputTag("offlinePrimaryVertices"),
    goodVtxNdof = cms.uint32(4),
    goodVtxZ = cms.double(24)
)


process.pfchsMETcorrPFlowLoose = cms.EDProducer("PFchsMETcorrInputProducer",
    src = cms.InputTag("offlinePrimaryVertices"),
    goodVtxNdof = cms.uint32(4),
    goodVtxZ = cms.double(24)
)


process.phPFIsoDepositCharged = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("pfSelectedPhotons"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllChargedHadrons"),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.phPFIsoDepositChargedAll = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("pfSelectedPhotons"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllChargedParticles"),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.phPFIsoDepositChargedAllPFlow = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("pfSelectedPhotonsPFlow"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllChargedParticlesPFlow"),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.phPFIsoDepositChargedAllPFlowLoose = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("pfSelectedPhotonsPFlowLoose"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllChargedParticlesPFlowLoose"),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.phPFIsoDepositChargedPFlow = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("pfSelectedPhotonsPFlow"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllChargedHadronsPFlow"),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.phPFIsoDepositChargedPFlowLoose = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("pfSelectedPhotonsPFlowLoose"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllChargedHadronsPFlowLoose"),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.phPFIsoDepositGamma = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("pfSelectedPhotons"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        SCMatch_Veto = cms.bool(True),
        ComponentName = cms.string('PFCandWithSuperClusterExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllPhotons"),
        MissHitSCMatch_Veto = cms.bool(False),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.phPFIsoDepositGammaPFlow = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("pfSelectedPhotonsPFlow"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        SCMatch_Veto = cms.bool(True),
        ComponentName = cms.string('PFCandWithSuperClusterExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllPhotonsPFlow"),
        MissHitSCMatch_Veto = cms.bool(False),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.phPFIsoDepositGammaPFlowLoose = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("pfSelectedPhotonsPFlowLoose"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        SCMatch_Veto = cms.bool(True),
        ComponentName = cms.string('PFCandWithSuperClusterExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllPhotonsPFlowLoose"),
        MissHitSCMatch_Veto = cms.bool(False),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.phPFIsoDepositNeutral = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("pfSelectedPhotons"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllNeutralHadrons"),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.phPFIsoDepositNeutralPFlow = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("pfSelectedPhotonsPFlow"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllNeutralHadronsPFlow"),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.phPFIsoDepositNeutralPFlowLoose = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("pfSelectedPhotonsPFlowLoose"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllNeutralHadronsPFlowLoose"),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.phPFIsoDepositPU = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("pfSelectedPhotons"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfPileUpAllChargedParticles"),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.phPFIsoDepositPUPFlow = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("pfSelectedPhotonsPFlow"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfPileUpAllChargedParticlesPFlow"),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.phPFIsoDepositPUPFlowLoose = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("pfSelectedPhotonsPFlowLoose"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfPileUpAllChargedParticlesPFlowLoose"),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.phPFIsoValueCharged03PFId = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("phPFIsoDepositCharged"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring(),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.phPFIsoValueCharged03PFIdPFlow = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("phPFIsoDepositChargedPFlow"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring(),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.phPFIsoValueCharged03PFIdPFlowLoose = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("phPFIsoDepositChargedPFlowLoose"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring(),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.phPFIsoValueCharged04PFId = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("phPFIsoDepositCharged"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring(),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.phPFIsoValueCharged04PFIdPFlow = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("phPFIsoDepositChargedPFlow"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring(),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.phPFIsoValueCharged04PFIdPFlowLoose = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("phPFIsoDepositChargedPFlowLoose"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring(),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.phPFIsoValueChargedAll03PFId = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("phPFIsoDepositChargedAll"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring(),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.phPFIsoValueChargedAll03PFIdPFlow = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("phPFIsoDepositChargedAllPFlow"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring(),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.phPFIsoValueChargedAll03PFIdPFlowLoose = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("phPFIsoDepositChargedAllPFlowLoose"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring(),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.phPFIsoValueChargedAll04PFId = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("phPFIsoDepositChargedAll"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring(),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.phPFIsoValueChargedAll04PFIdPFlow = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("phPFIsoDepositChargedAllPFlow"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring(),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.phPFIsoValueChargedAll04PFIdPFlowLoose = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("phPFIsoDepositChargedAllPFlowLoose"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring(),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.phPFIsoValueGamma03PFId = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("phPFIsoDepositGamma"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.05)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.phPFIsoValueGamma03PFIdPFlow = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("phPFIsoDepositGammaPFlow"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.05)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.phPFIsoValueGamma03PFIdPFlowLoose = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("phPFIsoDepositGammaPFlowLoose"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.05)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.phPFIsoValueGamma04PFId = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("phPFIsoDepositGamma"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.05)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.phPFIsoValueGamma04PFIdPFlow = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("phPFIsoDepositGammaPFlow"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.05)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.phPFIsoValueGamma04PFIdPFlowLoose = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("phPFIsoDepositGammaPFlowLoose"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.05)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.phPFIsoValueNeutral03PFId = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("phPFIsoDepositNeutral"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring(),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.phPFIsoValueNeutral03PFIdPFlow = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("phPFIsoDepositNeutralPFlow"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring(),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.phPFIsoValueNeutral03PFIdPFlowLoose = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("phPFIsoDepositNeutralPFlowLoose"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring(),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.phPFIsoValueNeutral04PFId = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("phPFIsoDepositNeutral"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring(),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.phPFIsoValueNeutral04PFIdPFlow = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("phPFIsoDepositNeutralPFlow"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring(),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.phPFIsoValueNeutral04PFIdPFlowLoose = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("phPFIsoDepositNeutralPFlowLoose"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring(),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.phPFIsoValuePU03PFId = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("phPFIsoDepositPU"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring(),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.phPFIsoValuePU03PFIdPFlow = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("phPFIsoDepositPUPFlow"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring(),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.phPFIsoValuePU03PFIdPFlowLoose = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("phPFIsoDepositPUPFlowLoose"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring(),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.phPFIsoValuePU04PFId = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("phPFIsoDepositPU"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring(),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.phPFIsoValuePU04PFIdPFlow = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("phPFIsoDepositPUPFlow"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring(),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.phPFIsoValuePU04PFIdPFlowLoose = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("phPFIsoDepositPUPFlowLoose"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring(),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.photonMatch = cms.EDProducer("MCMatcher",
    src = cms.InputTag("photons"),
    maxDPtRel = cms.double(1.0),
    mcPdgId = cms.vint32(22),
    mcStatus = cms.vint32(1),
    resolveByMatchQuality = cms.bool(False),
    maxDeltaR = cms.double(0.2),
    checkCharge = cms.bool(True),
    resolveAmbiguities = cms.bool(True),
    matched = cms.InputTag("genParticles")
)


process.photonMatchPFlow = cms.EDProducer("MCMatcher",
    src = cms.InputTag("photons"),
    maxDPtRel = cms.double(1.0),
    mcPdgId = cms.vint32(22),
    mcStatus = cms.vint32(1),
    resolveByMatchQuality = cms.bool(False),
    maxDeltaR = cms.double(0.2),
    checkCharge = cms.bool(True),
    resolveAmbiguities = cms.bool(True),
    matched = cms.InputTag("genParticles")
)


process.photonMatchPFlowLoose = cms.EDProducer("MCMatcher",
    src = cms.InputTag("photons"),
    maxDPtRel = cms.double(1.0),
    mcPdgId = cms.vint32(22),
    mcStatus = cms.vint32(1),
    resolveByMatchQuality = cms.bool(False),
    maxDeltaR = cms.double(0.2),
    checkCharge = cms.bool(True),
    resolveAmbiguities = cms.bool(True),
    matched = cms.InputTag("genParticles")
)


process.positiveCombinedMVABJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('positiveCombinedMVA'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"), cms.InputTag("secondaryVertexTagInfos"), cms.InputTag("softPFMuonsTagInfos"), cms.InputTag("softPFElectronsTagInfos"))
)


process.positiveCombinedSecondaryVertexSoftPFLeptonV1BJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('positiveCombinedSecondaryVertexSoftPFLeptonV1'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"), cms.InputTag("secondaryVertexTagInfos"), cms.InputTag("softPFMuonsTagInfos"), cms.InputTag("softPFElectronsTagInfos"))
)


process.positiveOnlyJetBProbabilityJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('positiveOnlyJetBProbability'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"))
)


process.positiveOnlyJetProbabilityJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('positiveOnlyJetProbability'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"))
)


process.positiveSoftPFElectronBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('positiveSoftPFElectron'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFElectronsTagInfos"))
)


process.positiveSoftPFElectronByIP2dBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('positiveSoftPFElectronByIP2d'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFElectronsTagInfos"))
)


process.positiveSoftPFElectronByIP3dBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('positiveSoftPFElectronByIP3d'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFElectronsTagInfos"))
)


process.positiveSoftPFElectronByPtBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('positiveSoftPFElectronByPt'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFElectronsTagInfos"))
)


process.positiveSoftPFMuonBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('positiveSoftPFMuon'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFMuonsTagInfos"))
)


process.positiveSoftPFMuonByIP2dBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('positiveSoftPFMuonByIP2d'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFMuonsTagInfos"))
)


process.positiveSoftPFMuonByIP3dBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('positiveSoftPFMuonByIP3d'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFMuonsTagInfos"))
)


process.positiveSoftPFMuonByPtBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('positiveSoftPFMuonByPt'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFMuonsTagInfos"))
)


process.prunedGenParticles = cms.EDProducer("GenParticlePruner",
    src = cms.InputTag("genParticles"),
    select = cms.vstring('drop  *', 
        'keep status = 3', 
        'keep (abs(pdgId) >= 11 & abs(pdgId) <= 16) & status = 1', 
        'keep (abs(pdgId)  = 15) & status = 3')
)


process.recoTauAK5PFJets08Region = cms.EDProducer("RecoTauJetRegionProducer",
    src = cms.InputTag("ak5PFJets"),
    deltaR = cms.double(0.8),
    pfSrc = cms.InputTag("particleFlow")
)


process.recoTauDiscriminantCutMultiplexer = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    toMultiplex = cms.InputTag("fixme"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.0),
            Producer = cms.InputTag("fixme")
        )
    ),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.double(0.5)
    ), 
        cms.PSet(
            category = cms.uint32(1),
            cut = cms.double(0.2)
        )),
    key = cms.InputTag("fixme"),
    PFTauProducer = cms.InputTag("fixme")
)


process.secondaryVertexNegativeTagInfos = cms.EDProducer("SecondaryVertexProducer",
    trackSelection = cms.PSet(
        totalHitsMin = cms.uint32(8),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(2),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.2),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(99999.9),
        ptMin = cms.double(1.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    vertexSelection = cms.PSet(
        sortCriterium = cms.string('dist3dError')
    ),
    vertexCuts = cms.PSet(
        distSig3dMax = cms.double(99999.9),
        fracPV = cms.double(0.65),
        distVal2dMax = cms.double(-0.01),
        useTrackWeights = cms.bool(True),
        maxDeltaRToJetAxis = cms.double(-0.5),
        v0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        ),
        distSig2dMin = cms.double(-99999.9),
        multiplicityMin = cms.uint32(2),
        massMax = cms.double(6.5),
        distSig2dMax = cms.double(-3.0),
        distVal3dMax = cms.double(99999.9),
        minimumTrackWeight = cms.double(0.5),
        distVal3dMin = cms.double(-99999.9),
        distVal2dMin = cms.double(-2.5),
        distSig3dMin = cms.double(-99999.9)
    ),
    vertexReco = cms.PSet(
        seccut = cms.double(6.0),
        primcut = cms.double(1.8),
        smoothing = cms.bool(False),
        weightthreshold = cms.double(0.001),
        minweight = cms.double(0.5),
        finder = cms.string('avr')
    ),
    extSVDeltaRToJet = cms.double(0.3),
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    constraint = cms.string('BeamSpot'),
    useExternalSV = cms.bool(False),
    trackIPTagInfos = cms.InputTag("impactParameterTagInfos"),
    minimumTrackWeight = cms.double(0.5),
    usePVError = cms.bool(True),
    trackSort = cms.string('sip3dSig'),
    extSVCollection = cms.InputTag("secondaryVertices")
)


process.secondaryVertexTagInfos = cms.EDProducer("SecondaryVertexProducer",
    trackSelection = cms.PSet(
        totalHitsMin = cms.uint32(8),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(2),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.2),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(99999.9),
        ptMin = cms.double(1.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    vertexSelection = cms.PSet(
        sortCriterium = cms.string('dist3dError')
    ),
    vertexCuts = cms.PSet(
        distSig3dMax = cms.double(99999.9),
        fracPV = cms.double(0.65),
        distVal2dMax = cms.double(2.5),
        useTrackWeights = cms.bool(True),
        maxDeltaRToJetAxis = cms.double(0.5),
        v0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        ),
        distSig2dMin = cms.double(3.0),
        multiplicityMin = cms.uint32(2),
        massMax = cms.double(6.5),
        distSig2dMax = cms.double(99999.9),
        distVal3dMax = cms.double(99999.9),
        minimumTrackWeight = cms.double(0.5),
        distVal3dMin = cms.double(-99999.9),
        distVal2dMin = cms.double(0.01),
        distSig3dMin = cms.double(-99999.9)
    ),
    vertexReco = cms.PSet(
        seccut = cms.double(6.0),
        primcut = cms.double(1.8),
        smoothing = cms.bool(False),
        weightthreshold = cms.double(0.001),
        minweight = cms.double(0.5),
        finder = cms.string('avr')
    ),
    extSVDeltaRToJet = cms.double(0.3),
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    constraint = cms.string('BeamSpot'),
    useExternalSV = cms.bool(False),
    trackIPTagInfos = cms.InputTag("impactParameterTagInfos"),
    minimumTrackWeight = cms.double(0.5),
    usePVError = cms.bool(True),
    trackSort = cms.string('sip3dSig'),
    extSVCollection = cms.InputTag("secondaryVertices")
)


process.secondaryVertexTagInfosAODPFlow = cms.EDProducer("SecondaryVertexProducer",
    extSVDeltaRToJet = cms.double(0.3),
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    vertexReco = cms.PSet(
        seccut = cms.double(6.0),
        primcut = cms.double(1.8),
        smoothing = cms.bool(False),
        weightthreshold = cms.double(0.001),
        minweight = cms.double(0.5),
        finder = cms.string('avr')
    ),
    vertexSelection = cms.PSet(
        sortCriterium = cms.string('dist3dError')
    ),
    constraint = cms.string('BeamSpot'),
    trackIPTagInfos = cms.InputTag("impactParameterTagInfosAODPFlow"),
    vertexCuts = cms.PSet(
        distSig3dMax = cms.double(99999.9),
        fracPV = cms.double(0.65),
        distVal2dMax = cms.double(2.5),
        useTrackWeights = cms.bool(True),
        maxDeltaRToJetAxis = cms.double(0.5),
        v0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        ),
        distSig2dMin = cms.double(3.0),
        multiplicityMin = cms.uint32(2),
        massMax = cms.double(6.5),
        distSig2dMax = cms.double(99999.9),
        distVal3dMax = cms.double(99999.9),
        minimumTrackWeight = cms.double(0.5),
        distVal3dMin = cms.double(-99999.9),
        distVal2dMin = cms.double(0.01),
        distSig3dMin = cms.double(-99999.9)
    ),
    useExternalSV = cms.bool(False),
    minimumTrackWeight = cms.double(0.5),
    usePVError = cms.bool(True),
    trackSelection = cms.PSet(
        totalHitsMin = cms.uint32(8),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(2),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.2),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(99999.9),
        ptMin = cms.double(1.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    trackSort = cms.string('sip3dSig'),
    extSVCollection = cms.InputTag("secondaryVertices")
)


process.secondaryVertexTagInfosAODPFlowLoose = cms.EDProducer("SecondaryVertexProducer",
    extSVDeltaRToJet = cms.double(0.3),
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    vertexReco = cms.PSet(
        seccut = cms.double(6.0),
        primcut = cms.double(1.8),
        smoothing = cms.bool(False),
        weightthreshold = cms.double(0.001),
        minweight = cms.double(0.5),
        finder = cms.string('avr')
    ),
    vertexSelection = cms.PSet(
        sortCriterium = cms.string('dist3dError')
    ),
    constraint = cms.string('BeamSpot'),
    trackIPTagInfos = cms.InputTag("impactParameterTagInfosAODPFlowLoose"),
    vertexCuts = cms.PSet(
        distSig3dMax = cms.double(99999.9),
        fracPV = cms.double(0.65),
        distVal2dMax = cms.double(2.5),
        useTrackWeights = cms.bool(True),
        maxDeltaRToJetAxis = cms.double(0.5),
        v0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        ),
        distSig2dMin = cms.double(3.0),
        multiplicityMin = cms.uint32(2),
        massMax = cms.double(6.5),
        distSig2dMax = cms.double(99999.9),
        distVal3dMax = cms.double(99999.9),
        minimumTrackWeight = cms.double(0.5),
        distVal3dMin = cms.double(-99999.9),
        distVal2dMin = cms.double(0.01),
        distSig3dMin = cms.double(-99999.9)
    ),
    useExternalSV = cms.bool(False),
    minimumTrackWeight = cms.double(0.5),
    usePVError = cms.bool(True),
    trackSelection = cms.PSet(
        totalHitsMin = cms.uint32(8),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(2),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.2),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(99999.9),
        ptMin = cms.double(1.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    trackSort = cms.string('sip3dSig'),
    extSVCollection = cms.InputTag("secondaryVertices")
)


process.secondaryVertexTagInfosCA15MassDropFilteredPF = cms.EDProducer("SecondaryVertexProducer",
    extSVDeltaRToJet = cms.double(0.3),
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    vertexReco = cms.PSet(
        seccut = cms.double(6.0),
        primcut = cms.double(1.8),
        smoothing = cms.bool(False),
        weightthreshold = cms.double(0.001),
        minweight = cms.double(0.5),
        finder = cms.string('avr')
    ),
    vertexSelection = cms.PSet(
        sortCriterium = cms.string('dist3dError')
    ),
    constraint = cms.string('BeamSpot'),
    trackIPTagInfos = cms.InputTag("impactParameterTagInfosCA15MassDropFilteredPF"),
    vertexCuts = cms.PSet(
        distSig3dMax = cms.double(99999.9),
        fracPV = cms.double(0.65),
        distVal2dMax = cms.double(2.5),
        useTrackWeights = cms.bool(True),
        maxDeltaRToJetAxis = cms.double(0.5),
        v0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        ),
        distSig2dMin = cms.double(3.0),
        multiplicityMin = cms.uint32(2),
        massMax = cms.double(6.5),
        distSig2dMax = cms.double(99999.9),
        distVal3dMax = cms.double(99999.9),
        minimumTrackWeight = cms.double(0.5),
        distVal3dMin = cms.double(-99999.9),
        distVal2dMin = cms.double(0.01),
        distSig3dMin = cms.double(-99999.9)
    ),
    useExternalSV = cms.bool(False),
    minimumTrackWeight = cms.double(0.5),
    usePVError = cms.bool(True),
    trackSelection = cms.PSet(
        totalHitsMin = cms.uint32(8),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(2),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.2),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(99999.9),
        ptMin = cms.double(1.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    trackSort = cms.string('sip3dSig'),
    extSVCollection = cms.InputTag("secondaryVertices")
)


process.secondaryVertexTagInfosCA15MassDropFilteredSubjetsPF = cms.EDProducer("SecondaryVertexProducer",
    extSVDeltaRToJet = cms.double(0.3),
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    vertexReco = cms.PSet(
        seccut = cms.double(6.0),
        primcut = cms.double(1.8),
        smoothing = cms.bool(False),
        weightthreshold = cms.double(0.001),
        minweight = cms.double(0.5),
        finder = cms.string('avr')
    ),
    vertexSelection = cms.PSet(
        sortCriterium = cms.string('dist3dError')
    ),
    constraint = cms.string('BeamSpot'),
    trackIPTagInfos = cms.InputTag("impactParameterTagInfosCA15MassDropFilteredSubjetsPF"),
    vertexCuts = cms.PSet(
        distSig3dMax = cms.double(99999.9),
        fracPV = cms.double(0.65),
        distVal2dMax = cms.double(2.5),
        useTrackWeights = cms.bool(True),
        maxDeltaRToJetAxis = cms.double(0.5),
        v0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        ),
        distSig2dMin = cms.double(3.0),
        multiplicityMin = cms.uint32(2),
        massMax = cms.double(6.5),
        distSig2dMax = cms.double(99999.9),
        distVal3dMax = cms.double(99999.9),
        minimumTrackWeight = cms.double(0.5),
        distVal3dMin = cms.double(-99999.9),
        distVal2dMin = cms.double(0.01),
        distSig3dMin = cms.double(-99999.9)
    ),
    useExternalSV = cms.bool(False),
    minimumTrackWeight = cms.double(0.5),
    usePVError = cms.bool(True),
    trackSelection = cms.PSet(
        totalHitsMin = cms.uint32(8),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(2),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.2),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(99999.9),
        ptMin = cms.double(1.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    trackSort = cms.string('sip3dSig'),
    extSVCollection = cms.InputTag("secondaryVertices")
)


process.secondaryVertexTagInfosCA8PF = cms.EDProducer("SecondaryVertexProducer",
    extSVDeltaRToJet = cms.double(0.3),
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    vertexReco = cms.PSet(
        seccut = cms.double(6.0),
        primcut = cms.double(1.8),
        smoothing = cms.bool(False),
        weightthreshold = cms.double(0.001),
        minweight = cms.double(0.5),
        finder = cms.string('avr')
    ),
    vertexSelection = cms.PSet(
        sortCriterium = cms.string('dist3dError')
    ),
    constraint = cms.string('BeamSpot'),
    trackIPTagInfos = cms.InputTag("impactParameterTagInfosCA8PF"),
    vertexCuts = cms.PSet(
        distSig3dMax = cms.double(99999.9),
        fracPV = cms.double(0.65),
        distVal2dMax = cms.double(2.5),
        useTrackWeights = cms.bool(True),
        maxDeltaRToJetAxis = cms.double(0.5),
        v0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        ),
        distSig2dMin = cms.double(3.0),
        multiplicityMin = cms.uint32(2),
        massMax = cms.double(6.5),
        distSig2dMax = cms.double(99999.9),
        distVal3dMax = cms.double(99999.9),
        minimumTrackWeight = cms.double(0.5),
        distVal3dMin = cms.double(-99999.9),
        distVal2dMin = cms.double(0.01),
        distSig3dMin = cms.double(-99999.9)
    ),
    useExternalSV = cms.bool(False),
    minimumTrackWeight = cms.double(0.5),
    usePVError = cms.bool(True),
    trackSelection = cms.PSet(
        totalHitsMin = cms.uint32(8),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(2),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.2),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(99999.9),
        ptMin = cms.double(1.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    trackSort = cms.string('sip3dSig'),
    extSVCollection = cms.InputTag("secondaryVertices")
)


process.secondaryVertexTagInfosCA8PrunedPF = cms.EDProducer("SecondaryVertexProducer",
    extSVDeltaRToJet = cms.double(0.3),
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    vertexReco = cms.PSet(
        seccut = cms.double(6.0),
        primcut = cms.double(1.8),
        smoothing = cms.bool(False),
        weightthreshold = cms.double(0.001),
        minweight = cms.double(0.5),
        finder = cms.string('avr')
    ),
    vertexSelection = cms.PSet(
        sortCriterium = cms.string('dist3dError')
    ),
    constraint = cms.string('BeamSpot'),
    trackIPTagInfos = cms.InputTag("impactParameterTagInfosCA8PrunedPF"),
    vertexCuts = cms.PSet(
        distSig3dMax = cms.double(99999.9),
        fracPV = cms.double(0.65),
        distVal2dMax = cms.double(2.5),
        useTrackWeights = cms.bool(True),
        maxDeltaRToJetAxis = cms.double(0.5),
        v0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        ),
        distSig2dMin = cms.double(3.0),
        multiplicityMin = cms.uint32(2),
        massMax = cms.double(6.5),
        distSig2dMax = cms.double(99999.9),
        distVal3dMax = cms.double(99999.9),
        minimumTrackWeight = cms.double(0.5),
        distVal3dMin = cms.double(-99999.9),
        distVal2dMin = cms.double(0.01),
        distSig3dMin = cms.double(-99999.9)
    ),
    useExternalSV = cms.bool(False),
    minimumTrackWeight = cms.double(0.5),
    usePVError = cms.bool(True),
    trackSelection = cms.PSet(
        totalHitsMin = cms.uint32(8),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(2),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.2),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(99999.9),
        ptMin = cms.double(1.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    trackSort = cms.string('sip3dSig'),
    extSVCollection = cms.InputTag("secondaryVertices")
)


process.secondaryVertexTagInfosCA8PrunedSubjetsPF = cms.EDProducer("SecondaryVertexProducer",
    extSVDeltaRToJet = cms.double(0.3),
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    vertexReco = cms.PSet(
        seccut = cms.double(6.0),
        primcut = cms.double(1.8),
        smoothing = cms.bool(False),
        weightthreshold = cms.double(0.001),
        minweight = cms.double(0.5),
        finder = cms.string('avr')
    ),
    vertexSelection = cms.PSet(
        sortCriterium = cms.string('dist3dError')
    ),
    constraint = cms.string('BeamSpot'),
    trackIPTagInfos = cms.InputTag("impactParameterTagInfosCA8PrunedSubjetsPF"),
    vertexCuts = cms.PSet(
        distSig3dMax = cms.double(99999.9),
        fracPV = cms.double(0.65),
        distVal2dMax = cms.double(2.5),
        useTrackWeights = cms.bool(True),
        maxDeltaRToJetAxis = cms.double(0.5),
        v0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        ),
        distSig2dMin = cms.double(3.0),
        multiplicityMin = cms.uint32(2),
        massMax = cms.double(6.5),
        distSig2dMax = cms.double(99999.9),
        distVal3dMax = cms.double(99999.9),
        minimumTrackWeight = cms.double(0.5),
        distVal3dMin = cms.double(-99999.9),
        distVal2dMin = cms.double(0.01),
        distSig3dMin = cms.double(-99999.9)
    ),
    useExternalSV = cms.bool(False),
    minimumTrackWeight = cms.double(0.5),
    usePVError = cms.bool(True),
    trackSelection = cms.PSet(
        totalHitsMin = cms.uint32(8),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(2),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.2),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(99999.9),
        ptMin = cms.double(1.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    trackSort = cms.string('sip3dSig'),
    extSVCollection = cms.InputTag("secondaryVertices")
)


process.secondaryVertexTagInfosCAHEPTopTagPF = cms.EDProducer("SecondaryVertexProducer",
    extSVDeltaRToJet = cms.double(0.3),
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    vertexReco = cms.PSet(
        seccut = cms.double(6.0),
        primcut = cms.double(1.8),
        smoothing = cms.bool(False),
        weightthreshold = cms.double(0.001),
        minweight = cms.double(0.5),
        finder = cms.string('avr')
    ),
    vertexSelection = cms.PSet(
        sortCriterium = cms.string('dist3dError')
    ),
    constraint = cms.string('BeamSpot'),
    trackIPTagInfos = cms.InputTag("impactParameterTagInfosCAHEPTopTagPF"),
    vertexCuts = cms.PSet(
        distSig3dMax = cms.double(99999.9),
        fracPV = cms.double(0.65),
        distVal2dMax = cms.double(2.5),
        useTrackWeights = cms.bool(True),
        maxDeltaRToJetAxis = cms.double(0.5),
        v0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        ),
        distSig2dMin = cms.double(3.0),
        multiplicityMin = cms.uint32(2),
        massMax = cms.double(6.5),
        distSig2dMax = cms.double(99999.9),
        distVal3dMax = cms.double(99999.9),
        minimumTrackWeight = cms.double(0.5),
        distVal3dMin = cms.double(-99999.9),
        distVal2dMin = cms.double(0.01),
        distSig3dMin = cms.double(-99999.9)
    ),
    useExternalSV = cms.bool(False),
    minimumTrackWeight = cms.double(0.5),
    usePVError = cms.bool(True),
    trackSelection = cms.PSet(
        totalHitsMin = cms.uint32(8),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(2),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.2),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(99999.9),
        ptMin = cms.double(1.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    trackSort = cms.string('sip3dSig'),
    extSVCollection = cms.InputTag("secondaryVertices")
)


process.secondaryVertexTagInfosCAHEPTopTagSubjetsPF = cms.EDProducer("SecondaryVertexProducer",
    extSVDeltaRToJet = cms.double(0.3),
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    vertexReco = cms.PSet(
        seccut = cms.double(6.0),
        primcut = cms.double(1.8),
        smoothing = cms.bool(False),
        weightthreshold = cms.double(0.001),
        minweight = cms.double(0.5),
        finder = cms.string('avr')
    ),
    vertexSelection = cms.PSet(
        sortCriterium = cms.string('dist3dError')
    ),
    constraint = cms.string('BeamSpot'),
    trackIPTagInfos = cms.InputTag("impactParameterTagInfosCAHEPTopTagSubjetsPF"),
    vertexCuts = cms.PSet(
        distSig3dMax = cms.double(99999.9),
        fracPV = cms.double(0.65),
        distVal2dMax = cms.double(2.5),
        useTrackWeights = cms.bool(True),
        maxDeltaRToJetAxis = cms.double(0.5),
        v0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        ),
        distSig2dMin = cms.double(3.0),
        multiplicityMin = cms.uint32(2),
        massMax = cms.double(6.5),
        distSig2dMax = cms.double(99999.9),
        distVal3dMax = cms.double(99999.9),
        minimumTrackWeight = cms.double(0.5),
        distVal3dMin = cms.double(-99999.9),
        distVal2dMin = cms.double(0.01),
        distSig3dMin = cms.double(-99999.9)
    ),
    useExternalSV = cms.bool(False),
    minimumTrackWeight = cms.double(0.5),
    usePVError = cms.bool(True),
    trackSelection = cms.PSet(
        totalHitsMin = cms.uint32(8),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(2),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.2),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(99999.9),
        ptMin = cms.double(1.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    trackSort = cms.string('sip3dSig'),
    extSVCollection = cms.InputTag("secondaryVertices")
)


process.secondaryVertexTagInfosCATopTagPF = cms.EDProducer("SecondaryVertexProducer",
    extSVDeltaRToJet = cms.double(0.3),
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    vertexReco = cms.PSet(
        seccut = cms.double(6.0),
        primcut = cms.double(1.8),
        smoothing = cms.bool(False),
        weightthreshold = cms.double(0.001),
        minweight = cms.double(0.5),
        finder = cms.string('avr')
    ),
    vertexSelection = cms.PSet(
        sortCriterium = cms.string('dist3dError')
    ),
    constraint = cms.string('BeamSpot'),
    trackIPTagInfos = cms.InputTag("impactParameterTagInfosCATopTagPF"),
    vertexCuts = cms.PSet(
        distSig3dMax = cms.double(99999.9),
        fracPV = cms.double(0.65),
        distVal2dMax = cms.double(2.5),
        useTrackWeights = cms.bool(True),
        maxDeltaRToJetAxis = cms.double(0.5),
        v0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        ),
        distSig2dMin = cms.double(3.0),
        multiplicityMin = cms.uint32(2),
        massMax = cms.double(6.5),
        distSig2dMax = cms.double(99999.9),
        distVal3dMax = cms.double(99999.9),
        minimumTrackWeight = cms.double(0.5),
        distVal3dMin = cms.double(-99999.9),
        distVal2dMin = cms.double(0.01),
        distSig3dMin = cms.double(-99999.9)
    ),
    useExternalSV = cms.bool(False),
    minimumTrackWeight = cms.double(0.5),
    usePVError = cms.bool(True),
    trackSelection = cms.PSet(
        totalHitsMin = cms.uint32(8),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(2),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.2),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(99999.9),
        ptMin = cms.double(1.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    trackSort = cms.string('sip3dSig'),
    extSVCollection = cms.InputTag("secondaryVertices")
)


process.secondaryVertexTagInfosCATopTagSubjetsPF = cms.EDProducer("SecondaryVertexProducer",
    extSVDeltaRToJet = cms.double(0.3),
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    vertexReco = cms.PSet(
        seccut = cms.double(6.0),
        primcut = cms.double(1.8),
        smoothing = cms.bool(False),
        weightthreshold = cms.double(0.001),
        minweight = cms.double(0.5),
        finder = cms.string('avr')
    ),
    vertexSelection = cms.PSet(
        sortCriterium = cms.string('dist3dError')
    ),
    constraint = cms.string('BeamSpot'),
    trackIPTagInfos = cms.InputTag("impactParameterTagInfosCATopTagSubjetsPF"),
    vertexCuts = cms.PSet(
        distSig3dMax = cms.double(99999.9),
        fracPV = cms.double(0.65),
        distVal2dMax = cms.double(2.5),
        useTrackWeights = cms.bool(True),
        maxDeltaRToJetAxis = cms.double(0.5),
        v0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        ),
        distSig2dMin = cms.double(3.0),
        multiplicityMin = cms.uint32(2),
        massMax = cms.double(6.5),
        distSig2dMax = cms.double(99999.9),
        distVal3dMax = cms.double(99999.9),
        minimumTrackWeight = cms.double(0.5),
        distVal3dMin = cms.double(-99999.9),
        distVal2dMin = cms.double(0.01),
        distSig3dMin = cms.double(-99999.9)
    ),
    useExternalSV = cms.bool(False),
    minimumTrackWeight = cms.double(0.5),
    usePVError = cms.bool(True),
    trackSelection = cms.PSet(
        totalHitsMin = cms.uint32(8),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(2),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.2),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(99999.9),
        ptMin = cms.double(1.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    trackSort = cms.string('sip3dSig'),
    extSVCollection = cms.InputTag("secondaryVertices")
)


process.shrinkingConePFTauDecayModeIndexProducer = cms.EDProducer("PFRecoTauDecayModeIndexProducer",
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    PFTauProducer = cms.InputTag("shrinkingConePFTauProducer"),
    PFTauDecayModeProducer = cms.InputTag("shrinkingConePFTauDecayModeProducer")
)


process.shrinkingConePFTauDecayModeProducer = cms.EDProducer("PFRecoTauDecayModeDeterminator",
    mergeByBestMatch = cms.bool(True),
    refitTracks = cms.bool(False),
    maxPiZeroMass = cms.double(0.2),
    mergeLowPtPhotonsFirst = cms.bool(True),
    setMergedPi0Mass = cms.bool(True),
    setChargedPionMass = cms.bool(True),
    filterPhotons = cms.bool(True),
    minPtFractionSinglePhotons = cms.double(0.1),
    minPtFractionPiZeroes = cms.double(0.15),
    maxNbrOfIterations = cms.int32(10),
    filterTwoProngs = cms.bool(True),
    minPtFractionForSecondProng = cms.double(0.1),
    maxDistance = cms.double(0.01),
    setPi0Mass = cms.bool(True),
    maxPhotonsToMerge = cms.uint32(2),
    PFTauProducer = cms.InputTag("shrinkingConePFTauProducer")
)


process.shrinkingConePFTauDiscriminationAgainstElectron = cms.EDProducer("PFRecoTauDiscriminationAgainstElectron",
    ApplyCut_ElectronPreID_2D = cms.bool(False),
    ApplyCut_EOverPLead = cms.bool(False),
    ElecPreID0_HOverPLead_minValue = cms.double(0.05),
    PFTauProducer = cms.InputTag("shrinkingConePFTauProducer"),
    ApplyCut_ElectronPreID = cms.bool(False),
    ApplyCut_HcalTotOverPLead = cms.bool(False),
    EOverPLead_minValue = cms.double(0.8),
    ElecPreID1_EOverPLead_maxValue = cms.double(0.8),
    HcalMaxOverPLead_minValue = cms.double(0.1),
    ApplyCut_EmFraction = cms.bool(False),
    EmFraction_maxValue = cms.double(0.9),
    BremCombined_Mass = cms.double(0.55),
    ApplyCut_PFElectronMVA = cms.bool(True),
    PFElectronMVA_maxValue = cms.double(-0.1),
    ApplyCut_HcalMaxOverPLead = cms.bool(False),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("shrinkingConePFTauDiscriminationByLeadingTrackFinding")
        )
    ),
    ApplyCut_BremCombined = cms.bool(False),
    Hcal3x3OverPLead_minValue = cms.double(0.1),
    ElecPreID1_HOverPLead_minValue = cms.double(0.15),
    ElecPreID0_EOverPLead_maxValue = cms.double(0.95),
    BremsRecoveryEOverPLead_minValue = cms.double(0.8),
    ApplyCut_EcalCrackCut = cms.bool(False),
    BremCombined_StripSize = cms.double(0.03),
    EOverPLead_maxValue = cms.double(1.8),
    HcalTotOverPLead_minValue = cms.double(0.1),
    ApplyCut_BremsRecoveryEOverPLead = cms.bool(False),
    ApplyCut_Hcal3x3OverPLead = cms.bool(False),
    BremCombined_HOP = cms.double(0.1),
    BremCombined_Fraction = cms.double(0.99),
    BremsRecoveryEOverPLead_maxValue = cms.double(1.8)
)


process.shrinkingConePFTauDiscriminationAgainstMuon = cms.EDProducer("PFRecoTauDiscriminationAgainstMuon",
    a = cms.double(0.5),
    c = cms.double(0.0),
    b = cms.double(0.5),
    PFTauProducer = cms.InputTag("shrinkingConePFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("shrinkingConePFTauDiscriminationByLeadingTrackFinding")
        )
    ),
    discriminatorOption = cms.string('noSegMatch'),
    HoPMin = cms.double(0.2),
    maxNumberOfMatches = cms.int32(0),
    checkNumMatches = cms.bool(False)
)


process.shrinkingConePFTauDiscriminationByECALIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("shrinkingConePFTauProducer"),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("shrinkingConePFTauDiscriminationByLeadingTrackFinding")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    applySumPtCut = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    applyRelativeSumPtCut = cms.bool(False)
)


process.shrinkingConePFTauDiscriminationByECALIsolationUsingLeadingPion = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("shrinkingConePFTauProducer"),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadPion = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("shrinkingConePFTauDiscriminationByLeadingTrackFinding")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    applySumPtCut = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    applyRelativeSumPtCut = cms.bool(False)
)


process.shrinkingConePFTauDiscriminationByIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("shrinkingConePFTauProducer"),
    maximumOccupancy = cms.uint32(0),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.38'),
    applyRhoCorrection = cms.bool(False),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    isoConeSizeForDeltaBeta = cms.double(0.5),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("shrinkingConePFTauDiscriminationByLeadingTrackFinding")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.shrinkingConePFTauDiscriminationByIsolationUsingLeadingPion = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("shrinkingConePFTauProducer"),
    maximumOccupancy = cms.uint32(0),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.38'),
    applyRhoCorrection = cms.bool(False),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    isoConeSizeForDeltaBeta = cms.double(0.5),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadPion = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("shrinkingConePFTauDiscriminationByLeadingTrackFinding")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.shrinkingConePFTauDiscriminationByLeadingPionPtCut = cms.EDProducer("PFRecoTauDiscriminationByLeadingObjectPtCut",
    MinPtLeadingObject = cms.double(5.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    PFTauProducer = cms.InputTag("shrinkingConePFTauProducer"),
    UseOnlyChargedHadrons = cms.bool(False)
)


process.shrinkingConePFTauDiscriminationByLeadingTrackFinding = cms.EDProducer("PFRecoTauDiscriminationByLeadingObjectPtCut",
    MinPtLeadingObject = cms.double(0.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    PFTauProducer = cms.InputTag("shrinkingConePFTauProducer"),
    UseOnlyChargedHadrons = cms.bool(True)
)


process.shrinkingConePFTauDiscriminationByLeadingTrackPtCut = cms.EDProducer("PFRecoTauDiscriminationByLeadingObjectPtCut",
    MinPtLeadingObject = cms.double(5.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    PFTauProducer = cms.InputTag("shrinkingConePFTauProducer"),
    UseOnlyChargedHadrons = cms.bool(True)
)


process.shrinkingConePFTauDiscriminationByTaNC = cms.EDProducer("RecoTauMVADiscriminator",
    discriminantOptions = cms.PSet(

    ),
    mvas = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        mvaLabel = cms.string('OneProngNoPiZero'),
        nCharged = cms.uint32(1)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            mvaLabel = cms.string('OneProngOnePiZero'),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(2),
            mvaLabel = cms.string('OneProngTwoPiZero'),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            mvaLabel = cms.string('ThreeProngNoPiZero'),
            nCharged = cms.uint32(3)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            mvaLabel = cms.string('ThreeProngOnePiZero'),
            nCharged = cms.uint32(3)
        )),
    remapOutput = cms.bool(True),
    PFTauProducer = cms.InputTag("shrinkingConePFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("shrinkingConePFTauDiscriminationByLeadingTrackFinding")
        )
    ),
    prefailValue = cms.double(-2.0),
    dbLabel = cms.string('')
)


process.shrinkingConePFTauDiscriminationByTaNCfrHalfPercent = cms.EDProducer("RecoTauDecayModeCutMultiplexer",
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("shrinkingConePFTauDiscriminationByLeadingTrackFinding")
        )
    ),
    decayModes = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        nCharged = cms.uint32(1),
        cut = cms.double(0.9087875)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            nCharged = cms.uint32(1),
            cut = cms.double(0.8707145)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(2),
            nCharged = cms.uint32(1),
            cut = cms.double(0.921793)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            nCharged = cms.uint32(3),
            cut = cms.double(0.9451915)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            nCharged = cms.uint32(3),
            cut = cms.double(0.9488565)
        )),
    toMultiplex = cms.InputTag("shrinkingConePFTauDiscriminationByTaNC"),
    PFTauProducer = cms.InputTag("shrinkingConePFTauProducer")
)


process.shrinkingConePFTauDiscriminationByTaNCfrOnePercent = cms.EDProducer("RecoTauDecayModeCutMultiplexer",
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("shrinkingConePFTauDiscriminationByLeadingTrackFinding")
        )
    ),
    decayModes = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        nCharged = cms.uint32(1),
        cut = cms.double(0.7649845)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            nCharged = cms.uint32(1),
            cut = cms.double(0.699697)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(2),
            nCharged = cms.uint32(1),
            cut = cms.double(0.772231)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            nCharged = cms.uint32(3),
            cut = cms.double(0.905071)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            nCharged = cms.uint32(3),
            cut = cms.double(0.9238995)
        )),
    toMultiplex = cms.InputTag("shrinkingConePFTauDiscriminationByTaNC"),
    PFTauProducer = cms.InputTag("shrinkingConePFTauProducer")
)


process.shrinkingConePFTauDiscriminationByTaNCfrQuarterPercent = cms.EDProducer("RecoTauDecayModeCutMultiplexer",
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("shrinkingConePFTauDiscriminationByLeadingTrackFinding")
        )
    ),
    decayModes = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        nCharged = cms.uint32(1),
        cut = cms.double(0.9539685)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            nCharged = cms.uint32(1),
            cut = cms.double(0.940843)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(2),
            nCharged = cms.uint32(1),
            cut = cms.double(0.9645195)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            nCharged = cms.uint32(3),
            cut = cms.double(0.960407)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            nCharged = cms.uint32(3),
            cut = cms.double(0.994065)
        )),
    toMultiplex = cms.InputTag("shrinkingConePFTauDiscriminationByTaNC"),
    PFTauProducer = cms.InputTag("shrinkingConePFTauProducer")
)


process.shrinkingConePFTauDiscriminationByTaNCfrTenthPercent = cms.EDProducer("RecoTauDecayModeCutMultiplexer",
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("shrinkingConePFTauDiscriminationByLeadingTrackFinding")
        )
    ),
    decayModes = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        nCharged = cms.uint32(1),
        cut = cms.double(0.959384)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            nCharged = cms.uint32(1),
            cut = cms.double(0.991353)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(2),
            nCharged = cms.uint32(1),
            cut = cms.double(0.9712775)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            nCharged = cms.uint32(3),
            cut = cms.double(0.9875015)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            nCharged = cms.uint32(3),
            cut = cms.double(1.0234655)
        )),
    toMultiplex = cms.InputTag("shrinkingConePFTauDiscriminationByTaNC"),
    PFTauProducer = cms.InputTag("shrinkingConePFTauProducer")
)


process.shrinkingConePFTauDiscriminationByTrackIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(False),
    PFTauProducer = cms.InputTag("shrinkingConePFTauProducer"),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("shrinkingConePFTauDiscriminationByLeadingTrackFinding")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    applySumPtCut = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    applyRelativeSumPtCut = cms.bool(False)
)


process.shrinkingConePFTauDiscriminationByTrackIsolationUsingLeadingPion = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(False),
    PFTauProducer = cms.InputTag("shrinkingConePFTauProducer"),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadPion = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("shrinkingConePFTauDiscriminationByLeadingTrackFinding")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    applySumPtCut = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    applyRelativeSumPtCut = cms.bool(False)
)


process.shrinkingConePFTauProducer = cms.EDProducer("RecoTauPiZeroUnembedder",
    src = cms.InputTag("shrinkingConePFTauProducerSansRefs"),
    builders = cms.VPSet(cms.PSet(
        usePFLeptons = cms.bool(True),
        signalConeNeutralHadrons = cms.string('0.15'),
        name = cms.string('shrinkingCone'),
        plugin = cms.string('RecoTauBuilderConePlugin'),
        isoConeChargedHadrons = cms.string('0.5'),
        isoConePiZeros = cms.string('0.5'),
        isoConeNeutralHadrons = cms.string('0.5'),
        matchingCone = cms.string('0.1'),
        signalConeChargedHadrons = cms.string('min(max(5.0/et(), 0.07), 0.15)'),
        leadObjectPt = cms.double(5.0),
        qualityCuts = cms.PSet(
            isolationQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(8),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(1.0),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(1.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            ),
            pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
            primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
            signalQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(3),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(0.5),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(0.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            )
        ),
        signalConePiZeros = cms.string('0.15'),
        pfCandSrc = cms.InputTag("particleFlow")
    )),
    modifiers = cms.VPSet(cms.PSet(
        ElectronPreIDProducer = cms.InputTag("elecpreid"),
        name = cms.string('shrinkingConeElectronRej'),
        plugin = cms.string('RecoTauElectronRejectionPlugin'),
        DataType = cms.string('AOD'),
        maximumForElectrionPreIDOutput = cms.double(-0.1),
        EcalStripSumE_deltaPhiOverQ_minValue = cms.double(-0.1),
        EcalStripSumE_deltaPhiOverQ_maxValue = cms.double(0.5),
        EcalStripSumE_minClusEnergy = cms.double(0.1),
        ElecPreIDLeadTkMatch_maxDR = cms.double(0.01),
        EcalStripSumE_deltaEta = cms.double(0.03)
    ), 
        cms.PSet(
            pfTauTagInfoSrc = cms.InputTag("pfRecoTauTagInfoProducer"),
            name = cms.string('TTIworkaround'),
            plugin = cms.string('RecoTauTagInfoWorkaroundModifer')
        )),
    piZeroSrc = cms.InputTag("ak5PFJetsLegacyTaNCPiZeros")
)


process.shrinkingConePFTauProducerSansRefs = cms.EDProducer("RecoTauProducer",
    piZeroSrc = cms.InputTag("ak5PFJetsRecoTauPiZeros"),
    modifiers = cms.VPSet(cms.PSet(
        ElectronPreIDProducer = cms.InputTag("elecpreid"),
        name = cms.string('shrinkingConeElectronRej'),
        plugin = cms.string('RecoTauElectronRejectionPlugin'),
        DataType = cms.string('AOD'),
        maximumForElectrionPreIDOutput = cms.double(-0.1),
        EcalStripSumE_deltaPhiOverQ_minValue = cms.double(-0.1),
        EcalStripSumE_deltaPhiOverQ_maxValue = cms.double(0.5),
        EcalStripSumE_minClusEnergy = cms.double(0.1),
        ElecPreIDLeadTkMatch_maxDR = cms.double(0.01),
        EcalStripSumE_deltaEta = cms.double(0.03)
    ), 
        cms.PSet(
            pfTauTagInfoSrc = cms.InputTag("pfRecoTauTagInfoProducer"),
            name = cms.string('TTIworkaround'),
            plugin = cms.string('RecoTauTagInfoWorkaroundModifer')
        )),
    jetRegionSrc = cms.InputTag("recoTauAK5PFJets08Region"),
    jetSrc = cms.InputTag("ak5PFJets"),
    builders = cms.VPSet(cms.PSet(
        usePFLeptons = cms.bool(True),
        signalConeNeutralHadrons = cms.string('0.15'),
        name = cms.string('shrinkingCone'),
        plugin = cms.string('RecoTauBuilderConePlugin'),
        isoConeChargedHadrons = cms.string('0.5'),
        isoConePiZeros = cms.string('0.5'),
        isoConeNeutralHadrons = cms.string('0.5'),
        matchingCone = cms.string('0.1'),
        signalConeChargedHadrons = cms.string('min(max(5.0/et(), 0.07), 0.15)'),
        leadObjectPt = cms.double(5.0),
        qualityCuts = cms.PSet(
            isolationQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(8),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(1.0),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(1.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            ),
            pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
            primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
            signalQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(3),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(0.5),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(0.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            )
        ),
        signalConePiZeros = cms.string('0.15'),
        pfCandSrc = cms.InputTag("particleFlow")
    )),
    buildNullTaus = cms.bool(True)
)


process.simpleInclusiveSecondaryVertexHighEffBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('simpleSecondaryVertex2Trk'),
    tagInfos = cms.VInputTag(cms.InputTag("inclusiveSecondaryVertexFinderFilteredTagInfos"))
)


process.simpleInclusiveSecondaryVertexHighPurBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('simpleSecondaryVertex3Trk'),
    tagInfos = cms.VInputTag(cms.InputTag("inclusiveSecondaryVertexFinderFilteredTagInfos"))
)


process.simpleSecondaryVertexBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('simpleSecondaryVertex2Trk'),
    tagInfos = cms.VInputTag(cms.InputTag("secondaryVertexTagInfos"))
)


process.simpleSecondaryVertexHighEffBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('simpleSecondaryVertex2Trk'),
    tagInfos = cms.VInputTag(cms.InputTag("secondaryVertexTagInfos"))
)


process.simpleSecondaryVertexHighEffBJetTagsAODPFlow = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('simpleSecondaryVertex2Trk'),
    tagInfos = cms.VInputTag(cms.InputTag("secondaryVertexTagInfosAODPFlow"))
)


process.simpleSecondaryVertexHighEffBJetTagsAODPFlowLoose = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('simpleSecondaryVertex2Trk'),
    tagInfos = cms.VInputTag(cms.InputTag("secondaryVertexTagInfosAODPFlowLoose"))
)


process.simpleSecondaryVertexHighEffBJetTagsCA15MassDropFilteredPF = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('simpleSecondaryVertex2Trk'),
    tagInfos = cms.VInputTag(cms.InputTag("secondaryVertexTagInfosCA15MassDropFilteredPF"))
)


process.simpleSecondaryVertexHighEffBJetTagsCA15MassDropFilteredSubjetsPF = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('simpleSecondaryVertex2Trk'),
    tagInfos = cms.VInputTag(cms.InputTag("secondaryVertexTagInfosCA15MassDropFilteredSubjetsPF"))
)


process.simpleSecondaryVertexHighEffBJetTagsCA8PF = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('simpleSecondaryVertex2Trk'),
    tagInfos = cms.VInputTag(cms.InputTag("secondaryVertexTagInfosCA8PF"))
)


process.simpleSecondaryVertexHighEffBJetTagsCA8PrunedPF = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('simpleSecondaryVertex2Trk'),
    tagInfos = cms.VInputTag(cms.InputTag("secondaryVertexTagInfosCA8PrunedPF"))
)


process.simpleSecondaryVertexHighEffBJetTagsCA8PrunedSubjetsPF = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('simpleSecondaryVertex2Trk'),
    tagInfos = cms.VInputTag(cms.InputTag("secondaryVertexTagInfosCA8PrunedSubjetsPF"))
)


process.simpleSecondaryVertexHighEffBJetTagsCAHEPTopTagPF = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('simpleSecondaryVertex2Trk'),
    tagInfos = cms.VInputTag(cms.InputTag("secondaryVertexTagInfosCAHEPTopTagPF"))
)


process.simpleSecondaryVertexHighEffBJetTagsCAHEPTopTagSubjetsPF = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('simpleSecondaryVertex2Trk'),
    tagInfos = cms.VInputTag(cms.InputTag("secondaryVertexTagInfosCAHEPTopTagSubjetsPF"))
)


process.simpleSecondaryVertexHighEffBJetTagsCATopTagPF = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('simpleSecondaryVertex2Trk'),
    tagInfos = cms.VInputTag(cms.InputTag("secondaryVertexTagInfosCATopTagPF"))
)


process.simpleSecondaryVertexHighEffBJetTagsCATopTagSubjetsPF = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('simpleSecondaryVertex2Trk'),
    tagInfos = cms.VInputTag(cms.InputTag("secondaryVertexTagInfosCATopTagSubjetsPF"))
)


process.simpleSecondaryVertexHighPurBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('simpleSecondaryVertex3Trk'),
    tagInfos = cms.VInputTag(cms.InputTag("secondaryVertexTagInfos"))
)


process.simpleSecondaryVertexHighPurBJetTagsAODPFlow = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('simpleSecondaryVertex3Trk'),
    tagInfos = cms.VInputTag(cms.InputTag("secondaryVertexTagInfosAODPFlow"))
)


process.simpleSecondaryVertexHighPurBJetTagsAODPFlowLoose = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('simpleSecondaryVertex3Trk'),
    tagInfos = cms.VInputTag(cms.InputTag("secondaryVertexTagInfosAODPFlowLoose"))
)


process.simpleSecondaryVertexHighPurBJetTagsCA15MassDropFilteredPF = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('simpleSecondaryVertex3Trk'),
    tagInfos = cms.VInputTag(cms.InputTag("secondaryVertexTagInfosCA15MassDropFilteredPF"))
)


process.simpleSecondaryVertexHighPurBJetTagsCA15MassDropFilteredSubjetsPF = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('simpleSecondaryVertex3Trk'),
    tagInfos = cms.VInputTag(cms.InputTag("secondaryVertexTagInfosCA15MassDropFilteredSubjetsPF"))
)


process.simpleSecondaryVertexHighPurBJetTagsCA8PF = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('simpleSecondaryVertex3Trk'),
    tagInfos = cms.VInputTag(cms.InputTag("secondaryVertexTagInfosCA8PF"))
)


process.simpleSecondaryVertexHighPurBJetTagsCA8PrunedPF = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('simpleSecondaryVertex3Trk'),
    tagInfos = cms.VInputTag(cms.InputTag("secondaryVertexTagInfosCA8PrunedPF"))
)


process.simpleSecondaryVertexHighPurBJetTagsCA8PrunedSubjetsPF = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('simpleSecondaryVertex3Trk'),
    tagInfos = cms.VInputTag(cms.InputTag("secondaryVertexTagInfosCA8PrunedSubjetsPF"))
)


process.simpleSecondaryVertexHighPurBJetTagsCAHEPTopTagPF = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('simpleSecondaryVertex3Trk'),
    tagInfos = cms.VInputTag(cms.InputTag("secondaryVertexTagInfosCAHEPTopTagPF"))
)


process.simpleSecondaryVertexHighPurBJetTagsCAHEPTopTagSubjetsPF = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('simpleSecondaryVertex3Trk'),
    tagInfos = cms.VInputTag(cms.InputTag("secondaryVertexTagInfosCAHEPTopTagSubjetsPF"))
)


process.simpleSecondaryVertexHighPurBJetTagsCATopTagPF = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('simpleSecondaryVertex3Trk'),
    tagInfos = cms.VInputTag(cms.InputTag("secondaryVertexTagInfosCATopTagPF"))
)


process.simpleSecondaryVertexHighPurBJetTagsCATopTagSubjetsPF = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('simpleSecondaryVertex3Trk'),
    tagInfos = cms.VInputTag(cms.InputTag("secondaryVertexTagInfosCATopTagSubjetsPF"))
)


process.simpleSecondaryVertexNegativeBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('simpleSecondaryVertex'),
    tagInfos = cms.VInputTag(cms.InputTag("secondaryVertexNegativeTagInfos"))
)


process.simpleSecondaryVertexNegativeHighEffBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('simpleSecondaryVertex2Trk'),
    tagInfos = cms.VInputTag(cms.InputTag("secondaryVertexNegativeTagInfos"))
)


process.simpleSecondaryVertexNegativeHighPurBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('simpleSecondaryVertex3Trk'),
    tagInfos = cms.VInputTag(cms.InputTag("secondaryVertexNegativeTagInfos"))
)


process.sisCone5GenJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(5),
    src = cms.InputTag("genParticlesForJets"),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(6.0),
    doRhoFastjet = cms.bool(False),
    srcPVs = cms.InputTag(""),
    inputEtMin = cms.double(0.0),
    doAreaFastjet = cms.bool(False),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.5),
    jetPtMin = cms.double(3.0),
    inputEMin = cms.double(0.0),
    jetType = cms.string('GenJet'),
    doPUOffsetCorr = cms.bool(False),
    radiusPU = cms.double(0.5),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    jetAlgorithm = cms.string('SISCone'),
    rParam = cms.double(0.5)
)


process.sisCone5GenJetsNoMuNoNu = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(5),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(6.0),
    maxBadHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('GenJet'),
    minSeed = cms.uint32(14327),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('SISCone'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.5),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.5),
    maxProblematicHcalCells = cms.uint32(9999999),
    src = cms.InputTag("genParticlesForJetsNoMuNoNu"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.sisCone5GenJetsNoNu = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(5),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(6.0),
    maxBadHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('GenJet'),
    minSeed = cms.uint32(14327),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('SISCone'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.5),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.5),
    maxProblematicHcalCells = cms.uint32(9999999),
    src = cms.InputTag("genParticlesForJetsNoNu"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.sisCone7GenJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(5),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(6.0),
    maxBadHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('GenJet'),
    minSeed = cms.uint32(14327),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('SISCone'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.5),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.7),
    maxProblematicHcalCells = cms.uint32(9999999),
    src = cms.InputTag("genParticlesForJets"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.sisCone7GenJetsNoMuNoNu = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(5),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(6.0),
    maxBadHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('GenJet'),
    minSeed = cms.uint32(14327),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('SISCone'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.5),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.7),
    maxProblematicHcalCells = cms.uint32(9999999),
    src = cms.InputTag("genParticlesForJetsNoMuNoNu"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.sisCone7GenJetsNoNu = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(5),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(6.0),
    maxBadHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('GenJet'),
    minSeed = cms.uint32(14327),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('SISCone'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.5),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.7),
    maxProblematicHcalCells = cms.uint32(9999999),
    src = cms.InputTag("genParticlesForJetsNoNu"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.softMuonTagInfos = cms.EDProducer("SoftLepton",
    muonSelection = cms.uint32(1),
    leptons = cms.InputTag("muons"),
    primaryVertex = cms.InputTag("offlinePrimaryVertices"),
    leptonCands = cms.InputTag(""),
    leptonId = cms.InputTag(""),
    refineJetAxis = cms.uint32(0),
    jets = cms.InputTag("ak5CaloJets"),
    leptonDeltaRCut = cms.double(0.4),
    leptonChi2Cut = cms.double(9999.0)
)


process.softPFElectronBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('softPFElectron'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFElectronsTagInfos"))
)


process.softPFElectronByIP2dBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('softPFElectronByIP2d'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFElectronsTagInfos"))
)


process.softPFElectronByIP3dBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('softPFElectronByIP3d'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFElectronsTagInfos"))
)


process.softPFElectronByPtBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('softPFElectronByPt'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFElectronsTagInfos"))
)


process.softPFElectronsTagInfos = cms.EDProducer("SoftPFElectronTagInfoProducer",
    jets = cms.InputTag("ak5PFJets"),
    primaryVertex = cms.InputTag("offlinePrimaryVertices")
)


process.softPFMuonBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('softPFMuon'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFMuonsTagInfos"))
)


process.softPFMuonByIP2dBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('softPFMuonByIP2d'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFMuonsTagInfos"))
)


process.softPFMuonByIP3dBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('softPFMuonByIP3d'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFMuonsTagInfos"))
)


process.softPFMuonByPtBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('softPFMuonByPt'),
    tagInfos = cms.VInputTag(cms.InputTag("softPFMuonsTagInfos"))
)


process.softPFMuonsTagInfos = cms.EDProducer("SoftPFMuonTagInfoProducer",
    MuonId = cms.int32(0),
    jets = cms.InputTag("ak5PFJets"),
    primaryVertex = cms.InputTag("offlinePrimaryVertices")
)


process.tauGenJetMatch = cms.EDProducer("GenJetMatcher",
    src = cms.InputTag("hpsPFTauProducer"),
    maxDPtRel = cms.double(3.0),
    mcPdgId = cms.vint32(),
    mcStatus = cms.vint32(),
    resolveByMatchQuality = cms.bool(False),
    maxDeltaR = cms.double(0.1),
    checkCharge = cms.bool(False),
    resolveAmbiguities = cms.bool(True),
    matched = cms.InputTag("tauGenJetsSelectorAllHadrons")
)


process.tauGenJetMatchPFlow = cms.EDProducer("GenJetMatcher",
    src = cms.InputTag("hpsPFTauProducerPFlow"),
    maxDPtRel = cms.double(3.0),
    mcPdgId = cms.vint32(),
    mcStatus = cms.vint32(),
    resolveByMatchQuality = cms.bool(False),
    maxDeltaR = cms.double(0.1),
    checkCharge = cms.bool(False),
    resolveAmbiguities = cms.bool(True),
    matched = cms.InputTag("tauGenJetsSelectorAllHadronsPFlow")
)


process.tauGenJetMatchPFlowLoose = cms.EDProducer("GenJetMatcher",
    src = cms.InputTag("hpsPFTauProducerPFlowLoose"),
    maxDPtRel = cms.double(3.0),
    mcPdgId = cms.vint32(),
    mcStatus = cms.vint32(),
    resolveByMatchQuality = cms.bool(False),
    maxDeltaR = cms.double(0.1),
    checkCharge = cms.bool(False),
    resolveAmbiguities = cms.bool(True),
    matched = cms.InputTag("tauGenJetsSelectorAllHadronsPFlowLoose")
)


process.tauGenJets = cms.EDProducer("TauGenJetProducer",
    includeNeutrinos = cms.bool(False),
    GenParticles = cms.InputTag("genParticles"),
    verbose = cms.untracked.bool(False)
)


process.tauGenJetsPFlow = cms.EDProducer("TauGenJetProducer",
    includeNeutrinos = cms.bool(False),
    GenParticles = cms.InputTag("genParticles"),
    verbose = cms.untracked.bool(False)
)


process.tauGenJetsPFlowLoose = cms.EDProducer("TauGenJetProducer",
    includeNeutrinos = cms.bool(False),
    GenParticles = cms.InputTag("genParticles"),
    verbose = cms.untracked.bool(False)
)


process.tauIsoDepositPFCandidates = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("hpsPFTauProducer"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(10000.0),
        ComponentName = cms.string('PFTauExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(10000.0),
        dRvetoPFTauSignalConeConstituents = cms.double(0.01),
        tauSource = cms.InputTag("hpsPFTauProducer"),
        DR_Veto = cms.double(0.0),
        DepositLabel = cms.untracked.string(''),
        candidateSource = cms.InputTag("particleFlow"),
        dRmatchPFTau = cms.double(0.1)
    )
)


process.tauIsoDepositPFCandidatesPFlow = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("hpsPFTauProducerPFlow"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(10000.0),
        ComponentName = cms.string('PFTauExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(10000.0),
        dRvetoPFTauSignalConeConstituents = cms.double(0.01),
        tauSource = cms.InputTag("hpsPFTauProducerPFlow"),
        DR_Veto = cms.double(0.0),
        DepositLabel = cms.untracked.string(''),
        candidateSource = cms.InputTag("particleFlow"),
        dRmatchPFTau = cms.double(0.1)
    )
)


process.tauIsoDepositPFCandidatesPFlowLoose = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("hpsPFTauProducerPFlowLoose"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(10000.0),
        ComponentName = cms.string('PFTauExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(10000.0),
        dRvetoPFTauSignalConeConstituents = cms.double(0.01),
        tauSource = cms.InputTag("hpsPFTauProducerPFlowLoose"),
        DR_Veto = cms.double(0.0),
        DepositLabel = cms.untracked.string(''),
        candidateSource = cms.InputTag("particleFlow"),
        dRmatchPFTau = cms.double(0.1)
    )
)


process.tauIsoDepositPFChargedHadrons = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("hpsPFTauProducer"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(0.2),
        ComponentName = cms.string('PFTauExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(0.1),
        dRvetoPFTauSignalConeConstituents = cms.double(0.01),
        tauSource = cms.InputTag("hpsPFTauProducer"),
        DR_Veto = cms.double(0.0),
        DepositLabel = cms.untracked.string(''),
        candidateSource = cms.InputTag("pfAllChargedHadrons"),
        dRmatchPFTau = cms.double(0.1)
    )
)


process.tauIsoDepositPFChargedHadronsPFlow = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("hpsPFTauProducerPFlow"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(0.2),
        ComponentName = cms.string('PFTauExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(0.1),
        dRvetoPFTauSignalConeConstituents = cms.double(0.01),
        tauSource = cms.InputTag("hpsPFTauProducerPFlow"),
        DR_Veto = cms.double(0.0),
        DepositLabel = cms.untracked.string(''),
        candidateSource = cms.InputTag("pfAllChargedHadronsPFlow"),
        dRmatchPFTau = cms.double(0.1)
    )
)


process.tauIsoDepositPFChargedHadronsPFlowLoose = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("hpsPFTauProducerPFlowLoose"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(0.2),
        ComponentName = cms.string('PFTauExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(0.1),
        dRvetoPFTauSignalConeConstituents = cms.double(0.01),
        tauSource = cms.InputTag("hpsPFTauProducerPFlowLoose"),
        DR_Veto = cms.double(0.0),
        DepositLabel = cms.untracked.string(''),
        candidateSource = cms.InputTag("pfAllChargedHadronsPFlowLoose"),
        dRmatchPFTau = cms.double(0.1)
    )
)


process.tauIsoDepositPFGammas = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("hpsPFTauProducer"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(10000.0),
        ComponentName = cms.string('PFTauExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(10000.0),
        dRvetoPFTauSignalConeConstituents = cms.double(0.01),
        tauSource = cms.InputTag("hpsPFTauProducer"),
        DR_Veto = cms.double(0.0),
        DepositLabel = cms.untracked.string(''),
        candidateSource = cms.InputTag("pfAllPhotons"),
        dRmatchPFTau = cms.double(0.1)
    )
)


process.tauIsoDepositPFGammasPFlow = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("hpsPFTauProducerPFlow"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(10000.0),
        ComponentName = cms.string('PFTauExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(10000.0),
        dRvetoPFTauSignalConeConstituents = cms.double(0.01),
        tauSource = cms.InputTag("hpsPFTauProducerPFlow"),
        DR_Veto = cms.double(0.0),
        DepositLabel = cms.untracked.string(''),
        candidateSource = cms.InputTag("pfAllPhotonsPFlow"),
        dRmatchPFTau = cms.double(0.1)
    )
)


process.tauIsoDepositPFGammasPFlowLoose = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("hpsPFTauProducerPFlowLoose"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(10000.0),
        ComponentName = cms.string('PFTauExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(10000.0),
        dRvetoPFTauSignalConeConstituents = cms.double(0.01),
        tauSource = cms.InputTag("hpsPFTauProducerPFlowLoose"),
        DR_Veto = cms.double(0.0),
        DepositLabel = cms.untracked.string(''),
        candidateSource = cms.InputTag("pfAllPhotonsPFlowLoose"),
        dRmatchPFTau = cms.double(0.1)
    )
)


process.tauIsoDepositPFNeutralHadrons = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("hpsPFTauProducer"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(10000.0),
        ComponentName = cms.string('PFTauExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(10000.0),
        dRvetoPFTauSignalConeConstituents = cms.double(0.01),
        tauSource = cms.InputTag("hpsPFTauProducer"),
        DR_Veto = cms.double(0.0),
        DepositLabel = cms.untracked.string(''),
        candidateSource = cms.InputTag("pfAllNeutralHadrons"),
        dRmatchPFTau = cms.double(0.1)
    )
)


process.tauIsoDepositPFNeutralHadronsPFlow = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("hpsPFTauProducerPFlow"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(10000.0),
        ComponentName = cms.string('PFTauExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(10000.0),
        dRvetoPFTauSignalConeConstituents = cms.double(0.01),
        tauSource = cms.InputTag("hpsPFTauProducerPFlow"),
        DR_Veto = cms.double(0.0),
        DepositLabel = cms.untracked.string(''),
        candidateSource = cms.InputTag("pfAllNeutralHadronsPFlow"),
        dRmatchPFTau = cms.double(0.1)
    )
)


process.tauIsoDepositPFNeutralHadronsPFlowLoose = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("hpsPFTauProducerPFlowLoose"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(10000.0),
        ComponentName = cms.string('PFTauExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(10000.0),
        dRvetoPFTauSignalConeConstituents = cms.double(0.01),
        tauSource = cms.InputTag("hpsPFTauProducerPFlowLoose"),
        DR_Veto = cms.double(0.0),
        DepositLabel = cms.untracked.string(''),
        candidateSource = cms.InputTag("pfAllNeutralHadronsPFlowLoose"),
        dRmatchPFTau = cms.double(0.1)
    )
)


process.tauMatch = cms.EDProducer("MCMatcher",
    src = cms.InputTag("hpsPFTauProducer"),
    maxDPtRel = cms.double(999.9),
    mcPdgId = cms.vint32(15),
    mcStatus = cms.vint32(2),
    resolveByMatchQuality = cms.bool(False),
    maxDeltaR = cms.double(999.9),
    checkCharge = cms.bool(True),
    resolveAmbiguities = cms.bool(True),
    matched = cms.InputTag("genParticles")
)


process.tauMatchPFlow = cms.EDProducer("MCMatcher",
    src = cms.InputTag("hpsPFTauProducerPFlow"),
    maxDPtRel = cms.double(999.9),
    mcPdgId = cms.vint32(15),
    mcStatus = cms.vint32(2),
    resolveByMatchQuality = cms.bool(False),
    maxDeltaR = cms.double(999.9),
    checkCharge = cms.bool(True),
    resolveAmbiguities = cms.bool(True),
    matched = cms.InputTag("genParticles")
)


process.tauMatchPFlowLoose = cms.EDProducer("MCMatcher",
    src = cms.InputTag("hpsPFTauProducerPFlowLoose"),
    maxDPtRel = cms.double(999.9),
    mcPdgId = cms.vint32(15),
    mcStatus = cms.vint32(2),
    resolveByMatchQuality = cms.bool(False),
    maxDeltaR = cms.double(999.9),
    checkCharge = cms.bool(True),
    resolveAmbiguities = cms.bool(True),
    matched = cms.InputTag("genParticles")
)


process.trackCountingHighEffBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('trackCounting3D2nd'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"))
)


process.trackCountingHighEffBJetTagsAODPFlow = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('trackCounting3D2nd'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfosAODPFlow"))
)


process.trackCountingHighEffBJetTagsAODPFlowLoose = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('trackCounting3D2nd'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfosAODPFlowLoose"))
)


process.trackCountingHighEffBJetTagsCA15MassDropFilteredPF = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('trackCounting3D2nd'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfosCA15MassDropFilteredPF"))
)


process.trackCountingHighEffBJetTagsCA15MassDropFilteredSubjetsPF = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('trackCounting3D2nd'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfosCA15MassDropFilteredSubjetsPF"))
)


process.trackCountingHighEffBJetTagsCA8PF = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('trackCounting3D2nd'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfosCA8PF"))
)


process.trackCountingHighEffBJetTagsCA8PrunedPF = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('trackCounting3D2nd'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfosCA8PrunedPF"))
)


process.trackCountingHighEffBJetTagsCA8PrunedSubjetsPF = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('trackCounting3D2nd'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfosCA8PrunedSubjetsPF"))
)


process.trackCountingHighEffBJetTagsCAHEPTopTagPF = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('trackCounting3D2nd'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfosCAHEPTopTagPF"))
)


process.trackCountingHighEffBJetTagsCAHEPTopTagSubjetsPF = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('trackCounting3D2nd'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfosCAHEPTopTagSubjetsPF"))
)


process.trackCountingHighEffBJetTagsCATopTagPF = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('trackCounting3D2nd'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfosCATopTagPF"))
)


process.trackCountingHighEffBJetTagsCATopTagSubjetsPF = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('trackCounting3D2nd'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfosCATopTagSubjetsPF"))
)


process.trackCountingHighPurBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('trackCounting3D3rd'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"))
)


process.trackCountingHighPurBJetTagsAODPFlow = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('trackCounting3D3rd'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfosAODPFlow"))
)


process.trackCountingHighPurBJetTagsAODPFlowLoose = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('trackCounting3D3rd'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfosAODPFlowLoose"))
)


process.trackCountingHighPurBJetTagsCA15MassDropFilteredPF = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('trackCounting3D3rd'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfosCA15MassDropFilteredPF"))
)


process.trackCountingHighPurBJetTagsCA15MassDropFilteredSubjetsPF = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('trackCounting3D3rd'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfosCA15MassDropFilteredSubjetsPF"))
)


process.trackCountingHighPurBJetTagsCA8PF = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('trackCounting3D3rd'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfosCA8PF"))
)


process.trackCountingHighPurBJetTagsCA8PrunedPF = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('trackCounting3D3rd'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfosCA8PrunedPF"))
)


process.trackCountingHighPurBJetTagsCA8PrunedSubjetsPF = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('trackCounting3D3rd'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfosCA8PrunedSubjetsPF"))
)


process.trackCountingHighPurBJetTagsCAHEPTopTagPF = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('trackCounting3D3rd'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfosCAHEPTopTagPF"))
)


process.trackCountingHighPurBJetTagsCAHEPTopTagSubjetsPF = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('trackCounting3D3rd'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfosCAHEPTopTagSubjetsPF"))
)


process.trackCountingHighPurBJetTagsCATopTagPF = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('trackCounting3D3rd'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfosCATopTagPF"))
)


process.trackCountingHighPurBJetTagsCATopTagSubjetsPF = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('trackCounting3D3rd'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfosCATopTagSubjetsPF"))
)


process.trackToVertexAssociation = cms.EDProducer("PF_PU_AssoMap",
    ConversionsCollection = cms.InputTag("allConversions"),
    nTrackWeight = cms.double(0.001),
    BeamSpot = cms.InputTag("offlineBeamSpot"),
    GetCleanedCollections = cms.bool(False),
    V0KshortCollection = cms.InputTag("generalV0Candidates","Kshort"),
    V0LambdaCollection = cms.InputTag("generalV0Candidates","Lambda"),
    TrackCollection = cms.InputTag("generalTracks"),
    FinalAssociation = cms.untracked.int32(1),
    VertexCollection = cms.InputTag("offlinePrimaryVertices"),
    NIVertexCollection = cms.InputTag("particleFlowDisplacedVertex"),
    AssociationType = cms.InputTag("TracksToVertex"),
    ignoreMissingCollection = cms.bool(True),
    doReassociation = cms.bool(True),
    MaxNumberOfAssociations = cms.int32(1)
)


process.trackVertexArbitrator = cms.EDProducer("TrackVertexArbitrator",
    dLenFraction = cms.double(0.333),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    distCut = cms.double(0.04),
    secondaryVertices = cms.InputTag("vertexMerger"),
    dRCut = cms.double(0.4),
    primaryVertices = cms.InputTag("offlinePrimaryVertices"),
    tracks = cms.InputTag("generalTracks"),
    sigCut = cms.double(5)
)


process.vertexMerger = cms.EDProducer("VertexMerger",
    minSignificance = cms.double(2),
    secondaryVertices = cms.InputTag("inclusiveVertexFinder"),
    maxFraction = cms.double(0.7)
)


process.CSCTightHaloFilter = cms.EDFilter("CSCTightHaloFilter",
    taggingMode = cms.bool(False)
)


process.EcalDeadCellTriggerPrimitiveFilter = cms.EDFilter("EcalDeadCellTriggerPrimitiveFilter",
    maskedEcalChannelStatusThreshold = cms.int32(1),
    ebReducedRecHitCollection = cms.InputTag("reducedEcalRecHitsEB"),
    etValToBeFlagged = cms.double(63.75),
    eeReducedRecHitCollection = cms.InputTag("reducedEcalRecHitsEE"),
    profileRootName = cms.untracked.string('deadCellFilterProfile.root'),
    doEEfilter = cms.untracked.bool(True),
    makeProfileRoot = cms.untracked.bool(False),
    taggingMode = cms.bool(False),
    debug = cms.bool(False),
    tpDigiCollection = cms.InputTag("ecalTPSkimNA"),
    verbose = cms.int32(1)
)


process.HBHENoiseFilter = cms.EDFilter("HBHENoiseFilter",
    IgnoreTS4TS5ifJetInLowBVRegion = cms.bool(False),
    jetlabel = cms.InputTag("ak5PFJets"),
    maxNHF = cms.double(0.9),
    minHPDHits = cms.int32(17),
    maxjetindex = cms.int32(0),
    minIsolatedNoiseSumE = cms.double(50.0),
    minHighEHitTime = cms.double(-9999.0),
    minHPDNoOtherHits = cms.int32(10),
    useTS4TS5 = cms.bool(True),
    noiselabel = cms.InputTag("hcalnoise"),
    minZeros = cms.int32(10),
    minNumIsolatedNoiseChannels = cms.int32(10),
    maxRatio = cms.double(999.0),
    maxHighEHitTime = cms.double(9999.0),
    maxRBXEMF = cms.double(-999.0),
    minRBXHits = cms.int32(999),
    minIsolatedNoiseSumEt = cms.double(25.0),
    minRatio = cms.double(-999.0)
)


process.bVertexFilter = cms.EDFilter("BVertexFilter",
    primaryVertices = cms.InputTag("offlinePrimaryVertices"),
    minVertices = cms.int32(0),
    useVertexKinematicAsJetAxis = cms.bool(True),
    vertexFilter = cms.PSet(
        distSig3dMax = cms.double(99999.9),
        fracPV = cms.double(0.65),
        distVal2dMax = cms.double(2.5),
        useTrackWeights = cms.bool(True),
        maxDeltaRToJetAxis = cms.double(0.1),
        v0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        ),
        distSig2dMin = cms.double(3.0),
        multiplicityMin = cms.uint32(2),
        massMax = cms.double(6.5),
        distSig2dMax = cms.double(99999.9),
        distVal3dMax = cms.double(99999.9),
        minimumTrackWeight = cms.double(0.5),
        distVal3dMin = cms.double(-99999.9),
        distVal2dMin = cms.double(0.01),
        distSig3dMin = cms.double(-99999.9)
    ),
    secondaryVertices = cms.InputTag("secondaryVertices")
)


process.countPatElectrons = cms.EDFilter("PATCandViewCountFilter",
    maxNumber = cms.uint32(999999),
    src = cms.InputTag("selectedPatElectrons"),
    minNumber = cms.uint32(0)
)


process.countPatElectronsPFlow = cms.EDFilter("PATCandViewCountFilter",
    maxNumber = cms.uint32(999999),
    src = cms.InputTag("selectedPatElectronsPFlow"),
    minNumber = cms.uint32(0)
)


process.countPatElectronsPFlowLoose = cms.EDFilter("PATCandViewCountFilter",
    maxNumber = cms.uint32(999999),
    src = cms.InputTag("selectedPatElectronsPFlowLoose"),
    minNumber = cms.uint32(0)
)


process.countPatJets = cms.EDFilter("PATCandViewCountFilter",
    maxNumber = cms.uint32(999999),
    src = cms.InputTag("selectedPatJets"),
    minNumber = cms.uint32(0)
)


process.countPatJetsPFlow = cms.EDFilter("PATCandViewCountFilter",
    maxNumber = cms.uint32(999999),
    src = cms.InputTag("selectedPatJetsPFlow"),
    minNumber = cms.uint32(0)
)


process.countPatJetsPFlowLoose = cms.EDFilter("PATCandViewCountFilter",
    maxNumber = cms.uint32(999999),
    src = cms.InputTag("selectedPatJetsPFlowLoose"),
    minNumber = cms.uint32(0)
)


process.countPatLeptons = cms.EDFilter("PATLeptonCountFilter",
    maxNumber = cms.uint32(999999),
    countElectrons = cms.bool(True),
    muonSource = cms.InputTag("cleanPatMuons"),
    minNumber = cms.uint32(0),
    electronSource = cms.InputTag("cleanPatElectrons"),
    tauSource = cms.InputTag("cleanPatTaus"),
    countTaus = cms.bool(False),
    countMuons = cms.bool(True)
)


process.countPatLeptonsPFlow = cms.EDFilter("PATLeptonCountFilter",
    maxNumber = cms.uint32(999999),
    countElectrons = cms.bool(True),
    muonSource = cms.InputTag("selectedPatMuonsPFlow"),
    minNumber = cms.uint32(0),
    electronSource = cms.InputTag("selectedPatElectronsPFlow"),
    tauSource = cms.InputTag("selectedPatTausPFlow"),
    countTaus = cms.bool(False),
    countMuons = cms.bool(True)
)


process.countPatLeptonsPFlowLoose = cms.EDFilter("PATLeptonCountFilter",
    maxNumber = cms.uint32(999999),
    countElectrons = cms.bool(True),
    muonSource = cms.InputTag("selectedPatMuonsPFlowLoose"),
    minNumber = cms.uint32(0),
    electronSource = cms.InputTag("selectedPatElectronsPFlowLoose"),
    tauSource = cms.InputTag("selectedPatTausPFlowLoose"),
    countTaus = cms.bool(False),
    countMuons = cms.bool(True)
)


process.countPatMuons = cms.EDFilter("PATCandViewCountFilter",
    maxNumber = cms.uint32(999999),
    src = cms.InputTag("selectedPatMuons"),
    minNumber = cms.uint32(0)
)


process.countPatMuonsPFlow = cms.EDFilter("PATCandViewCountFilter",
    maxNumber = cms.uint32(999999),
    src = cms.InputTag("selectedPatMuonsPFlow"),
    minNumber = cms.uint32(0)
)


process.countPatMuonsPFlowLoose = cms.EDFilter("PATCandViewCountFilter",
    maxNumber = cms.uint32(999999),
    src = cms.InputTag("selectedPatMuonsPFlowLoose"),
    minNumber = cms.uint32(0)
)


process.countPatPFParticlesPFlow = cms.EDFilter("PATCandViewCountFilter",
    maxNumber = cms.uint32(999999),
    src = cms.InputTag("patPFParticlesPFlow"),
    minNumber = cms.uint32(0)
)


process.countPatPFParticlesPFlowLoose = cms.EDFilter("PATCandViewCountFilter",
    maxNumber = cms.uint32(999999),
    src = cms.InputTag("patPFParticlesPFlowLoose"),
    minNumber = cms.uint32(0)
)


process.countPatPhotons = cms.EDFilter("PATCandViewCountFilter",
    maxNumber = cms.uint32(999999),
    src = cms.InputTag("selectedPatPhotons"),
    minNumber = cms.uint32(0)
)


process.countPatPhotonsPFlow = cms.EDFilter("PATCandViewCountFilter",
    maxNumber = cms.uint32(999999),
    src = cms.InputTag("selectedPatPhotonsPFlow"),
    minNumber = cms.uint32(0)
)


process.countPatPhotonsPFlowLoose = cms.EDFilter("PATCandViewCountFilter",
    maxNumber = cms.uint32(999999),
    src = cms.InputTag("selectedPatPhotonsPFlowLoose"),
    minNumber = cms.uint32(0)
)


process.countPatTaus = cms.EDFilter("PATCandViewCountFilter",
    maxNumber = cms.uint32(999999),
    src = cms.InputTag("selectedPatTaus"),
    minNumber = cms.uint32(0)
)


process.countPatTausPFlow = cms.EDFilter("PATCandViewCountFilter",
    maxNumber = cms.uint32(999999),
    src = cms.InputTag("selectedPatTausPFlow"),
    minNumber = cms.uint32(0)
)


process.countPatTausPFlowLoose = cms.EDFilter("PATCandViewCountFilter",
    maxNumber = cms.uint32(999999),
    src = cms.InputTag("selectedPatTausPFlowLoose"),
    minNumber = cms.uint32(0)
)


process.ecalLaserCorrFilter = cms.EDFilter("EcalLaserCorrFilter",
    EBEnegyMIN = cms.double(10.0),
    EBLaserMAX = cms.double(3.0),
    EELaserMIN = cms.double(0.3),
    EELaserMAX = cms.double(8.0),
    EEEnegyMIN = cms.double(10.0),
    EBRecHitSource = cms.InputTag("reducedEcalRecHitsEB"),
    EBLaserMIN = cms.double(0.3),
    EERecHitSource = cms.InputTag("reducedEcalRecHitsEE"),
    taggingMode = cms.bool(False),
    Debug = cms.bool(False)
)


process.eeBadScFilter = cms.EDFilter("EEBadScFilter",
    SCsize = cms.int32(5),
    badscEE = cms.vint32(-1023023, 1048098, -1078063),
    EtminSC = cms.double(1000.0),
    EminHit = cms.double(1000.0),
    EERecHitSource = cms.InputTag("reducedEcalRecHitsEE"),
    taggingMode = cms.bool(False),
    debug = cms.bool(False),
    nBadHitsSC = cms.int32(2)
)


process.flavorHistoryFilter = cms.EDFilter("FlavorHistoryFilter",
    bsrc = cms.InputTag("bFlavorHistoryProducer","bPartonFlavorHistory"),
    pathToSelect = cms.int32(-1),
    csrc = cms.InputTag("cFlavorHistoryProducer","cPartonFlavorHistory"),
    dr = cms.double(0.5),
    verbose = cms.bool(False)
)


process.goodOfflinePrimaryVertices = cms.EDFilter("PrimaryVertexObjectFilter",
    src = cms.InputTag("offlinePrimaryVertices"),
    filterParams = cms.PSet(
        maxZ = cms.double(24.0),
        minNdof = cms.double(4.0),
        NPV = cms.int32(1),
        maxRho = cms.double(2.0),
        pvSrc = cms.InputTag("offlinePrimaryVertices")
    )
)


process.goodPatJetsCA15FilteredPF = cms.EDFilter("PFJetIDSelectionFunctorFilter",
    src = cms.InputTag("selectedPatJetsCA15FilteredPF"),
    filterParams = cms.PSet(
        version = cms.string('FIRSTDATA'),
        quality = cms.string('LOOSE')
    )
)


process.goodPatJetsCA15MassDropFilteredPF = cms.EDFilter("PFJetIDSelectionFunctorFilter",
    src = cms.InputTag("selectedPatJetsCA15MassDropFilteredPF"),
    filterParams = cms.PSet(
        version = cms.string('FIRSTDATA'),
        quality = cms.string('LOOSE')
    )
)


process.goodPatJetsCA8PF = cms.EDFilter("PFJetIDSelectionFunctorFilter",
    src = cms.InputTag("selectedPatJetsCA8PF"),
    filterParams = cms.PSet(
        version = cms.string('FIRSTDATA'),
        quality = cms.string('LOOSE')
    )
)


process.goodPatJetsCA8PrunedPF = cms.EDFilter("PFJetIDSelectionFunctorFilter",
    src = cms.InputTag("selectedPatJetsCA8PrunedPF"),
    filterParams = cms.PSet(
        version = cms.string('FIRSTDATA'),
        quality = cms.string('LOOSE')
    )
)


process.goodPatJetsCAHEPTopTagPF = cms.EDFilter("PFJetIDSelectionFunctorFilter",
    src = cms.InputTag("selectedPatJetsCAHEPTopTagPF"),
    filterParams = cms.PSet(
        version = cms.string('FIRSTDATA'),
        quality = cms.string('LOOSE')
    )
)


process.goodPatJetsCATopTagPF = cms.EDFilter("PFJetIDSelectionFunctorFilter",
    src = cms.InputTag("selectedPatJetsCATopTagPF"),
    filterParams = cms.PSet(
        version = cms.string('FIRSTDATA'),
        quality = cms.string('LOOSE')
    )
)


process.goodPatJetsPFlow = cms.EDFilter("PFJetIDSelectionFunctorFilter",
    src = cms.InputTag("selectedPatJetsPFlow"),
    filterParams = cms.PSet(
        version = cms.string('FIRSTDATA'),
        quality = cms.string('LOOSE')
    )
)


process.goodVertices = cms.EDFilter("VertexSelector",
    filter = cms.bool(False),
    src = cms.InputTag("offlinePrimaryVertices"),
    cut = cms.string('!isFake && ndof > 4 && abs(z) <= 24 && position.rho < 2')
)


process.hcalLaserEventFilter = cms.EDFilter("HcalLaserEventFilter",
    vetoByHBHEOccupancy = cms.untracked.bool(True),
    maxerrormessage = cms.untracked.int32(5),
    forceUseRecHitCollection = cms.untracked.bool(False),
    forceUseHcalNoiseSummary = cms.untracked.bool(False),
    hbheInputLabel = cms.untracked.InputTag("hbhereco"),
    minOccupiedHBHE = cms.untracked.uint32(4000),
    taggingMode = cms.bool(False),
    debug = cms.untracked.bool(False),
    vetoByRunEventNumber = cms.untracked.bool(False),
    reverseFilter = cms.untracked.bool(False),
    BadRunEventNumbers = cms.untracked.vuint32( (160957, 146483131, 160957, 146483132, 160957, 
        367078426, 163289, 120704451, 163289, 120704452, 
        163332, 300924904, 163587, 5705088, 163588, 
        86700074, 163659, 269761831, 163659, 379050220, 
        165415, 696548170, 165415, 696548171, 165617, 
        295894671, 165617, 295894672, 165993, 120876169, 
        165993, 120876170, 166011, 58123616, 166011, 
        58123617, 166380, 833988349, 166380, 833988350, 
        166380, 874735805, 166380, 874735806, 166380, 
        915050480, 166380, 1037024294, 166512, 1222721981, 
        166512, 1222721982, 166563, 299342294, 166563, 
        299431306, 166563, 299431307, 166563, 299645965, 
        166699, 908134746, 166699, 908134747, 167281, 
        115904577, 167282, 286707493, 167282, 286707494, 
        167282, 286766119, 167282, 286766120, 167284, 
        44118160, 167284, 44118161, 167551, 365086623, 
        167551, 365086624, 167674, 59067344, 167674, 
        59067345, 167675, 227610655, 167675, 227610656, 
        167754, 73011356, 167754, 73011357, 167807, 
        1202030368, 167807, 1202030369, 167898, 568063754, 
        167898, 568063755, 167898, 718530727, 167969, 
        3462839, 167969, 3462840, 167969, 9442755, 
        167969, 9442756, 167969, 11435992, 167969, 
        11435993, 170255, 83361834, 170255, 83361835, 
        170304, 57541359, 170304, 57541360, 170854, 
        291050200, 170854, 291050201, 170854, 329611102, 
        170854, 329611103, 170899, 39787119, 170899, 
        39787120, 171091, 9021397, 171091, 9021398, 
        171091, 97261559, 171091, 97261560, 171156, 
        369378017, 171156, 369378018, 171897, 353709470, 
        172033, 412685841, 172033, 412685842, 172033, 
        885328695, 172033, 982705197, 172033, 982705198, 
        172163, 530358965, 172389, 45660388, 172389, 
        45660389, 172411, 173742880, 172411, 173742881, 
        172478, 53762243, 172478, 53762244, 172478, 
        54053290, 172478, 54092625, 172478, 54092626, 
        172478, 54092948, 172478, 98093904, 172478, 
        98093905, 172485, 424192588, 172485, 424192589, 
        172791, 966404647, 172802, 464891113, 172802, 
        464891114, 172802, 464892883, 172802, 464892884, 
        172819, 81201593, 172822, 1074244840, 172822, 
        2836941609, 172868, 393947631, 172868, 393947632, 
        172868, 1421063049, 172868, 1421063050, 172868, 
        1421076216, 172868, 1421076217, 172868, 2012432054, 
        172868, 2012432055, 172868, 2137890207, 172868, 
        2137890208, 173198, 741435194, 173198, 741435195, 
        173198, 1009198868, 173198, 1009198869, 173226, 
        781573, 173226, 781574, 173241, 746837625, 
        173241, 746837626, 173380, 21324672, 173380, 
        21324673, 173659, 128113809, 173659, 128113810, 
        173662, 10511470, 173662, 10511471, 173692, 
        755803939, 173692, 2597438478, 173692, 2597438479, 
        174809, 777532, 174809, 777533, 175560, 
        2368923, 175560, 2368924, 175560, 7580776, 
        175834, 105072341, 175834, 105072342, 175866, 
        343429213, 175866, 343429214, 175875, 182390835, 
        175875, 182390836, 175888, 49192628, 175888, 
        49192629, 175888, 128999776, 175888, 128999777, 
        175973, 122366434, 175973, 122366435, 175976, 
        80421989, 175976, 80421990, 175990, 6376426, 
        175990, 6376427, 175990, 75007084, 175990, 
        75007085, 175990, 146437701, 175990, 146437702, 
        176161, 15560079, 176161, 15560080, 176202, 
        119772380, 176202, 119772381, 176202, 324604001, 
        176202, 324604002, 176309, 233512658, 176309, 
        233512659, 176309, 935495115, 176309, 935495116, 
        176309, 1331935829, 176309, 1331935830, 176309, 
        2496631352, 176697, 403510, 176697, 403511, 
        176701, 73573187, 176701, 73573188, 176702, 
        11693970, 176702, 11693971, 176702, 67569367, 
        176702, 67569368, 176801, 410530622, 176929, 
        460082240, 176929, 460082241, 176954, 138469, 
        176954, 138470, 177053, 327815438, 177053, 
        327815439, 177074, 154911610, 177074, 154911611, 
        177140, 785923000, 177317, 72936561, 177317, 
        72936562, 177317, 73219012, 177317, 73219013, 
        177449, 275466422, 177449, 275466423, 177452, 
        226991391, 177452, 226991392, 177509, 99081581, 
        177509, 99081582, 177509, 314204437, 177509, 
        314204438, 177509, 314319381, 177509, 314319382, 
        177515, 291757022, 177515, 291757023, 177515, 
        1103056195, 177515, 1103056196, 177515, 1534353246, 
        177515, 1534353247, 177718, 890704274, 177718, 
        890704275, 177719, 294071879, 177719, 294071880, 
        177730, 1850737398, 177730, 1850737399, 177730, 
        2007600403, 177730, 2007600404, 177730, 2563818242, 
        177730, 2563818243, 177790, 507968788, 177790, 
        507968789, 177790, 772640382, 177790, 772640383, 
        177791, 89470582, 177791, 89470583, 177875, 
        647616276, 177875, 647616277, 178041, 783372, 
        178041, 783394, 178041, 783395, 178041, 
        784044, 178041, 784045, 178041, 784499, 
        178041, 784500, 178041, 784551, 178041, 
        784552, 178041, 786438, 178041, 786439, 
        178041, 786770, 178041, 786771, 178041, 
        787142, 178041, 787143, 178041, 787202, 
        178100, 898633273, 178100, 1566052885, 178100, 
        1566052886, 178116, 453801141, 178116, 453801142, 
        178424, 630485076, 178424, 630485077, 178667, 
        494184, 178667, 494185, 178667, 51504048, 
        178667, 51504049, 178825, 149780, 178825, 
        149781, 178866, 410333501, 178866, 410333502, 
        178866, 651783943, 178866, 651783944, 178871, 
        236100751, 178970, 660540406, 178970, 660540407, 
        178985, 85355292, 178985, 85355293, 179547, 
        21999275, 179547, 21999276, 179563, 143108913, 
        179563, 143108914, 179563, 391201547, 179563, 
        391201548, 180163, 7578238, 180163, 7578239, 
        180222, 6076323, 180222, 24642472, 180241, 
        500046589, 180241, 500562971, 180241, 500562972, 
        180250, 371542986, 180250, 371542987, 180275, 
        10578469, 180275, 10578470, 180275, 10583104, 
        180275, 10583105 ) ),
    hcalNoiseSummaryLabel = cms.untracked.InputTag("hcalnoise")
)


process.inclusiveMergedVerticesFiltered = cms.EDFilter("BVertexFilter",
    primaryVertices = cms.InputTag("offlinePrimaryVertices"),
    minVertices = cms.int32(0),
    useVertexKinematicAsJetAxis = cms.bool(True),
    vertexFilter = cms.PSet(
        distSig3dMax = cms.double(99999.9),
        fracPV = cms.double(0.65),
        distVal2dMax = cms.double(2.5),
        useTrackWeights = cms.bool(True),
        maxDeltaRToJetAxis = cms.double(0.1),
        v0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        ),
        distSig2dMin = cms.double(3.0),
        multiplicityMin = cms.uint32(2),
        massMax = cms.double(6.5),
        distSig2dMax = cms.double(99999.9),
        distVal3dMax = cms.double(99999.9),
        minimumTrackWeight = cms.double(0.5),
        distVal3dMin = cms.double(-99999.9),
        distVal2dMin = cms.double(0.01),
        distSig3dMin = cms.double(-99999.9)
    ),
    secondaryVertices = cms.InputTag("inclusiveMergedVertices")
)


process.logErrorTooManyClusters = cms.EDFilter("LogErrorEventFilter",
    src = cms.InputTag("logErrorHarvester"),
    maxErrorFractionInRun = cms.double(1.0),
    modulesToIgnore = cms.vstring('SeedGeneratorFromRegionHitsEDProducer:regionalCosmicTrackerSeeds', 
        'PhotonConversionTrajectorySeedProducerFromSingleLeg:photonConvTrajSeedFromSingleLeg'),
    maxErrorFractionInLumi = cms.double(1.0),
    maxSavedEventsPerLumiAndError = cms.uint32(100000),
    categoriesToWatch = cms.vstring('TooManyClusters')
)


process.logErrorTooManySeeds = cms.EDFilter("LogErrorEventFilter",
    src = cms.InputTag("logErrorHarvester"),
    maxErrorFractionInRun = cms.double(1.0),
    modulesToIgnore = cms.vstring('SeedGeneratorFromRegionHitsEDProducer:regionalCosmicTrackerSeeds'),
    maxErrorFractionInLumi = cms.double(1.0),
    maxSavedEventsPerLumiAndError = cms.uint32(100000),
    categoriesToWatch = cms.vstring('TooManySeeds')
)


process.logErrorTooManySeedsDefault = cms.EDFilter("LogErrorEventFilter",
    categoriesToWatch = cms.vstring('TooManySeeds'),
    maxErrorFractionInLumi = cms.double(1.0),
    maxErrorFractionInRun = cms.double(1.0),
    maxSavedEventsPerLumiAndError = cms.uint32(100000),
    src = cms.InputTag("logErrorHarvester")
)


process.logErrorTooManySeedsMainIterations = cms.EDFilter("LogErrorEventFilter",
    src = cms.InputTag("logErrorHarvester"),
    maxErrorFractionInRun = cms.double(1.0),
    categoriesToWatch = cms.vstring('TooManySeeds'),
    maxErrorFractionInLumi = cms.double(1.0),
    maxSavedEventsPerLumiAndError = cms.uint32(100000),
    modulesToWatch = cms.vstring('CkfTrackCandidateMaker:initialStepTrackCandidate', 
        'CkfTrackCandidateMaker:pixelPairTrackCandidate')
)


process.logErrorTooManyTripletsPairs = cms.EDFilter("LogErrorEventFilter",
    src = cms.InputTag("logErrorHarvester"),
    maxErrorFractionInRun = cms.double(1.0),
    modulesToIgnore = cms.vstring('SeedGeneratorFromRegionHitsEDProducer:regionalCosmicTrackerSeeds', 
        'PhotonConversionTrajectorySeedProducerFromSingleLeg:photonConvTrajSeedFromSingleLeg'),
    maxErrorFractionInLumi = cms.double(1.0),
    maxSavedEventsPerLumiAndError = cms.uint32(100000),
    categoriesToWatch = cms.vstring('TooManyTriplets', 
        'TooManyPairs', 
        'PixelTripletHLTGenerator')
)


process.logErrorTooManyTripletsPairsMainIterations = cms.EDFilter("LogErrorEventFilter",
    src = cms.InputTag("logErrorHarvester"),
    maxErrorFractionInRun = cms.double(1.0),
    categoriesToWatch = cms.vstring('TooManyTriplets', 
        'TooManyPairs', 
        'PixelTripletHLTGenerator'),
    maxErrorFractionInLumi = cms.double(1.0),
    maxSavedEventsPerLumiAndError = cms.uint32(100000),
    modulesToWatch = cms.vstring('SeedGeneratorFromRegionHitsEDProducer:initialStepSeeds', 
        'SeedGeneratorFromRegionHitsEDProducer:pixelPairStepSeeds')
)


process.manystripclus53X = cms.EDFilter("ByClusterSummaryMultiplicityPairEventFilter",
    cut = cms.string('( mult2 > 20000+7*mult1)'),
    multiplicityConfig = cms.PSet(
        secondMultiplicityConfig = cms.PSet(
            clusterSummaryCollection = cms.InputTag("clusterSummaryProducer"),
            subDetVariable = cms.string('cHits'),
            subDetEnum = cms.int32(0)
        ),
        firstMultiplicityConfig = cms.PSet(
            clusterSummaryCollection = cms.InputTag("clusterSummaryProducer"),
            subDetVariable = cms.string('pHits'),
            subDetEnum = cms.int32(5)
        )
    )
)


process.mvaNonTrigV0 = cms.EDFilter("ElectronIdMVAProducer",
    electronTag = cms.InputTag("gsfElectrons"),
    mvaWeightFile = cms.vstring('EgammaAnalysis/ElectronTools/data/Electrons_BDTG_NonTrigV0_Cat1.weights.xml', 
        'EgammaAnalysis/ElectronTools/data/Electrons_BDTG_NonTrigV0_Cat2.weights.xml', 
        'EgammaAnalysis/ElectronTools/data/Electrons_BDTG_NonTrigV0_Cat3.weights.xml', 
        'EgammaAnalysis/ElectronTools/data/Electrons_BDTG_NonTrigV0_Cat4.weights.xml', 
        'EgammaAnalysis/ElectronTools/data/Electrons_BDTG_NonTrigV0_Cat5.weights.xml', 
        'EgammaAnalysis/ElectronTools/data/Electrons_BDTG_NonTrigV0_Cat6.weights.xml'),
    NoIP = cms.bool(False),
    Trig = cms.bool(False),
    reducedEBRecHitCollection = cms.InputTag("reducedEcalRecHitsEB"),
    vertexTag = cms.InputTag("offlinePrimaryVertices"),
    reducedEERecHitCollection = cms.InputTag("reducedEcalRecHitsEE"),
    method = cms.string('BDT'),
    verbose = cms.untracked.bool(False)
)


process.mvaTrigNoIPV0 = cms.EDFilter("ElectronIdMVAProducer",
    electronTag = cms.InputTag("gsfElectrons"),
    mvaWeightFile = cms.vstring('EgammaAnalysis/ElectronTools/data/Electrons_BDTG_TrigNoIPV0_2012_Cat1.weights.xml', 
        'EgammaAnalysis/ElectronTools/data/Electrons_BDTG_TrigNoIPV0_2012_Cat2.weights.xml', 
        'EgammaAnalysis/ElectronTools/data/Electrons_BDTG_TrigNoIPV0_2012_Cat3.weights.xml', 
        'EgammaAnalysis/ElectronTools/data/Electrons_BDTG_TrigNoIPV0_2012_Cat4.weights.xml', 
        'EgammaAnalysis/ElectronTools/data/Electrons_BDTG_TrigNoIPV0_2012_Cat5.weights.xml', 
        'EgammaAnalysis/ElectronTools/data/Electrons_BDTG_TrigNoIPV0_2012_Cat6.weights.xml'),
    NoIP = cms.bool(True),
    Trig = cms.bool(True),
    reducedEBRecHitCollection = cms.InputTag("reducedEcalRecHitsEB"),
    vertexTag = cms.InputTag("offlinePrimaryVertices"),
    reducedEERecHitCollection = cms.InputTag("reducedEcalRecHitsEE"),
    method = cms.string('BDT'),
    verbose = cms.untracked.bool(False)
)


process.mvaTrigV0 = cms.EDFilter("ElectronIdMVAProducer",
    electronTag = cms.InputTag("gsfElectrons"),
    mvaWeightFile = cms.vstring('EgammaAnalysis/ElectronTools/data/Electrons_BDTG_TrigV0_Cat1.weights.xml', 
        'EgammaAnalysis/ElectronTools/data/Electrons_BDTG_TrigV0_Cat2.weights.xml', 
        'EgammaAnalysis/ElectronTools/data/Electrons_BDTG_TrigV0_Cat3.weights.xml', 
        'EgammaAnalysis/ElectronTools/data/Electrons_BDTG_TrigV0_Cat4.weights.xml', 
        'EgammaAnalysis/ElectronTools/data/Electrons_BDTG_TrigV0_Cat5.weights.xml', 
        'EgammaAnalysis/ElectronTools/data/Electrons_BDTG_TrigV0_Cat6.weights.xml'),
    NoIP = cms.bool(False),
    Trig = cms.bool(True),
    reducedEBRecHitCollection = cms.InputTag("reducedEcalRecHitsEB"),
    vertexTag = cms.InputTag("offlinePrimaryVertices"),
    reducedEERecHitCollection = cms.InputTag("reducedEcalRecHitsEE"),
    method = cms.string('BDT'),
    verbose = cms.untracked.bool(False)
)


process.noscraping = cms.EDFilter("FilterOutScraping",
    debugOn = cms.untracked.bool(False),
    thresh = cms.untracked.double(0.25),
    numtrack = cms.untracked.uint32(10),
    applyfilter = cms.untracked.bool(True)
)


process.pfAllChargedHadrons = cms.EDFilter("PdgIdPFCandidateSelector",
    pdgId = cms.vint32(211, -211, 321, -321, 999211, 
        2212, -2212),
    src = cms.InputTag("pfNoPileUpIso")
)


process.pfAllChargedHadronsPFlow = cms.EDFilter("PdgIdPFCandidateSelector",
    pdgId = cms.vint32(211, -211, 321, -321, 999211, 
        2212, -2212),
    src = cms.InputTag("pfNoPileUpIsoPFlow")
)


process.pfAllChargedHadronsPFlowLoose = cms.EDFilter("PdgIdPFCandidateSelector",
    pdgId = cms.vint32(211, -211, 321, -321, 999211, 
        2212, -2212),
    src = cms.InputTag("pfNoPileUpIsoPFlowLoose")
)


process.pfAllChargedParticles = cms.EDFilter("PdgIdPFCandidateSelector",
    pdgId = cms.vint32(211, -211, 321, -321, 999211, 
        2212, -2212, 11, -11, 13, 
        -13),
    src = cms.InputTag("pfNoPileUpIso")
)


process.pfAllChargedParticlesPFlow = cms.EDFilter("PdgIdPFCandidateSelector",
    pdgId = cms.vint32(211, -211, 321, -321, 999211, 
        2212, -2212, 11, -11, 13, 
        -13),
    src = cms.InputTag("pfNoPileUpIsoPFlow")
)


process.pfAllChargedParticlesPFlowLoose = cms.EDFilter("PdgIdPFCandidateSelector",
    pdgId = cms.vint32(211, -211, 321, -321, 999211, 
        2212, -2212, 11, -11, 13, 
        -13),
    src = cms.InputTag("pfNoPileUpIsoPFlowLoose")
)


process.pfAllElectrons = cms.EDFilter("PdgIdPFCandidateSelector",
    pdgId = cms.vint32(11, -11),
    src = cms.InputTag("pfNoMuon")
)


process.pfAllElectronsPFlow = cms.EDFilter("PdgIdPFCandidateSelector",
    pdgId = cms.vint32(11, -11),
    src = cms.InputTag("pfNoMuonPFlow")
)


process.pfAllElectronsPFlowLoose = cms.EDFilter("PdgIdPFCandidateSelector",
    pdgId = cms.vint32(11, -11),
    src = cms.InputTag("pfNoMuonPFlowLoose")
)


process.pfAllMuons = cms.EDFilter("PdgIdPFCandidateSelector",
    pdgId = cms.vint32(-13, 13),
    src = cms.InputTag("pfNoPileUp")
)


process.pfAllMuonsPFlow = cms.EDFilter("PdgIdPFCandidateSelector",
    pdgId = cms.vint32(-13, 13),
    src = cms.InputTag("pfNoPileUpPFlow")
)


process.pfAllMuonsPFlowLoose = cms.EDFilter("PdgIdPFCandidateSelector",
    pdgId = cms.vint32(-13, 13),
    src = cms.InputTag("pfNoPileUpPFlowLoose")
)


process.pfAllNeutralHadrons = cms.EDFilter("PdgIdPFCandidateSelector",
    pdgId = cms.vint32(111, 130, 310, 2112),
    src = cms.InputTag("pfNoPileUpIso")
)


process.pfAllNeutralHadronsAndPhotons = cms.EDFilter("PdgIdPFCandidateSelector",
    pdgId = cms.vint32(22, 111, 130, 310, 2112),
    src = cms.InputTag("pfNoPileUpIso")
)


process.pfAllNeutralHadronsAndPhotonsPFlow = cms.EDFilter("PdgIdPFCandidateSelector",
    pdgId = cms.vint32(22, 111, 130, 310, 2112),
    src = cms.InputTag("pfNoPileUpIsoPFlow")
)


process.pfAllNeutralHadronsAndPhotonsPFlowLoose = cms.EDFilter("PdgIdPFCandidateSelector",
    pdgId = cms.vint32(22, 111, 130, 310, 2112),
    src = cms.InputTag("pfNoPileUpIsoPFlowLoose")
)


process.pfAllNeutralHadronsPFlow = cms.EDFilter("PdgIdPFCandidateSelector",
    pdgId = cms.vint32(111, 130, 310, 2112),
    src = cms.InputTag("pfNoPileUpIsoPFlow")
)


process.pfAllNeutralHadronsPFlowLoose = cms.EDFilter("PdgIdPFCandidateSelector",
    pdgId = cms.vint32(111, 130, 310, 2112),
    src = cms.InputTag("pfNoPileUpIsoPFlowLoose")
)


process.pfAllPhotons = cms.EDFilter("PdgIdPFCandidateSelector",
    pdgId = cms.vint32(22),
    src = cms.InputTag("pfNoPileUpIso")
)


process.pfAllPhotonsPFlow = cms.EDFilter("PdgIdPFCandidateSelector",
    pdgId = cms.vint32(22),
    src = cms.InputTag("pfNoPileUpIsoPFlow")
)


process.pfAllPhotonsPFlowLoose = cms.EDFilter("PdgIdPFCandidateSelector",
    pdgId = cms.vint32(22),
    src = cms.InputTag("pfNoPileUpIsoPFlowLoose")
)


process.pfElectrons = cms.EDFilter("IsolatedPFCandidateSelector",
    src = cms.InputTag("pfSelectedElectrons"),
    isolationValueMapsCharged = cms.VInputTag(cms.InputTag("elPFIsoValueCharged04PFId")),
    deltaBetaIsolationValueMap = cms.InputTag("elPFIsoValuePU04PFId"),
    isRelative = cms.bool(True),
    isolationCut = cms.double(999),
    doDeltaBetaCorrection = cms.bool(False),
    deltaBetaFactor = cms.double(-0.5),
    isolationValueMapsNeutral = cms.VInputTag(cms.InputTag("elPFIsoValueNeutral04PFId"), cms.InputTag("elPFIsoValueGamma04PFId"))
)


process.pfElectronsFromVertex = cms.EDFilter("IPCutPFCandidateSelector",
    d0Cut = cms.double(0.2),
    src = cms.InputTag("pfAllElectrons"),
    dzSigCut = cms.double(99.0),
    d0SigCut = cms.double(99.0),
    vertices = cms.InputTag("offlinePrimaryVertices"),
    dzCut = cms.double(0.5)
)


process.pfElectronsFromVertexPFlow = cms.EDFilter("IPCutPFCandidateSelector",
    d0Cut = cms.double(0.2),
    src = cms.InputTag("pfAllElectronsPFlow"),
    dzSigCut = cms.double(99.0),
    vertices = cms.InputTag("goodOfflinePrimaryVertices"),
    d0SigCut = cms.double(99.0),
    dzCut = cms.double(0.5)
)


process.pfElectronsFromVertexPFlowLoose = cms.EDFilter("IPCutPFCandidateSelector",
    d0Cut = cms.double(0.2),
    src = cms.InputTag("pfAllElectronsPFlowLoose"),
    dzSigCut = cms.double(99.0),
    vertices = cms.InputTag("goodOfflinePrimaryVertices"),
    d0SigCut = cms.double(99.0),
    dzCut = cms.double(0.5)
)


process.pfElectronsPFlow = cms.EDFilter("IsolatedPFCandidateSelector",
    src = cms.InputTag("pfSelectedElectronsPFlow"),
    isolationValueMapsCharged = cms.VInputTag(cms.InputTag("elPFIsoValueCharged03PFIdPFlow")),
    deltaBetaIsolationValueMap = cms.InputTag("elPFIsoValuePU03PFIdPFlow"),
    isRelative = cms.bool(True),
    isolationCut = cms.double(999),
    doDeltaBetaCorrection = cms.bool(False),
    deltaBetaFactor = cms.double(-0.5),
    isolationValueMapsNeutral = cms.VInputTag(cms.InputTag("elPFIsoValueNeutral03PFIdPFlow"), cms.InputTag("elPFIsoValueGamma03PFIdPFlow"))
)


process.pfElectronsPFlowLoose = cms.EDFilter("IsolatedPFCandidateSelector",
    src = cms.InputTag("pfSelectedElectronsPFlowLoose"),
    isolationValueMapsCharged = cms.VInputTag(cms.InputTag("elPFIsoValueCharged03PFIdPFlowLoose")),
    deltaBetaIsolationValueMap = cms.InputTag("elPFIsoValuePU03PFIdPFlowLoose"),
    isRelative = cms.bool(True),
    isolationCut = cms.double(999),
    doDeltaBetaCorrection = cms.bool(False),
    deltaBetaFactor = cms.double(-0.5),
    isolationValueMapsNeutral = cms.VInputTag(cms.InputTag("elPFIsoValueNeutral03PFIdPFlowLoose"), cms.InputTag("elPFIsoValueGamma03PFIdPFlowLoose"))
)


process.pfIsolatedElectrons = cms.EDFilter("IsolatedPFCandidateSelector",
    src = cms.InputTag("pfSelectedElectrons"),
    isolationValueMapsCharged = cms.VInputTag(cms.InputTag("elPFIsoValueCharged04PFId")),
    deltaBetaIsolationValueMap = cms.InputTag("elPFIsoValuePU04PFId"),
    isRelative = cms.bool(True),
    isolationCut = cms.double(0.2),
    doDeltaBetaCorrection = cms.bool(False),
    deltaBetaFactor = cms.double(-0.5),
    isolationValueMapsNeutral = cms.VInputTag(cms.InputTag("elPFIsoValueNeutral04PFId"), cms.InputTag("elPFIsoValueGamma04PFId"))
)


process.pfIsolatedElectronsPFlow = cms.EDFilter("IsolatedPFCandidateSelector",
    src = cms.InputTag("pfSelectedElectronsPFlow"),
    isolationValueMapsCharged = cms.VInputTag(cms.InputTag("elPFIsoValueCharged03PFIdPFlow")),
    deltaBetaIsolationValueMap = cms.InputTag("elPFIsoValuePU03PFIdPFlow"),
    isRelative = cms.bool(True),
    isolationCut = cms.double(0.2),
    doDeltaBetaCorrection = cms.bool(False),
    deltaBetaFactor = cms.double(-0.5),
    isolationValueMapsNeutral = cms.VInputTag(cms.InputTag("elPFIsoValueNeutral03PFIdPFlow"), cms.InputTag("elPFIsoValueGamma03PFIdPFlow"))
)


process.pfIsolatedElectronsPFlowLoose = cms.EDFilter("IsolatedPFCandidateSelector",
    src = cms.InputTag("pfSelectedElectronsPFlowLoose"),
    isolationValueMapsCharged = cms.VInputTag(cms.InputTag("elPFIsoValueCharged03PFIdPFlowLoose")),
    deltaBetaIsolationValueMap = cms.InputTag("elPFIsoValuePU03PFIdPFlowLoose"),
    isRelative = cms.bool(True),
    isolationCut = cms.double(999.0),
    doDeltaBetaCorrection = cms.bool(False),
    deltaBetaFactor = cms.double(-0.5),
    isolationValueMapsNeutral = cms.VInputTag(cms.InputTag("elPFIsoValueNeutral03PFIdPFlowLoose"), cms.InputTag("elPFIsoValueGamma03PFIdPFlowLoose"))
)


process.pfIsolatedMuons = cms.EDFilter("IsolatedPFCandidateSelector",
    src = cms.InputTag("pfSelectedMuons"),
    isolationValueMapsCharged = cms.VInputTag(cms.InputTag("muPFIsoValueCharged04")),
    deltaBetaIsolationValueMap = cms.InputTag("muPFIsoValuePU04"),
    isRelative = cms.bool(True),
    isolationCut = cms.double(0.15),
    doDeltaBetaCorrection = cms.bool(False),
    deltaBetaFactor = cms.double(-0.5),
    isolationValueMapsNeutral = cms.VInputTag(cms.InputTag("muPFIsoValueNeutral04"), cms.InputTag("muPFIsoValueGamma04"))
)


process.pfIsolatedMuonsPFlow = cms.EDFilter("IsolatedPFCandidateSelector",
    src = cms.InputTag("pfSelectedMuonsPFlow"),
    isolationValueMapsCharged = cms.VInputTag(cms.InputTag("muPFIsoValueCharged04PFlow")),
    deltaBetaIsolationValueMap = cms.InputTag("muPFIsoValuePU04PFlow"),
    isRelative = cms.bool(True),
    isolationCut = cms.double(0.15),
    doDeltaBetaCorrection = cms.bool(False),
    deltaBetaFactor = cms.double(-0.5),
    isolationValueMapsNeutral = cms.VInputTag(cms.InputTag("muPFIsoValueNeutral04PFlow"), cms.InputTag("muPFIsoValueGamma04PFlow"))
)


process.pfIsolatedMuonsPFlowLoose = cms.EDFilter("IsolatedPFCandidateSelector",
    src = cms.InputTag("pfSelectedMuonsPFlowLoose"),
    isolationValueMapsCharged = cms.VInputTag(cms.InputTag("muPFIsoValueCharged04PFlowLoose")),
    deltaBetaIsolationValueMap = cms.InputTag("muPFIsoValuePU04PFlowLoose"),
    isRelative = cms.bool(True),
    isolationCut = cms.double(999.0),
    doDeltaBetaCorrection = cms.bool(False),
    deltaBetaFactor = cms.double(-0.5),
    isolationValueMapsNeutral = cms.VInputTag(cms.InputTag("muPFIsoValueNeutral04PFlowLoose"), cms.InputTag("muPFIsoValueGamma04PFlowLoose"))
)


process.pfIsolatedPhotons = cms.EDFilter("IsolatedPFCandidateSelector",
    src = cms.InputTag("pfSelectedPhotons"),
    isolationValueMapsCharged = cms.VInputTag(cms.InputTag("phPFIsoValueCharged04PFId")),
    deltaBetaIsolationValueMap = cms.InputTag("phPFIsoValuePU04PFId"),
    isRelative = cms.bool(True),
    isolationCut = cms.double(999),
    doDeltaBetaCorrection = cms.bool(False),
    deltaBetaFactor = cms.double(-0.5),
    isolationValueMapsNeutral = cms.VInputTag(cms.InputTag("phPFIsoValueNeutral04PFId"), cms.InputTag("phPFIsoValueGamma04PFId"))
)


process.pfIsolatedPhotonsPFlow = cms.EDFilter("IsolatedPFCandidateSelector",
    src = cms.InputTag("pfSelectedPhotonsPFlow"),
    isolationValueMapsCharged = cms.VInputTag(cms.InputTag("phPFIsoValueCharged04PFIdPFlow")),
    deltaBetaIsolationValueMap = cms.InputTag("phPFIsoValuePU04PFIdPFlow"),
    isRelative = cms.bool(True),
    isolationCut = cms.double(999),
    doDeltaBetaCorrection = cms.bool(False),
    deltaBetaFactor = cms.double(-0.5),
    isolationValueMapsNeutral = cms.VInputTag(cms.InputTag("phPFIsoValueNeutral04PFIdPFlow"), cms.InputTag("phPFIsoValueGamma04PFIdPFlow"))
)


process.pfIsolatedPhotonsPFlowLoose = cms.EDFilter("IsolatedPFCandidateSelector",
    src = cms.InputTag("pfSelectedPhotonsPFlowLoose"),
    isolationValueMapsCharged = cms.VInputTag(cms.InputTag("phPFIsoValueCharged04PFIdPFlowLoose")),
    deltaBetaIsolationValueMap = cms.InputTag("phPFIsoValuePU04PFIdPFlowLoose"),
    isRelative = cms.bool(True),
    isolationCut = cms.double(999),
    doDeltaBetaCorrection = cms.bool(False),
    deltaBetaFactor = cms.double(-0.5),
    isolationValueMapsNeutral = cms.VInputTag(cms.InputTag("phPFIsoValueNeutral04PFIdPFlowLoose"), cms.InputTag("phPFIsoValueGamma04PFIdPFlowLoose"))
)


process.pfMuons = cms.EDFilter("IsolatedPFCandidateSelector",
    src = cms.InputTag("pfSelectedMuons"),
    isolationValueMapsCharged = cms.VInputTag(cms.InputTag("muPFIsoValueCharged04")),
    deltaBetaIsolationValueMap = cms.InputTag("muPFIsoValuePU04"),
    isRelative = cms.bool(True),
    isolationCut = cms.double(999),
    doDeltaBetaCorrection = cms.bool(False),
    deltaBetaFactor = cms.double(-0.5),
    isolationValueMapsNeutral = cms.VInputTag(cms.InputTag("muPFIsoValueNeutral04"), cms.InputTag("muPFIsoValueGamma04"))
)


process.pfMuonsFromVertex = cms.EDFilter("IPCutPFCandidateSelector",
    d0Cut = cms.double(0.2),
    src = cms.InputTag("pfAllMuons"),
    dzSigCut = cms.double(99.0),
    d0SigCut = cms.double(99.0),
    vertices = cms.InputTag("offlinePrimaryVertices"),
    dzCut = cms.double(0.5)
)


process.pfMuonsFromVertexPFlow = cms.EDFilter("IPCutPFCandidateSelector",
    d0Cut = cms.double(0.2),
    src = cms.InputTag("pfAllMuonsPFlow"),
    dzSigCut = cms.double(99.0),
    vertices = cms.InputTag("goodOfflinePrimaryVertices"),
    d0SigCut = cms.double(99.0),
    dzCut = cms.double(0.5)
)


process.pfMuonsFromVertexPFlowLoose = cms.EDFilter("IPCutPFCandidateSelector",
    d0Cut = cms.double(0.2),
    src = cms.InputTag("pfAllMuonsPFlowLoose"),
    dzSigCut = cms.double(99.0),
    vertices = cms.InputTag("goodOfflinePrimaryVertices"),
    d0SigCut = cms.double(99.0),
    dzCut = cms.double(0.5)
)


process.pfMuonsPFlow = cms.EDFilter("IsolatedPFCandidateSelector",
    src = cms.InputTag("pfSelectedMuonsPFlow"),
    isolationValueMapsCharged = cms.VInputTag(cms.InputTag("muPFIsoValueCharged04PFlow")),
    deltaBetaIsolationValueMap = cms.InputTag("muPFIsoValuePU04PFlow"),
    isRelative = cms.bool(True),
    isolationCut = cms.double(999),
    doDeltaBetaCorrection = cms.bool(False),
    deltaBetaFactor = cms.double(-0.5),
    isolationValueMapsNeutral = cms.VInputTag(cms.InputTag("muPFIsoValueNeutral04PFlow"), cms.InputTag("muPFIsoValueGamma04PFlow"))
)


process.pfMuonsPFlowLoose = cms.EDFilter("IsolatedPFCandidateSelector",
    src = cms.InputTag("pfSelectedMuonsPFlowLoose"),
    isolationValueMapsCharged = cms.VInputTag(cms.InputTag("muPFIsoValueCharged04PFlowLoose")),
    deltaBetaIsolationValueMap = cms.InputTag("muPFIsoValuePU04PFlowLoose"),
    isRelative = cms.bool(True),
    isolationCut = cms.double(999),
    doDeltaBetaCorrection = cms.bool(False),
    deltaBetaFactor = cms.double(-0.5),
    isolationValueMapsNeutral = cms.VInputTag(cms.InputTag("muPFIsoValueNeutral04PFlowLoose"), cms.InputTag("muPFIsoValueGamma04PFlowLoose"))
)


process.pfPileUpAllChargedParticles = cms.EDFilter("PdgIdPFCandidateSelector",
    pdgId = cms.vint32(211, -211, 321, -321, 999211, 
        2212, -2212, 11, -11, 13, 
        -13),
    src = cms.InputTag("pfPileUpIso")
)


process.pfPileUpAllChargedParticlesPFlow = cms.EDFilter("PdgIdPFCandidateSelector",
    pdgId = cms.vint32(211, -211, 321, -321, 999211, 
        2212, -2212, 11, -11, 13, 
        -13),
    src = cms.InputTag("pfPileUpIsoPFlow")
)


process.pfPileUpAllChargedParticlesPFlowLoose = cms.EDFilter("PdgIdPFCandidateSelector",
    pdgId = cms.vint32(211, -211, 321, -321, 999211, 
        2212, -2212, 11, -11, 13, 
        -13),
    src = cms.InputTag("pfPileUpIsoPFlowLoose")
)


process.pfSelectedElectrons = cms.EDFilter("GenericPFCandidateSelector",
    src = cms.InputTag("pfElectronsFromVertex"),
    cut = cms.string('pt>5 && gsfTrackRef.isNonnull && gsfTrackRef.trackerExpectedHitsInner.numberOfLostHits<2')
)


process.pfSelectedElectronsPFlow = cms.EDFilter("GenericPFCandidateSelector",
    src = cms.InputTag("pfElectronsFromVertexPFlow"),
    cut = cms.string('pt>5 && gsfTrackRef.isNonnull && gsfTrackRef.trackerExpectedHitsInner.numberOfLostHits<2')
)


process.pfSelectedElectronsPFlowLoose = cms.EDFilter("GenericPFCandidateSelector",
    src = cms.InputTag("pfElectronsFromVertexPFlowLoose"),
    cut = cms.string('pt>5 && gsfTrackRef.isNonnull && gsfTrackRef.trackerExpectedHitsInner.numberOfLostHits<2')
)


process.pfSelectedMuons = cms.EDFilter("GenericPFCandidateSelector",
    src = cms.InputTag("pfMuonsFromVertex"),
    cut = cms.string('pt>5')
)


process.pfSelectedMuonsPFlow = cms.EDFilter("GenericPFCandidateSelector",
    src = cms.InputTag("pfMuonsFromVertexPFlow"),
    cut = cms.string('pt>5')
)


process.pfSelectedMuonsPFlowLoose = cms.EDFilter("GenericPFCandidateSelector",
    src = cms.InputTag("pfMuonsFromVertexPFlowLoose"),
    cut = cms.string('pt>5')
)


process.pfSelectedPhotons = cms.EDFilter("GenericPFCandidateSelector",
    src = cms.InputTag("pfAllPhotons"),
    cut = cms.string('mva_nothing_gamma>0')
)


process.pfSelectedPhotonsPFlow = cms.EDFilter("GenericPFCandidateSelector",
    src = cms.InputTag("pfAllPhotonsPFlow"),
    cut = cms.string('mva_nothing_gamma>0')
)


process.pfSelectedPhotonsPFlowLoose = cms.EDFilter("GenericPFCandidateSelector",
    src = cms.InputTag("pfAllPhotonsPFlowLoose"),
    cut = cms.string('mva_nothing_gamma>0')
)


process.pfTauPileUpVertices = cms.EDFilter("RecoTauPileUpVertexSelector",
    filter = cms.bool(False),
    src = cms.InputTag("offlinePrimaryVertices"),
    minTrackSumPt = cms.double(5)
)


process.pfTauPileUpVerticesPFlow = cms.EDFilter("RecoTauPileUpVertexSelector",
    filter = cms.bool(False),
    src = cms.InputTag("offlinePrimaryVertices"),
    minTrackSumPt = cms.double(5)
)


process.pfTauPileUpVerticesPFlowLoose = cms.EDFilter("RecoTauPileUpVertexSelector",
    filter = cms.bool(False),
    src = cms.InputTag("offlinePrimaryVertices"),
    minTrackSumPt = cms.double(5)
)


process.pfTauSelector = cms.EDFilter("PFTauSelector",
    discriminators = cms.VPSet(cms.PSet(
        discriminator = cms.InputTag("fixedConePFTauDiscriminationByIsolation"),
        selectionCut = cms.double(0.5)
    )),
    src = cms.InputTag("fixedConePFTauProducer")
)


process.pfTaus = cms.EDFilter("PFTauSelector",
    discriminators = cms.VPSet(cms.PSet(
        discriminator = cms.InputTag("pfTausDiscriminationByLeadingPionPtCut"),
        selectionCut = cms.double(0.5)
    ), 
        cms.PSet(
            discriminator = cms.InputTag("pfTausDiscriminationByIsolation"),
            selectionCut = cms.double(0.5)
        )),
    src = cms.InputTag("pfTausProducer")
)


process.pfTausPFlow = cms.EDFilter("PFTauSelector",
    discriminators = cms.VPSet(cms.PSet(
        discriminator = cms.InputTag("pfTausBaseDiscriminationByLooseCombinedIsolationDBSumPtCorrPFlow"),
        selectionCut = cms.double(0.5)
    )),
    src = cms.InputTag("hpsPFTauProducerPFlow")
)


process.pfTausPFlowLoose = cms.EDFilter("PFTauSelector",
    discriminators = cms.VPSet(cms.PSet(
        discriminator = cms.InputTag("pfTausBaseDiscriminationByLooseCombinedIsolationDBSumPtCorrPFlowLoose"),
        selectionCut = cms.double(0.5)
    )),
    src = cms.InputTag("hpsPFTauProducerPFlowLoose")
)


process.primaryVertexFilter = cms.EDFilter("VertexSelector",
    filter = cms.bool(True),
    src = cms.InputTag("offlinePrimaryVertices"),
    cut = cms.string('!isFake & ndof > 4 & abs(z) <= 24 & position.Rho <= 2')
)


process.recoTauPileUpVertices = cms.EDFilter("RecoTauPileUpVertexSelector",
    filter = cms.bool(False),
    src = cms.InputTag("offlinePrimaryVertices"),
    minTrackSumPt = cms.double(5)
)


process.selectedPatElectrons = cms.EDFilter("PATElectronSelector",
    src = cms.InputTag("patElectrons"),
    cut = cms.string('pt > 10.0 & abs(eta) < 2.5')
)


process.selectedPatElectronsPFlow = cms.EDFilter("PATElectronSelector",
    src = cms.InputTag("patElectronsPFlow"),
    cut = cms.string('pt > 10.0 & abs(eta) < 2.5')
)


process.selectedPatElectronsPFlowLoose = cms.EDFilter("PATElectronSelector",
    src = cms.InputTag("patElectronsPFlowLoose"),
    cut = cms.string('pt > 10.0 & abs(eta) < 2.5')
)


process.selectedPatJets = cms.EDFilter("PATJetSelector",
    src = cms.InputTag("patJets"),
    cut = cms.string('')
)


process.selectedPatJetsCA15FilteredPF = cms.EDFilter("PATJetSelector",
    src = cms.InputTag("patJetsCA15FilteredPF"),
    cut = cms.string('pt > 150 & abs(rapidity) < 2.5')
)


process.selectedPatJetsCA15MassDropFilteredPF = cms.EDFilter("PATJetSelector",
    src = cms.InputTag("patJetsCA15MassDropFilteredPF"),
    cut = cms.string('pt > 150 & abs(rapidity) < 2.5')
)


process.selectedPatJetsCA15MassDropFilteredSubjetsPF = cms.EDFilter("PATJetSelector",
    src = cms.InputTag("patJetsCA15MassDropFilteredSubjetsPF"),
    cut = cms.string('')
)


process.selectedPatJetsCA8PF = cms.EDFilter("PATJetSelector",
    src = cms.InputTag("patJetsCA8PF"),
    cut = cms.string('pt > 20')
)


process.selectedPatJetsCA8PrunedPF = cms.EDFilter("PATJetSelector",
    src = cms.InputTag("patJetsCA8PrunedPF"),
    cut = cms.string('pt > 20 & abs(rapidity) < 2.5')
)


process.selectedPatJetsCA8PrunedSubjetsPF = cms.EDFilter("PATJetSelector",
    src = cms.InputTag("patJetsCA8PrunedSubjetsPF"),
    cut = cms.string('')
)


process.selectedPatJetsCAHEPTopTagPF = cms.EDFilter("PATJetSelector",
    src = cms.InputTag("patJetsCAHEPTopTagPF"),
    cut = cms.string('pt > 150 & abs(rapidity) < 2.5')
)


process.selectedPatJetsCAHEPTopTagSubjetsPF = cms.EDFilter("PATJetSelector",
    src = cms.InputTag("patJetsCAHEPTopTagSubjetsPF"),
    cut = cms.string('')
)


process.selectedPatJetsCATopTagPF = cms.EDFilter("PATJetSelector",
    src = cms.InputTag("patJetsCATopTagPF"),
    cut = cms.string('pt > 150 & abs(rapidity) < 2.5')
)


process.selectedPatJetsCATopTagSubjetsPF = cms.EDFilter("PATJetSelector",
    src = cms.InputTag("patJetsCATopTagSubjetsPF"),
    cut = cms.string('')
)


process.selectedPatJetsForMETtype1p2Corr = cms.EDFilter("PATJetSelector",
    filter = cms.bool(False),
    src = cms.InputTag("patJets"),
    cut = cms.string('abs(eta) < 9.9')
)


process.selectedPatJetsForMETtype1p2CorrPFlow = cms.EDFilter("PATJetSelector",
    filter = cms.bool(False),
    src = cms.InputTag("selectedPatJetsPFlow"),
    cut = cms.string('abs(eta) < 9.9')
)


process.selectedPatJetsForMETtype1p2CorrPFlowLoose = cms.EDFilter("PATJetSelector",
    filter = cms.bool(False),
    src = cms.InputTag("selectedPatJetsPFlowLoose"),
    cut = cms.string('abs(eta) < 9.9')
)


process.selectedPatJetsForMETtype2Corr = cms.EDFilter("PATJetSelector",
    filter = cms.bool(False),
    src = cms.InputTag("patJets"),
    cut = cms.string('abs(eta) > 9.9')
)


process.selectedPatJetsForMETtype2CorrPFlow = cms.EDFilter("PATJetSelector",
    filter = cms.bool(False),
    src = cms.InputTag("selectedPatJetsPFlow"),
    cut = cms.string('abs(eta) > 9.9')
)


process.selectedPatJetsForMETtype2CorrPFlowLoose = cms.EDFilter("PATJetSelector",
    filter = cms.bool(False),
    src = cms.InputTag("selectedPatJetsPFlowLoose"),
    cut = cms.string('abs(eta) > 9.9')
)


process.selectedPatJetsPFlow = cms.EDFilter("PATJetSelector",
    src = cms.InputTag("patJetsPFlow"),
    cut = cms.string('pt > 5')
)


process.selectedPatJetsPFlowLoose = cms.EDFilter("PATJetSelector",
    src = cms.InputTag("patJetsPFlowLoose"),
    cut = cms.string('pt > 20')
)


process.selectedPatMuons = cms.EDFilter("PATMuonSelector",
    src = cms.InputTag("patMuons"),
    cut = cms.string('pt > 10.0 & abs(eta) < 2.5')
)


process.selectedPatMuonsPFlow = cms.EDFilter("PATMuonSelector",
    src = cms.InputTag("patMuonsPFlow"),
    cut = cms.string('pt > 10.0 & abs(eta) < 2.5')
)


process.selectedPatMuonsPFlowLoose = cms.EDFilter("PATMuonSelector",
    src = cms.InputTag("patMuonsPFlowLoose"),
    cut = cms.string('pt > 10.0 & abs(eta) < 2.5')
)


process.selectedPatPFParticlesPFlow = cms.EDFilter("PATPFParticleSelector",
    src = cms.InputTag("patPFParticlesPFlow"),
    cut = cms.string('')
)


process.selectedPatPFParticlesPFlowLoose = cms.EDFilter("PATPFParticleSelector",
    src = cms.InputTag("patPFParticlesPFlowLoose"),
    cut = cms.string('')
)


process.selectedPatPhotons = cms.EDFilter("PATPhotonSelector",
    src = cms.InputTag("patPhotons"),
    cut = cms.string('')
)


process.selectedPatPhotonsPFlow = cms.EDFilter("PATPhotonSelector",
    src = cms.InputTag("patPhotonsPFlow"),
    cut = cms.string('')
)


process.selectedPatPhotonsPFlowLoose = cms.EDFilter("PATPhotonSelector",
    src = cms.InputTag("patPhotonsPFlowLoose"),
    cut = cms.string('')
)


process.selectedPatTaus = cms.EDFilter("PATTauSelector",
    src = cms.InputTag("patTaus"),
    cut = cms.string('pt > 10.0 & abs(eta) < 3')
)


process.selectedPatTausPFlow = cms.EDFilter("PATTauSelector",
    src = cms.InputTag("patTausPFlow"),
    cut = cms.string('pt > 10.0 & abs(eta) < 3')
)


process.selectedPatTausPFlowLoose = cms.EDFilter("PATTauSelector",
    src = cms.InputTag("patTausPFlowLoose"),
    cut = cms.string('')
)


process.selectedPrimaryVertexHighestPtTrackSumForPFMEtCorrType0 = cms.EDFilter("PATSingleVertexSelector",
    filter = cms.bool(False),
    vertices = cms.InputTag("selectedVerticesForPFMEtCorrType0"),
    mode = cms.string('firstVertex')
)


process.selectedVerticesForPFMEtCorrType0 = cms.EDFilter("VertexSelector",
    filter = cms.bool(False),
    src = cms.InputTag("offlinePrimaryVertices"),
    cut = cms.string('isValid & ndof >= 4 & chi2 > 0 & tracksSize > 0 & abs(z) < 24 & abs(position.Rho) < 2.')
)


process.tauGenJetsSelectorAllHadrons = cms.EDFilter("TauGenJetDecayModeSelector",
    filter = cms.bool(False),
    src = cms.InputTag("tauGenJets"),
    select = cms.vstring('oneProng0Pi0', 
        'oneProng1Pi0', 
        'oneProng2Pi0', 
        'oneProngOther', 
        'threeProng0Pi0', 
        'threeProng1Pi0', 
        'threeProngOther', 
        'rare')
)


process.tauGenJetsSelectorAllHadronsPFlow = cms.EDFilter("TauGenJetDecayModeSelector",
    filter = cms.bool(False),
    src = cms.InputTag("tauGenJetsPFlow"),
    select = cms.vstring('oneProng0Pi0', 
        'oneProng1Pi0', 
        'oneProng2Pi0', 
        'oneProngOther', 
        'threeProng0Pi0', 
        'threeProng1Pi0', 
        'threeProngOther', 
        'rare')
)


process.tauGenJetsSelectorAllHadronsPFlowLoose = cms.EDFilter("TauGenJetDecayModeSelector",
    filter = cms.bool(False),
    src = cms.InputTag("tauGenJetsPFlowLoose"),
    select = cms.vstring('oneProng0Pi0', 
        'oneProng1Pi0', 
        'oneProng2Pi0', 
        'oneProngOther', 
        'threeProng0Pi0', 
        'threeProng1Pi0', 
        'threeProngOther', 
        'rare')
)


process.tobtecfakesfilter = cms.EDFilter("TobTecFakesFilter",
    phiWindow = cms.double(0.7),
    ratioAllCut = cms.double(-1.0),
    maxEta = cms.double(1.6),
    minEta = cms.double(0.9),
    filter = cms.bool(True),
    trackCollection = cms.InputTag("generalTracks"),
    ratioJetCut = cms.double(3.0),
    absJetCut = cms.double(20.0)
)


process.toomanystripclus53X = cms.EDFilter("ByClusterSummaryMultiplicityPairEventFilter",
    cut = cms.string('(mult2>50000) && ( mult2 > 20000+7*mult1)'),
    multiplicityConfig = cms.PSet(
        secondMultiplicityConfig = cms.PSet(
            clusterSummaryCollection = cms.InputTag("clusterSummaryProducer"),
            subDetVariable = cms.string('cHits'),
            subDetEnum = cms.int32(0)
        ),
        firstMultiplicityConfig = cms.PSet(
            clusterSummaryCollection = cms.InputTag("clusterSummaryProducer"),
            subDetVariable = cms.string('pHits'),
            subDetEnum = cms.int32(5)
        )
    )
)


process.trackingFailureFilter = cms.EDFilter("TrackingFailureFilter",
    JetSource = cms.InputTag("ak5PFJets"),
    MinSumPtOverHT = cms.double(0.1),
    TrackSource = cms.InputTag("generalTracks"),
    DxyTrVtxMax = cms.double(0.2),
    taggingMode = cms.bool(False),
    debug = cms.bool(False),
    DzTrVtxMax = cms.double(1),
    VertexSource = cms.InputTag("goodVertices")
)


process.cleanPatCandidateSummary = cms.EDAnalyzer("CandidateSummaryTable",
    logName = cms.untracked.string('cleanPatCandidates|PATSummaryTables'),
    candidates = cms.VInputTag(cms.InputTag("cleanPatElectrons"), cms.InputTag("cleanPatMuons"), cms.InputTag("cleanPatTaus"), cms.InputTag("cleanPatPhotons"), cms.InputTag("cleanPatJets"))
)


process.cleanPatCandidateSummaryPFlow = cms.EDAnalyzer("CandidateSummaryTable",
    candidates = cms.VInputTag(cms.InputTag("cleanPatElectronsPFlow"), cms.InputTag("cleanPatMuonsPFlow"), cms.InputTag("cleanPatTausPFlow"), cms.InputTag("cleanPatPhotonsPFlow"), cms.InputTag("cleanPatJetsPFlow")),
    logName = cms.untracked.string('cleanPatCandidates|PATSummaryTables')
)


process.cleanPatCandidateSummaryPFlowLoose = cms.EDAnalyzer("CandidateSummaryTable",
    candidates = cms.VInputTag(cms.InputTag("cleanPatElectronsPFlowLoose"), cms.InputTag("cleanPatMuonsPFlowLoose"), cms.InputTag("cleanPatTausPFlowLoose"), cms.InputTag("cleanPatPhotonsPFlowLoose"), cms.InputTag("cleanPatJetsPFlowLoose")),
    logName = cms.untracked.string('cleanPatCandidates|PATSummaryTables')
)


process.patCandidateSummary = cms.EDAnalyzer("CandidateSummaryTable",
    logName = cms.untracked.string('patCandidates|PATSummaryTables'),
    candidates = cms.VInputTag(cms.InputTag("patElectrons"), cms.InputTag("patMuons"), cms.InputTag("patTaus"), cms.InputTag("patPhotons"), cms.InputTag("patJets"), 
        cms.InputTag("patMETs"))
)


process.patCandidateSummaryPFlow = cms.EDAnalyzer("CandidateSummaryTable",
    candidates = cms.VInputTag(cms.InputTag("patElectronsPFlow"), cms.InputTag("patMuonsPFlow"), cms.InputTag("patTausPFlow"), cms.InputTag("patPhotonsPFlow"), cms.InputTag("patJetsPFlow"), 
        cms.InputTag("patMETsPFlow"), cms.InputTag("patPFParticlesPFlow")),
    logName = cms.untracked.string('patCandidates|PATSummaryTables')
)


process.patCandidateSummaryPFlowLoose = cms.EDAnalyzer("CandidateSummaryTable",
    candidates = cms.VInputTag(cms.InputTag("patElectronsPFlowLoose"), cms.InputTag("patMuonsPFlowLoose"), cms.InputTag("patTausPFlowLoose"), cms.InputTag("patPhotonsPFlowLoose"), cms.InputTag("patJetsPFlowLoose"), 
        cms.InputTag("patMETsPFlowLoose"), cms.InputTag("patPFParticlesPFlowLoose")),
    logName = cms.untracked.string('patCandidates|PATSummaryTables')
)


process.selectedPatCandidateSummary = cms.EDAnalyzer("CandidateSummaryTable",
    logName = cms.untracked.string('selectedPatCanddiates|PATSummaryTables'),
    candidates = cms.VInputTag(cms.InputTag("selectedPatElectrons"), cms.InputTag("selectedPatMuons"), cms.InputTag("selectedPatTaus"), cms.InputTag("selectedPatPhotons"), cms.InputTag("selectedPatJets"))
)


process.selectedPatCandidateSummaryPFlow = cms.EDAnalyzer("CandidateSummaryTable",
    candidates = cms.VInputTag(cms.InputTag("selectedPatElectronsPFlow"), cms.InputTag("selectedPatMuonsPFlow"), cms.InputTag("selectedPatTausPFlow"), cms.InputTag("selectedPatPhotonsPFlow"), cms.InputTag("selectedPatJetsPFlow"), 
        cms.InputTag("selectedPatPFParticlesPFlow")),
    logName = cms.untracked.string('selectedPatCanddiates|PATSummaryTables')
)


process.selectedPatCandidateSummaryPFlowLoose = cms.EDAnalyzer("CandidateSummaryTable",
    candidates = cms.VInputTag(cms.InputTag("selectedPatElectronsPFlowLoose"), cms.InputTag("selectedPatMuonsPFlowLoose"), cms.InputTag("selectedPatTausPFlowLoose"), cms.InputTag("selectedPatPhotonsPFlowLoose"), cms.InputTag("selectedPatJetsPFlowLoose"), 
        cms.InputTag("selectedPatPFParticlesPFlowLoose")),
    logName = cms.untracked.string('selectedPatCanddiates|PATSummaryTables')
)


process.out = cms.OutputModule("PoolOutputModule",
    fileName = cms.untracked.string('tlbsm_53x_v3_mc.root'),
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('p0')
    ),
    outputCommands = cms.untracked.vstring('drop *_cleanPat*_*_*', 
        'keep *_selectedPat*_*_*', 
        'keep *_goodPat*_*_*', 
        'drop *_goodPatJetsCA8PrunedPF_*_*', 
        'drop *_goodPatJetsCATopTagPF_*_*', 
        'drop *_goodPatJetsCAHEPTopTagPF_*_*', 
        'drop *_goodPatJetsCA15MassDropFilteredPF_*_*', 
        'drop patJets_selectedPat*_*_*', 
        'keep patJets_selectedPat*Subjets*_*_*', 
        'keep patJets_goodPatJets*Packed_*_*', 
        'drop *_selectedPatJets_*_*', 
        'keep *_patMETs*_*_*', 
        'keep *_goodOfflinePrimaryVertices*_*_*', 
        'drop patPFParticles_*_*_*', 
        'drop recoPFJets_*_*_*', 
        'keep recoPFJets_caFiltered*_*_*', 
        'keep patTriggerObjects_patTriggerPFlow_*_*', 
        'keep patTriggerFilters_patTriggerPFlow_*_*', 
        'keep patTriggerPaths_patTriggerPFlow_*_*', 
        'keep patTriggerEvent_patTriggerEventPFlow_*_*', 
        'keep *_cleanPatPhotonsTriggerMatch*_*_*', 
        'keep *_cleanPatElectronsTriggerMatch*_*_*', 
        'keep *_cleanPatMuonsTriggerMatch*_*_*', 
        'keep *_cleanPatTausTriggerMatch*_*_*', 
        'keep *_cleanPatJetsTriggerMatch*_*_*', 
        'keep *_patMETsTriggerMatch*_*_*', 
        'keep double_*_*_PAT', 
        'keep *_TriggerResults_*_*', 
        'keep *_hltTriggerSummaryAOD_*_*', 
        'keep *_CATopTagInfosPFlow_*_*', 
        'keep *_prunedGenParticles_*_*', 
        'drop recoPFCandidates_selectedPatJets*_*_*', 
        'keep recoPFCandidates_selectedPatJetsPFlow_*_*', 
        'keep recoPFCandidates_selectedPatJetsCA8PF_*_*', 
        'drop CaloTowers_selectedPatJets*_*_*', 
        'drop recoBasicJets_*_*_*', 
        'keep *_*Lite_*_*', 
        'drop patJets_goodPatJetsAK5FilteredPF_*_*', 
        'drop patJets_goodPatJetsAK5PrunedPF_*_*', 
        'drop patJets_goodPatJetsAK5TrimmedPF_*_*', 
        'drop patJets_goodPatJetsAK7PF_*_*', 
        'drop patJets_goodPatJetsAK7FilteredPF_*_*', 
        'drop patJets_goodPatJetsAK7PrunedPF_*_*', 
        'drop patJets_goodPatJetsAK7TrimmedPF_*_*', 
        'drop patJets_goodPatJetsAK8PF_*_*', 
        'drop patJets_goodPatJetsAK8FilteredPF_*_*', 
        'drop patJets_goodPatJetsAK8PrunedPF_*_*', 
        'drop patJets_goodPatJetsAK8TrimmedPF_*_*', 
        'drop recoGenJets_selectedPatJets*_*_*', 
        'keep *_*_rho_*', 
        'drop *_*PFlowLoose*_*_*', 
        'keep patElectrons_selected*PFlowLoose*_*_*', 
        'keep patMuons_selected*PFlowLoose*_*_*', 
        'keep patJets_selectedPatJetsPFlowLoose_*_*', 
        'keep *_patConversions*_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'drop *_*atTaus_*_*', 
        'keep *_pfType1CorrectedMet_*_*', 
        'keep *_pfType1p2CorrectedMet_*_*', 
        'keep *_phoPFIso_*_*', 
        'keep *_photon*_*_*', 
        'keep *_allConversions__*', 
        'keep *_gsfElectron*__*', 
        'keep *_correctedHybridSuperClusters_*_*', 
        'keep *_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoGsfTracks_electronGsfTracks__*', 
        'keep recoGenJets_ca8GenJetsNoNu_*_*', 
        'keep recoGenJets_ak5GenJetsNoNu_*_*', 
        'keep recoGenJets_ak7GenJetsNoNu_*_*', 
        'keep recoGenJets_ak8GenJetsNoNu_*_*', 
        'keep recoGenJets_caFilteredGenJetsNoNu_*_*', 
        'keep recoGenJets_caPrunedGen_*_*', 
        'keep *_caTopTagGen_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep *_flavorHistoryFilter_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep recoGenJets_selectedPatJetsPFlow_*_*'),
    dropMetaData = cms.untracked.string('DROPPED')
)


process.patElectronTrackIsolation = cms.Sequence(process.eleIsoDepositTk+process.eleIsoFromDepsTk)


process.makePatMETsPFlow = cms.Sequence(process.pfCandsNotInJetPFlow+process.pfJetMETcorrPFlow+process.pfCandMETcorrPFlow+process.pfchsMETcorrPFlow+process.pfType1CorrectedMetPFlow+process.pfType1p2CorrectedMetPFlow+process.patMETsPFlow)


process.makePatMETsPFlowLoose = cms.Sequence(process.pfCandsNotInJetPFlowLoose+process.pfJetMETcorrPFlowLoose+process.pfCandMETcorrPFlowLoose+process.pfchsMETcorrPFlowLoose+process.pfType1CorrectedMetPFlowLoose+process.pfType1p2CorrectedMetPFlowLoose+process.patMETsPFlowLoose)


process.btaggingCA8PrunedSubjetsPF = cms.Sequence(process.impactParameterTagInfosCA8PrunedSubjetsPF+process.secondaryVertexTagInfosCA8PrunedSubjetsPF+process.jetBProbabilityBJetTagsCA8PrunedSubjetsPF+process.jetProbabilityBJetTagsCA8PrunedSubjetsPF+process.trackCountingHighPurBJetTagsCA8PrunedSubjetsPF+process.trackCountingHighEffBJetTagsCA8PrunedSubjetsPF+process.simpleSecondaryVertexHighEffBJetTagsCA8PrunedSubjetsPF+process.simpleSecondaryVertexHighPurBJetTagsCA8PrunedSubjetsPF+process.combinedSecondaryVertexBJetTagsCA8PrunedSubjetsPF)


process.patShrinkingConePFTauDiscrimination = cms.Sequence()


process.hpsTancTauDiscriminantSequence = cms.Sequence(process.hpsTancTausDiscriminationByTancRaw+process.hpsTancTausDiscriminationByTanc+process.hpsTancTausDiscriminationByTancVLoose+process.hpsTancTausDiscriminationByTancLoose+process.hpsTancTausDiscriminationByTancMedium+process.hpsTancTausDiscriminationByTancTight+process.hpsTancTausDiscriminationByVLooseIsolation+process.hpsTancTausDiscriminationByLooseIsolation+process.hpsTancTausDiscriminationByMediumIsolation+process.hpsTancTausDiscriminationByTightIsolation+process.hpsTancTausDiscriminationByLooseElectronRejection+process.hpsTancTausDiscriminationByMediumElectronRejection+process.hpsTancTausDiscriminationByTightElectronRejection+process.hpsTancTausDiscriminationByLooseMuonRejection+process.hpsTancTausDiscriminationByTightMuonRejection)


process.producePatPFMETCorrectionsPFlow = cms.Sequence(process.patPFMetPFlow+process.pfCandsNotInJetPFlow+process.selectedPatJetsForMETtype1p2CorrPFlow+process.selectedPatJetsForMETtype2CorrPFlow+process.patPFJetMETtype1p2CorrPFlow+process.patPFJetMETtype2CorrPFlow+process.pfCandMETcorrPFlow+process.patType1CorrectedPFMetPFlow+process.patType1p2CorrectedPFMetPFlow)


process.btaggingCAHEPTopTagPF = cms.Sequence(process.impactParameterTagInfosCAHEPTopTagPF+process.secondaryVertexTagInfosCAHEPTopTagPF+process.jetBProbabilityBJetTagsCAHEPTopTagPF+process.jetProbabilityBJetTagsCAHEPTopTagPF+process.trackCountingHighPurBJetTagsCAHEPTopTagPF+process.trackCountingHighEffBJetTagsCAHEPTopTagPF+process.simpleSecondaryVertexHighEffBJetTagsCAHEPTopTagPF+process.simpleSecondaryVertexHighPurBJetTagsCAHEPTopTagPF+process.combinedSecondaryVertexBJetTagsCAHEPTopTagPF)


process.muonPFIsolationDepositsSequencePFlow = cms.Sequence(process.muPFIsoDepositChargedPFlow+process.muPFIsoDepositChargedAllPFlow+process.muPFIsoDepositGammaPFlow+process.muPFIsoDepositNeutralPFlow+process.muPFIsoDepositPUPFlow)


process.makePatElectrons = cms.Sequence(process.electronMatch+process.patElectrons)


process.selectedPatCandidatesPFlowLoose = cms.Sequence(process.selectedPatElectronsPFlowLoose+process.selectedPatMuonsPFlowLoose+process.selectedPatTausPFlowLoose+process.selectedPatPhotonsPFlowLoose+process.selectedPatJetsPFlowLoose+process.selectedPatCandidateSummaryPFlowLoose)


process.pfSortByTypeSequencePFlowLoose = cms.Sequence(process.pfAllNeutralHadronsPFlowLoose+process.pfAllChargedHadronsPFlowLoose+process.pfAllPhotonsPFlowLoose+process.pfAllChargedParticlesPFlowLoose+process.pfPileUpAllChargedParticlesPFlowLoose+process.pfAllNeutralHadronsAndPhotonsPFlowLoose)


process.recoTauCommonSequence = cms.Sequence(process.ak5PFJetTracksAssociatorAtVertex+process.recoTauAK5PFJets08Region+process.recoTauPileUpVertices+process.pfRecoTauTagInfoProducer)


process.photonPFIsolationDepositsSequencePFlowLoose = cms.Sequence(process.phPFIsoDepositChargedPFlowLoose+process.phPFIsoDepositChargedAllPFlowLoose+process.phPFIsoDepositGammaPFlowLoose+process.phPFIsoDepositNeutralPFlowLoose+process.phPFIsoDepositPUPFlowLoose)


process.producePFMETCorrectionsPFlow = cms.Sequence(process.pfCandsNotInJetPFlow+process.pfJetMETcorrPFlow+process.pfCandMETcorrPFlow+process.pfchsMETcorrPFlow+process.pfType1CorrectedMetPFlow+process.pfType1p2CorrectedMetPFlow)


process.pfTausPreSequencePFlowLoose = cms.Sequence(process.pfJetTracksAssociatorAtVertexPFlowLoose+process.pfTauPFJets08RegionPFlowLoose+process.pfTauPileUpVerticesPFlowLoose+process.pfTauTagInfoProducerPFlowLoose+process.pfJetsPiZerosPFlowLoose+process.pfJetsLegacyTaNCPiZerosPFlowLoose+process.pfJetsLegacyHPSPiZerosPFlowLoose)


process.produceHPSPFTaus = cms.Sequence(process.hpsSelectionDiscriminator+process.hpsPFTauProducerSansRefs+process.hpsPFTauProducer)


process.patElectronId = cms.Sequence(process.eidRobustHighEnergy)


process.recoAllGenJetsNoNu = cms.Sequence(process.sisCone5GenJetsNoNu+process.sisCone7GenJetsNoNu+process.kt4GenJetsNoNu+process.kt6GenJetsNoNu+process.iterativeCone5GenJetsNoNu+process.ak5GenJetsNoNu+process.ak7GenJetsNoNu+process.gk5GenJetsNoNu+process.gk7GenJetsNoNu+process.ca4GenJetsNoNu+process.ca6GenJetsNoNu)


process.pfJetSequencePFlow = cms.Sequence(process.pfJetsPFlow)


process.produceCaloMETCorrectionsPFlow = cms.Sequence(process.caloJetMETcorrPFlow+process.muonCaloMETcorrPFlow+process.caloType1CorrectedMetPFlow+process.caloType1p2CorrectedMetPFlow)


process.produceCaloMETCorrectionsPFlowLoose = cms.Sequence(process.caloJetMETcorrPFlowLoose+process.muonCaloMETcorrPFlowLoose+process.caloType1CorrectedMetPFlowLoose+process.caloType1p2CorrectedMetPFlowLoose)


process.countPatCandidatesPFlowLoose = cms.Sequence(process.countPatElectronsPFlowLoose+process.countPatMuonsPFlowLoose+process.countPatTausPFlowLoose+process.countPatLeptonsPFlowLoose+process.countPatPhotonsPFlowLoose+process.countPatJetsPFlowLoose)


process.pfPhotonIsolationSequencePFlowLoose = cms.Sequence(process.photonPFIsolationDepositsSequencePFlowLoose+process.phPFIsoValueCharged03PFIdPFlowLoose+process.phPFIsoValueChargedAll03PFIdPFlowLoose+process.phPFIsoValueGamma03PFIdPFlowLoose+process.phPFIsoValueNeutral03PFIdPFlowLoose+process.phPFIsoValuePU03PFIdPFlowLoose+process.phPFIsoValueCharged04PFIdPFlowLoose+process.phPFIsoValueChargedAll04PFIdPFlowLoose+process.phPFIsoValueGamma04PFIdPFlowLoose+process.phPFIsoValueNeutral04PFIdPFlowLoose+process.phPFIsoValuePU04PFIdPFlowLoose)


process.patMETCorrectionsPFlowLoose = cms.Sequence(process.pfCandsNotInJetPFlowLoose+process.pfJetMETcorrPFlowLoose+process.pfCandMETcorrPFlowLoose+process.pfchsMETcorrPFlowLoose+process.pfType1CorrectedMetPFlowLoose+process.pfType1p2CorrectedMetPFlowLoose)


process.RunTanc = cms.Sequence(process.shrinkingConePFTauDiscriminationByTaNCfrOnePercent+process.shrinkingConePFTauDiscriminationByTaNCfrHalfPercent+process.shrinkingConePFTauDiscriminationByTaNCfrQuarterPercent+process.shrinkingConePFTauDiscriminationByTaNCfrTenthPercent)


process.produceHPSPFTausPFlow = cms.Sequence(process.hpsSelectionDiscriminatorPFlow+process.hpsPFTauProducerSansRefsPFlow+process.hpsPFTauProducerPFlow)


process.hpsPFTauDiscriminationByChargedIsolationSeq = cms.Sequence(process.hpsPFTauDiscriminationByVLooseChargedIsolation+process.hpsPFTauDiscriminationByLooseChargedIsolation+process.hpsPFTauDiscriminationByMediumChargedIsolation+process.hpsPFTauDiscriminationByTightChargedIsolation)


process.hpsPFTauDiscriminationByChargedIsolationSeqPFlow = cms.Sequence(process.hpsPFTauDiscriminationByVLooseChargedIsolationPFlow+process.hpsPFTauDiscriminationByLooseChargedIsolationPFlow+process.hpsPFTauDiscriminationByMediumChargedIsolationPFlow+process.hpsPFTauDiscriminationByTightChargedIsolationPFlow)


process.genForPF2PATSequence = cms.Sequence(process.genParticlesForJetsNoNu+process.iterativeCone5GenJetsNoNu+process.ak5GenJetsNoNu+process.ak7GenJetsNoNu)


process.produceHPSPFTausPFlowLoose = cms.Sequence(process.hpsSelectionDiscriminatorPFlowLoose+process.hpsPFTauProducerSansRefsPFlowLoose+process.hpsPFTauProducerPFlowLoose)


process.photonPFIsolationDepositsSequencePFlow = cms.Sequence(process.phPFIsoDepositChargedPFlow+process.phPFIsoDepositChargedAllPFlow+process.phPFIsoDepositGammaPFlow+process.phPFIsoDepositNeutralPFlow+process.phPFIsoDepositPUPFlow)


process.pfNoPileUpIsoSequencePFlowLoose = cms.Sequence(process.pfPileUpIsoPFlowLoose+process.pfNoPileUpIsoPFlowLoose)


process.makePatMuons = cms.Sequence(process.muonMatch+process.patMuons)


process.pfSortByTypeSequence = cms.Sequence(process.pfAllNeutralHadrons+process.pfAllChargedHadrons+process.pfAllPhotons+process.pfAllChargedParticles+process.pfPileUpAllChargedParticles+process.pfAllNeutralHadronsAndPhotons)


process.hpsTancTauInitialSequence = cms.Sequence(process.combinatoricRecoTausDiscriminationByLeadingPionPtCut+process.combinatoricRecoTausHPSSelector+process.hpsTancTausSansRefs+process.hpsTancTaus+process.hpsTancTausDiscriminationByLeadingTrackFinding+process.hpsTancTausDiscriminationByLeadingPionPtCut+process.hpsTancTausDiscriminationByLeadingTrackPtCut+process.hpsTancTausDiscriminationByDecayModeSelection)


process.producePFMETCorrectionsPFlowLoose = cms.Sequence(process.pfCandsNotInJetPFlowLoose+process.pfJetMETcorrPFlowLoose+process.pfCandMETcorrPFlowLoose+process.pfchsMETcorrPFlowLoose+process.pfType1CorrectedMetPFlowLoose+process.pfType1p2CorrectedMetPFlowLoose)


process.patJetFlavourId = cms.Sequence(process.patJetPartons+process.patJetPartonAssociation+process.patJetFlavourAssociation)


process.btaggingCA15MassDropFilteredPF = cms.Sequence(process.impactParameterTagInfosCA15MassDropFilteredPF+process.secondaryVertexTagInfosCA15MassDropFilteredPF+process.jetBProbabilityBJetTagsCA15MassDropFilteredPF+process.jetProbabilityBJetTagsCA15MassDropFilteredPF+process.trackCountingHighPurBJetTagsCA15MassDropFilteredPF+process.trackCountingHighEffBJetTagsCA15MassDropFilteredPF+process.simpleSecondaryVertexHighEffBJetTagsCA15MassDropFilteredPF+process.simpleSecondaryVertexHighPurBJetTagsCA15MassDropFilteredPF+process.combinedSecondaryVertexBJetTagsCA15MassDropFilteredPF)


process.produceCaloMETCorrections = cms.Sequence(process.caloJetMETcorr+process.muonCaloMETcorr+process.caloType1CorrectedMet+process.caloType1p2CorrectedMet)


process.patPhotonEcalIsolation = cms.Sequence(process.gamIsoDepositEcalFromHits+process.gamIsoFromDepsEcalFromHits)


process.hpsPFTauDiscriminationByCombinedIsolationSeqDBSumPtCorr3Hits = cms.Sequence(process.hpsPFTauDiscriminationByLooseCombinedIsolationDBSumPtCorr3Hits+process.hpsPFTauDiscriminationByMediumCombinedIsolationDBSumPtCorr3Hits+process.hpsPFTauDiscriminationByTightCombinedIsolationDBSumPtCorr3Hits+process.hpsPFTauDiscriminationByRawCombinedIsolationDBSumPtCorr3Hits)


process.patPFTauIsolation = cms.Sequence(process.tauIsoDepositPFCandidates+process.tauIsoDepositPFChargedHadrons+process.tauIsoDepositPFNeutralHadrons+process.tauIsoDepositPFGammas)


process.btaggingCA15MassDropFilteredSubjetsPF = cms.Sequence(process.impactParameterTagInfosCA15MassDropFilteredSubjetsPF+process.secondaryVertexTagInfosCA15MassDropFilteredSubjetsPF+process.jetBProbabilityBJetTagsCA15MassDropFilteredSubjetsPF+process.jetProbabilityBJetTagsCA15MassDropFilteredSubjetsPF+process.trackCountingHighPurBJetTagsCA15MassDropFilteredSubjetsPF+process.trackCountingHighEffBJetTagsCA15MassDropFilteredSubjetsPF+process.simpleSecondaryVertexHighEffBJetTagsCA15MassDropFilteredSubjetsPF+process.simpleSecondaryVertexHighPurBJetTagsCA15MassDropFilteredSubjetsPF+process.combinedSecondaryVertexBJetTagsCA15MassDropFilteredSubjetsPF)


process.produceAndDiscriminateFixedConePFTaus = cms.Sequence(process.fixedConePFTauProducer+process.fixedConePFTauDiscriminationByLeadingTrackFinding+process.fixedConePFTauDiscriminationByLeadingTrackPtCut+process.fixedConePFTauDiscriminationByLeadingPionPtCut+process.fixedConePFTauDiscriminationByIsolation+process.fixedConePFTauDiscriminationByTrackIsolation+process.fixedConePFTauDiscriminationByECALIsolation+process.fixedConePFTauDiscriminationByIsolationUsingLeadingPion+process.fixedConePFTauDiscriminationByTrackIsolationUsingLeadingPion+process.fixedConePFTauDiscriminationByECALIsolationUsingLeadingPion+process.fixedConePFTauDiscriminationAgainstElectron+process.fixedConePFTauDiscriminationAgainstMuon)


process.pfPhotonIsolationSequencePFlow = cms.Sequence(process.photonPFIsolationDepositsSequencePFlow+process.phPFIsoValueCharged03PFIdPFlow+process.phPFIsoValueChargedAll03PFIdPFlow+process.phPFIsoValueGamma03PFIdPFlow+process.phPFIsoValueNeutral03PFIdPFlow+process.phPFIsoValuePU03PFIdPFlow+process.phPFIsoValueCharged04PFIdPFlow+process.phPFIsoValueChargedAll04PFIdPFlow+process.phPFIsoValueGamma04PFIdPFlow+process.phPFIsoValueNeutral04PFIdPFlow+process.phPFIsoValuePU04PFIdPFlow)


process.btaggingCATopTagPF = cms.Sequence(process.impactParameterTagInfosCATopTagPF+process.secondaryVertexTagInfosCATopTagPF+process.jetBProbabilityBJetTagsCATopTagPF+process.jetProbabilityBJetTagsCATopTagPF+process.trackCountingHighPurBJetTagsCATopTagPF+process.trackCountingHighEffBJetTagsCATopTagPF+process.simpleSecondaryVertexHighEffBJetTagsCATopTagPF+process.simpleSecondaryVertexHighPurBJetTagsCATopTagPF+process.combinedSecondaryVertexBJetTagsCATopTagPF)


process.btaggingCAHEPTopTagSubjetsPF = cms.Sequence(process.impactParameterTagInfosCAHEPTopTagSubjetsPF+process.secondaryVertexTagInfosCAHEPTopTagSubjetsPF+process.jetBProbabilityBJetTagsCAHEPTopTagSubjetsPF+process.jetProbabilityBJetTagsCAHEPTopTagSubjetsPF+process.trackCountingHighPurBJetTagsCAHEPTopTagSubjetsPF+process.trackCountingHighEffBJetTagsCAHEPTopTagSubjetsPF+process.simpleSecondaryVertexHighEffBJetTagsCAHEPTopTagSubjetsPF+process.simpleSecondaryVertexHighPurBJetTagsCAHEPTopTagSubjetsPF+process.combinedSecondaryVertexBJetTagsCAHEPTopTagSubjetsPF)


process.patJetCorrectionsPFlowLoose = cms.Sequence(process.patJetCorrFactorsPFlowLoose)


process.patMETCorrectionsPFlow = cms.Sequence(process.producePFMETCorrectionsPFlow)


process.pfNoPileUpSequence = cms.Sequence(process.pfPileUp+process.pfNoPileUp)


process.btagging = cms.Sequence(process.impactParameterTagInfos+process.trackCountingHighEffBJetTags+process.trackCountingHighPurBJetTags+process.jetProbabilityBJetTags+process.jetBProbabilityBJetTags+process.secondaryVertexTagInfos+process.simpleSecondaryVertexHighEffBJetTags+process.simpleSecondaryVertexHighPurBJetTags+process.combinedSecondaryVertexBJetTags+process.combinedSecondaryVertexMVABJetTags+process.ghostTrackVertexTagInfos+process.ghostTrackBJetTags+process.softPFMuonsTagInfos+process.softPFMuonBJetTags+process.softPFElectronsTagInfos+process.softPFElectronBJetTags)


process.hpsPFTauDiscriminationByCombinedIsolationSeqDBSumPtCorr = cms.Sequence(process.hpsPFTauDiscriminationByVLooseCombinedIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByLooseCombinedIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByMediumCombinedIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByTightCombinedIsolationDBSumPtCorr)


process.patPhotonTrackIsolation = cms.Sequence(process.gamIsoDepositTk+process.gamIsoFromDepsTk)


process.pfTausBaseSequence = cms.Sequence(process.pfTausProducerSansRefs+process.pfTausProducer+process.pfTausDiscriminationByLeadingTrackFinding+process.pfTausDiscriminationByLeadingPionPtCut+process.pfTausDiscriminationByIsolation)


process.recoTauClassicFixedConeSequence = cms.Sequence(process.recoTauCommonSequence+process.ak5PFJetsRecoTauPiZeros+process.produceAndDiscriminateFixedConePFTaus)


process.btaggingAODPFlowLoose = cms.Sequence(process.impactParameterTagInfosAODPFlowLoose+process.secondaryVertexTagInfosAODPFlowLoose+process.jetBProbabilityBJetTagsAODPFlowLoose+process.jetProbabilityBJetTagsAODPFlowLoose+process.trackCountingHighPurBJetTagsAODPFlowLoose+process.trackCountingHighEffBJetTagsAODPFlowLoose+process.simpleSecondaryVertexHighEffBJetTagsAODPFlowLoose+process.simpleSecondaryVertexHighPurBJetTagsAODPFlowLoose+process.combinedSecondaryVertexBJetTagsAODPFlowLoose)


process.makePatMHTs = cms.Sequence(process.patMHTs)


process.hpsPFTauDiscriminationByMVAIsolationSeqPFlowLoose = cms.Sequence(process.kt6PFJetsForRhoComputationVoronoiPFlowLoose+process.hpsPFTauDiscriminationByIsolationMVArawPFlowLoose+process.hpsPFTauDiscriminationByLooseIsolationMVAPFlowLoose+process.hpsPFTauDiscriminationByMediumIsolationMVAPFlowLoose+process.hpsPFTauDiscriminationByTightIsolationMVAPFlowLoose+process.hpsPFTauDiscriminationByIsolationMVA2rawPFlowLoose+process.hpsPFTauDiscriminationByLooseIsolationMVA2PFlowLoose+process.hpsPFTauDiscriminationByMediumIsolationMVA2PFlowLoose+process.hpsPFTauDiscriminationByTightIsolationMVA2PFlowLoose)


process.cleanPatCandidatesPFlowLoose = cms.Sequence(process.cleanPatMuonsPFlowLoose+process.cleanPatElectronsPFlowLoose+process.cleanPatPhotonsPFlowLoose+process.cleanPatTausPFlowLoose+process.cleanPatJetsPFlowLoose+process.cleanPatCandidateSummaryPFlowLoose)


process.genJetParticles = cms.Sequence(process.genParticlesForJets)


process.eIdSequence = cms.Sequence(process.eidRobustLoose+process.eidRobustTight+process.eidRobustHighEnergy+process.eidLoose+process.eidTight)


process.selectedPatCandidatesPFlow = cms.Sequence(process.selectedPatElectronsPFlow+process.selectedPatMuonsPFlow+process.selectedPatTausPFlow+process.selectedPatPhotonsPFlow+process.selectedPatJetsPFlow+process.selectedPatCandidateSummaryPFlow)


process.patElectronEcalIsolation = cms.Sequence(process.eleIsoDepositEcalFromHits+process.eleIsoFromDepsEcalFromHitsByCrystal)


process.patPhotonHcalIsolation = cms.Sequence(process.gamIsoDepositHcalFromTowers+process.gamIsoFromDepsHcalFromTowers)


process.patPFTauIsolationPFlow = cms.Sequence(process.tauIsoDepositPFCandidatesPFlow+process.tauIsoDepositPFChargedHadronsPFlow+process.tauIsoDepositPFNeutralHadronsPFlow+process.tauIsoDepositPFGammasPFlow)


process.muonPFIsolationSequencePFlow = cms.Sequence(process.muonPFIsolationDepositsSequencePFlow+process.muPFIsoValueCharged03PFlow+process.muPFIsoValueChargedAll03PFlow+process.muPFIsoValueGamma03PFlow+process.muPFIsoValueNeutral03PFlow+process.muPFIsoValueGammaHighThreshold03PFlow+process.muPFIsoValueNeutralHighThreshold03PFlow+process.muPFIsoValuePU03PFlow+process.muPFIsoValueCharged04PFlow+process.muPFIsoValueChargedAll04PFlow+process.muPFIsoValueGamma04PFlow+process.muPFIsoValueNeutral04PFlow+process.muPFIsoValueGammaHighThreshold04PFlow+process.muPFIsoValueNeutralHighThreshold04PFlow+process.muPFIsoValuePU04PFlow)


process.makePatMuonsPFlowLoose = cms.Sequence(process.muonMatchPFlowLoose+process.patMuonsPFlowLoose)


process.hpsPFTauDiscriminationByIsolationSeq = cms.Sequence(process.hpsPFTauDiscriminationByVLooseIsolation+process.hpsPFTauDiscriminationByLooseIsolation+process.hpsPFTauDiscriminationByMediumIsolation+process.hpsPFTauDiscriminationByTightIsolation)


process.pfParticleSelectionSequencePFlowLoose = cms.Sequence(process.pfNoPileUpIsoSequencePFlowLoose+process.pfSortByTypeSequencePFlowLoose)


process.recoAllGenJetsNoMuNoNu = cms.Sequence(process.sisCone5GenJetsNoMuNoNu+process.sisCone7GenJetsNoMuNoNu+process.kt4GenJetsNoMuNoNu+process.kt6GenJetsNoMuNoNu+process.iterativeCone5GenJetsNoMuNoNu+process.ak5GenJetsNoMuNoNu+process.ak7GenJetsNoMuNoNu+process.gk5GenJetsNoMuNoNu+process.gk7GenJetsNoMuNoNu+process.ca4GenJetsNoMuNoNu+process.ca6GenJetsNoMuNoNu)


process.patJetFlavourIdPFlow = cms.Sequence(process.patJetPartonsPFlow+process.patJetPartonAssociationPFlow+process.patJetFlavourAssociationPFlow)


process.hpsPFTauDiscriminationByMVAIsolationSeq = cms.Sequence(process.kt6PFJetsForRhoComputationVoronoi+process.hpsPFTauDiscriminationByIsolationMVAraw+process.hpsPFTauDiscriminationByLooseIsolationMVA+process.hpsPFTauDiscriminationByMediumIsolationMVA+process.hpsPFTauDiscriminationByTightIsolationMVA+process.hpsPFTauDiscriminationByIsolationMVA2raw+process.hpsPFTauDiscriminationByLooseIsolationMVA2+process.hpsPFTauDiscriminationByMediumIsolationMVA2+process.hpsPFTauDiscriminationByTightIsolationMVA2)


process.pfJetSequencePFlowLoose = cms.Sequence(process.pfJetsPFlowLoose)


process.patElectronHcalIsolation = cms.Sequence(process.eleIsoDepositHcalFromTowers+process.eleIsoFromDepsHcalFromTowers)


process.patJetCorrectionsPFlow = cms.Sequence(process.patJetCorrFactorsPFlow)


process.makePatPhotonsPFlow = cms.Sequence(process.photonMatchPFlow+process.patPhotonsPFlow)


process.produceAndDiscriminateShrinkingConePFTaus = cms.Sequence(process.shrinkingConePFTauProducerSansRefs+process.shrinkingConePFTauProducer+process.shrinkingConePFTauDiscriminationByLeadingTrackFinding+process.shrinkingConePFTauDiscriminationByLeadingTrackPtCut+process.shrinkingConePFTauDiscriminationByLeadingPionPtCut+process.shrinkingConePFTauDiscriminationByIsolation+process.shrinkingConePFTauDiscriminationByTrackIsolation+process.shrinkingConePFTauDiscriminationByECALIsolation+process.shrinkingConePFTauDiscriminationByIsolationUsingLeadingPion+process.shrinkingConePFTauDiscriminationByTrackIsolationUsingLeadingPion+process.shrinkingConePFTauDiscriminationByECALIsolationUsingLeadingPion+process.shrinkingConePFTauDiscriminationAgainstElectron+process.shrinkingConePFTauDiscriminationAgainstMuon)


process.makePatPhotons = cms.Sequence(process.photonMatch+process.patPhotons)


process.muonPFIsolationDepositsSequencePFlowLoose = cms.Sequence(process.muPFIsoDepositChargedPFlowLoose+process.muPFIsoDepositChargedAllPFlowLoose+process.muPFIsoDepositGammaPFlowLoose+process.muPFIsoDepositNeutralPFlowLoose+process.muPFIsoDepositPUPFlowLoose)


process.recoGenJets = cms.Sequence(process.kt4GenJets+process.kt6GenJets+process.iterativeCone5GenJets+process.ak5GenJets+process.ak7GenJets)


process.cleanPatCandidates = cms.Sequence(process.cleanPatMuons+process.cleanPatElectrons+process.cleanPatPhotons+process.cleanPatTaus+process.cleanPatJets+process.cleanPatCandidateSummary)


process.electronPFIsolationDepositsSequencePFlowLoose = cms.Sequence(process.elPFIsoDepositChargedPFlowLoose+process.elPFIsoDepositChargedAllPFlowLoose+process.elPFIsoDepositGammaPFlowLoose+process.elPFIsoDepositNeutralPFlowLoose+process.elPFIsoDepositPUPFlowLoose)


process.pfNoPileUpSequencePFlow = cms.Sequence(process.pfPileUpPFlow+process.pfNoPileUpPFlow)


process.patElectronIsolation = cms.Sequence(process.patElectronTrackIsolation+process.patElectronEcalIsolation+process.patElectronHcalIsolation)


process.countPatCandidatesPFlow = cms.Sequence(process.countPatElectronsPFlow+process.countPatMuonsPFlow+process.countPatTausPFlow+process.countPatLeptonsPFlow+process.countPatPhotonsPFlow+process.countPatJetsPFlow)


process.patPFTauIsolationPFlowLoose = cms.Sequence(process.tauIsoDepositPFCandidatesPFlowLoose+process.tauIsoDepositPFChargedHadronsPFlowLoose+process.tauIsoDepositPFNeutralHadronsPFlowLoose+process.tauIsoDepositPFGammasPFlowLoose)


process.pfTausBaseSequencePFlow = cms.Sequence(process.pfTausBasePFlow+process.produceHPSPFTausPFlow+process.pfTausBaseDiscriminationByDecayModeFindingPFlow+process.pfTausBaseDiscriminationByLooseCombinedIsolationDBSumPtCorrPFlow)


process.pfNoPileUpIsoSequence = cms.Sequence(process.pfPileUpIso+process.pfNoPileUpIso)


process.hpsPFTauDiscriminationByIsolationSeqDBSumPtCorr = cms.Sequence(process.hpsPFTauDiscriminationByVLooseIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByLooseIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByMediumIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByTightIsolationDBSumPtCorr)


process.patPhotonIsolation = cms.Sequence(process.patPhotonTrackIsolation+process.patPhotonEcalIsolation+process.patPhotonHcalIsolation)


process.hpsPFTauDiscriminationByMVAIsolationSeqPFlow = cms.Sequence(process.kt6PFJetsForRhoComputationVoronoiPFlow+process.hpsPFTauDiscriminationByIsolationMVArawPFlow+process.hpsPFTauDiscriminationByLooseIsolationMVAPFlow+process.hpsPFTauDiscriminationByMediumIsolationMVAPFlow+process.hpsPFTauDiscriminationByTightIsolationMVAPFlow+process.hpsPFTauDiscriminationByIsolationMVA2rawPFlow+process.hpsPFTauDiscriminationByLooseIsolationMVA2PFlow+process.hpsPFTauDiscriminationByMediumIsolationMVA2PFlow+process.hpsPFTauDiscriminationByTightIsolationMVA2PFlow)


process.updateHPSPFTaus = cms.Sequence(process.hpsPFTauDiscriminationByDecayModeFinding+process.hpsPFTauDiscriminationByChargedIsolationSeq+process.hpsPFTauDiscriminationByMVAIsolationSeq+process.hpsPFTauDiscriminationByRawCombinedIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByRawChargedIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByRawGammaIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByVLooseIsolation+process.hpsPFTauDiscriminationByLooseIsolation+process.hpsPFTauDiscriminationByMediumIsolation+process.hpsPFTauDiscriminationByTightIsolation+process.hpsPFTauDiscriminationByVLooseIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByLooseIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByMediumIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByTightIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByVLooseCombinedIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByLooseCombinedIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByMediumCombinedIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByTightCombinedIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByLooseCombinedIsolationDBSumPtCorr3Hits+process.hpsPFTauDiscriminationByMediumCombinedIsolationDBSumPtCorr3Hits+process.hpsPFTauDiscriminationByTightCombinedIsolationDBSumPtCorr3Hits+process.hpsPFTauDiscriminationByRawCombinedIsolationDBSumPtCorr3Hits+process.hpsPFTauDiscriminationByLooseElectronRejection+process.hpsPFTauDiscriminationByMediumElectronRejection+process.hpsPFTauDiscriminationByTightElectronRejection+process.hpsPFTauDiscriminationByMVAElectronRejection+process.hpsPFTauDiscriminationByMVA2rawElectronRejection+process.hpsPFTauDiscriminationByMVA2LooseElectronRejection+process.hpsPFTauDiscriminationByMVA2VLooseElectronRejection+process.hpsPFTauDiscriminationByMVA2MediumElectronRejection+process.hpsPFTauDiscriminationByMVA2TightElectronRejection+process.hpsPFTauDiscriminationByLooseMuonRejection+process.hpsPFTauDiscriminationByMediumMuonRejection+process.hpsPFTauDiscriminationByTightMuonRejection+process.hpsPFTauDiscriminationByLooseMuonRejection2+process.hpsPFTauDiscriminationByMediumMuonRejection2+process.hpsPFTauDiscriminationByTightMuonRejection2+process.hpsPFTauDiscriminationByLooseMuonRejection3+process.hpsPFTauDiscriminationByTightMuonRejection3+process.hpsPFTauDiscriminationByMVA3rawElectronRejection+process.hpsPFTauDiscriminationByMVA3LooseElectronRejection+process.hpsPFTauDiscriminationByMVA3VTightElectronRejection+process.hpsPFTauDiscriminationByMVA3MediumElectronRejection+process.hpsPFTauDiscriminationByMVA3TightElectronRejection+process.hpsPFTauDiscriminationByDeadECALElectronRejection)


process.patCaloTauDiscrimination = cms.Sequence()


process.selectedPatCandidates = cms.Sequence(process.selectedPatElectrons+process.selectedPatMuons+process.selectedPatTaus+process.selectedPatPhotons+process.selectedPatJets+process.selectedPatCandidateSummary)


process.countPatCandidates = cms.Sequence(process.countPatElectrons+process.countPatMuons+process.countPatTaus+process.countPatLeptons+process.countPatPhotons+process.countPatJets)


process.hpsPFTauDiscriminationByChargedIsolationSeqPFlowLoose = cms.Sequence(process.hpsPFTauDiscriminationByVLooseChargedIsolationPFlowLoose+process.hpsPFTauDiscriminationByLooseChargedIsolationPFlowLoose+process.hpsPFTauDiscriminationByMediumChargedIsolationPFlowLoose+process.hpsPFTauDiscriminationByTightChargedIsolationPFlowLoose)


process.btaggingCA8PF = cms.Sequence(process.impactParameterTagInfosCA8PF+process.secondaryVertexTagInfosCA8PF+process.jetBProbabilityBJetTagsCA8PF+process.jetProbabilityBJetTagsCA8PF+process.trackCountingHighPurBJetTagsCA8PF+process.trackCountingHighEffBJetTagsCA8PF+process.simpleSecondaryVertexHighEffBJetTagsCA8PF+process.simpleSecondaryVertexHighPurBJetTagsCA8PF+process.combinedSecondaryVertexBJetTagsCA8PF)


process.producePatPFMETCorrectionsPFlowLoose = cms.Sequence(process.patPFMetPFlowLoose+process.pfCandsNotInJetPFlowLoose+process.selectedPatJetsForMETtype1p2CorrPFlowLoose+process.selectedPatJetsForMETtype2CorrPFlowLoose+process.patPFJetMETtype1p2CorrPFlowLoose+process.patPFJetMETtype2CorrPFlowLoose+process.pfCandMETcorrPFlowLoose+process.patType1CorrectedPFMetPFlowLoose+process.patType1p2CorrectedPFMetPFlowLoose)


process.recoTauHPSTancSequence = cms.Sequence(process.recoTauCommonSequence+process.ak5PFJetsLegacyHPSPiZeros+process.combinatoricRecoTaus+process.hpsTancTauInitialSequence+process.hpsTancTauDiscriminantSequence)


process.btaggingCA8PrunedPF = cms.Sequence(process.impactParameterTagInfosCA8PrunedPF+process.secondaryVertexTagInfosCA8PrunedPF+process.jetBProbabilityBJetTagsCA8PrunedPF+process.jetProbabilityBJetTagsCA8PrunedPF+process.trackCountingHighPurBJetTagsCA8PrunedPF+process.trackCountingHighEffBJetTagsCA8PrunedPF+process.simpleSecondaryVertexHighEffBJetTagsCA8PrunedPF+process.simpleSecondaryVertexHighPurBJetTagsCA8PrunedPF+process.combinedSecondaryVertexBJetTagsCA8PrunedPF)


process.photonPFIsolationDepositsSequence = cms.Sequence(process.phPFIsoDepositCharged+process.phPFIsoDepositChargedAll+process.phPFIsoDepositGamma+process.phPFIsoDepositNeutral+process.phPFIsoDepositPU)


process.pfNoPileUpIsoSequencePFlow = cms.Sequence(process.pfPileUpIsoPFlow+process.pfNoPileUpIsoPFlow)


process.pfJetSequence = cms.Sequence(process.pfJets)


process.pfPhotonIsolationSequence = cms.Sequence(process.photonPFIsolationDepositsSequence+process.phPFIsoValueCharged03PFId+process.phPFIsoValueChargedAll03PFId+process.phPFIsoValueGamma03PFId+process.phPFIsoValueNeutral03PFId+process.phPFIsoValuePU03PFId+process.phPFIsoValueCharged04PFId+process.phPFIsoValueChargedAll04PFId+process.phPFIsoValueGamma04PFId+process.phPFIsoValueNeutral04PFId+process.phPFIsoValuePU04PFId)


process.recoAllGenJets = cms.Sequence(process.sisCone5GenJets+process.sisCone7GenJets+process.kt4GenJets+process.kt6GenJets+process.iterativeCone5GenJets+process.ak5GenJets+process.ak7GenJets+process.gk5GenJets+process.gk7GenJets+process.ca4GenJets+process.ca6GenJets)


process.makePatElectronsPFlow = cms.Sequence(process.electronMatchPFlow+process.patElectronsPFlow)


process.pfTausPreSequence = cms.Sequence(process.pfJetTracksAssociatorAtVertex+process.pfTauPFJets08Region+process.pfTauPileUpVertices+process.pfTauTagInfoProducer+process.pfJetsPiZeros+process.pfJetsLegacyTaNCPiZeros+process.pfJetsLegacyHPSPiZeros)


process.muonPFIsolationSequencePFlowLoose = cms.Sequence(process.muonPFIsolationDepositsSequencePFlowLoose+process.muPFIsoValueCharged03PFlowLoose+process.muPFIsoValueChargedAll03PFlowLoose+process.muPFIsoValueGamma03PFlowLoose+process.muPFIsoValueNeutral03PFlowLoose+process.muPFIsoValueGammaHighThreshold03PFlowLoose+process.muPFIsoValueNeutralHighThreshold03PFlowLoose+process.muPFIsoValuePU03PFlowLoose+process.muPFIsoValueCharged04PFlowLoose+process.muPFIsoValueChargedAll04PFlowLoose+process.muPFIsoValueGamma04PFlowLoose+process.muPFIsoValueNeutral04PFlowLoose+process.muPFIsoValueGammaHighThreshold04PFlowLoose+process.muPFIsoValueNeutralHighThreshold04PFlowLoose+process.muPFIsoValuePU04PFlowLoose)


process.pfParticleSelectionSequence = cms.Sequence(process.pfNoPileUpIsoSequence+process.pfSortByTypeSequence)


process.pfPhotonSequencePFlowLoose = cms.Sequence(process.pfSelectedPhotonsPFlowLoose+process.pfPhotonIsolationSequencePFlowLoose+process.pfIsolatedPhotonsPFlowLoose)


process.makeGenEvt = cms.Sequence(process.initSubset+process.decaySubset+process.genEvt)


process.trkPOGFilters = cms.Sequence(~process.manystripclus53X+~process.toomanystripclus53X+~process.logErrorTooManyClusters)


process.pfTausBaseSequencePFlowLoose = cms.Sequence(process.pfTausBasePFlowLoose+process.produceHPSPFTausPFlowLoose+process.pfTausBaseDiscriminationByDecayModeFindingPFlowLoose+process.pfTausBaseDiscriminationByLooseCombinedIsolationDBSumPtCorrPFlowLoose)


process.btaggingAODPFlow = cms.Sequence(process.impactParameterTagInfosAODPFlow+process.secondaryVertexTagInfosAODPFlow+process.jetBProbabilityBJetTagsAODPFlow+process.jetProbabilityBJetTagsAODPFlow+process.trackCountingHighPurBJetTagsAODPFlow+process.trackCountingHighEffBJetTagsAODPFlow+process.simpleSecondaryVertexHighEffBJetTagsAODPFlow+process.simpleSecondaryVertexHighPurBJetTagsAODPFlow+process.combinedSecondaryVertexBJetTagsAODPFlow)


process.btaggingCATopTagSubjetsPF = cms.Sequence(process.impactParameterTagInfosCATopTagSubjetsPF+process.secondaryVertexTagInfosCATopTagSubjetsPF+process.jetBProbabilityBJetTagsCATopTagSubjetsPF+process.jetProbabilityBJetTagsCATopTagSubjetsPF+process.trackCountingHighPurBJetTagsCATopTagSubjetsPF+process.trackCountingHighEffBJetTagsCATopTagSubjetsPF+process.simpleSecondaryVertexHighEffBJetTagsCATopTagSubjetsPF+process.simpleSecondaryVertexHighPurBJetTagsCATopTagSubjetsPF+process.combinedSecondaryVertexBJetTagsCATopTagSubjetsPF)


process.makePatPhotonsPFlowLoose = cms.Sequence(process.photonMatchPFlowLoose+process.patPhotonsPFlowLoose)


process.patJetFlavourIdPFlowLoose = cms.Sequence(process.patJetPartonsPFlowLoose+process.patJetPartonAssociationPFlowLoose+process.patJetFlavourAssociationPFlowLoose)


process.makePatMuonsPFlow = cms.Sequence(process.muonMatchPFlow+process.patMuonsPFlow)


process.pfSortByTypeSequencePFlow = cms.Sequence(process.pfAllNeutralHadronsPFlow+process.pfAllChargedHadronsPFlow+process.pfAllPhotonsPFlow+process.pfAllChargedParticlesPFlow+process.pfPileUpAllChargedParticlesPFlow+process.pfAllNeutralHadronsAndPhotonsPFlow)


process.pfElectronIsolationSequencePFlowLoose = cms.Sequence(process.electronPFIsolationDepositsSequencePFlowLoose+process.elPFIsoValueCharged03PFIdPFlowLoose+process.elPFIsoValueChargedAll03PFIdPFlowLoose+process.elPFIsoValueGamma03PFIdPFlowLoose+process.elPFIsoValueNeutral03PFIdPFlowLoose+process.elPFIsoValuePU03PFIdPFlowLoose+process.elPFIsoValueCharged04PFIdPFlowLoose+process.elPFIsoValueChargedAll04PFIdPFlowLoose+process.elPFIsoValueGamma04PFIdPFlowLoose+process.elPFIsoValueNeutral04PFIdPFlowLoose+process.elPFIsoValuePU04PFIdPFlowLoose+process.elPFIsoValueCharged03NoPFIdPFlowLoose+process.elPFIsoValueChargedAll03NoPFIdPFlowLoose+process.elPFIsoValueGamma03NoPFIdPFlowLoose+process.elPFIsoValueNeutral03NoPFIdPFlowLoose+process.elPFIsoValuePU03NoPFIdPFlowLoose+process.elPFIsoValueCharged04NoPFIdPFlowLoose+process.elPFIsoValueChargedAll04NoPFIdPFlowLoose+process.elPFIsoValueGamma04NoPFIdPFlowLoose+process.elPFIsoValueNeutral04NoPFIdPFlowLoose+process.elPFIsoValuePU04NoPFIdPFlowLoose)


process.pfTausPreSequencePFlow = cms.Sequence(process.pfJetTracksAssociatorAtVertexPFlow+process.pfTauPFJets08RegionPFlow+process.pfTauPileUpVerticesPFlow+process.pfTauTagInfoProducerPFlow+process.pfJetsPiZerosPFlow+process.pfJetsLegacyTaNCPiZerosPFlow+process.pfJetsLegacyHPSPiZerosPFlow)


process.patPFCandidateIsoDepositSelectionPFlowLoose = cms.Sequence(process.pfNoPileUpIsoSequencePFlowLoose+process.pfSortByTypeSequencePFlowLoose)


process.pfNoPileUpSequencePFlowLoose = cms.Sequence(process.pfPileUpPFlowLoose+process.pfNoPileUpPFlowLoose)


process.makePatJetsPFlowLoose = cms.Sequence(process.patJetCorrectionsPFlowLoose+process.patJetChargePFlowLoose+process.patJetPartonMatchPFlowLoose+process.patJetGenJetMatchPFlowLoose+process.patJetFlavourIdPFlowLoose+process.patJetsPFlowLoose)


process.pfParticleSelectionSequencePFlow = cms.Sequence(process.pfNoPileUpIsoSequencePFlow+process.pfSortByTypeSequencePFlow)


process.producePFMETCorrections = cms.Sequence(process.pfCandsNotInJet+process.pfJetMETcorr+process.pfCandMETcorr+process.pfchsMETcorr+process.pfType1CorrectedMet+process.pfType1p2CorrectedMet)


process.patFixedConePFTauDiscrimination = cms.Sequence()


process.electronPFIsolationDepositsSequencePFlow = cms.Sequence(process.elPFIsoDepositChargedPFlow+process.elPFIsoDepositChargedAllPFlow+process.elPFIsoDepositGammaPFlow+process.elPFIsoDepositNeutralPFlow+process.elPFIsoDepositPUPFlow)


process.eidMVASequence = cms.Sequence(process.mvaTrigV0+process.mvaNonTrigV0)


process.hiRecoGenJets = cms.Sequence(process.iterativeCone5HiGenJets+process.kt4HiGenJets+process.kt6HiGenJets+process.ak2HiGenJets+process.ak3HiGenJets+process.ak4HiGenJets+process.ak5HiGenJets+process.ak6HiGenJets+process.ak7HiGenJets)


process.inclusiveVertexing = cms.Sequence(process.inclusiveVertexFinder+process.vertexMerger+process.trackVertexArbitrator+process.inclusiveMergedVertices)


process.patJetCorrections = cms.Sequence(process.patJetCorrFactors)


process.metFilters = cms.Sequence(process.HBHENoiseFilter+process.CSCTightHaloFilter+process.hcalLaserEventFilter+process.EcalDeadCellTriggerPrimitiveFilter+process.goodVertices+process.trackingFailureFilter+process.eeBadScFilter+process.ecalLaserCorrFilter+process.trkPOGFilters)


process.producePatPFMETCorrections = cms.Sequence(process.patPFMet+process.pfCandsNotInJet+process.selectedPatJetsForMETtype1p2Corr+process.selectedPatJetsForMETtype2Corr+process.patPFJetMETtype1p2Corr+process.patPFJetMETtype2Corr+process.pfCandMETcorr+process.patType1CorrectedPFMet+process.patType1p2CorrectedPFMet)


process.makePatJetsPFlow = cms.Sequence(process.patJetCorrectionsPFlow+process.patJetChargePFlow+process.patJetPartonMatchPFlow+process.patJetGenJetMatchPFlow+process.patJetFlavourIdPFlow+process.patJetsPFlow)


process.pfTauSequence = cms.Sequence(process.pfTausPreSequence+process.pfTausBaseSequence+process.pfTaus)


process.pfPhotonSequencePFlow = cms.Sequence(process.pfSelectedPhotonsPFlow+process.pfPhotonIsolationSequencePFlow+process.pfIsolatedPhotonsPFlow)


process.flavorHistorySeq = cms.Sequence(process.bFlavorHistoryProducer+process.cFlavorHistoryProducer+process.flavorHistoryFilter)


process.pfElectronIsolationSequencePFlow = cms.Sequence(process.electronPFIsolationDepositsSequencePFlow+process.elPFIsoValueCharged03PFIdPFlow+process.elPFIsoValueChargedAll03PFIdPFlow+process.elPFIsoValueGamma03PFIdPFlow+process.elPFIsoValueNeutral03PFIdPFlow+process.elPFIsoValuePU03PFIdPFlow+process.elPFIsoValueCharged04PFIdPFlow+process.elPFIsoValueChargedAll04PFIdPFlow+process.elPFIsoValueGamma04PFIdPFlow+process.elPFIsoValueNeutral04PFIdPFlow+process.elPFIsoValuePU04PFIdPFlow+process.elPFIsoValueCharged03NoPFIdPFlow+process.elPFIsoValueChargedAll03NoPFIdPFlow+process.elPFIsoValueGamma03NoPFIdPFlow+process.elPFIsoValueNeutral03NoPFIdPFlow+process.elPFIsoValuePU03NoPFIdPFlow+process.elPFIsoValueCharged04NoPFIdPFlow+process.elPFIsoValueChargedAll04NoPFIdPFlow+process.elPFIsoValueGamma04NoPFIdPFlow+process.elPFIsoValueNeutral04NoPFIdPFlow+process.elPFIsoValuePU04NoPFIdPFlow)


process.makePatElectronsPFlowLoose = cms.Sequence(process.electronMatchPFlowLoose+process.patElectronsPFlowLoose)


process.cleanPatCandidatesPFlow = cms.Sequence(process.cleanPatMuonsPFlow+process.cleanPatElectronsPFlow+process.cleanPatPhotonsPFlow+process.cleanPatTausPFlow+process.cleanPatJetsPFlow+process.cleanPatCandidateSummaryPFlow)


process.updateHPSPFTausPFlow = cms.Sequence(process.hpsPFTauDiscriminationByDecayModeFindingPFlow+process.hpsPFTauDiscriminationByChargedIsolationSeqPFlow+process.hpsPFTauDiscriminationByMVAIsolationSeqPFlow+process.hpsPFTauDiscriminationByRawCombinedIsolationDBSumPtCorrPFlow+process.hpsPFTauDiscriminationByRawChargedIsolationDBSumPtCorrPFlow+process.hpsPFTauDiscriminationByRawGammaIsolationDBSumPtCorrPFlow+process.hpsPFTauDiscriminationByVLooseIsolationPFlow+process.hpsPFTauDiscriminationByLooseIsolationPFlow+process.hpsPFTauDiscriminationByMediumIsolationPFlow+process.hpsPFTauDiscriminationByTightIsolationPFlow+process.hpsPFTauDiscriminationByVLooseIsolationDBSumPtCorrPFlow+process.hpsPFTauDiscriminationByLooseIsolationDBSumPtCorrPFlow+process.hpsPFTauDiscriminationByMediumIsolationDBSumPtCorrPFlow+process.hpsPFTauDiscriminationByTightIsolationDBSumPtCorrPFlow+process.hpsPFTauDiscriminationByVLooseCombinedIsolationDBSumPtCorrPFlow+process.hpsPFTauDiscriminationByLooseCombinedIsolationDBSumPtCorrPFlow+process.hpsPFTauDiscriminationByMediumCombinedIsolationDBSumPtCorrPFlow+process.hpsPFTauDiscriminationByTightCombinedIsolationDBSumPtCorrPFlow+process.hpsPFTauDiscriminationByLooseCombinedIsolationDBSumPtCorr3HitsPFlow+process.hpsPFTauDiscriminationByMediumCombinedIsolationDBSumPtCorr3HitsPFlow+process.hpsPFTauDiscriminationByTightCombinedIsolationDBSumPtCorr3HitsPFlow+process.hpsPFTauDiscriminationByRawCombinedIsolationDBSumPtCorr3HitsPFlow+process.hpsPFTauDiscriminationByLooseElectronRejectionPFlow+process.hpsPFTauDiscriminationByMediumElectronRejectionPFlow+process.hpsPFTauDiscriminationByTightElectronRejectionPFlow+process.hpsPFTauDiscriminationByMVAElectronRejectionPFlow+process.hpsPFTauDiscriminationByMVA2rawElectronRejectionPFlow+process.hpsPFTauDiscriminationByMVA2LooseElectronRejectionPFlow+process.hpsPFTauDiscriminationByMVA2VLooseElectronRejectionPFlow+process.hpsPFTauDiscriminationByMVA2MediumElectronRejectionPFlow+process.hpsPFTauDiscriminationByMVA2TightElectronRejectionPFlow+process.hpsPFTauDiscriminationByLooseMuonRejectionPFlow+process.hpsPFTauDiscriminationByMediumMuonRejectionPFlow+process.hpsPFTauDiscriminationByTightMuonRejectionPFlow+process.hpsPFTauDiscriminationByLooseMuonRejection2PFlow+process.hpsPFTauDiscriminationByMediumMuonRejection2PFlow+process.hpsPFTauDiscriminationByTightMuonRejection2PFlow+process.hpsPFTauDiscriminationByLooseMuonRejection3PFlow+process.hpsPFTauDiscriminationByTightMuonRejection3PFlow+process.hpsPFTauDiscriminationByMVA3rawElectronRejectionPFlow+process.hpsPFTauDiscriminationByMVA3LooseElectronRejectionPFlow+process.hpsPFTauDiscriminationByMVA3VTightElectronRejectionPFlow+process.hpsPFTauDiscriminationByMVA3MediumElectronRejectionPFlow+process.hpsPFTauDiscriminationByMVA3TightElectronRejectionPFlow+process.hpsPFTauDiscriminationByDeadECALElectronRejectionPFlow)


process.muonPFIsolationDepositsSequence = cms.Sequence(process.muPFIsoDepositCharged+process.muPFIsoDepositChargedAll+process.muPFIsoDepositGamma+process.muPFIsoDepositNeutral+process.muPFIsoDepositPU)


process.electronPFIsolationDepositsSequence = cms.Sequence(process.elPFIsoDepositCharged+process.elPFIsoDepositChargedAll+process.elPFIsoDepositGamma+process.elPFIsoDepositNeutral+process.elPFIsoDepositPU)


process.type0PFMEtCorrectionPFCandToVertexAssociation = cms.Sequence(process.selectedVerticesForPFMEtCorrType0+process.selectedPrimaryVertexHighestPtTrackSumForPFMEtCorrType0+process.particleFlowDisplacedVertex+process.trackToVertexAssociation+process.pfCandidateToVertexAssociation)


process.produceShrinkingConeDiscriminationByTauNeuralClassifier = cms.Sequence(process.shrinkingConePFTauDiscriminationByTaNC+process.shrinkingConePFTauDiscriminationByTaNCfrOnePercent+process.shrinkingConePFTauDiscriminationByTaNCfrHalfPercent+process.shrinkingConePFTauDiscriminationByTaNCfrQuarterPercent+process.shrinkingConePFTauDiscriminationByTaNCfrTenthPercent)


process.recoTauClassicShrinkingConeSequence = cms.Sequence(process.recoTauCommonSequence+process.ak5PFJetsRecoTauPiZeros+process.produceAndDiscriminateShrinkingConePFTaus)


process.pfMuonIsolationSequencePFlow = cms.Sequence(process.muonPFIsolationSequencePFlow)


process.patPFCandidateIsoDepositSelectionPFlow = cms.Sequence(process.pfNoPileUpIsoSequencePFlow+process.pfSortByTypeSequencePFlow)


process.pfTauSequencePFlow = cms.Sequence(process.pfTausPreSequencePFlow+process.pfTausBaseSequencePFlow+process.pfTausPFlow)


process.recoTauClassicShrinkingConeMVASequence = cms.Sequence(process.produceShrinkingConeDiscriminationByTauNeuralClassifier)


process.pfTauSequencePFlowLoose = cms.Sequence(process.pfTausPreSequencePFlowLoose+process.pfTausBaseSequencePFlowLoose+process.pfTausPFlowLoose)


process.pfElectronSequencePFlowLoose = cms.Sequence(process.pfAllElectronsPFlowLoose+process.pfElectronsFromVertexPFlowLoose+process.pfSelectedElectronsPFlowLoose+process.pfElectronIsolationSequencePFlowLoose+process.pfIsolatedElectronsPFlowLoose+process.pfElectronsPFlowLoose)


process.filtersSeq = cms.Sequence(process.primaryVertexFilter+process.metFilters)


process.patPFCandidateIsoDepositSelection = cms.Sequence(process.pfNoPileUpIsoSequence+process.pfSortByTypeSequence)


process.pfMuonSequencePFlow = cms.Sequence(process.pfAllMuonsPFlow+process.pfMuonsFromVertexPFlow+process.pfSelectedMuonsPFlow+process.pfMuonIsolationSequencePFlow+process.pfIsolatedMuonsPFlow+process.pfMuonsPFlow)


process.patJetMETCorrections = cms.Sequence(process.patJetCorrections)


process.makePatJets = cms.Sequence(process.patJetCorrections+process.patJetCharge+process.patJetPartonMatch+process.patJetGenJetMatch+process.patJetFlavourId+process.patJets)


process.pfElectronSequencePFlow = cms.Sequence(process.pfAllElectronsPFlow+process.pfElectronsFromVertexPFlow+process.pfSelectedElectronsPFlow+process.pfElectronIsolationSequencePFlow+process.pfIsolatedElectronsPFlow+process.pfElectronsPFlow)


process.patHPSPFTauDiscriminationUpdatePFlow = cms.Sequence(process.updateHPSPFTausPFlow)


process.type0PFMEtCorrection = cms.Sequence(process.type0PFMEtCorrectionPFCandToVertexAssociation+process.pfMETcorrType0)


process.patHPSPFTauDiscriminationUpdate = cms.Sequence(process.updateHPSPFTaus)


process.pfPhotonSequence = cms.Sequence(process.pfSelectedPhotons+process.pfPhotonIsolationSequence+process.pfIsolatedPhotons)


process.muonPFIsolationSequence = cms.Sequence(process.muonPFIsolationDepositsSequence+process.muPFIsoValueCharged03+process.muPFIsoValueChargedAll03+process.muPFIsoValueGamma03+process.muPFIsoValueNeutral03+process.muPFIsoValueGammaHighThreshold03+process.muPFIsoValueNeutralHighThreshold03+process.muPFIsoValuePU03+process.muPFIsoValueCharged04+process.muPFIsoValueChargedAll04+process.muPFIsoValueGamma04+process.muPFIsoValueNeutral04+process.muPFIsoValueGammaHighThreshold04+process.muPFIsoValueNeutralHighThreshold04+process.muPFIsoValuePU04)


process.updateHPSPFTausPFlowLoose = cms.Sequence(process.hpsPFTauDiscriminationByDecayModeFindingPFlowLoose+process.hpsPFTauDiscriminationByChargedIsolationSeqPFlowLoose+process.hpsPFTauDiscriminationByMVAIsolationSeqPFlowLoose+process.hpsPFTauDiscriminationByRawCombinedIsolationDBSumPtCorrPFlowLoose+process.hpsPFTauDiscriminationByRawChargedIsolationDBSumPtCorrPFlowLoose+process.hpsPFTauDiscriminationByRawGammaIsolationDBSumPtCorrPFlowLoose+process.hpsPFTauDiscriminationByVLooseIsolationPFlowLoose+process.hpsPFTauDiscriminationByLooseIsolationPFlowLoose+process.hpsPFTauDiscriminationByMediumIsolationPFlowLoose+process.hpsPFTauDiscriminationByTightIsolationPFlowLoose+process.hpsPFTauDiscriminationByVLooseIsolationDBSumPtCorrPFlowLoose+process.hpsPFTauDiscriminationByLooseIsolationDBSumPtCorrPFlowLoose+process.hpsPFTauDiscriminationByMediumIsolationDBSumPtCorrPFlowLoose+process.hpsPFTauDiscriminationByTightIsolationDBSumPtCorrPFlowLoose+process.hpsPFTauDiscriminationByVLooseCombinedIsolationDBSumPtCorrPFlowLoose+process.hpsPFTauDiscriminationByLooseCombinedIsolationDBSumPtCorrPFlowLoose+process.hpsPFTauDiscriminationByMediumCombinedIsolationDBSumPtCorrPFlowLoose+process.hpsPFTauDiscriminationByTightCombinedIsolationDBSumPtCorrPFlowLoose+process.hpsPFTauDiscriminationByLooseCombinedIsolationDBSumPtCorr3HitsPFlowLoose+process.hpsPFTauDiscriminationByMediumCombinedIsolationDBSumPtCorr3HitsPFlowLoose+process.hpsPFTauDiscriminationByTightCombinedIsolationDBSumPtCorr3HitsPFlowLoose+process.hpsPFTauDiscriminationByRawCombinedIsolationDBSumPtCorr3HitsPFlowLoose+process.hpsPFTauDiscriminationByLooseElectronRejectionPFlowLoose+process.hpsPFTauDiscriminationByMediumElectronRejectionPFlowLoose+process.hpsPFTauDiscriminationByTightElectronRejectionPFlowLoose+process.hpsPFTauDiscriminationByMVAElectronRejectionPFlowLoose+process.hpsPFTauDiscriminationByMVA2rawElectronRejectionPFlowLoose+process.hpsPFTauDiscriminationByMVA2LooseElectronRejectionPFlowLoose+process.hpsPFTauDiscriminationByMVA2VLooseElectronRejectionPFlowLoose+process.hpsPFTauDiscriminationByMVA2MediumElectronRejectionPFlowLoose+process.hpsPFTauDiscriminationByMVA2TightElectronRejectionPFlowLoose+process.hpsPFTauDiscriminationByLooseMuonRejectionPFlowLoose+process.hpsPFTauDiscriminationByMediumMuonRejectionPFlowLoose+process.hpsPFTauDiscriminationByTightMuonRejectionPFlowLoose+process.hpsPFTauDiscriminationByLooseMuonRejection2PFlowLoose+process.hpsPFTauDiscriminationByMediumMuonRejection2PFlowLoose+process.hpsPFTauDiscriminationByTightMuonRejection2PFlowLoose+process.hpsPFTauDiscriminationByLooseMuonRejection3PFlowLoose+process.hpsPFTauDiscriminationByTightMuonRejection3PFlowLoose+process.hpsPFTauDiscriminationByMVA3rawElectronRejectionPFlowLoose+process.hpsPFTauDiscriminationByMVA3LooseElectronRejectionPFlowLoose+process.hpsPFTauDiscriminationByMVA3VTightElectronRejectionPFlowLoose+process.hpsPFTauDiscriminationByMVA3MediumElectronRejectionPFlowLoose+process.hpsPFTauDiscriminationByMVA3TightElectronRejectionPFlowLoose+process.hpsPFTauDiscriminationByDeadECALElectronRejectionPFlowLoose)


process.pfMuonIsolationSequence = cms.Sequence(process.muonPFIsolationSequence)


process.produceAndDiscriminateHPSPFTaus = cms.Sequence(process.produceHPSPFTaus+process.hpsPFTauDiscriminationByDecayModeFinding+process.hpsPFTauDiscriminationByChargedIsolationSeq+process.hpsPFTauDiscriminationByIsolationSeq+process.hpsPFTauDiscriminationByIsolationSeqDBSumPtCorr+process.hpsPFTauDiscriminationByMVAIsolationSeq+process.hpsPFTauDiscriminationByRawCombinedIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByRawChargedIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByRawGammaIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByCombinedIsolationSeqDBSumPtCorr+process.hpsPFTauDiscriminationByCombinedIsolationSeqDBSumPtCorr3Hits+process.hpsPFTauDiscriminationByLooseElectronRejection+process.hpsPFTauDiscriminationByMediumElectronRejection+process.hpsPFTauDiscriminationByTightElectronRejection+process.hpsPFTauDiscriminationByMVAElectronRejection+process.hpsPFTauDiscriminationByMVA2rawElectronRejection+process.hpsPFTauDiscriminationByMVA2VLooseElectronRejection+process.hpsPFTauDiscriminationByMVA2LooseElectronRejection+process.hpsPFTauDiscriminationByMVA2MediumElectronRejection+process.hpsPFTauDiscriminationByMVA2TightElectronRejection+process.hpsPFTauDiscriminationByMVA3rawElectronRejection+process.hpsPFTauDiscriminationByMVA3LooseElectronRejection+process.hpsPFTauDiscriminationByMVA3MediumElectronRejection+process.hpsPFTauDiscriminationByMVA3TightElectronRejection+process.hpsPFTauDiscriminationByMVA3VTightElectronRejection+process.hpsPFTauDiscriminationByDeadECALElectronRejection+process.hpsPFTauDiscriminationByLooseMuonRejection+process.hpsPFTauDiscriminationByMediumMuonRejection+process.hpsPFTauDiscriminationByTightMuonRejection+process.hpsPFTauDiscriminationByLooseMuonRejection2+process.hpsPFTauDiscriminationByMediumMuonRejection2+process.hpsPFTauDiscriminationByTightMuonRejection2+process.hpsPFTauDiscriminationByLooseMuonRejection3+process.hpsPFTauDiscriminationByTightMuonRejection3)


process.makePatTausPFlow = cms.Sequence(process.patHPSPFTauDiscriminationUpdatePFlow+process.patPFTauIsolationPFlow+process.tauMatchPFlow+process.tauGenJetsPFlow+process.tauGenJetsSelectorAllHadronsPFlow+process.tauGenJetMatchPFlow+process.patTausPFlow)


process.pfElectronIsolationSequence = cms.Sequence(process.electronPFIsolationDepositsSequence+process.elPFIsoValueCharged03PFId+process.elPFIsoValueChargedAll03PFId+process.elPFIsoValueGamma03PFId+process.elPFIsoValueNeutral03PFId+process.elPFIsoValuePU03PFId+process.elPFIsoValueCharged04PFId+process.elPFIsoValueChargedAll04PFId+process.elPFIsoValueGamma04PFId+process.elPFIsoValueNeutral04PFId+process.elPFIsoValuePU04PFId+process.elPFIsoValueCharged03NoPFId+process.elPFIsoValueChargedAll03NoPFId+process.elPFIsoValueGamma03NoPFId+process.elPFIsoValueNeutral03NoPFId+process.elPFIsoValuePU03NoPFId+process.elPFIsoValueCharged04NoPFId+process.elPFIsoValueChargedAll04NoPFId+process.elPFIsoValueGamma04NoPFId+process.elPFIsoValueNeutral04NoPFId+process.elPFIsoValuePU04NoPFId)


process.pfMuonIsolationSequencePFlowLoose = cms.Sequence(process.muonPFIsolationSequencePFlowLoose)


process.patMETCorrections = cms.Sequence(process.producePFMETCorrections)


process.pfElectronSequence = cms.Sequence(process.pfAllElectrons+process.pfElectronsFromVertex+process.pfSelectedElectrons+process.pfElectronIsolationSequence+process.pfIsolatedElectrons+process.pfElectrons)


process.PFBRECOPFlow = cms.Sequence(process.pfNoPileUpSequencePFlow+process.pfParticleSelectionSequencePFlow+process.pfPhotonSequencePFlow+process.pfMuonSequencePFlow+process.pfNoMuonPFlow+process.pfElectronSequencePFlow+process.pfNoElectronPFlow+process.pfJetsPFlow+process.pfNoJetPFlow+process.pfTauSequencePFlow+process.pfNoTauPFlow+process.pfMETPFlow)


process.patHPSPFTauDiscriminationUpdatePFlowLoose = cms.Sequence(process.updateHPSPFTausPFlowLoose)


process.recoTauClassicHPSSequence = cms.Sequence(process.recoTauCommonSequence+process.ak5PFJetsLegacyHPSPiZeros+process.combinatoricRecoTaus+process.produceAndDiscriminateHPSPFTaus)


process.makePatTaus = cms.Sequence(process.patHPSPFTauDiscriminationUpdate+process.patPFCandidateIsoDepositSelection+process.patPFTauIsolation+process.tauMatch+process.tauGenJets+process.tauGenJetsSelectorAllHadrons+process.tauGenJetMatch+process.patTaus)


process.patDefaultSequencePFlow = cms.Sequence(process.makePatElectronsPFlow+process.makePatMuonsPFlow+process.makePatTausPFlow+process.photonMatchPFlow+process.patJetCorrectionsPFlow+process.jetTracksAssociatorAtVertexPFlow+process.btaggingAODPFlow+process.patJetChargePFlow+process.patJetPartonMatchPFlow+process.genForPF2PATSequence+process.patJetGenJetMatchPFlow+process.patJetFlavourIdPFlow+process.patJetsPFlow+process.patPFParticlesPFlow+process.patCandidateSummaryPFlow+process.selectedPatElectronsPFlow+process.selectedPatMuonsPFlow+process.selectedPatTausPFlow+process.selectedPatJetsPFlow+process.producePatPFMETCorrectionsPFlow+process.patMETsPFlow+process.selectedPatPFParticlesPFlow+process.selectedPatCandidateSummaryPFlow+process.countPatElectronsPFlow+process.countPatMuonsPFlow+process.countPatTausPFlow+process.countPatLeptonsPFlow+process.countPatJetsPFlow+process.countPatPFParticlesPFlow)


process.patCandidatesPFlow = cms.Sequence(process.makePatElectronsPFlow+process.makePatMuonsPFlow+process.makePatTausPFlow+process.makePatPhotonsPFlow+process.makePatJetsPFlow+process.makePatMETsPFlow+process.patCandidateSummaryPFlow)


process.makePatMETs = cms.Sequence(process.patMETCorrections+process.patMETs)


process.pfMuonSequencePFlowLoose = cms.Sequence(process.pfAllMuonsPFlowLoose+process.pfMuonsFromVertexPFlowLoose+process.pfSelectedMuonsPFlowLoose+process.pfMuonIsolationSequencePFlowLoose+process.pfIsolatedMuonsPFlowLoose+process.pfMuonsPFlowLoose)


process.patPF2PATSequencePFlow = cms.Sequence(process.pfNoPileUpSequencePFlow+process.pfParticleSelectionSequencePFlow+process.pfPhotonSequencePFlow+process.pfMuonSequencePFlow+process.pfNoMuonPFlow+process.pfElectronSequencePFlow+process.pfNoElectronPFlow+process.caMassDropFilteredPFlow+process.caFilteredPFlow+process.caPrunedPFlow+process.caHEPTopTagPFlow+process.caTopTagPFlow+process.CATopTagInfosHEPTopTagPFlow+process.CATopTagInfosPFlow+process.ca8PFJetsPFlow+process.pfJetsPFlow+process.pfNoJetPFlow+process.pfTauSequencePFlow+process.pfNoTauPFlow+process.pfMETPFlow+process.electronMatchPFlow+process.eidMVASequence+process.patElectronsPFlow+process.makePatMuonsPFlow+process.makePatTausPFlow+process.photonMatchPFlow+process.patJetCorrectionsPFlow+process.jetTracksAssociatorAtVertexPFlow+process.btaggingAODPFlow+process.patJetChargePFlow+process.patJetPartonMatchPFlow+process.genForPF2PATSequence+process.patJetGenJetMatchPFlow+process.patJetFlavourIdPFlow+process.patJetsPFlow+process.patPFParticlesPFlow+process.patCandidateSummaryPFlow+process.selectedPatElectronsPFlow+process.selectedPatMuonsPFlow+process.selectedPatTausPFlow+process.selectedPatJetsPFlow+process.producePatPFMETCorrectionsPFlow+process.patMETsPFlow+process.selectedPatPFParticlesPFlow+process.selectedPatCandidateSummaryPFlow+process.countPatElectronsPFlow+process.countPatMuonsPFlow+process.countPatTausPFlow+process.countPatLeptonsPFlow+process.countPatJetsPFlow+process.countPatPFParticlesPFlow+process.patConversionsPFlow)


process.PFTau = cms.Sequence(process.recoTauCommonSequence+process.recoTauClassicHPSSequence)


process.pfMuonSequence = cms.Sequence(process.pfAllMuons+process.pfMuonsFromVertex+process.pfSelectedMuons+process.pfMuonIsolationSequence+process.pfIsolatedMuons+process.pfMuons)


process.makePatTausPFlowLoose = cms.Sequence(process.patHPSPFTauDiscriminationUpdatePFlowLoose+process.patPFTauIsolationPFlowLoose+process.tauMatchPFlowLoose+process.tauGenJetsPFlowLoose+process.tauGenJetsSelectorAllHadronsPFlowLoose+process.tauGenJetMatchPFlowLoose+process.patTausPFlowLoose)


process.patCandidates = cms.Sequence(process.makePatElectrons+process.makePatMuons+process.makePatTaus+process.makePatPhotons+process.makePatJets+process.makePatMETs+process.patCandidateSummary)


process.PFBRECO = cms.Sequence(process.pfNoPileUpSequence+process.pfParticleSelectionSequence+process.pfPhotonSequence+process.pfMuonSequence+process.pfNoMuon+process.pfElectronSequence+process.pfNoElectron+process.pfJetSequence+process.pfNoJet+process.pfTauSequence+process.pfNoTau+process.pfMET)


process.PFBRECOPFlowLoose = cms.Sequence(process.pfNoPileUpSequencePFlowLoose+process.pfParticleSelectionSequencePFlowLoose+process.pfPhotonSequencePFlowLoose+process.pfMuonSequencePFlowLoose+process.pfNoMuonPFlowLoose+process.pfElectronSequencePFlowLoose+process.pfNoElectronPFlowLoose+process.pfJetSequencePFlowLoose+process.pfNoJetPFlowLoose+process.pfTauSequencePFlowLoose+process.pfNoTauPFlowLoose+process.pfMETPFlowLoose)


process.PF2PAT = cms.Sequence(process.pfNoPileUpSequence+process.pfParticleSelectionSequence+process.pfPhotonSequence+process.pfMuonSequence+process.pfNoMuon+process.pfElectronSequence+process.pfNoElectron+process.pfJetSequence+process.pfNoJet+process.pfTauSequence+process.pfNoTau+process.pfMET)


process.patDefaultSequence = cms.Sequence(process.makePatElectrons+process.makePatMuons+process.makePatTaus+process.makePatPhotons+process.patJetCorrFactors+process.patJetCorrFactorsCA15MassDropFilteredSubjetsPF+process.patJetCorrFactorsCA15MassDropFilteredPF+process.patJetCorrFactorsCA15FilteredPF+process.patJetCorrFactorsCAHEPTopTagSubjetsPF+process.patJetCorrFactorsCAHEPTopTagPF+process.patJetCorrFactorsCATopTagSubjetsPF+process.patJetCorrFactorsCATopTagPF+process.patJetCorrFactorsCA8PrunedSubjetsPF+process.patJetCorrFactorsCA8PrunedPF+process.patJetCorrFactorsCA8PF+process.jetTracksAssociatorAtVertexCA8PF+process.btaggingCA8PF+process.jetTracksAssociatorAtVertexCA8PrunedPF+process.btaggingCA8PrunedPF+process.jetTracksAssociatorAtVertexCA8PrunedSubjetsPF+process.btaggingCA8PrunedSubjetsPF+process.jetTracksAssociatorAtVertexCATopTagPF+process.btaggingCATopTagPF+process.jetTracksAssociatorAtVertexCATopTagSubjetsPF+process.btaggingCATopTagSubjetsPF+process.jetTracksAssociatorAtVertexCAHEPTopTagPF+process.btaggingCAHEPTopTagPF+process.jetTracksAssociatorAtVertexCAHEPTopTagSubjetsPF+process.btaggingCAHEPTopTagSubjetsPF+process.jetTracksAssociatorAtVertexCA15MassDropFilteredPF+process.btaggingCA15MassDropFilteredPF+process.jetTracksAssociatorAtVertexCA15MassDropFilteredSubjetsPF+process.btaggingCA15MassDropFilteredSubjetsPF+process.patJetChargeCA15MassDropFilteredSubjetsPF+process.patJetChargeCA15MassDropFilteredPF+process.patJetChargeCAHEPTopTagSubjetsPF+process.patJetChargeCAHEPTopTagPF+process.patJetChargeCATopTagSubjetsPF+process.patJetChargeCATopTagPF+process.patJetChargeCA8PrunedSubjetsPF+process.patJetChargeCA8PrunedPF+process.patJetChargeCA8PF+process.patJetPartonMatch+process.patJetPartonMatchCA15MassDropFilteredSubjetsPF+process.patJetPartonMatchCA15MassDropFilteredPF+process.patJetPartonMatchCA15FilteredPF+process.patJetPartonMatchCAHEPTopTagSubjetsPF+process.patJetPartonMatchCAHEPTopTagPF+process.patJetPartonMatchCATopTagSubjetsPF+process.patJetPartonMatchCATopTagPF+process.patJetPartonMatchCA8PrunedSubjetsPF+process.patJetPartonMatchCA8PrunedPF+process.patJetPartonMatchCA8PF+process.patJetGenJetMatch+process.patJetGenJetMatchCA15MassDropFilteredSubjetsPF+process.patJetGenJetMatchCA15MassDropFilteredPF+process.patJetGenJetMatchCA15FilteredPF+process.patJetGenJetMatchCAHEPTopTagSubjetsPF+process.patJetGenJetMatchCAHEPTopTagPF+process.patJetGenJetMatchCATopTagSubjetsPF+process.patJetGenJetMatchCATopTagPF+process.patJetGenJetMatchCA8PrunedSubjetsPF+process.patJetGenJetMatchCA8PrunedPF+process.patJetGenJetMatchCA8PF+process.patJetPartons+process.patJetPartonAssociation+process.patJetPartonAssociationCA15MassDropFilteredSubjetsPF+process.patJetPartonAssociationCA15MassDropFilteredPF+process.patJetPartonAssociationCA15FilteredPF+process.patJetPartonAssociationCAHEPTopTagSubjetsPF+process.patJetPartonAssociationCAHEPTopTagPF+process.patJetPartonAssociationCATopTagSubjetsPF+process.patJetPartonAssociationCATopTagPF+process.patJetPartonAssociationCA8PrunedSubjetsPF+process.patJetPartonAssociationCA8PrunedPF+process.patJetPartonAssociationCA8PF+process.patJetFlavourAssociation+process.patJetFlavourAssociationCA15MassDropFilteredSubjetsPF+process.patJetFlavourAssociationCA15MassDropFilteredPF+process.patJetFlavourAssociationCA15FilteredPF+process.patJetFlavourAssociationCAHEPTopTagSubjetsPF+process.patJetFlavourAssociationCAHEPTopTagPF+process.patJetFlavourAssociationCATopTagSubjetsPF+process.patJetFlavourAssociationCATopTagPF+process.patJetFlavourAssociationCA8PrunedSubjetsPF+process.patJetFlavourAssociationCA8PrunedPF+process.patJetFlavourAssociationCA8PF+process.patJets+process.patJetsCA15MassDropFilteredSubjetsPF+process.patJetsCA15MassDropFilteredPF+process.patJetsCA15FilteredPF+process.patJetsCAHEPTopTagSubjetsPF+process.patJetsCAHEPTopTagPF+process.patJetsCATopTagSubjetsPF+process.patJetsCATopTagPF+process.patJetsCA8PrunedSubjetsPF+process.patJetsCA8PrunedPF+process.patJetsCA8PF+process.makePatMETs+process.patCandidateSummary+process.selectedPatElectrons+process.selectedPatMuons+process.selectedPatTaus+process.selectedPatPhotons+process.selectedPatJets+process.selectedPatJetsCA15MassDropFilteredSubjetsPF+process.selectedPatJetsCA15MassDropFilteredPF+process.selectedPatJetsCA15FilteredPF+process.selectedPatJetsCAHEPTopTagSubjetsPF+process.selectedPatJetsCAHEPTopTagPF+process.selectedPatJetsCATopTagSubjetsPF+process.selectedPatJetsCATopTagPF+process.selectedPatJetsCA8PrunedSubjetsPF+process.selectedPatJetsCA8PrunedPF+process.selectedPatJetsCA8PF+process.selectedPatCandidateSummary+process.cleanPatCandidates+process.countPatCandidates)


process.patDefaultSequencePFlowLoose = cms.Sequence(process.makePatElectronsPFlowLoose+process.makePatMuonsPFlowLoose+process.makePatTausPFlowLoose+process.photonMatchPFlowLoose+process.patJetCorrectionsPFlowLoose+process.jetTracksAssociatorAtVertexPFlowLoose+process.btaggingAODPFlowLoose+process.patJetChargePFlowLoose+process.patJetPartonMatchPFlowLoose+process.genForPF2PATSequence+process.patJetGenJetMatchPFlowLoose+process.patJetFlavourIdPFlowLoose+process.patJetsPFlowLoose+process.patPFParticlesPFlowLoose+process.patCandidateSummaryPFlowLoose+process.selectedPatElectronsPFlowLoose+process.selectedPatMuonsPFlowLoose+process.selectedPatTausPFlowLoose+process.selectedPatJetsPFlowLoose+process.producePatPFMETCorrectionsPFlowLoose+process.patMETsPFlowLoose+process.selectedPatPFParticlesPFlowLoose+process.selectedPatCandidateSummaryPFlowLoose+process.countPatElectronsPFlowLoose+process.countPatMuonsPFlowLoose+process.countPatTausPFlowLoose+process.countPatLeptonsPFlowLoose+process.countPatJetsPFlowLoose+process.countPatPFParticlesPFlowLoose)


process.patCandidatesPFlowLoose = cms.Sequence(process.makePatElectronsPFlowLoose+process.makePatMuonsPFlowLoose+process.makePatTausPFlowLoose+process.makePatPhotonsPFlowLoose+process.makePatJetsPFlowLoose+process.makePatMETsPFlowLoose+process.patCandidateSummaryPFlowLoose)


process.patPF2PATSequencePFlowLoose = cms.Sequence(process.PFBRECOPFlowLoose+process.electronMatchPFlowLoose+process.eidMVASequence+process.patElectronsPFlowLoose+process.makePatMuonsPFlowLoose+process.makePatTausPFlowLoose+process.photonMatchPFlowLoose+process.patJetCorrectionsPFlowLoose+process.jetTracksAssociatorAtVertexPFlowLoose+process.btaggingAODPFlowLoose+process.patJetChargePFlowLoose+process.patJetPartonMatchPFlowLoose+process.genForPF2PATSequence+process.patJetGenJetMatchPFlowLoose+process.patJetFlavourIdPFlowLoose+process.patJetsPFlowLoose+process.patPFParticlesPFlowLoose+process.patCandidateSummaryPFlowLoose+process.selectedPatElectronsPFlowLoose+process.selectedPatMuonsPFlowLoose+process.selectedPatTausPFlowLoose+process.selectedPatJetsPFlowLoose+process.producePatPFMETCorrectionsPFlowLoose+process.patMETsPFlowLoose+process.selectedPatPFParticlesPFlowLoose+process.selectedPatCandidateSummaryPFlowLoose+process.countPatElectronsPFlowLoose+process.countPatMuonsPFlowLoose+process.countPatTausPFlowLoose+process.countPatLeptonsPFlowLoose+process.countPatJetsPFlowLoose+process.countPatPFParticlesPFlowLoose+process.patConversionsPFlowLoose)


process.patseq = cms.Sequence(process.filtersSeq+process.goodOfflinePrimaryVertices+process.inclusiveVertexing+process.genParticlesForJetsNoNu+process.ca8GenJetsNoNu+process.ak8GenJetsNoNu+process.caFilteredGenJetsNoNu+process.caMassDropFilteredGenJetsNoNu+process.caPrunedGen+process.caTopTagGen+process.CATopTagInfosGen+process.caHEPTopTagGen+process.patPF2PATSequencePFlow+process.patDefaultSequence+process.goodPatJetsPFlow+process.goodPatJetsCA8PF+process.goodPatJetsCA8PrunedPF+process.goodPatJetsCATopTagPF+process.goodPatJetsCAHEPTopTagPF+process.goodPatJetsCA15MassDropFilteredPF+process.goodPatJetsCA8PrunedPFPacked+process.goodPatJetsCATopTagPFPacked+process.goodPatJetsCAHEPTopTagPFPacked+process.goodPatJetsCA15MassDropFilteredPFPacked+process.flavorHistorySeq+process.prunedGenParticles+process.kt6PFJetsForIsolation+process.recoTauClassicHPSSequence+process.patPF2PATSequencePFlowLoose)


process.patPF2PATSequence = cms.Sequence(process.PFBRECO+process.patDefaultSequence)


process.p0 = cms.Path(process.patseq)


process.outpath = cms.EndPath(process.out)


process.MessageLogger = cms.Service("MessageLogger",
    suppressInfo = cms.untracked.vstring(),
    debugs = cms.untracked.PSet(
        placeholder = cms.untracked.bool(True)
    ),
    suppressDebug = cms.untracked.vstring(),
    cout = cms.untracked.PSet(
        placeholder = cms.untracked.bool(True)
    ),
    cerr_stats = cms.untracked.PSet(
        threshold = cms.untracked.string('WARNING'),
        output = cms.untracked.string('cerr'),
        optionalPSet = cms.untracked.bool(True)
    ),
    warnings = cms.untracked.PSet(
        placeholder = cms.untracked.bool(True)
    ),
    default = cms.untracked.PSet(

    ),
    statistics = cms.untracked.vstring('cerr_stats'),
    cerr = cms.untracked.PSet(
        INFO = cms.untracked.PSet(
            limit = cms.untracked.int32(0)
        ),
        noTimeStamps = cms.untracked.bool(False),
        FwkReport = cms.untracked.PSet(
            reportEvery = cms.untracked.int32(100),
            optionalPSet = cms.untracked.bool(True),
            limit = cms.untracked.int32(10000000)
        ),
        default = cms.untracked.PSet(
            limit = cms.untracked.int32(10000000)
        ),
        Root_NoDictionary = cms.untracked.PSet(
            optionalPSet = cms.untracked.bool(True),
            limit = cms.untracked.int32(0)
        ),
        threshold = cms.untracked.string('INFO'),
        FwkJob = cms.untracked.PSet(
            optionalPSet = cms.untracked.bool(True),
            limit = cms.untracked.int32(0)
        ),
        FwkSummary = cms.untracked.PSet(
            reportEvery = cms.untracked.int32(1),
            optionalPSet = cms.untracked.bool(True),
            limit = cms.untracked.int32(10000000)
        ),
        optionalPSet = cms.untracked.bool(True)
    ),
    FrameworkJobReport = cms.untracked.PSet(
        default = cms.untracked.PSet(
            limit = cms.untracked.int32(0)
        ),
        optionalPSet = cms.untracked.bool(True),
        FwkJob = cms.untracked.PSet(
            optionalPSet = cms.untracked.bool(True),
            limit = cms.untracked.int32(10000000)
        )
    ),
    suppressWarning = cms.untracked.vstring(),
    errors = cms.untracked.PSet(
        placeholder = cms.untracked.bool(True)
    ),
    destinations = cms.untracked.vstring('warnings', 
        'errors', 
        'infos', 
        'debugs', 
        'cout', 
        'cerr'),
    debugModules = cms.untracked.vstring(),
    infos = cms.untracked.PSet(
        optionalPSet = cms.untracked.bool(True),
        Root_NoDictionary = cms.untracked.PSet(
            optionalPSet = cms.untracked.bool(True),
            limit = cms.untracked.int32(0)
        ),
        placeholder = cms.untracked.bool(True)
    ),
    categories = cms.untracked.vstring('FwkJob', 
        'FwkReport', 
        'FwkSummary', 
        'Root_NoDictionary'),
    fwkJobReports = cms.untracked.vstring('FrameworkJobReport')
)


process.AK5PFchsCombinedCorrector = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('AK5PFchsL1FastJet', 
        'AK5PFchsL2Relative', 
        'AK5PFchsL3Absolute')
)


process.AK5PFchsL1FastJet = cms.ESProducer("L1FastjetCorrectionESProducer",
    srcRho = cms.InputTag("kt6PFJets","rho"),
    algorithm = cms.string('AK5PFchs'),
    level = cms.string('L1FastJet')
)


process.AK5PFchsL1Offset = cms.ESProducer("L1OffsetCorrectionESProducer",
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.string('offlinePrimaryVertices'),
    algorithm = cms.string('AK5PFchs'),
    level = cms.string('L1Offset')
)


process.AK5PFchsL2L3Residual = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK5PFchs'),
    level = cms.string('L2L3Residual')
)


process.AK5PFchsL2Relative = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK5PFchs'),
    level = cms.string('L2Relative')
)


process.AK5PFchsL3Absolute = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK5PFchs'),
    level = cms.string('L3Absolute')
)


process.CSCGeometryESModule = cms.ESProducer("CSCGeometryESModule",
    appendToDataLabel = cms.string(''),
    useDDD = cms.bool(True),
    debugV = cms.untracked.bool(False),
    useGangedStripsInME1a = cms.bool(True),
    alignmentsLabel = cms.string(''),
    useOnlyWiresInME1a = cms.bool(False),
    useRealWireGeometry = cms.bool(True),
    useCentreTIOffsets = cms.bool(False),
    applyAlignment = cms.bool(True)
)


process.CaloGeometryBuilder = cms.ESProducer("CaloGeometryBuilder",
    SelectedCalos = cms.vstring('HCAL', 
        'ZDC', 
        'CASTOR', 
        'EcalBarrel', 
        'EcalEndcap', 
        'EcalPreshower', 
        'TOWER')
)


process.CaloTopologyBuilder = cms.ESProducer("CaloTopologyBuilder")


process.CaloTowerHardcodeGeometryEP = cms.ESProducer("CaloTowerHardcodeGeometryEP")


process.CastorDbProducer = cms.ESProducer("CastorDbProducer")


process.CastorHardcodeGeometryEP = cms.ESProducer("CastorHardcodeGeometryEP")


process.DTGeometryESModule = cms.ESProducer("DTGeometryESModule",
    appendToDataLabel = cms.string(''),
    fromDDD = cms.bool(True),
    applyAlignment = cms.bool(True),
    alignmentsLabel = cms.string('')
)


process.EcalBarrelGeometryEP = cms.ESProducer("EcalBarrelGeometryEP",
    applyAlignment = cms.bool(False)
)


process.EcalElectronicsMappingBuilder = cms.ESProducer("EcalElectronicsMappingBuilder")


process.EcalEndcapGeometryEP = cms.ESProducer("EcalEndcapGeometryEP",
    applyAlignment = cms.bool(False)
)


process.EcalLaserCorrectionService = cms.ESProducer("EcalLaserCorrectionService")


process.EcalPreshowerGeometryEP = cms.ESProducer("EcalPreshowerGeometryEP",
    applyAlignment = cms.bool(False)
)


process.EcalTrigTowerConstituentsMapBuilder = cms.ESProducer("EcalTrigTowerConstituentsMapBuilder",
    MapFile = cms.untracked.string('Geometry/EcalMapping/data/EndCap_TTMap.txt')
)


process.GlobalTrackingGeometryESProducer = cms.ESProducer("GlobalTrackingGeometryESProducer")


process.HcalHardcodeGeometryEP = cms.ESProducer("HcalHardcodeGeometryEP")


process.HcalTopologyIdealEP = cms.ESProducer("HcalTopologyIdealEP")


process.MuonDetLayerGeometryESProducer = cms.ESProducer("MuonDetLayerGeometryESProducer")


process.MuonNumberingInitialization = cms.ESProducer("MuonNumberingInitialization")


process.ParametrizedMagneticFieldProducer = cms.ESProducer("ParametrizedMagneticFieldProducer",
    version = cms.string('OAE_1103l_071212'),
    parameters = cms.PSet(
        BValue = cms.string('3_8T')
    ),
    label = cms.untracked.string('parametrizedField')
)


process.RPCGeometryESModule = cms.ESProducer("RPCGeometryESModule",
    useDDD = cms.untracked.bool(True),
    compatibiltyWith11 = cms.untracked.bool(True)
)


process.SiStripRecHitMatcherESProducer = cms.ESProducer("SiStripRecHitMatcherESProducer",
    ComponentName = cms.string('StandardMatcher'),
    NSigmaInside = cms.double(3.0)
)


process.StripCPEfromTrackAngleESProducer = cms.ESProducer("StripCPEESProducer",
    ComponentName = cms.string('StripCPEfromTrackAngle')
)


process.TrackerDigiGeometryESModule = cms.ESProducer("TrackerDigiGeometryESModule",
    appendToDataLabel = cms.string(''),
    fromDDD = cms.bool(True),
    applyAlignment = cms.bool(True),
    alignmentsLabel = cms.string('')
)


process.TrackerGeometricDetESModule = cms.ESProducer("TrackerGeometricDetESModule",
    fromDDD = cms.bool(True)
)


process.TrackerRecoGeometryESProducer = cms.ESProducer("TrackerRecoGeometryESProducer")


process.TransientTrackBuilderESProducer = cms.ESProducer("TransientTrackBuilderESProducer",
    ComponentName = cms.string('TransientTrackBuilder')
)


process.VolumeBasedMagneticFieldESProducer = cms.ESProducer("VolumeBasedMagneticFieldESProducer",
    scalingVolumes = cms.vint32(14100, 14200, 17600, 17800, 17900, 
        18100, 18300, 18400, 18600, 23100, 
        23300, 23400, 23600, 23800, 23900, 
        24100, 28600, 28800, 28900, 29100, 
        29300, 29400, 29600, 28609, 28809, 
        28909, 29109, 29309, 29409, 29609, 
        28610, 28810, 28910, 29110, 29310, 
        29410, 29610, 28611, 28811, 28911, 
        29111, 29311, 29411, 29611),
    scalingFactors = cms.vdouble(1, 1, 0.994, 1.004, 1.004, 
        1.005, 1.004, 1.004, 0.994, 0.965, 
        0.958, 0.958, 0.953, 0.958, 0.958, 
        0.965, 0.918, 0.924, 0.924, 0.906, 
        0.924, 0.924, 0.918, 0.991, 0.998, 
        0.998, 0.978, 0.998, 0.998, 0.991, 
        0.991, 0.998, 0.998, 0.978, 0.998, 
        0.998, 0.991, 0.991, 0.998, 0.998, 
        0.978, 0.998, 0.998, 0.991),
    overrideMasterSector = cms.bool(False),
    useParametrizedTrackerField = cms.bool(True),
    label = cms.untracked.string(''),
    version = cms.string('grid_1103l_090322_3_8t'),
    debugBuilder = cms.untracked.bool(False),
    paramLabel = cms.string('parametrizedField'),
    geometryVersion = cms.int32(90322),
    cacheLastVolume = cms.untracked.bool(True)
)


process.ZdcHardcodeGeometryEP = cms.ESProducer("ZdcHardcodeGeometryEP")


process.ak5CaloL1FastL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5CaloL1Fastjet', 
        'ak5CaloL2Relative', 
        'ak5CaloL3Absolute')
)


process.ak5CaloL1FastL2L3L6 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5CaloL1Fastjet', 
        'ak5CaloL2Relative', 
        'ak5CaloL3Absolute', 
        'ak5CaloL6SLB')
)


process.ak5CaloL1FastL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5CaloL1Fastjet', 
        'ak5CaloL2Relative', 
        'ak5CaloL3Absolute', 
        'ak5CaloResidual')
)


process.ak5CaloL1Fastjet = cms.ESProducer("L1FastjetCorrectionESProducer",
    srcRho = cms.InputTag("kt6CaloJets","rho"),
    algorithm = cms.string('AK5Calo'),
    level = cms.string('L1FastJet')
)


process.ak5CaloL1L2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5CaloL1Offset', 
        'ak5CaloL2Relative', 
        'ak5CaloL3Absolute')
)


process.ak5CaloL1L2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5CaloL1Offset', 
        'ak5CaloL2Relative', 
        'ak5CaloL3Absolute', 
        'ak5CaloResidual')
)


process.ak5CaloL1Offset = cms.ESProducer("L1OffsetCorrectionESProducer",
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.string('offlinePrimaryVertices'),
    algorithm = cms.string('AK5Calo'),
    level = cms.string('L1Offset')
)


process.ak5CaloL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5CaloL2Relative', 
        'ak5CaloL3Absolute')
)


process.ak5CaloL2L3L6 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5CaloL2Relative', 
        'ak5CaloL3Absolute', 
        'ak5CaloL6SLB')
)


process.ak5CaloL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5CaloL2Relative', 
        'ak5CaloL3Absolute', 
        'ak5CaloResidual')
)


process.ak5CaloL2Relative = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK5Calo'),
    level = cms.string('L2Relative')
)


process.ak5CaloL3Absolute = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK5Calo'),
    level = cms.string('L3Absolute')
)


process.ak5CaloL6SLB = cms.ESProducer("L6SLBCorrectionESProducer",
    srcBTagInfoElectron = cms.InputTag("ak5CaloJetsSoftElectronTagInfos"),
    srcBTagInfoMuon = cms.InputTag("ak5CaloJetsSoftMuonTagInfos"),
    addMuonToJet = cms.bool(True),
    algorithm = cms.string(''),
    level = cms.string('L6SLB')
)


process.ak5CaloResidual = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK5Calo'),
    level = cms.string('L2L3Residual')
)


process.ak5JPTL1FastL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5JPTL1Fastjet', 
        'ak5JPTL2Relative', 
        'ak5JPTL3Absolute')
)


process.ak5JPTL1FastL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5JPTL1Fastjet', 
        'ak5JPTL2Relative', 
        'ak5JPTL3Absolute', 
        'ak5JPTResidual')
)


process.ak5JPTL1Fastjet = cms.ESProducer("L1FastjetCorrectionESProducer",
    srcRho = cms.InputTag("kt6CaloJets","rho"),
    algorithm = cms.string('AK5Calo'),
    level = cms.string('L1FastJet')
)


process.ak5JPTL1L2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5L1JPTOffset', 
        'ak5JPTL2Relative', 
        'ak5JPTL3Absolute')
)


process.ak5JPTL1L2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5L1JPTOffset', 
        'ak5JPTL2Relative', 
        'ak5JPTL3Absolute', 
        'ak5JPTResidual')
)


process.ak5JPTL1Offset = cms.ESProducer("L1OffsetCorrectionESProducer",
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.string('offlinePrimaryVertices'),
    algorithm = cms.string('AK5JPT'),
    level = cms.string('L1Offset')
)


process.ak5JPTL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5L1JPTOffset', 
        'ak5JPTL2Relative', 
        'ak5JPTL3Absolute')
)


process.ak5JPTL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5L1JPTOffset', 
        'ak5JPTL2Relative', 
        'ak5JPTL3Absolute', 
        'ak5JPTResidual')
)


process.ak5JPTL2Relative = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK5JPT'),
    level = cms.string('L2Relative')
)


process.ak5JPTL3Absolute = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK5JPT'),
    level = cms.string('L3Absolute')
)


process.ak5JPTResidual = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK5JPT'),
    level = cms.string('L2L3Residual')
)


process.ak5L1JPTOffset = cms.ESProducer("L1JPTOffsetCorrectionESProducer",
    offsetService = cms.string('ak5CaloL1Offset'),
    algorithm = cms.string('AK5JPT'),
    level = cms.string('L1JPTOffset')
)


process.ak5PFL1FastL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5PFL1Fastjet', 
        'ak5PFL2Relative', 
        'ak5PFL3Absolute')
)


process.ak5PFL1FastL2L3L6 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5PFL1Fastjet', 
        'ak5PFL2Relative', 
        'ak5PFL3Absolute', 
        'ak5PFL6SLB')
)


process.ak5PFL1FastL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5PFL1Fastjet', 
        'ak5PFL2Relative', 
        'ak5PFL3Absolute', 
        'ak5PFResidual')
)


process.ak5PFL1Fastjet = cms.ESProducer("L1FastjetCorrectionESProducer",
    srcRho = cms.InputTag("kt6PFJets","rho"),
    algorithm = cms.string('AK5PF'),
    level = cms.string('L1FastJet')
)


process.ak5PFL1L2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5PFL1Offset', 
        'ak5PFL2Relative', 
        'ak5PFL3Absolute')
)


process.ak5PFL1L2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5PFL1Offset', 
        'ak5PFL2Relative', 
        'ak5PFL3Absolute', 
        'ak5PFResidual')
)


process.ak5PFL1Offset = cms.ESProducer("L1OffsetCorrectionESProducer",
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.string('offlinePrimaryVertices'),
    algorithm = cms.string('AK5PF'),
    level = cms.string('L1Offset')
)


process.ak5PFL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5PFL2Relative', 
        'ak5PFL3Absolute')
)


process.ak5PFL2L3L6 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5PFL2Relative', 
        'ak5PFL3Absolute', 
        'ak5PFL6SLB')
)


process.ak5PFL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5PFL2Relative', 
        'ak5PFL3Absolute', 
        'ak5PFResidual')
)


process.ak5PFL2Relative = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK5PF'),
    level = cms.string('L2Relative')
)


process.ak5PFL3Absolute = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK5PF'),
    level = cms.string('L3Absolute')
)


process.ak5PFL6SLB = cms.ESProducer("L6SLBCorrectionESProducer",
    srcBTagInfoElectron = cms.InputTag("ak5PFJetsSoftElectronTagInfos"),
    srcBTagInfoMuon = cms.InputTag("ak5PFJetsSoftMuonTagInfos"),
    addMuonToJet = cms.bool(False),
    algorithm = cms.string(''),
    level = cms.string('L6SLB')
)


process.ak5PFResidual = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK5PF'),
    level = cms.string('L2L3Residual')
)


process.ak5TrackL1FastL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5CaloL1Fastjet', 
        'ak5TrackL2Relative', 
        'ak5TrackL3Absolute')
)


process.ak5TrackL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5TrackL2Relative', 
        'ak5TrackL3Absolute')
)


process.ak5TrackL2Relative = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK5TRK'),
    level = cms.string('L2Relative')
)


process.ak5TrackL3Absolute = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK5TRK'),
    level = cms.string('L3Absolute')
)


process.ak7CaloL1FastL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5CaloL1Fastjet', 
        'ak7CaloL2Relative', 
        'ak7CaloL3Absolute')
)


process.ak7CaloL1FastL2L3L6 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak7CaloL1Offset', 
        'ak7CaloL2Relative', 
        'ak7CaloL3Absolute', 
        'ak7CaloL6SLB')
)


process.ak7CaloL1FastL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak7CaloL1Fastjet', 
        'ak7CaloL2Relative', 
        'ak7CaloL3Absolute', 
        'ak7CaloResidual')
)


process.ak7CaloL1Fastjet = cms.ESProducer("L1FastjetCorrectionESProducer",
    srcRho = cms.InputTag("kt6CaloJets","rho"),
    algorithm = cms.string('AK5Calo'),
    level = cms.string('L1FastJet')
)


process.ak7CaloL1L2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak7CaloL1Offset', 
        'ak7CaloL2Relative', 
        'ak7CaloL3Absolute')
)


process.ak7CaloL1L2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak7CaloL1Offset', 
        'ak7CaloL2Relative', 
        'ak7CaloL3Absolute', 
        'ak7CaloResidual')
)


process.ak7CaloL1Offset = cms.ESProducer("L1OffsetCorrectionESProducer",
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.string('offlinePrimaryVertices'),
    algorithm = cms.string('AK5Calo'),
    level = cms.string('L1Offset')
)


process.ak7CaloL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak7CaloL2Relative', 
        'ak7CaloL3Absolute')
)


process.ak7CaloL2L3L6 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak7CaloL2Relative', 
        'ak7CaloL3Absolute', 
        'ak7CaloL6SLB')
)


process.ak7CaloL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak7CaloL2Relative', 
        'ak7CaloL3Absolute', 
        'ak7CaloResidual')
)


process.ak7CaloL2Relative = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK7Calo'),
    level = cms.string('L2Relative')
)


process.ak7CaloL3Absolute = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK7Calo'),
    level = cms.string('L3Absolute')
)


process.ak7CaloL6SLB = cms.ESProducer("L6SLBCorrectionESProducer",
    srcBTagInfoElectron = cms.InputTag("ak7CaloJetsSoftElectronTagInfos"),
    srcBTagInfoMuon = cms.InputTag("ak7CaloJetsSoftMuonTagInfos"),
    addMuonToJet = cms.bool(True),
    algorithm = cms.string(''),
    level = cms.string('L6SLB')
)


process.ak7CaloResidual = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK5Calo'),
    level = cms.string('L2L3Residual')
)


process.ak7JPTL1FastL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak7JPTL1Fastjet', 
        'ak7L1JPTOffset', 
        'ak7JPTL2Relative', 
        'ak7JPTL3Absolute', 
        'ak7JPTResidual')
)


process.ak7JPTL1Fastjet = cms.ESProducer("L1FastjetCorrectionESProducer",
    srcRho = cms.InputTag("kt6CaloJets","rho"),
    algorithm = cms.string('AK5Calo'),
    level = cms.string('L1FastJet')
)


process.ak7JPTL1L2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak7JPTL1Offset', 
        'ak7L1JPTOffset', 
        'ak7JPTL2Relative', 
        'ak7JPTL3Absolute')
)


process.ak7JPTL1L2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak7JPTL1Offset', 
        'ak7L1JPTOffset', 
        'ak7JPTL2Relative', 
        'ak7JPTL3Absolute', 
        'ak7JPTResidual')
)


process.ak7JPTL1Offset = cms.ESProducer("L1OffsetCorrectionESProducer",
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.string('offlinePrimaryVertices'),
    algorithm = cms.string('AK5Calo'),
    level = cms.string('L1Offset')
)


process.ak7JPTL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak7L1JPTOffset', 
        'ak7JPTL2Relative', 
        'ak7JPTL3Absolute')
)


process.ak7L1JPTOffset = cms.ESProducer("L1JPTOffsetCorrectionESProducer",
    offsetService = cms.string('ak5CaloL1Offset'),
    algorithm = cms.string('AK5JPT'),
    level = cms.string('L1JPTOffset')
)


process.ak7PFL1FastL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5PFL1Fastjet', 
        'ak7PFL2Relative', 
        'ak7PFL3Absolute')
)


process.ak7PFL1FastL2L3L6 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5PFL1Fastjet', 
        'ak7PFL2Relative', 
        'ak7PFL3Absolute', 
        'ak7PFL6SLB')
)


process.ak7PFL1FastL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak7PFL1Fastjet', 
        'ak7PFL2Relative', 
        'ak7PFL3Absolute', 
        'ak7PFResidual')
)


process.ak7PFL1Fastjet = cms.ESProducer("L1FastjetCorrectionESProducer",
    srcRho = cms.InputTag("kt6PFJets","rho"),
    algorithm = cms.string('AK5PF'),
    level = cms.string('L1FastJet')
)


process.ak7PFL1L2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak7PFL1Offset', 
        'ak7PFL2Relative', 
        'ak7PFL3Absolute')
)


process.ak7PFL1L2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak7PFL1Offset', 
        'ak7PFL2Relative', 
        'ak7PFL3Absolute', 
        'ak7PFResidual')
)


process.ak7PFL1Offset = cms.ESProducer("L1OffsetCorrectionESProducer",
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.string('offlinePrimaryVertices'),
    algorithm = cms.string('AK5PF'),
    level = cms.string('L1Offset')
)


process.ak7PFL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak7PFL2Relative', 
        'ak7PFL3Absolute')
)


process.ak7PFL2L3L6 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak7PFL2Relative', 
        'ak7PFL3Absolute', 
        'ak7PFL6SLB')
)


process.ak7PFL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak7PFL2Relative', 
        'ak7PFL3Absolute', 
        'ak7PFResidual')
)


process.ak7PFL2Relative = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK7PF'),
    level = cms.string('L2Relative')
)


process.ak7PFL3Absolute = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK7PF'),
    level = cms.string('L3Absolute')
)


process.ak7PFL6SLB = cms.ESProducer("L6SLBCorrectionESProducer",
    srcBTagInfoElectron = cms.InputTag("ak7PFJetsSoftElectronTagInfos"),
    srcBTagInfoMuon = cms.InputTag("ak7PFJetsSoftMuonTagInfos"),
    addMuonToJet = cms.bool(False),
    algorithm = cms.string(''),
    level = cms.string('L6SLB')
)


process.ak7PFResidual = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK5PF'),
    level = cms.string('L2L3Residual')
)


process.combinedMVA = cms.ESProducer("CombinedMVAJetTagESProducer",
    useCategories = cms.bool(False),
    calibrationRecord = cms.string('CombinedMVA'),
    jetTagComputers = cms.VPSet(cms.PSet(
        discriminator = cms.bool(True),
        variables = cms.bool(False),
        jetTagComputer = cms.string('jetProbability')
    ), 
        cms.PSet(
            discriminator = cms.bool(True),
            variables = cms.bool(False),
            jetTagComputer = cms.string('combinedSecondaryVertex')
        ), 
        cms.PSet(
            discriminator = cms.bool(True),
            variables = cms.bool(False),
            jetTagComputer = cms.string('softPFMuon')
        ), 
        cms.PSet(
            discriminator = cms.bool(True),
            variables = cms.bool(False),
            jetTagComputer = cms.string('softPFElectron')
        ))
)


process.combinedSecondaryVertex = cms.ESProducer("CombinedSecondaryVertexESProducer",
    useTrackWeights = cms.bool(True),
    pseudoMultiplicityMin = cms.uint32(2),
    correctVertexMass = cms.bool(True),
    trackSelection = cms.PSet(
        totalHitsMin = cms.uint32(0),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.07),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(5),
        ptMin = cms.double(0.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    pseudoVertexV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.05)
    ),
    charmCut = cms.double(1.5),
    vertexFlip = cms.bool(False),
    minimumTrackWeight = cms.double(0.5),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackMultiplicityMin = cms.uint32(3),
    trackPseudoSelection = cms.PSet(
        totalHitsMin = cms.uint32(0),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.07),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(5),
        ptMin = cms.double(0.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(2.0),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    trackSort = cms.string('sip2dSig'),
    trackFlip = cms.bool(False),
    calibrationRecords = cms.vstring('CombinedSVRecoVertex', 
        'CombinedSVPseudoVertex', 
        'CombinedSVNoVertex'),
    useCategories = cms.bool(True),
    categoryVariableName = cms.string('vertexCategory')
)


process.combinedSecondaryVertexMVA = cms.ESProducer("CombinedSecondaryVertexESProducer",
    useTrackWeights = cms.bool(True),
    pseudoMultiplicityMin = cms.uint32(2),
    correctVertexMass = cms.bool(True),
    trackSelection = cms.PSet(
        totalHitsMin = cms.uint32(0),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.07),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(5),
        ptMin = cms.double(0.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    pseudoVertexV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.05)
    ),
    charmCut = cms.double(1.5),
    vertexFlip = cms.bool(False),
    minimumTrackWeight = cms.double(0.5),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackMultiplicityMin = cms.uint32(3),
    trackPseudoSelection = cms.PSet(
        totalHitsMin = cms.uint32(0),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.07),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(5),
        ptMin = cms.double(0.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(2.0),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    trackSort = cms.string('sip2dSig'),
    trackFlip = cms.bool(False),
    calibrationRecords = cms.vstring('CombinedSVMVARecoVertex', 
        'CombinedSVMVAPseudoVertex', 
        'CombinedSVMVANoVertex'),
    useCategories = cms.bool(True),
    categoryVariableName = cms.string('vertexCategory')
)


process.combinedSecondaryVertexNegative = cms.ESProducer("CombinedSecondaryVertexESProducer",
    charmCut = cms.double(1.5),
    useTrackWeights = cms.bool(True),
    useCategories = cms.bool(True),
    pseudoMultiplicityMin = cms.uint32(2),
    categoryVariableName = cms.string('vertexCategory'),
    trackSelection = cms.PSet(
        totalHitsMin = cms.uint32(0),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(0),
        maxDistToAxis = cms.double(0.07),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(5),
        ptMin = cms.double(0.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    calibrationRecords = cms.vstring('CombinedSVRecoVertex', 
        'CombinedSVPseudoVertex', 
        'CombinedSVNoVertex'),
    pseudoVertexV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.05)
    ),
    correctVertexMass = cms.bool(True),
    vertexFlip = cms.bool(True),
    minimumTrackWeight = cms.double(0.5),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackMultiplicityMin = cms.uint32(3),
    trackPseudoSelection = cms.PSet(
        totalHitsMin = cms.uint32(0),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(0),
        maxDistToAxis = cms.double(0.07),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(5),
        ptMin = cms.double(0.0),
        sip2dSigMax = cms.double(-2.0),
        sip2dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    trackSort = cms.string('sip2dSig'),
    trackFlip = cms.bool(True)
)


process.combinedSecondaryVertexPositive = cms.ESProducer("CombinedSecondaryVertexESProducer",
    charmCut = cms.double(1.5),
    useTrackWeights = cms.bool(True),
    useCategories = cms.bool(True),
    pseudoMultiplicityMin = cms.uint32(2),
    categoryVariableName = cms.string('vertexCategory'),
    trackSelection = cms.PSet(
        totalHitsMin = cms.uint32(0),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(0),
        sip3dSigMin = cms.double(0),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.07),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(5),
        ptMin = cms.double(0.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    calibrationRecords = cms.vstring('CombinedSVRecoVertex', 
        'CombinedSVPseudoVertex', 
        'CombinedSVNoVertex'),
    pseudoVertexV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.05)
    ),
    correctVertexMass = cms.bool(True),
    vertexFlip = cms.bool(False),
    minimumTrackWeight = cms.double(0.5),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackMultiplicityMin = cms.uint32(3),
    trackPseudoSelection = cms.PSet(
        totalHitsMin = cms.uint32(0),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(0),
        sip3dSigMin = cms.double(0),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.07),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(5),
        ptMin = cms.double(0.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(2.0),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    trackSort = cms.string('sip2dSig'),
    trackFlip = cms.bool(False)
)


process.combinedSecondaryVertexSoftPFLeptonV1 = cms.ESProducer("CombinedMVAJetTagESProducer",
    useCategories = cms.bool(False),
    calibrationRecord = cms.string('CombinedCSVSL'),
    jetTagComputers = cms.VPSet(cms.PSet(
        discriminator = cms.bool(True),
        variables = cms.bool(False),
        jetTagComputer = cms.string('jetProbability')
    ), 
        cms.PSet(
            discriminator = cms.bool(True),
            variables = cms.bool(False),
            jetTagComputer = cms.string('combinedSecondaryVertexV1')
        ), 
        cms.PSet(
            discriminator = cms.bool(True),
            variables = cms.bool(False),
            jetTagComputer = cms.string('softPFMuon')
        ), 
        cms.PSet(
            discriminator = cms.bool(True),
            variables = cms.bool(False),
            jetTagComputer = cms.string('softPFElectron')
        ))
)


process.combinedSecondaryVertexV1 = cms.ESProducer("CombinedSecondaryVertexESProducer",
    useTrackWeights = cms.bool(True),
    pseudoMultiplicityMin = cms.uint32(2),
    correctVertexMass = cms.bool(True),
    trackSelection = cms.PSet(
        totalHitsMin = cms.uint32(0),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.07),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(5),
        ptMin = cms.double(0.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    pseudoVertexV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.05)
    ),
    charmCut = cms.double(1.5),
    vertexFlip = cms.bool(False),
    minimumTrackWeight = cms.double(0.5),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackMultiplicityMin = cms.uint32(3),
    trackPseudoSelection = cms.PSet(
        totalHitsMin = cms.uint32(0),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.07),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(5),
        ptMin = cms.double(0.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(2.0),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    trackSort = cms.string('sip2dSig'),
    trackFlip = cms.bool(False),
    calibrationRecords = cms.vstring('CombinedSVRetrainRecoVertex', 
        'CombinedSVRetrainPseudoVertex', 
        'CombinedSVRetrainNoVertex'),
    useCategories = cms.bool(True),
    categoryVariableName = cms.string('vertexCategory')
)


process.combinedSecondaryVertexV1Negative = cms.ESProducer("CombinedSecondaryVertexESProducer",
    charmCut = cms.double(1.5),
    useTrackWeights = cms.bool(True),
    useCategories = cms.bool(True),
    pseudoMultiplicityMin = cms.uint32(2),
    categoryVariableName = cms.string('vertexCategory'),
    trackSelection = cms.PSet(
        totalHitsMin = cms.uint32(0),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(0),
        maxDistToAxis = cms.double(0.07),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(5),
        ptMin = cms.double(0.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    calibrationRecords = cms.vstring('CombinedSVRetrainRecoVertex', 
        'CombinedSVRetrainPseudoVertex', 
        'CombinedSVRetrainNoVertex'),
    pseudoVertexV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.05)
    ),
    correctVertexMass = cms.bool(True),
    vertexFlip = cms.bool(True),
    minimumTrackWeight = cms.double(0.5),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackMultiplicityMin = cms.uint32(3),
    trackPseudoSelection = cms.PSet(
        totalHitsMin = cms.uint32(0),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(0),
        maxDistToAxis = cms.double(0.07),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(5),
        ptMin = cms.double(0.0),
        sip2dSigMax = cms.double(-2.0),
        sip2dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    trackSort = cms.string('sip2dSig'),
    trackFlip = cms.bool(True)
)


process.combinedSecondaryVertexV1Positive = cms.ESProducer("CombinedSecondaryVertexESProducer",
    charmCut = cms.double(1.5),
    useTrackWeights = cms.bool(True),
    useCategories = cms.bool(True),
    pseudoMultiplicityMin = cms.uint32(2),
    categoryVariableName = cms.string('vertexCategory'),
    trackSelection = cms.PSet(
        totalHitsMin = cms.uint32(0),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(0),
        sip3dSigMin = cms.double(0),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.07),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(5),
        ptMin = cms.double(0.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    calibrationRecords = cms.vstring('CombinedSVRetrainRecoVertex', 
        'CombinedSVRetrainPseudoVertex', 
        'CombinedSVRetrainNoVertex'),
    pseudoVertexV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.05)
    ),
    correctVertexMass = cms.bool(True),
    vertexFlip = cms.bool(False),
    minimumTrackWeight = cms.double(0.5),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackMultiplicityMin = cms.uint32(3),
    trackPseudoSelection = cms.PSet(
        totalHitsMin = cms.uint32(0),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(0),
        sip3dSigMin = cms.double(0),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.07),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(5),
        ptMin = cms.double(0.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(2.0),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    trackSort = cms.string('sip2dSig'),
    trackFlip = cms.bool(False)
)


process.doubleVertex2Trk = cms.ESProducer("SimpleSecondaryVertexESProducer",
    minTracks = cms.uint32(2),
    minVertices = cms.uint32(2),
    unBoost = cms.bool(False),
    useSignificance = cms.bool(True),
    use3d = cms.bool(True)
)


process.fakeForIdealAlignment = cms.ESProducer("FakeAlignmentProducer",
    appendToDataLabel = cms.string('fakeForIdeal')
)


process.ghostTrack = cms.ESProducer("GhostTrackESProducer",
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    charmCut = cms.double(1.5),
    trackSort = cms.string('sip2dSig'),
    minimumTrackWeight = cms.double(0.5),
    trackSelection = cms.PSet(
        totalHitsMin = cms.uint32(0),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.07),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(5),
        ptMin = cms.double(0.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    calibrationRecords = cms.vstring('GhostTrackRecoVertex', 
        'GhostTrackPseudoVertex', 
        'GhostTrackNoVertex'),
    useCategories = cms.bool(True),
    categoryVariableName = cms.string('vertexCategory')
)


process.hcal_db_producer = cms.ESProducer("HcalDbProducer",
    file = cms.untracked.string(''),
    dump = cms.untracked.vstring('')
)


process.ic5CaloL1FastL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5CaloL1Fastjet', 
        'ic5CaloL2Relative', 
        'ic5CaloL3Absolute')
)


process.ic5CaloL1FastL2L3L6 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ic5CaloL1Offset', 
        'ic5CaloL2Relative', 
        'ic5CaloL3Absolute', 
        'ic5CaloL6SLB')
)


process.ic5CaloL1FastL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ic5CaloL1Fastjet', 
        'ic5CaloL2Relative', 
        'ic5CaloL3Absolute', 
        'ic5CaloResidual')
)


process.ic5CaloL1Fastjet = cms.ESProducer("L1FastjetCorrectionESProducer",
    srcRho = cms.InputTag("kt6CaloJets","rho"),
    algorithm = cms.string('AK5Calo'),
    level = cms.string('L1FastJet')
)


process.ic5CaloL1L2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ic5CaloL1Offset', 
        'ic5CaloL2Relative', 
        'ic5CaloL3Absolute')
)


process.ic5CaloL1L2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ic5CaloL1Offset', 
        'ic5CaloL2Relative', 
        'ic5CaloL3Absolute', 
        'ic5CaloResidual')
)


process.ic5CaloL1Offset = cms.ESProducer("L1OffsetCorrectionESProducer",
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.string('offlinePrimaryVertices'),
    algorithm = cms.string('AK5Calo'),
    level = cms.string('L1Offset')
)


process.ic5CaloL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ic5CaloL2Relative', 
        'ic5CaloL3Absolute')
)


process.ic5CaloL2L3L6 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ic5CaloL2Relative', 
        'ic5CaloL3Absolute', 
        'ic5CaloL6SLB')
)


process.ic5CaloL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ic5CaloL2Relative', 
        'ic5CaloL3Absolute', 
        'ic5CaloResidual')
)


process.ic5CaloL2Relative = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('IC5Calo'),
    level = cms.string('L2Relative')
)


process.ic5CaloL3Absolute = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('IC5Calo'),
    level = cms.string('L3Absolute')
)


process.ic5CaloL6SLB = cms.ESProducer("L6SLBCorrectionESProducer",
    srcBTagInfoElectron = cms.InputTag("ic5CaloJetsSoftElectronTagInfos"),
    srcBTagInfoMuon = cms.InputTag("ic5CaloJetsSoftMuonTagInfos"),
    addMuonToJet = cms.bool(True),
    algorithm = cms.string(''),
    level = cms.string('L6SLB')
)


process.ic5CaloResidual = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK5Calo'),
    level = cms.string('L2L3Residual')
)


process.ic5PFL1FastL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5PFL1Fastjet', 
        'ic5PFL2Relative', 
        'ic5PFL3Absolute')
)


process.ic5PFL1FastL2L3L6 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5PFL1Fastjet', 
        'ic5PFL2Relative', 
        'ic5PFL3Absolute', 
        'ic5PFL6SLB')
)


process.ic5PFL1FastL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ic5PFL1Fastjet', 
        'ic5PFL2Relative', 
        'ic5PFL3Absolute', 
        'ic5PFResidual')
)


process.ic5PFL1Fastjet = cms.ESProducer("L1FastjetCorrectionESProducer",
    srcRho = cms.InputTag("kt6PFJets","rho"),
    algorithm = cms.string('AK5PF'),
    level = cms.string('L1FastJet')
)


process.ic5PFL1L2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ic5PFL1Offset', 
        'ic5PFL2Relative', 
        'ic5PFL3Absolute')
)


process.ic5PFL1L2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ic5PFL1Offset', 
        'ic5PFL2Relative', 
        'ic5PFL3Absolute', 
        'ic5PFResidual')
)


process.ic5PFL1Offset = cms.ESProducer("L1OffsetCorrectionESProducer",
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.string('offlinePrimaryVertices'),
    algorithm = cms.string('AK5PF'),
    level = cms.string('L1Offset')
)


process.ic5PFL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ic5PFL2Relative', 
        'ic5PFL3Absolute')
)


process.ic5PFL2L3L6 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ic5PFL2Relative', 
        'ic5PFL3Absolute', 
        'ic5PFL6SLB')
)


process.ic5PFL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ic5PFL2Relative', 
        'ic5PFL3Absolute', 
        'ic5PFResidual')
)


process.ic5PFL2Relative = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('IC5PF'),
    level = cms.string('L2Relative')
)


process.ic5PFL3Absolute = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('IC5PF'),
    level = cms.string('L3Absolute')
)


process.ic5PFL6SLB = cms.ESProducer("L6SLBCorrectionESProducer",
    srcBTagInfoElectron = cms.InputTag("ic5PFJetsSoftElectronTagInfos"),
    srcBTagInfoMuon = cms.InputTag("ic5PFJetsSoftMuonTagInfos"),
    addMuonToJet = cms.bool(False),
    algorithm = cms.string(''),
    level = cms.string('L6SLB')
)


process.ic5PFResidual = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK5PF'),
    level = cms.string('L2L3Residual')
)


process.idealForDigiCSCGeometry = cms.ESProducer("CSCGeometryESModule",
    appendToDataLabel = cms.string('idealForDigi'),
    useDDD = cms.bool(True),
    debugV = cms.untracked.bool(False),
    useGangedStripsInME1a = cms.bool(True),
    alignmentsLabel = cms.string('fakeForIdeal'),
    useOnlyWiresInME1a = cms.bool(False),
    useRealWireGeometry = cms.bool(True),
    useCentreTIOffsets = cms.bool(False),
    applyAlignment = cms.bool(False)
)


process.idealForDigiDTGeometry = cms.ESProducer("DTGeometryESModule",
    appendToDataLabel = cms.string('idealForDigi'),
    fromDDD = cms.bool(True),
    applyAlignment = cms.bool(False),
    alignmentsLabel = cms.string('fakeForIdeal')
)


process.idealForDigiTrackerGeometry = cms.ESProducer("TrackerDigiGeometryESModule",
    appendToDataLabel = cms.string('idealForDigi'),
    fromDDD = cms.bool(True),
    applyAlignment = cms.bool(False),
    alignmentsLabel = cms.string('fakeForIdeal')
)


process.impactParameterMVAComputer = cms.ESProducer("GenericMVAJetTagESProducer",
    useCategories = cms.bool(False),
    calibrationRecord = cms.string('ImpactParameterMVA')
)


process.jetBProbability = cms.ESProducer("JetBProbabilityESProducer",
    deltaR = cms.double(-1.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    impactParameterType = cms.int32(0),
    trackQualityClass = cms.string('any'),
    trackIpSign = cms.int32(1),
    minimumProbability = cms.double(0.005),
    numberOfBTracks = cms.uint32(4),
    maximumDecayLength = cms.double(5.0)
)


process.jetProbability = cms.ESProducer("JetProbabilityESProducer",
    deltaR = cms.double(0.3),
    maximumDistanceToJetAxis = cms.double(0.07),
    impactParameterType = cms.int32(0),
    trackQualityClass = cms.string('any'),
    trackIpSign = cms.int32(1),
    minimumProbability = cms.double(0.005),
    maximumDecayLength = cms.double(5.0)
)


process.kt4CaloL1FastL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5CaloL1Fastjet', 
        'kt4CaloL2Relative', 
        'kt4CaloL3Absolute')
)


process.kt4CaloL1FastL2L3L6 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt4CaloL1Offset', 
        'kt4CaloL2Relative', 
        'kt4CaloL3Absolute', 
        'kt4CaloL6SLB')
)


process.kt4CaloL1FastL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt4CaloL1Fastjet', 
        'kt4CaloL2Relative', 
        'kt4CaloL3Absolute', 
        'kt4CaloResidual')
)


process.kt4CaloL1Fastjet = cms.ESProducer("L1FastjetCorrectionESProducer",
    srcRho = cms.InputTag("kt6CaloJets","rho"),
    algorithm = cms.string('AK5Calo'),
    level = cms.string('L1FastJet')
)


process.kt4CaloL1L2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt4CaloL1Offset', 
        'kt4CaloL2Relative', 
        'kt4CaloL3Absolute')
)


process.kt4CaloL1L2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt4CaloL1Offset', 
        'kt4CaloL2Relative', 
        'kt4CaloL3Absolute', 
        'kt4CaloResidual')
)


process.kt4CaloL1Offset = cms.ESProducer("L1OffsetCorrectionESProducer",
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.string('offlinePrimaryVertices'),
    algorithm = cms.string('AK5Calo'),
    level = cms.string('L1Offset')
)


process.kt4CaloL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt4CaloL2Relative', 
        'kt4CaloL3Absolute')
)


process.kt4CaloL2L3L6 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt4CaloL2Relative', 
        'kt4CaloL3Absolute', 
        'kt4CaloL6SLB')
)


process.kt4CaloL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt4CaloL2Relative', 
        'kt4CaloL3Absolute', 
        'kt4CaloResidual')
)


process.kt4CaloL2Relative = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('KT4Calo'),
    level = cms.string('L2Relative')
)


process.kt4CaloL3Absolute = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('KT4Calo'),
    level = cms.string('L3Absolute')
)


process.kt4CaloL6SLB = cms.ESProducer("L6SLBCorrectionESProducer",
    srcBTagInfoElectron = cms.InputTag("kt4CaloJetsSoftElectronTagInfos"),
    srcBTagInfoMuon = cms.InputTag("kt4CaloJetsSoftMuonTagInfos"),
    addMuonToJet = cms.bool(True),
    algorithm = cms.string(''),
    level = cms.string('L6SLB')
)


process.kt4CaloResidual = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK5Calo'),
    level = cms.string('L2L3Residual')
)


process.kt4PFL1FastL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5PFL1Fastjet', 
        'kt4PFL2Relative', 
        'kt4PFL3Absolute')
)


process.kt4PFL1FastL2L3L6 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5PFL1Fastjet', 
        'kt4PFL2Relative', 
        'kt4PFL3Absolute', 
        'kt4PFL6SLB')
)


process.kt4PFL1FastL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt4PFL1Fastjet', 
        'kt4PFL2Relative', 
        'kt4PFL3Absolute', 
        'kt4PFResidual')
)


process.kt4PFL1Fastjet = cms.ESProducer("L1FastjetCorrectionESProducer",
    srcRho = cms.InputTag("kt6PFJets","rho"),
    algorithm = cms.string('AK5PF'),
    level = cms.string('L1FastJet')
)


process.kt4PFL1L2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt4PFL1Offset', 
        'kt4PFL2Relative', 
        'kt4PFL3Absolute')
)


process.kt4PFL1L2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt4PFL1Offset', 
        'kt4PFL2Relative', 
        'kt4PFL3Absolute', 
        'kt4PFResidual')
)


process.kt4PFL1Offset = cms.ESProducer("L1OffsetCorrectionESProducer",
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.string('offlinePrimaryVertices'),
    algorithm = cms.string('AK5PF'),
    level = cms.string('L1Offset')
)


process.kt4PFL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt4PFL2Relative', 
        'kt4PFL3Absolute')
)


process.kt4PFL2L3L6 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt4PFL2Relative', 
        'kt4PFL3Absolute', 
        'kt4PFL6SLB')
)


process.kt4PFL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt4PFL2Relative', 
        'kt4PFL3Absolute', 
        'kt4PFResidual')
)


process.kt4PFL2Relative = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('KT4PF'),
    level = cms.string('L2Relative')
)


process.kt4PFL3Absolute = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('KT4PF'),
    level = cms.string('L3Absolute')
)


process.kt4PFL6SLB = cms.ESProducer("L6SLBCorrectionESProducer",
    srcBTagInfoElectron = cms.InputTag("kt4PFJetsSoftElectronTagInfos"),
    srcBTagInfoMuon = cms.InputTag("kt4PFJetsSoftMuonTagInfos"),
    addMuonToJet = cms.bool(False),
    algorithm = cms.string(''),
    level = cms.string('L6SLB')
)


process.kt4PFResidual = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK5PF'),
    level = cms.string('L2L3Residual')
)


process.kt6CaloL1FastL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5CaloL1Fastjet', 
        'kt6CaloL2Relative', 
        'kt6CaloL3Absolute')
)


process.kt6CaloL1FastL2L3L6 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt6CaloL1Offset', 
        'kt6CaloL2Relative', 
        'kt6CaloL3Absolute', 
        'kt6CaloL6SLB')
)


process.kt6CaloL1FastL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt6CaloL1Fastjet', 
        'kt6CaloL2Relative', 
        'kt6CaloL3Absolute', 
        'kt6CaloResidual')
)


process.kt6CaloL1Fastjet = cms.ESProducer("L1FastjetCorrectionESProducer",
    srcRho = cms.InputTag("kt6CaloJets","rho"),
    algorithm = cms.string('AK5Calo'),
    level = cms.string('L1FastJet')
)


process.kt6CaloL1L2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt6CaloL1Offset', 
        'kt6CaloL2Relative', 
        'kt6CaloL3Absolute')
)


process.kt6CaloL1L2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt6CaloL1Offset', 
        'kt6CaloL2Relative', 
        'kt6CaloL3Absolute', 
        'kt6CaloResidual')
)


process.kt6CaloL1Offset = cms.ESProducer("L1OffsetCorrectionESProducer",
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.string('offlinePrimaryVertices'),
    algorithm = cms.string('AK5Calo'),
    level = cms.string('L1Offset')
)


process.kt6CaloL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt6CaloL2Relative', 
        'kt6CaloL3Absolute')
)


process.kt6CaloL2L3L6 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt6CaloL2Relative', 
        'kt6CaloL3Absolute', 
        'kt6CaloL6SLB')
)


process.kt6CaloL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt6CaloL2Relative', 
        'kt6CaloL3Absolute', 
        'kt6CaloResidual')
)


process.kt6CaloL2Relative = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('KT6Calo'),
    level = cms.string('L2Relative')
)


process.kt6CaloL3Absolute = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('KT6Calo'),
    level = cms.string('L3Absolute')
)


process.kt6CaloL6SLB = cms.ESProducer("L6SLBCorrectionESProducer",
    srcBTagInfoElectron = cms.InputTag("kt6CaloJetsSoftElectronTagInfos"),
    srcBTagInfoMuon = cms.InputTag("kt6CaloJetsSoftMuonTagInfos"),
    addMuonToJet = cms.bool(True),
    algorithm = cms.string(''),
    level = cms.string('L6SLB')
)


process.kt6CaloResidual = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK5Calo'),
    level = cms.string('L2L3Residual')
)


process.kt6PFL1FastL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5PFL1Fastjet', 
        'kt6PFL2Relative', 
        'kt6PFL3Absolute')
)


process.kt6PFL1FastL2L3L6 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5PFL1Fastjet', 
        'kt6PFL2Relative', 
        'kt6PFL3Absolute', 
        'kt6PFL6SLB')
)


process.kt6PFL1FastL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt6PFL1Fastjet', 
        'kt6PFL2Relative', 
        'kt6PFL3Absolute', 
        'kt6PFResidual')
)


process.kt6PFL1Fastjet = cms.ESProducer("L1FastjetCorrectionESProducer",
    srcRho = cms.InputTag("kt6PFJets","rho"),
    algorithm = cms.string('AK5PF'),
    level = cms.string('L1FastJet')
)


process.kt6PFL1L2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt6PFL1Offset', 
        'kt6PFL2Relative', 
        'kt6PFL3Absolute')
)


process.kt6PFL1L2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt6PFL1Offset', 
        'kt6PFL2Relative', 
        'kt6PFL3Absolute', 
        'kt6PFResidual')
)


process.kt6PFL1Offset = cms.ESProducer("L1OffsetCorrectionESProducer",
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.string('offlinePrimaryVertices'),
    algorithm = cms.string('AK5PF'),
    level = cms.string('L1Offset')
)


process.kt6PFL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt6PFL2Relative', 
        'kt6PFL3Absolute')
)


process.kt6PFL2L3L6 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt6PFL2Relative', 
        'kt6PFL3Absolute', 
        'kt6PFL6SLB')
)


process.kt6PFL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt6PFL2Relative', 
        'kt6PFL3Absolute', 
        'kt6PFResidual')
)


process.kt6PFL2Relative = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('KT6PF'),
    level = cms.string('L2Relative')
)


process.kt6PFL3Absolute = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('KT6PF'),
    level = cms.string('L3Absolute')
)


process.kt6PFL6SLB = cms.ESProducer("L6SLBCorrectionESProducer",
    srcBTagInfoElectron = cms.InputTag("kt6PFJetsSoftElectronTagInfos"),
    srcBTagInfoMuon = cms.InputTag("kt6PFJetsSoftMuonTagInfos"),
    addMuonToJet = cms.bool(False),
    algorithm = cms.string(''),
    level = cms.string('L6SLB')
)


process.kt6PFResidual = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK5PF'),
    level = cms.string('L2L3Residual')
)


process.negativeCombinedMVA = cms.ESProducer("CombinedMVAJetTagESProducer",
    useCategories = cms.bool(False),
    calibrationRecord = cms.string('CombinedMVA'),
    jetTagComputers = cms.VPSet(cms.PSet(
        discriminator = cms.bool(True),
        variables = cms.bool(False),
        jetTagComputer = cms.string('negativeOnlyJetProbability')
    ), 
        cms.PSet(
            discriminator = cms.bool(True),
            variables = cms.bool(False),
            jetTagComputer = cms.string('combinedSecondaryVertexNegative')
        ), 
        cms.PSet(
            discriminator = cms.bool(True),
            variables = cms.bool(False),
            jetTagComputer = cms.string('negativeSoftPFMuon')
        ), 
        cms.PSet(
            discriminator = cms.bool(True),
            variables = cms.bool(False),
            jetTagComputer = cms.string('negativeSoftPFElectron')
        ))
)


process.negativeCombinedSecondaryVertexSoftPFLeptonV1 = cms.ESProducer("CombinedMVAJetTagESProducer",
    useCategories = cms.bool(False),
    calibrationRecord = cms.string('CombinedCSVSL'),
    jetTagComputers = cms.VPSet(cms.PSet(
        discriminator = cms.bool(True),
        variables = cms.bool(False),
        jetTagComputer = cms.string('negativeOnlyJetProbability')
    ), 
        cms.PSet(
            discriminator = cms.bool(True),
            variables = cms.bool(False),
            jetTagComputer = cms.string('combinedSecondaryVertexV1Negative')
        ), 
        cms.PSet(
            discriminator = cms.bool(True),
            variables = cms.bool(False),
            jetTagComputer = cms.string('negativeSoftPFMuon')
        ), 
        cms.PSet(
            discriminator = cms.bool(True),
            variables = cms.bool(False),
            jetTagComputer = cms.string('negativeSoftPFElectron')
        ))
)


process.negativeOnlyJetBProbability = cms.ESProducer("JetBProbabilityESProducer",
    deltaR = cms.double(-1.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    impactParameterType = cms.int32(0),
    trackQualityClass = cms.string('any'),
    trackIpSign = cms.int32(-1),
    minimumProbability = cms.double(0.005),
    numberOfBTracks = cms.uint32(4),
    maximumDecayLength = cms.double(5.0)
)


process.negativeOnlyJetProbability = cms.ESProducer("JetProbabilityESProducer",
    deltaR = cms.double(0.3),
    maximumDistanceToJetAxis = cms.double(0.07),
    impactParameterType = cms.int32(0),
    trackQualityClass = cms.string('any'),
    trackIpSign = cms.int32(-1),
    minimumProbability = cms.double(0.005),
    maximumDecayLength = cms.double(5.0)
)


process.negativeSoftPFElectron = cms.ESProducer("ElectronTaggerESProducer",
    ipSign = cms.string('negative')
)


process.negativeSoftPFElectronByIP2d = cms.ESProducer("LeptonTaggerByIPESProducer",
    use3d = cms.bool(False),
    ipSign = cms.string('negative')
)


process.negativeSoftPFElectronByIP3d = cms.ESProducer("LeptonTaggerByIPESProducer",
    use3d = cms.bool(True),
    ipSign = cms.string('negative')
)


process.negativeSoftPFElectronByPt = cms.ESProducer("LeptonTaggerByPtESProducer",
    ipSign = cms.string('negative')
)


process.negativeSoftPFMuon = cms.ESProducer("MuonTaggerESProducer",
    ipSign = cms.string('negative')
)


process.negativeSoftPFMuonByIP2d = cms.ESProducer("LeptonTaggerByIPESProducer",
    use3d = cms.bool(False),
    ipSign = cms.string('negative')
)


process.negativeSoftPFMuonByIP3d = cms.ESProducer("LeptonTaggerByIPESProducer",
    use3d = cms.bool(True),
    ipSign = cms.string('negative')
)


process.negativeSoftPFMuonByPt = cms.ESProducer("LeptonTaggerByPtESProducer",
    ipSign = cms.string('negative')
)


process.negativeTrackCounting3D2nd = cms.ESProducer("NegativeTrackCountingESProducer",
    deltaR = cms.double(-1.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    impactParameterType = cms.int32(0),
    trackQualityClass = cms.string('any'),
    maximumDecayLength = cms.double(5.0),
    nthTrack = cms.int32(2)
)


process.negativeTrackCounting3D3rd = cms.ESProducer("NegativeTrackCountingESProducer",
    deltaR = cms.double(-1.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    impactParameterType = cms.int32(0),
    trackQualityClass = cms.string('any'),
    maximumDecayLength = cms.double(5.0),
    nthTrack = cms.int32(3)
)


process.positiveCombinedMVA = cms.ESProducer("CombinedMVAJetTagESProducer",
    useCategories = cms.bool(False),
    calibrationRecord = cms.string('CombinedMVA'),
    jetTagComputers = cms.VPSet(cms.PSet(
        discriminator = cms.bool(True),
        variables = cms.bool(False),
        jetTagComputer = cms.string('positiveOnlyJetProbability')
    ), 
        cms.PSet(
            discriminator = cms.bool(True),
            variables = cms.bool(False),
            jetTagComputer = cms.string('combinedSecondaryVertexPositive')
        ), 
        cms.PSet(
            discriminator = cms.bool(True),
            variables = cms.bool(False),
            jetTagComputer = cms.string('positiveSoftPFMuon')
        ), 
        cms.PSet(
            discriminator = cms.bool(True),
            variables = cms.bool(False),
            jetTagComputer = cms.string('positiveSoftPFElectron')
        ))
)


process.positiveCombinedSecondaryVertexSoftPFLeptonV1 = cms.ESProducer("CombinedMVAJetTagESProducer",
    useCategories = cms.bool(False),
    calibrationRecord = cms.string('CombinedCSVSL'),
    jetTagComputers = cms.VPSet(cms.PSet(
        discriminator = cms.bool(True),
        variables = cms.bool(False),
        jetTagComputer = cms.string('positiveOnlyJetProbability')
    ), 
        cms.PSet(
            discriminator = cms.bool(True),
            variables = cms.bool(False),
            jetTagComputer = cms.string('combinedSecondaryVertexV1Positive')
        ), 
        cms.PSet(
            discriminator = cms.bool(True),
            variables = cms.bool(False),
            jetTagComputer = cms.string('positiveSoftPFMuon')
        ), 
        cms.PSet(
            discriminator = cms.bool(True),
            variables = cms.bool(False),
            jetTagComputer = cms.string('positiveSoftPFElectron')
        ))
)


process.positiveOnlyJetBProbability = cms.ESProducer("JetBProbabilityESProducer",
    deltaR = cms.double(-1.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    impactParameterType = cms.int32(0),
    trackQualityClass = cms.string('any'),
    trackIpSign = cms.int32(1),
    minimumProbability = cms.double(0.005),
    numberOfBTracks = cms.uint32(4),
    maximumDecayLength = cms.double(5.0)
)


process.positiveOnlyJetProbability = cms.ESProducer("JetProbabilityESProducer",
    deltaR = cms.double(0.3),
    maximumDistanceToJetAxis = cms.double(0.07),
    impactParameterType = cms.int32(0),
    trackQualityClass = cms.string('any'),
    trackIpSign = cms.int32(1),
    minimumProbability = cms.double(0.005),
    maximumDecayLength = cms.double(5.0)
)


process.positiveSoftPFElectron = cms.ESProducer("ElectronTaggerESProducer",
    ipSign = cms.string('positive')
)


process.positiveSoftPFElectronByIP2d = cms.ESProducer("LeptonTaggerByIPESProducer",
    use3d = cms.bool(False),
    ipSign = cms.string('positive')
)


process.positiveSoftPFElectronByIP3d = cms.ESProducer("LeptonTaggerByIPESProducer",
    use3d = cms.bool(True),
    ipSign = cms.string('positive')
)


process.positiveSoftPFElectronByPt = cms.ESProducer("LeptonTaggerByPtESProducer",
    ipSign = cms.string('positive')
)


process.positiveSoftPFMuon = cms.ESProducer("MuonTaggerESProducer",
    ipSign = cms.string('positive')
)


process.positiveSoftPFMuonByIP2d = cms.ESProducer("LeptonTaggerByIPESProducer",
    use3d = cms.bool(False),
    ipSign = cms.string('positive')
)


process.positiveSoftPFMuonByIP3d = cms.ESProducer("LeptonTaggerByIPESProducer",
    use3d = cms.bool(True),
    ipSign = cms.string('positive')
)


process.positiveSoftPFMuonByPt = cms.ESProducer("LeptonTaggerByPtESProducer",
    ipSign = cms.string('positive')
)


process.siPixelQualityESProducer = cms.ESProducer("SiPixelQualityESProducer",
    ListOfRecordToMerge = cms.VPSet(cms.PSet(
        record = cms.string('SiPixelQualityFromDbRcd'),
        tag = cms.string('')
    ), 
        cms.PSet(
            record = cms.string('SiPixelDetVOffRcd'),
            tag = cms.string('')
        ))
)


process.siStripGainESProducer = cms.ESProducer("SiStripGainESProducer",
    printDebug = cms.untracked.bool(False),
    appendToDataLabel = cms.string(''),
    APVGain = cms.VPSet(cms.PSet(
        Record = cms.string('SiStripApvGainRcd'),
        NormalizationFactor = cms.untracked.double(1.0),
        Label = cms.untracked.string('')
    ), 
        cms.PSet(
            Record = cms.string('SiStripApvGain2Rcd'),
            NormalizationFactor = cms.untracked.double(1.0),
            Label = cms.untracked.string('')
        )),
    AutomaticNormalization = cms.bool(False)
)


process.siStripLorentzAngleDepESProducer = cms.ESProducer("SiStripLorentzAngleDepESProducer",
    LatencyRecord = cms.PSet(
        record = cms.string('SiStripLatencyRcd'),
        label = cms.untracked.string('')
    ),
    LorentzAngleDeconvMode = cms.PSet(
        record = cms.string('SiStripLorentzAngleRcd'),
        label = cms.untracked.string('deconvolution')
    ),
    LorentzAnglePeakMode = cms.PSet(
        record = cms.string('SiStripLorentzAngleRcd'),
        label = cms.untracked.string('peak')
    )
)


process.siStripQualityESProducer = cms.ESProducer("SiStripQualityESProducer",
    appendToDataLabel = cms.string(''),
    PrintDebugOutput = cms.bool(False),
    ThresholdForReducedGranularity = cms.double(0.3),
    UseEmptyRunInfo = cms.bool(False),
    ReduceGranularity = cms.bool(False),
    ListOfRecordToMerge = cms.VPSet(cms.PSet(
        record = cms.string('SiStripDetVOffRcd'),
        tag = cms.string('')
    ), 
        cms.PSet(
            record = cms.string('SiStripDetCablingRcd'),
            tag = cms.string('')
        ), 
        cms.PSet(
            record = cms.string('RunInfoRcd'),
            tag = cms.string('')
        ), 
        cms.PSet(
            record = cms.string('SiStripBadChannelRcd'),
            tag = cms.string('')
        ), 
        cms.PSet(
            record = cms.string('SiStripBadFiberRcd'),
            tag = cms.string('')
        ), 
        cms.PSet(
            record = cms.string('SiStripBadModuleRcd'),
            tag = cms.string('')
        ), 
        cms.PSet(
            record = cms.string('SiStripBadStripRcd'),
            tag = cms.string('')
        ))
)


process.simpleSecondaryVertex2Trk = cms.ESProducer("SimpleSecondaryVertexESProducer",
    minTracks = cms.uint32(2),
    unBoost = cms.bool(False),
    useSignificance = cms.bool(True),
    use3d = cms.bool(True)
)


process.simpleSecondaryVertex3Trk = cms.ESProducer("SimpleSecondaryVertexESProducer",
    minTracks = cms.uint32(3),
    unBoost = cms.bool(False),
    useSignificance = cms.bool(True),
    use3d = cms.bool(True)
)


process.sistripconn = cms.ESProducer("SiStripConnectivity")


process.softPFElectron = cms.ESProducer("ElectronTaggerESProducer",
    ipSign = cms.string('any')
)


process.softPFElectronByIP2d = cms.ESProducer("LeptonTaggerByIPESProducer",
    use3d = cms.bool(False),
    ipSign = cms.string('any')
)


process.softPFElectronByIP3d = cms.ESProducer("LeptonTaggerByIPESProducer",
    use3d = cms.bool(True),
    ipSign = cms.string('any')
)


process.softPFElectronByPt = cms.ESProducer("LeptonTaggerByPtESProducer",
    ipSign = cms.string('any')
)


process.softPFMuon = cms.ESProducer("MuonTaggerESProducer",
    ipSign = cms.string('any')
)


process.softPFMuonByIP2d = cms.ESProducer("LeptonTaggerByIPESProducer",
    use3d = cms.bool(False),
    ipSign = cms.string('any')
)


process.softPFMuonByIP3d = cms.ESProducer("LeptonTaggerByIPESProducer",
    use3d = cms.bool(True),
    ipSign = cms.string('any')
)


process.softPFMuonByPt = cms.ESProducer("LeptonTaggerByPtESProducer",
    ipSign = cms.string('any')
)


process.trackCounting3D2nd = cms.ESProducer("TrackCountingESProducer",
    deltaR = cms.double(-1.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    impactParameterType = cms.int32(0),
    trackQualityClass = cms.string('any'),
    maximumDecayLength = cms.double(5.0),
    nthTrack = cms.int32(2)
)


process.trackCounting3D3rd = cms.ESProducer("TrackCountingESProducer",
    deltaR = cms.double(-1.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    impactParameterType = cms.int32(0),
    trackQualityClass = cms.string('any'),
    maximumDecayLength = cms.double(5.0),
    nthTrack = cms.int32(3)
)


process.BTagRecord = cms.ESSource("EmptyESSource",
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('JetTagComputerRecord'),
    firstValid = cms.vuint32(1)
)


process.GlobalTag = cms.ESSource("PoolDBESSource",
    DBParameters = cms.PSet(
        authenticationPath = cms.untracked.string(''),
        enableReadOnlySessionOnUpdateConnection = cms.untracked.bool(False),
        idleConnectionCleanupPeriod = cms.untracked.int32(10),
        messageLevel = cms.untracked.int32(0),
        enablePoolAutomaticCleanUp = cms.untracked.bool(False),
        enableConnectionSharing = cms.untracked.bool(True),
        connectionRetrialTimeOut = cms.untracked.int32(60),
        connectionTimeOut = cms.untracked.int32(60),
        authenticationSystem = cms.untracked.int32(0),
        connectionRetrialPeriod = cms.untracked.int32(10)
    ),
    BlobStreamerName = cms.untracked.string('TBufferBlobStreamingService'),
    toGet = cms.VPSet(),
    connect = cms.string('frontier://FrontierProd/CMS_COND_31X_GLOBALTAG'),
    globaltag = cms.string('START53_V7G::All')
)


process.HepPDTESSource = cms.ESSource("HepPDTESSource",
    pdtFileName = cms.FileInPath('SimGeneral/HepPDTESSource/data/pythiaparticle.tbl')
)


process.XMLIdealGeometryESSource = cms.ESSource("XMLIdealGeometryESSource",
    geomXMLFiles = cms.vstring('Geometry/CMSCommonData/data/materials.xml', 
        'Geometry/CMSCommonData/data/rotations.xml', 
        'Geometry/CMSCommonData/data/normal/cmsextent.xml', 
        'Geometry/CMSCommonData/data/cms.xml', 
        'Geometry/CMSCommonData/data/cmsMother.xml', 
        'Geometry/CMSCommonData/data/cmsTracker.xml', 
        'Geometry/CMSCommonData/data/caloBase.xml', 
        'Geometry/CMSCommonData/data/cmsCalo.xml', 
        'Geometry/CMSCommonData/data/muonBase.xml', 
        'Geometry/CMSCommonData/data/cmsMuon.xml', 
        'Geometry/CMSCommonData/data/mgnt.xml', 
        'Geometry/CMSCommonData/data/beampipe.xml', 
        'Geometry/CMSCommonData/data/cmsBeam.xml', 
        'Geometry/CMSCommonData/data/muonMB.xml', 
        'Geometry/CMSCommonData/data/muonMagnet.xml', 
        'Geometry/TrackerCommonData/data/pixfwdMaterials.xml', 
        'Geometry/TrackerCommonData/data/pixfwdCommon.xml', 
        'Geometry/TrackerCommonData/data/pixfwdPlaq.xml', 
        'Geometry/TrackerCommonData/data/pixfwdPlaq1x2.xml', 
        'Geometry/TrackerCommonData/data/pixfwdPlaq1x5.xml', 
        'Geometry/TrackerCommonData/data/pixfwdPlaq2x3.xml', 
        'Geometry/TrackerCommonData/data/pixfwdPlaq2x4.xml', 
        'Geometry/TrackerCommonData/data/pixfwdPlaq2x5.xml', 
        'Geometry/TrackerCommonData/data/pixfwdPanelBase.xml', 
        'Geometry/TrackerCommonData/data/pixfwdPanel.xml', 
        'Geometry/TrackerCommonData/data/pixfwdBlade.xml', 
        'Geometry/TrackerCommonData/data/pixfwdNipple.xml', 
        'Geometry/TrackerCommonData/data/pixfwdDisk.xml', 
        'Geometry/TrackerCommonData/data/pixfwdCylinder.xml', 
        'Geometry/TrackerCommonData/data/pixfwd.xml', 
        'Geometry/TrackerCommonData/data/pixbarmaterial.xml', 
        'Geometry/TrackerCommonData/data/pixbarladder.xml', 
        'Geometry/TrackerCommonData/data/pixbarladderfull.xml', 
        'Geometry/TrackerCommonData/data/pixbarladderhalf.xml', 
        'Geometry/TrackerCommonData/data/pixbarlayer.xml', 
        'Geometry/TrackerCommonData/data/pixbarlayer0.xml', 
        'Geometry/TrackerCommonData/data/pixbarlayer1.xml', 
        'Geometry/TrackerCommonData/data/pixbarlayer2.xml', 
        'Geometry/TrackerCommonData/data/pixbar.xml', 
        'Geometry/TrackerCommonData/data/tibtidcommonmaterial.xml', 
        'Geometry/TrackerCommonData/data/tibmaterial.xml', 
        'Geometry/TrackerCommonData/data/tibmodpar.xml', 
        'Geometry/TrackerCommonData/data/tibmodule0.xml', 
        'Geometry/TrackerCommonData/data/tibmodule0a.xml', 
        'Geometry/TrackerCommonData/data/tibmodule0b.xml', 
        'Geometry/TrackerCommonData/data/tibmodule2.xml', 
        'Geometry/TrackerCommonData/data/tibstringpar.xml', 
        'Geometry/TrackerCommonData/data/tibstring0ll.xml', 
        'Geometry/TrackerCommonData/data/tibstring0lr.xml', 
        'Geometry/TrackerCommonData/data/tibstring0ul.xml', 
        'Geometry/TrackerCommonData/data/tibstring0ur.xml', 
        'Geometry/TrackerCommonData/data/tibstring0.xml', 
        'Geometry/TrackerCommonData/data/tibstring1ll.xml', 
        'Geometry/TrackerCommonData/data/tibstring1lr.xml', 
        'Geometry/TrackerCommonData/data/tibstring1ul.xml', 
        'Geometry/TrackerCommonData/data/tibstring1ur.xml', 
        'Geometry/TrackerCommonData/data/tibstring1.xml', 
        'Geometry/TrackerCommonData/data/tibstring2ll.xml', 
        'Geometry/TrackerCommonData/data/tibstring2lr.xml', 
        'Geometry/TrackerCommonData/data/tibstring2ul.xml', 
        'Geometry/TrackerCommonData/data/tibstring2ur.xml', 
        'Geometry/TrackerCommonData/data/tibstring2.xml', 
        'Geometry/TrackerCommonData/data/tibstring3ll.xml', 
        'Geometry/TrackerCommonData/data/tibstring3lr.xml', 
        'Geometry/TrackerCommonData/data/tibstring3ul.xml', 
        'Geometry/TrackerCommonData/data/tibstring3ur.xml', 
        'Geometry/TrackerCommonData/data/tibstring3.xml', 
        'Geometry/TrackerCommonData/data/tiblayerpar.xml', 
        'Geometry/TrackerCommonData/data/tiblayer0.xml', 
        'Geometry/TrackerCommonData/data/tiblayer1.xml', 
        'Geometry/TrackerCommonData/data/tiblayer2.xml', 
        'Geometry/TrackerCommonData/data/tiblayer3.xml', 
        'Geometry/TrackerCommonData/data/tib.xml', 
        'Geometry/TrackerCommonData/data/tidmaterial.xml', 
        'Geometry/TrackerCommonData/data/tidmodpar.xml', 
        'Geometry/TrackerCommonData/data/tidmodule0.xml', 
        'Geometry/TrackerCommonData/data/tidmodule0r.xml', 
        'Geometry/TrackerCommonData/data/tidmodule0l.xml', 
        'Geometry/TrackerCommonData/data/tidmodule1.xml', 
        'Geometry/TrackerCommonData/data/tidmodule1r.xml', 
        'Geometry/TrackerCommonData/data/tidmodule1l.xml', 
        'Geometry/TrackerCommonData/data/tidmodule2.xml', 
        'Geometry/TrackerCommonData/data/tidringpar.xml', 
        'Geometry/TrackerCommonData/data/tidring0.xml', 
        'Geometry/TrackerCommonData/data/tidring0f.xml', 
        'Geometry/TrackerCommonData/data/tidring0b.xml', 
        'Geometry/TrackerCommonData/data/tidring1.xml', 
        'Geometry/TrackerCommonData/data/tidring1f.xml', 
        'Geometry/TrackerCommonData/data/tidring1b.xml', 
        'Geometry/TrackerCommonData/data/tidring2.xml', 
        'Geometry/TrackerCommonData/data/tid.xml', 
        'Geometry/TrackerCommonData/data/tidf.xml', 
        'Geometry/TrackerCommonData/data/tidb.xml', 
        'Geometry/TrackerCommonData/data/tibtidservices.xml', 
        'Geometry/TrackerCommonData/data/tibtidservicesf.xml', 
        'Geometry/TrackerCommonData/data/tibtidservicesb.xml', 
        'Geometry/TrackerCommonData/data/tobmaterial.xml', 
        'Geometry/TrackerCommonData/data/tobmodpar.xml', 
        'Geometry/TrackerCommonData/data/tobmodule0.xml', 
        'Geometry/TrackerCommonData/data/tobmodule2.xml', 
        'Geometry/TrackerCommonData/data/tobmodule4.xml', 
        'Geometry/TrackerCommonData/data/tobrodpar.xml', 
        'Geometry/TrackerCommonData/data/tobrod0c.xml', 
        'Geometry/TrackerCommonData/data/tobrod0l.xml', 
        'Geometry/TrackerCommonData/data/tobrod0h.xml', 
        'Geometry/TrackerCommonData/data/tobrod0.xml', 
        'Geometry/TrackerCommonData/data/tobrod1l.xml', 
        'Geometry/TrackerCommonData/data/tobrod1h.xml', 
        'Geometry/TrackerCommonData/data/tobrod1.xml', 
        'Geometry/TrackerCommonData/data/tobrod2c.xml', 
        'Geometry/TrackerCommonData/data/tobrod2l.xml', 
        'Geometry/TrackerCommonData/data/tobrod2h.xml', 
        'Geometry/TrackerCommonData/data/tobrod2.xml', 
        'Geometry/TrackerCommonData/data/tobrod3l.xml', 
        'Geometry/TrackerCommonData/data/tobrod3h.xml', 
        'Geometry/TrackerCommonData/data/tobrod3.xml', 
        'Geometry/TrackerCommonData/data/tobrod4c.xml', 
        'Geometry/TrackerCommonData/data/tobrod4l.xml', 
        'Geometry/TrackerCommonData/data/tobrod4h.xml', 
        'Geometry/TrackerCommonData/data/tobrod4.xml', 
        'Geometry/TrackerCommonData/data/tobrod5l.xml', 
        'Geometry/TrackerCommonData/data/tobrod5h.xml', 
        'Geometry/TrackerCommonData/data/tobrod5.xml', 
        'Geometry/TrackerCommonData/data/tob.xml', 
        'Geometry/TrackerCommonData/data/tecmaterial.xml', 
        'Geometry/TrackerCommonData/data/tecmodpar.xml', 
        'Geometry/TrackerCommonData/data/tecmodule0.xml', 
        'Geometry/TrackerCommonData/data/tecmodule0r.xml', 
        'Geometry/TrackerCommonData/data/tecmodule0s.xml', 
        'Geometry/TrackerCommonData/data/tecmodule1.xml', 
        'Geometry/TrackerCommonData/data/tecmodule1r.xml', 
        'Geometry/TrackerCommonData/data/tecmodule1s.xml', 
        'Geometry/TrackerCommonData/data/tecmodule2.xml', 
        'Geometry/TrackerCommonData/data/tecmodule3.xml', 
        'Geometry/TrackerCommonData/data/tecmodule4.xml', 
        'Geometry/TrackerCommonData/data/tecmodule4r.xml', 
        'Geometry/TrackerCommonData/data/tecmodule4s.xml', 
        'Geometry/TrackerCommonData/data/tecmodule5.xml', 
        'Geometry/TrackerCommonData/data/tecmodule6.xml', 
        'Geometry/TrackerCommonData/data/tecpetpar.xml', 
        'Geometry/TrackerCommonData/data/tecring0.xml', 
        'Geometry/TrackerCommonData/data/tecring1.xml', 
        'Geometry/TrackerCommonData/data/tecring2.xml', 
        'Geometry/TrackerCommonData/data/tecring3.xml', 
        'Geometry/TrackerCommonData/data/tecring4.xml', 
        'Geometry/TrackerCommonData/data/tecring5.xml', 
        'Geometry/TrackerCommonData/data/tecring6.xml', 
        'Geometry/TrackerCommonData/data/tecring0f.xml', 
        'Geometry/TrackerCommonData/data/tecring1f.xml', 
        'Geometry/TrackerCommonData/data/tecring2f.xml', 
        'Geometry/TrackerCommonData/data/tecring3f.xml', 
        'Geometry/TrackerCommonData/data/tecring4f.xml', 
        'Geometry/TrackerCommonData/data/tecring5f.xml', 
        'Geometry/TrackerCommonData/data/tecring6f.xml', 
        'Geometry/TrackerCommonData/data/tecring0b.xml', 
        'Geometry/TrackerCommonData/data/tecring1b.xml', 
        'Geometry/TrackerCommonData/data/tecring2b.xml', 
        'Geometry/TrackerCommonData/data/tecring3b.xml', 
        'Geometry/TrackerCommonData/data/tecring4b.xml', 
        'Geometry/TrackerCommonData/data/tecring5b.xml', 
        'Geometry/TrackerCommonData/data/tecring6b.xml', 
        'Geometry/TrackerCommonData/data/tecpetalf.xml', 
        'Geometry/TrackerCommonData/data/tecpetalb.xml', 
        'Geometry/TrackerCommonData/data/tecpetal0.xml', 
        'Geometry/TrackerCommonData/data/tecpetal0f.xml', 
        'Geometry/TrackerCommonData/data/tecpetal0b.xml', 
        'Geometry/TrackerCommonData/data/tecpetal3.xml', 
        'Geometry/TrackerCommonData/data/tecpetal3f.xml', 
        'Geometry/TrackerCommonData/data/tecpetal3b.xml', 
        'Geometry/TrackerCommonData/data/tecpetal6f.xml', 
        'Geometry/TrackerCommonData/data/tecpetal6b.xml', 
        'Geometry/TrackerCommonData/data/tecpetal8f.xml', 
        'Geometry/TrackerCommonData/data/tecpetal8b.xml', 
        'Geometry/TrackerCommonData/data/tecwheel.xml', 
        'Geometry/TrackerCommonData/data/tecwheela.xml', 
        'Geometry/TrackerCommonData/data/tecwheelb.xml', 
        'Geometry/TrackerCommonData/data/tecwheelc.xml', 
        'Geometry/TrackerCommonData/data/tecwheeld.xml', 
        'Geometry/TrackerCommonData/data/tecwheel6.xml', 
        'Geometry/TrackerCommonData/data/tecservices.xml', 
        'Geometry/TrackerCommonData/data/tecbackplate.xml', 
        'Geometry/TrackerCommonData/data/tec.xml', 
        'Geometry/TrackerCommonData/data/trackermaterial.xml', 
        'Geometry/TrackerCommonData/data/tracker.xml', 
        'Geometry/TrackerCommonData/data/trackerpixbar.xml', 
        'Geometry/TrackerCommonData/data/trackerpixfwd.xml', 
        'Geometry/TrackerCommonData/data/trackertibtidservices.xml', 
        'Geometry/TrackerCommonData/data/trackertib.xml', 
        'Geometry/TrackerCommonData/data/trackertid.xml', 
        'Geometry/TrackerCommonData/data/trackertob.xml', 
        'Geometry/TrackerCommonData/data/trackertec.xml', 
        'Geometry/TrackerCommonData/data/trackerbulkhead.xml', 
        'Geometry/TrackerCommonData/data/trackerother.xml', 
        'Geometry/EcalCommonData/data/eregalgo.xml', 
        'Geometry/EcalCommonData/data/ebalgo.xml', 
        'Geometry/EcalCommonData/data/ebcon.xml', 
        'Geometry/EcalCommonData/data/ebrot.xml', 
        'Geometry/EcalCommonData/data/eecon.xml', 
        'Geometry/EcalCommonData/data/eefixed.xml', 
        'Geometry/EcalCommonData/data/eehier.xml', 
        'Geometry/EcalCommonData/data/eealgo.xml', 
        'Geometry/EcalCommonData/data/escon.xml', 
        'Geometry/EcalCommonData/data/esalgo.xml', 
        'Geometry/EcalCommonData/data/eeF.xml', 
        'Geometry/EcalCommonData/data/eeB.xml', 
        'Geometry/HcalCommonData/data/hcalrotations.xml', 
        'Geometry/HcalCommonData/data/hcalalgo.xml', 
        'Geometry/HcalCommonData/data/hcalbarrelalgo.xml', 
        'Geometry/HcalCommonData/data/hcalendcapalgo.xml', 
        'Geometry/HcalCommonData/data/hcalouteralgo.xml', 
        'Geometry/HcalCommonData/data/hcalforwardalgo.xml', 
        'Geometry/HcalCommonData/data/average/hcalforwardmaterial.xml', 
        'Geometry/MuonCommonData/data/mbCommon.xml', 
        'Geometry/MuonCommonData/data/mb1.xml', 
        'Geometry/MuonCommonData/data/mb2.xml', 
        'Geometry/MuonCommonData/data/mb3.xml', 
        'Geometry/MuonCommonData/data/mb4.xml', 
        'Geometry/MuonCommonData/data/muonYoke.xml', 
        'Geometry/MuonCommonData/data/mf.xml', 
        'Geometry/ForwardCommonData/data/forward.xml', 
        'Geometry/ForwardCommonData/data/bundle/forwardshield.xml', 
        'Geometry/ForwardCommonData/data/brmrotations.xml', 
        'Geometry/ForwardCommonData/data/brm.xml', 
        'Geometry/ForwardCommonData/data/totemMaterials.xml', 
        'Geometry/ForwardCommonData/data/totemRotations.xml', 
        'Geometry/ForwardCommonData/data/totemt1.xml', 
        'Geometry/ForwardCommonData/data/totemt2.xml', 
        'Geometry/ForwardCommonData/data/ionpump.xml', 
        'Geometry/MuonCommonData/data/muonNumbering.xml', 
        'Geometry/TrackerCommonData/data/trackerStructureTopology.xml', 
        'Geometry/TrackerSimData/data/trackersens.xml', 
        'Geometry/TrackerRecoData/data/trackerRecoMaterial.xml', 
        'Geometry/EcalSimData/data/ecalsens.xml', 
        'Geometry/HcalCommonData/data/hcalsenspmf.xml', 
        'Geometry/HcalSimData/data/hf.xml', 
        'Geometry/HcalSimData/data/hfpmt.xml', 
        'Geometry/HcalSimData/data/hffibrebundle.xml', 
        'Geometry/HcalSimData/data/CaloUtil.xml', 
        'Geometry/MuonSimData/data/muonSens.xml', 
        'Geometry/DTGeometryBuilder/data/dtSpecsFilter.xml', 
        'Geometry/CSCGeometryBuilder/data/cscSpecsFilter.xml', 
        'Geometry/CSCGeometryBuilder/data/cscSpecs.xml', 
        'Geometry/RPCGeometryBuilder/data/RPCSpecs.xml', 
        'Geometry/ForwardCommonData/data/brmsens.xml', 
        'Geometry/HcalSimData/data/HcalProdCuts.xml', 
        'Geometry/EcalSimData/data/EcalProdCuts.xml', 
        'Geometry/EcalSimData/data/ESProdCuts.xml', 
        'Geometry/TrackerSimData/data/trackerProdCuts.xml', 
        'Geometry/TrackerSimData/data/trackerProdCutsBEAM.xml', 
        'Geometry/MuonSimData/data/muonProdCuts.xml', 
        'Geometry/ForwardSimData/data/ForwardShieldProdCuts.xml', 
        'Geometry/CMSCommonData/data/FieldParameters.xml'),
    rootNodeName = cms.string('cms:OCMS')
)


process.eegeom = cms.ESSource("EmptyESSource",
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('EcalMappingRcd'),
    firstValid = cms.vuint32(1)
)


process.es_hardcode = cms.ESSource("HcalHardcodeCalibrations",
    toGet = cms.untracked.vstring('GainWidths')
)


process.magfield = cms.ESSource("XMLIdealGeometryESSource",
    geomXMLFiles = cms.vstring('Geometry/CMSCommonData/data/normal/cmsextent.xml', 
        'Geometry/CMSCommonData/data/cms.xml', 
        'Geometry/CMSCommonData/data/cmsMagneticField.xml', 
        'MagneticField/GeomBuilder/data/MagneticFieldVolumes_1103l.xml', 
        'MagneticField/GeomBuilder/data/MagneticFieldParameters_07_2pi.xml', 
        'Geometry/CMSCommonData/data/materials.xml'),
    rootNodeName = cms.string('cmsMagneticField:MAGF')
)


process.prefer("magfield")

process.AnomalousCellParameters = cms.PSet(
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999)
)

process.CondDBSetup = cms.PSet(
    DBParameters = cms.PSet(
        authenticationPath = cms.untracked.string(''),
        enableReadOnlySessionOnUpdateConnection = cms.untracked.bool(False),
        idleConnectionCleanupPeriod = cms.untracked.int32(10),
        messageLevel = cms.untracked.int32(0),
        enablePoolAutomaticCleanUp = cms.untracked.bool(False),
        enableConnectionSharing = cms.untracked.bool(True),
        connectionRetrialTimeOut = cms.untracked.int32(60),
        connectionTimeOut = cms.untracked.int32(60),
        authenticationSystem = cms.untracked.int32(0),
        connectionRetrialPeriod = cms.untracked.int32(10)
    )
)

process.GenJetParameters = cms.PSet(
    Active_Area_Repeats = cms.int32(5),
    src = cms.InputTag("genParticlesForJets"),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(6.0),
    doRhoFastjet = cms.bool(False),
    srcPVs = cms.InputTag(""),
    inputEtMin = cms.double(0.0),
    doPUOffsetCorr = cms.bool(False),
    doAreaFastjet = cms.bool(False),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.5),
    jetType = cms.string('GenJet'),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    inputEMin = cms.double(0.0)
)

process.METSignificance_params = cms.PSet(
    resolutionsEra = cms.string('Spring10'),
    HB_EtResPar = cms.vdouble(0.0, 1.22, 0.05),
    EE_PhiResPar = cms.vdouble(0.02511),
    jdpt9 = cms.vdouble(0.843, 0.885, 1.245, 1.665, 1.944, 
        1.981, 1.972, 2.875, 3.923, 7.51),
    jdpt8 = cms.vdouble(0.889, 0.939, 1.166, 1.365, 1.553, 
        1.805, 2.06, 2.22, 2.268, 2.247),
    jdpt7 = cms.vdouble(1.094, 1.139, 1.436, 1.672, 1.831, 
        2.05, 2.267, 2.549, 2.785, 2.86),
    jdpt6 = cms.vdouble(1.213, 1.298, 1.716, 2.015, 2.191, 
        2.612, 2.863, 2.879, 2.925, 2.902),
    jdpt5 = cms.vdouble(1.049, 1.149, 1.607, 1.869, 2.012, 
        2.219, 2.289, 2.412, 2.695, 2.865),
    jdpt4 = cms.vdouble(0.85, 0.961, 1.337, 1.593, 1.854, 
        2.005, 2.209, 2.533, 2.812, 3.047),
    jdpt3 = cms.vdouble(0.929, 1.04, 1.46, 1.74, 2.042, 
        2.289, 2.639, 2.837, 2.946, 2.971),
    jdpt2 = cms.vdouble(0.841, 0.937, 1.316, 1.605, 1.919, 
        2.295, 2.562, 2.722, 2.943, 3.293),
    jdpt1 = cms.vdouble(0.718, 0.813, 1.133, 1.384, 1.588, 
        1.841, 2.115, 2.379, 2.508, 2.772),
    jdpt0 = cms.vdouble(0.749, 0.829, 1.099, 1.355, 1.584, 
        1.807, 2.035, 2.217, 2.378, 2.591),
    HE_EtResPar = cms.vdouble(0.0, 1.3, 0.05),
    HF_PhiResPar = cms.vdouble(0.05022),
    PF_PhiResType7 = cms.vdouble(0.02511),
    HE_PhiResPar = cms.vdouble(0.02511),
    EE_EtResPar = cms.vdouble(0.2, 0.03, 0.005),
    PF_PhiResType2 = cms.vdouble(0.002),
    PF_PhiResType3 = cms.vdouble(0.002),
    HF_EtResPar = cms.vdouble(0.0, 1.82, 0.09),
    resolutionsAlgo = cms.string('AK5PF'),
    PF_PhiResType6 = cms.vdouble(0.02511),
    HB_PhiResPar = cms.vdouble(0.02511),
    PF_PhiResType4 = cms.vdouble(0.0028, 0.0, 0.0022),
    PF_PhiResType5 = cms.vdouble(0.1, 0.1, 0.13),
    ptresolthreshold = cms.double(10.0),
    EB_EtResPar = cms.vdouble(0.2, 0.03, 0.005),
    jdphi8 = cms.vdouble(0.059, 0.057, 0.051, 0.044, 0.038, 
        0.035, 0.037, 0.032, 0.028, 0.028),
    EB_PhiResPar = cms.vdouble(0.00502),
    jdphi9 = cms.vdouble(0.062, 0.059, 0.053, 0.047, 0.042, 
        0.045, 0.036, 0.032, 0.034, 0.044),
    PF_PhiResType1 = cms.vdouble(0.002),
    jdphi4 = cms.vdouble(0.042, 0.042, 0.043, 0.042, 0.038, 
        0.036, 0.036, 0.033, 0.031, 0.031),
    HO_PhiResPar = cms.vdouble(0.02511),
    jdphi2 = cms.vdouble(0.04, 0.04, 0.04, 0.04, 0.04, 
        0.038, 0.036, 0.035, 0.034, 0.033),
    jdphi1 = cms.vdouble(0.034, 0.035, 0.035, 0.035, 0.035, 
        0.034, 0.031, 0.03, 0.029, 0.027),
    jdphi0 = cms.vdouble(0.034, 0.034, 0.034, 0.034, 0.032, 
        0.031, 0.028, 0.027, 0.027, 0.027),
    jdphi7 = cms.vdouble(0.077, 0.072, 0.059, 0.05, 0.045, 
        0.042, 0.039, 0.039, 0.037, 0.031),
    jdphi6 = cms.vdouble(0.084, 0.08, 0.072, 0.065, 0.066, 
        0.06, 0.051, 0.049, 0.045, 0.045),
    jdphi5 = cms.vdouble(0.069, 0.069, 0.064, 0.058, 0.053, 
        0.049, 0.049, 0.043, 0.039, 0.04),
    HO_EtResPar = cms.vdouble(0.0, 1.3, 0.005),
    jdphi3 = cms.vdouble(0.042, 0.043, 0.044, 0.043, 0.041, 
        0.039, 0.039, 0.036, 0.034, 0.031),
    PF_EtResType5 = cms.vdouble(0.41, 0.52, 0.25),
    PF_EtResType4 = cms.vdouble(0.042, 0.1, 0.0),
    PF_EtResType7 = cms.vdouble(0.0, 1.22, 0.05),
    PF_EtResType6 = cms.vdouble(0.0, 1.22, 0.05),
    PF_EtResType1 = cms.vdouble(0.05, 0, 0),
    PF_EtResType3 = cms.vdouble(0.05, 0, 0),
    PF_EtResType2 = cms.vdouble(0.05, 0, 0)
)

process.OneProngNoPiZero = cms.PSet(
    applyIsolation = cms.bool(False),
    cut = cms.double(-10.0),
    computerName = cms.string('OneProngNoPiZero'),
    decayModeIndices = cms.vint32(0)
)

process.OneProngNoPiZeroIso = cms.PSet(
    applyIsolation = cms.bool(True),
    cut = cms.double(-10.0),
    computerName = cms.string('OneProngNoPiZeroIso'),
    decayModeIndices = cms.vint32(0)
)

process.OneProngOnePiZero = cms.PSet(
    applyIsolation = cms.bool(False),
    cut = cms.double(-10.0),
    computerName = cms.string('OneProngOnePiZero'),
    decayModeIndices = cms.vint32(1)
)

process.OneProngOnePiZeroIso = cms.PSet(
    applyIsolation = cms.bool(True),
    cut = cms.double(-10.0),
    computerName = cms.string('OneProngOnePiZeroIso'),
    decayModeIndices = cms.vint32(1)
)

process.OneProngTwoPiZero = cms.PSet(
    applyIsolation = cms.bool(False),
    cut = cms.double(-10.0),
    computerName = cms.string('OneProngTwoPiZero'),
    decayModeIndices = cms.vint32(2)
)

process.OneProngTwoPiZeroIso = cms.PSet(
    applyIsolation = cms.bool(True),
    cut = cms.double(-10.0),
    computerName = cms.string('OneProngTwoPiZeroIso'),
    decayModeIndices = cms.vint32(2)
)

process.PFTauQualityCuts = cms.PSet(
    isolationQualityCuts = cms.PSet(
        minTrackHits = cms.uint32(8),
        minTrackVertexWeight = cms.double(-1),
        minTrackPt = cms.double(1.0),
        maxTrackChi2 = cms.double(100.0),
        minTrackPixelHits = cms.uint32(0),
        minGammaEt = cms.double(1.5),
        maxDeltaZ = cms.double(0.2),
        maxTransverseImpactParameter = cms.double(0.03)
    ),
    pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
    primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
    signalQualityCuts = cms.PSet(
        minTrackHits = cms.uint32(3),
        minTrackVertexWeight = cms.double(-1),
        minTrackPt = cms.double(0.5),
        maxTrackChi2 = cms.double(100.0),
        minTrackPixelHits = cms.uint32(0),
        minGammaEt = cms.double(0.5),
        maxDeltaZ = cms.double(0.2),
        maxTransverseImpactParameter = cms.double(0.03)
    )
)

process.SingleNet = cms.PSet(
    applyIsolation = cms.bool(False),
    cut = cms.double(-10.0),
    computerName = cms.string('SingleNet'),
    decayModeIndices = cms.vint32(0, 1, 2, 10, 11)
)

process.SingleNetIso = cms.PSet(
    applyIsolation = cms.bool(True),
    cut = cms.double(-10.0),
    computerName = cms.string('SingleNetIso'),
    decayModeIndices = cms.vint32(0, 1, 2, 10, 11)
)

process.ThreeProngNoPiZero = cms.PSet(
    applyIsolation = cms.bool(False),
    cut = cms.double(-10.0),
    computerName = cms.string('ThreeProngNoPiZero'),
    decayModeIndices = cms.vint32(10)
)

process.ThreeProngNoPiZeroIso = cms.PSet(
    applyIsolation = cms.bool(True),
    cut = cms.double(-10.0),
    computerName = cms.string('ThreeProngNoPiZeroIso'),
    decayModeIndices = cms.vint32(10)
)

process.ThreeProngOnePiZero = cms.PSet(
    applyIsolation = cms.bool(False),
    cut = cms.double(-10.0),
    computerName = cms.string('ThreeProngOnePiZero'),
    decayModeIndices = cms.vint32(11)
)

process.ThreeProngOnePiZeroIso = cms.PSet(
    applyIsolation = cms.bool(True),
    cut = cms.double(-10.0),
    computerName = cms.string('ThreeProngOnePiZeroIso'),
    decayModeIndices = cms.vint32(11)
)

process.combinedSecondaryVertexCommon = cms.PSet(
    trackPseudoSelection = cms.PSet(
        totalHitsMin = cms.uint32(0),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.07),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(5),
        ptMin = cms.double(0.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(2.0),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    trackSelection = cms.PSet(
        totalHitsMin = cms.uint32(0),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.07),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(5),
        ptMin = cms.double(0.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    useTrackWeights = cms.bool(True),
    pseudoMultiplicityMin = cms.uint32(2),
    correctVertexMass = cms.bool(True),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    charmCut = cms.double(1.5),
    vertexFlip = cms.bool(False),
    minimumTrackWeight = cms.double(0.5),
    pseudoVertexV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.05)
    ),
    trackMultiplicityMin = cms.uint32(3),
    trackSort = cms.string('sip2dSig'),
    trackFlip = cms.bool(False)
)

process.cuts = cms.PSet(
    tightCut = cms.double(0.985),
    looseCut = cms.double(0.95),
    mediumCut = cms.double(0.97),
    vlooseCut = cms.double(0.9)
)

process.discriminantConfiguration = cms.PSet(
    BinnedMaskedHcalIsolation = cms.PSet(
        vtxSource = cms.InputTag("recoTauPileUpVertices"),
        mask = cms.PSet(
            finalHcalCone = cms.double(0.08),
            ecalCone = cms.double(0.15),
            hcalCone = cms.double(0.3),
            maxSigmas = cms.double(2)
        ),
        binning = cms.VPSet(cms.PSet(
            binLowEdges = cms.vdouble(1.0, 1.79, 4.03),
            nPUVtx = cms.int32(0)
        ), 
            cms.PSet(
                binLowEdges = cms.vdouble(1.15, 1.8, 4.03),
                nPUVtx = cms.int32(1)
            ), 
            cms.PSet(
                binLowEdges = cms.vdouble(1.22, 1.81, 4.03),
                nPUVtx = cms.int32(2)
            ), 
            cms.PSet(
                binLowEdges = cms.vdouble(1.27, 1.83, 4.03),
                nPUVtx = cms.int32(3)
            ), 
            cms.PSet(
                binLowEdges = cms.vdouble(1.31, 1.84, 4.03),
                nPUVtx = cms.int32(4)
            )),
        defaultBinning = cms.vdouble(1.31, 1.84, 4.03),
        plugin = cms.string('RecoTauDiscriminationBinnedMaskedHCALIsolation')
    ),
    InvariantOpeningAngle = cms.PSet(
        defaultRMS = cms.string('max(0.3/max(pt, 1.0), 0.005)'),
        plugin = cms.string('RecoTauDiscriminantInvariantWidth'),
        decayModes = cms.VPSet(cms.PSet(
            nPiZeros = cms.uint32(1),
            rms = cms.string('2.7e-3 + 0.23/max(pt, 1.0)'),
            nCharged = cms.uint32(1),
            mean = cms.string('5.0e-3 + 0.43/max(pt, 1.0)')
        ), 
            cms.PSet(
                nPiZeros = cms.uint32(2),
                rms = cms.string('7.5e-3 + 0.3/max(pt, 1.0)'),
                nCharged = cms.uint32(1),
                mean = cms.string('4.7e-3 + 0.9/max(pt, 1.0)')
            ), 
            cms.PSet(
                nPiZeros = cms.uint32(0),
                rms = cms.string('0.38/max(pt, 1.0)'),
                nCharged = cms.uint32(3),
                mean = cms.string('0.87/max(pt, 1.0)')
            )),
        defaultMean = cms.string('max(0.87/max(pt, 1.0), 0.005)')
    ),
    BinnedMaskedEcalIsolation = cms.PSet(
        vtxSource = cms.InputTag("recoTauPileUpVertices"),
        mask = cms.PSet(
            finalHcalCone = cms.double(0.08),
            ecalCone = cms.double(0.15),
            hcalCone = cms.double(0.3),
            maxSigmas = cms.double(2)
        ),
        binning = cms.VPSet(cms.PSet(
            binLowEdges = cms.vdouble(0.5, 0.88, 2.53),
            nPUVtx = cms.int32(0)
        ), 
            cms.PSet(
                binLowEdges = cms.vdouble(0.65, 0.98, 2.53),
                nPUVtx = cms.int32(1)
            ), 
            cms.PSet(
                binLowEdges = cms.vdouble(0.74, 1.05, 2.54),
                nPUVtx = cms.int32(2)
            ), 
            cms.PSet(
                binLowEdges = cms.vdouble(0.8, 1.11, 2.54),
                nPUVtx = cms.int32(3)
            ), 
            cms.PSet(
                binLowEdges = cms.vdouble(0.86, 1.15, 2.54),
                nPUVtx = cms.int32(4)
            ), 
            cms.PSet(
                binLowEdges = cms.vdouble(0.9, 1.19, 2.55),
                nPUVtx = cms.int32(5)
            ), 
            cms.PSet(
                binLowEdges = cms.vdouble(0.94, 1.22, 2.55),
                nPUVtx = cms.int32(6)
            ), 
            cms.PSet(
                binLowEdges = cms.vdouble(0.97, 1.25, 2.55),
                nPUVtx = cms.int32(7)
            ), 
            cms.PSet(
                binLowEdges = cms.vdouble(1.0, 1.27, 2.56),
                nPUVtx = cms.int32(8)
            ), 
            cms.PSet(
                binLowEdges = cms.vdouble(1.03, 1.3, 2.56),
                nPUVtx = cms.int32(9)
            )),
        defaultBinning = cms.vdouble(1.03, 1.3, 2.56),
        plugin = cms.string('RecoTauDiscriminationBinnedMaskedECALIsolation')
    ),
    FlightPathSignificance = cms.PSet(
        plugin = cms.string('RecoTauDiscriminantFromDiscriminator'),
        discSrc = cms.InputTag("hpsTancTausDiscriminationByFlightPath"),
        maxValue = cms.double(25),
        minValue = cms.double(-25)
    ),
    BinnedTrackIsolation = cms.PSet(
        vtxSource = cms.InputTag("recoTauPileUpVertices"),
        binning = cms.VPSet(cms.PSet(
            binLowEdges = cms.vdouble(0.5, 0.86, 1.87),
            nPUVtx = cms.int32(0)
        ), 
            cms.PSet(
                binLowEdges = cms.vdouble(0.51, 0.86, 1.87),
                nPUVtx = cms.int32(1)
            ), 
            cms.PSet(
                binLowEdges = cms.vdouble(0.51, 0.86, 1.87),
                nPUVtx = cms.int32(2)
            ), 
            cms.PSet(
                binLowEdges = cms.vdouble(0.52, 0.86, 1.87),
                nPUVtx = cms.int32(3)
            ), 
            cms.PSet(
                binLowEdges = cms.vdouble(0.52, 0.86, 1.87),
                nPUVtx = cms.int32(4)
            )),
        defaultBinning = cms.vdouble(0.52, 0.86, 1.87),
        plugin = cms.string('RecoTauDiscriminationBinnedTrackIsolation')
    )
)

process.fieldScaling = cms.PSet(
    scalingVolumes = cms.vint32(14100, 14200, 17600, 17800, 17900, 
        18100, 18300, 18400, 18600, 23100, 
        23300, 23400, 23600, 23800, 23900, 
        24100, 28600, 28800, 28900, 29100, 
        29300, 29400, 29600, 28609, 28809, 
        28909, 29109, 29309, 29409, 29609, 
        28610, 28810, 28910, 29110, 29310, 
        29410, 29610, 28611, 28811, 28911, 
        29111, 29311, 29411, 29611),
    scalingFactors = cms.vdouble(1, 1, 0.994, 1.004, 1.004, 
        1.005, 1.004, 1.004, 0.994, 0.965, 
        0.958, 0.958, 0.953, 0.958, 0.958, 
        0.965, 0.918, 0.924, 0.924, 0.906, 
        0.924, 0.924, 0.918, 0.991, 0.998, 
        0.998, 0.978, 0.998, 0.998, 0.991, 
        0.991, 0.998, 0.998, 0.978, 0.998, 
        0.998, 0.991, 0.991, 0.998, 0.998, 
        0.978, 0.998, 0.998, 0.991)
)

process.ghostTrackCommon = cms.PSet(
    trackSelection = cms.PSet(
        totalHitsMin = cms.uint32(0),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.07),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(5),
        ptMin = cms.double(0.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    charmCut = cms.double(1.5),
    trackSort = cms.string('sip2dSig'),
    minimumTrackWeight = cms.double(0.5)
)

process.ghostTrackVertexRecoBlock = cms.PSet(
    vertexReco = cms.PSet(
        primcut = cms.double(2.0),
        seccut = cms.double(4.0),
        maxFitChi2 = cms.double(10.0),
        fitType = cms.string('RefitGhostTrackWithVertices'),
        mergeThreshold = cms.double(3.0),
        finder = cms.string('gtvr')
    )
)

process.hpsTancRequireDecayMode = cms.PSet(
    BooleanOperator = cms.string('and'),
    decayMode = cms.PSet(
        cut = cms.double(0.5),
        Producer = cms.InputTag("hpsTancTausDiscriminationByDecayModeSelection")
    )
)

process.j2tParametersVX = cms.PSet(
    tracks = cms.InputTag("generalTracks"),
    useAssigned = cms.bool(False),
    coneSize = cms.double(0.5),
    pvSrc = cms.InputTag("offlinePrimaryVertices")
)

process.leadTrackFinding = cms.PSet(
    cut = cms.double(0.5),
    Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding")
)

process.maxEvents = cms.untracked.PSet(
    input = cms.untracked.int32(100)
)

process.noPrediscriminants = cms.PSet(
    BooleanOperator = cms.string('and')
)

process.options = cms.untracked.PSet(
    wantSummary = cms.untracked.bool(True)
)

process.requireDecayMode = cms.PSet(
    BooleanOperator = cms.string('and'),
    decayMode = cms.PSet(
        cut = cms.double(0.5),
        Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
    )
)

process.requireLeadPion = cms.PSet(
    BooleanOperator = cms.string('and'),
    leadPion = cms.PSet(
        cut = cms.double(0.5),
        Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding")
    )
)

process.requireLeadTrack = cms.PSet(
    BooleanOperator = cms.string('and'),
    leadTrack = cms.PSet(
        cut = cms.double(0.5),
        Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding")
    )
)

process.requireLeadTrackCalo = cms.PSet(
    BooleanOperator = cms.string('and'),
    leadTrack = cms.PSet(
        cut = cms.double(0.5),
        Producer = cms.InputTag("caloRecoTauDiscriminationByLeadingTrackFinding")
    )
)

process.shrinkingConeLeadTrackFinding = cms.PSet(
    BooleanOperator = cms.string('and'),
    leadTrack = cms.PSet(
        cut = cms.double(0.5),
        Producer = cms.InputTag("shrinkingConePFTauDiscriminationByLeadingTrackFinding")
    )
)

process.standardDecayModeParams = cms.PSet(
    mergeByBestMatch = cms.bool(True),
    refitTracks = cms.bool(False),
    maxNbrOfIterations = cms.int32(10),
    mergeLowPtPhotonsFirst = cms.bool(True),
    setMergedPi0Mass = cms.bool(True),
    setChargedPionMass = cms.bool(True),
    filterPhotons = cms.bool(True),
    minPtFractionPiZeroes = cms.double(0.15),
    maxPhotonsToMerge = cms.uint32(2),
    filterTwoProngs = cms.bool(True),
    maxPiZeroMass = cms.double(0.2),
    minPtFractionForSecondProng = cms.double(0.1),
    maxDistance = cms.double(0.01),
    setPi0Mass = cms.bool(True),
    minPtFractionSinglePhotons = cms.double(0.1)
)

process.tautagInfoModifer = cms.PSet(
    pfTauTagInfoSrc = cms.InputTag("pfRecoTauTagInfoProducer"),
    name = cms.string('TTIworkaround'),
    plugin = cms.string('RecoTauTagInfoWorkaroundModifer')
)

process.trackPseudoSelectionBlock = cms.PSet(
    trackPseudoSelection = cms.PSet(
        totalHitsMin = cms.uint32(0),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.07),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(5),
        ptMin = cms.double(0.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(2.0),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    )
)

process.trackSelectionBlock = cms.PSet(
    trackSelection = cms.PSet(
        totalHitsMin = cms.uint32(0),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.07),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(5),
        ptMin = cms.double(0.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    )
)

process.vertexCutsBlock = cms.PSet(
    vertexCuts = cms.PSet(
        distSig3dMax = cms.double(99999.9),
        fracPV = cms.double(0.65),
        distVal2dMax = cms.double(2.5),
        useTrackWeights = cms.bool(True),
        maxDeltaRToJetAxis = cms.double(0.5),
        v0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        ),
        distSig2dMin = cms.double(3.0),
        multiplicityMin = cms.uint32(2),
        massMax = cms.double(6.5),
        distSig2dMax = cms.double(99999.9),
        distVal3dMax = cms.double(99999.9),
        minimumTrackWeight = cms.double(0.5),
        distVal3dMin = cms.double(-99999.9),
        distVal2dMin = cms.double(0.01),
        distSig3dMin = cms.double(-99999.9)
    )
)

process.vertexRecoBlock = cms.PSet(
    vertexReco = cms.PSet(
        seccut = cms.double(6.0),
        primcut = cms.double(1.8),
        smoothing = cms.bool(False),
        weightthreshold = cms.double(0.001),
        minweight = cms.double(0.5),
        finder = cms.string('avr')
    )
)

process.vertexSelectionBlock = cms.PSet(
    vertexSelection = cms.PSet(
        sortCriterium = cms.string('dist3dError')
    )
)

process.vertexTrackSelectionBlock = cms.PSet(
    trackSelection = cms.PSet(
        totalHitsMin = cms.uint32(8),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(2),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.2),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(99999.9),
        ptMin = cms.double(1.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    )
)

process.MultiNetIso = cms.VPSet(cms.PSet(
    applyIsolation = cms.bool(True),
    cut = cms.double(-10.0),
    computerName = cms.string('OneProngNoPiZeroIso'),
    decayModeIndices = cms.vint32(0)
), 
    cms.PSet(
        applyIsolation = cms.bool(True),
        cut = cms.double(-10.0),
        computerName = cms.string('OneProngOnePiZeroIso'),
        decayModeIndices = cms.vint32(1)
    ), 
    cms.PSet(
        applyIsolation = cms.bool(True),
        cut = cms.double(-10.0),
        computerName = cms.string('OneProngTwoPiZeroIso'),
        decayModeIndices = cms.vint32(2)
    ), 
    cms.PSet(
        applyIsolation = cms.bool(True),
        cut = cms.double(-10.0),
        computerName = cms.string('ThreeProngNoPiZeroIso'),
        decayModeIndices = cms.vint32(10)
    ), 
    cms.PSet(
        applyIsolation = cms.bool(True),
        cut = cms.double(-10.0),
        computerName = cms.string('ThreeProngOnePiZeroIso'),
        decayModeIndices = cms.vint32(11)
    ))

process.SingleNetBasedTauID = cms.VPSet(cms.PSet(
    applyIsolation = cms.bool(False),
    cut = cms.double(-10.0),
    computerName = cms.string('SingleNet'),
    decayModeIndices = cms.vint32(0, 1, 2, 10, 11)
))

process.TaNC = cms.VPSet(cms.PSet(
    applyIsolation = cms.bool(False),
    cut = cms.double(-10.0),
    computerName = cms.string('OneProngNoPiZero'),
    decayModeIndices = cms.vint32(0)
), 
    cms.PSet(
        applyIsolation = cms.bool(False),
        cut = cms.double(-10.0),
        computerName = cms.string('OneProngOnePiZero'),
        decayModeIndices = cms.vint32(1)
    ), 
    cms.PSet(
        applyIsolation = cms.bool(False),
        cut = cms.double(-10.0),
        computerName = cms.string('OneProngTwoPiZero'),
        decayModeIndices = cms.vint32(2)
    ), 
    cms.PSet(
        applyIsolation = cms.bool(False),
        cut = cms.double(-10.0),
        computerName = cms.string('ThreeProngNoPiZero'),
        decayModeIndices = cms.vint32(10)
    ), 
    cms.PSet(
        applyIsolation = cms.bool(False),
        cut = cms.double(-10.0),
        computerName = cms.string('ThreeProngOnePiZero'),
        decayModeIndices = cms.vint32(11)
    ))

process.transforms = cms.VPSet(cms.PSet(
    nPiZeros = cms.uint32(0),
    transform = cms.PSet(
        max = cms.double(1.99833333333),
        transform = cms.vdouble( (0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243693947972, 0.2446621342, 
            0.25648929965, 0.2608766459, 0.265139843949, 0.268288096025, 0.271490633611, 
            0.274812027295, 0.278726505561, 0.283196361675, 0.287921047203, 0.293485065795, 
            0.299327353484, 0.305468394708, 0.310410038477, 0.315654364298, 0.320865024837, 
            0.324875648584, 0.328691660974, 0.332598633349, 0.336484807993, 0.339893814351, 
            0.343528868912, 0.346311138119, 0.348525259682, 0.350638868762, 0.352500481165, 
            0.354385202603, 0.356405103778, 0.358448162743, 0.359626155068, 0.361359527277, 
            0.362911630832, 0.364767207965, 0.365568276809, 0.367161876825, 0.368245783665, 
            0.369700987138, 0.370891835827, 0.371335926598, 0.372724067775, 0.374122626292, 
            0.374872824273, 0.376287585272, 0.377808481377, 0.379437962659, 0.380385427158, 
            0.381454465894, 0.382529530437, 0.383308773065, 0.383900643462, 0.384488881534, 
            0.385284008411, 0.385778244795, 0.386880706208, 0.387787417873, 0.389206336729, 
            0.390430843456, 0.391560096158, 0.392490239284, 0.393218300975, 0.394889524946, 
            0.396474094424, 0.397328157396, 0.398823062781, 0.400437280424, 0.401846875958, 
            0.402719262685, 0.403705236447, 0.40437725886, 0.405483096559, 0.40715324019, 
            0.408161946716, 0.408949958358, 0.410194428622, 0.411674966358, 0.412726139917, 
            0.413994836217, 0.414922434459, 0.415970963664, 0.417494895799, 0.418345516985, 
            0.419769194149, 0.42120259427, 0.423008169722, 0.424220511323, 0.425684525769, 
            0.426912279039, 0.428023327968, 0.429389155258, 0.430889124801, 0.432147128025, 
            0.433793555744, 0.435196517338, 0.436351162787, 0.437253465009, 0.438419065687, 
            0.439590897333, 0.440949213705, 0.441921470289, 0.442848592497, 0.44396524306, 
            0.445223842049, 0.446977728682, 0.448745488265, 0.451078381688, 0.451907557714, 
            0.452739787751, 0.453638395261, 0.45475822595, 0.456165813144, 0.457223834211, 
            0.457934807034, 0.45922014571, 0.461017229233, 0.461451032994, 0.463048655665, 
            0.464804181316, 0.466425147476, 0.467542494191, 0.468517661795, 0.470468799941, 
            0.47198076935, 0.472892624736, 0.474420238705, 0.476266453893, 0.477505267649, 
            0.479532143347, 0.481200116592, 0.481613637289, 0.483360304775, 0.485061449421, 
            0.487101659613, 0.488019909526, 0.488999144832, 0.490200759674, 0.491190516798, 
            0.493849514855, 0.495306102206, 0.495928489713, 0.4964353883, 0.498082556741, 
            0.49979254034, 0.500775976586, 0.502679733683, 0.504598020717, 0.505078487853, 
            0.506619141507, 0.508171974823, 0.509336469886, 0.510953930915, 0.512581697566, 
            0.513998315702, 0.515647034962, 0.515939613111, 0.517975069449, 0.519430445753, 
            0.519957296262, 0.521273324958, 0.522406663349, 0.523925469498, 0.524625850033, 
            0.525907581275, 0.527065315655, 0.52822815856, 0.528783474767, 0.529145626115, 
            0.529453767868, 0.530435650231, 0.532014259582, 0.532782125184, 0.534528955521, 
            0.535733634238, 0.539584530704, 0.541410067901, 0.543682312792, 0.545138243861, 
            0.546811742597, 0.548048893429, 0.548459504636, 0.550158093752, 0.551205716597, 
            0.552261157841, 0.553773021814, 0.554620522074, 0.557022425024, 0.558787346691, 
            0.55989408991, 0.562351160997, 0.564603650808, 0.567330572538, 0.568251047692, 
            0.570322191691, 0.570800554836, 0.573840553165, 0.575722428922, 0.578806943369, 
            0.580018988744, 0.581943439091, 0.583637839285, 0.583719886077, 0.585230062162, 
            0.586459819001, 0.58819018682, 0.589432428675, 0.590707557501, 0.59199058109, 
            0.593311935901, 0.596143502405, 0.598713047084, 0.59985869618, 0.60146038335, 
            0.603073645068, 0.60364159568, 0.605493798425, 0.607716165748, 0.611539567166, 
            0.61344596304, 0.614868728468, 0.616356298487, 0.617243661796, 0.618356139972, 
            0.620433033442, 0.623603658141, 0.625027738979, 0.626745245057, 0.630061473707, 
            0.634451273629, 0.636224368987, 0.638386932974, 0.639666729708, 0.641472541416, 
            0.643376129813, 0.645998175052, 0.648651724655, 0.650614385321, 0.651964427491, 
            0.654372246094, 0.656912558238, 0.657658356547, 0.658734274882, 0.661006291486, 
            0.663094362812, 0.664860224717, 0.667639986138, 0.669224738703, 0.670609710516, 
            0.672008536945, 0.674322956904, 0.676181757848, 0.680504320591, 0.681701882298, 
            0.683847428048, 0.687028204213, 0.690096183579, 0.692936565842, 0.698333032093, 
            0.702469873766, 0.704533440299, 0.706621657637, 0.710308262591, 0.713270705866, 
            0.714865826284, 0.719086552707, 0.722147885763, 0.725885046087, 0.729450681758, 
            0.732859861331, 0.739185288999, 0.743172463789, 0.74657896386, 0.751327840506, 
            0.754658774214, 0.758047388164, 0.762059448212, 0.769914558551, 0.775838239214, 
            0.780728907111, 0.786952215918, 0.793694146175, 0.796885300439, 0.802863959078, 
            0.813001141474, 0.820597251397, 0.829350775725, 0.837460143471, 0.84199323298, 
            0.847433416989, 0.854638027367, 0.860714284529, 0.869959964541, 0.876007819869, 
            0.884455823419, 0.896538436371, 0.904016005807, 0.910382232961, 0.916770946986, 
            0.93386870405, 0.943467586229, 0.95165443966, 0.971789456433, 0.970755563959, 
            0.9679163435, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0 ) ),
        min = cms.double(-0.998333333333)
    ),
    nCharged = cms.uint32(3)
), 
    cms.PSet(
        nPiZeros = cms.uint32(1),
        transform = cms.PSet(
            max = cms.double(1.99833333333),
            transform = cms.vdouble( (0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725625489751, 0.725917318629, 0.727526582607, 
                0.745748231906, 0.750169168536, 0.757185219071, 0.764249672036, 0.767603981959, 
                0.772574492642, 0.775097031572, 0.777704615235, 0.779407980465, 0.781767581973, 
                0.784842584326, 0.786420654919, 0.787883166617, 0.790123535551, 0.79208138528, 
                0.79327247227, 0.795907708578, 0.798503646112, 0.800206834461, 0.802663946447, 
                0.8031582666, 0.80490222571, 0.806889568691, 0.809394028316, 0.811861583702, 
                0.813019057268, 0.81342095915, 0.814698723372, 0.816279445985, 0.818232037783, 
                0.819367026875, 0.819759858707, 0.821328989638, 0.822878675172, 0.82364763472, 
                0.825358996088, 0.828499118125, 0.829830087025, 0.831236000117, 0.832703495507, 
                0.833414247004, 0.834436344112, 0.834946785624, 0.835869791486, 0.836486520822, 
                0.837364626557, 0.838193318858, 0.839702591039, 0.841531457051, 0.842218371935, 
                0.843640339114, 0.844222988069, 0.845392038566, 0.846778761898, 0.84769605779, 
                0.848073950379, 0.848849957765, 0.849494110293, 0.8500905241, 0.851335675181, 
                0.853500950651, 0.853839833615, 0.854227213103, 0.854567621296, 0.854984559013, 
                0.855203285083, 0.856470785047, 0.857475859603, 0.85892685241, 0.859008202829, 
                0.859451257957, 0.860468389831, 0.861489507276, 0.861351261404, 0.861705874851, 
                0.861659795003, 0.861659795003, 0.86179137032, 0.862147375366, 0.862550177315, 
                0.863312092458, 0.863805642705, 0.864438066642, 0.864754370118, 0.865480701328, 
                0.866346092335, 0.867168965701, 0.867397571488, 0.868313201223, 0.868771741382, 
                0.869186401202, 0.86983185136, 0.869929474522, 0.870346507695, 0.870951429469, 
                0.870863388987, 0.871514279263, 0.872166654676, 0.872355339191, 0.872776974093, 
                0.873155878735, 0.873579101025, 0.874003066865, 0.873916467734, 0.874211597253, 
                0.874402872188, 0.87510742975, 0.87525648792, 0.87525648792, 0.875448860228, 
                0.875598481234, 0.875512416378, 0.87617785231, 0.87617785231, 0.876371452215, 
                0.877233539228, 0.877818409805, 0.87840545558, 0.87840545558, 0.878601622981, 
                0.878601622981, 0.879472984901, 0.879712328244, 0.87982581203, 0.879981638026, 
                0.880179766123, 0.880378141371, 0.880534852587, 0.880691869776, 0.8811323429, 
                0.881090533252, 0.881531917098, 0.881732079801, 0.8822162463, 0.882902187113, 
                0.882979722574, 0.88403281278, 0.885010261835, 0.884928594333, 0.885132644083, 
                0.885050953876, 0.88525535544, 0.886362380543, 0.886487219509, 0.886652934413, 
                0.887232935079, 0.887728512003, 0.888561331939, 0.889019284728, 0.889438266521, 
                0.890358658388, 0.890120720891, 0.890292192785, 0.890675834925, 0.890556765164, 
                0.890981544778, 0.891699669632, 0.891660238395, 0.891969519877, 0.892319678993, 
                0.892161931402, 0.892513711208, 0.892729546909, 0.893162065429, 0.893339503795, 
                0.893339503795, 0.893656248099, 0.894427465173, 0.894606969217, 0.894825762437, 
                0.894928163898, 0.895703822513, 0.89622167567, 0.896663385868, 0.897404545302, 
                0.89769650475, 0.899189293203, 0.899525558799, 0.900803884235, 0.901822547362, 
                0.901939302648, 0.902926505697, 0.903082359676, 0.904038745128, 0.90469561985, 
                0.904927332682, 0.905283513893, 0.906828000044, 0.907062493553, 0.908109372415, 
                0.908783021349, 0.90898498498, 0.910379224289, 0.911372920866, 0.911751863015, 
                0.912477297669, 0.913239550237, 0.91300238707, 0.913422855139, 0.915063352192, 
                0.916893920936, 0.916979020829, 0.91791358353, 0.918350995783, 0.918790342789, 
                0.919328152961, 0.919993298628, 0.920982245955, 0.922524618114, 0.923591109364, 
                0.924018850534, 0.924248923821, 0.924479515826, 0.925498182241, 0.926493584801, 
                0.927436921962, 0.927911825271, 0.928716526512, 0.929225746944, 0.929920622352, 
                0.931640820211, 0.931772433588, 0.932293506679, 0.932760264784, 0.93386870405, 
                0.934480569506, 0.934731886916, 0.935797384751, 0.936588472051, 0.936817507478, 
                0.937277790773, 0.938339506605, 0.938808219887, 0.93993649209, 0.94020045716, 
                0.940781492864, 0.941047196853, 0.942510417566, 0.942629939, 0.942750378489, 
                0.943616386541, 0.944163684906, 0.945338814696, 0.945845741457, 0.946028661789, 
                0.946308362468, 0.946541150838, 0.946751152357, 0.947576555912, 0.948029352938, 
                0.94826905955, 0.948081416726, 0.949376743021, 0.94926144862, 0.949775296374, 
                0.949706301122, 0.951268968863, 0.953037066674, 0.95357532021, 0.953770570793, 
                0.953640586734, 0.953509869657, 0.954300159882, 0.955476996866, 0.956207587781, 
                0.956355833165, 0.956846568485, 0.957770053042, 0.958723171834, 0.958928454571, 
                0.959445187694, 0.959807967592, 0.959442259047, 0.960697132989, 0.961203278228, 
                0.963193467582, 0.963932365293, 0.964461162833, 0.964482886627, 0.96526433234, 
                0.966030150632, 0.966856588211, 0.969491617691, 0.970743493871, 0.972389419268, 
                0.973307337131, 0.975623617612, 0.976087161844, 0.975647899082, 0.976736074007, 
                0.979440008803, 0.981271208497, 0.982207028661, 0.984863078211, 0.986956530647, 
                0.990258251858, 0.990208776979, 0.990702226892, 0.993228159625, 0.99534336087, 
                0.996696237239, 0.995185049087, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0 ) ),
            min = cms.double(-0.998333333333)
        ),
        nCharged = cms.uint32(1)
    ), 
    cms.PSet(
        nPiZeros = cms.uint32(0),
        transform = cms.PSet(
            max = cms.double(1.99833333333),
            transform = cms.vdouble( (0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.786753288885, 0.788132324416, 0.79656141615, 0.810183644995, 
                0.858360829913, 0.862298212616, 0.867110980413, 0.871372861265, 0.875682014578, 
                0.880242297589, 0.883696978098, 0.885512278829, 0.887768921813, 0.889264020585, 
                0.89119925019, 0.892452552697, 0.893185095837, 0.893419577074, 0.894898998675, 
                0.895774783109, 0.896260903725, 0.896505707407, 0.898082672851, 0.898779137453, 
                0.89979939771, 0.900120276805, 0.900442301311, 0.900314253861, 0.90063761708, 
                0.903107169678, 0.903707364412, 0.904624297652, 0.90437518453, 0.904187494019, 
                0.904648539996, 0.905849328721, 0.90625146477, 0.906593041173, 0.906284313013, 
                0.906627709554, 0.906627709554, 0.907095652088, 0.906972372385, 0.907318308525, 
                0.907603995571, 0.907357055463, 0.907233089763, 0.907994846936, 0.908883949265, 
                0.908883949265, 0.909836831321, 0.909836831321, 0.909776114594, 0.911030037809, 
                0.911509901723, 0.911871023987, 0.911811279009, 0.911751452972, 0.911691545709, 
                0.911511334909, 0.911451101085, 0.912784331406, 0.9125455069, 0.9125455069, 
                0.91297278083, 0.912853317543, 0.912673506387, 0.913592984461, 0.915007651179, 
                0.915441697726, 0.915324604996, 0.915207187526, 0.915148356591, 0.91552593882, 
                0.915467174967, 0.9154083293, 0.915290391839, 0.915231299701, 0.915728896806, 
                0.915728896806, 0.915552071941, 0.916492320764, 0.917377950283, 0.917822427143, 
                0.918268017622, 0.91871472591, 0.919668295227, 0.919611512782, 0.919554650007, 
                0.919440682785, 0.919269125195, 0.921306876156, 0.921306876156, 0.921082297245, 
                0.920969526416, 0.921426208902, 0.921939970027, 0.921939970027, 0.922343069964, 
                0.923319759486, 0.923727168952, 0.923727168952, 0.92460140151, 0.924492316338, 
                0.924959238052, 0.926474177051, 0.926474177051, 0.926420752856, 0.926313671218, 
                0.926785714713, 0.926785714713, 0.926785714713, 0.926732331515, 0.926732331515, 
                0.926571713811, 0.927521701059, 0.927468561656, 0.927998554333, 0.927945695605, 
                0.929008220067, 0.928746371941, 0.928693770351, 0.928641091039, 0.929607013105, 
                0.929554832769, 0.930039996532, 0.93101417799, 0.931554211882, 0.932636161324, 
                0.932585903271, 0.932585903271, 0.93357188521, 0.933522156167, 0.933967924145, 
                0.933769185329, 0.934766776762, 0.935267583538, 0.935169629185, 0.935672412756, 
                0.936176553451, 0.936176553451, 0.93779194569, 0.937554472402, 0.937458974653, 
                0.937411116161, 0.937970225775, 0.938435668089, 0.938341043455, 0.938341043455, 
                0.938903099624, 0.93885608225, 0.938808992455, 0.938714594933, 0.939278948765, 
                0.940409694612, 0.940363611919, 0.940363611919, 0.940884673949, 0.940838860114, 
                0.940700991551, 0.941179107659, 0.941750185868, 0.941750185868, 0.942276966885, 
                0.943290568826, 0.943822114749, 0.944267645451, 0.944223792272, 0.944223792272, 
                0.944223792272, 0.944223792272, 0.944135878551, 0.944091817682, 0.943959217069, 
                0.944948988041, 0.944817531021, 0.945185418124, 0.945774534438, 0.946869842865, 
                0.94678443912, 0.947292782482, 0.947803406812, 0.948955745704, 0.949513262437, 
                0.949431324505, 0.949349120177, 0.949787213059, 0.950350748429, 0.951522477849, 
                0.952051228023, 0.95197239226, 0.951813940452, 0.951734321829, 0.952189098377, 
                0.952726227521, 0.952647494583, 0.953226869405, 0.953148724357, 0.95303101596, 
                0.953497250008, 0.954122169792, 0.954006075021, 0.954594998037, 0.955778170341, 
                0.955740668477, 0.957457733339, 0.958697023242, 0.958590781777, 0.958519649968, 
                0.959665182275, 0.960242079268, 0.960242079268, 0.960855701368, 0.960787753107, 
                0.961370655681, 0.961269567079, 0.961823203605, 0.963730727425, 0.963634885553, 
                0.963570709071, 0.964138473298, 0.964106695414, 0.96404297039, 0.963914839098, 
                0.963882663464, 0.96452094996, 0.964361812095, 0.96497328025, 0.965587812399, 
                0.966174859102, 0.966052013818, 0.966021162949, 0.968018795469, 0.96867865254, 
                0.968592547647, 0.96914294659, 0.969057430126, 0.969000155331, 0.970289180287, 
                0.971618144708, 0.971511684075, 0.972907637123, 0.972856607143, 0.972753968298, 
                0.972676478315, 0.973344727784, 0.973217439385, 0.973917083716, 0.973842007934, 
                0.973791716846, 0.974496912029, 0.974447701286, 0.974373528048, 0.974273957942, 
                0.974198771106, 0.974791150217, 0.975488253999, 0.976165676348, 0.977513433798, 
                0.977332925695, 0.978053351441, 0.978734902423, 0.97864854949, 0.979275680612, 
                0.979190505138, 0.979039751165, 0.978974471583, 0.978886796984, 0.980438334358, 
                0.981887328142, 0.982567303114, 0.983312443593, 0.983168209088, 0.983021459539, 
                0.98366063828, 0.983606342672, 0.983441268961, 0.983291720735, 0.985747459607, 
                0.985615866821, 0.988157949486, 0.988031989052, 0.987786602856, 0.988507380959, 
                0.988364321833, 0.988127868612, 0.987928555371, 0.987641272072, 0.987408197679, 
                0.98704162283, 0.986691071046, 0.986360943929, 0.987048151948, 0.989952686544, 
                0.991766844123, 0.992193166195, 0.99456966538, 0.995655052048, 0.994746673755, 
                0.993062299865, 0.995491593707, 0.993997811711, 0.991951166261, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0 ) ),
            min = cms.double(-0.998333333333)
        ),
        nCharged = cms.uint32(1)
    ), 
    cms.PSet(
        nPiZeros = cms.uint32(2),
        transform = cms.PSet(
            max = cms.double(1.99833333333),
            transform = cms.vdouble( (0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320785409267, 0.320785409267, 0.320785409267, 
                0.320967688479, 0.32115017496, 0.32115017496, 0.32115017496, 0.32115017496, 
                0.321332869066, 0.321607300294, 0.321790515012, 0.322065728828, 0.322709728783, 
                0.337811096719, 0.33917314626, 0.341489359417, 0.343051156809, 0.344690580804, 
                0.34605531485, 0.347729452006, 0.349352972192, 0.351698761571, 0.354076266303, 
                0.356364861761, 0.357459291064, 0.358806090169, 0.360659074159, 0.361655179522, 
                0.363285639001, 0.363823848893, 0.365224296488, 0.366635567078, 0.368317558281, 
                0.36949108301, 0.370409007364, 0.370997606343, 0.372726361337, 0.373488515297, 
                0.374412657806, 0.375752608537, 0.377534910678, 0.378625338634, 0.379181030815, 
                0.379877944035, 0.382266731549, 0.382549741971, 0.383828491978, 0.38525242259, 
                0.386835650852, 0.38785063627, 0.389317222671, 0.390498501728, 0.392134514369, 
                0.392433445129, 0.393938724972, 0.395003106909, 0.395165758646, 0.395929379967, 
                0.396695958257, 0.397011143016, 0.398247378442, 0.399356983741, 0.399994683207, 
                0.401254354869, 0.40236309389, 0.403477977186, 0.404278112546, 0.405403648355, 
                0.406718341929, 0.408044942586, 0.409053791836, 0.409879342767, 0.410568240656, 
                0.411067477386, 0.412572498902, 0.413612340683, 0.414628216181, 0.41718987191, 
                0.417878334739, 0.41856907358, 0.419300644011, 0.420520753157, 0.420777117228, 
                0.422716149289, 0.423248081689, 0.424315972822, 0.425568676714, 0.426697968924, 
                0.427784748237, 0.428512348538, 0.429242428143, 0.430526071506, 0.4311350135, 
                0.432803583714, 0.433609675616, 0.434608917639, 0.436308891919, 0.436878509184, 
                0.437640316502, 0.438596319943, 0.440520911858, 0.441683795845, 0.443048277506, 
                0.444696219849, 0.446478472767, 0.44715804854, 0.448645092811, 0.450058431683, 
                0.450666877959, 0.450755388115, 0.451660727674, 0.452685605028, 0.453508861839, 
                0.455164391331, 0.456611329026, 0.456920461171, 0.457863702358, 0.45902581005, 
                0.459451411686, 0.460410936031, 0.461808077134, 0.4630001435, 0.46452516501, 
                0.465632370863, 0.466972634942, 0.467639712811, 0.468206417853, 0.469000443277, 
                0.470125946746, 0.471938031657, 0.473437184975, 0.474815974144, 0.475643583896, 
                0.477037107394, 0.478345116523, 0.479756398109, 0.482127131145, 0.483321305722, 
                0.484827612962, 0.485378450947, 0.486839313932, 0.488800865348, 0.488631796262, 
                0.489784626283, 0.49019813266, 0.490696455307, 0.492699918902, 0.493707798202, 
                0.495481544763, 0.497780890453, 0.499067549901, 0.499842743245, 0.501067711008, 
                0.501110885208, 0.503739653301, 0.504533670387, 0.507669169039, 0.508207246665, 
                0.510099534144, 0.511125093239, 0.513041788431, 0.514972912765, 0.517927881794, 
                0.519848789077, 0.52116702462, 0.522598588906, 0.524038039421, 0.524905522273, 
                0.525729939569, 0.527349110611, 0.528189103375, 0.529884063982, 0.531038635091, 
                0.531258876588, 0.533372518417, 0.532652261497, 0.533222445036, 0.533832435241, 
                0.534714171593, 0.536561182549, 0.536184284139, 0.538295230995, 0.539204274194, 
                0.539743792118, 0.542257448251, 0.543191981222, 0.54415669717, 0.545124845911, 
                0.546421082543, 0.548704392123, 0.551006864138, 0.551639517385, 0.554308295208, 
                0.554286639155, 0.555277851271, 0.557294734318, 0.558661984326, 0.560735788966, 
                0.561777981725, 0.56352691872, 0.56493793563, 0.567793486879, 0.568888208725, 
                0.57034433091, 0.570356276084, 0.572191934216, 0.573659294894, 0.574044772549, 
                0.575543527534, 0.577054482298, 0.578553389267, 0.580816407199, 0.582777514902, 
                0.58546601664, 0.587013469943, 0.586699955875, 0.587164603914, 0.589909772096, 
                0.590347109603, 0.591182964289, 0.593622213241, 0.595632610766, 0.596088895792, 
                0.596547219627, 0.597007595967, 0.59905000376, 0.59875479532, 0.600402032492, 
                0.601476624751, 0.602375325225, 0.604611692334, 0.606308877758, 0.609454442616, 
                0.612487831768, 0.615198564485, 0.616345932738, 0.617679752716, 0.620364786891, 
                0.621560433387, 0.622923085077, 0.622771613804, 0.627021967049, 0.629464905691, 
                0.630636176618, 0.632414811477, 0.635412621765, 0.636860801036, 0.638359784998, 
                0.642296739762, 0.64372019874, 0.646732193739, 0.649419880322, 0.653004922396, 
                0.654536589972, 0.657493324695, 0.65872664624, 0.662116021475, 0.666837437051, 
                0.668332370106, 0.670194812833, 0.671514734427, 0.671514734427, 0.672844093862, 
                0.672352092845, 0.678607302272, 0.681605563269, 0.681020472505, 0.682082800049, 
                0.684848783291, 0.686959317553, 0.690918830645, 0.691984674993, 0.694695530605, 
                0.697455651971, 0.700496795416, 0.703736816672, 0.704917801757, 0.706220722464, 
                0.707858889942, 0.71018130526, 0.714321429016, 0.720425948473, 0.724503155871, 
                0.727977004139, 0.730714468803, 0.735012362904, 0.739735756402, 0.750660954162, 
                0.757799352464, 0.760515374245, 0.768004247792, 0.77935327172, 0.784646260495, 
                0.789164336822, 0.791123170072, 0.795276817521, 0.804299018936, 0.819103217408, 
                0.822961151625, 0.833298258018, 0.842807182616, 0.85334688934, 0.86724344838, 
                0.872176831791, 0.87195156781, 0.87843961359, 0.891494313173, 0.912879175226, 
                0.924218217451, 0.937234161591, 0.94206607914, 0.958884557005, 0.959595443343, 
                0.93904371889, 0.927733482302, 0.93386870405, 0.916051159827, 0.943467586229, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0 ) ),
            min = cms.double(-0.998333333333)
        ),
        nCharged = cms.uint32(1)
    ))

