#include "FWCore/Utilities/interface/Exception.h"
#include "SimGeneral/NoiseGenerators/interface/CorrelatedNoisifier.h"

#include "CLHEP/Random/RandGaussQ.h"

template <class M>
const double CorrelatedNoisifier<M>::k_precision(1.e-7);

template <class M>
CorrelatedNoisifier<M>::~CorrelatedNoisifier() {}

template <class M>
CorrelatedNoisifier<M>::CorrelatedNoisifier(const M &symCorMat) : m_H(ROOT::Math::SMatrixIdentity()) {
  init(symCorMat);
}

template <class M>
CorrelatedNoisifier<M>::CorrelatedNoisifier(int *dummy, const M &cholDecMat) : m_H(cholDecMat) {
  initChol();
}

template <class M>
void CorrelatedNoisifier<M>::initChol() {
  M symCorMat;
  for (unsigned int i = 0; i < m_H.kRows; ++i) {
    for (unsigned int j = 0; j < m_H.kRows; ++j) {
      double sum(0);
      for (unsigned int k(0); k != m_H.kRows; ++k) {
        const double hik(k > i ? 0 : m_H(i, k));
        const double htkj(k > j ? 0 : m_H(k, j));
        sum += hik * htkj;
      }
      symCorMat(i, j) = sum;
    }
  }
  checkOffDiagonal(symCorMat);
}

template <class M>
void CorrelatedNoisifier<M>::resetCorrelationMatrix(const M &symCorMat) {
  m_H = ROOT::Math::SMatrixIdentity();
  init(symCorMat);
}

template <class M>
void CorrelatedNoisifier<M>::resetCholDecompMatrix(const M &cholDecMat) {
  m_H = cholDecMat;
  initChol();
}

template <class M>
void CorrelatedNoisifier<M>::init(const M &symCorMat) {
  checkOffDiagonal(symCorMat);

  const bool okDecomp(m_isIdentity || computeDecomposition(symCorMat));

  if (!okDecomp)
    throw cms::Exception("CorrelatedNoisifier") << "Bad covariance matrix. " << symCorMat;

  M HHtDiff;
  const bool check(checkDecomposition(symCorMat, HHtDiff));
  if (!check)
    throw cms::Exception("CorrelatedNoisifier") << "Decomposition failed, difference = " << HHtDiff;
}

template <class M>
void CorrelatedNoisifier<M>::checkOffDiagonal(const M &symCorMat) {
  m_isDiagonal = true;
  m_isIdentity = true;

  for (unsigned int i = 0; i < m_H.kRows; i++) {
    if (symCorMat(i, i) < 0.)
      throw cms::Exception("CorrelatedNoisifier") << "Bad correlation matrix.  Negative diagonal";
    if (m_isIdentity && fabs(symCorMat(i, i) - 1.) > k_precision)
      m_isIdentity = false;
    for (unsigned int j = 0; j < i; ++j) {
      if (fabs(symCorMat(i, j)) > k_precision) {
        m_isDiagonal = false;
        m_isIdentity = false;
        return;
      }
    }
  }
}

template <class M>
bool CorrelatedNoisifier<M>::computeDecomposition(const M &symCorMat) {
  const double s00 = std::sqrt(symCorMat(0, 0));

  for (unsigned int i = 0; i < m_H.kRows; ++i) {
    m_H(i, 0) = symCorMat(i, 0) / s00;
    if (0 < i) {
      if (!m_isDiagonal) {
        for (unsigned int j = 1; j < i; ++j) {
          double sum(symCorMat(i, j));
          for (unsigned int k = 0; k < j; ++k)
            sum -= m_H(i, k) * m_H(j, k);
          m_H(i, j) = sum / m_H(j, j);
        }
      }

      double hii = symCorMat(i, i);
      for (unsigned int j = 0; j < i; ++j) {
        const double hij(m_H(i, j));
        hii -= hij * hij;
      }

      if (hii <= k_precision)
        return false;  // protect sqrt in next line

      m_H(i, i) = sqrt(hii);
    }
  }
  return true;
}

template <class M>
bool CorrelatedNoisifier<M>::checkDecomposition(const M &symCorMat, M &HHtDiff) const {
  bool equal(true);
  for (unsigned int i = 0; i < m_H.kRows; ++i) {
    for (unsigned int j = 0; j < m_H.kRows; ++j) {
      double sum(0);
      for (unsigned int k(0); k != m_H.kRows; ++k) {
        const double hik(k > i ? 0 : m_H(i, k));
        const double htkj(k > j ? 0 : m_H(k, j));
        sum += hik * htkj;
      }
      const double diff(symCorMat(i, j) - sum);
      HHtDiff(i, j) = diff;
      equal = equal && (fabs(diff) < k_precision);
    }
  }
  return equal;
}

template <class M>
template <class T>
void CorrelatedNoisifier<M>::noisify(T &frame,
                                     CLHEP::HepRandomEngine *engine,
                                     const typename CorrelatedNoisifier<M>::VecDou *rangau) const {
  if ((unsigned int)frame.size() != (unsigned int)m_H.kRows)
    throw cms::Exception("Configuration") << "CorrelatedNoisifier::noisify(frame) was passed wrong size frame "
                                             "object";

  if (nullptr != rangau) {
    assert(m_H.kRows == rangau->size());
    m_vecgau = *rangau;
  } else {
    if (m_H.kRows != m_vecgau.size())
      m_vecgau = VecDou(m_H.kRows, (double)0.0);
    CLHEP::RandGaussQ::shootArray(engine, m_H.kRows, &m_vecgau.front());
  }

  for (unsigned int i(0); i < m_H.kRows; ++i) {
    frame[i] += (m_isIdentity ? m_vecgau[i] : m_H(i, i) * m_vecgau[i]);
    if (!m_isDiagonal) {
      for (unsigned int j = 0; j < i; ++j)
        frame[i] += m_H(j, i) * m_vecgau[j];
    }
  }
}

template <class M>
const M &CorrelatedNoisifier<M>::cholMat() const {
  return m_H;
}

template <class M>
const typename CorrelatedNoisifier<M>::VecDou &CorrelatedNoisifier<M>::vecgau() const {
  return m_vecgau;
}
