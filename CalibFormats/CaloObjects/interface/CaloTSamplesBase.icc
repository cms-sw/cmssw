#ifndef CALOTSAMPLESBASE_ICC
#define CALOTSAMPLESBASE_ICC 1

#include "CalibFormats/CaloObjects/interface/CaloTSamplesBase.h"

template <class Ttype>
CaloTSamplesBase<Ttype>::CaloTSamplesBase(Ttype *mydata, uint32_t length) : m_id(0), m_size(0), m_pre(0) {
  std::fill(mydata, mydata + length, 0);
}

template <class Ttype>
CaloTSamplesBase<Ttype>::CaloTSamplesBase(const CaloTSamplesBase<Ttype> &cs) {
  if (&cs != this) {
    m_id = cs.m_id;
    m_size = cs.m_size;
    m_pre = cs.m_pre;
  }
}

template <class Ttype>
CaloTSamplesBase<Ttype>::CaloTSamplesBase(Ttype *mydata, uint32_t length, const DetId &id, uint32_t size, uint32_t pre)
    : m_id(id), m_size(size), m_pre(pre) {
  assert(length >= size);
  assert(pre <= size);
  std::fill(mydata, mydata + length, 0);
}

template <class Ttype>
CaloTSamplesBase<Ttype>::~CaloTSamplesBase() {}

template <class Ttype>
void CaloTSamplesBase<Ttype>::setZero() {
  std::fill(data(0), data(0) + capacity(), 0);
}

template <class Ttype>
DetId CaloTSamplesBase<Ttype>::id() const {
  return m_id;
}

template <class Ttype>
uint32_t CaloTSamplesBase<Ttype>::size() const {
  return m_size;
}

template <class Ttype>
uint32_t CaloTSamplesBase<Ttype>::pre() const {
  return m_pre;
}

template <class Ttype>
bool CaloTSamplesBase<Ttype>::zero() const {
  for (uint32_t i(0); i != capacity(); ++i) {
    if (0 != (*cdata(i)))
      return false;
  }
  return true;
}

template <class Ttype>
Ttype &CaloTSamplesBase<Ttype>::operator[](uint32_t i) {
  assert(capacity() > i);
  return *data(i);
}

template <class Ttype>
const Ttype &CaloTSamplesBase<Ttype>::operator[](uint32_t i) const {
  assert(capacity() > i);
  return *cdata(i);
}

template <class Ttype>
CaloTSamplesBase<Ttype> &CaloTSamplesBase<Ttype>::operator=(const CaloTSamplesBase<Ttype> &cs) {
  if (&cs != this) {
    m_id = cs.m_id;
    m_size = cs.m_size;
    m_pre = cs.m_pre;
  }
  return *this;
}

template <class Ttype>
CaloTSamplesBase<Ttype> &CaloTSamplesBase<Ttype>::operator*=(Ttype value) {
  for (uint32_t i(0); i != m_size; ++i) {
    (*data(i)) *= value;
  }
  return *this;
}

template <class Ttype>
CaloTSamplesBase<Ttype> &CaloTSamplesBase<Ttype>::operator+=(Ttype value) {
  for (uint32_t i(0); i != m_size; ++i) {
    (*data(i)) += value;
  }
  return *this;
}

template <class Ttype>
CaloTSamplesBase<Ttype> &CaloTSamplesBase<Ttype>::operator+=(const CaloTSamplesBase<Ttype> &cs) {
  assert(m_size == cs.size());
  assert(capacity() == cs.capacity());

  for (uint32_t i(0); i != m_size; ++i) {
    (*data(i)) += (*cs.cdata(i));
  }
  return *this;
}

template <class Ttype>
std::ostream &operator<<(std::ostream &s, const CaloTSamplesBase<Ttype> &sam) {
  s << "DetId=" << sam.id().rawId();
  s << ", " << sam.size() << " samples.";
  for (uint32_t i(0); i != sam.size(); ++i) {
    s << "\n" << i << " : " << sam[i];
  }
  s << std::endl;
  return s;
}

#endif
