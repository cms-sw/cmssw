#include <cmath>
#include <cassert>

#include "RecoLocalCalo/HcalRecAlgos/interface/inverseGaussCDF.hh"

double inverseGaussCDF(const double P)
{
    assert(P > 0.0);
    assert(P < 1.0);

    // Translated from PPND16 algorithm of Wichura (originally in Fortran)
    static const double ZERO = 0., ONE = 1., HALF = 0.5, 
        SPLIT1 = 0.425, SPLIT2 = 5., 
        CONST1 = 0.180625, CONST2 = 1.6;

    static const double A0 = 3.3871328727963666080, 
        A1 = 1.3314166789178437745E+2, 
        A2 = 1.9715909503065514427E+3, 
        A3 = 1.3731693765509461125E+4, 
        A4 = 4.5921953931549871457E+4, 
        A5 = 6.7265770927008700853E+4, 
        A6 = 3.3430575583588128105E+4, 
        A7 = 2.5090809287301226727E+3, 
        B1 = 4.2313330701600911252E+1, 
        B2 = 6.8718700749205790830E+2, 
        B3 = 5.3941960214247511077E+3, 
        B4 = 2.1213794301586595867E+4, 
        B5 = 3.9307895800092710610E+4, 
        B6 = 2.8729085735721942674E+4, 
        B7 = 5.2264952788528545610E+3;

    static const double C0 = 1.42343711074968357734, 
        C1 = 4.63033784615654529590, 
        C2 = 5.76949722146069140550, 
        C3 = 3.64784832476320460504, 
        C4 = 1.27045825245236838258, 
        C5 = 2.41780725177450611770E-1, 
        C6 = 2.27238449892691845833E-2, 
        C7 = 7.74545014278341407640E-4, 
        D1 = 2.05319162663775882187, 
        D2 = 1.67638483018380384940, 
        D3 = 6.89767334985100004550E-1, 
        D4 = 1.48103976427480074590E-1, 
        D5 = 1.51986665636164571966E-2, 
        D6 = 5.47593808499534494600E-4, 
        D7 = 1.05075007164441684324E-9;

    static const double E0 = 6.65790464350110377720, 
        E1 = 5.46378491116411436990, 
        E2 = 1.78482653991729133580, 
        E3 = 2.96560571828504891230E-1, 
        E4 = 2.65321895265761230930E-2, 
        E5 = 1.24266094738807843860E-3, 
        E6 = 2.71155556874348757815E-5, 
        E7 = 2.01033439929228813265E-7, 
        F1 = 5.99832206555887937690E-1, 
        F2 = 1.36929880922735805310E-1, 
        F3 = 1.48753612908506148525E-2, 
        F4 = 7.86869131145613259100E-4, 
        F5 = 1.84631831751005468180E-5, 
        F6 = 1.42151175831644588870E-7, 
        F7 = 2.04426310338993978564E-15;

    const double Q = P - HALF;

    double R, PPND16;
    if (fabs(Q) <= SPLIT1)
    {
        R = CONST1 - Q * Q;
        PPND16 = Q * (((((((A7 * R + A6) * R + A5) * R + A4) * R + A3) 
                        * R + A2) * R + A1) * R + A0) / 
            (((((((B7 * R + B6) * R + B5) * R + B4) * R + B3) 
               * R + B2) * R + B1) * R + ONE);
    }
    else
    {
        if (Q < ZERO)
            R = P;
        else
            R = ONE - P;
        R = sqrt(-log(R));
        if (R <= SPLIT2)
        {
            R = R - CONST2;
            PPND16 = (((((((C7 * R + C6) * R + C5) * R + C4) * R + C3) 
                        * R + C2) * R + C1) * R + C0) / 
                (((((((D7 * R + D6) * R + D5) * R + D4) * R + D3) 
                   * R + D2) * R + D1) * R + ONE);
        }
        else
        {
            R = R - SPLIT2 ;
            PPND16 = (((((((E7 * R + E6) * R + E5) * R + E4) * R + E3) 
                        * R + E2) * R + E1) * R + E0) / 
                (((((((F7 * R + F6) * R + F5) * R + F4) * R + F3) 
                   * R + F2) * R + F1) * R + ONE);
        }
        if (Q < ZERO)
            PPND16 = -PPND16;
    }
    return PPND16;
}
