#ifndef RandomPlaneGeneratorByAxis_H_
#define RandomPlaneGeneratorByAxis_H_

#include "TrackPropagation/NavGeometry/test/stubs/RandomPlaneGenerator.h"
#include "DataFormats/GeometryVector/interface/GlobalTag.h"
#include "DataFormats/GeometryVector/interface/Point3DBase.h"
#include "DataFormats/GeometryVector/interface/Vector3DBase.h"

/** \class RandomPlaneGeneratorByAxis
 * Generates random planes with maximum tilt around a given direction 
 * vector. */

class RandomPlaneGeneratorByAxis : public RandomPlaneGenerator {

public:
  /** Type of plane to be generated.
   */
  enum PlaneType {forward,strictForward,barrel,strictBarrel,arbitrary};
  //
  // Constructor/Destructor
  //
  RandomPlaneGeneratorByAxis();
  RandomPlaneGeneratorByAxis(const float maxTilt, const PlaneType type = arbitrary);
  ~RandomPlaneGeneratorByAxis() override {};
  /** Set maximum tilt angle for a <B>single</B> random rotation
   *  (random plane is generated by three rotations)
   */
  inline void setTilt(const float maxTilt) {
    theMaxTilt = maxTilt;
  }
  /** Set type of plane to be generated.
   */
  inline void setType(const PlaneType type) {
    thePlaneType = type;
  }
  /** Generate plane at a given point and with its z-direction
   *  around a given global vector.
   */
  RandomPlaneGenerator::PlanePtr operator() (const GlobalPoint&,
						     const GlobalVector&) const override;


private:
  TkRotation<double> rotationAroundX(const double) const;
  TkRotation<double> rotationAroundY(const double) const;
  TkRotation<double> rotationAroundZ(const double) const;

private:
  float theMaxTilt;
  PlaneType thePlaneType;
  float theSize;
};
#endif
