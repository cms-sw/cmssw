#include "CylindricalLorentzForce.h"
#include "CylindricalState.h"
#include "RKLocalFieldProvider.h"
#include "CylindricalState.h"

#include <exception>

class CylindricalLorentzForceException : public std::exception {
public:
  CylindricalLorentzForceException() throw() {}
  ~CylindricalLorentzForceException() throw() override {}
};

template <typename T, int N>
typename CylindricalLorentzForce<T, N>::Vector CylindricalLorentzForce<T, N>::operator()(Scalar r,
                                                                                         const Vector& state) const {
  //    std::cout << "CylindricalLorentzForce called with r " << r << " state " << state << std::endl;

  // derivatives in case Radius is the free parameter
  CylindricalState cstate(r, state, 1.);
  LocalPoint pos(cstate.position());
  RKLocalFieldProvider::Vector B = theField.inTesla(pos.x(), pos.y(), pos.z());
  double k = 2.99792458e-3;  // conversion to [cm]

  double dphi_dr = state[2];
  double dz_dr = state[3];
  double lambda = state[4];

  double Q = sqrt(1.0 + dphi_dr * dphi_dr * r * r + dz_dr * dz_dr);

  //  std::cout << "CylindricalLorentzForce: Q " << Q << " dphi_dr " << dphi_dr << " dz_dr " << dz_dr << std::endl;
  if (Q > 1000) {
    throw CylindricalLorentzForceException();
  }

  double sinphi = sin(state[0]);
  double cosphi = cos(state[0]);
  double B_r = B.x() * cosphi + B.y() * sinphi;
  double B_phi = -B.x() * sinphi + B.y() * cosphi;
  double dphi_dr2 = dphi_dr * dphi_dr;

  //  std::cout << "B_r " << B_r << " B_phi " << B_phi << " B.z() " << B.z() << std::endl;

  double d2phi_dr2 = -2 / r * dphi_dr - r * dphi_dr * dphi_dr2 +
                     k * lambda * Q / r * (dz_dr * B_r + r * dphi_dr * dz_dr * B_phi - (1 + r * r * dphi_dr2) * B.z());

  //  std::cout << "-2/r * dphi_dr - r*dphi_dr*dphi_dr2 " << -2/r * dphi_dr - r*dphi_dr*dphi_dr2
  //       << "  -k*lambda*Q/r * (1+r*r*dphi_dr2)*B.z() " <<  -k*lambda*Q/r * (1+r*r*dphi_dr2)*B.z() << std::endl;

  double d2z_dr2 = -r * dphi_dr2 * dz_dr +
                   k * lambda * Q * (-r * dphi_dr * B_r + (1 + dz_dr * dz_dr) * B_phi - r * dphi_dr * dz_dr * B.z());

  // the derivative of q/p is zero -- momentum conservation if no energy loss
  Vector res;
  res[0] = dphi_dr;
  res[1] = dz_dr;
  res[2] = d2phi_dr2;
  res[3] = d2z_dr2;
  res[4] = 0;

  //  std::cout << "CylindricalLorentzForce: derivatives are " << res << std::endl;

  return res;
}
