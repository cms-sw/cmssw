#include "RKAdaptiveSolver.h"
#include <cmath>

//#define DEBUG_PRINTS

namespace RKDetails {
  // From http://martin.ankerl.com/2012/01/25/optimized-approximative-pow-in-c-and-cpp/
  // good at 10%
  inline double fastPow(double a, double b) {
    union {
      double d;
      int x[2];
    } u = {a};
    u.x[1] = (int)(b * (u.x[1] - 1072632447) + 1072632447);
    u.x[0] = 0;
    return u.d;
  }

}  // namespace RKDetails

template <typename T, template <typename, int> class StepWithPrec, int N>
typename RKAdaptiveSolver<T, StepWithPrec, N>::Vector RKAdaptiveSolver<T, StepWithPrec, N>::operator()(
    Scalar startPar,
    const Vector& startState,
    Scalar step,
    const RKDerivative<T, N>& deriv,
    const RKDistance<T, N>& dist,
    float eps) {
  using namespace RKDetails;
  constexpr float Safety = 0.9;
  double remainigStep = step;
  double stepSize = step;  // attempt to solve in one step
  Scalar currentPar = startPar;
  Vector currentStart = startState;
#ifdef DEBUG_PRINTS
  int nsteps = 0;
#endif
  std::pair<Vector, Scalar> tryStep;

  StepWithPrec<T, N> stepWithAccuracy;

  do {
    tryStep = stepWithAccuracy(currentPar, currentStart, deriv, dist, stepSize);
    float acc = tryStep.second;
    // assert(eps>0);
    // assert(acc>=0);
#ifdef DEBUG_PRINTS
    nsteps++;
#endif
    if (acc < eps || std::abs(stepSize) < std::abs(remainigStep) * 0.1f) {
      if (std::abs(remainigStep - stepSize) < 0.5f * eps) {
#ifdef DEBUG_PRINTS
        std::cout << "Accuracy reached, and full step taken in " << nsteps << " steps" << std::endl;
#endif
        return tryStep.first;  // we are there
      } else {
        remainigStep -= stepSize;
        currentPar += stepSize;
        // increase step size
        // double factor =  std::min( Safety * pow( std::fabs(eps/tryStep.second),0.2), 4.); // gives division by 0 FPE
        const float cut = std::pow(4.f / Safety, 5.f);
        // float factor =  (eps < cut*acc) ? Safety * std::pow(eps/acc,0.2f) : 4.f;
        float factor = (eps < cut * acc) ? Safety * fastPow(eps / acc, 0.2) : 4.f;
        // stepSize = std::min( stepSize*factor, remainigStep);
        double absRemainingStep = std::abs(remainigStep);
        double absSize = std::min(std::abs(stepSize * factor), absRemainingStep);
        if (absSize < 0.05f * absRemainingStep)
          absSize = 0.05f * absRemainingStep;
        stepSize = std::copysign(absSize, stepSize);
        currentStart = tryStep.first;
#ifdef DEBUG_PRINTS
        std::cout << "Accuracy reached, but " << remainigStep << " remain after " << nsteps
                  << " steps. Step size increased by " << factor << " to " << stepSize << std::endl;
#endif
      }
    } else {
      // decrease step size
      constexpr float cut = Safety * Safety * Safety * Safety * 100 * 100;
      float factor = (cut * eps > acc) ?
                                       // Safety * std::sqrt(std::sqrt(eps/acc)) : 0.1f;
                         Safety * fastPow(eps / acc, 0.25)
                                       : 0.1f;
      stepSize *= factor;
      if (std::abs(stepSize) < 0.05f * std::abs(remainigStep))
        stepSize = 0.05f * remainigStep;
#ifdef DEBUG_PRINTS
      std::cout << "Accuracy not yet reached: delta = " << tryStep.second << ", step reduced by " << factor << " to "
                << stepSize << std::endl;
#endif
    }
  } while (std::abs(remainigStep) > eps * 0.5f);

  return tryStep.first;
}
