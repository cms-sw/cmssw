/*
 *  Compute parameters for a trapezoid 
 *
 *  $Date: 2008/04/16 16:28:03 $
 *  $Revision: 1.5 $
 *  \author N. Amapane - INFN Torino
 */


void MagGeoBuilderFromDDD::volumeHandle::buildTrap(const DDExpandedView &fv) {
  if (MagGeoBuilderFromDDD::debug) cout << "Building trapezoid surfaces...: " <<endl;

  DDTrap trap(solid); //FIXME
  
  double x1 =      trap.x1()/cm; 
  double x2 =      trap.x2()/cm; 
  double x3 =      trap.x3()/cm; 
  double x4 =      trap.x4()/cm; 
  double y1 =      trap.y1()/cm; 
  double y2 =      trap.y2()/cm; 
  double theta =   trap.theta();  
  double phi =     trap.phi();  
  double halfZ =   trap.halfZ()/cm;  
  double alpha1 =  trap.alpha1(); 
  double alpha2 =  trap.alpha2();

  if (MagGeoBuilderFromDDD::debug) cout << "x1 " << x1    << endl
		  << "x2 " << x2    << endl
		  << "x3 " << x3    << endl
		  << "x4 " << x4    << endl
		  << "y1 " << y1    << endl
		  << "y2 " << y2    << endl
		  << "theta " << theta << endl
		  << "phi " << phi   << endl
		  << "halfZ " << halfZ << endl
		  << "alpha1 " << alpha1 << endl
		  << "alpha2 " << alpha2 << endl;
 
  // Just check assumptions on parameters...
  if (MagGeoBuilderFromDDD::debug) {
    const double epsilon = 1e-5;
    if ( theta > epsilon ||
	 phi  > epsilon ||
	 y1-y2 > epsilon ||
	 x1-x3 > epsilon ||
	 x2-x4 > epsilon ||
	 alpha1-alpha2>epsilon) {
      cout << "*** WARNING: unexpected trapezoid parameters." << endl;
    }
  }
  
  //  Used parameters halfZ, x1, x2, y1, alpha1
  GlobalVector planeXAxis = refPlane->toGlobal(LocalVector( 1, 0, 0));
  GlobalVector planeYAxis = refPlane->toGlobal(LocalVector( 0, 1, 0));
  GlobalVector planeZAxis = refPlane->toGlobal(LocalVector( 0, 0, 1));

  // For the correct definition of inner, outer, phiplus, phiminus,
  // Zplus, zminus the orientation of axes must be checked. 
  // Normal (convention in version 85l_030919): 
  //  planeXAxis in the direction of decreasing global phi; 
  //  planeZAxis in the direction of global Z; 
  // => Invert the sign of local X and Z if planeZAxis points to - global Z

  // FIXME Assumption: it is assumed that local Y is always along global R
  // (true for version 1103l, not necessarily in the future)
  GlobalVector Rvol(refPlane->position().x(), refPlane->position().y(), refPlane->position().z());
  theRN = fabs(planeYAxis.dot(Rvol));

  if (planeZAxis.z()<0.) {
    x1 = -x1;
    x2 = -x2;
    halfZ = -halfZ;
  }

  double halfX((x1+x2)/2.);

  GlobalPoint pos_outer(refPlane->toGlobal(LocalPoint(0.,y1,0.)));
  GlobalPoint pos_inner(refPlane->toGlobal(LocalPoint(0.,-y1,0.)));
  GlobalPoint pos_zplus(refPlane->toGlobal(LocalPoint(0.,0.,halfZ)));
  GlobalPoint pos_zminus(refPlane->toGlobal(LocalPoint(0.,0.,-halfZ)));
  GlobalPoint pos_phiplus(refPlane->toGlobal(LocalPoint(-halfX,0.,0.)));
  GlobalPoint pos_phiminus(refPlane->toGlobal(LocalPoint(halfX,0.,0.)));

  if (MagGeoBuilderFromDDD::debug) cout << "RN           " << theRN << endl 
                  << "pos_outer    " << pos_outer << " "
		  << pos_outer.perp() << " " << pos_outer.phi() << endl 
		  << "pos_inner    " << pos_inner << " "
		  << pos_inner.perp() << " " << pos_inner.phi() << endl
		  << "pos_zplus    " << pos_zplus << " "
		  << pos_zplus.perp() << " " << pos_zplus.phi() << endl
		  << "pos_zminus   " << pos_zminus << " "
		  << pos_zminus.perp() << " " << pos_zminus.phi() << endl
		  << "pos_phiplus  " << pos_phiplus << " "
		  << pos_phiplus.perp() << " " << pos_phiplus.phi() <<endl
		  << "pos_phiminus " << pos_phiminus << " "
		  << pos_phiminus.perp() << " " << pos_phiminus.phi() <<endl;

  // Check ordering.
  if (MagGeoBuilderFromDDD::debug) {
    if (pos_outer.perp() < pos_inner.perp()) {
      cout << "*** WARNING: pos_outer < pos_inner for trapezoid" << endl;
    }
    if (pos_zplus.z() < pos_zminus.z()) {
      cout << "*** WARNING: pos_zplus < pos_zminus for trapezoid" << endl;
    }
    if (Geom::Phi<float>(pos_phiplus.phi()-pos_phiminus.phi()) < 0. ) {
      cout << "*** WARNING: pos_phiplus < pos_phiminus for trapezoid" << endl;
    }    
  }
  
  // Local Y axis of the faces at +-phi. The local X is = global Z.
  GlobalVector y_phiplus =   
    (refPlane->toGlobal(LocalVector((tan(alpha1)*y1-(x2-x1)/2.),y1,0.))).unit();
  GlobalVector y_phiminusV = (refPlane->toGlobal(LocalVector((tan(alpha1)*y1+(x2-x1)/2.),y1,0.)));
  GlobalVector y_phiminus = y_phiminusV.unit();


  if (MagGeoBuilderFromDDD::debug) {  
    cout << "y_phiplus " << y_phiplus << endl;
    cout << "y_phiminus " << y_phiminus << endl;
  }
  
  Surface::RotationType rot_R(planeZAxis, planeXAxis);
  Surface::RotationType rot_Z(planeXAxis, planeYAxis);
  Surface::RotationType rot_phiplus(planeZAxis, y_phiplus); 
  Surface::RotationType rot_phiminus(planeZAxis, y_phiminus);

  // FIXME: use builder
  surfaces[outer]    = new Plane(pos_outer, rot_R);
  surfaces[inner]    = new Plane(pos_inner, rot_R);
  surfaces[zplus]    = new Plane(pos_zplus, rot_Z);
  surfaces[zminus]   = new Plane(pos_zminus, rot_Z);
  surfaces[phiplus]  = new Plane(pos_phiplus, rot_phiplus);
  surfaces[phiminus] = new Plane(pos_phiminus, rot_phiminus);

  // Save volume boundaries
  theRMin = fabs(surfaces[inner]->toLocal(GlobalPoint(0,0,0)).z());
  theRMax = fabs(surfaces[outer]->toLocal(GlobalPoint(0,0,0)).z());

  // Setting "absolute" phi boundary spots a problem in V85l
  // e.g. vol 139 (origin: small inconsistency in volumes.txt)
  // So let's keep phi at middle phi- plane...
  //  FIXME: Remove this workaround once support for v85l is dropped. 
  if (name.substr(0,3)=="V_Z") { 
    thePhiMin = surfaces[phiminus]->position().phi();
  } else {
    thePhiMin = min((pos_phiminus+y_phiminusV).phi(), (pos_phiminus-y_phiminusV).phi());
  }
  
  if (MagGeoBuilderFromDDD::debug) {
    cout << "rot_R " << surfaces[outer]->toGlobal(LocalVector(0.,0.,1.)) << endl
	 << "rot_Z " << surfaces[zplus]->toGlobal(LocalVector(0.,0.,1.)) << endl
	 << "rot_phi+ " << surfaces[phiplus]->toGlobal(LocalVector(0.,0.,1.))
	 << " phi " << surfaces[phiplus]->toGlobal(LocalVector(0.,0.,1.)).phi()
	 << endl
	 << "rot_phi- " << surfaces[phiminus]->toGlobal(LocalVector(0.,0.,1.))
	 << " phi " << surfaces[phiminus]->toGlobal(LocalVector(0.,0.,1.)).phi()
	 << endl;  

    if (fabs(surfaces[phiminus]->position().phi() - thePhiMin)>1e-5) {
      cout << " Trapez. phiMin = " << thePhiMin << endl;
    }
  }
}
