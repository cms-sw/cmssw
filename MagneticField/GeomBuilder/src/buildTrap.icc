/*
 *  Compute parameters for a trapezoid 
 *
 *  \author N. Amapane - INFN Torino
 */

void volumeHandle::buildTrap() {
  LogTrace("magneticfield::volumeHandle") << "Building trapezoid surfaces...: ";

  DDTrap trap(solid);  //FIXME

  // Old DD needs mm to cm conversion, but DD4hep needs no conversion.
  // convertUnits should be defined appropriately.
  double x1 = convertUnits(trap.x1());
  double x2 = convertUnits(trap.x2());
  double x3 = convertUnits(trap.x3());
  double x4 = convertUnits(trap.x4());
  double y1 = convertUnits(trap.y1());
  double y2 = convertUnits(trap.y2());
  double theta = trap.theta();
  double phi = trap.phi();
  double halfZ = convertUnits(trap.halfZ());
  double alpha1 = trap.alpha1();
  double alpha2 = trap.alpha2();

  LogTrace("magneticfield::volumeHandle")
      << "x1 " << x1 << newln << "x2 " << x2 << newln << "x3 " << x3 << newln << "x4 " << x4 << newln << "y1 " << y1
      << newln << "y2 " << y2 << newln << "theta  " << theta << newln << "phi    " << phi << newln << "halfZ  " << halfZ
      << newln << "alpha1 " << alpha1 << newln << "alpha2 " << alpha2;

  // Just check assumptions on parameters...
  if (debug) {
    const double epsilon = 1e-5;
    if (theta > epsilon || phi > epsilon || y1 - y2 > epsilon || x1 - x3 > epsilon || x2 - x4 > epsilon ||
        alpha1 - alpha2 > epsilon) {
      LogTrace("magneticfield::volumeHandle") << "*** WARNING: unexpected trapezoid parameters.";
    }
  }

  //  Used parameters halfZ, x1, x2, y1, alpha1
  GlobalVector planeXAxis = refPlane->toGlobal(LocalVector(1, 0, 0));
  GlobalVector planeYAxis = refPlane->toGlobal(LocalVector(0, 1, 0));
  GlobalVector planeZAxis = refPlane->toGlobal(LocalVector(0, 0, 1));

  // For the correct definition of inner, outer, phiplus, phiminus,
  // Zplus, zminus the orientation of axes must be checked.
  // Normal (convention in version 85l_030919):
  //  planeXAxis in the direction of decreasing global phi;
  //  planeZAxis in the direction of global Z;
  // => Invert the sign of local X and Z if planeZAxis points to - global Z

  // FIXME Assumption: it is assumed that local Y is always along global R
  // (true for version 1103l, not necessarily in the future)
  GlobalVector Rvol(refPlane->position().x(), refPlane->position().y(), refPlane->position().z());
  theRN = std::abs(planeYAxis.dot(Rvol));

  if (planeZAxis.z() < 0.) {
    x1 = -x1;
    x2 = -x2;
    halfZ = -halfZ;
  }

  double halfX((x1 + x2) / 2.);

  GlobalPoint pos_outer(refPlane->toGlobal(LocalPoint(0., y1, 0.)));
  GlobalPoint pos_inner(refPlane->toGlobal(LocalPoint(0., -y1, 0.)));
  GlobalPoint pos_zplus(refPlane->toGlobal(LocalPoint(0., 0., halfZ)));
  GlobalPoint pos_zminus(refPlane->toGlobal(LocalPoint(0., 0., -halfZ)));
  GlobalPoint pos_phiplus(refPlane->toGlobal(LocalPoint(-halfX, 0., 0.)));
  GlobalPoint pos_phiminus(refPlane->toGlobal(LocalPoint(halfX, 0., 0.)));

  LogTrace("magneticfield::volumeHandle")
      << "RN            " << theRN << newln  // RN line needs extra space to line up
      << "pos_outer    " << pos_outer << " " << pos_outer.perp() << " " << pos_outer.phi() << newln << "pos_inner    "
      << pos_inner << " " << pos_inner.perp() << " " << pos_inner.phi() << newln << "pos_zplus    " << pos_zplus << " "
      << pos_zplus.perp() << " " << pos_zplus.phi() << newln << "pos_zminus   " << pos_zminus << " "
      << pos_zminus.perp() << " " << pos_zminus.phi() << newln << "pos_phiplus  " << pos_phiplus << " "
      << pos_phiplus.perp() << " " << pos_phiplus.phi() << newln << "pos_phiminus " << pos_phiminus << " "
      << pos_phiminus.perp() << " " << pos_phiminus.phi();

  // Check ordering.
  if (debug) {
    if (pos_outer.perp() < pos_inner.perp()) {
      LogTrace("magneticfield::volumeHandle") << "*** WARNING: pos_outer < pos_inner for trapezoid";
    }
    if (pos_zplus.z() < pos_zminus.z()) {
      LogTrace("magneticfield::volumeHandle") << "*** WARNING: pos_zplus < pos_zminus for trapezoid";
    }
    if (Geom::Phi<float>(pos_phiplus.phi() - pos_phiminus.phi()) < 0.) {
      LogTrace("magneticfield::volumeHandle") << "*** WARNING: pos_phiplus < pos_phiminus for trapezoid";
    }
  }

  // Local Y axis of the faces at +-phi. The local X is = global Z.
  GlobalVector y_phiplus = (refPlane->toGlobal(LocalVector((tan(alpha1) * y1 - (x2 - x1) / 2.), y1, 0.))).unit();
  GlobalVector y_phiminusV = (refPlane->toGlobal(LocalVector((tan(alpha1) * y1 + (x2 - x1) / 2.), y1, 0.)));
  GlobalVector y_phiminus = y_phiminusV.unit();

  LogTrace("magneticfield::volumeHandle") << "y_phiplus  " << y_phiplus << newln << "y_phiminus " << y_phiminus;

  Surface::RotationType rot_R(planeZAxis, planeXAxis);
  Surface::RotationType rot_Z(planeXAxis, planeYAxis);
  Surface::RotationType rot_phiplus(planeZAxis, y_phiplus);
  Surface::RotationType rot_phiminus(planeZAxis, y_phiminus);

  // FIXME: use builder
  surfaces[outer] = new Plane(pos_outer, rot_R);
  surfaces[inner] = new Plane(pos_inner, rot_R);
  surfaces[zplus] = new Plane(pos_zplus, rot_Z);
  surfaces[zminus] = new Plane(pos_zminus, rot_Z);
  surfaces[phiplus] = new Plane(pos_phiplus, rot_phiplus);
  surfaces[phiminus] = new Plane(pos_phiminus, rot_phiminus);

  // Save volume boundaries
  theRMin = std::abs(surfaces[inner]->toLocal(GlobalPoint(0, 0, 0)).z());
  theRMax = std::abs(surfaces[outer]->toLocal(GlobalPoint(0, 0, 0)).z());

  // Setting "absolute" phi boundary spots a problem in V85l
  // e.g. vol 139 (origin: small inconsistency in volumes.txt)
  // So let's keep phi at middle phi- plane...
  //  FIXME: Remove this workaround once support for v85l is dropped.
  if (name.substr(0, 3) == "V_Z") {
    thePhiMin = surfaces[phiminus]->position().phi();
  } else {
    thePhiMin = min((pos_phiminus + y_phiminusV).phi(), (pos_phiminus - y_phiminusV).phi());
  }
  LogTrace("magneticfield::volumeHandle")
      << "rot_R    " << surfaces[outer]->toGlobal(LocalVector(0., 0., 1.)) << newln << "rot_Z    "
      << surfaces[zplus]->toGlobal(LocalVector(0., 0., 1.)) << newln << "rot_phi+ "
      << surfaces[phiplus]->toGlobal(LocalVector(0., 0., 1.)) << " phi "
      << surfaces[phiplus]->toGlobal(LocalVector(0., 0., 1.)).phi() << newln << "rot_phi- "
      << surfaces[phiminus]->toGlobal(LocalVector(0., 0., 1.)) << " phi "
      << surfaces[phiminus]->toGlobal(LocalVector(0., 0., 1.)).phi();
  if (debug) {
    if (std::abs(surfaces[phiminus]->position().phi() - thePhiMin) > 1e-5) {
      LogTrace("magneticfield::volumeHandle") << " Trapez. phiMin = " << thePhiMin;
    }
  }
}
