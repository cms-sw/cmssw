/*
 *  Compute parameters for a pseudotrapezoid .
 *  For pseudotraps the refPlane is parallel to beam line; transformation:
 *
 *  Global(for vol at pi/2)    Local 
 *  +R (+Y)                    +Z
 *  +phi(-X)                   +X
 *  +Z                         +Y
 *
 *  $Date: 2009/04/07 15:09:45 $
 *  $Revision: 1.7 $
 *  \author N. Amapane - INFN Torino
 */

void MagGeoBuilderFromDDD::volumeHandle::buildPseudoTrap(const DDExpandedView &fv) {
  if (MagGeoBuilderFromDDD::debug) cout << "Building PseudoTrap surfaces...: " <<endl;

  DDPseudoTrap ptrap(solid);

  double halfZ    = ptrap.halfZ()/cm;
  double x1       = ptrap.x1()/cm;
  double x2       = ptrap.x2()/cm;
  double y1       = ptrap.y1()/cm;
  double y2       = ptrap.y2()/cm;
  double radius   = ptrap.radius()/cm;
  bool   atMinusZ = ptrap.atMinusZ();

 
  if (MagGeoBuilderFromDDD::debug) cout << "halfZ     " << halfZ    << endl
		  << "x1        " << x1       << endl
		  << "x2        " << x2       << endl
		  << "y1        " << y1       << endl
		  << "y2        " << y2       << endl
		  << "radius    " << radius   << endl
		  << "atMinusZ  " << atMinusZ << endl;

  // Just check assumptions on parameters...
  const double epsilon = 1e-5;
  if (MagGeoBuilderFromDDD::debug) {  
    if ( y1-y2 > epsilon ) {
      cout << "*** WARNING: unexpected pseudotrapezoid parameters." << endl;
    }

    // Check that volume is convex (no concave volume in current geometry...)
    if (radius*(atMinusZ?-1.:+1)<0.) {
      cout << "*** WARNING: pseudotrapezoid is concave" << endl;
    }
  }
  
  // CAVEAT: pseudotraps are rotated in a different way as traps,
  // since they have local Z along global R...
  GlobalVector planeXAxis = refPlane->toGlobal(LocalVector( 1, 0, 0));
  GlobalVector planeYAxis = refPlane->toGlobal(LocalVector( 0, 1, 0));
  GlobalVector planeZAxis = refPlane->toGlobal(LocalVector( 0, 0, 1));

  //FIXME assumption: here we do use the assumption on the orientation /
  //of local Z (see above)
   GlobalVector Rvol(refPlane->position().x(), refPlane->position().y(), refPlane->position().z());
  theRN = fabs(planeZAxis.dot(Rvol));


  double fR = fabs(radius);
  Sides cyl_side;
  Sides plane_side;
  if (atMinusZ) {
    cyl_side = inner;
    plane_side = outer;
  } else {
    cyl_side = outer;
    plane_side = inner;
  }
  GlobalPoint pos_Rplane(refPlane->toGlobal(LocalPoint(0.,0.,(atMinusZ ? +halfZ : -halfZ))));
  GlobalPoint pos_zplus(refPlane->toGlobal(LocalPoint(0.,y1,0.)));
  GlobalPoint pos_zminus(refPlane->toGlobal(LocalPoint(0.,-y1,0.)));
  double halfX((x1+x2)/2.);
  GlobalPoint pos_phiplus(refPlane->toGlobal(LocalPoint(+halfX,0.,0.)));
  GlobalPoint pos_phiminus(refPlane->toGlobal(LocalPoint(-halfX,0.,0.)));

  //Check that cylinder is centered on beam axis...
  float rcheck;
  if(atMinusZ) rcheck = refPlane->toGlobal(LocalPoint(x1,0.,-halfZ)).perp();
  else         rcheck = refPlane->toGlobal(LocalPoint(x2,0.,+halfZ)).perp();

  if (MagGeoBuilderFromDDD::debug) {
    if ( fabs(rcheck - fR) > 100.*epsilon){ //FIXME! 
      cout << setprecision(10);
      cout << "*** WARNING: Cylinder surface not centered on beam axis "
	   << rcheck << " " << fR << " " << fabs(rcheck - fR) << endl;
      cout << setprecision(6);
    }
  }

  if (MagGeoBuilderFromDDD::debug) {
    cout << "RN           " << theRN << endl 
         << "pos_Rplane   " << pos_Rplane << " "
	 << pos_Rplane.perp() << " " << pos_Rplane.phi() << endl 
	 << "pos_zplus    " << pos_zplus << " "
	 << pos_zplus.perp() << " " << pos_zplus.phi() << endl
	 << "pos_zminus   " << pos_zminus << " "
	 << pos_zminus.perp() << " " << pos_zminus.phi() << endl
	 << "pos_phiplus  " << pos_phiplus << " "
	 << pos_phiplus.perp() << " " << pos_phiplus.phi() <<endl
	 << "pos_phiminus " << pos_phiminus << " "
	 << pos_phiminus.perp() << " " << pos_phiminus.phi() <<endl;
  }
  
  // Check ordering.
  if ((pos_Rplane.perp() < radius) == atMinusZ) {
    cout << "*** WARNING: pos_outer < pos_inner for pseudotrapezoid" << endl;
  }
  if (pos_zplus.z() < pos_zminus.z()) {
    cout << "*** WARNING: pos_zplus < pos_zminus for pseudotrapezoid" << endl;
  }
  if (Geom::Phi<float>(pos_phiplus.phi()-pos_phiminus.phi()) < 0. ) {
    cout << "*** WARNING: pos_phiplus < pos_phiminus for pseudotrapezoid" << endl;
  }


  GlobalVector z_phiplus =   
    (refPlane->toGlobal(LocalVector((x2-x1)/2.,0.,halfZ))).unit();
  GlobalVector z_phiminus =
    (refPlane->toGlobal(LocalVector(-(x2-x1)/2.,0.,halfZ))).unit();

  if (MagGeoBuilderFromDDD::debug) {
    cout << "z_phiplus " << z_phiplus << " " << z_phiplus.phi() << endl;
    cout << "z_phiminus " << z_phiminus << " " << z_phiminus.phi() << endl;
  }

  Surface::RotationType rot_R(planeYAxis, planeXAxis);
  Surface::RotationType rot_Z(planeXAxis, planeZAxis);
  Surface::RotationType rot_phiplus(planeYAxis, z_phiplus); 
  Surface::RotationType rot_phiminus(planeYAxis, z_phiminus);
    
  // FIXME: use builder
  surfaces[plane_side] = new Plane(pos_Rplane, rot_R);
  surfaces[cyl_side] = new Cylinder(fR,Surface::PositionType(0,0,center_.z()),
				       Surface::RotationType());
				       

  surfaces[zplus]    = new Plane(pos_zplus, rot_Z);
  surfaces[zminus]   = new Plane(pos_zminus, rot_Z);
  surfaces[phiplus]  = new Plane(pos_phiplus, rot_phiplus);
  surfaces[phiminus] = new Plane(pos_phiminus, rot_phiminus);

  if (MagGeoBuilderFromDDD::debug) {
    cout << "rot_R " << surfaces[plane_side]->toGlobal(LocalVector(0.,0.,1.)) << endl
	 << "rot_Z " << surfaces[zplus]->toGlobal(LocalVector(0.,0.,1.)) << endl
	 << "rot_phi+ " << surfaces[phiplus]->toGlobal(LocalVector(0.,0.,1.))
	 << " phi " << surfaces[phiplus]->toGlobal(LocalVector(0.,0.,1.)).phi()
	 << endl
	 << "rot_phi- " << surfaces[phiminus]->toGlobal(LocalVector(0.,0.,1.))
	 << " phi " << surfaces[phiminus]->toGlobal(LocalVector(0.,0.,1.)).phi()
	 << endl;  
  }
  

  // Save volume boundaries
  double R1 = fabs(surfaces[plane_side]->toLocal(GlobalPoint(0,0,0)).z());
  theRMin = min(fR, R1);
  theRMax = max(fR, R1);
  // FIXME: use phi of middle plane of phiminus surface. Is not the absolute phimin!
  thePhiMin = surfaces[phiminus]->position().phi();
}
