/*
 *  Compute parameters for a pseudotrapezoid .
 *  NOTE: The pseudotrapezoid is no longer needed or support for DD4hep.
 *  For pseudotraps the refPlane is parallel to beam line; transformation:
 *
 *  Global(for vol at pi/2)    Local 
 *  +R (+Y)                    +Z
 *  +phi(-X)                   +X
 *  +Z                         +Y
 *
 *  \author N. Amapane - INFN Torino
 */

void volumeHandle::buildPseudoTrap() {
  LogTrace("magneticfield::volumeHandle") << "Building PseudoTrap surfaces...: ";

  DDPseudoTrap ptrap(solid);

  // Old DD needs mm to cm conversion, but DD4hep needs no conversion.
  // convertUnits should be defined appropriately.
  double halfZ = convertUnits(ptrap.halfZ());
  double x1 = convertUnits(ptrap.x1());
  double x2 = convertUnits(ptrap.x2());
  double y1 = convertUnits(ptrap.y1());
  double y2 = convertUnits(ptrap.y2());
  double radius = convertUnits(ptrap.radius());
  bool atMinusZ = ptrap.atMinusZ();

  LogTrace("magneticfield::volumeHandle")
      << "halfZ     " << halfZ << newln << "x1        " << x1 << newln << "x2        " << x2 << newln << "y1        "
      << y1 << newln << "y2        " << y2 << newln << "radius    " << radius << newln << "atMinusZ  " << atMinusZ;

  // Just check assumptions on parameters...
  const double epsilon = 1e-5;
  if (debug) {
    if (y1 - y2 > epsilon) {
      LogTrace("magneticfield::volumeHandle") << "*** WARNING: unexpected pseudotrapezoid parameters.";
    }

    // Check that volume is convex (no concave volume in current geometry...)
    if (radius * (atMinusZ ? -1. : +1) < 0.) {
      LogTrace("magneticfield::volumeHandle") << "*** WARNING: pseudotrapezoid is concave";
    }
  }
  // CAVEAT: pseudotraps are rotated in a different way as traps,
  // since they have local Z along global R...
  GlobalVector planeXAxis = refPlane->toGlobal(LocalVector(1, 0, 0));
  GlobalVector planeYAxis = refPlane->toGlobal(LocalVector(0, 1, 0));
  GlobalVector planeZAxis = refPlane->toGlobal(LocalVector(0, 0, 1));

  //FIXME assumption: here we do use the assumption on the orientation /
  //of local Z (see above)
  GlobalVector Rvol(refPlane->position().x(), refPlane->position().y(), refPlane->position().z());
  theRN = std::abs(planeZAxis.dot(Rvol));

  double fR = std::abs(radius);
  Sides cyl_side;
  Sides plane_side;
  if (atMinusZ) {
    cyl_side = inner;
    plane_side = outer;
  } else {
    cyl_side = outer;
    plane_side = inner;
  }
  GlobalPoint pos_Rplane(refPlane->toGlobal(LocalPoint(0., 0., (atMinusZ ? +halfZ : -halfZ))));
  GlobalPoint pos_zplus(refPlane->toGlobal(LocalPoint(0., y1, 0.)));
  GlobalPoint pos_zminus(refPlane->toGlobal(LocalPoint(0., -y1, 0.)));
  double halfX((x1 + x2) / 2.);
  GlobalPoint pos_phiplus(refPlane->toGlobal(LocalPoint(+halfX, 0., 0.)));
  GlobalPoint pos_phiminus(refPlane->toGlobal(LocalPoint(-halfX, 0., 0.)));

  //Check that cylinder is centered on beam axis...
  float rcheck;
  if (atMinusZ)
    rcheck = refPlane->toGlobal(LocalPoint(x1, 0., -halfZ)).perp();
  else
    rcheck = refPlane->toGlobal(LocalPoint(x2, 0., +halfZ)).perp();

  if (debug) {
    if (std::abs(rcheck - fR) > 100. * epsilon) {  //FIXME!
      std::stringstream formatOutput;
      formatOutput << setprecision(10) << rcheck << " " << fR << " " << std::abs(rcheck - fR);
      LogTrace("magneticfield::volumeHandle")
          << "*** WARNING: Cylinder surface not centered on beam axis " << formatOutput.str();
    }
  }

  if (debug) {
    LogTrace("magneticfield::volumeHandle")
        << "RN           " << theRN << newln << "pos_Rplane   " << pos_Rplane << " " << pos_Rplane.perp() << " "
        << pos_Rplane.phi() << newln << "pos_zplus    " << pos_zplus << " " << pos_zplus.perp() << " "
        << pos_zplus.phi() << newln << "pos_zminus   " << pos_zminus << " " << pos_zminus.perp() << " "
        << pos_zminus.phi() << newln << "pos_phiplus  " << pos_phiplus << " " << pos_phiplus.perp() << " "
        << pos_phiplus.phi() << newln << "pos_phiminus " << pos_phiminus << " " << pos_phiminus.perp() << " "
        << pos_phiminus.phi();
  }

  // Check ordering.
  if ((pos_Rplane.perp() < radius) == atMinusZ) {
    LogTrace("magneticfield::volumeHandle") << "*** WARNING: pos_outer < pos_inner for pseudotrapezoid";
  }
  if (pos_zplus.z() < pos_zminus.z()) {
    LogTrace("magneticfield::volumeHandle") << "*** WARNING: pos_zplus < pos_zminus for pseudotrapezoid";
  }
  if (Geom::Phi<float>(pos_phiplus.phi() - pos_phiminus.phi()) < 0.) {
    LogTrace("magneticfield::volumeHandle") << "*** WARNING: pos_phiplus < pos_phiminus for pseudotrapezoid";
  }

  GlobalVector z_phiplus = (refPlane->toGlobal(LocalVector((x2 - x1) / 2., 0., halfZ))).unit();
  GlobalVector z_phiminus = (refPlane->toGlobal(LocalVector(-(x2 - x1) / 2., 0., halfZ))).unit();

  LogTrace("magneticfield::volumeHandle") << "z_phiplus  " << z_phiplus << " " << z_phiplus.phi() << newln
                                          << "z_phiminus " << z_phiminus << " " << z_phiminus.phi();

  Surface::RotationType rot_R(planeYAxis, planeXAxis);
  Surface::RotationType rot_Z(planeXAxis, planeZAxis);
  Surface::RotationType rot_phiplus(planeYAxis, z_phiplus);
  Surface::RotationType rot_phiminus(planeYAxis, z_phiminus);

  // FIXME: use builder
  surfaces[plane_side] = new Plane(pos_Rplane, rot_R);
  surfaces[cyl_side] = new Cylinder(fR, Surface::PositionType(0, 0, center_.z()), Surface::RotationType());

  surfaces[zplus] = new Plane(pos_zplus, rot_Z);
  surfaces[zminus] = new Plane(pos_zminus, rot_Z);
  surfaces[phiplus] = new Plane(pos_phiplus, rot_phiplus);
  surfaces[phiminus] = new Plane(pos_phiminus, rot_phiminus);

  LogTrace("magneticfield::volumeHandle")
      << "rot_R " << surfaces[plane_side]->toGlobal(LocalVector(0., 0., 1.)) << newln << "rot_Z "
      << surfaces[zplus]->toGlobal(LocalVector(0., 0., 1.)) << newln << "rot_phi+ "
      << surfaces[phiplus]->toGlobal(LocalVector(0., 0., 1.)) << " phi "
      << surfaces[phiplus]->toGlobal(LocalVector(0., 0., 1.)).phi() << newln << "rot_phi- "
      << surfaces[phiminus]->toGlobal(LocalVector(0., 0., 1.)) << " phi "
      << surfaces[phiminus]->toGlobal(LocalVector(0., 0., 1.)).phi();

  // Save volume boundaries
  double R1 = std::abs(surfaces[plane_side]->toLocal(GlobalPoint(0, 0, 0)).z());
  theRMin = min(fR, R1);
  theRMax = max(fR, R1);
  // FIXME: use phi of middle plane of phiminus surface. Is not the absolute phimin!
  thePhiMin = surfaces[phiminus]->position().phi();
}
