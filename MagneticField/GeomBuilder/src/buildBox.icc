/*
 *  Compute parameters for a box 
 *
 *  $Date: 2008/04/16 16:26:34 $
 *  $Revision: 1.5 $
 *  \author N. Amapane - INFN Torino
 */

void MagGeoBuilderFromDDD::volumeHandle::buildBox(const DDExpandedView &fv) {
  if (MagGeoBuilderFromDDD::debug) cout << "Building box surfaces...: " <<endl;

  DDBox box(solid);
  double halfX = box.halfX()/cm;
  double halfY = box.halfY()/cm;
  double halfZ = box.halfZ()/cm;

  // Global vectors of the normals to X, Y, Z axes
  GlobalVector planeXAxis = refPlane->toGlobal(LocalVector( 1, 0, 0));
  GlobalVector planeYAxis = refPlane->toGlobal(LocalVector( 0, 1, 0));
  GlobalVector planeZAxis = refPlane->toGlobal(LocalVector( 0, 0, 1)); 


  // FIXME Assumption: it is assumed that in the following that 
  // local Z is always along global Z
  // (true for version 1103l, not necessarily in the future)
  
  // To determine the orientation of other local axes,
  // find local axis closest to global R 
  GlobalVector Rvol(refPlane->position().x(), refPlane->position().y(), refPlane->position().z());
  double rnX = planeXAxis.dot(Rvol);
  double rnY = planeYAxis.dot(Rvol);

  GlobalPoint pos_outer;
  GlobalPoint pos_inner;
  GlobalPoint pos_phiplus;
  GlobalPoint pos_phiminus;
  GlobalPoint pos_zplus(refPlane->toGlobal(LocalPoint(0.,0.,halfZ)));
  GlobalPoint pos_zminus(refPlane->toGlobal(LocalPoint(0.,0.,-halfZ)));

  Surface::RotationType rot_R;
  Surface::RotationType rot_phi;
  Surface::RotationType rot_Z = Surface::RotationType(planeXAxis, planeYAxis);

  if (fabs(rnX) > fabs(rnY)) {
    // X is ~parallel to global R dir, Y is along +/- phi
    theRN = fabs(rnX);
    if (rnX<0) {
      halfX = -halfX;
      halfY = -halfY;
    }
    pos_outer = GlobalPoint(refPlane->toGlobal(LocalPoint(halfX,0.,0.)));
    pos_inner = GlobalPoint(refPlane->toGlobal(LocalPoint(-halfX,0.,0.)));
    pos_phiplus  = GlobalPoint(refPlane->toGlobal(LocalPoint(0.,halfY,0.)));
    pos_phiminus = GlobalPoint(refPlane->toGlobal(LocalPoint(0.,-halfY,0.)));

    rot_R = Surface::RotationType(planeZAxis, planeYAxis);
    rot_phi = Surface::RotationType(planeZAxis, planeXAxis); // opposite to y axis
  } else {
    // Y is ~parallel to global R dir, X is along +/- phi
    theRN = fabs(rnY);
    if (rnY<0) {
      halfX = -halfX;
      halfY = -halfY;
    }
    pos_outer = GlobalPoint(refPlane->toGlobal(LocalPoint(0.,halfY,0.)));
    pos_inner = GlobalPoint(refPlane->toGlobal(LocalPoint(0.,-halfY,0.)));
    pos_phiplus  = GlobalPoint(refPlane->toGlobal(LocalPoint(-halfX,0.,0.)));
    pos_phiminus = GlobalPoint(refPlane->toGlobal(LocalPoint(halfX,0.,0.)));

    rot_R = Surface::RotationType(planeZAxis, planeXAxis);
    rot_phi = Surface::RotationType(planeZAxis, planeYAxis); // opposite to x axis
  }


  if (MagGeoBuilderFromDDD::debug) cout << " halfX: " << halfX 
					<< " halfY: " << halfY 
					<< " halfZ: " << halfZ << endl
					<< "RN            " << theRN << endl;

  if (MagGeoBuilderFromDDD::debug) cout << "pos_outer    " << pos_outer << " "
		  << pos_outer.perp() << " " << pos_outer.phi() << endl 
		  << "pos_inner    " << pos_inner << " "
		  << pos_inner.perp() << " " << pos_inner.phi() << endl
		  << "pos_zplus    " << pos_zplus << " "
		  << pos_zplus.perp() << " " << pos_zplus.phi() << endl
		  << "pos_zminus   " << pos_zminus << " "
		  << pos_zminus.perp() << " " << pos_zminus.phi() << endl
		  << "pos_phiplus  " << pos_phiplus << " "
		  << pos_phiplus.perp() << " " << pos_phiplus.phi() <<endl
		  << "pos_phiminus " << pos_phiminus << " "
		  << pos_phiminus.perp() << " " << pos_phiminus.phi() <<endl;

  // Check ordering.
  if (MagGeoBuilderFromDDD::debug) {
    if (pos_outer.perp() < pos_inner.perp()) {
      cout << "*** WARNING: pos_outer < pos_inner for box" << endl;
    }
    if (pos_zplus.z() < pos_zminus.z()) {
      cout << "*** WARNING: pos_zplus < pos_zminus for box" << endl;
    }
    if (Geom::Phi<float>(pos_phiplus.phi()-pos_phiminus.phi()) < 0. ) {
      cout << "*** WARNING: pos_phiplus < pos_phiminus for box" << endl;
    }
  }  

  // FIXME: use builder
  surfaces[outer]    = new Plane(pos_outer, rot_R);
  surfaces[inner]    = new Plane(pos_inner, rot_R);
  surfaces[zplus]    = new Plane(pos_zplus, rot_Z);
  surfaces[zminus]   = new Plane(pos_zminus, rot_Z);
  surfaces[phiplus]  = new Plane(pos_phiplus, rot_phi);
  surfaces[phiminus] = new Plane(pos_phiminus, rot_phi);

  if (MagGeoBuilderFromDDD::debug) {
    cout << "rot_R " << surfaces[outer]->toGlobal(LocalVector(0.,0.,1.)) <<endl
	 << "rot_Z " << surfaces[zplus]->toGlobal(LocalVector(0.,0.,1.)) <<endl
	 << "rot_phi " << surfaces[phiplus]->toGlobal(LocalVector(0.,0.,1.))
	 << endl;
  }
  
  // Save volume boundaries
  theRMin = fabs(surfaces[inner]->toLocal(GlobalPoint(0,0,0)).z());
  theRMax = fabs(surfaces[outer]->toLocal(GlobalPoint(0,0,0)).z());
  // FIXME: use phi of middle plane of phiminus surface. Is not the absolute phimin!
  thePhiMin = surfaces[phiminus]->position().phi();
}
