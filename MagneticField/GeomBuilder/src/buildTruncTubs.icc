/*
 *  Compute parameters for a truncated cylinder section. 
 *  In the current geometry TruncTubs are described starting from startPhi = 0,
 *  so that the volume at ~pi/2 has a nonzero rotation, contrary to any other 
 *  volume type in the same geometry. This is not a problem as long as proper
 *  local to global transformation are used.
 *  
 *
 *  \author N. Amapane - INFN Torino
 */

void volumeHandle::buildTruncTubs() {
  LogTrace("magneticfield::volumeHandle") << "Building TruncTubs surfaces...: ";

  DDTruncTubs tubs(solid);

  // Old DD needs mm to cm conversion, but DD4hep needs no conversion.
  // convertUnits should be defined appropriately.
  double zhalf = convertUnits(tubs.zHalf());            // half of the z-Axis
  double rIn = convertUnits(tubs.rIn());                // inner radius
  double rOut = convertUnits(tubs.rOut());              // outer radius
  double startPhi = tubs.startPhi();                    // angular start of the tube-section
  double deltaPhi = tubs.deltaPhi();                    // angular span of the tube-section
  double cutAtStart = convertUnits(tubs.cutAtStart());  // truncation at begin of the tube-section
  double cutAtDelta = convertUnits(tubs.cutAtDelta());  // truncation at end of the tube-section
  bool cutInside = tubs.cutInside();                    // true, if truncation is on the inner side of the tube-section

  LogTrace("magneticfield::volumeHandle")
      << "zhalf      " << zhalf << newln << "rIn        " << rIn << newln << "rOut       " << rOut << newln
      << "startPhi   " << startPhi << newln << "deltaPhi   " << deltaPhi << newln << "cutAtStart " << cutAtStart
      << newln << "cutAtDelta " << cutAtDelta << newln << "cutInside  " << cutInside;

  //
  //  GlobalVector planeXAxis = refPlane->toGlobal(LocalVector( 1, 0, 0));
  //  GlobalVector planeYAxis = refPlane->toGlobal(LocalVector( 0, 1, 0));
  GlobalVector planeZAxis = refPlane->toGlobal(LocalVector(0, 0, 1));

  Sides cyl_side;
  Sides plane_side;
  double rCyl = 0;
  double rCentr = 0;
  if (cutInside) {
    cyl_side = outer;
    rCyl = rOut;
    plane_side = inner;
    rCentr = (max(max(rIn, cutAtStart), cutAtDelta) + rOut) / 2.;
  } else {
    cyl_side = inner;
    rCyl = rIn;
    plane_side = outer;
    rCentr = (rIn + min(min(rOut, cutAtStart), cutAtDelta)) / 2.;
  }

  // Recalculate center: (for a DDTruncTubs, DDD gives 0,0,Z)
  // The R of center is in the middle of the arc of cylinder fully contained
  // in the trunctubs.
  Geom::Phi<double> phiCenter(startPhi + deltaPhi / 2.);
  center_ = refPlane->toGlobal(LocalPoint(rCentr * cos(phiCenter), rCentr * sin(phiCenter), 0.));

  // FIXME!! Actually should recompute RN from pos_Rplane; should not
  // matter anyhow
  theRN = rCentr;

  // For simplicity, the position of the cut plane is taken at one of the
  // phi edges, where R is known
  // FIXME! move to center of plane
  // FIXME: compute. in double prec (not float)
  GlobalPoint pos_Rplane(refPlane->toGlobal(LocalPoint(LocalPoint::Cylindrical(cutAtStart, startPhi, 0.))));

  // Compute angle of the cut plane
  // Got any easier formula?
  // FIXME: check that it still holds for cutAtStart > cutAtDelta
  double c = sqrt(cutAtDelta * cutAtDelta + cutAtStart * cutAtStart - 2 * cutAtDelta * cutAtStart * cos(deltaPhi));
  double alpha = startPhi - asin(sin(deltaPhi) * cutAtDelta / c);
  GlobalVector x_Rplane = refPlane->toGlobal(LocalVector(cos(alpha), sin(alpha), 0));
  Surface::RotationType rot_R(planeZAxis, x_Rplane);

  // FIXME: use builder
  surfaces[plane_side] = new Plane(pos_Rplane, rot_R);
  surfaces[cyl_side] = new Cylinder(rCyl, Surface::PositionType(0, 0, center_.z()), Surface::RotationType());

  // Build lateral surfaces.
  // Note that with the choice of center descrived above, the
  // plane position (origin of r.f.) of the smallest phi face
  // will be its center, while this is not true for the largest phi face.
  buildPhiZSurf(startPhi, deltaPhi, zhalf, rCentr);

  if (debug) {
    LogTrace("magneticfield::volumeHandle")
        << "pos_Rplane    " << pos_Rplane << " " << pos_Rplane.perp() << " " << pos_Rplane.phi() << newln
        << "rot_R         " << surfaces[plane_side]->toGlobal(LocalVector(0., 0., 1.)) << " phi "
        << surfaces[plane_side]->toGlobal(LocalVector(0., 0., 1.)).phi() << newln << "cyl radius     " << rCyl;

    //   // Check ordering.
    if ((pos_Rplane.perp() < rCyl) != cutInside) {
      LogTrace("magneticfield::volumeHandle") << "*** WARNING: pos_outer < pos_inner ";
    }
  }
  // Save volume boundaries
  theRMin = rIn;
  theRMax = rOut;
  thePhiMin = surfaces[phiminus]->position().phi();
}
