/*
 *  Compute parameters for a truncated cylinder section. 
 *  In the current geometry TruncTubs are described starting from startPhi = 0,
 *  so that the volume at ~pi/2 has a nonzero rotation, contrary to any other 
 *  volume type in the same geometry. This is not a problem as long as proper
 *  local to global transformation are used.
 *  
 *
 *  $Date: 2009/04/07 15:09:45 $
 *  $Revision: 1.5 $
 *  \author N. Amapane - INFN Torino
 */

void MagGeoBuilderFromDDD::volumeHandle::buildTruncTubs(const DDExpandedView &fv) {
  if (MagGeoBuilderFromDDD::debug) cout << "Building TruncTubs surfaces...: " <<endl;

   DDTruncTubs tubs(solid);

  double zhalf    = tubs.zHalf()/cm;   // half of the z-Axis
  double rIn      = tubs.rIn()/cm;     // inner radius
  double rOut     = tubs.rOut()/cm;    // outer radius
  double startPhi = tubs.startPhi();// angular start of the tube-section
  double deltaPhi = tubs.deltaPhi();// angular span of the tube-section
  double cutAtStart = tubs.cutAtStart()/cm; // truncation at begin of the tube-section
  double cutAtDelta = tubs.cutAtDelta()/cm; // truncation at end of the tube-section
  bool   cutInside  = tubs.cutInside();  // true, if truncation is on the inner side of the tube-section

  if (MagGeoBuilderFromDDD::debug) cout << "zhalf      " << zhalf    << endl
		  << "rIn        " << rIn      << endl
		  << "rOut       " << rOut     << endl
		  << "startPhi   " << startPhi << endl
		  << "deltaPhi   " << deltaPhi << endl
		  << "cutAtStart " << cutAtStart << endl
		  << "cutAtDelta " << cutAtDelta << endl
		  << "cutInside  " << cutInside  << endl;

  //
  //  GlobalVector planeXAxis = refPlane->toGlobal(LocalVector( 1, 0, 0));
  //  GlobalVector planeYAxis = refPlane->toGlobal(LocalVector( 0, 1, 0));
  GlobalVector planeZAxis = refPlane->toGlobal(LocalVector( 0, 0, 1));


  Sides cyl_side;
  Sides plane_side;
  double rCyl=0;
  double rCentr=0;
  if (cutInside) {
    cyl_side = outer;
    rCyl = rOut;
    plane_side = inner;
    rCentr = (max(max(rIn,cutAtStart),cutAtDelta)+rOut)/2.;
  } else {
    cyl_side = inner;
    rCyl = rIn;
    plane_side = outer;
    rCentr = (rIn+min(min(rOut,cutAtStart),cutAtDelta))/2.;
  }

  // Recalculate center: (for a DDTruncTubs, DDD gives 0,0,Z)
  // The R of center is in the middle of the arc of cylinder fully contained 
  // in the trunctubs.
  Geom::Phi<double> phiCenter(startPhi + deltaPhi/2.);
  center_ = refPlane->toGlobal(LocalPoint(rCentr*cos(phiCenter),
 					  rCentr*sin(phiCenter), 0.));
  
  // FIXME!! Actually should recompute RN from pos_Rplane; should not 
  // matter anyhow
  theRN = rCentr; 
  
  // For simplicity, the position of the cut plane is taken at one of the
  // phi edges, where R is known 
  // FIXME! move to center of plane 
  // FIXME: compute. in double prec (not float)
  GlobalPoint pos_Rplane(refPlane->toGlobal(LocalPoint(LocalPoint::Cylindrical(cutAtStart, startPhi, 0.))));

  // Compute angle of the cut plane
  // Got any easier formula?
  // FIXME: check that it still holds for cutAtStart > cutAtDelta
  double c = sqrt(cutAtDelta*cutAtDelta +
		  cutAtStart*cutAtStart -
		  2*cutAtDelta*cutAtStart*cos(deltaPhi));
  double alpha = startPhi - asin(sin(deltaPhi)*cutAtDelta/c);
  GlobalVector x_Rplane = refPlane->toGlobal(LocalVector(cos(alpha),sin(alpha),0));
  Surface::RotationType rot_R(planeZAxis, x_Rplane);

  // FIXME: use builder
  surfaces[plane_side] = new Plane(pos_Rplane, rot_R);
  surfaces[cyl_side] = new Cylinder(rCyl, Surface::PositionType(0,0,center_.z()),
				    Surface::RotationType());
				  

  // Build lateral surfaces.
  // Note that with the choice of center descrived above, the 
  // plane position (origin of r.f.) of the smallest phi face
  // will be its center, while this is not true for the largest phi face.
  buildPhiZSurf(startPhi, deltaPhi, zhalf, rCentr);  

  if (MagGeoBuilderFromDDD::debug) {
    cout << "pos_Rplane    " << pos_Rplane << " "
	 << pos_Rplane.perp() << " " << pos_Rplane.phi() << endl 
	 << "rot_R         " << surfaces[plane_side]->toGlobal(LocalVector(0.,0.,1.)) << " phi " << surfaces[plane_side]->toGlobal(LocalVector(0.,0.,1.)).phi() <<    endl 
	 << "cyl radius    " << rCyl << endl;

//   // Check ordering.
    if ((pos_Rplane.perp() < rCyl)  != cutInside) {      
      cout << "*** WARNING: pos_outer < pos_inner " << endl;
    }
  }
  
  // Save volume boundaries
  theRMin = rIn;
  theRMax = rOut;
  thePhiMin = surfaces[phiminus]->position().phi();
}
