/*
 *  Compute parameters for a cone section 
 *
 *  $Date: 2008/04/23 14:00:24 $
 *  $Revision: 1.6 $
 *  \author N. Amapane - INFN Torino
 */

#include "DataFormats/GeometrySurface/interface/SimpleConeBounds.h"

void MagGeoBuilderFromDDD::volumeHandle::buildCons(const DDExpandedView &fv) {
  if (MagGeoBuilderFromDDD::debug) cout << "Building cons surfaces...: " <<endl;
  
  DDCons cons(solid);
  
  double zhalf      = cons.zhalf()/cm;     
  double rInMinusZ  = cons.rInMinusZ()/cm; 
  double rOutMinusZ = cons.rOutMinusZ()/cm;
  double rInPlusZ   = cons.rInPlusZ()/cm;  
  double rOutPlusZ  = cons.rOutPlusZ()/cm; 
  double startPhi   = cons.phiFrom();
  double deltaPhi   = cons.deltaPhi();

  if (MagGeoBuilderFromDDD::debug) cout << "zhalf      " << zhalf      << endl
		  << "rInMinusZ  " << rInMinusZ  << endl
		  << "rOutMinusZ " << rOutMinusZ << endl
		  << "rInPlusZ   " << rInPlusZ   << endl
		  << "rOutPlusZ  " << rOutPlusZ  << endl
		  << "phiFrom    " << startPhi   << endl
		  << "deltaPhi   " << deltaPhi   << endl;

  // recalculate center: (for a DDCons, DDD gives 0,0,Z)
  double rZmin   = (rInMinusZ+rOutMinusZ)/2.;
  double rZmax   = (rInPlusZ +rOutPlusZ)/2.;
  double rCentr   = (rZmin+rZmax)/2.;
  Geom::Phi<double> phiCenter(startPhi + deltaPhi/2.);
  center_ = refPlane->toGlobal(LocalPoint(rCentr*cos(phiCenter),
					  rCentr*sin(phiCenter), 0.));
  // For cons and tubs RN = R.
  theRN = rCentr;
  
  const double epsilon = 1e-5;

  if (abs(rInPlusZ-rInMinusZ)<epsilon) { // Cylinder
    // FIXME: use builder
    surfaces[inner] = new Cylinder(rInMinusZ, Surface::PositionType(),
				      Surface::RotationType());
				     

  } else { // Cone
    // FIXME: trick to compute vertex and angle...
    SimpleConeBounds cb(center_.z()-zhalf, rInMinusZ, rInMinusZ,
			center_.z()+zhalf, rInPlusZ, rInPlusZ);

    surfaces[inner] = new Cone(Surface::PositionType(0,0,center_.z()),
				  Surface::RotationType(),
				  cb.vertex(),
				  cb.openingAngle());
  }
  

  if (abs(rOutPlusZ-rOutMinusZ)<epsilon) { // Cylinder
    surfaces[outer] = new Cylinder(rOutMinusZ, Surface::PositionType(0,0,center_.z()),
				      Surface::RotationType());
				  
    
  } else { // Cone
    // FIXME: trick to compute vertex and angle...
    SimpleConeBounds cb(center_.z()-zhalf, rOutMinusZ, rOutMinusZ,
			center_.z()+zhalf, rOutPlusZ, rOutPlusZ);

    surfaces[outer] = new Cone(Surface::PositionType(0,0,center_.z()),
				  Surface::RotationType(),
				  cb.vertex(),
				  cb.openingAngle());

    if (MagGeoBuilderFromDDD::debug) cout << "Outer surface: cone, vtx: " <<  cb.vertex()
				<< " angle " << cb.openingAngle() << endl;

//     cout << (cb.vertex().z()-center_.z()-zhalf) *tan(cb.openingAngle()) << endl;
//     cout << (cb.vertex().z()-center_.z()+zhalf) *tan(cb.openingAngle()) << endl;

  }

  // All other surfaces
  buildPhiZSurf(startPhi, deltaPhi, zhalf, rCentr);  

  // Check ordering. //FIXME
//   if (dynamic_cast<const BoundCone*>(&(*surfaces[outer]))->bounds().width() <
//       dynamic_cast<const BoundCone*>(&(*surfaces[inner]))->bounds().width()){
//     cout << "*** WARNING: pos_outer < pos_inner " << endl;
//   }

  // Save volume boundaries
  theRMin = min(rInMinusZ, rInPlusZ);
  theRMax = max(rOutMinusZ, rOutPlusZ);
  thePhiMin = surfaces[phiminus]->position().phi();
}
