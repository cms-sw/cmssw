#include "FWCore/Framework/interface/ESProducer.h"
#include "FWCore/ParameterSet/interface/ParameterSet.h"
#include "FWCore/Framework/interface/ESTransientHandle.h"
#include "FWCore/Framework/interface/ESHandle.h"
#include "FWCore/Framework/interface/ModuleFactory.h"
#include "Geometry/CaloTopology/interface/ShashlikGeometry.h"
#include "Geometry/CaloTopology/src/ShashlikGeometryBuilderFromDDD.h"
#include "Geometry/HGCalCommonData/interface/ShashlikDDDConstants.h"
#include "Geometry/Records/interface/ShashlikNumberingRecord.h"

class ShashlikGeometryESProducer : public edm::ESProducer
{
public:

  ShashlikGeometryESProducer( const edm::ParameterSet & );
  virtual ~ShashlikGeometryESProducer( void );

  boost::shared_ptr<ShashlikGeometry>  produce(const ShashlikGeometryRecord & record);
};

ShashlikGeometryESProducer::ShashlikGeometryESProducer( const edm::ParameterSet & )
{
  setWhatProduced( this );
}

ShashlikGeometryESProducer::~ShashlikGeometryESProducer( void ) 
{}

boost::shared_ptr<ShashlikGeometry>
ShashlikGeometryESProducer::produce( const ShashlikGeometryRecord & record )
{
  edm::ESTransientHandle<DDCompactView> cpv;
  record.getRecord<IdealGeometryRecord>().get( cpv );
  edm::ESHandle<ShashlikDDDConstants> shdc;
  record.getRecord<ShashlikNumberingRecord>().get( shdc );
  ShashlikGeometryBuilderFromDDD builder;
  return boost::shared_ptr<ShashlikGeometry>( builder.build( &(*cpv), *shdc ));
}

DEFINE_FWK_EVENTSETUP_MODULE( ShashlikGeometryESProducer );
