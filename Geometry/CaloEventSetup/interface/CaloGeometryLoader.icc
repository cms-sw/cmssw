#ifndef GEOMETRY_ECALGEOMETRYLOADER_ICC
#define GEOMETRY_ECALGEOMETRYLOADER_ICC

#include "CondFormats/Alignment/interface/AlignTransform.h"
#include "Geometry/CaloEventSetup/interface/CaloGeometryLoader.h"
#include "Geometry/CaloGeometry/interface/CaloCellGeometry.h"
#include "Geometry/CaloGeometry/interface/CaloGenericDetId.h"

#include "DetectorDescription/Core/interface/DDCompactView.h"
#include "DetectorDescription/Core/interface/DDCurrentNamespace.h"
#include "DetectorDescription/Core/interface/DDLogicalPart.h"
#include "DetectorDescription/Core/interface/DDSolid.h"
#include "DetectorDescription/Core/interface/DDMaterial.h"
#include "DetectorDescription/Core/interface/DDTransform.h"
#include "DetectorDescription/Core/interface/DDCompactView.h"
#include "DetectorDescription/Core/interface/DDExpandedView.h"
#include "DetectorDescription/Core/interface/DDSpecifics.h"
#include "DetectorDescription/Core/interface/DDName.h"
#include "DetectorDescription/Core/interface/DDScope.h"
#include "DetectorDescription/Core/interface/DDFilter.h"

#include "CLHEP/Units/GlobalSystemOfUnits.h"

#include <boost/algorithm/string/predicate.hpp>

#include <vector>

template <class T>
typename CaloGeometryLoader<T>::PtrType CaloGeometryLoader<T>::load(const DDCompactView* cpv,
                                                                    const Alignments* alignments,
                                                                    const Alignments* globals) {
  PtrType geom = std::make_unique<T>();

  makeGeometry(cpv, dynamic_cast<T*>(geom.get()), alignments, globals);

  return geom;
}

template <class T>
typename CaloGeometryLoader<T>::PtrType CaloGeometryLoader<T>::load(const cms::DDCompactView* cpv,
                                                                    const Alignments* alignments,
                                                                    const Alignments* globals) {
  PtrType geom = std::make_unique<T>();

  makeGeometry(cpv, dynamic_cast<T*>(geom.get()), alignments, globals);

  return geom;
}

template <class T>
void CaloGeometryLoader<T>::makeGeometry(const DDCompactView* cpv,
                                         T* geom,
                                         const Alignments* alignments,
                                         const Alignments* globals) {
  DDAndFilter<DDSpecificsMatchesValueFilter, DDSpecificsMatchesValueFilter> filter(
      DDSpecificsMatchesValueFilter{DDValue("SensitiveDetector", "EcalSensitiveDetector", 0)},
      DDSpecificsMatchesValueFilter{DDValue("ReadOutName", T::hitString(), 0)});

  DDFilteredView fv0(*cpv, filter);

  fillNamedParams(fv0, geom);

  geom->allocateCorners(T::k_NumberOfCellsForCorners);
  geom->allocatePar(T::k_NumberOfParametersPerShape * T::k_NumberOfShapes, T::k_NumberOfParametersPerShape);

  DDFilteredView fv(*cpv, filter);

  unsigned int counter(0);
  for (bool doSubDets = fv.firstChild(); doSubDets; doSubDets = fv.nextSibling()) {
    const DDSolid& solid(fv.logicalPart().solid());
    if (boost::starts_with(solid.name().name(), "EA")) {
      continue;
    }
    ++counter;

    const ParmVec& parameters(solid.parameters());

    DD3Vector x, y, z;
    fv.rotation().GetComponents(x, y, z);
    const CLHEP::HepRep3x3 temp(x.X(), y.X(), z.X(), x.Y(), y.Y(), z.Y(), x.Z(), y.Z(), z.Z());
    const CLHEP::HepRotation hr(temp);
    const CLHEP::Hep3Vector h3v(fv.translation().X(), fv.translation().Y(), fv.translation().Z());
    const HepGeom::Transform3D ht3d(hr,  // only scale translation
                                    k_ScaleFromDDDtoGeant * h3v);

    const DetId id(getDetIdForDDDNode(fv));

    const unsigned int which(geom->alignmentTransformIndexLocal(id));

    assert(nullptr == alignments || which < alignments->m_align.size());

    const AlignTransform* at(nullptr == alignments ? nullptr : &alignments->m_align[which]);

    assert(nullptr == at || (geom->alignmentTransformIndexLocal(DetId(at->rawId())) == which));

    const unsigned int gIndex(geom->alignmentTransformIndexGlobal(id));

    const AlignTransform* globalT(
        nullptr == globals ? nullptr : (globals->m_align.size() > gIndex ? &globals->m_align[gIndex] : nullptr));

    const HepGeom::Transform3D atr(
        nullptr == at ? ht3d
                      : (nullptr == globalT ? at->transform() * ht3d : at->transform() * globalT->transform() * ht3d));

    fillGeom(geom, parameters, atr, id, k_ScaleFromDDDtoGeant);
  }

  assert(counter <= T::k_NumberOfCellsForCorners);

  geom->initializeParms();
}

template <class T>
void CaloGeometryLoader<T>::makeGeometry(const cms::DDCompactView* cpv,
                                         T* geom,
                                         const Alignments* alignments,
                                         const Alignments* globals) {
  cms::DDFilteredView fv(cpv->detector(), cpv->detector()->worldVolume());

  fillNamedParams(fv, geom);

  geom->allocateCorners(T::k_NumberOfCellsForCorners);
  geom->allocatePar(T::k_NumberOfParametersPerShape * T::k_NumberOfShapes, T::k_NumberOfParametersPerShape);

  std::string attribute = "ReadOutName";
  cms::DDSpecParRefs ref;
  const cms::DDSpecParRegistry& mypar = cpv->specpars();
  mypar.filter(ref, attribute, T::hitString());
  fv.mergedSpecifics(ref);

  unsigned int counter(0);
  while (fv.firstChild()) {
    if (boost::starts_with(fv.name(), "EA")) {
      continue;
    }
    ++counter;

    const ParmVec& parameters(fv.parameters());

    DD3Vector x, y, z;
    fv.rotation().GetComponents(x, y, z);
    const CLHEP::HepRep3x3 temp(x.X(), y.X(), z.X(), x.Y(), y.Y(), z.Y(), x.Z(), y.Z(), z.Z());
    const CLHEP::HepRotation hr(temp);
    const CLHEP::Hep3Vector h3v(fv.translation().X(), fv.translation().Y(), fv.translation().Z());
    const HepGeom::Transform3D ht3d(hr,  // only scale translation
                                    k_ScaleFromDD4HeptoGeant * h3v);

    const DetId id(getDetIdForDD4HepNode(fv));

    const unsigned int which(geom->alignmentTransformIndexLocal(id));

    assert(nullptr == alignments || which < alignments->m_align.size());

    const AlignTransform* at(nullptr == alignments ? nullptr : &alignments->m_align[which]);

    assert(nullptr == at || (geom->alignmentTransformIndexLocal(DetId(at->rawId())) == which));

    const unsigned int gIndex(geom->alignmentTransformIndexGlobal(id));

    const AlignTransform* globalT(
        nullptr == globals ? nullptr : (globals->m_align.size() > gIndex ? &globals->m_align[gIndex] : nullptr));

    const HepGeom::Transform3D atr(
        nullptr == at ? ht3d
                      : (nullptr == globalT ? at->transform() * ht3d : at->transform() * globalT->transform() * ht3d));

    fillGeom(geom, parameters, atr, id, k_ScaleFromDD4HeptoGeant);
  }

  assert(counter <= T::k_NumberOfCellsForCorners);

  geom->initializeParms();
}

template <class T>
unsigned int CaloGeometryLoader<T>::getDetIdForDDDNode(const DDFilteredView& fv) {
  // perform some consistency checks
  // get the parents and grandparents of this node

  const DDGeoHistory& parents(fv.geoHistory());
  const DDGeoHistory::size_type psize(parents.size());

  EcalBaseNumber baseNumber;
  baseNumber.setSize(psize);

  for (unsigned int i = 1; i <= psize; ++i) {
    baseNumber.addLevel(parents[psize - i].logicalPart().name().name(), parents[psize - i].copyno());
  }

  return m_scheme.getUnitID(baseNumber);
}

template <class T>
unsigned int CaloGeometryLoader<T>::getDetIdForDD4HepNode(const cms::DDFilteredView& fv) {
  // perform some consistency checks
  // get the parents and grandparents of this node

  const std::string path(fv.path());
  auto psize = fv.copyNos().size();

  EcalBaseNumber baseNumber;
  baseNumber.setSize(psize);

  size_t n = path.find("/") + 1;
  edm::LogVerbatim("CaloGeometryBuilder") << path << " n " << n;
  size_t start = n;
  std::string det(""), num("");
  for (size_t i = n; i <= path.size(); ++i) {
    if (i == path.size() || path[i] == '/') {
      num = path.substr(start, i - start);
      start = i + 1;
      baseNumber.addLevel(det, std::stoi(num));
    } else if (path[i] == ':') {
      start = i + 1;
    } else if (path[i] == '_') {
      det = path.substr(start, i - start);
      start = i + 1;
    }
  }

  return m_scheme.getUnitID(baseNumber);
}

#endif
