#!/usr/bin/env perl
#
# Created by: Shahram Rahatlou
#             University of Rome & INFN
#             11 September 2006
#  $Id: addpkg,v 1.20 2010/04/12 08:18:33 muzaffar Exp $
#
use strict;
use warnings;
use Getopt::Long;
use Cwd;

my $file;
my $doHelp;
my $pkgquery;
my $quiet;
my $reversePrint;
my $tc; # tag collector format: <package> <tag>

GetOptions("file|f=s" => \$file,
           "query|q" => \$pkgquery,
           "quiet|z" => \$quiet,
	   "reverse|r" => \$reversePrint,
           "help|h" => \$doHelp);

#-- main start here

my $cvsOpt="";
my $reltags=undef;
$cvsOpt="-Q" if ( defined $quiet);

if( defined $doHelp )   {  usage(); exit 0;}

# make sure cvs is setup
die "ERROR: CVS not set. Do |project CMSSW| first\n" unless(defined $ENV{"CVSROOT"});

my $localtop=&getLocalTop();
die "ERROR: Could not find developers area base path. Please run this script from a developer area.\n" if ($localtop eq "");

my $releasetop=&getReleaseTop($localtop);
die "ERROR: Could not find release base path. Please run this script from a developer area.\n" if ($releasetop eq "");

my $taglist = "${releasetop}/src/PackageList.cmssw";
die "ERROR: Cannot find release package/tag list at $taglist\n" if (!-e $taglist);

my $exitcode=0;
if (!-e "${localtop}/src"){system("mkdir ${localtop}/src");}
if(!(defined $file)) {
    chdir("${localtop}/src");
    # addpkg <package> : use default tag for the release - 1 argument
    # addpkg <package> <tag>: use tag provided by user. simple cvs co - 2 arguments
    if ( $#ARGV > 0){
	$exitcode+=addTag($ARGV[0],$ARGV[1]);
    }
    else{
	$exitcode+=addTag($ARGV[0]);
    }
}
else{
    # addpkg -f file: checkout tags provided in the file
    # make sure file exists
    unless(-f $file) {
        die "file <$file> does not exist\n";
    }

    # read in packages and tags from file
    open INFILE, "<$file";

    chdir("${localtop}/src");
    while(my $line = <INFILE>) {
        chomp $line;
        $line =~ s/#.*//;
        my ($tag, $package);
        $tag="";
        my @tpS=split(' ',$line);
        my $len=@tpS;
        next if ($len<1);
        $package=$tpS[0];
        $tag=$tpS[1] if ($len>1);

       if( !(isPackage($package)==1) && !(isSubsystem($package))) { # exchange tag w/ package
           my $tt = $tag;
           $tag = $package;
           $package = $tt;
       }
       if ($tag eq "") {
           $exitcode+=addTag($package);
       }
       else{
	   $exitcode+=addTag($package,$tag);
       }
    }
}
if ($exitcode>0){$exitcode=1;}
exit($exitcode);
# -- main ends here

#-----------
sub usage {
#-----------
print STDOUT <<ENDHELP;
addpkg [option]

  usage:      --help|-h          Print this message
              --query|-q         Determine the tag used in the release and 
                                 print it. Do not run the actual cvs command. 
              --file|-f <file>   Checkout tags in <file>. Each line must 
                                 contain one tag and one package
              --quiet|-z         Pass -Q option to cvs
              --reverse|-r       Print <tag> <package> instead of <package> <tag> (eg, with -q)

  Typical use of addpkg:
      addpkg <package>       : Checkout tag of <package> used in the release
                               (<package> can either be a package or subsystem)
      addpkg <package> <tag> : Checkout the specified tag <tag>. Same as 
                               cvs co -r <tag> <package>
                               (<package> can either be a package or subsystem)
                               (for subsystems, only packages in the release are include)
      addpkg -f <file>       : Checkout packages provided in <file>. Supports 
                               both formats:
                                 <package> <tag>
                                   or
                                 <tag> <package>
                               (specification of subsystems with -f is not supported) 
ENDHELP
exit 0;
}

sub isPackage {
    my $name=$_[0];
    my $tname=getPackageName($name);
    if ($tname ne $name) { print "HERE:$tname\n"; }
    if ($tname =~ m/^[A-Z][a-zA-Z0-9]+\/[a-zA-Z][a-zA-Z0-9]+$/) {
	return 1;
    }
    return 0;
}

sub getPackageName {
    my $name=$_[0];
    my $tname=$name;
    my @sp1=split('/',$name);
    my $len=@sp1;
    if ($len>2) {
	$tname="$sp1[$len-2]/$sp1[$len-1]";
    }
    return $tname;
}

sub isSubsystem {
    my $name=$_[0];
    if ($name =~ m/^[A-Z][a-zA-Z0-9]+$/) {
	return 1;
    }
    return 0;
}

sub addTag {
    my @args=@_;

    my $package = $args[0];
    my $isSubsystem=0;

    die "Bad package. You must use Subsystem(/Package) format\n" if( !(isPackage($package)) && !(isSubsystem($package)));

    $isSubsystem= isSubsystem($package);
    my $tagrel = ""; 
    my $tagco = ""; 
    my $tagaction = "";
# Get the release tag if the user has not provided a tag or if the user
# is querying the release tag

# user packages must specify a tag so they are simple..
    my $realPackage=getPackageName($package);
    if ($realPackage ne $package) {
	if ( $#args < 1 ) {
	    die "For packages not in the release, you must specify a tag (package = $package)";
	}
	$tagco = $args[1];   # user provided tag
	$reversePrint ? print "Checking out $tagco $package (into $realPackage)\n" : print "Checking out $package $tagco (into $realPackage)\n";
	system("cvs $cvsOpt co -r $tagco -d $realPackage $package"); 
	return $?;
    }

# user supplies a tag and we have a package not a subsystem
    if ($#args == 1 && $isSubsystem==0) {
	$tagco = $args[1];   # user provided tag
	$tagaction = "specified";
	$reversePrint ? print "Checking out $tagco $package\n" : print "Checking out $package $tagco\n";
	system("cvs $cvsOpt co -r $tagco $package"); 
	return $?;
    }

#otherwise we have a complicated case - read the list of packages
#and look for a matching package or subsystem in the release and check out the 
#right tag
    $tagaction = "release";
    my $code=0;
    if (!defined $reltags){$reltags=&readTags($taglist);}
    foreach my $thepack (keys %$reltags) {
        my $thetag = $reltags->{$thepack};
	(my $thesubsys,my $thesubpack)= split('/',$thepack);
	if ( ($thepack eq $package) || ( ($isSubsystem==1) && ($thesubsys eq $package) ) ) { 
	    $tagrel = $thetag; 
	    if ($#args == 1) {
		$tagco = $args[1];   # user provided tag
		$reversePrint  ? print "Checking out $tagco $thepack\n" : print "Checking out $thepack $tagco\n";
		system("cvs $cvsOpt co -r $tagco $thepack"); 
		$code += $?;
	    }
	    else{
		if(defined $pkgquery) {
		    $reversePrint ? print "$tagrel $thepack\n" : print "$thepack $tagrel\n";
		}	
		else{
		    $reversePrint ? print "Checking out $tagrel $thepack\n" : print "Checking out $thepack $tagrel\n";
		    system("cvs $cvsOpt co -r $tagrel $thepack"); 
		    $code += $?;
		}
	    }
	}
    }
    die "No package <$package> found in the release.\n" if( $tagrel eq "" );
    return $code;
}

sub readTags(){
    my ($taglist)=@_;
    my $cache={};
    my $ref;
    if (open($ref,$taglist)) {
        while(my $l=<$ref>) {
            chomp $l;
	    if ($l=~/^\s*(#.*|)$/){next;}
	    my ($pk,$tag)=split '\s+', $l;
	    $cache->{$pk}=$tag;
        }
	close($ref);
    }
    else {
      die "ERROR: Can not open file for reading: $taglist\n";
    }
    return $cache;
}

sub getLocalTop(){
    use File::Basename;
    my $dir=getcwd;
    my $subdir=".SCRAM";
    while((!-d "${dir}/${subdir}") && ($dir!~/^[\.\/]$/)){$dir=dirname($dir);}
    if(-d "${dir}/${subdir}"){return $dir;}
    return ""; 
}

sub getReleaseTop(){
    my ($dev)=@_;
    &setArch();
    my $reltop="";
    if (-f "${dev}/.SCRAM/$ENV{SCRAM_ARCH}/Environment"){
        $reltop=`cat ${dev}/.SCRAM/$ENV{SCRAM_ARCH}/Environment | grep '^RELEASETOP=' | sed 's|RELEASETOP=||'`; chomp $reltop;
    }
    return $reltop;
}

sub setArch(){
    if (!defined $ENV{SCRAM_ARCH}){
        my $arch=`scram arch`; chomp $arch;
        $ENV{SCRAM_ARCH}=$arch;
    }
}
