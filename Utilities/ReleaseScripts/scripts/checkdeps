#!/usr/bin/env perl
#
# $Id: checkdeps,v 1.15 2011/07/01 08:27:50 muzaffar Exp $
#
# Created by: David Lange
#             LLNL
#             12 September 207
#
use strict;
use warnings;
use Getopt::Long;
use Cwd;

#Idea: diff checked out packages.
#     looking for changed headers
#     find all packages that depend on those headers
#     print that list.

#if any argument, print help and exit 

my $poisondir="poison";
my $cvsOpt="";
my $checkout=0;
my $checkpython=0;
my $checkheader=0;
my $checkbuildfile=0;
my $printFileNames=0;
my $poison_includes=undef;
my $poison_only=0;
my $jobs=4;
 
while (my $arg=shift) {
    if ( $arg eq "-a" ) {
	$checkout=1;
	if (!defined $poison_includes) {$poison_includes=1;}
    }
    elsif ( $arg eq "-p" ) {
	$checkpython=1;
    }
    elsif ( $arg eq "-q" ) {
	$cvsOpt="$cvsOpt -Q";
    }
    elsif ( $arg eq "-h" ) {
	$checkheader=1;
    }
    elsif ( $arg eq "-b" ) {
	$checkbuildfile=1;
    }
    elsif ( $arg eq "-f" ) {
	$printFileNames=1;
    }
    elsif ( $arg eq "-d" ) {
	$poison_includes=0;
    }
    elsif ( $arg eq "-D" ) {
	$poison_only=1;
    }
    elsif ( $arg eq "-j" ) {
        $arg = shift;
	if ($arg!~/^\d+$/){die "Error: Invalid value '$arg' use with -j command-line argument.\n";}
	$jobs=int($arg);
        if ($jobs<1){$jobs=1;}
    }
    elsif ( $arg eq "-A" ) {
        $checkpython=1;
        $checkheader=1;
        $checkbuildfile=1;
    }
    else{
	print "checkdeps:\n",
              "   Utility to check your local development area against the CMSSW release.\n",
              "   Any modified header files or python modules are found and the package\n",
              "   dependencies of these files will be returned. addpkg-ing these packages\n",
              "   and rebuilding them should provide a full and consistent build.\n",
              "\nUsage: \n",
              "   -p look for python modules and their dependencies  (ON by default)\n",
              "   -h look for header files and their dependencies    (ON by default)\n",
              "   -b look for BuildFile files and their dependencies (OFF by default)\n",
              "   -f print name of changed file name instead of type of dependency (OFF by default)\n",
              "   -a will add/checkout the packages into your development area\n",
              "   -A will check all dependencies i.e. header (-h), python(-p) and BuildFile(-b)\n",
              "   -d do not create dummy copy of deleted files in ${poisondir} directory. Dummy copies\n",
              "      are useful to find out if deleted headers files are included by other source files.\n",
              "   -D only dummy copy of deleted files in ${poisondir} directory created.\n",
              "      NOTE: all other dependency check/add command-line args are ignored.\n",
              "   -j <N> Run N threads to checkout packages. Default is ${jobs}\n",
              "   -q will pass -Q option to cvs to make it quiet\n\n";
	exit;
    }
}

if ($poison_only) {
    $checkpython=0;
    $checkheader=0;
    $checkbuildfile=0;
    $checkout=0;
    $poison_includes=1;
}
elsif ((!$checkpython) && (!$checkheader) && (!$checkbuildfile)) {
    $checkpython=1;
    $checkheader=1;
}

if(!defined $poison_includes) { $poison_includes = 0; }

# make sure cvs is setup
die "ERROR: CVS not set. Do |project CMSSW| first\n" unless(defined $ENV{"CVSROOT"});

my $localtop=&getLocalTop();
die "ERROR: Could not find developers area base path. Please run this script from a developer area.\n" if ($localtop eq "");

my $releasetop=&getReleaseTop($localtop);
die "ERROR: Could not find release base path. Please run this script from a developer area.\n" if ($releasetop eq "");

my $taglist = "${releasetop}/src/PackageList.cmssw";
die "ERROR: Cannot find release package/tag list at $taglist\n" if (!-e $taglist);

my %vals=();
if ($checkheader){
    my $depfile = "${releasetop}/etc/dependencies/usedby.out.gz";
    die "ERROR: This release appears not to support the functionality of this script (170pre4 and higher). Sorry\n" if (!-e "$depfile");
    &readDependencyInfo("$depfile",\%vals);
}

if ($checkpython) {
    my $depfile = "${releasetop}/etc/dependencies/pyusedby.out.gz";
    &readDependencyInfo("$depfile",\%vals) if (-e "$depfile");
}

if ($checkbuildfile)
{
    my $depfile = "${releasetop}/etc/dependencies/bfusedby.out.gz";
    &readDependencyInfo("$depfile",\%vals) if (-e "$depfile");
}

chdir("${localtop}/src");

# Get the list of packages
my @packages;
foreach my $pack (glob("*/*")){
  if (-d "$pack/.admin"){
    push @packages, $pack;
  }
}

my $tags=&readTags($taglist);
my @changedFiles;
my @deletedFiles;

foreach my $package (@packages) {
    next if ($package =~/^UserCode.*/o);
    next if (!exists $tags->{$package});
    my $reltag=$tags->{$package};
    print ">> Checking $package $reltag\n";
    my $diffs=`cvs -q -n update -r $reltag $package 2>&1`;
    my @diffs=split('\n',$diffs);
    my %msgs=("-" => {}, "x" => {});
    foreach my $diff (@diffs) {
        my $del = 0;
        if ( ($diff =~/^(M)/o) || ($diff =~/^(U)/o) || ($diff =~/^(R)/o) ) {
            if ($1 eq "R"){$del =1;}
            my @sp2=split(' ', $diff);
            $diff = $sp2[1];
        }
        elsif ($diff=~/^\s*cvs\s+update:\s+warning:\s+(.+)\s+was\s+lost\s*$/o){
            $diff = $1; $diff=~s/^.//o; $diff=~s/.$//o;
            $del = 1;
        }
        else {$diff = "";}
        if ($diff) {$msgs{"x"}{$diff}=1;}
        if ($del)  {$msgs{"-"}{$diff}=1;}
    }
    &checkDeleted($package,"${localtop}/src","${releasetop}/src",$msgs{"-"});
    my @files=sort keys %{$msgs{"-"}};
    push(@deletedFiles,@files);
    push(@changedFiles,@files);
    foreach my $diff (@files){print "   - $diff\n"; delete $msgs{"x"}{$diff};}
    @files=sort keys %{$msgs{"x"}};
    push(@changedFiles,@files);
    foreach my $diff (@files){print "   x $diff\n";}
}

&poisonIncludes(\@deletedFiles,$localtop) if ($poison_includes);
if ($poison_only) {exit 0;}

my %recompileList;
foreach my $file (@changedFiles) {
    next if (!(exists $vals{$file}));
    foreach my $dep (@{$vals{$file}}) {
        my @sp=split('/',$dep);
        my $recompile="$sp[0]/$sp[1]";
        if (!(grep {$_ eq $recompile} @packages)) {
            my $scope="header";
            if ($file=~/\.py$/o){$scope="python";}
            elsif($file=~/BuildFile(\.xml|)$/o){$scope="buildfile";}
            $recompileList{$recompile}{$scope}=$file;
        }
    }
}

my @t=sort(keys %recompileList);
my $len=scalar(@t);
if ( $checkout == 0 ) {
    print "Packages to check out and compile: $len\n";
}
else{
    print "Checking out these packages\n";
}

my $exitcode=0;
if ( $len > 0 ) {
    foreach my $pk (@t) {
	if ( $printFileNames == 1 ) {
	    print "$pk (",join(", ",sort values %{$recompileList{$pk}}),")\n";
	} else {
	    print "$pk (",join(", ",sort keys %{$recompileList{$pk}}),")\n";
	}
    }
    if ( $checkout == 1 ) {
        chdir ($localtop);
        use File::Temp qw(tempfile);
        my ($fh,$fname) = tempfile('./tmp/checkdepsXXXXX', UNLINK => 1);;
        foreach my $pk (@t) {
            my $tag = $tags->{$pk};
            print $fh "$pk ",$tags->{$pk},"\n";
        }
        system("cmspm co --n-threads $jobs < $fname");
        $exitcode+=$?;
        close($fh);
    }
}
if ($exitcode>0){$exitcode=1;}
exit($exitcode);

sub readDependencyInfo()
{
  my $file=shift;
  my $cache=shift;
  my $ref;
  open($ref,"gunzip -c $file |") || die "Can not open file for reading: $file\n";
  while  (my $line=<$ref>) { 
    chomp($line);
    my ($file1,$rest)=split(' ',$line,2);
    if ($file1 ne "")
    {
      if (!exists $vals{$file1}){$vals{$file1}=[];}
      push @{$vals{$file1}},split(' ',$rest);
    }
  }
  close($ref);
}

sub readTags(){
    my ($taglist)=@_;
    my $cache={};
    my $ref;
    if (open($ref,$taglist)) {
        while(my $l=<$ref>) {
            chomp $l;
	    if ($l=~/^\s*(#.*|)$/o){next;}
	    my ($pk,$tag)=split '\s+', $l;
	    $cache->{$pk}=$tag;
        }
	close($ref);
    }
    else {
      die "ERROR: Can not open file for reading: $taglist\n";
    }
    return $cache;
}

sub getLocalTop(){
    use File::Basename;
    my $dir=getcwd;
    my $subdir=".SCRAM";
    while((!-d "${dir}/${subdir}") && ($dir!~/^[\.\/]$/o)){$dir=dirname($dir);}
    if(-d "${dir}/${subdir}"){return $dir;}
    return ""; 
}

sub getReleaseTop(){
    my ($dev)=@_;
    &setArch();
    my $reltop="";
    if (-f "${dev}/.SCRAM/$ENV{SCRAM_ARCH}/Environment"){
        $reltop=`cat ${dev}/.SCRAM/$ENV{SCRAM_ARCH}/Environment | grep '^RELEASETOP=' | sed 's|RELEASETOP=||'`; chomp $reltop;
    }
    return $reltop;
}

sub setArch(){
    if (!defined $ENV{SCRAM_ARCH}){
        my $arch=`scram arch`; chomp $arch;
        $ENV{SCRAM_ARCH}=$arch;
    }
}

sub poisonIncludes() {
    my ($deletedFiles,$topdir)=@_;
    use File::Path qw (mkpath rmtree);
    use File::Basename qw(dirname);
    my $poison="${topdir}/${poisondir}";
    if (-d $poison){rmtree($poison);}
    if (scalar(@$deletedFiles)>0) {print ">> Creating dummy files under $poison directory.\n";}
    foreach my $file (@$deletedFiles) {
        my $f="${poison}/${file}";
        my $dir=dirname($f);
        if (!-d $dir){mkpath($dir);}
        my $ref;
        if(!open($ref,">${f}")){die "ERROR: Can not open file for writing: $f\n";}
        print $ref "#error THIS FILE HAS BEEN REMOVED FROM THE PACKAGE.\n";
        close($ref);
        print "   $file\n";
    }
}

sub checkDeleted() {
    my ($rpath,$dev,$rel,$deleted,$add)=@_;
    my $rdir="${rel}/${rpath}";
    if (-d "$rdir") {
        my $ref;
        if(!opendir($ref,"$rdir")){die "ERROR: Can not open directory: $rdir\n";}
        my @files=readdir($ref);
        closedir($ref);
        foreach my $f (@files) {
            if (($f eq "doc") || ($f eq "CVS") || ($f eq "html") || ($f=~/^\./o) || ($f=~/\.pyc/o) || ($f=~/^__init__\.py/o)){next;}
            my $rfile="${rpath}/${f}";
            if (-d "${rdir}/${f}") {
                my $radd=$add;
                if (!-e "${dev}/${rfile}"){$radd=1;}
                &checkDeleted($rfile,$dev,$rel,$deleted,$radd);
            }
            elsif($add || (!-e "${dev}/${rfile}")){$deleted->{$rfile}=1;}
        }
    }
}
