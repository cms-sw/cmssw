// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ROOTFilePB.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dqmstorepb {

namespace {

const ::google::protobuf::Descriptor* ROOTFilePB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ROOTFilePB_reflection_ = NULL;
const ::google::protobuf::Descriptor* ROOTFilePB_Histo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ROOTFilePB_Histo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ROOTFilePB_2eproto() {
  protobuf_AddDesc_ROOTFilePB_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ROOTFilePB.proto");
  GOOGLE_CHECK(file != NULL);
  ROOTFilePB_descriptor_ = file->message_type(0);
  static const int ROOTFilePB_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROOTFilePB, histo_),
  };
  ROOTFilePB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ROOTFilePB_descriptor_,
      ROOTFilePB::default_instance_,
      ROOTFilePB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROOTFilePB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROOTFilePB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ROOTFilePB));
  ROOTFilePB_Histo_descriptor_ = ROOTFilePB_descriptor_->nested_type(0);
  static const int ROOTFilePB_Histo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROOTFilePB_Histo, full_pathname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROOTFilePB_Histo, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROOTFilePB_Histo, streamed_histo_),
  };
  ROOTFilePB_Histo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ROOTFilePB_Histo_descriptor_,
      ROOTFilePB_Histo::default_instance_,
      ROOTFilePB_Histo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROOTFilePB_Histo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROOTFilePB_Histo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ROOTFilePB_Histo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ROOTFilePB_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ROOTFilePB_descriptor_, &ROOTFilePB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ROOTFilePB_Histo_descriptor_, &ROOTFilePB_Histo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ROOTFilePB_2eproto() {
  delete ROOTFilePB::default_instance_;
  delete ROOTFilePB_reflection_;
  delete ROOTFilePB_Histo::default_instance_;
  delete ROOTFilePB_Histo_reflection_;
}

void protobuf_AddDesc_ROOTFilePB_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020ROOTFilePB.proto\022\ndqmstorepb\"\177\n\nROOTFi"
    "lePB\022+\n\005histo\030\001 \003(\0132\034.dqmstorepb.ROOTFil"
    "ePB.Histo\032D\n\005Histo\022\025\n\rfull_pathname\030\001 \002("
    "\t\022\014\n\004size\030\002 \002(\r\022\026\n\016streamed_histo\030\003 \002(\014", 159);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ROOTFilePB.proto", &protobuf_RegisterTypes);
  ROOTFilePB::default_instance_ = new ROOTFilePB();
  ROOTFilePB_Histo::default_instance_ = new ROOTFilePB_Histo();
  ROOTFilePB::default_instance_->InitAsDefaultInstance();
  ROOTFilePB_Histo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ROOTFilePB_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ROOTFilePB_2eproto {
  StaticDescriptorInitializer_ROOTFilePB_2eproto() {
    protobuf_AddDesc_ROOTFilePB_2eproto();
  }
} static_descriptor_initializer_ROOTFilePB_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ROOTFilePB_Histo::kFullPathnameFieldNumber;
const int ROOTFilePB_Histo::kSizeFieldNumber;
const int ROOTFilePB_Histo::kStreamedHistoFieldNumber;
#endif  // !_MSC_VER

ROOTFilePB_Histo::ROOTFilePB_Histo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ROOTFilePB_Histo::InitAsDefaultInstance() {
}

ROOTFilePB_Histo::ROOTFilePB_Histo(const ROOTFilePB_Histo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ROOTFilePB_Histo::SharedCtor() {
  _cached_size_ = 0;
  full_pathname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  size_ = 0u;
  streamed_histo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ROOTFilePB_Histo::~ROOTFilePB_Histo() {
  SharedDtor();
}

void ROOTFilePB_Histo::SharedDtor() {
  if (full_pathname_ != &::google::protobuf::internal::kEmptyString) {
    delete full_pathname_;
  }
  if (streamed_histo_ != &::google::protobuf::internal::kEmptyString) {
    delete streamed_histo_;
  }
  if (this != default_instance_) {
  }
}

void ROOTFilePB_Histo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ROOTFilePB_Histo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ROOTFilePB_Histo_descriptor_;
}

const ROOTFilePB_Histo& ROOTFilePB_Histo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ROOTFilePB_2eproto();  return *default_instance_;
}

ROOTFilePB_Histo* ROOTFilePB_Histo::default_instance_ = NULL;

ROOTFilePB_Histo* ROOTFilePB_Histo::New() const {
  return new ROOTFilePB_Histo;
}

void ROOTFilePB_Histo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_full_pathname()) {
      if (full_pathname_ != &::google::protobuf::internal::kEmptyString) {
        full_pathname_->clear();
      }
    }
    size_ = 0u;
    if (has_streamed_histo()) {
      if (streamed_histo_ != &::google::protobuf::internal::kEmptyString) {
        streamed_histo_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ROOTFilePB_Histo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string full_pathname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_full_pathname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->full_pathname().data(), this->full_pathname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }
      
      // required uint32 size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_streamed_histo;
        break;
      }
      
      // required bytes streamed_histo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_streamed_histo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_streamed_histo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ROOTFilePB_Histo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string full_pathname = 1;
  if (has_full_pathname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->full_pathname().data(), this->full_pathname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->full_pathname(), output);
  }
  
  // required uint32 size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->size(), output);
  }
  
  // required bytes streamed_histo = 3;
  if (has_streamed_histo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->streamed_histo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ROOTFilePB_Histo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string full_pathname = 1;
  if (has_full_pathname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->full_pathname().data(), this->full_pathname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->full_pathname(), target);
  }
  
  // required uint32 size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->size(), target);
  }
  
  // required bytes streamed_histo = 3;
  if (has_streamed_histo()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->streamed_histo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ROOTFilePB_Histo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string full_pathname = 1;
    if (has_full_pathname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->full_pathname());
    }
    
    // required uint32 size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size());
    }
    
    // required bytes streamed_histo = 3;
    if (has_streamed_histo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->streamed_histo());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ROOTFilePB_Histo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ROOTFilePB_Histo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ROOTFilePB_Histo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ROOTFilePB_Histo::MergeFrom(const ROOTFilePB_Histo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_full_pathname()) {
      set_full_pathname(from.full_pathname());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_streamed_histo()) {
      set_streamed_histo(from.streamed_histo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ROOTFilePB_Histo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ROOTFilePB_Histo::CopyFrom(const ROOTFilePB_Histo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ROOTFilePB_Histo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void ROOTFilePB_Histo::Swap(ROOTFilePB_Histo* other) {
  if (other != this) {
    std::swap(full_pathname_, other->full_pathname_);
    std::swap(size_, other->size_);
    std::swap(streamed_histo_, other->streamed_histo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ROOTFilePB_Histo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ROOTFilePB_Histo_descriptor_;
  metadata.reflection = ROOTFilePB_Histo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ROOTFilePB::kHistoFieldNumber;
#endif  // !_MSC_VER

ROOTFilePB::ROOTFilePB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ROOTFilePB::InitAsDefaultInstance() {
}

ROOTFilePB::ROOTFilePB(const ROOTFilePB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ROOTFilePB::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ROOTFilePB::~ROOTFilePB() {
  SharedDtor();
}

void ROOTFilePB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ROOTFilePB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ROOTFilePB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ROOTFilePB_descriptor_;
}

const ROOTFilePB& ROOTFilePB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ROOTFilePB_2eproto();  return *default_instance_;
}

ROOTFilePB* ROOTFilePB::default_instance_ = NULL;

ROOTFilePB* ROOTFilePB::New() const {
  return new ROOTFilePB;
}

void ROOTFilePB::Clear() {
  histo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ROOTFilePB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .dqmstorepb.ROOTFilePB.Histo histo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_histo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_histo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_histo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ROOTFilePB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .dqmstorepb.ROOTFilePB.Histo histo = 1;
  for (int i = 0; i < this->histo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->histo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ROOTFilePB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .dqmstorepb.ROOTFilePB.Histo histo = 1;
  for (int i = 0; i < this->histo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->histo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ROOTFilePB::ByteSize() const {
  int total_size = 0;
  
  // repeated .dqmstorepb.ROOTFilePB.Histo histo = 1;
  total_size += 1 * this->histo_size();
  for (int i = 0; i < this->histo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->histo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ROOTFilePB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ROOTFilePB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ROOTFilePB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ROOTFilePB::MergeFrom(const ROOTFilePB& from) {
  GOOGLE_CHECK_NE(&from, this);
  histo_.MergeFrom(from.histo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ROOTFilePB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ROOTFilePB::CopyFrom(const ROOTFilePB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ROOTFilePB::IsInitialized() const {
  
  for (int i = 0; i < histo_size(); i++) {
    if (!this->histo(i).IsInitialized()) return false;
  }
  return true;
}

void ROOTFilePB::Swap(ROOTFilePB* other) {
  if (other != this) {
    histo_.Swap(&other->histo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ROOTFilePB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ROOTFilePB_descriptor_;
  metadata.reflection = ROOTFilePB_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dqmstorepb

// @@protoc_insertion_point(global_scope)
