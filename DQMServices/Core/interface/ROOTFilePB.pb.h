// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DQMServices/Core/src/ROOTFilePB.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_DQMServices_2fCore_2fsrc_2fROOTFilePB_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_DQMServices_2fCore_2fsrc_2fROOTFilePB_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>   // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_DQMServices_2fCore_2fsrc_2fROOTFilePB_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
  class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_DQMServices_2fCore_2fsrc_2fROOTFilePB_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_DQMServices_2fCore_2fsrc_2fROOTFilePB_2eproto;
namespace dqmstorepb {
  class ROOTFilePB;
  struct ROOTFilePBDefaultTypeInternal;
  extern ROOTFilePBDefaultTypeInternal _ROOTFilePB_default_instance_;
  class ROOTFilePB_Histo;
  struct ROOTFilePB_HistoDefaultTypeInternal;
  extern ROOTFilePB_HistoDefaultTypeInternal _ROOTFilePB_Histo_default_instance_;
}  // namespace dqmstorepb
PROTOBUF_NAMESPACE_OPEN
template <>
::dqmstorepb::ROOTFilePB* Arena::CreateMaybeMessage<::dqmstorepb::ROOTFilePB>(Arena*);
template <>
::dqmstorepb::ROOTFilePB_Histo* Arena::CreateMaybeMessage<::dqmstorepb::ROOTFilePB_Histo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace dqmstorepb {

  // ===================================================================

  class ROOTFilePB_Histo final
      : public ::PROTOBUF_NAMESPACE_ID::
            Message /* @@protoc_insertion_point(class_definition:dqmstorepb.ROOTFilePB.Histo) */ {
  public:
    inline ROOTFilePB_Histo() : ROOTFilePB_Histo(nullptr) {}
    ~ROOTFilePB_Histo() override;
    explicit PROTOBUF_CONSTEXPR ROOTFilePB_Histo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

    ROOTFilePB_Histo(const ROOTFilePB_Histo& from);
    ROOTFilePB_Histo(ROOTFilePB_Histo&& from) noexcept : ROOTFilePB_Histo() { *this = ::std::move(from); }

    inline ROOTFilePB_Histo& operator=(const ROOTFilePB_Histo& from) {
      CopyFrom(from);
      return *this;
    }
    inline ROOTFilePB_Histo& operator=(ROOTFilePB_Histo&& from) noexcept {
      if (this == &from)
        return *this;
      if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
          && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
      ) {
        InternalSwap(&from);
      } else {
        CopyFrom(from);
      }
      return *this;
    }

    inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
      return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
          ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
    }
    inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
      return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() { return GetDescriptor(); }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
      return default_instance().GetMetadata().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
      return default_instance().GetMetadata().reflection;
    }
    static const ROOTFilePB_Histo& default_instance() { return *internal_default_instance(); }
    static inline const ROOTFilePB_Histo* internal_default_instance() {
      return reinterpret_cast<const ROOTFilePB_Histo*>(&_ROOTFilePB_Histo_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 0;

    friend void swap(ROOTFilePB_Histo& a, ROOTFilePB_Histo& b) { a.Swap(&b); }
    inline void Swap(ROOTFilePB_Histo* other) {
      if (other == this)
        return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
      if (GetOwningArena() != nullptr && GetOwningArena() == other->GetOwningArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
      if (GetOwningArena() == other->GetOwningArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
        InternalSwap(other);
      } else {
        ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
      }
    }
    void UnsafeArenaSwap(ROOTFilePB_Histo* other) {
      if (other == this)
        return;
      GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
      InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    ROOTFilePB_Histo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
      return CreateMaybeMessage<ROOTFilePB_Histo>(arena);
    }
    using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
    void CopyFrom(const ROOTFilePB_Histo& from);
    using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
    void MergeFrom(const ROOTFilePB_Histo& from) { ROOTFilePB_Histo::MergeImpl(*this, from); }

  private:
    static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);

  public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    uint8_t* _InternalSerialize(uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
    void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(ROOTFilePB_Histo* other);

  private:
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() { return "dqmstorepb.ROOTFilePB.Histo"; }

  protected:
    explicit ROOTFilePB_Histo(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned = false);

  public:
    static const ClassData _class_data_;
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetClassData() const final;

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
      kFullPathnameFieldNumber = 1,
      kStreamedHistoFieldNumber = 3,
      kSizeFieldNumber = 2,
      kFlagsFieldNumber = 4,
    };
    // required string full_pathname = 1;
    bool has_full_pathname() const;

  private:
    bool _internal_has_full_pathname() const;

  public:
    void clear_full_pathname();
    const std::string& full_pathname() const;
    template <typename ArgT0 = const std::string&, typename... ArgT>
    void set_full_pathname(ArgT0&& arg0, ArgT... args);
    std::string* mutable_full_pathname();
    PROTOBUF_NODISCARD std::string* release_full_pathname();
    void set_allocated_full_pathname(std::string* full_pathname);

  private:
    const std::string& _internal_full_pathname() const;
    inline PROTOBUF_ALWAYS_INLINE void _internal_set_full_pathname(const std::string& value);
    std::string* _internal_mutable_full_pathname();

  public:
    // required bytes streamed_histo = 3;
    bool has_streamed_histo() const;

  private:
    bool _internal_has_streamed_histo() const;

  public:
    void clear_streamed_histo();
    const std::string& streamed_histo() const;
    template <typename ArgT0 = const std::string&, typename... ArgT>
    void set_streamed_histo(ArgT0&& arg0, ArgT... args);
    std::string* mutable_streamed_histo();
    PROTOBUF_NODISCARD std::string* release_streamed_histo();
    void set_allocated_streamed_histo(std::string* streamed_histo);

  private:
    const std::string& _internal_streamed_histo() const;
    inline PROTOBUF_ALWAYS_INLINE void _internal_set_streamed_histo(const std::string& value);
    std::string* _internal_mutable_streamed_histo();

  public:
    // required uint32 size = 2;
    bool has_size() const;

  private:
    bool _internal_has_size() const;

  public:
    void clear_size();
    uint32_t size() const;
    void set_size(uint32_t value);

  private:
    uint32_t _internal_size() const;
    void _internal_set_size(uint32_t value);

  public:
    // required uint32 flags = 4;
    bool has_flags() const;

  private:
    bool _internal_has_flags() const;

  public:
    void clear_flags();
    uint32_t flags() const;
    void set_flags(uint32_t value);

  private:
    uint32_t _internal_flags() const;
    void _internal_set_flags(uint32_t value);

  public:
    // @@protoc_insertion_point(class_scope:dqmstorepb.ROOTFilePB.Histo)
  private:
    class _Internal;

    // helper for ByteSizeLong()
    size_t RequiredFieldsByteSizeFallback() const;

    template <typename T>
    friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    struct Impl_ {
      ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
      mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr full_pathname_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr streamed_histo_;
      uint32_t size_;
      uint32_t flags_;
    };
    union {
      Impl_ _impl_;
    };
    friend struct ::TableStruct_DQMServices_2fCore_2fsrc_2fROOTFilePB_2eproto;
  };
  // -------------------------------------------------------------------

  class ROOTFilePB final
      : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dqmstorepb.ROOTFilePB) */ {
  public:
    inline ROOTFilePB() : ROOTFilePB(nullptr) {}
    ~ROOTFilePB() override;
    explicit PROTOBUF_CONSTEXPR ROOTFilePB(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

    ROOTFilePB(const ROOTFilePB& from);
    ROOTFilePB(ROOTFilePB&& from) noexcept : ROOTFilePB() { *this = ::std::move(from); }

    inline ROOTFilePB& operator=(const ROOTFilePB& from) {
      CopyFrom(from);
      return *this;
    }
    inline ROOTFilePB& operator=(ROOTFilePB&& from) noexcept {
      if (this == &from)
        return *this;
      if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
          && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
      ) {
        InternalSwap(&from);
      } else {
        CopyFrom(from);
      }
      return *this;
    }

    inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
      return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
          ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
    }
    inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
      return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() { return GetDescriptor(); }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
      return default_instance().GetMetadata().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
      return default_instance().GetMetadata().reflection;
    }
    static const ROOTFilePB& default_instance() { return *internal_default_instance(); }
    static inline const ROOTFilePB* internal_default_instance() {
      return reinterpret_cast<const ROOTFilePB*>(&_ROOTFilePB_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 1;

    friend void swap(ROOTFilePB& a, ROOTFilePB& b) { a.Swap(&b); }
    inline void Swap(ROOTFilePB* other) {
      if (other == this)
        return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
      if (GetOwningArena() != nullptr && GetOwningArena() == other->GetOwningArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
      if (GetOwningArena() == other->GetOwningArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
        InternalSwap(other);
      } else {
        ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
      }
    }
    void UnsafeArenaSwap(ROOTFilePB* other) {
      if (other == this)
        return;
      GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
      InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    ROOTFilePB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
      return CreateMaybeMessage<ROOTFilePB>(arena);
    }
    using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
    void CopyFrom(const ROOTFilePB& from);
    using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
    void MergeFrom(const ROOTFilePB& from) { ROOTFilePB::MergeImpl(*this, from); }

  private:
    static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);

  public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    uint8_t* _InternalSerialize(uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
    void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(ROOTFilePB* other);

  private:
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() { return "dqmstorepb.ROOTFilePB"; }

  protected:
    explicit ROOTFilePB(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned = false);

  public:
    static const ClassData _class_data_;
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetClassData() const final;

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    typedef ROOTFilePB_Histo Histo;

    // accessors -------------------------------------------------------

    enum : int {
      kHistoFieldNumber = 1,
    };
    // repeated .dqmstorepb.ROOTFilePB.Histo histo = 1;
    int histo_size() const;

  private:
    int _internal_histo_size() const;

  public:
    void clear_histo();
    ::dqmstorepb::ROOTFilePB_Histo* mutable_histo(int index);
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dqmstorepb::ROOTFilePB_Histo>* mutable_histo();

  private:
    const ::dqmstorepb::ROOTFilePB_Histo& _internal_histo(int index) const;
    ::dqmstorepb::ROOTFilePB_Histo* _internal_add_histo();

  public:
    const ::dqmstorepb::ROOTFilePB_Histo& histo(int index) const;
    ::dqmstorepb::ROOTFilePB_Histo* add_histo();
    const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dqmstorepb::ROOTFilePB_Histo>& histo() const;

    // @@protoc_insertion_point(class_scope:dqmstorepb.ROOTFilePB)
  private:
    class _Internal;

    template <typename T>
    friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    struct Impl_ {
      ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dqmstorepb::ROOTFilePB_Histo> histo_;
      mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    };
    union {
      Impl_ _impl_;
    };
    friend struct ::TableStruct_DQMServices_2fCore_2fsrc_2fROOTFilePB_2eproto;
  };
  // ===================================================================

  // ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
  // ROOTFilePB_Histo

  // required string full_pathname = 1;
  inline bool ROOTFilePB_Histo::_internal_has_full_pathname() const {
    bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
    return value;
  }
  inline bool ROOTFilePB_Histo::has_full_pathname() const { return _internal_has_full_pathname(); }
  inline void ROOTFilePB_Histo::clear_full_pathname() {
    _impl_.full_pathname_.ClearToEmpty();
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  inline const std::string& ROOTFilePB_Histo::full_pathname() const {
    // @@protoc_insertion_point(field_get:dqmstorepb.ROOTFilePB.Histo.full_pathname)
    return _internal_full_pathname();
  }
  template <typename ArgT0, typename... ArgT>
  inline PROTOBUF_ALWAYS_INLINE void ROOTFilePB_Histo::set_full_pathname(ArgT0&& arg0, ArgT... args) {
    _impl_._has_bits_[0] |= 0x00000001u;
    _impl_.full_pathname_.Set(static_cast<ArgT0&&>(arg0), args..., GetArenaForAllocation());
    // @@protoc_insertion_point(field_set:dqmstorepb.ROOTFilePB.Histo.full_pathname)
  }
  inline std::string* ROOTFilePB_Histo::mutable_full_pathname() {
    std::string* _s = _internal_mutable_full_pathname();
    // @@protoc_insertion_point(field_mutable:dqmstorepb.ROOTFilePB.Histo.full_pathname)
    return _s;
  }
  inline const std::string& ROOTFilePB_Histo::_internal_full_pathname() const { return _impl_.full_pathname_.Get(); }
  inline void ROOTFilePB_Histo::_internal_set_full_pathname(const std::string& value) {
    _impl_._has_bits_[0] |= 0x00000001u;
    _impl_.full_pathname_.Set(value, GetArenaForAllocation());
  }
  inline std::string* ROOTFilePB_Histo::_internal_mutable_full_pathname() {
    _impl_._has_bits_[0] |= 0x00000001u;
    return _impl_.full_pathname_.Mutable(GetArenaForAllocation());
  }
  inline std::string* ROOTFilePB_Histo::release_full_pathname() {
    // @@protoc_insertion_point(field_release:dqmstorepb.ROOTFilePB.Histo.full_pathname)
    if (!_internal_has_full_pathname()) {
      return nullptr;
    }
    _impl_._has_bits_[0] &= ~0x00000001u;
    auto* p = _impl_.full_pathname_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (_impl_.full_pathname_.IsDefault()) {
      _impl_.full_pathname_.Set("", GetArenaForAllocation());
    }
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    return p;
  }
  inline void ROOTFilePB_Histo::set_allocated_full_pathname(std::string* full_pathname) {
    if (full_pathname != nullptr) {
      _impl_._has_bits_[0] |= 0x00000001u;
    } else {
      _impl_._has_bits_[0] &= ~0x00000001u;
    }
    _impl_.full_pathname_.SetAllocated(full_pathname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (_impl_.full_pathname_.IsDefault()) {
      _impl_.full_pathname_.Set("", GetArenaForAllocation());
    }
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    // @@protoc_insertion_point(field_set_allocated:dqmstorepb.ROOTFilePB.Histo.full_pathname)
  }

  // required uint32 size = 2;
  inline bool ROOTFilePB_Histo::_internal_has_size() const {
    bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
    return value;
  }
  inline bool ROOTFilePB_Histo::has_size() const { return _internal_has_size(); }
  inline void ROOTFilePB_Histo::clear_size() {
    _impl_.size_ = 0u;
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  inline uint32_t ROOTFilePB_Histo::_internal_size() const { return _impl_.size_; }
  inline uint32_t ROOTFilePB_Histo::size() const {
    // @@protoc_insertion_point(field_get:dqmstorepb.ROOTFilePB.Histo.size)
    return _internal_size();
  }
  inline void ROOTFilePB_Histo::_internal_set_size(uint32_t value) {
    _impl_._has_bits_[0] |= 0x00000004u;
    _impl_.size_ = value;
  }
  inline void ROOTFilePB_Histo::set_size(uint32_t value) {
    _internal_set_size(value);
    // @@protoc_insertion_point(field_set:dqmstorepb.ROOTFilePB.Histo.size)
  }

  // required bytes streamed_histo = 3;
  inline bool ROOTFilePB_Histo::_internal_has_streamed_histo() const {
    bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
    return value;
  }
  inline bool ROOTFilePB_Histo::has_streamed_histo() const { return _internal_has_streamed_histo(); }
  inline void ROOTFilePB_Histo::clear_streamed_histo() {
    _impl_.streamed_histo_.ClearToEmpty();
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  inline const std::string& ROOTFilePB_Histo::streamed_histo() const {
    // @@protoc_insertion_point(field_get:dqmstorepb.ROOTFilePB.Histo.streamed_histo)
    return _internal_streamed_histo();
  }
  template <typename ArgT0, typename... ArgT>
  inline PROTOBUF_ALWAYS_INLINE void ROOTFilePB_Histo::set_streamed_histo(ArgT0&& arg0, ArgT... args) {
    _impl_._has_bits_[0] |= 0x00000002u;
    _impl_.streamed_histo_.SetBytes(static_cast<ArgT0&&>(arg0), args..., GetArenaForAllocation());
    // @@protoc_insertion_point(field_set:dqmstorepb.ROOTFilePB.Histo.streamed_histo)
  }
  inline std::string* ROOTFilePB_Histo::mutable_streamed_histo() {
    std::string* _s = _internal_mutable_streamed_histo();
    // @@protoc_insertion_point(field_mutable:dqmstorepb.ROOTFilePB.Histo.streamed_histo)
    return _s;
  }
  inline const std::string& ROOTFilePB_Histo::_internal_streamed_histo() const { return _impl_.streamed_histo_.Get(); }
  inline void ROOTFilePB_Histo::_internal_set_streamed_histo(const std::string& value) {
    _impl_._has_bits_[0] |= 0x00000002u;
    _impl_.streamed_histo_.Set(value, GetArenaForAllocation());
  }
  inline std::string* ROOTFilePB_Histo::_internal_mutable_streamed_histo() {
    _impl_._has_bits_[0] |= 0x00000002u;
    return _impl_.streamed_histo_.Mutable(GetArenaForAllocation());
  }
  inline std::string* ROOTFilePB_Histo::release_streamed_histo() {
    // @@protoc_insertion_point(field_release:dqmstorepb.ROOTFilePB.Histo.streamed_histo)
    if (!_internal_has_streamed_histo()) {
      return nullptr;
    }
    _impl_._has_bits_[0] &= ~0x00000002u;
    auto* p = _impl_.streamed_histo_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (_impl_.streamed_histo_.IsDefault()) {
      _impl_.streamed_histo_.Set("", GetArenaForAllocation());
    }
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    return p;
  }
  inline void ROOTFilePB_Histo::set_allocated_streamed_histo(std::string* streamed_histo) {
    if (streamed_histo != nullptr) {
      _impl_._has_bits_[0] |= 0x00000002u;
    } else {
      _impl_._has_bits_[0] &= ~0x00000002u;
    }
    _impl_.streamed_histo_.SetAllocated(streamed_histo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (_impl_.streamed_histo_.IsDefault()) {
      _impl_.streamed_histo_.Set("", GetArenaForAllocation());
    }
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    // @@protoc_insertion_point(field_set_allocated:dqmstorepb.ROOTFilePB.Histo.streamed_histo)
  }

  // required uint32 flags = 4;
  inline bool ROOTFilePB_Histo::_internal_has_flags() const {
    bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
    return value;
  }
  inline bool ROOTFilePB_Histo::has_flags() const { return _internal_has_flags(); }
  inline void ROOTFilePB_Histo::clear_flags() {
    _impl_.flags_ = 0u;
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  inline uint32_t ROOTFilePB_Histo::_internal_flags() const { return _impl_.flags_; }
  inline uint32_t ROOTFilePB_Histo::flags() const {
    // @@protoc_insertion_point(field_get:dqmstorepb.ROOTFilePB.Histo.flags)
    return _internal_flags();
  }
  inline void ROOTFilePB_Histo::_internal_set_flags(uint32_t value) {
    _impl_._has_bits_[0] |= 0x00000008u;
    _impl_.flags_ = value;
  }
  inline void ROOTFilePB_Histo::set_flags(uint32_t value) {
    _internal_set_flags(value);
    // @@protoc_insertion_point(field_set:dqmstorepb.ROOTFilePB.Histo.flags)
  }

  // -------------------------------------------------------------------

  // ROOTFilePB

  // repeated .dqmstorepb.ROOTFilePB.Histo histo = 1;
  inline int ROOTFilePB::_internal_histo_size() const { return _impl_.histo_.size(); }
  inline int ROOTFilePB::histo_size() const { return _internal_histo_size(); }
  inline void ROOTFilePB::clear_histo() { _impl_.histo_.Clear(); }
  inline ::dqmstorepb::ROOTFilePB_Histo* ROOTFilePB::mutable_histo(int index) {
    // @@protoc_insertion_point(field_mutable:dqmstorepb.ROOTFilePB.histo)
    return _impl_.histo_.Mutable(index);
  }
  inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dqmstorepb::ROOTFilePB_Histo>* ROOTFilePB::mutable_histo() {
    // @@protoc_insertion_point(field_mutable_list:dqmstorepb.ROOTFilePB.histo)
    return &_impl_.histo_;
  }
  inline const ::dqmstorepb::ROOTFilePB_Histo& ROOTFilePB::_internal_histo(int index) const {
    return _impl_.histo_.Get(index);
  }
  inline const ::dqmstorepb::ROOTFilePB_Histo& ROOTFilePB::histo(int index) const {
    // @@protoc_insertion_point(field_get:dqmstorepb.ROOTFilePB.histo)
    return _internal_histo(index);
  }
  inline ::dqmstorepb::ROOTFilePB_Histo* ROOTFilePB::_internal_add_histo() { return _impl_.histo_.Add(); }
  inline ::dqmstorepb::ROOTFilePB_Histo* ROOTFilePB::add_histo() {
    ::dqmstorepb::ROOTFilePB_Histo* _add = _internal_add_histo();
    // @@protoc_insertion_point(field_add:dqmstorepb.ROOTFilePB.histo)
    return _add;
  }
  inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dqmstorepb::ROOTFilePB_Histo>& ROOTFilePB::histo() const {
    // @@protoc_insertion_point(field_list:dqmstorepb.ROOTFilePB.histo)
    return _impl_.histo_;
  }

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__
  // -------------------------------------------------------------------

  // @@protoc_insertion_point(namespace_scope)

}  // namespace dqmstorepb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_DQMServices_2fCore_2fsrc_2fROOTFilePB_2eproto
