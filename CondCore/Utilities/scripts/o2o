#!/usr/bin/env python

'''
'''
__author__ = 'Giacomo Govi'

import CondCore.Utilities.o2olib as o2olib
import sys
#import optparse
#import argparse

'''
class O2OTool():

    def execute(self):
        parser = argparse.ArgumentParser(description='CMS o2o command-line tool. For general help (manual page), use the help subcommand.')
        parser.add_argument('--db', type=str, help='The target database: pro ( for prod ) or dev ( for prep ). default=pro')
        parser.add_argument("--auth","-a", type=str,  help="The path of the authentication file")
        parser.add_argument('--verbose', '-v', action='count', help='The verbosity level')
        parser_subparsers = parser.add_subparsers(title='Available subcommands')
        parser_create = parser_subparsers.add_parser('create', description='Create a new O2O job')
        parser_create.add_argument('--name', '-n', type=str, help='The o2o job name')
        parser_create.add_argument('--configFile', '-c', type=str, help='the JSON configuration file path')
        parser_create.add_argument('--interval', '-i', type=int, help='the chron job interval')
        parser_create.set_defaults(func=self.create)
        parser_setConfig = parser_subparsers.add_parser('setConfig', description='Set a new configuration for the specified job')
        parser_setConfig.add_argument('--name', '-n', type=str, help='The o2o job name')
        parser_setConfig.add_argument('--configFile', '-c', type=str, help='the JSON configuration file path')
        parser_setConfig.set_defaults(func=self.setConfig)
        parser_setInterval = parser_subparsers.add_parser('setInterval',description='Set a new execution interval for the specified job')
        parser_setInterval.add_argument('--name', '-n', type=str, help='The o2o job name')
        parser_setInterval.add_argument('--interval', '-i', type=int, help='the chron job interval')
        parser_setInterval.set_defaults(func=self.setInterval)
        parser_enable = parser_subparsers.add_parser('enable',description='enable the O2O job')
        parser_enable.add_argument('--name', '-n', type=str, help='The o2o job name')
        parser_enable.set_defaults(func=self.enable)
        parser_disable = parser_subparsers.add_parser('disable',description='disable the O2O job')
        parser_disable.add_argument('--name', '-n', type=str, help='The o2o job name')
        parser_disable.set_defaults(func=self.disable)
        parser_migrateConf = parser_subparsers.add_parser('migrateConfig',description='migrate the tag info for the jobs in configuration entries')
        parser_migrateConf.set_defaults(func=self.migrate)
        parser_listJobs = parser_subparsers.add_parser('listJobs', description='list the registered jobs')
        parser_listJobs.set_defaults(func=self.listJobs)
        parser_listConf = parser_subparsers.add_parser('listConf', description='shows the configurations for the specified job')
        parser_listConf.add_argument('--name', '-n', type=str, help='The o2o job name')
        parser_listConf.set_defaults(func=self.listConf)
        parser_run = parser_subparsers.add_parser('run', description='wrapper for O2O jobs')
        parser_run.add_argument('executable', type=str,help='command to execute')
        parser_run.add_argument('--name', '-n', type=str, help='The o2o job name')
        parser_run.set_defaults(func=self.run)

        args = parser.parse_args()

        self.setup(args)
        if args.verbose >=1:
            return args.func()
        else:
            try:
                return args.func()
            except Exception as e:
                print str(e)
                return 1

    def setup(self, args):
        self.args = args
        db_service = o2olib.prod_db_service
        if args.db is not None:
            if args.db == 'dev' or args.db == 'oradev' :
                db_service = o2olib.dev_db_service
            elif args.db != 'orapro' and args.db != 'onlineorapro' and args.db != 'pro':
                raise Exception("Database '%s' is not known." %args.db )
        
        self.mgr = o2olib.O2OJobMgr()
        print 'args=%s' %str(args)
        return self.mgr.connect( db_service, args )
        
    def create(self):
        self.mgr.add( self.args.name, self.args.configFile, self.args.interval, True )

    def setConfig(self):
        self.mgr.setConfig( self.args.name, self.args.configFile )

    def setInterval(self):
        self.mgr.setInterval( self.args.name, self.args.interval )

    def enable(self):
        self.mgr.set( self.args.name, True )
    
    def disable(self):
        self.mgr.set( self.args.name, False )

    def migrate(self):
        self.mgr.migrateConfig()

    def listJobs(self):
        self.mgr.listJobs()

    def listConf(self):
        self.mgr.listConfig( self.args.name )

    def run(self):
        rmgr = self.mgr.runManager()
        return rmgr.executeJob( self.args )
'''

def main( argv ):

    tool = o2olib.O2OTool()
    return tool.execute()

if __name__ == '__main__':

    sys.exit(main(sys.argv))
