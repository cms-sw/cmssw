#ifdef MPLEX_INTRINSICS

for (int n = 0; n < N; n += MPLEX_INTRINSICS_WIDTH_BYTES / sizeof(T)) {
  IntrVec_t b_0 = LD(b, 0);
  IntrVec_t c_0 = b_0;

  IntrVec_t a_3 = LD(a, 3);
  IntrVec_t b_6 = LD(b, 6);
  c_0 = FMA(a_3, b_6, c_0);

  IntrVec_t a_4 = LD(a, 4);
  IntrVec_t b_10 = LD(b, 10);
  c_0 = FMA(a_4, b_10, c_0);

  IntrVec_t b_1 = LD(b, 1);
  IntrVec_t c_1 = b_1;
  IntrVec_t b_2 = LD(b, 2);
  IntrVec_t c_2 = b_2;
  ST(c, 0, c_0);

  IntrVec_t a_8 = LD(a, 8);
  c_1 = FMA(a_8, b_6, c_1);
  IntrVec_t b_7 = LD(b, 7);
  c_2 = FMA(a_8, b_7, c_2);

  IntrVec_t a_9 = LD(a, 9);
  c_1 = FMA(a_9, b_10, c_1);
  IntrVec_t b_11 = LD(b, 11);
  c_2 = FMA(a_9, b_11, c_2);

  IntrVec_t b_3 = LD(b, 3);
  IntrVec_t c_3 = b_3;
  ST(c, 1, c_1);
  IntrVec_t b_4 = LD(b, 4);
  IntrVec_t c_4 = b_4;
  ST(c, 2, c_2);
  IntrVec_t b_5 = LD(b, 5);
  IntrVec_t c_5 = b_5;

  IntrVec_t a_13 = LD(a, 13);
  c_3 = FMA(a_13, b_6, c_3);
  c_4 = FMA(a_13, b_7, c_4);
  IntrVec_t b_8 = LD(b, 8);
  c_5 = FMA(a_13, b_8, c_5);

  IntrVec_t a_14 = LD(a, 14);
  c_3 = FMA(a_14, b_10, c_3);
  c_4 = FMA(a_14, b_11, c_4);
  IntrVec_t b_12 = LD(b, 12);
  c_5 = FMA(a_14, b_12, c_5);

  IntrVec_t a_18 = LD(a, 18);
  IntrVec_t c_6 = MUL(a_18, b_6);
  ST(c, 3, c_3);
  ST(c, 4, c_4);
  ST(c, 5, c_5);
  IntrVec_t c_7 = MUL(a_18, b_7);
  IntrVec_t c_8 = MUL(a_18, b_8);
  IntrVec_t b_9 = LD(b, 9);
  IntrVec_t c_9 = MUL(a_18, b_9);

  IntrVec_t a_19 = LD(a, 19);
  c_6 = FMA(a_19, b_10, c_6);
  c_7 = FMA(a_19, b_11, c_7);
  c_8 = FMA(a_19, b_12, c_8);
  IntrVec_t b_13 = LD(b, 13);
  c_9 = FMA(a_19, b_13, c_9);
  ST(c, 6, c_6);
  ST(c, 7, c_7);
  ST(c, 8, c_8);

  IntrVec_t a_23 = LD(a, 23);
  IntrVec_t c_10 = MUL(a_23, b_6);
  ST(c, 9, c_9);
  IntrVec_t c_11 = MUL(a_23, b_7);
  IntrVec_t c_12 = MUL(a_23, b_8);
  IntrVec_t c_13 = MUL(a_23, b_9);
  IntrVec_t c_14 = MUL(a_23, b_13);

  IntrVec_t a_24 = LD(a, 24);
  c_10 = FMA(a_24, b_10, c_10);
  c_11 = FMA(a_24, b_11, c_11);
  c_12 = FMA(a_24, b_12, c_12);
  c_13 = FMA(a_24, b_13, c_13);
  IntrVec_t b_14 = LD(b, 14);
  c_14 = FMA(a_24, b_14, c_14);
  ST(c, 10, c_10);
  ST(c, 11, c_11);
  ST(c, 12, c_12);
  ST(c, 13, c_13);
  ST(c, 14, c_14);
}

#else

#pragma omp simd
for (int n = 0; n < N; ++n) {
  c[0 * N + n] = b[0 * N + n] + a[3 * N + n] * b[6 * N + n] + a[4 * N + n] * b[10 * N + n];
  c[1 * N + n] = b[1 * N + n] + a[8 * N + n] * b[6 * N + n] + a[9 * N + n] * b[10 * N + n];
  c[2 * N + n] = b[2 * N + n] + a[8 * N + n] * b[7 * N + n] + a[9 * N + n] * b[11 * N + n];
  c[3 * N + n] = b[3 * N + n] + a[13 * N + n] * b[6 * N + n] + a[14 * N + n] * b[10 * N + n];
  c[4 * N + n] = b[4 * N + n] + a[13 * N + n] * b[7 * N + n] + a[14 * N + n] * b[11 * N + n];
  c[5 * N + n] = b[5 * N + n] + a[13 * N + n] * b[8 * N + n] + a[14 * N + n] * b[12 * N + n];
  c[6 * N + n] = a[18 * N + n] * b[6 * N + n] + a[19 * N + n] * b[10 * N + n];
  c[7 * N + n] = a[18 * N + n] * b[7 * N + n] + a[19 * N + n] * b[11 * N + n];
  c[8 * N + n] = a[18 * N + n] * b[8 * N + n] + a[19 * N + n] * b[12 * N + n];
  c[9 * N + n] = a[18 * N + n] * b[9 * N + n] + a[19 * N + n] * b[13 * N + n];
  c[10 * N + n] = a[23 * N + n] * b[6 * N + n] + a[24 * N + n] * b[10 * N + n];
  c[11 * N + n] = a[23 * N + n] * b[7 * N + n] + a[24 * N + n] * b[11 * N + n];
  c[12 * N + n] = a[23 * N + n] * b[8 * N + n] + a[24 * N + n] * b[12 * N + n];
  c[13 * N + n] = a[23 * N + n] * b[9 * N + n] + a[24 * N + n] * b[13 * N + n];
  c[14 * N + n] = a[23 * N + n] * b[13 * N + n] + a[24 * N + n] * b[14 * N + n];
}
#endif
