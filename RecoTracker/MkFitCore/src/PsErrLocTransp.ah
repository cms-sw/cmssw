#ifdef MPLEX_INTRINSICS

for (int n = 0; n < N; n += MPLEX_INTRINSICS_WIDTH_BYTES / sizeof(T)) {
  IntrVec_t b_3 = LD(b, 3);
  IntrVec_t a_3 = LD(a, 3);
  IntrVec_t c_0 = MUL(b_3, a_3);

  IntrVec_t b_5 = LD(b, 5);
  IntrVec_t a_5 = LD(a, 5);
  c_0 = FMA(b_5, a_5, c_0);

  IntrVec_t b_6 = LD(b, 6);
  IntrVec_t a_6 = LD(a, 6);
  IntrVec_t c_2 = MUL(b_6, a_6);

  IntrVec_t b_7 = LD(b, 7);
  IntrVec_t a_7 = LD(a, 7);
  c_2 = FMA(b_7, a_7, c_2);
  ST(c, 0, c_0);

  IntrVec_t b_8 = LD(b, 8);
  IntrVec_t a_8 = LD(a, 8);
  c_2 = FMA(b_8, a_8, c_2);

  IntrVec_t b_9 = LD(b, 9);
  IntrVec_t c_1 = MUL(b_9, a_3);

  IntrVec_t b_10 = LD(b, 10);
  IntrVec_t a_10 = LD(a, 10);
  c_2 = FMA(b_10, a_10, c_2);

  IntrVec_t b_11 = LD(b, 11);
  c_1 = FMA(b_11, a_5, c_1);
  IntrVec_t a_11 = LD(a, 11);
  c_2 = FMA(b_11, a_11, c_2);

  IntrVec_t b_12 = LD(b, 12);
  IntrVec_t c_4 = MUL(b_12, a_6);
  ST(c, 1, c_1);
  IntrVec_t a_12 = LD(a, 12);
  IntrVec_t c_5 = MUL(b_12, a_12);
  ST(c, 2, c_2);

  IntrVec_t b_13 = LD(b, 13);
  c_4 = FMA(b_13, a_7, c_4);
  IntrVec_t a_13 = LD(a, 13);
  c_5 = FMA(b_13, a_13, c_5);

  IntrVec_t b_14 = LD(b, 14);
  c_4 = FMA(b_14, a_8, c_4);
  IntrVec_t a_14 = LD(a, 14);
  c_5 = FMA(b_14, a_14, c_5);

  IntrVec_t b_15 = LD(b, 15);
  IntrVec_t c_3 = MUL(b_15, a_3);

  IntrVec_t b_16 = LD(b, 16);
  c_4 = FMA(b_16, a_10, c_4);
  IntrVec_t a_16 = LD(a, 16);
  c_5 = FMA(b_16, a_16, c_5);

  IntrVec_t b_17 = LD(b, 17);
  c_3 = FMA(b_17, a_5, c_3);
  c_4 = FMA(b_17, a_11, c_4);
  IntrVec_t a_17 = LD(a, 17);
  c_5 = FMA(b_17, a_17, c_5);

  IntrVec_t b_18 = LD(b, 18);
  IntrVec_t c_7 = MUL(b_18, a_6);
  ST(c, 3, c_3);
  ST(c, 4, c_4);
  ST(c, 5, c_5);
  IntrVec_t c_8 = MUL(b_18, a_12);
  IntrVec_t a_18 = LD(a, 18);
  IntrVec_t c_9 = MUL(b_18, a_18);

  IntrVec_t b_19 = LD(b, 19);
  c_7 = FMA(b_19, a_7, c_7);
  c_8 = FMA(b_19, a_13, c_8);
  IntrVec_t a_19 = LD(a, 19);
  c_9 = FMA(b_19, a_19, c_9);

  IntrVec_t b_20 = LD(b, 20);
  c_7 = FMA(b_20, a_8, c_7);
  c_8 = FMA(b_20, a_14, c_8);
  IntrVec_t a_20 = LD(a, 20);
  c_9 = FMA(b_20, a_20, c_9);

  IntrVec_t b_21 = LD(b, 21);
  IntrVec_t c_6 = MUL(b_21, a_3);

  IntrVec_t b_22 = LD(b, 22);
  c_7 = FMA(b_22, a_10, c_7);
  c_8 = FMA(b_22, a_16, c_8);

  IntrVec_t b_23 = LD(b, 23);
  c_6 = FMA(b_23, a_5, c_6);
  c_7 = FMA(b_23, a_11, c_7);
  c_8 = FMA(b_23, a_17, c_8);

  IntrVec_t b_24 = LD(b, 24);
  IntrVec_t c_11 = MUL(b_24, a_6);
  ST(c, 6, c_6);
  ST(c, 7, c_7);
  ST(c, 8, c_8);
  ST(c, 9, c_9);
  IntrVec_t c_12 = MUL(b_24, a_12);
  IntrVec_t c_13 = MUL(b_24, a_18);
  IntrVec_t a_24 = LD(a, 24);
  IntrVec_t c_14 = MUL(b_24, a_24);

  IntrVec_t b_25 = LD(b, 25);
  c_11 = FMA(b_25, a_7, c_11);
  c_12 = FMA(b_25, a_13, c_12);
  c_13 = FMA(b_25, a_19, c_13);
  IntrVec_t a_25 = LD(a, 25);
  c_14 = FMA(b_25, a_25, c_14);

  IntrVec_t b_26 = LD(b, 26);
  c_11 = FMA(b_26, a_8, c_11);
  c_12 = FMA(b_26, a_14, c_12);
  c_13 = FMA(b_26, a_20, c_13);
  IntrVec_t a_26 = LD(a, 26);
  c_14 = FMA(b_26, a_26, c_14);

  IntrVec_t b_27 = LD(b, 27);
  IntrVec_t c_10 = MUL(b_27, a_3);

  IntrVec_t b_28 = LD(b, 28);
  c_11 = FMA(b_28, a_10, c_11);
  c_12 = FMA(b_28, a_16, c_12);

  IntrVec_t b_29 = LD(b, 29);
  c_10 = FMA(b_29, a_5, c_10);
  c_11 = FMA(b_29, a_11, c_11);
  c_12 = FMA(b_29, a_17, c_12);
  ST(c, 10, c_10);
  ST(c, 11, c_11);
  ST(c, 12, c_12);
  ST(c, 13, c_13);
  ST(c, 14, c_14);
}

#else

#pragma omp simd
for (int n = 0; n < N; ++n) {
  c[0 * N + n] = b[3 * N + n] * a[3 * N + n] + b[5 * N + n] * a[5 * N + n];
  c[1 * N + n] = b[9 * N + n] * a[3 * N + n] + b[11 * N + n] * a[5 * N + n];
  c[2 * N + n] = b[6 * N + n] * a[6 * N + n] + b[7 * N + n] * a[7 * N + n] + b[8 * N + n] * a[8 * N + n] +
                 b[10 * N + n] * a[10 * N + n] + b[11 * N + n] * a[11 * N + n];
  c[3 * N + n] = b[15 * N + n] * a[3 * N + n] + b[17 * N + n] * a[5 * N + n];
  c[4 * N + n] = b[12 * N + n] * a[6 * N + n] + b[13 * N + n] * a[7 * N + n] + b[14 * N + n] * a[8 * N + n] +
                 b[16 * N + n] * a[10 * N + n] + b[17 * N + n] * a[11 * N + n];
  c[5 * N + n] = b[12 * N + n] * a[12 * N + n] + b[13 * N + n] * a[13 * N + n] + b[14 * N + n] * a[14 * N + n] +
                 b[16 * N + n] * a[16 * N + n] + b[17 * N + n] * a[17 * N + n];
  c[6 * N + n] = b[21 * N + n] * a[3 * N + n] + b[23 * N + n] * a[5 * N + n];
  c[7 * N + n] = b[18 * N + n] * a[6 * N + n] + b[19 * N + n] * a[7 * N + n] + b[20 * N + n] * a[8 * N + n] +
                 b[22 * N + n] * a[10 * N + n] + b[23 * N + n] * a[11 * N + n];
  c[8 * N + n] = b[18 * N + n] * a[12 * N + n] + b[19 * N + n] * a[13 * N + n] + b[20 * N + n] * a[14 * N + n] +
                 b[22 * N + n] * a[16 * N + n] + b[23 * N + n] * a[17 * N + n];
  c[9 * N + n] = b[18 * N + n] * a[18 * N + n] + b[19 * N + n] * a[19 * N + n] + b[20 * N + n] * a[20 * N + n];
  c[10 * N + n] = b[27 * N + n] * a[3 * N + n] + b[29 * N + n] * a[5 * N + n];
  c[11 * N + n] = b[24 * N + n] * a[6 * N + n] + b[25 * N + n] * a[7 * N + n] + b[26 * N + n] * a[8 * N + n] +
                  b[28 * N + n] * a[10 * N + n] + b[29 * N + n] * a[11 * N + n];
  c[12 * N + n] = b[24 * N + n] * a[12 * N + n] + b[25 * N + n] * a[13 * N + n] + b[26 * N + n] * a[14 * N + n] +
                  b[28 * N + n] * a[16 * N + n] + b[29 * N + n] * a[17 * N + n];
  c[13 * N + n] = b[24 * N + n] * a[18 * N + n] + b[25 * N + n] * a[19 * N + n] + b[26 * N + n] * a[20 * N + n];
  c[14 * N + n] = b[24 * N + n] * a[24 * N + n] + b[25 * N + n] * a[25 * N + n] + b[26 * N + n] * a[26 * N + n];
}
#endif
