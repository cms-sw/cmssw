#ifndef DataFormats_Common_WrapperView_icc
#define DataFormats_Common_WrapperView_icc

/*----------------------------------------------------------------------

Code from Wrapper.h supporting Views

----------------------------------------------------------------------*/

#include "DataFormats/Common/interface/fwd_fillPtrVector.h"
#include "DataFormats/Common/interface/fwd_setPtr.h"
#include "DataFormats/Common/interface/Ref.h"
#include "DataFormats/Common/interface/PtrVector.h"
#include "DataFormats/Common/interface/RefVectorHolder.h"
#include "DataFormats/Common/interface/traits.h"
#include "FWCore/Utilities/interface/EDMException.h"
#include "boost/mpl/if.hpp"

namespace edm {

  template<typename T>
  struct DoFillView {
    void operator()(T const& obj, ProductID const& id, std::vector<void const*>& pointers, helper_vector_ptr & helpers) const;
  };

  template<typename T>
  struct DoNotFillView {
    void operator()(T const&, ProductID const&, std::vector<void const*>&, helper_vector_ptr&) const {
      Exception::throwThis(errors::ProductDoesNotSupportViews, "The product type ", typeid(T).name(), "\ndoes not support Views\n");
    }
  };

  template<typename T>
  inline
  void Wrapper<T>::do_fillView(ProductID const& id, std::vector<void const*>& pointers, helper_vector_ptr& helpers) const {
    typename boost::mpl::if_c<has_fillView<T>::value,
    DoFillView<T>,
    DoNotFillView<T> >::type maybe_filler;
    maybe_filler(obj, id, pointers, helpers);
  }


  template<typename T>
  struct DoSetPtr {
    void operator()(T const& obj, std::type_info const& iToType, unsigned long iIndex, void const*& oPtr) const;
    void operator()(T const& obj, std::type_info const& iToType, std::vector<unsigned long> const& iIndex, std::vector<void const*>& oPtr) const;
  };

  template<typename T>
  struct DoNotSetPtr {
    void operator()(T const& /*obj*/, std::type_info const& iToType, unsigned long iIndex, void const*& oPtr) const {
      Exception::throwThis(errors::ProductDoesNotSupportPtr, "The product type ", typeid(T).name(), "\ndoes not support edm::Ptr\n");
    }
    void operator()(T const& obj, std::type_info const& iToType, std::vector<unsigned long> const& iIndexes, std::vector<void const*>& oPtrs) const {
      Exception::throwThis(errors::ProductDoesNotSupportPtr, "The product type ", typeid(T).name(), "\ndoes not support edm::PtrVector\n");
    }
  };

  template<typename T>
  inline
  void Wrapper<T>::do_setPtr(std::type_info const& iToType, unsigned long iIndex, void const*& oPtr) const {
    typename boost::mpl::if_c<has_setPtr<T>::value,
    DoSetPtr<T>,
    DoNotSetPtr<T> >::type maybe_filler;
    maybe_filler(this->obj, iToType, iIndex, oPtr);
  }

  template<typename T>
  void Wrapper<T>::do_fillPtrVector(std::type_info const& iToType, std::vector<unsigned long> const& iIndices, std::vector<void const*>& oPtr) const {
    typename boost::mpl::if_c<has_setPtr<T>::value,
    DoSetPtr<T>,
    DoNotSetPtr<T> >::type maybe_filler;
    maybe_filler(this->obj, iToType, iIndices, oPtr);
  }
}

#include "DataFormats/Common/interface/RefVector.h"
#include "DataFormats/Common/interface/RefToBaseVector.h"

namespace edm {
  namespace helpers {
    template<typename T>
    struct ViewFiller {
      static void fill(T const& obj, ProductID const& id, std::vector<void const*>& pointers, helper_vector_ptr & helpers) {
        /// the following shoudl work also if T is a RefVector<C>
        typedef Ref<T> ref;
        typedef RefVector<T, typename ref::value_type, typename ref::finder_type> ref_vector;
        helpers = helper_vector_ptr(new reftobase::RefVectorHolder<ref_vector>);
        // fillView is the name of an overload set; each concrete collection T should supply a fillView function,
        // in the same namespace at that in which T is defined, or in the 'edm' namespace.
        fillView(obj, id, pointers, * helpers);
        assert(pointers.size() == helpers->size());
     }
    };

    template<typename T>
    struct ViewFiller<RefToBaseVector<T> > {
      static void fill(RefToBaseVector<T> const& obj, ProductID const&, std::vector<void const*>& pointers, helper_vector_ptr & helpers) {
        std::auto_ptr<helper_vector> h = obj.vectorHolder();
        if(h.get() != 0) {
          pointers.reserve(h->size());
          // NOTE: the following implementation has unusual signature!
          fillView(obj, pointers);
          helpers = helper_vector_ptr(h.release());
        }
      }
    };

    template<typename T>
    struct ViewFiller<PtrVector<T> > {
      static void fill(PtrVector<T> const& obj, ProductID const&, std::vector<void const*>& pointers, helper_vector_ptr & helpers) {
        std::auto_ptr<helper_vector> h(new reftobase::RefVectorHolder<PtrVector<T> >(obj));
        if(h.get() != 0) {
          pointers.reserve(obj.size());
          // NOTE: the following implementation has unusual signature!
          fillView(obj, pointers);
          helpers = helper_vector_ptr(h.release());
        }
      }
    };

    template<typename T>
      struct PtrSetter {
        static void set(T const& obj, std::type_info const& iToType, unsigned long iIndex, void const*& oPtr) {
          // setPtr is the name of an overload set; each concrete collection T should supply a fillView function, in the same
          // namespace at that in which T is defined, or in the 'edm' namespace.
          setPtr(obj, iToType, iIndex, oPtr);
        }

        static void fill(T const& obj, std::type_info const& iToType, std::vector<unsigned long> const& iIndex, std::vector<void const*>& oPtr) {
          // fillPtrVector is the name of an overload set; each concrete collection T should supply a fillPtrVector function,
          // in the same namespace at that in which T is defined, or in the 'edm'  namespace.
          fillPtrVector(obj, iToType, iIndex, oPtr);
        }
      };
  }

#ifndef __GCCXML__
  template<typename T>
  void DoFillView<T>::operator()(T const& obj, ProductID const& id, std::vector<void const*>& pointers, helper_vector_ptr& helpers) const {
    helpers::ViewFiller<T>::fill(obj, id, pointers, helpers);
  }
#endif

  template<typename T>
  void DoSetPtr<T>::operator()(T const& obj, std::type_info const& iToType, unsigned long iIndex, void const*& oPtr) const {
    helpers::PtrSetter<T>::set(obj, iToType, iIndex, oPtr);
  }

  template<typename T>
  void DoSetPtr<T>::operator()(T const& obj, std::type_info const& iToType, std::vector<unsigned long> const& iIndices, std::vector<void const*>& oPtr) const {
    helpers::PtrSetter<T>::fill(obj, iToType, iIndices, oPtr);
  }

}

#include "DataFormats/Common/interface/FillView.h"
#include "DataFormats/Common/interface/setPtr.h"
#include "DataFormats/Common/interface/fillPtrVector.h"

#endif
