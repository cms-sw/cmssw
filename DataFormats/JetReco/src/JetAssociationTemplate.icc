//
// template for implementation of jet associations
// F Ratnikov, UMd, Sep. 5, 2007
//

#include "FWCore/Utilities/interface/Exception.h"
#include "DataFormats/JetReco/interface/JetCollection.h"

namespace JetAssociationTemplate {

  template <typename Container>
  inline unsigned findJet(const Container& fContainer, const reco::Jet& fJet) {
    for (unsigned i = 0; i < fContainer.size(); ++i) {
      if (&*(fContainer[i].first) == &fJet)
        return i;
    }
    throw cms::Exception("Invalid jet") << "JetAssociationTemplate-> inquire association with jet which is not "
                                           "available in the original jet collection";
  }

  template <typename Container, typename Value>
  inline bool setValue(Container* fContainer, const reco::JetBaseRef& fJet, const Value& fValue) {
    if (!fContainer)
      return false;
    fContainer->setValue(fJet.key(), fValue);
    return true;
  }

  template <typename Container, typename Value>
  inline bool setValue(Container& fContainer, const reco::JetBaseRef& fJet, const Value& fValue) {
    return setValue(&fContainer, fJet, fValue);
  }

  template <typename Container, typename Value>
  inline const Value& getValue(const Container& fContainer, const reco::JetBaseRef& fJet) {
    return fContainer[fJet];
  }

  template <typename Container, typename Value>
  inline const Value& getValue(const Container& fContainer, const reco::Jet& fJet) {
    unsigned i = findJet(fContainer, fJet);
    return fContainer[i].second;
  }

  template <typename Container>
  inline std::vector<reco::JetBaseRef> allJets(const Container& fContainer) {
    std::vector<reco::JetBaseRef> result;
    for (unsigned i = 0; i < fContainer.size(); ++i) {
      result.push_back(fContainer[i].first);
    }
    return result;
  }

  template <typename Container>
  inline bool hasJet(const Container& fContainer, const reco::JetBaseRef& fJet) {
    for (unsigned i = 0; i < fContainer.size(); ++i) {
      if (fContainer[i].first == fJet)
        return true;
    }
    return false;
  }

  template <typename Container>
  inline bool hasJet(const Container& fContainer, const reco::Jet& fJet) {
    for (unsigned i = 0; i < fContainer.size(); ++i) {
      if (&*(fContainer[i].first) == &fJet)
        return true;
    }
    return false;
  }
}  // namespace JetAssociationTemplate
