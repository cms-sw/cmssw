<lcgdict>
  <class name="portabletest::TestHostCollection"/>
  <class name="edm::Wrapper<portabletest::TestHostCollection>" splitLevel="0"/>

  <class name="portabletest::TestStruct"/>
  <class name="portabletest::TestHostObject"/>
  <class name="edm::Wrapper<portabletest::TestHostObject>"/>

  <class name="portabletest::TestSoALayout<128,false>"/>
  <class name="portabletest::TestSoALayout2<128,false>"/>
  <class name="portabletest::TestSoALayout3<128,false>"/>

  <!-- Recursive templates (with no data) ensuring we have one CollectionLeaf<index, type> for each layout in the collection -->
  <class name="portablecollection::CollectionImpl<0, portabletest::TestSoALayout<128, false>, portabletest::TestSoALayout2<128, false>>"/>
  <class name="portablecollection::CollectionImpl<1, portabletest::TestSoALayout2<128, false>>"/>

  <!-- Recursive templates implementing the association of indices and layouts, and containing the data -->
  <class name="portablecollection::CollectionLeaf<0, portabletest::TestSoALayout<128, false>>"/>
  <class name="portablecollection::CollectionLeaf<1, portabletest::TestSoALayout2<128, false>>"/>

  <!-- Collection declaration for dictionary -->
  <class name="portabletest::TestHostMultiCollection2"/>

  <class name="edm::Wrapper<portabletest::TestHostMultiCollection2>" splitLevel="0"/>

  <!-- Recursive templates (with no data) ensuring we have one CollectionLeaf<index, type> for each layout in the collection -->
  <class name="portablecollection::CollectionImpl<0, portabletest::TestSoALayout<128, false>, portabletest::TestSoALayout2<128, false>, portabletest::TestSoALayout3<128, false>>"/>
  <class name="portablecollection::CollectionImpl<1, portabletest::TestSoALayout2<128, false>, portabletest::TestSoALayout3<128, false>>"/>
  <class name="portablecollection::CollectionImpl<2, portabletest::TestSoALayout3<128, false>>"/>

  <!-- Recursive templates implementing the association of indices and layouts, and containing the data -->
  <!-- Duplicates from portabletest::TestHostMultiCollection2 that must be made unique after xml generation
  <class name="portablecollection::CollectionLeaf<0, portabletest::TestSoALayout<128, false>>"/>
  <class name="portablecollection::CollectionLeaf<1, portabletest::TestSoALayout2<128, false>>"/>
  -->
  <class name="portablecollection::CollectionLeaf<2, portabletest::TestSoALayout3<128, false>>"/>

  <!-- Collection declaration for dictionary -->
  <class name="portabletest::TestHostMultiCollection3"/>

  <class name="edm::Wrapper<portabletest::TestHostMultiCollection3>" splitLevel="0"/>

  <class name="portabletest::TestProductWithPtr<alpaka_common::DevHost>"/>
  <class name="edm::Wrapper<portabletest::TestProductWithPtr<alpaka_common::DevHost>>" persistent="false"/>

  <!-- Torch SoAs and Collections -->
  <class name="torchportabletest::ParticleSoA"/>
  <class name="torchportabletest::ParticleSoA::View"/>
  <class name="torchportabletest::ParticleSoA::ConstView"/>
  <class name="torchportabletest::ParticleHostCollection"/>
  <class name="edm::Wrapper<torchportabletest::ParticleHostCollection>" splitLevel="0"/>

  <class name="torchportabletest::SimpleNetSoA"/>
  <class name="torchportabletest::SimpleNetSoA::View"/>
  <class name="torchportabletest::SimpleNetSoA::ConstView"/>
  <class name="torchportabletest::SimpleNetHostCollection"/>
  <class name="edm::Wrapper<torchportabletest::SimpleNetHostCollection>" splitLevel="0"/>

  <class name="torchportabletest::MultiHeadNetSoA"/>
  <class name="torchportabletest::MultiHeadNetSoA::View"/>
  <class name="torchportabletest::MultiHeadNetSoA::ConstView"/>
  <class name="torchportabletest::MultiHeadNetHostCollection"/>
  <class name="edm::Wrapper<torchportabletest::MultiHeadNetHostCollection>" splitLevel="0"/>

  <class name="torchportabletest::Image"/>
  <class name="torchportabletest::Image::View"/>
  <class name="torchportabletest::Image::ConstView"/>
  <class name="torchportabletest::ImageHostCollection"/>
  <class name="edm::Wrapper<torchportabletest::ImageHostCollection>" splitLevel="0"/>

  <class name="torchportabletest::Logits"/>
  <class name="torchportabletest::Logits::View"/>
  <class name="torchportabletest::Logits::ConstView"/>
  <class name="torchportabletest::LogitsHostCollection"/>
  <class name="edm::Wrapper<torchportabletest::LogitsHostCollection>" splitLevel="0"/>
</lcgdict>
