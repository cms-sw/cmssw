

    const int NSector=24;

    int NBarrel=0;
    int NDisk=0;

    L1TBarrel* L[10];
    L1TDisk* F[7];
    L1TDisk* B[7];

    if (mode==4) {
      NBarrel=6;
      NDisk=5;
      L[0]=new L1TBarrel(20.0,30.0,125.0,NSector);
      L[1]=new L1TBarrel(30.0,40.0,125.0,NSector);
      L[2]=new L1TBarrel(40.0,60.0,125.0,NSector);
      L[3]=new L1TBarrel(60.0,80.0,125.0,NSector);
      L[4]=new L1TBarrel(80.0,100.0,125.0,NSector);
      L[5]=new L1TBarrel(100.0,120.0,125.0,NSector);

      F[0]=new L1TDisk(125.0,150.0,NSector);
      F[1]=new L1TDisk(150.0,175.0,NSector);
      F[2]=new L1TDisk(175.0,210.0,NSector);
      F[3]=new L1TDisk(210.0,250.0,NSector);
      F[4]=new L1TDisk(250.0,275.0,NSector);

      B[0]=new L1TDisk(-125.0,-150.0,NSector);
      B[1]=new L1TDisk(-150.0,-175.0,NSector);
      B[2]=new L1TDisk(-175.0,-210.0,NSector);
      B[3]=new L1TDisk(-210.0,-250.0,NSector);
      B[4]=new L1TDisk(-250.0,-275.0,NSector);
      
    }


    if (mode==3) {
      NBarrel=6;
      NDisk=7;
      L[0]=new L1TBarrel(20.0,30.0,125.0,NSector);
      L[1]=new L1TBarrel(30.0,40.0,125.0,NSector);
      L[2]=new L1TBarrel(40.0,60.0,125.0,NSector);
      L[3]=new L1TBarrel(60.0,80.0,125.0,NSector);
      L[4]=new L1TBarrel(80.0,100.0,125.0,NSector);
      L[5]=new L1TBarrel(100.0,120.0,125.0,NSector);

      F[0]=new L1TDisk(125.0,140.0,NSector);
      F[1]=new L1TDisk(140.0,157.0,NSector);
      F[2]=new L1TDisk(157.0,175.0,NSector);
      F[3]=new L1TDisk(175.0,195.0,NSector);
      F[4]=new L1TDisk(195.0,220.0,NSector);
      F[5]=new L1TDisk(220.0,245.0,NSector);
      F[6]=new L1TDisk(245.0,279.0,NSector);

      B[0]=new L1TDisk(-125.0,-140.0,NSector);
      B[1]=new L1TDisk(-140.0,-157.0,NSector);
      B[2]=new L1TDisk(-157.0,-175.0,NSector);
      B[3]=new L1TDisk(-175.0,-195.0,NSector);
      B[4]=new L1TDisk(-195.0,-220.0,NSector);
      B[5]=new L1TDisk(-220.0,-245.0,NSector);
      B[6]=new L1TDisk(-245.0,-279.0,NSector);
      
    }
    
    if (mode==2){
      NBarrel=10;
      NDisk=0;
      L[0]=new L1TBarrel(18.0,23.5,290.0,NSector);
      L[1]=new L1TBarrel(23.5,35.0,290.0,NSector);
      L[2]=new L1TBarrel(35.0,49.0,290.0,NSector);
      L[3]=new L1TBarrel(49.0,55.0,290.0,NSector);
      L[4]=new L1TBarrel(55.0,66.0,290.0,NSector);
      L[5]=new L1TBarrel(66.0,75.0,290.0,NSector);
      L[6]=new L1TBarrel(75.0,83.0,290.0,NSector);
      L[7]=new L1TBarrel(83.0,90.0,290.0,NSector);
      L[8]=new L1TBarrel(90.0,99.0,290.0,NSector);
      L[9]=new L1TBarrel(99.0,110.0,290.0,NSector);
    }


    if (mode==1){
      NBarrel=10;
      NDisk=0;
      L[0]=new L1TBarrel(30.0,38.0,290.0,NSector);
      L[1]=new L1TBarrel(38.0,47.0,290.0,NSector);
      L[2]=new L1TBarrel(47.0,56.0,290.0,NSector);
      L[3]=new L1TBarrel(56.0,65.0,290.0,NSector);
      L[4]=new L1TBarrel(65.0,73.0,290.0,NSector);
      L[5]=new L1TBarrel(73.0,78.0,290.0,NSector);
      L[6]=new L1TBarrel(78.0,85.0,290.0,NSector);
      L[7]=new L1TBarrel(85.0,92.0,290.0,NSector);
      L[8]=new L1TBarrel(92.0,98.0,290.0,NSector);
      L[9]=new L1TBarrel(98.0,110.0,290.0,NSector);
    }



    //cout << "looping over stubs: "<<ev.nstubs()<<endl;
      
    for (int j=0;j<ev.nstubs();j++){

      L1TStub stub=ev.stub(j);

      int simtrackid=ev.simtrackid(stub);
      //int simtrackid=-1;

      //cout << "Simtrack id:"<<simtrackid<<endl;

      /*
      int isimtrack=ev.getSimtrackFromSimtrackid(simtrackid);
      double simtrackpt=0.0;
      double simtrackphi=999.0;
      double simtracketa=999.0;
      double simtrackvx=999.0;
      double simtrackvy=999.0;
      double simtrackvz=999.0;
      int simtracktype=999.0;
      if (isimtrack!=-1) {
	L1SimTrack simtrack=ev.simtrack(isimtrack);
        simtrackpt=simtrack.pt();
	simtrackphi=simtrack.phi();
	simtracketa=simtrack.eta();
	simtrackvx=simtrack.vx();      
	simtrackvy=simtrack.vy();      
	simtrackvz=simtrack.vz();      
	simtracktype=simtrack.type();      
      }

      if (stub.layer()==1){
        //cout << "stub:"<<stub.x()<<" "<<stub.y()<<" "<<stub.z()
      	//     <<" "<<simtrackvx<<" "<<simtrackvy<<" "<<simtrackvz
	//     <<" "<<simtracketa<<" "<<simtracktype<<endl;
      }
      */    

      //int simtrackid=ev.simtrackid(aStub);
      //int simtrackid=-1;

      //cout << "Simtrack id:"<<simtrackid<<endl;

      int layer=stub.layer();
      int ladder=stub.ladder();
      int module=stub.module();

      double sigmax=0.0029;
      double sigmaz=0.0433;

      //cout << "stub x y z r:"<<stub.x()<<" "<<stub.y()<<" "<<stub.z()
      //	   <<" "<<hypot(stub.x(),stub.y())<<endl;
      
      if (mode!=1) {
	if (hypot(stub.x(),stub.y())>60) sigmaz=1.44;  //HACK!!!
      }

      //L1TStub aStub(simtrackid,stub.diphi(),stub.diz(),layer,ladder,module,stub.x(),stub.y(),stub.z(),sigmax,sigmaz,stub.pt()*stub.ptsign());
      L1TStub aStub(simtrackid,stub.diphi(),stub.diz(),layer,ladder,module,stub.strip(),stub.x(),stub.y(),stub.z(),sigmax,sigmaz,stub.pt(),stub.bend());

      //cout << "layer ladder module:"<<layer<<" "<<ladder<<" "<<module
      //	   << " "<<aStub.r()<<" "<<aStub.phi()<<" "<<aStub.z()<<endl;
      

      int count_match=0;
      for (int ilayer=0;ilayer<NBarrel;ilayer++){
	if (L[ilayer]->addStub(aStub)) count_match++;
      }
      for (int idisk=0;idisk<NDisk;idisk++){
	if (F[idisk]->addStub(aStub)) count_match++;
	if (B[idisk]->addStub(aStub)) count_match++;
      }
      
      if (count_match!=1) {
	cout << "layer ladder module:"<<layer<<" "<<ladder<<" "<<module
	     << " "<<aStub.r()<<" "<<aStub.phi()<<" "<<aStub.z()
	     << " "<<count_match<<endl;
      }
      assert(count_match==1);

    }

    //cout << "Will start finding tracks. phiWindowSF: "<<phiWindowSF_<<endl;

    L1TTracks allTracks;


    if (mode==2) {

      L[0]->findTracklets(L[1]);
      L[0]->findMatches(L[2],phiWindowSF_,0.2,2.0);
      L[0]->findMatches(L[3],phiWindowSF_,0.2,2.0);
      L[0]->findMatches(L[4],phiWindowSF_,1.0,3.0);
      L[0]->findMatches(L[5],phiWindowSF_,1.0,3.0);
      L[0]->findMatches(L[6],phiWindowSF_,1.0,3.0);
      L[0]->findMatches(L[7],phiWindowSF_,1.0,3.0);
      L[0]->findMatches(L[8],phiWindowSF_,1.0,3.0);
      L[0]->findMatches(L[9],phiWindowSF_,1.0,3.0);
      L[0]->fitTracks();

      allTracks.addTracks(L[0]->allTracks());

      L[2]->findTracklets(L[3]);
      L[2]->findMatches(L[0],phiWindowSF_,0.075,2.0);
      L[2]->findMatches(L[1],phiWindowSF_,0.075,2.0);
      L[2]->findMatches(L[4],phiWindowSF_,0.3,3.0);
      L[2]->findMatches(L[5],phiWindowSF_,0.3,3.0);
      L[2]->findMatches(L[6],phiWindowSF_,0.3,3.0);
      L[2]->findMatches(L[7],phiWindowSF_,0.3,3.0);
      L[2]->findMatches(L[8],phiWindowSF_,0.3,3.0);
      L[2]->findMatches(L[9],phiWindowSF_,0.3,3.0);
      L[2]->fitTracks();

      allTracks.addTracks(L[2]->allTracks());

      L[4]->findTracklets(L[5]);
      L[4]->findMatches(L[0],phiWindowSF_,0.075,10.0);
      L[4]->findMatches(L[1],phiWindowSF_,0.075,10.0);
      L[4]->findMatches(L[2],phiWindowSF_,0.075,10.0);
      L[4]->findMatches(L[3],phiWindowSF_,0.075,10.0);
      L[4]->findMatches(L[6],phiWindowSF_,0.075,10.0);
      L[4]->findMatches(L[7],phiWindowSF_,0.075,10.0);
      L[4]->findMatches(L[8],phiWindowSF_,0.075,10.0);
      L[4]->findMatches(L[9],phiWindowSF_,0.075,10.0);
      L[4]->fitTracks();

      allTracks.addTracks(L[4]->allTracks());

      L[6]->findTracklets(L[7]);
      L[6]->findMatches(L[0],phiWindowSF_,0.075,10.0);
      L[6]->findMatches(L[1],phiWindowSF_,0.075,10.0);
      L[6]->findMatches(L[2],phiWindowSF_,0.075,10.0);
      L[6]->findMatches(L[3],phiWindowSF_,0.075,10.0);
      L[6]->findMatches(L[4],phiWindowSF_,0.075,10.0);
      L[6]->findMatches(L[5],phiWindowSF_,0.075,10.0);
      L[6]->findMatches(L[8],phiWindowSF_,0.075,10.0);
      L[6]->findMatches(L[9],phiWindowSF_,0.075,10.0);
      L[6]->fitTracks();

      allTracks.addTracks(L[6]->allTracks());
     

      L[8]->findTracklets(L[9]);
      L[8]->findMatches(L[0],phiWindowSF_,0.075,10.0);
      L[8]->findMatches(L[1],phiWindowSF_,0.075,10.0);
      L[8]->findMatches(L[2],phiWindowSF_,0.075,10.0);
      L[8]->findMatches(L[3],phiWindowSF_,0.075,10.0);
      L[8]->findMatches(L[4],phiWindowSF_,0.075,10.0);
      L[8]->findMatches(L[5],phiWindowSF_,0.075,10.0);
      L[8]->findMatches(L[6],phiWindowSF_,0.075,10.0);
      L[8]->findMatches(L[7],phiWindowSF_,0.075,10.0);
      L[8]->fitTracks();

      allTracks.addTracks(L[8]->allTracks());

    }

    if (mode==3) {

    if (1){
      L[0]->findTracklets(L[1]);
      L[0]->findTracklets(B[0]);
      L[0]->findTracklets(F[0]);
      L[0]->findMatches(L[2],phiWindowSF_,0.075,0.5);
      L[0]->findMatches(L[3],phiWindowSF_,0.12,3.0);
      L[0]->findMatches(L[4],phiWindowSF_,0.15,3.0);
      L[0]->findMatches(L[5],phiWindowSF_,0.2,3.0);
      L[0]->findMatches(F[0],phiWindowSF_);
      L[0]->findMatches(F[1],phiWindowSF_);
      L[0]->findMatches(F[2],phiWindowSF_);
      L[0]->findMatches(F[3],phiWindowSF_);
      L[0]->findMatches(F[4],phiWindowSF_);
      L[0]->findMatches(F[5],phiWindowSF_);
      L[0]->findMatches(F[6],phiWindowSF_);
      L[0]->findMatches(B[0],phiWindowSF_);
      L[0]->findMatches(B[1],phiWindowSF_);
      L[0]->findMatches(B[2],phiWindowSF_);
      L[0]->findMatches(B[3],phiWindowSF_);
      L[0]->findMatches(B[4],phiWindowSF_);
      L[0]->findMatches(B[5],phiWindowSF_);
      L[0]->findMatches(B[6],phiWindowSF_);
      L[0]->fitTracks();
      
      allTracks.addTracks(L[0]->allTracks());
    }      
    
    if(1){
      L[1]->findTracklets(L[2]);
      L[1]->findTracklets(B[0]);
      L[1]->findTracklets(F[0]);
      L[1]->findMatches(L[0],phiWindowSF_,0.04,0.5);
      L[1]->findMatches(L[3],phiWindowSF_,0.075,3.0);
      L[1]->findMatches(L[4],phiWindowSF_,0.1,3.0);
      L[1]->findMatches(L[5],phiWindowSF_,0.15,3.0);
      L[1]->findMatches(F[0],phiWindowSF_);
      L[1]->findMatches(F[1],phiWindowSF_);
      L[1]->findMatches(F[2],phiWindowSF_);
      L[1]->findMatches(F[3],phiWindowSF_);
      L[1]->findMatches(F[4],phiWindowSF_);
      L[1]->findMatches(F[5],phiWindowSF_);
      L[1]->findMatches(F[6],phiWindowSF_);
      L[1]->findMatches(B[0],phiWindowSF_);
      L[1]->findMatches(B[1],phiWindowSF_);
      L[1]->findMatches(B[2],phiWindowSF_);
      L[1]->findMatches(B[3],phiWindowSF_);
      L[1]->findMatches(B[4],phiWindowSF_);
      L[1]->findMatches(B[5],phiWindowSF_);
      L[1]->findMatches(B[6],phiWindowSF_);
      L[1]->fitTracks();
      
      allTracks.addTracks(L[1]->allTracks());
    }

    if(1){
      L[2]->findTracklets(L[3]);
      L[2]->findTracklets(B[0]);
      L[2]->findTracklets(F[0]);
      L[2]->findMatches(L[0],phiWindowSF_,0.025,5.0);
      L[2]->findMatches(L[1],phiWindowSF_,0.025,3.0);
      L[2]->findMatches(L[4],phiWindowSF_,0.03,8.0);
      L[2]->findMatches(L[5],phiWindowSF_,0.05,10.0);
      L[2]->findMatches(F[0],phiWindowSF_);
      L[2]->findMatches(F[1],phiWindowSF_);
      L[2]->findMatches(F[2],phiWindowSF_);
      L[2]->findMatches(F[3],phiWindowSF_);
      L[2]->findMatches(F[4],phiWindowSF_);
      L[2]->findMatches(F[5],phiWindowSF_);
      L[2]->findMatches(F[6],phiWindowSF_);
      L[2]->findMatches(B[0],phiWindowSF_);
      L[2]->findMatches(B[1],phiWindowSF_);
      L[2]->findMatches(B[2],phiWindowSF_);
      L[2]->findMatches(B[3],phiWindowSF_);
      L[2]->findMatches(B[4],phiWindowSF_);
      L[2]->findMatches(B[5],phiWindowSF_);
      L[2]->findMatches(B[6],phiWindowSF_);
      L[2]->fitTracks();
      
      allTracks.addTracks(L[2]->allTracks());
    }
  
    if(1){
      L[3]->findTracklets(L[4]);
      L[3]->findTracklets(B[0]);
      L[3]->findTracklets(F[0]);
      L[3]->findMatches(L[0],phiWindowSF_,0.025,5.0);
      L[3]->findMatches(L[1],phiWindowSF_,0.025,3.0);
      L[3]->findMatches(L[2],phiWindowSF_,0.03,8.0);
      L[3]->findMatches(L[5],phiWindowSF_,0.05,10.0);
      L[3]->findMatches(F[0],phiWindowSF_);
      L[3]->findMatches(F[1],phiWindowSF_);
      L[3]->findMatches(F[2],phiWindowSF_);
      L[3]->findMatches(F[3],phiWindowSF_);
      L[3]->findMatches(F[4],phiWindowSF_);
      L[3]->findMatches(F[5],phiWindowSF_);
      L[3]->findMatches(F[6],phiWindowSF_);
      L[3]->findMatches(B[0],phiWindowSF_);
      L[3]->findMatches(B[1],phiWindowSF_);
      L[3]->findMatches(B[2],phiWindowSF_);
      L[3]->findMatches(B[3],phiWindowSF_);
      L[3]->findMatches(B[4],phiWindowSF_);
      L[3]->findMatches(B[5],phiWindowSF_);
      L[3]->findMatches(B[6],phiWindowSF_);
      L[3]->fitTracks();
      
      allTracks.addTracks(L[3]->allTracks());
    }
  
    if(1){      
      F[0]->findTracklets(F[1]);
      F[0]->findMatches(F[2],phiWindowSF_,0.05,0.5,0.05);
      F[0]->findMatches(F[3],phiWindowSF_,0.09,0.6,0.09);
      F[0]->findMatches(F[4],phiWindowSF_,0.1,1.0,0.1);
      F[0]->findMatches(F[5],phiWindowSF_,0.15,1.0,0.15);
      F[0]->findMatches(F[6],phiWindowSF_,0.15,1.0,0.15);
      F[0]->findBarrelMatches(L[0],phiWindowSF_);
      F[0]->findBarrelMatches(L[1],phiWindowSF_);
      F[0]->findBarrelMatches(L[2],phiWindowSF_);
      F[0]->findBarrelMatches(L[3],phiWindowSF_);
      F[0]->findBarrelMatches(L[4],phiWindowSF_);
      F[0]->findBarrelMatches(L[5],phiWindowSF_);
      F[0]->fitTracks();

      allTracks.addTracks(F[0]->allTracks());
    }      

    if(1){
      F[1]->findTracklets(F[2]);
      F[1]->findMatches(F[0],phiWindowSF_,0.04,0.4,0.04);
      F[1]->findMatches(F[3],phiWindowSF_,0.05,0.5,0.05);
      F[1]->findMatches(F[4],phiWindowSF_,0.075,0.5,0.075);
      F[1]->findMatches(F[5],phiWindowSF_,0.1,1.0,0.1);
      F[1]->findMatches(F[6],phiWindowSF_,0.1,1.0,0.1);
      F[1]->findBarrelMatches(L[0],phiWindowSF_);
      F[1]->findBarrelMatches(L[1],phiWindowSF_);
      F[1]->findBarrelMatches(L[2],phiWindowSF_);
      F[1]->findBarrelMatches(L[3],phiWindowSF_);
      F[1]->findBarrelMatches(L[4],phiWindowSF_);
      F[1]->findBarrelMatches(L[5],phiWindowSF_);
      F[1]->fitTracks();

      allTracks.addTracks(F[1]->allTracks());
    }  

    if(1){
      F[2]->findTracklets(F[3]);
      F[2]->findMatches(F[0],phiWindowSF_,0.05,0.5,0.05);
      F[2]->findMatches(F[1],phiWindowSF_,0.04,0.5,0.04);
      F[2]->findMatches(F[4],phiWindowSF_,0.05,0.5,0.05);
      F[2]->findMatches(F[5],phiWindowSF_,0.05,0.8,0.05);
      F[2]->findMatches(F[6],phiWindowSF_,0.08,1.0,0.08);
      F[2]->findBarrelMatches(L[0],phiWindowSF_);
      F[2]->findBarrelMatches(L[1],phiWindowSF_);
      F[2]->findBarrelMatches(L[2],phiWindowSF_);
      F[2]->findBarrelMatches(L[3],phiWindowSF_);
      F[2]->findBarrelMatches(L[4],phiWindowSF_);
      F[2]->findBarrelMatches(L[5],phiWindowSF_);
      F[2]->fitTracks();
      
      allTracks.addTracks(F[2]->allTracks());
    }

    if(1){
      F[3]->findTracklets(F[4]);
      F[3]->findMatches(F[0],phiWindowSF_,0.05,0.5,0.05);
      F[3]->findMatches(F[1],phiWindowSF_,0.05,0.5,0.05);
      F[3]->findMatches(F[2],phiWindowSF_,0.05,0.5,0.05);
      F[3]->findMatches(F[5],phiWindowSF_,0.05,0.8,0.05);
      F[3]->findMatches(F[6],phiWindowSF_,0.05,0.8,0.05);
      F[3]->findBarrelMatches(L[0],phiWindowSF_);
      F[3]->findBarrelMatches(L[1],phiWindowSF_);
      F[3]->findBarrelMatches(L[2],phiWindowSF_);
      F[3]->findBarrelMatches(L[3],phiWindowSF_);
      F[3]->findBarrelMatches(L[4],phiWindowSF_);
      F[3]->findBarrelMatches(L[5],phiWindowSF_);
      F[3]->fitTracks();
      
      allTracks.addTracks(F[3]->allTracks());
    }

    if(1){
      F[4]->findTracklets(F[5]);
      F[4]->findMatches(F[0],phiWindowSF_,0.05,0.5,0.05);
      F[4]->findMatches(F[1],phiWindowSF_,0.05,0.5,0.05);
      F[4]->findMatches(F[2],phiWindowSF_,0.05,0.5,0.05);
      F[4]->findMatches(F[3],phiWindowSF_,0.05,0.5,0.05);
      F[4]->findMatches(F[6],phiWindowSF_,0.05,0.5,0.05);
      F[4]->findBarrelMatches(L[0],phiWindowSF_);
      F[4]->findBarrelMatches(L[1],phiWindowSF_);
      F[4]->findBarrelMatches(L[2],phiWindowSF_);
      F[4]->findBarrelMatches(L[3],phiWindowSF_);
      F[4]->findBarrelMatches(L[4],phiWindowSF_);
      F[4]->findBarrelMatches(L[5],phiWindowSF_);
      F[4]->fitTracks();
      
      allTracks.addTracks(F[4]->allTracks());
    }      

    if(1){
      F[5]->findTracklets(F[6]);
      F[5]->findMatches(F[0],phiWindowSF_,0.05,0.5,0.05);
      F[5]->findMatches(F[1],phiWindowSF_,0.05,0.5,0.05);
      F[5]->findMatches(F[2],phiWindowSF_,0.05,0.5,0.05);
      F[5]->findMatches(F[3],phiWindowSF_,0.05,0.5,0.05);
      F[5]->findMatches(F[4],phiWindowSF_,0.05,0.5,0.05);
      F[5]->findBarrelMatches(L[0],phiWindowSF_);
      F[5]->findBarrelMatches(L[1],phiWindowSF_);
      F[5]->findBarrelMatches(L[2],phiWindowSF_);
      F[5]->findBarrelMatches(L[3],phiWindowSF_);
      F[5]->findBarrelMatches(L[4],phiWindowSF_);
      F[5]->findBarrelMatches(L[5],phiWindowSF_);
      F[5]->fitTracks();
      
      allTracks.addTracks(F[5]->allTracks());
    }      

    if(1){
      B[0]->findTracklets(B[1]);
      B[0]->findMatches(B[2],phiWindowSF_,0.05,0.5,0.05);
      B[0]->findMatches(B[3],phiWindowSF_,0.08,0.6,0.08);
      B[0]->findMatches(B[4],phiWindowSF_,0.1,1.0,0.1);
      B[0]->findMatches(B[5],phiWindowSF_,0.15,1.0,0.15);
      B[0]->findMatches(B[6],phiWindowSF_,0.15,1.0,0.15);
      B[0]->findBarrelMatches(L[0],phiWindowSF_);
      B[0]->findBarrelMatches(L[1],phiWindowSF_);
      B[0]->findBarrelMatches(L[2],phiWindowSF_);
      B[0]->findBarrelMatches(L[3],phiWindowSF_);
      B[0]->findBarrelMatches(L[4],phiWindowSF_);
      B[0]->findBarrelMatches(L[5],phiWindowSF_);
      B[0]->fitTracks();
      
      allTracks.addTracks(B[0]->allTracks());
    }      

    if(1){
      B[1]->findTracklets(B[2]);
      B[1]->findMatches(B[0],phiWindowSF_,0.04,0.4,0.04);
      B[1]->findMatches(B[3],phiWindowSF_,0.05,0.5,0.05);
      B[1]->findMatches(B[4],phiWindowSF_,0.075,0.5,0.075);
      B[1]->findMatches(B[5],phiWindowSF_,0.1,1.0,0.1);
      B[1]->findMatches(B[6],phiWindowSF_,0.1,1.0,0.1);
      B[1]->findBarrelMatches(L[0],phiWindowSF_);
      B[1]->findBarrelMatches(L[1],phiWindowSF_);
      B[1]->findBarrelMatches(L[2],phiWindowSF_);
      B[1]->findBarrelMatches(L[3],phiWindowSF_);
      B[1]->findBarrelMatches(L[4],phiWindowSF_);
      B[1]->findBarrelMatches(L[5],phiWindowSF_);
      B[1]->fitTracks();
      
      allTracks.addTracks(B[1]->allTracks());
    }
      
    if(1){  
      B[2]->findTracklets(B[3]);
      B[2]->findMatches(B[0],phiWindowSF_,0.05,0.5,0.05);
      B[2]->findMatches(B[1],phiWindowSF_,0.04,0.5,0.04);
      B[2]->findMatches(B[4],phiWindowSF_,0.05,0.5,0.05);
      B[2]->findMatches(B[5],phiWindowSF_,0.05,0.8,0.05);
      B[2]->findMatches(B[6],phiWindowSF_,0.08,1.0,0.08);
      B[2]->findBarrelMatches(L[0],phiWindowSF_);
      B[2]->findBarrelMatches(L[1],phiWindowSF_);
      B[2]->findBarrelMatches(L[2],phiWindowSF_);
      B[2]->findBarrelMatches(L[3],phiWindowSF_);
      B[2]->findBarrelMatches(L[4],phiWindowSF_);
      B[2]->findBarrelMatches(L[5],phiWindowSF_);
      B[2]->fitTracks();
      
      allTracks.addTracks(B[2]->allTracks());
    }      

    if(1){
      B[3]->findTracklets(B[4]);
      B[3]->findMatches(B[0],phiWindowSF_,0.05,0.5,0.05);
      B[3]->findMatches(B[1],phiWindowSF_,0.05,0.5,0.05);
      B[3]->findMatches(B[2],phiWindowSF_,0.05,0.5,0.05);
      B[3]->findMatches(B[5],phiWindowSF_,0.05,0.8,0.05);
      B[3]->findMatches(B[6],phiWindowSF_,0.05,0.8,0.05);
      B[3]->findBarrelMatches(L[0],phiWindowSF_);
      B[3]->findBarrelMatches(L[1],phiWindowSF_);
      B[3]->findBarrelMatches(L[2],phiWindowSF_);
      B[3]->findBarrelMatches(L[3],phiWindowSF_);
      B[3]->findBarrelMatches(L[4],phiWindowSF_);
      B[3]->findBarrelMatches(L[5],phiWindowSF_);
      B[3]->fitTracks();

      allTracks.addTracks(B[3]->allTracks());
    }      

    if(1){
      B[4]->findTracklets(B[5]);
      B[4]->findMatches(B[0],phiWindowSF_,0.05,0.5,0.05);
      B[4]->findMatches(B[1],phiWindowSF_,0.05,0.5,0.05);
      B[4]->findMatches(B[2],phiWindowSF_,0.05,0.5,0.05);
      B[4]->findMatches(B[3],phiWindowSF_,0.05,0.5,0.05);
      B[4]->findMatches(B[6],phiWindowSF_,0.05,0.5,0.05);
      B[4]->findBarrelMatches(L[0],phiWindowSF_);
      B[4]->findBarrelMatches(L[1],phiWindowSF_);
      B[4]->findBarrelMatches(L[2],phiWindowSF_);
      B[4]->findBarrelMatches(L[3],phiWindowSF_);
      B[4]->findBarrelMatches(L[4],phiWindowSF_);
      B[4]->findBarrelMatches(L[5],phiWindowSF_);
      B[4]->fitTracks();
      
      allTracks.addTracks(B[4]->allTracks());
    }      

    if(1){
      B[5]->findTracklets(B[6]);
      B[5]->findMatches(B[0],phiWindowSF_,0.05,0.5,0.05);
      B[5]->findMatches(B[1],phiWindowSF_,0.05,0.5,0.05);
      B[5]->findMatches(B[2],phiWindowSF_,0.05,0.5,0.05);
      B[5]->findMatches(B[3],phiWindowSF_,0.05,0.5,0.05);
      B[5]->findMatches(B[4],phiWindowSF_,0.05,0.5,0.05);
      B[5]->findBarrelMatches(L[0],phiWindowSF_);
      B[5]->findBarrelMatches(L[1],phiWindowSF_);
      B[5]->findBarrelMatches(L[2],phiWindowSF_);
      B[5]->findBarrelMatches(L[3],phiWindowSF_);
      B[5]->findBarrelMatches(L[4],phiWindowSF_);
      B[5]->findBarrelMatches(L[5],phiWindowSF_);
      B[5]->fitTracks();
      
      allTracks.addTracks(B[5]->allTracks());
    }

    }
    if (mode==4) {

    if(1){	 
      //tracklettimer.start();
      L[0]->findTracklets(L[1]);
      L[0]->findTracklets(B[0],50.0);
      L[0]->findTracklets(F[0],50.0);
      //tracklettimer.stop();
      //matchtimer.start();
      L[0]->findMatches(L[2],phiWindowSF_,0.075,0.5);
      L[0]->findMatches(L[3],phiWindowSF_,0.12,3.0);
      L[0]->findMatches(L[4],phiWindowSF_,0.15,3.0);
      L[0]->findMatches(L[5],phiWindowSF_,0.2,3.0);
      L[0]->findMatches(F[0],phiWindowSF_);
      L[0]->findMatches(F[1],phiWindowSF_);
      L[0]->findMatches(F[2],phiWindowSF_);
      L[0]->findMatches(F[3],phiWindowSF_);
      L[0]->findMatches(F[4],phiWindowSF_);
      L[0]->findMatches(B[0],phiWindowSF_);
      L[0]->findMatches(B[1],phiWindowSF_);
      L[0]->findMatches(B[2],phiWindowSF_);
      L[0]->findMatches(B[3],phiWindowSF_);
      L[0]->findMatches(B[4],phiWindowSF_);
      //matchtimer.stop();
      //fittimer.start();
      L[0]->fitTracks();
      //fittimer.stop();
      
      allTracks.addTracks(L[0]->allTracks());
    }      
    
    if(1){
      //tracklettimer.start();
      L[1]->findTracklets(L[2]);
      L[1]->findTracklets(B[0],70.0);
      L[1]->findTracklets(F[0],70.0);
      //tracklettimer.stop();
      //matchtimer.start();
      L[1]->findMatches(L[0],phiWindowSF_,0.04,0.5);
      L[1]->findMatches(L[3],phiWindowSF_,0.075,3.0);
      L[1]->findMatches(L[4],phiWindowSF_,0.1,3.0);
      L[1]->findMatches(L[5],phiWindowSF_,0.15,3.0);
      L[1]->findMatches(F[0],phiWindowSF_);
      L[1]->findMatches(F[1],phiWindowSF_);
      L[1]->findMatches(F[2],phiWindowSF_);
      L[1]->findMatches(F[3],phiWindowSF_);
      L[1]->findMatches(F[4],phiWindowSF_);
      L[1]->findMatches(B[0],phiWindowSF_);
      L[1]->findMatches(B[1],phiWindowSF_);
      L[1]->findMatches(B[2],phiWindowSF_);
      L[1]->findMatches(B[3],phiWindowSF_);
      L[1]->findMatches(B[4],phiWindowSF_);
      //matchtimer.stop();
      //fittimer.start();
      L[1]->fitTracks();
      //fittimer.stop();
      
      allTracks.addTracks(L[1]->allTracks());
    }

    if(1){
      //tracklettimer.start();
      L[2]->findTracklets(L[3]);
      L[2]->findTracklets(B[0]);
      L[2]->findTracklets(F[0]);
      //tracklettimer.stop();
      //matchtimer.start();
      L[2]->findMatches(L[0],phiWindowSF_,0.025,5.0);
      L[2]->findMatches(L[1],phiWindowSF_,0.025,3.0);
      L[2]->findMatches(L[4],phiWindowSF_,0.03,8.0);
      L[2]->findMatches(L[5],phiWindowSF_,0.05,10.0);
      L[2]->findMatches(F[0],phiWindowSF_);
      L[2]->findMatches(F[1],phiWindowSF_);
      L[2]->findMatches(F[2],phiWindowSF_);
      L[2]->findMatches(F[3],phiWindowSF_);
      L[2]->findMatches(F[4],phiWindowSF_);
      L[2]->findMatches(B[0],phiWindowSF_);
      L[2]->findMatches(B[1],phiWindowSF_);
      L[2]->findMatches(B[2],phiWindowSF_);
      L[2]->findMatches(B[3],phiWindowSF_);
      L[2]->findMatches(B[4],phiWindowSF_);
      //matchtimer.stop();
      //fittimer.start();
      L[2]->fitTracks();
      //fittimer.stop();
      
      allTracks.addTracks(L[2]->allTracks());
    }
  
    if(1){
      //tracklettimer.start();
      L[3]->findTracklets(L[4]);
      L[3]->findTracklets(B[0]);
      L[3]->findTracklets(F[0]);
      //tracklettimer.stop();
      //matchtimer.start();
      L[3]->findMatches(L[0],phiWindowSF_,0.025,10.0); //5->10
      L[3]->findMatches(L[1],phiWindowSF_,0.025,8.0);  //3->8
      L[3]->findMatches(L[2],phiWindowSF_,0.03,6.0);   //8->6
      L[3]->findMatches(L[5],phiWindowSF_,0.05,8.0);  //10->8
      L[3]->findMatches(F[0],phiWindowSF_);
      L[3]->findMatches(F[1],phiWindowSF_);
      L[3]->findMatches(F[2],phiWindowSF_);
      L[3]->findMatches(F[3],phiWindowSF_);
      L[3]->findMatches(F[4],phiWindowSF_);
      L[3]->findMatches(B[0],phiWindowSF_);
      L[3]->findMatches(B[1],phiWindowSF_);
      L[3]->findMatches(B[2],phiWindowSF_);
      L[3]->findMatches(B[3],phiWindowSF_);
      L[3]->findMatches(B[4],phiWindowSF_);
      //matchtimer.stop();
      //fittimer.start();
      L[3]->fitTracks();
      //fittimer.stop();
      
      allTracks.addTracks(L[3]->allTracks());
    }

    // TEST ADDING SEEDING BETWEEN LAYERS 5 AND 6
    if(1){
      //tracklettimer.start();
      L[4]->findTracklets(L[5]);
      //tracklettimer.stop();
      //matchtimer.start();
      L[4]->findMatches(L[0],phiWindowSF_,0.025,10.0); //5->10
      L[4]->findMatches(L[1],phiWindowSF_,0.025,10.0); //5->10
      L[4]->findMatches(L[2],phiWindowSF_,0.03,8.0);   //8->8
      L[4]->findMatches(L[3],phiWindowSF_,0.05,6.0);  //10->6
      /*
      L[4]->findMatches(F[0],phiWindowSF_);
      L[4]->findMatches(F[1],phiWindowSF_);
      L[4]->findMatches(F[2],phiWindowSF_);
      L[4]->findMatches(F[3],phiWindowSF_);
      L[4]->findMatches(F[4],phiWindowSF_);
      L[4]->findMatches(B[0],phiWindowSF_);
      L[4]->findMatches(B[1],phiWindowSF_);
      L[4]->findMatches(B[2],phiWindowSF_);
      L[4]->findMatches(B[3],phiWindowSF_);
      L[4]->findMatches(B[4],phiWindowSF_);
      */
      //matchtimer.stop();
      //fittimer.start();
      L[4]->fitTracks();
      //fittimer.stop();
      
      allTracks.addTracks(L[4]->allTracks());
    }
  
    if(1){      
      //tracklettimer.start();
      F[0]->findTracklets(F[1]);
      //tracklettimer.stop();
      //matchtimer.start();
      F[0]->findMatches(F[2],phiWindowSF_,0.05,0.5,0.05);
      F[0]->findMatches(F[3],phiWindowSF_,0.09,0.6,0.09);
      F[0]->findMatches(F[4],phiWindowSF_,0.1,1.0,0.1);
      F[0]->findBarrelMatches(L[0],phiWindowSF_);
      F[0]->findBarrelMatches(L[1],phiWindowSF_);
      F[0]->findBarrelMatches(L[2],phiWindowSF_);
      F[0]->findBarrelMatches(L[3],phiWindowSF_);
      F[0]->findBarrelMatches(L[4],phiWindowSF_);
      F[0]->findBarrelMatches(L[5],phiWindowSF_);
      //matchtimer.stop();
      //fittimer.start();
      F[0]->fitTracks();
      //fittimer.stop();

      allTracks.addTracks(F[0]->allTracks());
    }      

    if(1){
      //tracklettimer.start();
      F[1]->findTracklets(F[2]);
      //tracklettimer.stop();
      //matchtimer.start();
      F[1]->findMatches(F[0],phiWindowSF_,0.04,0.4,0.04);
      F[1]->findMatches(F[3],phiWindowSF_,0.05,0.5,0.05);
      F[1]->findMatches(F[4],phiWindowSF_,0.075,0.5,0.075);
      F[1]->findBarrelMatches(L[0],phiWindowSF_);
      F[1]->findBarrelMatches(L[1],phiWindowSF_);
      F[1]->findBarrelMatches(L[2],phiWindowSF_);
      F[1]->findBarrelMatches(L[3],phiWindowSF_);
      F[1]->findBarrelMatches(L[4],phiWindowSF_);
      F[1]->findBarrelMatches(L[5],phiWindowSF_);
      //matchtimer.stop();
      //fittimer.start();
      F[1]->fitTracks();
      //fittimer.stop();

      allTracks.addTracks(F[1]->allTracks());
    }  

    if(1){
      //tracklettimer.start();
      F[2]->findTracklets(F[3]);
      //tracklettimer.stop();
      //matchtimer.start();
      F[2]->findMatches(F[0],phiWindowSF_,0.05,0.5,0.05);
      F[2]->findMatches(F[1],phiWindowSF_,0.04,0.5,0.04);
      F[2]->findMatches(F[4],phiWindowSF_,0.05,0.5,0.05);
      F[2]->findBarrelMatches(L[0],phiWindowSF_);
      F[2]->findBarrelMatches(L[1],phiWindowSF_);
      F[2]->findBarrelMatches(L[2],phiWindowSF_);
      F[2]->findBarrelMatches(L[3],phiWindowSF_);
      F[2]->findBarrelMatches(L[4],phiWindowSF_);
      F[2]->findBarrelMatches(L[5],phiWindowSF_);
      //matchtimer.stop();
      //fittimer.start();
      F[2]->fitTracks();
      //fittimer.stop();
      
      allTracks.addTracks(F[2]->allTracks());
    }

    if(1){
      //tracklettimer.start();
      F[3]->findTracklets(F[4]);
      //tracklettimer.stop();
      //matchtimer.start();
      F[3]->findMatches(F[0],phiWindowSF_,0.05,0.5,0.05);
      F[3]->findMatches(F[1],phiWindowSF_,0.05,0.5,0.05);
      F[3]->findMatches(F[2],phiWindowSF_,0.05,0.5,0.05);
      F[3]->findBarrelMatches(L[0],phiWindowSF_);
      F[3]->findBarrelMatches(L[1],phiWindowSF_);
      F[3]->findBarrelMatches(L[2],phiWindowSF_);
      F[3]->findBarrelMatches(L[3],phiWindowSF_);
      F[3]->findBarrelMatches(L[4],phiWindowSF_);
      F[3]->findBarrelMatches(L[5],phiWindowSF_);
      //matchtimer.stop();
      //fittimer.start();
      F[3]->fitTracks();
      //fittimer.stop();
      
      allTracks.addTracks(F[3]->allTracks());
    }

    if(1){
      //tracklettimer.start();
      B[0]->findTracklets(B[1]);
      //tracklettimer.stop();
      //matchtimer.start();
      B[0]->findMatches(B[2],phiWindowSF_,0.05,0.5,0.05);
      B[0]->findMatches(B[3],phiWindowSF_,0.08,0.6,0.08);
      B[0]->findMatches(B[4],phiWindowSF_,0.1,1.0,0.1);
      B[0]->findBarrelMatches(L[0],phiWindowSF_);
      B[0]->findBarrelMatches(L[1],phiWindowSF_);
      B[0]->findBarrelMatches(L[2],phiWindowSF_);
      B[0]->findBarrelMatches(L[3],phiWindowSF_);
      B[0]->findBarrelMatches(L[4],phiWindowSF_);
      B[0]->findBarrelMatches(L[5],phiWindowSF_);
      //matchtimer.stop();
      //fittimer.start();
      B[0]->fitTracks();
      //fittimer.stop();
      
      allTracks.addTracks(B[0]->allTracks());
    }      

    if(1){
      //tracklettimer.start();
      B[1]->findTracklets(B[2]);
      //tracklettimer.stop();
      //matchtimer.start();
      B[1]->findMatches(B[0],phiWindowSF_,0.04,0.4,0.04);
      B[1]->findMatches(B[3],phiWindowSF_,0.05,0.5,0.05);
      B[1]->findMatches(B[4],phiWindowSF_,0.075,0.5,0.075);
      B[1]->findBarrelMatches(L[0],phiWindowSF_);
      B[1]->findBarrelMatches(L[1],phiWindowSF_);
      B[1]->findBarrelMatches(L[2],phiWindowSF_);
      B[1]->findBarrelMatches(L[3],phiWindowSF_);
      B[1]->findBarrelMatches(L[4],phiWindowSF_);
      B[1]->findBarrelMatches(L[5],phiWindowSF_);
      //matchtimer.stop();
      //fittimer.start();
      B[1]->fitTracks();
      //fittimer.stop();
      
      allTracks.addTracks(B[1]->allTracks());
    }
      
    if(1){  
      //tracklettimer.start();
      B[2]->findTracklets(B[3]);
      //tracklettimer.stop();
      //matchtimer.start();
      B[2]->findMatches(B[0],phiWindowSF_,0.05,0.5,0.05);
      B[2]->findMatches(B[1],phiWindowSF_,0.04,0.5,0.04);
      B[2]->findMatches(B[4],phiWindowSF_,0.05,0.5,0.05);
      B[2]->findBarrelMatches(L[0],phiWindowSF_);
      B[2]->findBarrelMatches(L[1],phiWindowSF_);
      B[2]->findBarrelMatches(L[2],phiWindowSF_);
      B[2]->findBarrelMatches(L[3],phiWindowSF_);
      B[2]->findBarrelMatches(L[4],phiWindowSF_);
      B[2]->findBarrelMatches(L[5],phiWindowSF_);
      //matchtimer.stop();
      //fittimer.start();
      B[2]->fitTracks();
      //fittimer.stop();
      
      allTracks.addTracks(B[2]->allTracks());
    }      

    if(1){
      //tracklettimer.start();
      B[3]->findTracklets(B[4]);
      //tracklettimer.stop();
      //matchtimer.start();
      B[3]->findMatches(B[0],phiWindowSF_,0.05,0.5,0.05);
      B[3]->findMatches(B[1],phiWindowSF_,0.05,0.5,0.05);
      B[3]->findMatches(B[2],phiWindowSF_,0.05,0.5,0.05);
      B[3]->findBarrelMatches(L[0],phiWindowSF_);
      B[3]->findBarrelMatches(L[1],phiWindowSF_);
      B[3]->findBarrelMatches(L[2],phiWindowSF_);
      B[3]->findBarrelMatches(L[3],phiWindowSF_);
      B[3]->findBarrelMatches(L[4],phiWindowSF_);
      B[3]->findBarrelMatches(L[5],phiWindowSF_);
      //matchtimer.stop();
      //fittimer.start();
      B[3]->fitTracks();
      //fittimer.stop();

      allTracks.addTracks(B[3]->allTracks());
    }      

    }

    //cout << "Done with track finding"<<endl;
    
    L1TTracks purgedTracks=allTracks.purged();
    
    //cout << "allTracks purgedTracks :"<<allTracks.size()<<" "
//	 <<purgedTracks.size()<<endl;

    bool printTracks=false;	

    static ofstream out1;

    if (printTracks) {

      static bool first=true;

      if (first) {                     
        out1.open("tracks.txt");
        first=false;
      }

      int nsim=ev.nsimtracks();
    
      if (nsim>0) {
          out1 << "Event "<<ev.simtrack(0).pt()<<" "<<ev.simtrack(0).phi()
	       <<" "<<ev.simtrack(0).eta()<<endl;
      }
      else{	
          out1 << "Event "<<999.99<<" "<<999.99
	       <<" "<<999.99<<endl;	
      }
    }  

    for (unsigned int i=0;i<purgedTracks.size();i++){
      const L1TTrack& aTrack=purgedTracks.get(i);
      //cout << "Purged track z0: "<<aTrack.z0()<<endl;
      //for (unsigned int j=0;j<aTrack.nstub();j++){
      //  cout << "Stub r,z :"<<aTrack.getStubs()[j].r()<<" "<<aTrack.getStubs()[j].z()<<endl; 				 	
      //}     
      double frac=0.0;
      int simtrackid=aTrack.simtrackid(frac);
      int isimtrack=ev.getSimtrackFromSimtrackid(simtrackid);
      double simtrackpt=0.0;
      double simtrackphi=999.0;
      double simtracketa=999.0;
      double simtrackvz=999.0;
      if (isimtrack!=-1) {
	L1SimTrack simtrack=ev.simtrack(isimtrack);
	simtrackpt=simtrack.pt();
	simtrackphi=simtrack.phi();
	simtracketa=simtrack.eta();
	simtrackvz=simtrack.vz();
      }
      if (printTracks) {
        out1 <<"Track "<<simtrackpt<<" "<<simtrackphi<<" "
	     <<simtracketa<<" "<<simtrackvz<<" "
	     <<aTrack.pt(mMagneticFieldStrength)<<" "<<aTrack.phi0()<<" "
	     <<aTrack.eta()<<" "<<aTrack.z0()<<" "
	     <<aTrack.ptseed(mMagneticFieldStrength)<<" "<<aTrack.phi0seed()<<" "
	     <<aTrack.etaseed()<<" "<<aTrack.z0seed()<<" "
	     <<aTrack.chisqdof()<<" "<<aTrack.nstub()<<endl;
      }
    }
    

    if (0) {

      static ofstream out("trackeff.txt");
      
      int nsim=ev.nsimtracks();

      //cout << "Number of sim tracks="<<nsim<<endl;

      for (int jj=0;jj<nsim;jj++){
	
	L1SimTrack aSimTrack=ev.simtrack(jj);
	
	int simtrackid=aSimTrack.id();

	double r=sqrt(aSimTrack.vx()*aSimTrack.vx()+
		      aSimTrack.vy()*aSimTrack.vy());

	if (simtrackid>10000) continue; //hack
	
	//cout << "SimTrackID="<<aSimTrack.id()<<" "<<aSimTrack.type()<<endl;

	bool match=false;

        double chisq=-999.9;

	for (unsigned itrack=0;itrack<purgedTracks.size();itrack++) {
	  L1TTrack track=purgedTracks.get(itrack);
	  
	  double frac;
	  int simtrackidmatch=track.simtrackid(frac);

	  //cout << "simtrackidmatch frac:"<<simtrackidmatch<<" "<<frac<<endl;

	  if (simtrackidmatch==simtrackid&&frac>0.3) {
	    //cout << "Found Track"<<endl;
	    match=true;
            chisq=track.chisq();
	  }

	}
	
	out << aSimTrack.pt() << " " << aSimTrack.eta() 
	    << " " << aSimTrack.phi() << " " 
	    << aSimTrack.type() << " " << r << " " << chisq << " ";
	
	if (match) {
	  out <<"1"<<endl;
	}
	else {
	  out <<"0"<<endl;	  
	}

      }

    }


    /*  
    if (1) {

      static ofstream out("trackleteff.txt");
      
      int nsim=ev.nsimtracks();

      if (nsim>2) nsim=2;

      //cout << "Number of sim tracks="<<nsim<<endl;

      for (int jj=0;jj<nsim;jj++){
	
	L1SimTrack aSimTrack=ev.simtrack(jj);
	
	int simtrackid=aSimTrack.id();

	//double r=sqrt(aSimTrack.vx()*aSimTrack.vx()+
	//	      aSimTrack.vy()*aSimTrack.vy());

	if (simtrackid>10000) continue; //hack
	
	//cout << "SimTrackID="<<aSimTrack.id()<<" "<<aSimTrack.type()<<endl;

	//bool match=false;

	double simtrackpt=aSimTrack.pt();

	if (aSimTrack.type()<0) simtrackpt*=-1.0;

	//cout << "simtrack pt:"<<simtrackpt<<endl;

	double bestdiff=1e30;
	double bestpt=0.0;

	for (int iSector=0;iSector<NSector;iSector++){
	  for (unsigned itracklet=0;itracklet<L[0]->nTracklets(iSector);itracklet++) {
	    L1TTracklet tracklet=L[0]->tracklet(iSector,itracklet);
	  
	    //double frac;
	    //int simtrackidmatch=tracklet.simtrackid(frac);

	    if (fabs(1.0/tracklet.pt(mMagneticFieldStrength)-1.0/simtrackpt)<bestdiff) {
	      bestdiff=fabs(1.0/tracklet.pt(mMagneticFieldStrength)-1.0/simtrackpt);
	      bestpt=tracklet.pt(mMagneticFieldStrength);
	    }

	    //cout << "tracklet pt:"<<tracklet.pt(mMagneticFieldStrength)<<endl;
	  }
	}
	//cout << "simtrack tracklet: "<<simtrackpt<<" "<<bestpt<<endl;
	
	  //out << aSimTrack.pt() << " " << aSimTrack.eta() 
	  // << " " << aSimTrack.phi() << " " 
	  // << aSimTrack.type() << " " << r << " ";
	
	  //if (match) {
	  //out <<"1"<<endl;
	  //}
	  //else {
	  //out <<"0"<<endl;	  
	  //}

      }

    }

    */  

    for (int i=0;i<NBarrel;i++){
      delete L[i];
    }
    for (int i=0;i<NDisk;i++){
      delete F[i];
      delete B[i];
    }
