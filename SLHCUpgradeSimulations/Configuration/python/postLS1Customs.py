
import FWCore.ParameterSet.Config as cms

from SLHCUpgradeSimulations.Configuration.muonCustoms import customise_csc_PostLS1,customise_csc_hlt
from L1Trigger.L1TCommon.customsPostLS1 import customiseSimL1EmulatorForPostLS1

def customisePostLS1(process):

    # deal with CSC separately:
    process = customise_csc_PostLS1(process)

    # deal with L1 Emulation separately:
    customiseSimL1EmulatorForPostLS1(process)

    # all the rest:
    if hasattr(process,'g4SimHits'):
        process=customise_Sim(process)
    if hasattr(process,'DigiToRaw'):
        process=customise_DigiToRaw(process)
    if hasattr(process,'RawToDigi'):
        process=customise_RawToDigi(process)
    if hasattr(process,'reconstruction'):
        process=customise_Reco(process)
    if hasattr(process,'digitisation_step'):
        process=customise_Digi(process)
    if hasattr(process,'HLTSchedule'):
        process=customise_HLT(process)
    if hasattr(process,'L1simulation_step'):
        process=customise_L1Emulator(process)
    if hasattr(process,'dqmoffline_step'):
        process=customise_DQM(process)
    if hasattr(process,'dqmHarvesting'):
        process=customise_harvesting(process)
    if hasattr(process,'validation_step'):
        process=customise_Validation(process)

    return process

def customisePostLS1EraExtras(process):
    """
    This function should be used in addition to the "--era run2" cmsDriver
    option so that it can perform the last few changes that the era can't.
    This is a stop gap function until we think of a better way of applying
    these changes in the era.
    """
    # These are changes that should be in HLTrigger/Configuration or
    # HLTrigger/Configuration but the files are autogenerated.
    if hasattr(process,'hltL1GtObjectMap') :
        process.hltL1GtObjectMap.GctInputTag = cms.InputTag("hltCaloStage1LegacyFormatDigis")
    if hasattr(process,'hltL1extraParticles') :
        process.hltL1extraParticles.etTotalSource = cms.InputTag("hltCaloStage1LegacyFormatDigis")
        process.hltL1extraParticles.nonIsolatedEmSource = cms.InputTag("hltCaloStage1LegacyFormatDigis","nonIsoEm")
        process.hltL1extraParticles.etMissSource = cms.InputTag("hltCaloStage1LegacyFormatDigis")
        process.hltL1extraParticles.htMissSource = cms.InputTag("hltCaloStage1LegacyFormatDigis")
        process.hltL1extraParticles.forwardJetSource = cms.InputTag("hltCaloStage1LegacyFormatDigis","forJets")
        process.hltL1extraParticles.centralJetSource = cms.InputTag("hltCaloStage1LegacyFormatDigis","cenJets")
        process.hltL1extraParticles.tauJetSource = cms.InputTag("hltCaloStage1LegacyFormatDigis","tauJets")
        process.hltL1extraParticles.isoTauJetSource = cms.InputTag("hltCaloStage1LegacyFormatDigis","isoTauJets")
        process.hltL1extraParticles.isolatedEmSource = cms.InputTag("hltCaloStage1LegacyFormatDigis","isoEm")
        process.hltL1extraParticles.etHadSource = cms.InputTag("hltCaloStage1LegacyFormatDigis")
        process.hltL1extraParticles.hfRingEtSumsSource = cms.InputTag("hltCaloStage1LegacyFormatDigis")
        process.hltL1extraParticles.hfRingBitCountsSource = cms.InputTag("hltCaloStage1LegacyFormatDigis")
    if hasattr(process,'hltCsc2DRecHits') :
        process.hltCsc2DRecHits.readBadChannels=False
        process.hltCsc2DRecHits.CSCUseGasGainCorrections=False
    if hasattr(process,'CSCIndexerESProducer') :
        process.CSCIndexerESProducer.AlgoName=cms.string("CSCIndexerPostls1")
    if hasattr(process,'CSCChannelMapperESProducer') :
        process.CSCChannelMapperESProducer.AlgoName=cms.string("CSCChannelMapperPostls1")
    if hasattr(process,'CSCGeometryESModule') :
        process.CSCGeometryESModule.useGangedStripsInME1a=False
    if hasattr(process,'HLTL1UnpackerSequence') :
        process.load("L1Trigger.L1TCommon.caloStage1LegacyFormatDigis_cfi")
        process.load("L1Trigger.L1TCommon.l1tRawToDigi_cfi")
        process.hltCaloStage1Digis = process.caloStage1Digis.clone()
        process.hltCaloStage1LegacyFormatDigis = process.caloStage1LegacyFormatDigis.clone(
                InputCollection = cms.InputTag("hltCaloStage1Digis"),
                InputRlxTauCollection = cms.InputTag("hltCaloStage1Digis:rlxTaus"),
                InputIsoTauCollection = cms.InputTag("hltCaloStage1Digis:isoTaus"),
                InputHFSumsCollection = cms.InputTag("hltCaloStage1Digis:HFRingSums"),
                InputHFCountsCollection = cms.InputTag("hltCaloStage1Digis:HFBitCounts")
            )
        process.hltL1RawToDigiSeq = cms.Sequence( process.hltCaloStage1Digis + process.hltCaloStage1LegacyFormatDigis )
        process.HLTL1UnpackerSequence.replace( process.hltGctDigis, process.hltL1RawToDigiSeq )


def digiEventContent(process):
    #extend the event content

    alist=['RAWSIM','RAWDEBUG','FEVTDEBUG','FEVTDEBUGHLT','GENRAW','RAWSIMHLT','FEVT']
    for a in alist:
        b=a+'output'
        if hasattr(process,b):
            getattr(process,b).outputCommands.append('keep *_simMuonCSCDigis_*_*')
            getattr(process,b).outputCommands.append('keep *_simMuonRPCDigis_*_*')
            getattr(process,b).outputCommands.append('keep *_simHcalUnsuppressedDigis_*_*')

    return process


def customise_DQM(process):
    #process.dqmoffline_step.remove(process.jetMETAnalyzer)
    # Turn off flag of gangedME11a
    process.l1tCsctf.gangedME11a = cms.untracked.bool(False)
    return process


def customise_Validation(process):
    #process.validation_step.remove(process.PixelTrackingRecHitsValid)
    # We don't run the HLT
    #process.validation_step.remove(process.HLTSusyExoVal)
    #process.validation_step.remove(process.hltHiggsValidator)
    return process


def customise_Sim(process):
    # enable 2015 HF shower library
    process.g4SimHits.HFShowerLibrary.FileName  = 'SimG4CMS/Calo/data/HFShowerLibrary_npmt_noatt_eta4_16en.root'
    return process


def customise_Digi(process):
    process=digiEventContent(process)
    if hasattr(process,'mix') and hasattr(process.mix,'digitizers'):
        if hasattr(process.mix.digitizers,'hcal') and hasattr(process.mix.digitizers.hcal,'ho'):
            process.mix.digitizers.hcal.ho.photoelectronsToAnalog = cms.vdouble([4.0]*16)
            process.mix.digitizers.hcal.ho.siPMCode = cms.int32(1)
            process.mix.digitizers.hcal.ho.pixels = cms.int32(2500)
            process.mix.digitizers.hcal.ho.doSiPMSmearing = cms.bool(False)
        if hasattr(process.mix.digitizers,'hcal') and hasattr(process.mix.digitizers.hcal,'hf1'):
            process.mix.digitizers.hcal.hf1.samplingFactor = cms.double(0.60)
        if hasattr(process.mix.digitizers,'hcal') and hasattr(process.mix.digitizers.hcal,'hf2'):
            process.mix.digitizers.hcal.hf2.samplingFactor = cms.double(0.60)
        if hasattr(process.mix.digitizers,'pixel'):
            # DynamicInefficency - 13TeV - 50ns case
            if process.mix.bunchspace == 50:
                process.mix.digitizers.pixel.theInstLumiScaleFactor = cms.double(246.4)
                process.mix.digitizers.pixel.theLadderEfficiency_BPix1 = cms.vdouble(
                    0.979259,
                    0.976677,
                    0.979259,
                    0.976677,
                    0.979259,
                    0.976677,
                    0.979259,
                    0.976677,
                    0.979259,
                    0.976677,
                    0.979259,
                    0.976677,
                    0.979259,
                    0.976677,
                    0.979259,
                    0.976677,
                    0.979259,
                    0.976677,
                    0.979259,
                    0.976677,
                    )
                process.mix.digitizers.pixel.theLadderEfficiency_BPix2 = cms.vdouble(
                    0.994321,
                    0.993944,
                    0.994321,
                    0.993944,
                    0.994321,
                    0.993944,
                    0.994321,
                    0.993944,
                    0.994321,
                    0.993944,
                    0.994321,
                    0.993944,
                    0.994321,
                    0.993944,
                    0.994321,
                    0.993944,
                    0.994321,
                    0.993944,
                    0.994321,
                    0.993944,
                    0.994321,
                    0.993944,
                    0.994321,
                    0.993944,
                    0.994321,
                    0.993944,
                    0.994321,
                    0.993944,
                    0.994321,
                    0.993944,
                    0.994321,
                    0.993944,
                    )
                process.mix.digitizers.pixel.theLadderEfficiency_BPix3 = cms.vdouble(
                    0.996787,
                    0.996945,
                    0.996787,
                    0.996945,
                    0.996787,
                    0.996945,
                    0.996787,
                    0.996945,
                    0.996787,
                    0.996945,
                    0.996787,
                    0.996945,
                    0.996787,
                    0.996945,
                    0.996787,
                    0.996945,
                    0.996787,
                    0.996945,
                    0.996787,
                    0.996945,
                    0.996787,
                    0.996945,
                    0.996787,
                    0.996945,
                    0.996787,
                    0.996945,
                    0.996787,
                    0.996945,
                    0.996787,
                    0.996945,
                    0.996787,
                    0.996945,
                    0.996787,
                    0.996945,
                    0.996787,
                    0.996945,
                    0.996787,
                    0.996945,
                    0.996787,
                    0.996945,
                    0.996787,
                    0.996945,
                    0.996787,
                    0.996945,
                    )
            # DynamicInefficency - 13TeV - 25ns case
            if process.mix.bunchspace == 25:
                process.mix.digitizers.pixel.theInstLumiScaleFactor = cms.double(364)
                process.mix.digitizers.pixel.theLadderEfficiency_BPix1 = cms.vdouble(
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    )
                process.mix.digitizers.pixel.theLadderEfficiency_BPix2 = cms.vdouble(
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    )
                process.mix.digitizers.pixel.theLadderEfficiency_BPix3 = cms.vdouble(
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    )
                process.mix.digitizers.pixel.theModuleEfficiency_BPix1 = cms.vdouble(
                    1,
                    1,
                    1,
                    1,
                    )
                process.mix.digitizers.pixel.theModuleEfficiency_BPix2 = cms.vdouble(
                    1,
                    1,
                    1,
                    1,
                    )
                process.mix.digitizers.pixel.theModuleEfficiency_BPix3 = cms.vdouble(
                    1,
                    1,
                    1,
                    1,
                    )
                process.mix.digitizers.pixel.thePUEfficiency_BPix1 = cms.vdouble(
                    1.00023,
                    -3.18350e-06,
                    5.08503e-10,
                    -6.79785e-14,
                    )
                process.mix.digitizers.pixel.thePUEfficiency_BPix2 = cms.vdouble(
                    9.99974e-01,
                    -8.91313e-07,
                    5.29196e-12,
                    -2.28725e-15,
                    )
                process.mix.digitizers.pixel.thePUEfficiency_BPix3 = cms.vdouble(
                    1.00005,
                    -6.59249e-07,
                    2.75277e-11,
                    -1.62683e-15,
                    )
    return process


def customise_L1Emulator(process):
    return process


def customise_RawToDigi(process):
    return process


def customise_DigiToRaw(process):
    return process


def customise_HLT(process):
    process=customise_csc_hlt(process)
    return process


def customise_Reco(process):
    #lowering HO threshold with SiPM
    for prod in process.particleFlowRecHitHO.producers:
        prod.qualityTests = cms.VPSet(
            cms.PSet(
                name = cms.string("PFRecHitQTestThreshold"),
                threshold = cms.double(0.05) # new threshold for SiPM HO
            ),
            cms.PSet(
                name = cms.string("PFRecHitQTestHCALChannel"),
                maxSeverities      = cms.vint32(11),
                cleaningThresholds = cms.vdouble(0.0),
                flags              = cms.vstring('Standard')
            )
        )

    return process


def customise_harvesting(process):
    #process.dqmHarvesting.remove(process.dataCertificationJetMET)
    #process.dqmHarvesting.remove(process.sipixelEDAClient)
    #process.dqmHarvesting.remove(process.sipixelCertification)
    return (process)        

def recoOutputCustoms(process):

    alist=['AODSIM','RECOSIM','FEVTSIM','FEVTDEBUG','FEVTDEBUGHLT','RECODEBUG','RAWRECOSIMHLT','RAWRECODEBUGHLT']
    for a in alist:
        b=a+'output'
        if hasattr(process,b):
            getattr(process,b).outputCommands.append('keep *_simMuonCSCDigis_*_*')
            getattr(process,b).outputCommands.append('keep *_simMuonRPCDigis_*_*')
            getattr(process,b).outputCommands.append('keep *_simHcalUnsuppressedDigis_*_*')
            getattr(process,b).outputCommands.append('keep *_rawDataCollector_*_*')
    return process

