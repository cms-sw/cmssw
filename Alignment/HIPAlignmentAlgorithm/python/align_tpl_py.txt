import FWCore.ParameterSet.Config as cms

process = cms.Process("Alignment")
process.load("Alignment.CommonAlignmentProducer.AlignmentTrackSelector_cfi")
process.load("RecoTracker.FinalTrackSelectors.TrackerTrackHitFilter_cff")
#process.load("RecoTracker.TransientTrackingRecHit.TransientTrackingRecHitBuilderWithoutRefit_cfi")
process.load("RecoTracker.TrackProducer.TrackRefitters_cff")
process.load("RecoVertex.BeamSpotProducer.BeamSpot_cff")

# "including" common configuration
<COMMON>

if 'COSMICS'=='<FLAG>' :
    process.source = cms.Source("PoolSource",
#                                useCSA08Kludge = cms.untracked.bool(True),
                                fileNames = cms.untracked.vstring(<FILE>)
                                )
elif 'CDCS'=='<FLAG>' :
    process.source = cms.Source("PoolSource",
#                                useCSA08Kludge = cms.untracked.bool(True),
                                fileNames = cms.untracked.vstring(<FILE>)
                                )
else :
    process.source = cms.Source("PoolSource",
                                #useCSA08Kludge = cms.untracked.bool(True),
                                fileNames = cms.untracked.vstring(<FILE>)      
                                )
    import FWCore.PythonUtilities.LumiList as LumiList
    process.source.lumisToProcess = LumiList.LumiList(filename ='/afs/cern.ch/cms/CAF/CMSCOMM/COMM_DQM/certification/Collisions16/13TeV/DCSOnly/json_DCSONLY.txt').getVLuminosityBlockRange()
    
process.load("TrackingTools.TransientTrack.TransientTrackBuilder_cfi")

# "including" selection for this track sample
<SELECTION>

# parameters for HIP
if 'MBVertex'=='<FLAG>':
   process.AlignmentProducer.tjTkAssociationMapTag = 'TrackRefitter2'
elif 'ZMuMuMomConstr'=='<FLAG>':
   process.AlignmentProducer.tjTkAssociationMapTag = 'TrackRefitter3'
elif 'ZMuMuFull'=='<FLAG>':
   process.AlignmentProducer.tjTkAssociationMapTag = 'TrackRefitter4'
elif 'Y1SMuMuMomConstr'=='<FLAG>':
   process.AlignmentProducer.tjTkAssociationMapTag = 'TrackRefitter3'
elif 'Y1SMuMuFull'=='<FLAG>':
   process.AlignmentProducer.tjTkAssociationMapTag = 'TrackRefitter4'
elif 'COSMICS'=='<FLAG>':
   process.AlignmentProducer.tjTkAssociationMapTag = 'TrackRefitter2'
elif 'CDCS'=='<FLAG>':
   process.AlignmentProducer.tjTkAssociationMapTag = 'TrackRefitter2'
else :
   process.AlignmentProducer.tjTkAssociationMapTag = 'TrackRefitter2'
# process.AlignmentProducer.hitPrescaleMapTag= 'TkAlHitAssoMapCTF' #if this is not empty, turn on the usage of prescaled hits
process.AlignmentProducer.hitPrescaleMapTag=''
process.AlignmentProducer.algoConfig.outpath = ''
process.AlignmentProducer.algoConfig.uvarFile = '<PATH>/IOUserVariables.root'
###process.AlignmentProducer.algoConfig.uvarFile = './IOUserVariables.root'

#when etaCutRW=0, there's no eta cut and the eventWeight will apply to all hits.

# TEC disk 1-9 in +z half : 470311204,470327588,470343972,470360388,470376772,470393156,470409572,470425956,470442372
# TEC disk 1-9 in -z half : 470049060,470065444,470081828,470098244,470114628,470131012,470147428,470163812,470180228 
# angle cut : degrees-65,70,75,80 ; rads-1.134,1.222,1.309,1.396 ; sin-0.9,0.95,0.97,0.99  
# angle cut : rad 1.33 1.35, 1.37
if 'COSMICS'=='<FLAG>':
    process.AlignmentProducer.algoConfig.isCollision=False
#    process.AlignmentProducer.algoConfig.CSAngleCut=0.95

elif 'CDCS'=='<FLAG>':
    process.AlignmentProducer.algoConfig.isCollision=False
#    process.AlignmentProducer.algoConfig.CSAngleCut=0.95

else :
    process.AlignmentProducer.algoConfig.isCollision=True
    process.AlignmentProducer.algoConfig.UseReweighting=True
    process.AlignmentProducer.algoConfig.Weight=1
#    process.AlignmentProducer.algoConfig.UniformEta=True
#    process.AlignmentProducer.algoConfig.CLAngleCut=1.37

process.AlignmentProducer.algoConfig.outfile =  '<PATH>/HIPAlignmentEvents.root'
process.AlignmentProducer.algoConfig.outfile2 = '<PATH>/HIPAlignmentAlignables.root'
process.AlignmentProducer.algoConfig.applyAPE = False
#process.AlignmentProducer.algoConfig.applyAPE = True 
process.AlignmentProducer.algoConfig.apeParam = cms.VPSet(
         cms.PSet(function = cms.string('linear'), #choose from linear,exponential,step
                  apeRPar = cms.vdouble(0.0001, 0.0, 20.0), #100 micro-rad
                  apeSPar = cms.vdouble(0.01, 0.0, 20.0), # 100 micron
                     Selector = cms.PSet(
                       alignParams = cms.vstring(
                                'TrackerTPBHalfBarrel,111111',
                                'TrackerTPEHalfCylinder,111111',
                         )
                      )
                  ),

#         cms.PSet(function = cms.string('linear'), #choose from linear,exponential,step
#                  apeRPar = cms.vdouble(0.00001, 0.0, 20.0),
#                  apeSPar = cms.vdouble(0.002, 0.0, 20.0),
#                  apeSPar = cms.vdouble(0.0001, 0.0, 20.0),
#                     Selector = cms.PSet(
#                       alignParams = cms.vstring(
#                               'TrackerTIBHalfBarrel,111111',
#                               'TrackerTOBHalfBarrel,111111'
#                         )
#                      )
#                  ),

#         cms.PSet(function = cms.string('linear'), #choose from linear,exponential,step
#                  apeRPar = cms.vdouble(0.0001, 0.0, 20.0),
#                  apeSPar = cms.vdouble(0.004, 0.0, 20.0),
#                  apeRPar = cms.vdouble(0.00001, 0.0, 20.0),
#                  apeSPar = cms.vdouble(0.0001, 0.0, 20.0),
#                     Selector = cms.PSet(
#                       alignParams = cms.vstring(
#                               'TrackerTIDEndcap,111111',
#                               'TrackerTECEndcap,111111',
#                               'TrackerTPEHalfCylinder,111111'
#                         )
#                      )
#                  ),
         )	

#### If we are in collisions, apply selections on PhysDeclared bit, L1 trigger bits, LumiSections
if 'COSMICS'!='<FLAG>':
  if 'CDCS'!='<FLAG>':
# process only some lumi sections: from LS69, run 123596 till LS 999 in event 124119
    #process.source.lumisToProcess = cms.untracked.VLuminosityBlockRange('123596:69-124119:999')
# do not process some other runs: in this case: skip all events from event#1 in run 124120 till last event of run 124120
    #process.source.eventsToSkip = cms.untracked.VEventRange('124120:1-124120:MAX')
#filters on L1 trigger bits
    process.load('L1TriggerConfig.L1GtConfigProducers.L1GtTriggerMaskTechTrigConfig_cff')
    process.load('HLTrigger/HLTfilters/hltLevel1GTSeed_cfi')
    process.hltLevel1GTSeed.L1TechTriggerSeeding = cms.bool(True)
    process.hltLevel1GTSeed.L1SeedsLogicalExpression = cms.string('0 AND (40 OR 41) AND NOT (36 OR 37 OR 38 OR 39) AND NOT ((42 AND (NOT 43)) OR (43 AND (NOT 42)))')
  ##   process.load("RecoLocalTracker.SiStripRecHitConverter.OutOfTime_cff")
##     process.OutOfTime.TOBlateBP=0.071
##     process.OutOfTime.TIBlateBP=0.036
 
##     process.stripLorentzAngle = cms.ESSource("PoolDBESSource",CondDBSetup,
##                                              connect = cms.string('sqlite_file:/afs/cern.ch/user/b/benhoob/public/LorentzAngle/SiStripLorentzAngle_Deco.db'),
##                                              toGet = cms.VPSet(cms.PSet(record = cms.string('SiStripLorentzAngleRcd'),tag =cms.string('SiStripLorentzAngle_Deco') ))
##                                              )
##     process.es_prefer_stripLorentzAngle = cms.ESPrefer("PoolDBESSource","stripLorentzAngle")


#constraints

#process.load("RecoTracker.MeasurementDet.MeasurementTrackerEventProducer_cfi")
#process.MeasurementTrackerEvent.pixelClusterProducer = 'ALCARECOTkAlCosmicsCTF0T'
#process.MeasurementTrackerEvent.stripClusterProducer = 'ALCARECOTkAlCosmicsCTF0T'
#process.MeasurementTrackerEvent.inactivePixelDetectorLabels = cms.VInputTag()
#process.MeasurementTrackerEvent.inactiveStripDetectorLabels = cms.VInputTag()

#filter on PhysDecl bit
process.skimming = cms.EDFilter("PhysDecl",
                                applyfilter = cms.untracked.bool(True),
                                HLTriggerResults = cms.InputTag('gtDigis')
                                )

if 'MBVertex'=='<FLAG>':
   process.p =cms.Path(process.offlineBeamSpot*process.initialAlignmentTrackSelector*process.TrackRefitter1*process.TrackerTrackHitFilter*process.ctfProducerCustomised*process.AlignmentTrackSelector*process.TrackRefitter2)
elif 'ZMuMuMomConstr'=='<FLAG>':
   process.p =cms.Path(process.offlineBeamSpot*process.initialAlignmentTrackSelector*process.TrackRefitter1*process.TrackerTrackHitFilter*process.ctfProducerCustomised*process.AlignmentTrackSelector*process.TwoBodyDecayMomConstraint*process.TrackRefitter3)
elif 'ZMuMuFull'=='<FLAG>':
   process.p =cms.Path(process.offlineBeamSpot*process.initialAlignmentTrackSelector*process.TrackRefitter1*process.TrackerTrackHitFilter*process.ctfProducerCustomised*process.AlignmentTrackSelector*process.TwoBodyDecayConstraint*process.TrackRefitter4)
elif 'Y1SMuMuMomConstr'=='<FLAG>':
   process.p =cms.Path(process.offlineBeamSpot*process.initialAlignmentTrackSelector*process.TrackRefitter1*process.TrackerTrackHitFilter*process.ctfProducerCustomised*process.AlignmentTrackSelector*process.TwoBodyDecayMomConstraint*process.TrackRefitter3)
elif 'Y1SMuMuFull'=='<FLAG>':
   process.p =cms.Path(process.offlineBeamSpot*process.initialAlignmentTrackSelector*process.TrackRefitter1*process.TrackerTrackHitFilter*process.ctfProducerCustomised*process.AlignmentTrackSelector*process.TwoBodyDecayConstraint*process.TrackRefitter4)
elif 'COSMICS'=='<FLAG>':
#    process.p = cms.Path(process.offlineBeamSpot*process.MeasurementTrackerEvent*process.TrackRefitter1*process.TrackerTrackHitFilter*process.ctfProducerCustomised*process.AlignmentTrackSelector*process.TrackRefitter2)
    process.p = cms.Path(process.offlineBeamSpot*process.TrackRefitter1*process.TrackerTrackHitFilter*process.ctfProducerCustomised*process.AlignmentTrackSelector*process.TrackRefitter2)
elif 'CDCS'=='<FLAG>':
#    process.p = cms.Path(process.offlineBeamSpot*process.MeasurementTrackerEvent*process.TrackRefitter1*process.TrackerTrackHitFilter*process.ctfProducerCustomised*process.AlignmentTrackSelector*process.TrackRefitter2)
    process.p = cms.Path(process.offlineBeamSpot*process.TrackRefitter1*process.TrackerTrackHitFilter*process.ctfProducerCustomised*process.AlignmentTrackSelector*process.TrackRefitter2)

else :
    process.p = cms.Path(process.hltLevel1GTSeed*process.skimming*process.offlineBeamSpot*process.TrackRefitter1*process.TrackerTrackHitFilter*process.ctfProducerCustomised*process.AlignmentTrackSelector*process.TrackRefitter2)

