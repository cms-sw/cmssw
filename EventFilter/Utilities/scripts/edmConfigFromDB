#!/usr/bin/env perl

################################################################################
#
# edmConfigFromDB
# ---------------
#
#             11/08/2007 Philipp Schieferdecker <philipp.schieferdecker@cern.ch>
################################################################################

my $usage =
    "USAGE:\nedmConfigFromDB\n" .
    "\t--v0|--v1|--test            (ConfDB version [default: v1])\n" .
    "\t--hltdev|--orcoff           (target db [default: hltdev])\n" .
    "\t--list <s>                  (list all configurations starting with <s>)\n" .
    "\t  [all other options are diregarded if --list <s> is specified!]\n\n" .
    "\t--configId <id>             (specify configuration by id)\n" .
    "\t--configName <name>         (specify configuration by name)\n" .
    "\t--runNumber <run>           (specify configuration by run)\n" .
    "\t  [--configId OR --configName OR --runNumber are required if --list is NOT specified!]\n\n" .
    "\t--versions                  (list all versions for specified configuration)\n" .
    "\t--packages                  (list all packages of configuration)\n" .
    "\t  [all options below are disregarded if --versions/--packages specified!]\n\n" .
    "\t--format <format>           (output format, default='Ascii')\n" .
    "\t--cff                       (retrieve configuration *fragment*)\n" .
    "\t--input <f1.root[,f2.root]> (insert PoolSource with specified fileNames)\n" .
    "\t--input <files.list>        (read a text file which lists input ROOT files)\n". 
    "\t--output <out.root>         (insert PoolOutputModule w/ specified fileName)\n" .
    "\t--nopsets                   (exclude all globale psets)\n" .
    "\t--noedsources               (exclude all edsources)\n" .
    "\t--noes                      (exclude all essources *and* esmodules)\n" .
    "\t--noessources               (exclude all essources)\n" .
    "\t--noesmodules               (exclude all esmodules)\n" .
    "\t--noservices                (exclude all services)\n" .
    "\t--nooutput                  (exclude all output modules)\n" .
    "\t--nopaths                   (exclude all paths [+=referenced seqs&mods])\n" .
    "\t--nosequences               (don't define sequences [+=referenced s&m])\n" .
    "\t--nomodules                 (don't define modules)\n" .
    "\t--psets <pset1[,pset2]>     (include only specified global psets)\n" .
    "\t--psets <-pset1[,-pset2]>   (include all global psets but the specified)\n" .
    "\t--essources <ess1[,ess2]>   (include only specified essources)\n" .
    "\t--essources <-ess1[,-ess2]> (include all essources but the specified)\n" .
    "\t--esmodules <esm1[,esm2]>   (include only specified esmodules)\n" .
    "\t--esmodules <-esm1[,-esm2]> (include all esmodules but the specified)\n" .
    "\t--services <svc1[,svc2]>    (include only specified services)\n" .
    "\t--services <-svc1[,-svc2]>  (include all services but the specified)\n" .
    "\t--paths <p1[,p2]>           (include only specified paths)\n" .
    "\t--paths <-p1[,-p2]>         (include all paths but the specified)\n" .
    "\t--streams <s1[,s2]>         (include only specified streams)\n" .
    "\t--datasets <d1[,d2]>        (include only specified datasets)\n" .
    "\t--sequences <s1[,s2]>       (include sequences, referenced or not!)\n" .
    "\t--modules <p1[,p2]>         (include modules, referenced or not!)\n" .
    "\t--blocks <m1::p1[,p2][,m2]> (generate parameter blocks\n" .
    "\t--logfile <filename>        (specify alternative to default /dev/null)\n" .
    "\n";

die $usage if @ARGV<2;

my $db_version  = "cms-project-confdb-hltdev";
my $db_name     = "hltdev";
my $do_list     = 0;
my $do_versions = 0;
my $do_packages = 0;

my $list_begins_with = "";
my $log_file         = "/dev/null";

my %args = ();

my %bool_options = ('--cff',1,
		    '--nopsets',1,
		    '--noedsources',1,
		    '--noes',1,
		    '--noessources',1,
		    '--noesmodules',1,
		    '--noservices',1,
		    '--nooutput',1,
		    '--nopaths',1,
		    '--nosequences',1,
		    '--nomodules',1
		    );
my %options      = ('--format',1,
		    '--input',1,
		    '--output',1,
		    '--psets',1,
		    '--essources',1,
		    '--esmodules',1,
		    '--services',1,
		    '--paths',1,
		    '--sequences',1,
		    '--modules',1,
		    '--blocks',1,
		    '--streams',1,
		    '--datasets',1
		    );


while (@ARGV) {
    my $arg = shift @ARGV;
    
    if ($arg eq "--logfile") {
	$log_file = shift @ARGV;
    }
    elsif ($arg eq "--debug") {
	$debug = 1;
    }
    
    elsif ($arg eq "--v0") {
	$db_version = "confdb-v0";
    }
    elsif ($arg eq "--v1") {
	$db_version = "cms-project-confdb-hltdev";
    }
    elsif ($arg eq "--test") {
	$db_version = "test--confdb";
    }
    
    elsif ($arg eq "--hltdev") {
	$db_name = "HLTDEV";
    }
    elsif ($arg eq "--orcoff") {
	$db_name = "ORCOFF";
    }

    elsif ($arg eq "--list") {
	die ("ERROR: --list doesn't allow additional options\n") if (keys %args>0);
	$do_list = 1;
	$list_begins_with = shift @ARGV;
	print "$ARGV\n";
	die ("ERROR: --list doesn't allow additional options\n") if (@ARGV > 0);
	last;
    }
    
    elsif ($arg eq "--configId") {
	die "ERROR: specify either --configId *or* --configName *or* --runNumber\n"
	    if exists $args{'configName'} || exists $args{'runNumber'};
	$args{'configId'} = shift @ARGV;
	last if $do_versions || $do_packages;
    }
    elsif ($arg eq "--configName") {
	die "ERROR: specify either --configId *or* --configName *or* --runNumber\n"
	    if exists $args{'configId'} || exists $args{'runNumber'};
	$args{'configName'} = shift @ARGV;
    }
    elsif ($arg eq "--runNumber") {
	die "ERROR: specify either --configId *or* --configName *or* --runNumber\n"
	    if exists $args{'configId'} || exists $args{'configName'};
	$args{'runNumber'} = shift @ARGV;
    }
    elsif ($arg eq "--packages") {
	die "ERROR: --packages doesn't go with --versions\n" if $do_versions;
	$do_packages = 1;
	last if exists $args{'configId'} || exists $args{'configName'};
    }
    elsif ($arg eq "--versions") {
	die "ERROR: --versions doesn't go with --packages\n" if $do_packages;
	$do_versions = 1;
	last if exists $args{'configId'} || exists $args{'configName'};
    }
    elsif ($bool_options{$arg}) {
	die "ERROR: " . $arg . " invalid with --packages / --versions\n"
	    if $do_versions || $do_packages;
	$arg =~ s/--//;
	$args{$arg} = "";
    }
    elsif ($options{$arg}) {
	die "ERROR: " . $arg . " invalid with --packages / --versions\n"
	    if $do_versions || $do_packages;
	$arg =~ s/--//;
	$args{$arg} = shift @ARGV;
    }
    else {
	die "ERROR: invalid option $arg\n";
    }
}

my $jsp = "get.jsp";
if ($do_list||$do_versions||$do_packages) { $jsp = "confdb.jsp"; }

my $url = "http://www.cern.ch/" . $db_version . "/" . $jsp . "?dbName=$db_name";

if ($do_list) {
    $url = $url . "&list=" . $list_begins_with;
}
else {
    die "ERROR: neither --list nor --configId OR --configName specified\n"
	if not exists $args{'configName'} and not exists $args{'configId'} and not exists $args{'runNumber'};
    
    die "ERROR: specify either -configId OR --configName\n"
	if exists $args{'configName'} and exists $args{'configId'};
    
    if ($args{'configId'}) {
	$url = $url . "&configId=" . $args{'configId'};
	delete $args{'configId'};
    }
    elsif ($args{'configName'}) {
	$url = $url . "&configName=" . $args{'configName'};
	delete $args{'configName'};
    }
    elsif ($args{'runNumber'}) {
	$url = $url . "&runNumber=" . $args{'runNumber'};
	delete $args{'runNumber'};
    }
	

    if ($do_versions) {
	$url = $url . "&versions=";
    }
    elsif ($do_packages) {
	$url = $url . "&packages=";
    }
    else {
	while ( my ($key,$value) = each(%args)) {
	    if ($debug) { print ("key=$key, value=$value\n"); }
	    $url = $url . "&" . $key . "=" . $value;
	}
    }
}

if ($debug) { print STDERR ("wget \"$url\" -O- -o $log_file\n"); }

system("wget \"$url\" -O- -o $log_file");

exit 0;
