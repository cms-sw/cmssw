23-Mar-2009, KAB

We have agreed on the following use of the SharedResources class.

The SharedResources class contains shared pointers to shared resources.
The use of shared pointers inside the SharedResources class was driven by
the need for multiple workers in the system to have access to the single
instances of various resources, and in fact, this choice was necessary
given the shared nature of the access that is needed.

For management of instance(s) of the SharedResources class itself, we
will create a shared pointer to a single instance in the StorageManager
constructor and pass around the shared pointer to that single instance
to all worker classes that need access to the SharedResources.  This
is necessary given the fact that creation and/or configuration of some
of the shared resources is not possible in the SM constructor.  So, passing
a copy of the SharedResources instance to worker classes in the SM constructor
would not provide the fully configured set of resources that the workers
need.  In addition, this model has the benefit of not copying instances
of the SharedResources class (although this operation would not be terribly
resource intensive since the SharedResources class simply contains a set
of shared pointers).
