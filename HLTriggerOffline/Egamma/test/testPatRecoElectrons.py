import FWCore.ParameterSet.Config as cms
from functools import reduce

process = cms.Process("test")


process.maxEvents = cms.untracked.PSet(
    input = cms.untracked.int32(-1)
)
#----------------------------------------------------------------------
# input file
#----------------------------------------------------------------------
process.source = cms.Source("PoolSource",
                            # duplicateCheckMode = cms.untracked.string('noDuplicateCheck'),
                            fileNames = cms.untracked.vstring(
                            'rfio:///castor/cern.ch/user/a/aholz/2011-01-hlt-validation-input-files/output/hlt_HLT_DQM_GR10_H_V12T.root',
                            )
                            )
#----------------------------------------------------------------------
# output file
#----------------------------------------------------------------------

process.out = cms.OutputModule("PoolOutputModule",
    # fileName = cms.untracked.string('/tmp/aholz/wpxTest.root'),


    fileName = cms.untracked.string('/tmp/aholz/hlt_HLT_DQM_GR10_H_V12T.root')
)


process.outPath = cms.EndPath(process.out)

#----------------------------------------------------------------------
# print PATH summary at the end
#----------------------------------------------------------------------
process.options = cms.untracked.PSet(wantSummary = cms.untracked.bool(True))


#----------------------------------------------------------------------
#----------------------------------------------------------------------
# standard configuration for producing PAT electrons
# and them separating them into separate collections
#----------------------------------------
#
# objects generated by this file (of interest
# to the user):
#
#  makePatElectronCollections   a sequence for creating
#                               pat electrons and
#                               then splitting them into
#                               different collections
#----------------------------------------
import FWCore.ParameterSet.Config as cms

from PhysicsTools.PatAlgos.patSequences_cff import *

# note that we can't disable the MC Matching here
# as we don't have a process object...

#----------------------------------------------------------------------
# inspired by http://cmslxr.fnal.gov/lxr/source/ElectroWeakAnalysis/WENu/test/pat_WenuVBTF_ntuple_forData.py
# and see also the recipe at https://twiki.cern.ch/twiki/bin/view/CMS/SimpleCutBasedEleID#Electron_ID_Implementation_in_Re

process.load("PhysicsTools.PatAlgos.patSequences_cff")
process.load("ElectroWeakAnalysis.WENu.simpleEleIdSequence_cff")
process.load("Configuration.StandardSequences.GeometryRecoDB_cff")
process.load("Configuration.StandardSequences.FrontierConditions_GlobalTag_cff")
process.load('Configuration.StandardSequences.MagneticField_38T_cff')

# from Configuration.AlCa.autoCond import autoCond
# process.GlobalTag.globaltag = autoCond['startup']

# taken from the configuration of the skim (and the reco
# used for the skim)
process.GlobalTag.globaltag = 'FT_R_39X_V4A::All'
# process.GlobalTag.globaltag = 'GR_R_39X_V5::All'

process.patElectronIDs = cms.Sequence(process.simpleEleIdSequence)
process.makePatElectrons = cms.Sequence(process.patElectronIDs *
                                        # commented out for the moment -- do we still need this ?
                                        process.patElectronIsolation *
                                        process.patElectrons)

# process.runPat = cms.Path(process.makePatElectrons)

process.patElectrons.addElectronID = cms.bool(True)
process.patElectrons.electronIDSources = cms.PSet(

    # relative isolation
    simpleEleId95relIso= cms.InputTag("simpleEleId95relIso"),
    simpleEleId90relIso= cms.InputTag("simpleEleId90relIso"),
    simpleEleId85relIso= cms.InputTag("simpleEleId85relIso"),
    simpleEleId80relIso= cms.InputTag("simpleEleId80relIso"),
    simpleEleId70relIso= cms.InputTag("simpleEleId70relIso"),
    simpleEleId60relIso= cms.InputTag("simpleEleId60relIso"),

    # combined isolation (adding track momenta and
    # calorimetric energies which overcounts energy/momentum
    # in some cases)
    # simpleEleId95cIso= cms.InputTag("simpleEleId95cIso"),
    # simpleEleId90cIso= cms.InputTag("simpleEleId90cIso"),
    # simpleEleId85cIso= cms.InputTag("simpleEleId85cIso"),
    # simpleEleId80cIso= cms.InputTag("simpleEleId80cIso"),
    # simpleEleId70cIso= cms.InputTag("simpleEleId70cIso"),
    # simpleEleId60cIso= cms.InputTag("simpleEleId60cIso"),
)


#----------------------------------------------------------------------
# require that electrons pass all criteria
#----------------------------------------------------------------------
modulesForSequence = []

wpxEfficiencies = [ 60, 70, 80, 85, 90, 95]

for efficiency in wpxEfficiencies:

    moduleName = "WP%02dElectrons" % efficiency

    module = cms.EDFilter("CandViewSelector",
                          src = cms.InputTag("patElectrons"),
                          cut = cms.string('electronID("simpleEleId%02drelIso") > 6.5' % efficiency)
                          )

    # add module to process
    setattr(process, moduleName, module)

    # keep module for producing a sequence
    modulesForSequence.append(module)


#----------------------------------------------------------------------
# make sure PAT is run before looking at the categories
#----------------------------------------------------------------------
import operator
makePatElectronCollections = cms.Sequence(process.makePatElectrons
                                          + reduce(operator.add, modulesForSequence)
                                          )


process.makePatElectronCollectionsPath = cms.Path(makePatElectronCollections)
#----------------------------------------------------------------------
# counting
#----------------------------------------------------------------------
# add some counting of GSF electrons (i.e. add a path
# which requires the corresponding collection to have at least one
# element)

# the module for counting
process.countGsfElectrons = cms.EDFilter("CandViewCountFilter",
                                         src = cms.InputTag("gsfElectrons"),
                                         minNumber = cms.uint32(1)
                                         )

process.countGsfElectronsPath = cms.Path(process.countGsfElectrons)

# add counting of WPx electrons 
for efficiency in wpxEfficiencies:
    moduleName = "countWP%02dElectrons" % efficiency

    module = cms.EDFilter("CandViewCountFilter",
                          src = cms.InputTag("WP%02dElectrons" % efficiency),
                          minNumber = cms.uint32(1)
                          )

    setattr(process, moduleName, module)

    # create a corresponding path
    setattr(process, moduleName + "Path", cms.Path(module))


#----------------------------------------------------------------------




