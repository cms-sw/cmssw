#ifndef HLTBTagPerformanceAnalyzer_H
#define HLTBTagPerformanceAnalyzer_H

// system include files
#include <memory>
#include <string>
#include <vector>
#include <map>

// user include files
#include "FWCore/Framework/interface/Frameworkfwd.h"
#include "FWCore/Framework/interface/EDAnalyzer.h"
#include "FWCore/Framework/interface/Event.h"
#include "FWCore/Framework/interface/MakerMacros.h"
#include "FWCore/ParameterSet/interface/ParameterSet.h"
#include "DataFormats/JetReco/interface/Jet.h"
#include "DataFormats/BTauReco/interface/JetTag.h"
#include "DataFormats/BTauReco/interface/TrackIPTagInfo.h"
#include "DataFormats/BTauReco/interface/SecondaryVertexTagInfo.h"



// Trigger
#include "DataFormats/Common/interface/TriggerResults.h"
#include "HLTrigger/HLTcore/interface/HLTConfigProvider.h"

//Vertex
#include "DataFormats/VertexReco/interface/Vertex.h"
#include "DataFormats/VertexReco/interface/VertexFwd.h"

//DQM services
#include "DQMServices/Core/interface/DQMStore.h"
#include "FWCore/ServiceRegistry/interface/Service.h"
#include "DQMServices/Core/interface/MonitorElement.h"

#include "DataFormats/Math/interface/deltaR.h"

#include "TROOT.h"
#include "TH1F.h"
#include "TH2F.h"

/** \class HLTBTagPerformanceAnalyzer
 *
 *  Top level steering routine for HLT b tag performance analysis.
 *
 */

 
using namespace reco;
using namespace edm;
 

class HLTBTagPerformanceAnalyzer : public edm::EDAnalyzer {
   public:
      explicit HLTBTagPerformanceAnalyzer(const edm::ParameterSet&);
      ~HLTBTagPerformanceAnalyzer();

      static void fillDescriptions(edm::ConfigurationDescriptions& descriptions);



   private:
      virtual void beginJob() ;
      virtual void analyze(const edm::Event&, const edm::EventSetup&);
      virtual void endJob() ;

      virtual void beginRun(edm::Run const&, edm::EventSetup const&);
      virtual void endRun(edm::Run const&, edm::EventSetup const&);
      virtual void beginLuminosityBlock(edm::LuminosityBlock const&, edm::EventSetup const&);
      virtual void endLuminosityBlock(edm::LuminosityBlock const&, edm::EventSetup const&);
        
      struct JetRefCompare :
         public std::binary_function<edm::RefToBase<reco::Jet>, edm::RefToBase<reco::Jet>, bool> {
         inline bool operator () (const edm::RefToBase<reco::Jet> &j1,
                     const edm::RefToBase<reco::Jet> &j2) const
         { return j1.id() < j2.id() || (j1.id() == j2.id() && j1.key() < j2.key()); }
      };
      
      typedef std::map<edm::RefToBase<reco::Jet>, float, JetRefCompare> JetTagMap;
      
      // ----------member data ---------------------------
      InputTag hlTriggerResults_;
      std::vector<std::string> hltPathNames_;
      HLTConfigProvider hltConfigProvider_;
      bool triggerConfChanged_;
      
      std::vector<InputTag> JetTagCollection_;
      
// gen level tag-handlers

typedef unsigned int            flavour_t;
typedef std::vector<flavour_t>  flavours_t;

	  InputTag             m_mcPartons;        // MC truth match - jet association to partons
      std::vector<std::string>  m_mcLabels;         // MC truth match - labels
      std::vector<flavours_t>   m_mcFlavours;       // MC truth match - flavours selection
	double                    m_mcRadius;         // MC truth match - deltaR association radius
	bool                      m_mcMatching;       // MC truth matching anabled/disabled




      double minJetPT_;
std::vector<int> hltPathIndexs_;

// data not supported 
//      bool isData_;

      DQMStore * dqm;

//is HLT OK?
std::vector<bool> _isfoundHLTs;
 

	 /// DQM folder handle
	std::vector<std::string> folders;


      // Histogram handler
      std::vector< std::map<std::string, MonitorElement *> > H1_;
      std::vector< std::map<std::string, MonitorElement *> > H2_;


};


#endif

