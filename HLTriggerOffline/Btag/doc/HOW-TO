
Useful info

Roberval : "
I created the package HLTriggerOffline/BTag (you can find a copy of it in /afs/cern.ch/user/r/rwalsh/public/HLTriggerOfflineBTag.tgz
To run the validation code I had to change the file HLTriggerOffline/Common/python/HLTValidation_cff.py. The modified file is located in
/afs/cern.ch/user/r/rwalsh/public/HLTValidation_cff.py


I would like to ask you to give a quick check in the codes (start following the directions in HLTValidation_cff.py) and make a request in savannah to
create the package HLTriggerOffline/BTag and modify the file HLTValidation_cff.py in the repository. You should also point the fact that we need
HLTrigger/Configuration with a version greater or equal to V13-08-00 in order to have the products available for validation.

We will discuss in another opportunity the implementation of more plots such as efficiency versus fake rate. But first it would be good to have these
codes implemented.

For savannah requests go to https://savannah.cern.ch/projects/cmssw-hlt/
"


DAS search "file dataset=/RelValTTbar/CMSSW_5_2_0_pre5-START52_V1-v1/GEN-SIM-DIGI-RAW-HLTDEBUG"

Igor "
I've checked the scratch of all RelVal samples as well, stored here
http://cms-project-relval.web.cern.ch/cms-project-relval/relval_stats/

I've looked at

CMSSW_6_0_0_pre2_standard_v1.txt  -- one of the latest

edmDumpEventContent /store/relval/CMSSW_6_0_0_pre2/RelValTTbar/GEN-SIM-DIGI-RAW-HLTDEBUG/START52_V9-v1/0256/F4AE55E9-387F-E111-B816-0018F3D096BE.root
| grep "BTag"

-- no collections.


I've done the following in

(CMSSW_5_2_2)
HLTrigger/Configuration



grep -E 'hlt.*BJetTags.*JetTagProducer' HLT_GRun_cff.py | xargs -I {} echo {} | awk '{print $1}' > list_of_Btags


cat list_of_Btags | xargs -I {} echo " echo {};  grep -E {} HLT_GRun_cff.py | grep Sequence | sed -ne 's/\(.*\) = cms.Sequence\(.*\)/\1\n/p' " | sh


And I've got a list of L25 and L3 collections and corresponded paths:


hltBLifetimeL25BJetTagsHbb
HLTBtagIPSequenceL25Hbb


"

Roberval "

> svn co https://svn.cern.ch/reps/rwalsh/cmssw/trunk/HLTriggerOffline
> 
> Use CMSSW_5_2_1, login on lxplus424.cern.ch and run in BTag/test
> cmsRun hltbtagip_analyzer_cfg.py
	

"


Igor "


I've written the codes  HLTBTagIPPlotter.cc  HLTBTagIPValidator.cc which are rewritten versions of
/HLTriggerOffline/Muon/HLTMuon{Validator,Plotter}.cc

I think that TagInfo collections are  not really  needed at the first stage. If we want to plot efficiencies of L25 and L3 btagging as function of pT
and Eta, only reco::JetTagCollections are needed in fact.

Now I'm trying to rewrite 'Muon' root scripts to plot efficiency for different versions of CMSSW. I hope to finish after 'statistics' lessons today.
And then I'll test on different vesrions of RelVal samples.


"

> https://twiki.cern.ch/twiki/bin/view/CMSPublic/SWGuideValidationTableHLT
> > https://twiki.cern.ch/twiki/bin/view/CMSPublic/SWGuideTriggerSoftwareValidation
> > https://twiki.cern.ch/twiki/bin/view/CMSPublic/SWGuideHLTriggerOffline


 https://twiki.cern.ch/twiki/bin/view/CMSPublic/WorkBookDQM#How_to_visualize_the_DQM_histogr

twiki:
https://twiki.cern.ch/twiki/bin/view/Sandbox/DQMonlineDOliinychenko
https://twiki.cern.ch/twiki/bin/view/CMSPublic/SWGuideHLTriggerOffline
https://twiki.cern.ch/twiki/bin/view/Atlas/ATLASStorageAtCERN#How_to_list_a_directory_in_EOS


Igor "

Hi Roberval, Dmitriy

> https://twiki.cern.ch/twiki/bin/view/CMSPublic/SWGuideTriggerSoftwareValidation

Extremely useful twiki on Offline Validation!

I've  breifly run  through, and figured  main steps out:


1) As you said, check out HLTriggerOffline/JetMET as an example and replace its body by Validation/RecoB or DQMOffline/RecoB

2) Create PostValidation module (edmAnalyzer) as DQMGenericClient to calculate efficiencies here (copy and adopt the appropriate code from
Validation/RecoB ?)

3) Create plug-in module (as DQMRenderPlugin) to draw 5-6 root histograms on the web page (histograms come from DQMMonitorElements created at 1) )

4) test the whole chain:

using instructions  (especially "How to access the GUI from outside p5 network") on
https://twiki.cern.ch/twiki/bin/view/CMS/OnlineDQMTestBed

5)if we are happy with all things, upload our code/configs/'layout settings'/plug-in to CVS DQM/Integration with some tag,  contact with Nuno Leonardo
to provide the tag to him.


So I see that the 1)-5) task can be fulfilled within 1-2 weeks, the main parts are 1),2). I'll help Dmitriy with 1), perhaps with 2). Then, I hope,
when we manage to do 1)-4), we'll upload to CVS and  contact  Nuno Leonardo (Roberval, it might be that your help will be needed)

So, what do you think?

Cheers,
Igor.

"


How to get info about collections

edmDumpEventContent step2_RAW2DIGI_RECO_VALIDATION.root | grep "hltBLifetime



steps of running 

stage-i

step1
cmsDriver.py TTbar_7TeV_cfi.py -s GEN,SIM,DIGI,L1,DIGI2RAW,HLT:GRun -n 10 --eventcontent FEVTDEBUGHLT --conditions auto:startup_GRun --mc

step2
cmsDriver.py step2 -s RAW2DIGI,RECO,VALIDATION:hltvalidation --eventcontent FEVTDEBUGHLT --conditions auto:startup_GRun -n 10 --mc --filein file:TTbar_7TeV_cfi_py_GEN_SIM_DIGI_L1_DIGI2RAW_HLT.root

(so far, it doesn't work)

stage-ii
cmsRun CMSSW_5_2_6_hltpatch2/src/HLTriggerOffline/Common/test/hltHarvesting_cfg.py

cmsDriver.py harvest -s HARVESTING:validationHarvesting --mc --conditions auto:startup_GRun --harvesting AtJobEnd --filein file:step2_RAW2DIGI_RECO_VALIDATION.root


cmsRun ../../Common/test/hltHarvesting_cfg.py



about cuy.py
https://twiki.cern.ch/twiki/bin/view/CMSPublic/SWGuideBtagValidation


about lsRoot
http://root.cern.ch/phpBB3/viewtopic.php?f=12&t=10786

make

create map

$CMSSW_BASE/src/HLTriggerOffline/Btag/scripts/v_root_lsRoot/lsRoot -l -m   DQM_V0001_R000000001__CMSSW_3_1_0__RelVal__TrigVal.root

get list of histograms
$CMSSW_BASE/src/HLTriggerOffline/Btag/scripts/v_root_lsRoot/lsRoot    "DQM_V0001_R000000001__CMSSW_3_1_0__RelVal__TrigVal.root:/DQMData/Run 1/HLT/Run summary/BTag/HLT_DiJet40Eta2p6_BTagIP3DFastPV" | awk '{if(NR>5) print $1}'



plot and save:

$CMSSW_BASE/src/HLTriggerOffline/Btag/scripts/cuy.py -x HLTBtagPlot.xml --verbose



find RelVal datasets:

in DAS 

dataset dataset=/RelValTT*/*/*HLTDEBUG | grep dataset.name 

with das_client.py

das_client.py --query="dataset dataset=/RelValTT*/*/*HLTDEBUG  | grep dataset.name "  --idx=0 --limit=100000

do simple parsing of json

das_client.py --query="dataset dataset=/RelValTT*/*/*HLTDEBUG  | grep dataset.name "  --idx=0 --limit=100000  | ./JSON.sh -b  |  egrep '\["data.*"name.*"\]' | awk '{print $2}'

find files

das_client.py --query="file dataset=/RelValTTbar/CMSSW_4_3_0_pre4-START43_V1_PU_E7TeV_FlatDist10_2011EarlyData_inTimeOnly-v1/GEN-SIM-DIGI-RAW-HLTDEBUG" --idx=0 --limit=100000  | ./JSON.sh -b  |  egrep '\["data.*"name.*"\]' | awk '{print $2}'



get list of files for all RelVal samples
_dataset="/RelValTT*/*/*HLTDEBUG"
das_client.py --query="dataset dataset=$_dataset  | grep dataset.name "  --idx=0 --limit=100000  | ./JSON.sh -b  |  egrep '\["data.*"name.*"\]' | awk '{print $2}' | tr -d "\"" > list && cat list | xargs -I {} echo "echo {}; echo; das_client.py --query=\" file dataset={} \" --idx=0 --limit=100000 |   ./JSON.sh -b  |  egrep '\[\"data.*\"name.*\"\]' | awk '{print \$2}'; echo ;echo  " | sh



list of RelVal samples
http://cms-project-relval.web.cern.ch/cms-project-relval/relval_stats/


How-to recursively CVS

find . -type d -print | grep -v CVS | grep -v "admin" | sed -ne 's/.\///p' | xargs -I {}  echo "cvs add {} " | sh
find . -type f -print | grep -v CVS | grep -v "admin" | sed -ne 's/.\///p' | xargs -I {}  echo "cvs add {} " | sh

