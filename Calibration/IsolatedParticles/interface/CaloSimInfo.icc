#include "Calibration/IsolatedParticles/interface/MatchingSimTrack.h"
#include "Calibration/IsolatedParticles/interface/eHCALMatrix.h"
#include "Calibration/IsolatedParticles/interface/eECALMatrix.h"
#include "Calibration/IsolatedParticles/interface/FindCaloHitCone.h"
#include "DataFormats/HcalDetId/interface/HcalSubdetector.h"

#include<algorithm>
#include<iostream>

namespace spr{

  template <typename T>
  std::map<std::string,double> eECALSimInfo(const edm::Event& iEvent, const DetId& det, const CaloGeometry* geo, const CaloTopology* caloTopology, edm::Handle<T>& hitsEB, edm::Handle<T>& hitsEE, edm::Handle<edm::SimTrackContainer>& SimTk, edm::Handle<edm::SimVertexContainer>& SimVtx, const reco::Track* pTrack, TrackerHitAssociator& associate, int ieta, int iphi, double timeCut, bool debug) {

    spr::caloSimInfo info;
    spr::eECALSimInfo(iEvent, det, geo, caloTopology, hitsEB, hitsEE, SimTk, SimVtx, pTrack, associate, ieta, iphi, info, timeCut, debug);
    // return a map of matching type and energy of SimHits
    return spr::eCaloSimInfo(info);
  }

  template <typename T>
  void eECALSimInfo(const edm::Event& iEvent, const DetId& det, const CaloGeometry* geo, const CaloTopology* caloTopology, edm::Handle<T>& hitsEB, edm::Handle<T>& hitsEE, edm::Handle<edm::SimTrackContainer>& SimTk, edm::Handle<edm::SimVertexContainer>& SimVtx, const reco::Track* pTrack, TrackerHitAssociator& associate, int ieta, int iphi, spr::caloSimInfo& info, double timeCut, bool debug) {

    if (debug)
      std::cout << "Processing eECALSimInfo " << 2*ieta+1 << "x" << 2*iphi+1 << "\ntrkMom " << pTrack->p() << " eta " << pTrack->eta() << " trkRecHits " << pTrack->recHitsSize() << std::endl;

    //matching SimTrack
    edm::SimTrackContainer::const_iterator trkInfo = spr::matchedSimTrack(iEvent, SimTk, SimVtx, pTrack, associate, debug);

    //vector of Ecal cells in NxN
    std::vector<DetId> vdets = spr::matrixECALIds(det, ieta, iphi, geo, caloTopology, debug);

    //Construct a struct with matching type and energy of SimHits
    spr::eCaloSimInfo(vdets, geo, hitsEB, hitsEE, SimTk, SimVtx, trkInfo, info, timeCut, debug);
  }

  template <typename T>
  void eECALSimInfo(const edm::Event& iEvent, const DetId& det, const CaloGeometry* geo, const CaloTopology* caloTopology, edm::Handle<T>& hitsEB, edm::Handle<T>& hitsEE, edm::Handle<edm::SimTrackContainer>& SimTk, edm::Handle<edm::SimVertexContainer>& SimVtx, const reco::Track* pTrack, TrackerHitAssociator& associate, int ietaE, int ietaW, int iphiN, int iphiS, spr::caloSimInfo& info, double timeCut, bool debug) {

    if (debug)
      std::cout << "Processing eECALSimInfo " << ietaE+ietaW+1 << "x" << iphiN+iphiS+1 << "\ntrkMom " << pTrack->p() << " eta " << pTrack->eta() << " trkRecHits " << pTrack->recHitsSize() << std::endl;

    //matching SimTrack
    edm::SimTrackContainer::const_iterator trkInfo = spr::matchedSimTrack(iEvent, SimTk, SimVtx, pTrack, associate, debug);

    //vector of Ecal cells in NxN
    std::vector<DetId> vdets = spr::matrixECALIds(det, ietaE, ietaW, iphiN, iphiS, geo, caloTopology, debug);

    // return a map of matching type and energy of SimHits
    spr::eCaloSimInfo(vdets, geo, hitsEB, hitsEE, SimTk, SimVtx, trkInfo, info, timeCut, debug);
  }

  template <typename T>
  std::map<std::string,double> eHCALSimInfo(const edm::Event& iEvent, const HcalTopology* topology, const DetId& det, const CaloGeometry* geo, edm::Handle<T>& hits, edm::Handle<edm::SimTrackContainer>& SimTk, edm::Handle<edm::SimVertexContainer>& SimVtx, const reco::Track* pTrack, TrackerHitAssociator& associate, int ieta, int iphi, double timeCut, bool includeHO, bool debug) {

    spr::caloSimInfo info;
    spr::eHCALSimInfo(iEvent, topology, det, geo, hits, SimTk, SimVtx, pTrack, associate, ieta, iphi, info, timeCut, includeHO, debug);
    // return a map of matching type and energy of SimHits
    return spr::eCaloSimInfo(info);
  }

  template <typename T>
  void eHCALSimInfo(const edm::Event& iEvent, const HcalTopology* topology, const DetId& det, const CaloGeometry* geo, edm::Handle<T>& hits,edm::Handle<edm::SimTrackContainer>& SimTk, edm::Handle<edm::SimVertexContainer>& SimVtx, const reco::Track* pTrack, TrackerHitAssociator& associate, int ieta, int iphi, spr::caloSimInfo& info, double timeCut, bool includeHO, bool debug) {

    if (debug)
      std::cout << "Processing eHCALSimInfo " << 2*ieta+1 << "x" << 2*iphi+1 << "\ntrkMom " << pTrack->p() << " eta " << pTrack->eta() << " trkRecHits " << pTrack->recHitsSize() << std::endl;

    // get the matching SimTrack pointer
    edm::SimTrackContainer::const_iterator trkInfo = spr::matchedSimTrack(iEvent, SimTk, SimVtx, pTrack,associate, debug);

    // get the hits in Hcal in NxN around det
    std::vector< typename T::const_iterator> hit;
    spr::hitHCALmatrix(topology,det,hits,ieta,iphi,hit,includeHO,debug);

    spr::eCaloSimInfo(geo, hits, SimTk, SimVtx, hit, trkInfo, info, timeCut, includeHO, debug);
  }

  template <typename T>
  void eHCALSimInfo(const edm::Event& iEvent, const HcalTopology* topology, const DetId& det, const CaloGeometry* geo, edm::Handle<T>& hits,edm::Handle<edm::SimTrackContainer>& SimTk, edm::Handle<edm::SimVertexContainer>& SimVtx, const reco::Track* pTrack, TrackerHitAssociator& associate, int ietaE, int ietaW, int iphiN, int iphiS, spr::caloSimInfo& info, double timeCut, bool includeHO, bool debug) {

    if (debug)
      std::cout << "Processing eHCALSimInfo " << ietaE+ietaW+1 << "x"<< iphiN+iphiS+1 << "\ntrkMom " << pTrack->p() << " eta " << pTrack->eta() << " trkRecHits " << pTrack->recHitsSize() << std::endl;

    // get the matching SimTrack pointer
    edm::SimTrackContainer::const_iterator trkInfo = spr::matchedSimTrack(iEvent, SimTk, SimVtx, pTrack,associate, debug);

    // get the hits in Hcal in NxN around det
    std::vector< typename T::const_iterator> hit;
    spr::hitHCALmatrixTotal(topology,det,hits,ietaE,ietaW,iphiN,iphiS,hit,includeHO,debug);

    spr::eCaloSimInfo(geo, hits, SimTk, SimVtx, hit, trkInfo, info, timeCut, includeHO, debug);
  }

  // NxN method modified to return vector of  
  // simhit multiplicities by type of particle
  template <typename T>
  std::map<std::string,double> eHCALSimInfo(const edm::Event& iEvent, const HcalTopology* topology, const DetId& det, edm::Handle<T>& hits, edm::Handle<edm::SimTrackContainer>& SimTk, edm::Handle<edm::SimVertexContainer>& SimVtx, const reco::Track* pTrack, TrackerHitAssociator& associate, int ieta, int iphi, std::vector<int>& multiplicityVector, bool debug) {

    if (debug) {
      std::cout << "Processing HcalSimInfo " 
		<< 2*ieta+1 <<"x"<<2*iphi+1<<std::endl;
      std::cout << "trkMom " << pTrack->p() 
		<< " eta " << pTrack->eta() 
		<< " trkRecHits " << pTrack->recHitsSize() << std::endl;
    }

    // Get SimTrack matched to RecoTrack
    edm::SimTrackContainer::const_iterator trkInfo = 
      spr::matchedSimTrack(iEvent, SimTk, SimVtx, pTrack, associate, debug);

    // Get list of simhits in matrix ("hits" is list of pcalo simhits)
    std::vector< typename T::const_iterator> hit; 
    spr::hitHCALmatrix(topology,det,hits,ieta,iphi,hit,false,debug);

    return eCaloSimInfo(hits, SimTk, SimVtx, hit, trkInfo, multiplicityVector, debug);
  }

  // eHCALSimInfo for Cone
  template <typename T>
  std::map<std::string,double> eHCALSimInfoCone(const edm::Event& iEvent, edm::Handle<T>& hits, edm::Handle<edm::SimTrackContainer>& SimTk, edm::Handle<edm::SimVertexContainer>& SimVtx, const reco::Track* pTrack, TrackerHitAssociator& associate, const CaloGeometry* geo, const GlobalPoint& hpoint1, const GlobalPoint& point1, double dR, const GlobalVector& trackMom, std::vector<int>& multiplicityVector) { 

    bool debug_dummy = false;
  
    // Get SimTrack matched to RecoTrack
    edm::SimTrackContainer::const_iterator trkInfo = 
      spr::matchedSimTrack(iEvent, SimTk,SimVtx,pTrack,associate,debug_dummy);

    //    spr::hitHCALmatrix(topology,det,hits,ieta,iphi,debug);
  
    // Get list of simhits in matrix ("hits" is list of pcalo simhits)
    std::vector< typename T::const_iterator> hit = 
      spr::findHitCone(geo, hits, hpoint1, point1, dR, trackMom);
  
    return eCaloSimInfo(hits, SimTk, SimVtx, hit, trkInfo, multiplicityVector, debug_dummy);
  }

  // eHCALSimInfo for Cone that only clusters simhits in Hcal cells
  // that contained a rechit
  template <typename T>
  std::map<std::string,double> eHCALSimInfoCone(const edm::Event& iEvent, edm::Handle<T>& hits, edm::Handle<edm::SimTrackContainer>& SimTk, edm::Handle<edm::SimVertexContainer>& SimVtx, const reco::Track* pTrack, TrackerHitAssociator& associate, const CaloGeometry* geo, const GlobalPoint& hpoint1, const GlobalPoint& point1, double dR, const GlobalVector& trackMom, std::vector<int>& multiplicityVector, std::vector<DetId>& coneRecHitDetIds) {
  
    bool debug_dummy = false;
  
    // Get SimTrack matched to RecoTrack
    edm::SimTrackContainer::const_iterator trkInfo = 
      spr::matchedSimTrack(iEvent,SimTk,SimVtx,pTrack,associate,debug_dummy);

    //    spr::hitHCALmatrix(topology,det,hits,ieta,iphi,debug);
  
    // Get list of simhits in matrix ("hits" is list of pcalo simhits)
    std::vector< typename T::const_iterator> hit = 
      spr::findHitCone(geo, hits, hpoint1, point1, dR, trackMom);

    // Loop over hits and only keep those whose detid matches a detid in
    // coneRecHitDetIds:

    std::vector< typename T::const_iterator> matchedhit;
    for (int ihit=0; ihit < hit.size(); ihit++) {
      bool keephit = false;
      for (size_t idetid=0; idetid < coneRecHitDetIds.size(); idetid++) {
	if (hit.at(ihit)->id() ==  coneRecHitDetIds.at(idetid)) {
	  keephit = true;
	  break;
	}
      }
      if (keephit) matchedhit.push_back(hit.at(ihit));
    }
  
    return eCaloSimInfo(hits, SimTk, SimVtx, matchedhit, trkInfo, multiplicityVector, debug_dummy);
  }

  template <typename T>
  void eCaloSimInfo(std::vector<DetId> vdets, const CaloGeometry* geo, edm::Handle<T>& hitsEB, edm::Handle<T>& hitsEE,  edm::Handle<edm::SimTrackContainer>& SimTk, edm::Handle<edm::SimVertexContainer>& SimVtx, edm::SimTrackContainer::const_iterator trkInfo, spr::caloSimInfo& info, double timeCut, bool debug){

    std::vector< typename T::const_iterator> hitEB, hitEE, hit;
    for (unsigned int i1=0; i1<vdets.size(); i1++) {
      if (vdets[i1] != DetId(0)) {
        if (vdets[i1].subdetId()==EcalBarrel) {
          hit = spr::findHit(hitsEB,vdets[i1]);
          for (unsigned int i2=0; i2<hit.size(); i2++) {
            if (std::count(hitEB.begin(),hitEB.end(),hit[i2]) == 0)
              hitEB.push_back(hit[i2]);
          }
        } else if (vdets[i1].subdetId()==EcalEndcap) {
          hit = spr::findHit(hitsEE,vdets[i1]);
          for (unsigned int i2=0; i2<hit.size(); i2++) {
            if (std::count(hitEE.begin(),hitEE.end(),hit[i2]) == 0)
              hitEE.push_back(hit[i2]);
          }
        }
      }
    }

    spr::caloSimInfo eeInfo;
    spr::eCaloSimInfo(geo, hitsEB, SimTk, SimVtx, hitEB, trkInfo, info,   timeCut, false, debug);
    spr::eCaloSimInfo(geo, hitsEE, SimTk, SimVtx, hitEE, trkInfo, eeInfo, timeCut, false, debug);

    if (info.pdgMatched == 0) info.pdgMatched = eeInfo.pdgMatched;
    info.eMatched    += eeInfo.eMatched;
    info.eGamma      += eeInfo.eGamma;
    info.eNeutralHad += eeInfo.eNeutralHad;
    info.eChargedHad += eeInfo.eChargedHad;
    info.eRest       += eeInfo.eRest;
    info.eTotal      += eeInfo.eTotal;
    if (debug) {
      std::cout << " energyMatched " << info.eMatched 
                << " energyGamma   " << info.eGamma
	        << " energyNeutral " << info.eNeutralHad
                << " energyCharged " << info.eChargedHad
                << " energyRest    " << info.eRest
                << " energyTotal   " << info.eTotal << std::endl;
    }

  }

  template <typename T>
  void eCaloSimInfo(const CaloGeometry* geo, edm::Handle<T>& hits, edm::Handle<edm::SimTrackContainer>& SimTk, edm::Handle<edm::SimVertexContainer>& SimVtx, std::vector< typename T::const_iterator> hit,  edm::SimTrackContainer::const_iterator trkInfo, spr::caloSimInfo& info, double timeCut, bool includeHO, bool debug) { 

    int matchedId = 0;         //pdgid
    if (debug) {
      if( trkInfo != SimTk->end()) std::cout <<"In eCaloSimInfo::  matchSimTrk:"<< trkInfo->trackId() << " matchedId " << trkInfo->type() << std::endl;
      else                         std::cout <<"In eCaloSimInfo::  not valid track pointer" << std::endl;
    }

    if (trkInfo != SimTk->end()) {

      unsigned int matchSimTrk = trkInfo->trackId();
      matchedId                = trkInfo->type();         //pdgid

      edm::SimTrackContainer::const_iterator simTrkItr;
      edm::SimVertexContainer::const_iterator simVtxItr;
    
      for (unsigned int ihit=0; ihit<hit.size(); ihit++) {

	DetId id_ = (DetId)(hit[ihit]->id());
        double tof = timeOfFlight(id_, geo, debug);
	bool ok = true;
	if (((int)(id_.det())==4) && (id_.subdetId()==(int)(HcalForward))) ok = false;
	if ((!includeHO) && ((int)(id_.det())==4) && (id_.subdetId()==(int)(HcalOuter))) ok = false;
        if ((hit[ihit]->time() <= (tof+timeCut)) && ok) {

    	 // if the hitId matches with matching trackId
          if (hit[ihit]->geantTrackId() == (int)matchSimTrk ) {
	    info.eMatched += hit[ihit]->energy();
          } else { 
         // trace back the history and check the pdgId of origin SimTrack of SimHit
	    bool found = false;
	    for (simTrkItr = SimTk->begin(); simTrkItr!= SimTk->end(); simTrkItr++) {
	      if (hit[ihit]->geantTrackId() == (int)simTrkItr->trackId()) {
  	        found = true;
	        bool match = spr::validSimTrack(matchSimTrk, simTrkItr, SimTk, SimVtx, debug);
 	        if      (match) {info.eMatched += hit[ihit]->energy();}
	        else {
	          edm::SimTrackContainer::const_iterator parentItr =  spr::parentSimTrack(simTrkItr, SimTk, SimVtx, debug); 
	          if (debug) {
                    if (parentItr != SimTk->end() ) std::cout << "original parent of " << simTrkItr->trackId() << " " << parentItr->trackId() << ", " << parentItr->type() << " Energy " << hit[ihit]->energy() << std::endl;
                    else                            std::cout << "original parent of " << simTrkItr->trackId() << " not found; Energy " << hit[ihit]->energy() << std::endl;
                  }
	          if (parentItr == SimTk->end() )        { info.eRest += hit[ihit]->energy();}
	          else if (parentItr->type()  == 22)     { info.eGamma += hit[ihit]->energy();}
	          else if ((int)parentItr->charge()== 0) { info.eNeutralHad += hit[ihit]->energy();}
	          else                                     info.eChargedHad += hit[ihit]->energy();
	        }
	        break;
	      } 
	    }
	    if (!found) info.eRest += hit[ihit]->energy();
	    if (debug) std::cout << "Hit " << ihit << ": " << *hit[ihit] << std::endl;
          }
        }
      } // loop over hits
    }

    info.eTotal = info.eMatched+info.eGamma+info.eNeutralHad+info.eChargedHad+info.eRest;
    info.pdgMatched = matchedId;
    if (debug) {
      std::cout << " Energy (matched) " << info.eMatched << " (gamma) " 
                << info.eGamma << " (neutral) " << info.eNeutralHad 
                << " (charged) " << info.eChargedHad << " (rest) " <<info.eRest
                << " (total) " << info.eTotal << std::endl;
    }
  }

  std::map<std::string,double> eCaloSimInfo (spr::caloSimInfo& info) {

    std::map<std::string, double> simInfo;
    simInfo.insert( std::pair<std::string, double>("eMatched",    info.eMatched));
    simInfo.insert( std::pair<std::string, double>("pdgMatched",  info.pdgMatched));
    simInfo.insert( std::pair<std::string, double>("eGamma",      info.eGamma));
    simInfo.insert( std::pair<std::string, double>("eNeutralHad", info.eNeutralHad));
    simInfo.insert( std::pair<std::string, double>("eChargedHad", info.eChargedHad));
    simInfo.insert( std::pair<std::string, double>("eRest",       info.eRest));
    simInfo.insert( std::pair<std::string, double>("eTotal",      info.eTotal));
    return simInfo;
  }

  // Returns total energy of CaloSimHits which originate from the matching SimTrack
  template <typename T>
  double eCaloSimInfo(const edm::Event& iEvent, const CaloGeometry* geo, edm::Handle<T>& hits, edm::Handle<edm::SimTrackContainer>& SimTk, edm::Handle<edm::SimVertexContainer>& SimVtx, const reco::Track* pTrack, TrackerHitAssociator& associate, double timeCut, bool includeHO, bool debug) {
	
    // 	
    std::vector<int> matchedId = spr::matchedSimTrackId(iEvent, SimTk, SimVtx, pTrack, associate, debug);
    double energySum = 0.0;
    if (debug) {
      std::cout << "eCaloSimInfo:: Found " << matchedId.size() << " track IDs originating from the current track";
      for (unsigned int it = 0; it < matchedId.size(); ++it) 
        std::cout << " " << matchedId[it];
      std::cout << std::endl;
    }
    if (matchedId.size() > 0) {
      typename T::const_iterator ihit;
      for (ihit=hits->begin(); ihit!=hits->end(); ihit++) {

        //cut on time
	DetId id_ = (DetId)(ihit->id());
        double tof = timeOfFlight(id_, geo, debug);
	bool ok = true;
	if (((int)(id_.det())==4) && (id_.subdetId()==(int)(HcalForward))) ok = false;
	if ((!includeHO) && ((int)(id_.det())==4) && (id_.subdetId()==(int)(HcalOuter))) ok = false;
        if ((ihit->time() <= (tof+timeCut)) && ok) {

          int  id = ihit->geantTrackId();
          bool found = false;
          for (unsigned int it = 0; it < matchedId.size(); ++it) {
	    if (id == matchedId[it]) {
	      found = true; break;
	    }
          }
          if (found) {
	    energySum += ihit->energy();
	    if (debug) std::cout << "Hit " << *ihit << std::endl;
          }
        }
      }
    }
    return energySum;
  }

  template <typename T>
  double eCaloSimInfo(const edm::Event& iEvent, const CaloGeometry* geo, edm::Handle<T>& hitsEB, edm::Handle<T>& hitsEE, edm::Handle<edm::SimTrackContainer>& SimTk, edm::Handle<edm::SimVertexContainer>& SimVtx, const reco::Track* pTrack, TrackerHitAssociator& associate, double timeCut, bool debug) {
	
    // 	
    std::vector<int> matchedId = spr::matchedSimTrackId(iEvent, SimTk, SimVtx, pTrack, associate, debug);
    double energySum = 0.0;
    if (debug) {
      std::cout << "eCaloSimInfo:: Found " << matchedId.size() << " track IDs originating from the current track";
      for (unsigned int it = 0; it < matchedId.size(); ++it) 
        std::cout << " " << matchedId[it];
      std::cout << std::endl;
    }
    if (matchedId.size() > 0) {
      typename T::const_iterator ihit;
      for (ihit=hitsEB->begin(); ihit!=hitsEB->end(); ihit++) {

        //cut on time
        double tof = timeOfFlight((DetId)(ihit->id()), geo, debug);
        if (ihit->time() <= (tof+timeCut)) {

          int  id = ihit->geantTrackId();
          bool found = false;
          for (unsigned int it = 0; it < matchedId.size(); ++it) {
	    if (id == matchedId[it]) {
	      found = true; break;
	    }
          }
          if (found) {
	    energySum += ihit->energy();
	    if (debug) std::cout << "Hit " << *ihit << std::endl;
          }
        }
      }
      for (ihit=hitsEE->begin(); ihit!=hitsEE->end(); ihit++) {

        //cut on time
        double tof = timeOfFlight((DetId)(ihit->id()), geo, debug);
        if (ihit->time() <= (tof+timeCut)) {

          int  id = ihit->geantTrackId();
          bool found = false;
          for (unsigned int it = 0; it < matchedId.size(); ++it) {
	    if (id == matchedId[it]) {
	      found = true; break;
	    }
          }
          if (found) {
	    energySum += ihit->energy();
	    if (debug) std::cout << "Hit " << *ihit << std::endl;
          }
        }
      }
    }
    return energySum;
  }

  template <typename T>
  std::map<std::string,double> eCaloSimInfo(edm::Handle<T>& hits, edm::Handle<edm::SimTrackContainer>& SimTk, edm::Handle<edm::SimVertexContainer>& SimVtx, std::vector< typename T::const_iterator> hit, edm::SimTrackContainer::const_iterator trkInfo, std::vector<int>& multiplicityVector, bool debug) {
  
    int matchedId = 0;         //pdgid

    if (debug) {
      if( trkInfo != SimTk->end()) {
	std::cout <<"In eCaloSimInfo::  matchSimTrk:" << trkInfo->trackId() 
		  << " matchedId " << trkInfo->type() << std::endl;
      } else {
	std::cout <<"In eCaloSimInfo::  not valid track pointer" << std::endl;
      }
    }

    // Find sets of hcal cells with energy
    // Use std::set to avoid duplicates

    std::set<int> uniqueIds_;
    std::set<int> uniqueIds_matched;
    std::set<int> uniqueIds_total  ;
    std::set<int> uniqueIds_neut   ;
    std::set<int> uniqueIds_char   ;
    std::set<int> uniqueIds_gamma  ;
    std::set<int> uniqueIds_rest   ;

    // Counters for SimHits
    int nMatched=0, nRest=0, nGamma=0, nNeutralHad=0, nChargedHad=0;
  
    double energySum = 0.0;
    double energyGamma=0.0, energyNeutral=0.0, energyCharged=0.0, energyRest=0.0;
  
    // What is this checking?  
    if (trkInfo != SimTk->end()) {
    
      unsigned int matchSimTrk = trkInfo->trackId();
      matchedId                = trkInfo->type();         //pdgid

      edm::SimTrackContainer::const_iterator simTrkItr;
      edm::SimVertexContainer::const_iterator simVtxItr;
    
      // Loop over hits
      for (unsigned int ihit=0; ihit<hit.size(); ihit++) {
      
	// For simhit tower multiplicity, we need to avoid double
	// counting towers with multiple simhits:
	// This will break if called for pcalohits from the ecal!!
	HcalDetId detId(hit[ihit]->id());
	int ieta = detId.ieta();
	int iphi = detId.iphi();
	int uniqueId = 100*ieta+iphi;
      
	if( hit[ihit]->time() > 150.0 ) continue;
      
	if (hit[ihit]->geantTrackId() == (int)matchSimTrk ) {
	  energySum += spr::getEnergy(hit[ihit]);
	  uniqueIds_matched.insert(uniqueId);
	  uniqueIds_total.insert(uniqueId);
	  nMatched++;
	} else {
	  bool found = false;
	  for (simTrkItr = SimTk->begin(); simTrkItr!= SimTk->end(); simTrkItr++) {
	    if (hit[ihit]->geantTrackId() == (int)simTrkItr->trackId()) {
	      found = true;
	      bool match = spr::validSimTrack(matchSimTrk, simTrkItr, SimTk, SimVtx, debug);
	      if (match) {
		energySum += spr::getEnergy(hit[ihit]);
		uniqueIds_matched.insert(uniqueId);
		uniqueIds_total.insert(uniqueId);
		nMatched++;
	      } else {
		edm::SimTrackContainer::const_iterator parentItr =  
		  spr::parentSimTrack(simTrkItr, SimTk, SimVtx, debug); 
		if (debug) {
		  if (parentItr != SimTk->end() ) {
		    std::cout << "original parent of " << simTrkItr->trackId() 
			      << " " << parentItr->trackId() << ", " 
			      << parentItr->type() 
			      << " Energy " << spr::getEnergy(hit[ihit]) 
			      << std::endl;
		  } else {
		    std::cout << "original parent of " << simTrkItr->trackId() 
			      << " not found; Energy " << spr::getEnergy(hit[ihit]) 
			      << std::endl;
		  }
		}
		if (parentItr == SimTk->end() ) { 
		  energyRest += spr::getEnergy(hit[ihit]);
		  uniqueIds_rest.insert(uniqueId);
		  uniqueIds_total.insert(uniqueId);
		  nRest++;
		} else if (parentItr->type()  == 22) { 
		  energyGamma += spr::getEnergy(hit[ihit]);
		  uniqueIds_gamma.insert(uniqueId);
		  uniqueIds_total.insert(uniqueId);
		  nGamma++;
		} else if ((int)parentItr->charge()== 0) { 
		  energyNeutral += spr::getEnergy(hit[ihit]);
		  uniqueIds_neut.insert(uniqueId);
		  uniqueIds_total.insert(uniqueId);
		  nNeutralHad++;
		} else {
		  energyCharged += spr::getEnergy(hit[ihit]);
		  uniqueIds_char.insert(uniqueId);
		  uniqueIds_total.insert(uniqueId);
		  nChargedHad++;
		}
	      }
	      break;
	    } 
	  } // for (simTrkItr = ...)
	
	  if (!found) {
	    energyRest += spr::getEnergy(hit[ihit]);
	    uniqueIds_rest.insert(uniqueId);
	    uniqueIds_total.insert(uniqueId);
	    nRest++;
	  }
	
	  if (debug) std::cout << "Hit " << ihit << ": " 
			       << *hit[ihit] << std::endl;
	} // else condition, i.e. (hit[ihit]->geantTrackId() != (int)matchSimTrk )
      } // loop over hits

      //     std::cout << "nHits       = " << nHits  << "\n" 
      // 	      << "nGamma      = " << nGamma << "\n" 
      // 	      << "nNeutralHad = " << nNeutralHad << "\n" 
      // 	      << "nChargedHad = " << nChargedHad << "\n" 
      // 	      << "nRest       = " << nRest << std::endl;
    
    } // if (trkInfo != SimTk->end())
  
  

    double energyTot = energySum+energyGamma+energyNeutral+energyCharged+energyRest;
    multiplicityVector.push_back(uniqueIds_matched.size());
    multiplicityVector.push_back(uniqueIds_total  .size());
    multiplicityVector.push_back(uniqueIds_neut   .size());
    multiplicityVector.push_back(uniqueIds_char   .size());
    multiplicityVector.push_back(uniqueIds_gamma  .size());
    multiplicityVector.push_back(uniqueIds_rest   .size());

    std::map<std::string, double> simInfo;
    simInfo.insert( std::pair<std::string, double>("eMatched",    energySum) );
    simInfo.insert( std::pair<std::string, double>("pdgMatched",  matchedId) );
    simInfo.insert( std::pair<std::string, double>("eGamma",      energyGamma) );
    simInfo.insert( std::pair<std::string, double>("eNeutralHad", energyNeutral) );
    simInfo.insert( std::pair<std::string, double>("eChargedHad", energyCharged) );
    simInfo.insert( std::pair<std::string, double>("eRest",       energyRest) );
    simInfo.insert( std::pair<std::string, double>("eTotal",      energyTot) );
    if (debug) {
      std::cout << " energySum " << energySum << "  energyGamma " << energyGamma 
		<< "  energyNeutral " << energyNeutral << "  energyCharged " 
		<< energyCharged << "  energyRest " << energyRest 
		<< "  energyTot " << energyTot << std::endl;
    }
    return simInfo;
  } // eCaloSimInfo

}
