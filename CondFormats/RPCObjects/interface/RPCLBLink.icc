#ifndef CondFormats_RPCObjects_RPCLBLink_icc
#define CondFormats_RPCObjects_RPCLBLink_icc

#include "CondFormats/RPCObjects/interface/RPCLBLink.h"

#include "FWCore/Utilities/interface/Exception.h"

inline ::uint32_t RPCLBLink::getId() const
{
    return id_;
}

inline RPCLBLink::operator ::uint32_t() const
{
    return id_;
}

inline bool RPCLBLink::matches(RPCLBLink const & _rhs) const
{
    return ((id_ & _rhs.getMask()) == (getMask() & _rhs.id_));
}

inline void RPCLBLink::setId(::uint32_t const & _id)
{
    id_ = _id;
}

inline void RPCLBLink::reset()
{
    id_ = 0x0;
}

// Field Getters
inline int RPCLBLink::getRegion() const
{
    return bf_get(min_region_, mask_region_, pos_region_);
}

inline int RPCLBLink::getYoke() const
{
    return bf_get(min_yoke_, mask_yoke_, pos_yoke_);
}

inline int RPCLBLink::getSector() const
{
    return bf_get(min_sector_, mask_sector_, pos_sector_);
}

inline int RPCLBLink::getSide() const
{
    return bf_get(min_side_, mask_side_, pos_side_);
}

inline int RPCLBLink::getWheelOrDisk() const
{
    return bf_get(min_wheelordisk_, mask_wheelordisk_, pos_wheelordisk_);
}

inline int RPCLBLink::getFibre() const
{
    return bf_get(min_fibre_, mask_fibre_, pos_fibre_);
}

inline int RPCLBLink::getRadial() const
{
    return bf_get(min_radial_, mask_radial_, pos_radial_);
}

inline int RPCLBLink::getLinkBoard() const
{
    return bf_get(min_linkboard_, mask_linkboard_, pos_linkboard_);
}

inline int RPCLBLink::getConnector() const
{
    return bf_get(min_connector_, mask_connector_, pos_connector_);
}

// Field Setters
inline RPCLBLink & RPCLBLink::setRegion(int _region)
{
    return bf_set(min_region_, max_region_, mask_region_, pos_region_, _region);
}

inline RPCLBLink & RPCLBLink::setYoke(int _yoke)
{
    return bf_set(min_yoke_, max_yoke_, mask_yoke_, pos_yoke_, _yoke);
}

inline RPCLBLink & RPCLBLink::setSector(int _sector)
{
    return bf_set(min_sector_, max_sector_, mask_sector_, pos_sector_, _sector);
}

inline RPCLBLink & RPCLBLink::setSide(int _side)
{
    return bf_set(min_side_, max_side_, mask_side_, pos_side_, _side);
}

inline RPCLBLink & RPCLBLink::setWheelOrDisk(int _wheelordisk)
{
    return bf_set(min_wheelordisk_, max_wheelordisk_, mask_wheelordisk_, pos_wheelordisk_, _wheelordisk);
}

inline RPCLBLink & RPCLBLink::setFibre(int _fibre)
{
    return bf_set(min_fibre_, max_fibre_, mask_fibre_, pos_fibre_, _fibre);
}

inline RPCLBLink & RPCLBLink::setRadial(int _radial)
{
    return bf_set(min_radial_, max_radial_, mask_radial_, pos_radial_, _radial);
}

inline RPCLBLink & RPCLBLink::setLinkBoard(int _linkboard)
{
    return bf_set(min_linkboard_, max_linkboard_, mask_linkboard_, pos_linkboard_, _linkboard);
}

inline RPCLBLink & RPCLBLink::setConnector(int _connector)
{
    return bf_set(min_connector_, max_connector_, mask_connector_, pos_connector_, _connector);
}

inline bool RPCLBLink::operator<(RPCLBLink const & _rhs) const
{
    return (id_ < _rhs.id_);
}

inline bool RPCLBLink::operator==(RPCLBLink const & _rhs) const
{
    return (id_ == _rhs.id_);
}

inline bool RPCLBLink::operator!=(RPCLBLink const & _rhs) const
{
    return (id_ != _rhs.id_);
}

inline bool RPCLBLink::operator<(::uint32_t const & _rhs) const
{
    return (id_ < _rhs);
}

inline bool RPCLBLink::operator==(::uint32_t const & _rhs) const
{
    return (id_ == _rhs);
}

inline bool RPCLBLink::operator!=(::uint32_t const & _rhs) const
{
    return (id_ != _rhs);
}

inline RPCLBLink & RPCLBLink::operator++()
{
    int _value(0);
    if ((_value = getConnector()) != wildcard_) {
        if (_value < max_connector_)
            return setConnector(_value + 1);
        setConnector(min_connector_);
    }
    if ((_value = getLinkBoard()) != wildcard_) {
        if (_value < max_linkboard_)
            return setLinkBoard(_value + 1);
        setLinkBoard(min_linkboard_);
    }
    if ((_value = getRadial()) != wildcard_) {
        if (_value < max_radial_)
            return setRadial(_value + 1);
        setRadial(min_radial_);
    }
    if ((_value = getFibre()) != wildcard_) {
        if (_value < max_fibre_)
            return setFibre(_value + 1);
        setFibre(min_fibre_);
    }
    if ((_value = getWheelOrDisk()) != wildcard_) {
        if (_value < max_wheelordisk_)
            return setWheelOrDisk(_value + 1);
        setWheelOrDisk(min_wheelordisk_);
    }
    if ((_value = getSide()) != wildcard_) {
        if (_value < max_side_)
            return setSide(_value + 1);
        setSide(min_side_);
    }
    if ((_value = getSector()) != wildcard_) {
        if (_value < max_sector_)
            return setSector(_value + 1);
        setSector(min_sector_);
    }
    if ((_value = getYoke()) != wildcard_) {
        if (_value < max_yoke_)
            return setYoke(_value + 1);
        setYoke(min_yoke_);
    }
    if ((_value = getRegion()) != wildcard_) {
        if (_value < max_region_)
            return setRegion(_value + 1);
        setRegion(min_region_);
    }
    return *this;
}

inline RPCLBLink RPCLBLink::operator++(int)
{
    RPCLBLink _return(*this);
    ++(*this);
    return _return;
}

inline RPCLBLink & RPCLBLink::operator--()
{
    int _value(0);
    if ((_value = getConnector()) != wildcard_) {
        if (_value > min_connector_)
            return setConnector(_value - 1);
        setConnector(max_connector_);
    }
    if ((_value = getLinkBoard()) != wildcard_) {
        if (_value > min_linkboard_)
            return setLinkBoard(_value - 1);
        setLinkBoard(max_linkboard_);
    }
    if ((_value = getRadial()) != wildcard_) {
        if (_value > min_radial_)
            return setRadial(_value - 1);
        setRadial(max_radial_);
    }
    if ((_value = getFibre()) != wildcard_) {
        if (_value > min_fibre_)
            return setFibre(_value - 1);
        setFibre(max_fibre_);
    }
    if ((_value = getWheelOrDisk()) != wildcard_) {
        if (_value > min_wheelordisk_)
            return setWheelOrDisk(_value - 1);
        setWheelOrDisk(max_wheelordisk_);
    }
    if ((_value = getSide()) != wildcard_) {
        if (_value > min_side_)
            return setSide(_value - 1);
        setSide(max_side_);
    }
    if ((_value = getSector()) != wildcard_) {
        if (_value > min_sector_)
            return setSector(_value - 1);
        setSector(max_sector_);
    }
    if ((_value = getYoke()) != wildcard_) {
        if (_value > min_yoke_)
            return setYoke(_value - 1);
        setYoke(max_yoke_);
    }
    if ((_value = getRegion()) != wildcard_) {
        if (_value > min_region_)
            return setRegion(_value - 1);
        setRegion(max_region_);
    }
    return *this;
}

inline RPCLBLink RPCLBLink::operator--(int)
{
    RPCLBLink _return(*this);
    --(*this);
    return _return;
}

inline int RPCLBLink::bf_get(int const _min, ::uint32_t const _mask, int const _pos) const
{
    ::uint32_t _value(id_ & _mask);
    if (_value == 0)
        return wildcard_;
    return _min + (int)(_value >> _pos) - 1;
}

inline RPCLBLink & RPCLBLink::bf_set(int const _min, int const _max, ::uint32_t const _mask, int const _pos, int const _value)
{
    if (_value >= _min && _value <= _max) {
        id_ &= ~_mask;
        id_ |= (((::uint32_t)(_value - _min + 1) << _pos) & _mask);
    } else if (_value == wildcard_)
        id_ &= ~_mask;
    else
        throw cms::Exception("OutOfRange")
            << "Out-of-range input for RPCLBLink::bf_set, position " << _pos << ": " << _value;
    return *this;
}

inline std::ostream & RPCLBLink::bf_stream(std::ostream & _ostream, int const _min, ::uint32_t const _mask, int const _pos) const
{
    ::uint32_t _value(id_ & _mask);
    if (_value == 0)
        return (_ostream << '*');
    return (_ostream << (_min + (int)(_value >> _pos) - 1));
}

#endif // CondFormats_RPCObjects_RPCLBLink_icc
