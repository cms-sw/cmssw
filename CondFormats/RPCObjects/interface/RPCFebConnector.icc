#ifndef CondFormats_RPCObjects_RPCFebConnector_icc
#define CondFormats_RPCObjects_RPCFebConnector_icc

#include "CondFormats/RPCObjects/interface/RPCFebConnector.h"

#include "FWCore/Utilities/interface/Exception.h"

inline unsigned int RPCFebConnector::bit_count(::uint16_t _value)
{
    // sum per nibble
    _value -= ((  (_value >> 1) & 0x7777)
               + ((_value >> 2) & 0x3333)
               + ((_value >> 3) & 0x1111)
               );
    _value = (_value + (_value >> 4)) & 0x0f0f;
    return ((_value + (_value >> 8)) & 0x1f);
}

inline void RPCFebConnector::reset()
{
    first_strip_ = 1;
    slope_ = 1;
    channels_ = 0x0;
    rpc_det_id_ = RPCDetId(0, 0, 1, 1, 1, 1, 0).rawId();
}

inline RPCDetId RPCFebConnector::getRPCDetId() const
{
    return RPCDetId(rpc_det_id_);
}

inline unsigned int RPCFebConnector::getFirstStrip() const
{
    return first_strip_;
}

inline int RPCFebConnector::getSlope() const
{
    return slope_;
}

inline ::uint16_t RPCFebConnector::getChannels() const
{
    return channels_;
}

inline RPCFebConnector & RPCFebConnector::setRPCDetId(RPCDetId const & _rpc_det_id)
{
    rpc_det_id_ = _rpc_det_id.rawId();
    return *this;
}

inline RPCFebConnector & RPCFebConnector::setFirstStrip(unsigned int _first_strip)
{
    if (_first_strip >= min_first_strip_ && _first_strip <= max_first_strip_)
        first_strip_ = _first_strip;
    else
        throw cms::Exception("OutOfRange")
            << "Out-of-range input for RPCFebConnector first strip: " << _first_strip;
    return *this;
}

inline RPCFebConnector & RPCFebConnector::setSlope(int _slope)
{
    slope_ = (_slope < 0 ? -1 : 1);
    return *this;
}

inline RPCFebConnector & RPCFebConnector::setChannels(::uint16_t _channels)
{
    channels_ = _channels;
    return *this;
}

inline bool RPCFebConnector::isActive(unsigned int _channel) const
{
    if (_channel > 0 && _channel <= nchannels_)
        return (channels_ & (0x1 << (_channel - 1)));
    return false;
}

inline unsigned int RPCFebConnector::getNChannels() const
{
    return bit_count(channels_);
}

inline unsigned int RPCFebConnector::getStrip(unsigned int _channel) const
{
    if (!isActive(_channel))
        return 0;
    int _active_channels = bit_count(::uint16_t(channels_ & ((0x1 << (_channel - 1)) - 1)));
    return (int)first_strip_ + slope_ * _active_channels;
}

inline bool RPCFebConnector::hasStrip(unsigned int _strip) const
{
    int _offset = slope_ * (_strip - first_strip_);
    return (_offset >=0 && _offset < (int)getNChannels());
}

inline unsigned int RPCFebConnector::getChannel(unsigned int _strip) const
{
    int _offset = slope_ * (_strip - first_strip_);
    if (_offset < 0 || _offset >= (int)getNChannels())
        return 0;
    ::uint16_t _channels(channels_);
    for (unsigned int _channel = 1 ; _channels ; _channels >>= 1, ++_channel)
        if (_channels & 0x1) {
            if (!_offset)
                return _channel;
            --_offset;
        }
    return 0;
}

#endif // CondFormats_RPCObjects_RPCFebConnector_icc
