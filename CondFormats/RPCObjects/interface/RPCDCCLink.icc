#ifndef CondFormats_RPCObjects_RPCDCCLink_icc
#define CondFormats_RPCObjects_RPCDCCLink_icc

#include "CondFormats/RPCObjects/interface/RPCDCCLink.h"

#include "FWCore/Utilities/interface/Exception.h"

inline ::uint32_t RPCDCCLink::getId() const
{
    return id_;
}

inline RPCDCCLink::operator ::uint32_t() const
{
    return id_;
}

inline bool RPCDCCLink::matches(RPCDCCLink const & _rhs) const
{
    return ((id_ & _rhs.getMask()) == (getMask() & _rhs.id_));
}

inline void RPCDCCLink::setId(::uint32_t const & _id)
{
    id_ = _id;
}

inline void RPCDCCLink::reset()
{
    id_ = 0x0;
}

// Field Getters
inline int RPCDCCLink::getFED() const
{
    return bf_get(min_fed_, mask_fed_, pos_fed_);
}

inline int RPCDCCLink::getDCCInput() const
{
    return bf_get(min_dccinput_, mask_dccinput_, pos_dccinput_);
}

inline int RPCDCCLink::getTBInput() const
{
    return bf_get(min_tbinput_, mask_tbinput_, pos_tbinput_);
}

// Field Setters
inline RPCDCCLink & RPCDCCLink::setFED(int _fed)
{
    return bf_set(min_fed_, max_fed_, mask_fed_, pos_fed_, _fed);
}

inline RPCDCCLink & RPCDCCLink::setDCCInput(int _dccinput)
{
    return bf_set(min_dccinput_, max_dccinput_, mask_dccinput_, pos_dccinput_, _dccinput);
}

inline RPCDCCLink & RPCDCCLink::setTBInput(int _tbinput)
{
    return bf_set(min_tbinput_, max_tbinput_, mask_tbinput_, pos_tbinput_, _tbinput);
}

inline bool RPCDCCLink::operator<(RPCDCCLink const & _rhs) const
{
    return (id_ < _rhs.id_);
}

inline bool RPCDCCLink::operator==(RPCDCCLink const & _rhs) const
{
    return (id_ == _rhs.id_);
}

inline bool RPCDCCLink::operator!=(RPCDCCLink const & _rhs) const
{
    return (id_ != _rhs.id_);
}

inline bool RPCDCCLink::operator<(::uint32_t const & _rhs) const
{
    return (id_ < _rhs);
}

inline bool RPCDCCLink::operator==(::uint32_t const & _rhs) const
{
    return (id_ == _rhs);
}

inline bool RPCDCCLink::operator!=(::uint32_t const & _rhs) const
{
    return (id_ != _rhs);
}

inline RPCDCCLink & RPCDCCLink::operator++()
{
    int _value(0);
    if ((_value = getTBInput()) != wildcard_) {
        if (_value < max_tbinput_)
            return setTBInput(_value + 1);
        setTBInput(min_tbinput_);
    }
    if ((_value = getDCCInput()) != wildcard_) {
        if (_value < max_dccinput_)
            return setDCCInput(_value + 1);
        setDCCInput(min_dccinput_);
    }
    if ((_value = getFED()) != wildcard_) {
        if (_value < max_fed_)
            return setFED(_value + 1);
        setFED(min_fed_);
    }
    return *this;
}

inline RPCDCCLink RPCDCCLink::operator++(int)
{
    RPCDCCLink _return(*this);
    ++(*this);
    return _return;
}

inline RPCDCCLink & RPCDCCLink::operator--()
{
    int _value(0);
    if ((_value = getTBInput()) != wildcard_) {
        if (_value > min_tbinput_)
            return setTBInput(_value - 1);
        setTBInput(max_tbinput_);
    }
    if ((_value = getDCCInput()) != wildcard_) {
        if (_value > min_dccinput_)
            return setDCCInput(_value - 1);
        setDCCInput(max_dccinput_);
    }
    if ((_value = getFED()) != wildcard_) {
        if (_value > min_fed_)
            return setFED(_value - 1);
        setFED(max_fed_);
    }
    return *this;
}

inline RPCDCCLink RPCDCCLink::operator--(int)
{
    RPCDCCLink _return(*this);
    --(*this);
    return _return;
}

inline int RPCDCCLink::bf_get(int const _min, ::uint32_t const _mask, int const _pos) const
{
    ::uint32_t _value(id_ & _mask);
    if (_value == 0)
        return wildcard_;
    return _min + (int)(_value >> _pos) - 1;
}

inline RPCDCCLink & RPCDCCLink::bf_set(int const _min, int const _max, ::uint32_t const _mask, int const _pos, int const _value)
{
    if (_value >= _min && _value <= _max) {
        id_ &= ~_mask;
        id_ |= (((::uint32_t)(_value - _min + 1) << _pos) & _mask);
    } else if (_value == wildcard_)
        id_ &= ~_mask;
    else
        throw cms::Exception("OutOfRange")
            << "Out-of-range input for RPCDCCLink::bf_set, position " << _pos << ": " << _value;
    return *this;
}

inline std::ostream &  RPCDCCLink::bf_stream(std::ostream & _ostream, int const _min, ::uint32_t const _mask, int const _pos) const
{
    ::uint32_t _value(id_ & _mask);
    if (_value == 0)
        return (_ostream << '*');
    return (_ostream << (_min + (int)(_value >> _pos) - 1));
}

#endif // CondFormats_RPCObjects_RPCDCCLink_icc
