#ifndef CondFormats_PhysicsToolsObjects_Histogram2D_icc
#define CondFormats_PhysicsToolsObjects_Histogram2D_icc

#include <cmath>
#include <cstddef>
#include <algorithm>
#include <numeric>
#include <utility>
#include <vector>

#include "FWCore/Utilities/interface/Exception.h"

#include "CondFormats/PhysicsToolsObjects/interface/Histogram2D.h"

namespace PhysicsTools {
namespace Calibration {

template<typename Value_t, typename AxisX_t, typename AxisY_t>
Histogram2D<Value_t, AxisX_t, AxisY_t>::Histogram2D() :
	stride(0), limitsX(AxisX_t(), AxisX_t()),
	limitsY(AxisY_t(), AxisY_t()), total(Value_t())
{
	totalValid.store(false, std::memory_order_release);
}

template<typename Value_t, typename AxisX_t, typename AxisY_t>
Histogram2D<Value_t, AxisX_t, AxisY_t>::Histogram2D(const Histogram2D &orig) :
	stride(orig.stride), binULimitsX(orig.binULimitsX),
	binULimitsY(orig.binULimitsY), binValues(orig.binValues),
	limitsX(orig.limitsX), limitsY(orig.limitsY),
	total(orig.total),
	rowTotal(orig.rowTotal), columnTotal(orig.columnTotal)
{
	totalValid.store(orig.totalValid.load(std::memory_order_acquire), std::memory_order_release);
}

template<typename Value_t, typename AxisX_t, typename AxisY_t>
template<typename OValue_t, typename OAxisX_t, typename OAxisY_t>
Histogram2D<Value_t, AxisX_t, AxisY_t>::Histogram2D(
		const Histogram2D<OValue_t, OAxisX_t, OAxisY_t> &orig) :
	stride(orig.stride),
	binULimitsX(orig.binULimitsX.begin(), orig.binULimitsX.end()),
	binULimitsY(orig.binULimitsY.begin(), orig.binULimitsY.end()),
	binValues(orig.binValues.begin(), orig.binValues.end()),
	limitsX(orig.limitsX), limitsY(orig.limitsY),
	total(orig.total),
	rowTotal(orig.rowTotal.begin(), orig.rowTotal.end()),
	columnTotal(orig.columnTotal.begin(), orig.columnTotal.end())
{
	totalValid.store(orig.totalValid.load(std::memory_order_acquire), std::memory_order_release);
}

template<typename Value_t, typename AxisX_t, typename AxisY_t>
Histogram2D<Value_t, AxisX_t, AxisY_t>::Histogram2D(
				const std::vector<AxisX_t> &binULimitsX,
				const std::vector<AxisY_t> &binULimitsY) :
	stride(binULimitsX.size() + 1),
	binULimitsX(binULimitsX), binULimitsY(binULimitsY),
	binValues((binULimitsY.size() + 1) * stride),
	limitsX(AxisX_t(), AxisX_t()), limitsY(AxisY_t(), AxisY_t()),
	total(Value_t()),
	rowTotal(binULimitsY.size() + 1), columnTotal(binULimitsX.size() + 1)
{
	totalValid.store(true, std::memory_order_release);
	if (binULimitsX.size() < 2)
		throw cms::Exception("TooFewBinsError")
			<< "Trying to generate degenerate 2D histogram: "
			   "Fewer than one bin in X requested." << std::endl;

	limitsX.min = binULimitsX.front();
	limitsX.max = binULimitsX.back();

	if (binULimitsY.size() < 2)
		throw cms::Exception("TooFewBinsError")
			<< "Trying to generate degenerate 2D histogram: "
			   "Fewer than one bin in Y requested." << std::endl;

	limitsY.min = binULimitsY.front();
	limitsY.max = binULimitsY.back();
}

template<typename Value_t, typename AxisX_t, typename AxisY_t>
template<typename OAxisX_t, typename OAxisY_t>
Histogram2D<Value_t, AxisX_t, AxisY_t>::Histogram2D(
				const std::vector<OAxisX_t> &binULimitsX,
				const std::vector<OAxisY_t> &binULimitsY) :
	stride(binULimitsX.size() + 1),
	binULimitsX(binULimitsX.begin(), binULimitsX.end()),
	binULimitsY(binULimitsY.begin(), binULimitsY.end()),
	binValues((binULimitsY.size() + 1) * stride),
	limitsX(AxisX_t(), AxisX_t()), limitsY(AxisY_t(), AxisY_t()),
	total(Value_t()),
	rowTotal(binULimitsY.size() + 1), columnTotal(binULimitsX.size() + 1)
{
	totalValid.store(true, std::memory_order_release);
	if (binULimitsX.size() < 2)
		throw cms::Exception("TooFewBinsError")
			<< "Trying to generate degenerate 2D histogram: "
			   "Fewer than one bin in X requested." << std::endl;

	limitsX.min = binULimitsX.front();
	limitsX.max = binULimitsX.back();

	if (binULimitsY.size() < 2)
		throw cms::Exception("TooFewBinsError")
			<< "Trying to generate degenerate 2D histogram: "
			   "Fewer than one bin in Y requested." << std::endl;

	limitsY.min = binULimitsY.front();
	limitsY.max = binULimitsY.back();
}

template<typename Value_t, typename AxisX_t, typename AxisY_t>
template<typename OAxisX_t, typename OAxisY_t>
Histogram2D<Value_t, AxisX_t, AxisY_t>::Histogram2D(
		const std::vector<OAxisX_t> &binULimitsX,
		unsigned int nBinsY,
		const PhysicsTools::Calibration::Range<OAxisY_t> &rangeY) :
	stride(binULimitsX.size() + 1),
	binULimitsX(binULimitsX.begin(), binULimitsX.end()),
	binValues((nBinsY + 2) * stride),
	limitsX(AxisX_t(), AxisX_t()), limitsY(rangeY),
	total(Value_t()),
	rowTotal(nBinsY + 2), columnTotal(binULimitsX.size() + 1)
{
	totalValid.store(true, std::memory_order_release);
	if (binULimitsX.size() < 2)
		throw cms::Exception("TooFewBinsError")
			<< "Trying to generate degenerate 2D histogram: "
			   "Fewer than one bin in X requested." << std::endl;

	limitsX.min = binULimitsX.front();
	limitsX.max = binULimitsX.back();

	if (!nBinsY)
		throw cms::Exception("TooFewBinsError")
			<< "Trying to generate degenerate 2D histogram: "
			   "Fewer than one bin in Y requested." << std::endl;
}

template<typename Value_t, typename AxisX_t, typename AxisY_t>
template<typename OAxisX_t, typename OAxisY_t>
Histogram2D<Value_t, AxisX_t, AxisY_t>::Histogram2D(
		unsigned int nBinsX,
		const PhysicsTools::Calibration::Range<OAxisX_t> &rangeX,
		const std::vector<OAxisY_t> &binULimitsY) :
	stride(nBinsX + 2),
	binULimitsY(binULimitsY.begin(), binULimitsY.end()),
	binValues((binULimitsY.size() + 1) * stride),
	limitsX(rangeX), limitsY(AxisY_t(), AxisY_t()),
	total(Value_t()),
	rowTotal(binULimitsY.size() + 1), columnTotal(nBinsX + 2)
{
	totalValid.store(true, std::memory_order_release);
	if (!nBinsX)
		throw cms::Exception("TooFewBinsError")
			<< "Trying to generate degenerate 2D histogram: "
			   "Fewer than one bin in X requested." << std::endl;

	if (binULimitsY.size() < 2)
		throw cms::Exception("TooFewBinsError")
			<< "Trying to generate degenerate 2D histogram: "
			   "Fewer than one bin in Y requested." << std::endl;

	limitsY.min = binULimitsY.front();
	limitsY.max = binULimitsY.back();
}

template<typename Value_t, typename AxisX_t, typename AxisY_t>
template<typename OAxisX_t, typename OAxisY_t>
Histogram2D<Value_t, AxisX_t, AxisY_t>::Histogram2D(
		unsigned int nBinsX,
		const PhysicsTools::Calibration::Range<OAxisX_t> &rangeX,
		unsigned int nBinsY,
		const PhysicsTools::Calibration::Range<OAxisY_t> &rangeY) :
	stride(nBinsX + 2), binValues((nBinsY + 2) * stride),
	limitsX(rangeX), limitsY(rangeY), total(Value_t()),
	rowTotal(nBinsY + 2), columnTotal(nBinsX + 2)
{
	totalValid.store(true, std::memory_order_release);
	if (!nBinsX)
		throw cms::Exception("TooFewBinsError")
			<< "Trying to generate degenerate 2D histogram: "
			   "Fewer than one bin in X requested." << std::endl;

	if (!nBinsY)
		throw cms::Exception("TooFewBinsError")
			<< "Trying to generate degenerate 2D histogram: "
			   "Fewer than one bin in Y requested." << std::endl;
}

template<typename Value_t, typename AxisX_t, typename AxisY_t>
Histogram2D<Value_t, AxisX_t, AxisY_t>::Histogram2D(
			unsigned int nBinsX, AxisX_t minX, AxisX_t maxX,
			unsigned int nBinsY, AxisY_t minY, AxisY_t maxY) :
	stride(nBinsX + 2), binValues((nBinsY + 2) * stride),
	limitsX(minX, maxX), limitsY(minY, maxY),
	total(Value_t()),
	rowTotal(nBinsY + 2), columnTotal(nBinsX + 2)
{
	totalValid.store(true, std::memory_order_release);
	if (!nBinsX)
		throw cms::Exception("TooFewBinsError")
			<< "Trying to generate degenerate 2D histogram: "
			   "Fewer than one bin in X requested." << std::endl;

	if (!nBinsY)
		throw cms::Exception("TooFewBinsError")
			<< "Trying to generate degenerate 2D histogram: "
			   "Fewer than one bin in Y requested." << std::endl;
}

template<typename Value_t, typename AxisX_t, typename AxisY_t>
Histogram2D<Value_t, AxisX_t, AxisY_t>::~Histogram2D()
{
}

template<typename Value_t, typename AxisX_t, typename AxisY_t>
Histogram2D<Value_t, AxisX_t, AxisY_t> &
Histogram2D<Value_t, AxisX_t, AxisY_t>::operator = (const Histogram2D &orig)
{
	stride = orig.stride;
	binULimitsX = orig.binULimitsX;
	binULimitsY = orig.binULimitsY;
	binValues = orig.binValues;
	limitsX = orig.limitsX;
	limitsY = orig.limitsY;
	total = orig.total;
	totalValid.store(orig.totalValid.load(std::memory_order_acquire), std::memory_order_release);
	rowTotal = orig.rowTotal;
	columnTotal = orig.columnTotal;
	return *this;
}

template<typename Value_t, typename AxisX_t, typename AxisY_t>
template<typename OValue_t, typename OAxisX_t, typename OAxisY_t>
Histogram2D<Value_t, AxisX_t, AxisY_t> &Histogram2D<Value_t, AxisX_t, AxisY_t>::operator = (
		const Histogram2D<OValue_t, OAxisX_t, OAxisY_t> &orig)
{
	stride = orig.stride;
	binULimitsX = std::vector<AxisX_t>(orig.binULimitsX.begin(),
	                                   orig.binULimitsX.end());
	binULimitsY = std::vector<AxisY_t>(orig.binULimitsY.begin(),
	                                   orig.binULimitsY.end());
	binValues = std::vector<Value_t>(orig.binValues.begin(),
	                                 orig.binValues.end());
	limitsX = orig.limitsX;
	limitsY = orig.limitsY;
	total = orig.total;
	totalValid.store(orig.totalValid.load(std::memory_order_acquire), std::memory_order_release);
	rowTotal = std::vector<Value_t>(orig.rowTotal.begin(),
	                                orig.rowTotal.end());
	columnTotal = std::vector<Value_t>(orig.columnTotal.begin(),
	                                   orig.columnTotal.end());
	return *this;
}

template<typename Value_t, typename AxisX_t, typename AxisY_t>
void Histogram2D<Value_t, AxisX_t, AxisY_t>::reset()
{
	std::fill(binValues.begin(), binValues.end(), Value_t());
	total = Value_t();
	totalValid.store(true, std::memory_order_release);
	rowTotal.clear();
	columnTotal.clear();
}

template<typename Value_t, typename AxisX_t, typename AxisY_t>
void Histogram2D<Value_t, AxisX_t, AxisY_t>::setBinContent(
						int bin, Value_t value)
{
	if (bin < 0 || (unsigned int)bin >= binValues.size())
		throw cms::Exception("RangeError")
			<< "Histogram2D bin " << bin << " out of range "
			   "[0, " << (binValues.size() - 1) << "]." << std::endl;

	binValues[bin] = value;
	totalValid.store(false, std::memory_order_release);
	rowTotal.clear();
	columnTotal.clear();
}

template<typename Value_t, typename AxisX_t, typename AxisY_t>
Value_t Histogram2D<Value_t, AxisX_t, AxisY_t>::normalizedXValue(
						AxisX_t x, AxisY_t y) const
{
	int binX = findBinX(x);
	int binY = findBinY(y);
	return binContent(bin2D(binX, binY)) / normalizationX(binY);
}

template<typename Value_t, typename AxisX_t, typename AxisY_t>
Value_t Histogram2D<Value_t, AxisX_t, AxisY_t>::normalizedYValue(
						AxisX_t x, AxisY_t y) const
{
	int binX = findBinX(x);
	int binY = findBinY(y);
	return binContent(bin2D(binX, binY)) / normalizationY(binX);
}

template<typename Value_t, typename AxisX_t, typename AxisY_t>
Value_t Histogram2D<Value_t, AxisX_t, AxisY_t>::normalizedXError(
						AxisX_t x, AxisY_t y) const
{
	int binX = findBinX(x);
	int binY = findBinY(y);
	return std::sqrt(binContent(bin2D(binX, binY))) / normalizationX(binY);
}

template<typename Value_t, typename AxisX_t, typename AxisY_t>
Value_t Histogram2D<Value_t, AxisX_t, AxisY_t>::normalizedYError(
						AxisX_t x, AxisY_t y) const
{
	int binX = findBinX(x);
	int binY = findBinY(y);
	return std::sqrt(binContent(bin2D(binX, binY))) / normalizationY(binX);
}

template<typename Value_t, typename AxisX_t, typename AxisY_t>
void Histogram2D<Value_t, AxisX_t, AxisY_t>::fill(
					AxisX_t x, AxisY_t y, Value_t weight)
{
	int bin = findBin(x, y);
	binValues[bin] += weight;
	totalValid.store(false, std::memory_order_release);
	rowTotal.clear();
	columnTotal.clear();
}

template<typename Value_t, typename AxisX_t, typename AxisY_t>
void Histogram2D<Value_t, AxisX_t, AxisY_t>::setValues(
					const std::vector<Value_t> &values)
{
	if (values.size() != binValues.size())
		throw cms::Exception("InvalidVectorSizeError")
			<< "Invalid vector size while setting "
			   "2D histogram values" << std::endl;

	binValues = values;
	totalValid.store(false, std::memory_order_release);
	rowTotal.clear();
	columnTotal.clear();
}

template<typename Value_t, typename AxisX_t, typename AxisY_t>
template<typename OValue_t>
void Histogram2D<Value_t, AxisX_t, AxisY_t>::setValues(
					const std::vector<OValue_t> &values)
{
	if (values.size() != binValues.size())
		throw cms::Exception("InvalidVectorSizeError")
			<< "Invalid vector size while setting "
			   "2D histogram values" << std::endl;

	std::copy(values.begin(), values.end(), binValues.begin());
	totalValid.store(false, std::memory_order_release);
	rowTotal.clear();
	columnTotal.clear();
}

template<typename Value_t, typename AxisX_t, typename AxisY_t>
typename Histogram2D<Value_t, AxisX_t, AxisY_t>::RangeX
Histogram2D<Value_t, AxisX_t, AxisY_t>::binRangeX(int binX) const
{
	if (binX < 1 || (unsigned int)binX > stride - 2)
		throw cms::Exception("RangeError")
			<< "Histogram2D X bin " << binX << " out of range "
			<< "[1, " << (stride - 2) << "]." << std::endl;

	if (hasEquidistantBinsX()) {
		AxisX_t min = (AxisX_t)(binX - 1) / (stride - 2);
		AxisX_t max = (AxisX_t)binX / (stride - 2);
		min *= limitsX.width();
		min += limitsX.min;
		max *= limitsX.width();
		max += limitsX.min;
		return RangeX(min, max);
	} else
		return RangeX(binULimitsX[binX - 1], binULimitsX[binX]);
}

template<typename Value_t, typename AxisX_t, typename AxisY_t>
typename Histogram2D<Value_t, AxisX_t, AxisY_t>::RangeY
Histogram2D<Value_t, AxisX_t, AxisY_t>::binRangeY(int binY) const
{
	unsigned int size = binValues.size() / stride;
	if (binY < 1 || (unsigned int)binY > size - 2)
		throw cms::Exception("RangeError")
			<< "Histogram2D Y bin " << binY << " out of range "
			<< "[1, " << (size - 2) << "]." << std::endl;

	if (hasEquidistantBinsY()) {
		AxisY_t min = (AxisY_t)(binY - 1) / (size - 2);
		AxisY_t max = (AxisY_t)binY / (size - 2);
		min *= limitsY.width();
		min += limitsY.min;
		max *= limitsY.width();
		max += limitsY.min;
		return RangeY(min, max);
	} else
		return RangeY(binULimitsY[binY - 1], binULimitsY[binY]);
}

template<typename Value_t, typename AxisX_t, typename AxisY_t>
std::pair<typename Histogram2D<Value_t, AxisX_t, AxisY_t>::RangeX,
          typename Histogram2D<Value_t, AxisX_t, AxisY_t>::RangeY>
Histogram2D<Value_t, AxisX_t, AxisY_t>::binRange(int bin) const
{
	std::size_t size = binValues.size();
	if (bin < 1 || (unsigned int)bin > size - 2)
		throw cms::Exception("RangeError")
			<< "Histogram2D bin " << bin << " out of range "
			<< "[1, " << (size - 2) << "]." << std::endl;

	return std::make_pair(binRangeX(bin % stride),
	                      binRangeY(bin / stride));
}

template<typename Value_t, typename AxisX_t, typename AxisY_t>
int Histogram2D<Value_t, AxisX_t, AxisY_t>::findBinX(AxisX_t x) const
{
	if (hasEquidistantBinsX()) {
		x -= limitsX.min;
		x *= stride - 2;
		x /= limitsX.width();
		unsigned int iStride = stride;
		return clamp(0, (int)(std::floor(x)) + 1, (int)iStride - 1);
	} else
		return std::upper_bound(binULimitsX.begin(),
		                        binULimitsX.end(), x) -
		       binULimitsX.begin();
}

template<typename Value_t, typename AxisX_t, typename AxisY_t>
int Histogram2D<Value_t, AxisX_t, AxisY_t>::findBinY(AxisY_t y) const
{
	unsigned int size = binValues.size() / stride;
	if (hasEquidistantBinsY()) {
		y -= limitsY.min;
		y *= size - 2;
		y /= limitsY.width();
		return clamp(0, (int)(std::floor(y)) + 1, (int)size - 1);
	} else
		return std::upper_bound(binULimitsY.begin(),
		                        binULimitsY.end(), y) -
		       binULimitsY.begin();
}

template<typename Value_t, typename AxisX_t, typename AxisY_t>
Value_t Histogram2D<Value_t, AxisX_t, AxisY_t>::normalization() const
{
	if (!totalValid.load(std::memory_order_acquire)) {
		total = std::accumulate(binValues.begin() + 1, binValues.end() - 1, Value_t());
		totalValid.store(true, std::memory_order_release);
	}

	return total;
}

template<typename Value_t, typename AxisX_t, typename AxisY_t>
Value_t Histogram2D<Value_t, AxisX_t, AxisY_t>::normalizationX(int binY) const
{
	if (rowTotal.empty()) {
		rowTotal.resize(binValues.size() / stride);
		typename std::vector<Value_t>::iterator sum = rowTotal.begin();
		for(typename std::vector<Value_t>::const_iterator iter =
							binValues.begin();
		    iter != binValues.end(); iter += stride)
			*sum++ = std::accumulate(iter + 1, iter + (stride - 1),
			                         Value_t());
	}

	if (binY < 0 || (unsigned int)binY >= binValues.size() / stride)
		throw cms::Exception("RangeError")
			<< "Histogram2D bin " << binY << " in Y out of range "
			   "[0, " << (binValues.size() / stride - 1) << "]." << std::endl;

	return rowTotal[binY];
}

template<typename Value_t, typename AxisX_t, typename AxisY_t>
Value_t Histogram2D<Value_t, AxisX_t, AxisY_t>::normalizationY(int binX) const
{
	if (columnTotal.empty()) {
		columnTotal.resize(stride);
		typename std::vector<Value_t>::iterator sum =
							columnTotal.begin();
		for(typename std::vector<Value_t>::const_iterator col =
							binValues.begin();
		    col != binValues.begin() + stride; ++col) {
			Value_t value = Value_t();
			for(typename std::vector<Value_t>::const_iterator pos =
								col + stride;
			    pos < (binValues.end() - stride); pos += stride)
				value += *pos;
			*sum++ = value;
		}
	}

	if (binX < 0 || (unsigned int)binX >= stride)
		throw cms::Exception("RangeError")
			<< "Histogram2D bin " << binX << " in X out of range "
			   "[0, " << (stride - 1) << "]." << std::endl;

	return columnTotal[binX];
}

} // namespace Calibration
} // namespace PhysicsTools

#endif // CondFormats_PhysicsToolsObjects_Histogram2D_icc
